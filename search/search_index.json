{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u8fd9\u662f\u9996\u9875!","title":"Home"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/00_Python%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D/","text":"1.python\u8bed\u8a00\u7684\u7279\u6027 \u89e3\u91ca \u3001 \u5f3a \u3001 \u52a8 2.python\u7684\u5783\u573e\u56de\u6536\u673a\u5236 3.\u503c\u7c7b\u578b ( \u503c\u8bed\u4e49 ) \u548c\u5f15\u7528\u7c7b\u578b ( \u5f15\u7528\u8bed\u4e49 ) 4.\u5b57\u7b26\u7f16\u7801 ASCII \u3001 unicode \u3001 utf-8 \u3001 \u4e71\u7801.. Python\u8bed\u8a00\u7279\u6027 \u00b6 \u89e3\u91ca \uff5c\u7f16\u8bd1\u578b\u8bed\u8a00\u3001 \u5f3a \uff5c\u5f31\u7c7b\u578b\u3001 \u52a8 \uff5c\u9759\u7c7b\u578b \u89e3\u91ca\u578b\u3001\u7f16\u8bd1\u578b \u00b6 \u53c2\u8003\u94fe\u63a5: http://c.biancheng.net/view/4136.html https://zhuanlan.zhihu.com/p/38855233 https://www.jianshu.com/p/3bd1e1e44991 \u521a\u5f00\u59cb\u63a5\u89e6Python\u7684\u65f6, \u8001\u5e08\u5c31\u544a\u8bc9\u6211\"python\u662f\u89e3\u91ca\u578b\u8bed\u8a00\".. \u8fd9\u6837\u7684\u8bf4\u6cd5\u6ca1\u9519,\u4f46\u4e0d\u591f\u5177\u4f53,\u4e0d\u4e25\u8c28. \u9996\u5148\u660e\u786e\u4e00\u70b9 , python \u3001 java \u3001 c\u8fd9\u4e9b\u9ad8\u7ea7\u8bed\u8a00\u4e0d\u7ba1\u662f\u7f16\u8bd1\u578b\u8fd8\u662f\u89e3\u91ca\u578b , \u90fd\u9700\u8981\u8f6c\u6362\u6210\u8ba1\u7b97\u673a\u80fd\u542c\u5f97\u61c2\u7684\u673a\u5668\u8bed\u8a00 ( 01 \u7684\u4e8c\u8fdb\u5236 ), \u800c\u8f6c\u6362\u7684\u8fc7\u7a0b\u5c31\u9700\u8981\u501f\u52a9\u7f16\u8bd1\u5668\u6216\u89e3\u91ca\u5668 . \"\"\" \u7f16\u8bd1\u578b VS \u89e3\u91ca\u578b \"\"\" \u25cb \u7f16\u8bd1\u578b\u8bed\u8a00 : \u4f7f\u7528\u7f16\u8bd1\u5668 , \u63d0\u524d\u5c06\u6240\u6709\u6e90\u4ee3\u7801\u4e00\u6b21\u6027\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u6307\u4ee4 , \u5373\u751f\u6210\u4e00\u4e2a\u53ef\u6267\u884c\u7a0b\u5e8f \u201c \u4e00\u6b21\u7f16\u8bd1 \uff0c \u65e0\u9650\u6b21\u8fd0\u884c \u201d , \u751f\u6210\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u4e0d\u518d\u9700\u8981\u6e90\u4ee3\u7801\u548c\u7f16\u8bd1\u5668 , So , \u7f16\u8bd1\u578b\u8bed\u8a00\u53ef\u4ee5\u8131\u79bb\u5f00\u53d1\u73af\u5883\u8fd0\u884c \u4f46\u7f16\u8bd1\u578b\u8bed\u8a00\u4e0d\u80fd\u8de8\u5e73\u53f0 , \u539f\u56e0\u6709\u4e8c : 1 > \u53ef\u6267\u884c\u7a0b\u5e8f\u4e0d\u80fd\u8de8\u5e73\u53f0 , eg : \u4e0d\u80fd\u5c06Windows\u4e0b\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u62ff\u5230Linux\u4e0b\u4f7f\u7528 2 > \u6e90\u4ee3\u7801\u4e0d\u80fd\u8de8\u5e73\u53f0 , eg : Windows\u5e73\u53f0\u4e0bSleep\u51fd\u6570\u4ee5\u6beb\u79d2\u4e3a\u65f6\u95f4\u5355\u4f4d ; Linux\u5e73\u53f0\u4e0b\u5219\u662f\u4ee5\u79d2\u4e3a\u5355\u4f4d \u25cb \u89e3\u91ca\u578b\u8bed\u8a00 : \u4f7f\u7528\u89e3\u91ca\u5668 , \u6bcf\u6b21\u6267\u884c\u7a0b\u5e8f\u90fd\u9700\u8981\u8fb9\u8f6c\u6362\u8fb9\u6267\u884c . \u53ea\u5c06\u7528\u5230\u7684\u6e90\u4ee3\u7801\u8f6c\u6362\u6210\u673a\u5668\u7801 ( \u4e8c\u8fdb\u5236 ), \u7528\u4e0d\u5230\u7684\u4e0d\u9700\u5904\u7406 . \u201c \u4e00\u6b21\u7f16\u5199 , \u5230\u5904\u8fd0\u884c \u201d \u89e3\u91ca\u578b\u8bed\u8a00\u662f\u8de8\u5e73\u53f0\u7684 , \u6ce8\u610f ! \u6240\u8bf4\u7684\u8de8\u5e73\u53f0 , \u662f\u6307\u6e90\u4ee3\u7801\u8de8\u5e73\u53f0 , \u800c\u975e\u89e3\u91ca\u5668\u8de8\u5e73\u53f0 eg : \u4ee5Python\u4e3a\u4f8b , Python\u5b98\u65b9\u9488\u5bf9\u4e0d\u540c\u5e73\u53f0 ( \u6bd4\u5982 Windows \u3001 macOS \u3001 Linux ) \u5f00\u53d1\u4e86\u4e0d\u540c\u7684\u89e3\u91ca\u5668 \u8fd9\u4e9b\u89e3\u91ca\u5668\u9075\u5b88\u540c\u6837\u7684\u8bed\u6cd5 , \u6240\u4ee5\u540c\u4e00\u4efd\u6e90\u4ee3\u7801\u624d\u80fd\u5728\u4e0d\u540c\u5e73\u53f0\u4e0a\u62e5\u6709\u76f8\u540c\u7684\u6267\u884c\u7ed3\u679c \"\"\" \u4e0b\u8f7d\u7a0b\u5e8f \"\"\" \u5f53\u6211\u4eec\u8bf4 \"\u4e0b\u8f7d\u4e00\u4e2a\u7a0b\u5e8f(\u8f6f\u4ef6)\" \u65f6 , \u4e0d\u540c\u7c7b\u578b\u7684\u8bed\u8a00\u6709\u4e0d\u540c\u7684\u542b\u4e49 \u5bf9\u4e8e\u7f16\u8bd1\u578b\u8bed\u8a00 , \u4e0b\u8f7d\u5230\u7684\u662f\u53ef\u6267\u884c\u6587\u4ef6 , \u6e90\u4ee3\u7801\u88ab\u4f5c\u8005\u4fdd\u7559 , \u6240\u4ee5\u7f16\u8bd1\u578b\u8bed\u8a00\u7684\u7a0b\u5e8f\u4e00\u822c\u662f\u95ed\u6e90\u7684 ; \u5bf9\u4e8e\u89e3\u91ca\u578b\u8bed\u8a00 , \u4e0b\u8f7d\u5230\u7684\u662f\u6240\u6709\u6e90\u4ee3\u7801 , \u56e0\u4e3a\u4f5c\u8005\u4e0d\u7ed9\u6e90\u4ee3\u7801\u5c31\u6ca1\u6cd5\u8fd0\u884c , \u6240\u4ee5\u89e3\u91ca\u578b\u8bed\u8a00\u7684\u7a0b\u5e8f\u4e00\u822c\u662f\u5f00\u6e90\u7684 . \"\"\" python\u865a\u62df\u673a \u5c06\u9700\u7528\u5230\u7684py\u6e90\u4ee3\u7801/\u9700\u6267\u884c\u7684py\u6587\u4ef6 --(\u8fdb\u884c\u7f16\u8bd1)-- \u5b57\u8282\u7801 --(\u901a\u8fc7python\u7684PVM\u865a\u62df\u673a\u9010\u884c\u89e3\u91ca)-- \u673a\u5668\u7801 \"\"\" \u968f\u7740Java\u7b49\u57fa\u4e8e\u865a\u62df\u673a\u7684\u8bed\u8a00\u7684\u5174\u8d77 , \u6211\u4eec\u4e0d\u80fd\u518d\u628a\u8bed\u8a00\u7eaf\u7cb9\u5730\u5206\u6210\u89e3\u91ca\u578b\u548c\u7f16\u8bd1\u578b\u8fd9\u4e24\u79cd Python\u662f\u4e00\u95e8\u5148\u7f16\u8bd1\u540e\u89e3\u91ca\u7684\u8bed\u8a00 . \u7f16\u8bd1\u7684\u7ed3\u679c \"\u5b57\u8282\u7801\" \u4f1a\u653e\u5230\u5185\u5b58\u7684PyCodeObject\u4e2d , \u82e5\u9700\u6301\u4e45\u5316\u4fdd\u5b58 , \u4f1a\u5199\u5165pyc\u6587\u4ef6 \u4ec0\u4e48\u65f6\u5019\u9700\u8981pyc \uff1f import\u7684\u65f6\u5019 , \u4f1a\u5c06import\u7684\u6a21\u5757\u7f16\u8bd1\u6210 . pyc\u6587\u4ef6 , \u4fbf\u4e8e\u4e0b\u6b21\u8fd0\u884c\u52a0\u5feb\u6548\u7387 . pyc\u6587\u4ef6\u7684\u8fc7\u671f : \u4f1a\u8ddfimport\u7684\u6a21\u5757\u6700\u540e\u7684\u4fee\u6539\u65e5\u671f\u8fdb\u884c\u5bf9\u6bd4 , \u82e5py\u6587\u4ef6 / \u6a21\u5757\u4fee\u6539\u4e86 , . pyc\u6587\u4ef6\u5c31\u4f1a\u91cd\u65b0\u751f\u6210 # -- python\u672c\u8d28\u4e0ejava c# \u4e00\u6837,python\u7a0b\u5e8f\u7684\u6267\u884c\u539f\u7406\u90fd\u53ef\u4ee5\u7528\u4e24\u4e2a\u5b57\u6982\u62ec -- \u865a\u62df\u673a\u3001\u5b57\u8282\u7801 1 > \u5728demo . py\u771f\u6b63\u8fd0\u884c\u4e4b\u524d , python\u7f16\u8bd1\u5668\u8981\u5bf9py\u6587\u4ef6\u4e2d\u7684\u6e90\u4ee3\u7801\u8fdb\u884c\u7f16\u8bd1 . 2 > \u5728\u7a0b\u5e8f\u8fd0\u884c\u671f\u95f4 , \u7f16\u8bd1\u7ed3\u679c\u5b58\u5728\u4e8e\u5185\u5b58\u7684PyCodeObject\u5bf9\u8c61\u4e2d , python\u7ed3\u675f\u8fd0\u884c\u540e , \u82e5\u7f16\u8bd1\u7ed3\u679c\u4fdd\u5b58\u5230\u4e86pyc\u6587\u4ef6\u4e2d , \u90a3\u4e48\u4e0b\u4e00\u6b21\u7684\u8fd0\u884c\u76f8\u540c\u7684\u7a0b\u5e8f\u7684\u65f6\u5019 , python\u4f1a\u6839\u636epyc\u6587\u4ef6\u4e2d\u8bb0\u5f55\u7684\u7f16\u8bd1\u7ed3\u679c\u76f4\u63a5\u5efa\u7acb\u5185\u5b58\u4e2d\u7684PyCodeObject\u5bf9\u8c61 , \u800c\u4e0d\u7528\u5bf9\u6e90\u6587\u4ef6\u518d\u6b21\u8fdb\u884c\u7f16\u8bd1 . 3 > demo . py\u6a21\u5757\u4f1a\u5bf9\u5e94\u4e00\u4e2aPyCodeObject\u5bf9\u8c61 , \u800c\u91cc\u9762\u7684\u4ee3\u7801\u5757\u90fd\u4f1a\u4e00\u4e00\u5bf9\u5e94\u4e00\u4e2aPycodeObject\u5bf9\u8c61 . \u662f\u5d4c\u5957\u7684 ! 4 > demo . py\u5bf9\u5e94\u7684PyCodeObject\u5bf9\u8c61\u5305\u542b\u5176\u4ed6PyCodeObject\u5bf9\u8c61 . 5 > \u4f5c\u7528\u57df \u3001 \u4ee3\u7801\u5757 \u3001 scope\u7684\u73af\u5883 \u3001 PycodeObject\u5bf9\u8c61\u90fd\u662f\u5d4c\u5957\u7684 \u6211\u60f3,\u6b63\u56e0\u4e3apython\u652f\u6301\u8de8\u5e73\u53f0,\u6240\u4ee5\u5927\u5bb6\u66f4\u613f\u610f\u79f0python\u662f\u89e3\u91ca\u578b\u8bed\u8a00! \u5f3a\u3001\u52a8 \u00b6 \u52a8\u6001\u8bed\u8a00: a = 10 , a\u4e0d\u7528\u6307\u5b9aint \u8fd0\u884c\u65f6\u624d\u4f1a\u8fdb\u884c\u6570\u636e\u7c7b\u578b\u7684\u68c0\u67e5 \u5f3a\u7c7b\u578b\u8bed\u8a00: \u53d8\u91cf\u7684\u6570\u636e\u7c7b\u578b\u4e00\u65e6\u88ab\u5b9a\u4e49,\u90a3\u5c31\u4e0d\u4f1a\u518d\u6539\u53d8,\u9664\u975e\u8fdb\u884c\u5f3a\u8f6c \u4e0d\u540c\u7c7b\u578b\u7684\u53d8\u91cf\u4e0d\u80fd\u8fdb\u884c\u8fd0\u7b97(\u4e0d\u8003\u8651\u9690\u5f0f\u8f6c\u6362) eg: 5 - '3' \u62a5\u9519 python\u5f88\u5c11\u4f1a\u81ea\u52a8\u8fdb\u884c\u9690\u5f0f\u8f6c\u6362... 5/2.5 = 2.0 int\u7c7b\u578b\u548cfloat\u7c7b\u578b\u8ba1\u7b97\u4f1a\u81ea\u52a8\u628aint\u7c7b\u578b\u8f6c\u6362\u4e3afloat\u7c7b\u578b \u6084\u6084\u544a\u8bc9\u4f60, linux\u4e2d\u7684shell\u662f\u5f31\u7c7b\u578b\u8bed\u8a00 ,shell\u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf,\u968f\u7740\u8c03\u7528\u65b9\u5f0f\u7684\u4e0d\u540c,\u6570\u636e\u7c7b\u578b\u53ef\u968f\u610f\u5207\u6362.. \u5783\u573e\u56de\u6536\u673a\u5236!!! \u00b6 \u53c2\u8003: https://zhuanlan.zhihu.com/p/108683483 \u2605 https://zhuanlan.zhihu.com/p/83251959 Python\u5f15\u5165\u4e86\"\u6807\u8bb0-\u6e05\u9664\"\u4e0e\"\u5206\u4ee3\u56de\u6536\"\u6765\u5206\u522b\u89e3\u51b3\u5f15\u7528\u8ba1\u6570\u7684\u81f4\u547d\u5f31\u70b9\u5faa\u73af\u5f15\u7528\u548c\u5f15\u7528\u8ba1\u6570\u6548\u7387\u4f4e\u7684\u95ee\u9898.. \u53d8\u91cf\u5b58\u50a8 \u00b6 \u5185\u5b58\u4e2d\u6709\u4e24\u5757\u533a\u57df: \u6808\u533a stack\u4e0e \u5806\u533a heap. \u5728\u5b9a\u4e49\u53d8\u91cf\u65f6, \u53d8\u91cf\u540d\u4e0e\u503c\u5185\u5b58\u5730\u5740\u7684\u5173\u8054\u5173\u7cfb \u5b58\u653e\u4e8e\u6808\u533a ( \u547d\u540d\u7a7a\u95f4 ), \u53d8\u91cf\u503c \u5b58\u653e\u4e8e\u5806\u533a, \u5185\u5b58\u7ba1\u7406\u56de\u6536\u7684\u5219\u662f\u5806\u533a\u7684\u5185\u5bb9 \u7b80\u5355\u7406\u89e3\u6808\u533a\u548c\u5806\u533a,\u6808\u533a\u7531\u64cd\u4f5c\u7cfb\u7edf\u81ea\u52a8\u5206\u914d\u91ca\u653e,\u5806\u533a\u7531\u5f00\u53d1\u4eba\u5458\u5206\u914d\u91ca\u653e;\u524d\u8005\u5730\u5740\u8fde\u7eed,\u5177\u5907\u540e\u8fdb\u5148\u51fa\u7684\u7279\u6027,\u540e\u8005\u5730\u5740\u4e0d\u8fde\u7eed,\u7c7b\u4f3c\u4e8e\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u94fe\u8868.. \u4e3e\u4e2a\u6817\u5b50, \u5b9a\u4e49\u4e86\u4e24\u4e2a\u53d8\u91cf x=10 , y=20 \u5f53\u6211\u4eec\u6267\u884c x=y \u65f6, \u5185\u5b58\u4e2d\u7684\u6808\u533a\u4e0e\u5806\u533a\u53d8\u5316\u5982\u4e0b: \u5f15\u7528\u8ba1\u6570 \u00b6 \u5f15\u7528\u8ba1\u6570:\u53d8\u91cf\u503c\u88ab\u53d8\u91cf\u540d\u5173\u8054\u7684\u6b21\u6570 \u5f53\u503c\u4e0d\u518d\u88ab\u4efb\u4f55\u540d\u5b57\u5173\u8054,\u503c\u7684\u5f15\u7528\u8ba1\u6570\u4e3a0\u65f6\u5e94\u8be5\u88abgc\u673a\u5236\u56de\u6536 \u25cb \u5f15\u7528\u8ba1\u6570\u589e\u52a0 -- \u521b\u5efaa = 1\u3001\u76f4\u63a5\u8d4b\u503c b=a \u3001 \u51fd\u6570\u5f62\u53c2 \u3001\u6210\u4e3a\u5bb9\u5668\u5143\u7d20\u7b49 \u25cb \u5f15\u7528\u8ba1\u6570\u51cf\u5c11 -- del\u3001\u88ab\u91cd\u65b0\u8d4b\u503c\u3001\u5bb9\u5668\u9500\u6bc1\u3001\u5220\u9664\u5bb9\u5668\u5143\u7d20\u7b49 \u5f15\u7528\u8ba1\u6570\u7684 \u81f4\u547d\u5f31\u70b9 : \u5bb9\u5668\u5143\u7d20\u7684\u5faa\u73af\u5f15\u7528(\u4e5f\u79f0\u4ea4\u53c9\u5f15\u7528) a = [ 1 , 2 , 3 ] # [1,2,3]\u7684\u5f15\u7528\u8ba1\u6570\u4e3a1 b = [ 4 , 5 , 6 ] # [4,5,6]\u7684\u5f15\u7528\u8ba1\u6570\u4e3a1 a . append ( b ) # [4,5,6]\u7684\u5f15\u7528\u8ba1\u6570\u53d8\u4e3a2 b . append ( a ) # [1,2,3]\u7684\u5f15\u7528\u8ba1\u6570\u53d8\u4e3a2 del a # [1,2,3]\u7684\u5f15\u7528\u8ba1\u6570\u53d8\u4e3a1 del b # [4,5,6]\u7684\u5f15\u7528\u8ba1\u6570\u53d8\u4e3a1 \u503c\u4e0d\u518d\u88ab\u4efb\u4f55\u540d\u5b57\u5173\u8054 , \u503c\u7684\u5f15\u7528\u8ba1\u6570\u4e3a0 , \u5e94\u8be5\u88ab\u56de\u6536\u4f46\u56e0\u4e3a\u5faa\u73af\u5f15\u7528\u7684\u5b58\u5728\u4e0d\u80fd\u88ab\u56de\u6536 .. So , \u5faa\u73af\u5f15\u7528\u662f\u81f4\u547d\u7684 , \u8fd9\u4e0e\u624b\u52a8\u8fdb\u884c\u5185\u5b58\u7ba1\u7406\u6240\u9020\u6210\u7684\u5185\u5b58\u6cc4\u9732\u6beb\u65e0\u533a\u522b .. Ps : \u9b54\u6cd5\u65b9\u6cd5 ` __del__ ` \u6790\u6784\u51fd\u6570 \u6807\u8bb0-\u6e05\u9664 \u00b6 \u6807\u8bb0/\u6e05\u9664\u7b97\u6cd5\u7684\u505a\u6cd5\u662f\u5f53\u5e94\u7528\u7a0b\u5e8f\u53ef\u7528\u7684\u5185\u5b58\u7a7a\u95f4\u88ab\u8017\u5c3d\u7684\u65f6, \u5c31\u4f1a\u505c\u6b62\u6574\u4e2a\u7a0b\u5e8f,\u7136\u540e\u8fdb\u884c\u4e24\u9879\u5de5\u4f5c \u7b2c\u4e00\u9879\u5219\u662f\u6807\u8bb0,\u7b2c\u4e8c\u9879\u5219\u662f\u6e05\u9664 \u4ee5\u524d\u9762a\u3001b\u5217\u8868\u7684\u5faa\u73af\u5f15\u7528\u4e3a\u4f8b. \u5f53\u6211\u4eec\u540c\u65f6\u5220\u9664a\u4e0eb\u65f6,\u4f1a\u6e05\u7406\u5230\u6808\u533a\u4e2da\u4e0eb\u7684\u5185\u5bb9,\u53ea\u5269\u4e0b\u5806\u533a\u5185\u4e8c\u8005\u7684\u76f8\u4e92\u5f15\u7528... \u4e8e\u662f\u5217\u8868a\u4e0eb\u90fd\u672a\u88ab\u6807\u8bb0\u5b58\u6d3b,\u4e8c\u8005\u4f1a\u88ab\u6e05\u7406\u6389,\u8fd9\u6837\u5c31\u89e3\u51b3\u4e86\u5faa\u73af\u5f15\u7528\u5e26\u6765\u7684\u5185\u5b58\u6cc4\u6f0f\u95ee\u9898!!! \u5206\u4ee3\u56de\u6536 \u00b6 \u57fa\u4e8e\u5f15\u7528\u8ba1\u6570\u7684\u56de\u6536\u673a\u5236, \u6bcf\u6b21\u56de\u6536\u5185\u5b58, \u90fd\u9700\u8981\u628a\u6240\u6709\u5bf9\u8c61\u7684\u5f15\u7528\u8ba1\u6570\u90fd\u904d\u5386\u4e00\u904d, \u8fd9\u662f\u975e\u5e38\u6d88\u8017\u65f6\u95f4\u7684 \u4e8e\u662f\u5f15\u5165\u4e86\u5206\u4ee3\u56de\u6536\u6765\u63d0\u9ad8\u56de\u6536\u6548\u7387, \u5206\u4ee3\u56de\u6536\u91c7\u7528\u7684\u662f\u7528\u201c \u7a7a\u95f4\u6362\u65f6\u95f4 \u201d\u7684\u7b56\u7565 \u6838\u5fc3\u601d\u60f3 : \u5b58\u6d3b\u7684\u8d8a\u4e45\u7684\u8d8a\u4e0d\u53ef\u80fd\u662f\u5783\u573e \u5728\u5386\u7ecf\u591a\u6b21\u626b\u63cf\u7684\u60c5\u51b5\u4e0b , \u90fd\u6ca1\u6709\u88ab\u56de\u6536\u7684\u53d8\u91cf , gc\u673a\u5236\u5c31\u4f1a\u8ba4\u4e3a , \u8be5\u53d8\u91cf\u662f\u7ecf\u5e38\u7528\u7684\u53d8\u91cf , gc\u5bf9\u5176\u626b\u63cf\u7684\u9891\u7387\u4f1a\u964d\u4f4e \u5206\u4ee3\u6307\u7684\u662f\u6839\u636e\u5b58\u6d3b\u65f6\u95f4\u6765\u4e3a\u53d8\u91cf\u5212\u5206\u4e0d\u540c\u7b49\u7ea7 ( \u4e5f\u5c31\u662f\u4e0d\u540c\u7684\u4ee3 ), \u56de\u6536\u4f9d\u7136\u662f\u4f7f\u7528\u5f15\u7528\u8ba1\u6570\u4f5c\u4e3a\u56de\u6536\u7684\u4f9d\u636e \u5047\u8bbegc\u673a\u5236\u5212\u5206\u4e863\u4e2a\u4ee3 : \u65b0\u751f\u4ee3 \u3001 \u9752\u6625\u4ee3 \u3001 \u8001\u5e74\u4ee3 1 > \u65b0\u5b9a\u4e49\u7684\u53d8\u91cf , \u653e\u5230\u65b0\u751f\u4ee3\u8fd9\u4e2a\u7b49\u7ea7\u4e2d , \u5047\u8bbe\u6bcf\u96941\u5206\u949f\u626b\u63cf\u65b0\u751f\u4ee3\u4e00\u6b21 , \u5982\u679c\u53d1\u73b0\u53d8\u91cf\u4f9d\u7136\u88ab\u5f15\u7528 , \u90a3\u4e48\u8be5\u5bf9\u8c61\u7684\u6743\u91cd ( \u6743\u91cd\u672c\u8d28\u5c31\u662f\u4e2a\u6574\u6570 ) \u52a0\u4e00 ; 2 > \u5f53\u53d8\u91cf\u7684\u6743\u91cd\u5927\u4e8e\u67d0\u4e2a\u8bbe\u5b9a\u5f97\u503c ( \u5047\u8bbe\u4e3a3 ), \u4f1a\u5c06\u5b83\u79fb\u52a8\u5230\u66f4\u9ad8\u4e00\u7ea7\u7684\u9752\u6625\u4ee3 , \u9752\u6625\u4ee3\u7684gc\u626b\u63cf\u7684\u9891\u7387\u4f4e\u4e8e\u65b0\u751f\u4ee3 ( \u626b\u63cf\u65f6\u95f4\u95f4\u9694\u66f4\u957f ); \u5047\u8bbe5\u5206\u949f\u626b\u63cf\u9752\u6625\u4ee3\u4e00\u6b21 , \u8fd9\u6837\u6bcf\u6b21gc\u9700\u8981\u626b\u63cf\u7684\u53d8\u91cf\u7684\u603b\u4e2a\u6570\u5c31\u53d8\u5c11\u4e86 , \u8282\u7701\u4e86\u626b\u63cf\u7684\u603b\u65f6\u95f4 3 > \u63a5\u4e0b\u6765 , \u9752\u6625\u4ee3\u4e2d\u7684\u5bf9\u8c61 , \u4e5f\u4f1a\u4ee5\u540c\u6837\u7684\u65b9\u5f0f\u88ab\u79fb\u52a8\u5230\u8001\u5e74\u4ee3\u4e2d . \u4e5f\u5c31\u662f\u7b49\u7ea7 ( \u4ee3 ) \u8d8a\u9ad8 , \u88ab\u5783\u573e\u56de\u6536\u673a\u5236\u626b\u63cf\u7684\u9891\u7387\u8d8a\u4f4e .. \u5206\u4ee3\u56de\u6536\u7684\u5f0a\u7aef : \u4f8b\u5982\u4e00\u4e2a\u53d8\u91cf\u521a\u521a\u4ece\u65b0\u751f\u4ee3\u79fb\u5165\u9752\u6625\u4ee3 , \u8be5\u53d8\u91cf\u7684\u7ed1\u5b9a\u5173\u7cfb\u5c31\u89e3\u9664\u4e86 , \u8be5\u53d8\u91cf\u5e94\u8be5\u88ab\u56de\u6536 , \u4f46\u9752\u6625\u4ee3\u7684\u626b\u63cf\u9891\u7387\u4f4e\u4e8e\u65b0\u751f\u4ee3 , \u8be5\u53d8\u91cf\u7684\u56de\u6536\u5c31\u4f1a\u88ab\u5ef6\u8fdf .. \u503c\u7c7b\u578b\u4e0e\u5f15\u7528\u7c7b\u578b \u00b6 \u53d8\u91cf\u5206\u4e3a -- \u503c\u7c7b\u578b(\u503c\u8bed\u4e49)\u548c\u5f15\u7528\u7c7b\u578b(\u5f15\u7528\u8bed\u4e49) \u7ed9\u7237\u523b\u5728\u9aa8\u9ad3\u91cc: \u5f15\u7528\u662f\u5565\uff1f\u5f15\u7528\u5c31\u662f\u6307\u5411.\u53d8\u91cf\u540d\u6307\u5411\u81ea\u8eab\u7ed1\u5b9a\u5bf9\u8c61\u7684\u5185\u5b58\u5730\u5740!! \u4e00\u7cfb\u5217\u7684\u7ed1\u5b9a\u64cd\u4f5c\u90fd\u662f\u5728\u4f20\u9012\u67d0\u4e00\u5bf9\u8c61\u7684\u5730\u5740\u7ed9\u67d0\u4e00\u53d8\u91cf\u540d\u8fdb\u884c\u7ed1\u5b9a!! \u503c\u7c7b\u578b int a = 10 \u5fc5\u987b\u6307\u5b9a\u7c7b\u578b,a\u4e2d\u53ea\u80fd\u5b58\u6574\u6570 \u628a\u53d8\u91cf\u7684\u503c\u76f4\u63a5\u4fdd\u5b58\u5728\u53d8\u91cf\u7684\u5b58\u50a8\u533a\u91cc,\u4f8b\u5982C\u8bed\u8a00,\u91c7\u7528\u8fd9\u79cd\u5b58\u50a8\u65b9\u5f0f,\u6bcf\u4e00\u4e2a\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u6240\u5360\u7528\u7684\u7a7a\u95f4\u5c31\u8981\u6839\u636e\u53d8\u91cf\u7684\u5b9e\u9645\u5927\u5c0f\u800c\u5b9a,\u65e0\u6cd5\u56fa\u5b9a\u4e0b\u6765.. \u5f15\u7528\u7c7b\u578b a = 10 \u95ee: a\u662f\u6570\u503c10\u5185\u5b58\u7684\u522b\u540d\uff1f\uff08X\uff09; a\u4e2d\u5b58\u7684\u662f\u6570\u503c10\uff1f\uff08X\uff09 \u7b54: \u8fd9\u4e0e\u4e0a\u9762\u7684 \u53d8\u91cf\u5b58\u50a8 \u90e8\u5206\u7684\u5185\u5bb9\u4ea4\u76f8\u547c\u5e94... \u7b80\u5355\u6765\u8bf4. a\u72ec\u7acb\u5f00\u53d1\u4e86\u4e00\u5757\u7a7a\u95f4(\u6808\u533a), \u91cc\u9762\u4fdd\u5b58(\u7ef4\u62a4)\u7684\u662f \u53d8\u91cf\u540d\u4e0e10\u7684\u5185\u5b58\u5730\u5740\u7684\u5173\u8054\u5173\u7cfb. \u56e0\u800c \u6307\u5411\u6570\u503c10\u7684\u5185\u5b58\u5730\u5740,\u662fid(10)\u7684\u4e00\u4e2a\u5f15\u7528.. Python\u53d8\u91cf\u662f\u5f15\u7528\u8bed\u4e49, \u53d8\u91cf\u540d \u5f15\u7528(\u6307\u5411) \u7ed1\u5b9a\u5bf9\u8c61\u7684 \u5185\u5b58\u5730\u5740 \u53d8\u91cf\u8bb0\u5f55\u4e86\u5bf9\u8c61\u5728\u5806\u7a7a\u95f4\u4e2d\u7684\u5730\u5740 \u767e\u5ea6\u8c37\u6b4c\u67e5\u9605\u6587\u6863 , \u5f88\u591a\u6587\u7ae0\u4e2d\u90fd\u4f1a\u8fd9\u6837\u8bf4 \u53d8\u91cf\u540d\u53ea\u662f\u7ed9\u5bf9\u5e94\u7684\u5185\u5b58\u5730\u5740\u8d77\u4e86\u4e2a\u522b\u540d . \u5c31\u50cf\u662f\u4e00\u4e2a\u6807\u7b7e\u8d34\u5728\u4e86\u4e0a\u9762 !! \u2611\ufe0f \u53d8\u91cf\u5373\u67d0\u4e00\u5bf9\u8c61\u7684\u5185\u5b58\u5730\u5740 .. \u2611\ufe0f \u521a\u63a5\u89e6python\u65f6 , \u8fd9\u6837\u89e3\u91ca\u53ef\u4ee5\u65b9\u4fbf\u7406\u89e3 , \u4f46\u8fd9\u4e9b\u8bf4\u6cd5\u90fd\u662f\u7b80\u8bf4 . \u5177\u4f53\u6765\u8bf4 , python\u4e0d\u4f1a\u5bf9\u53d8\u91cf\u540d\u5355\u72ec\u4f5c\u5b58\u50a8 . \u4f46\u4f1a\u5c06\u53d8\u91cf\u540d\u4e0e\u503c\u5185\u5b58\u5730\u5740\u7684\u5173\u8054\u5173\u7cfb\u5b58\u5230\u6808\u533a . ( \u6bcf\u4e2a \"\u53d8\u91cf\u540d:id(\u503c)\" \u5728\u6808\u533a\u4e2d\u7684\u6240\u5360\u7a7a\u95f4\u7684\u5927\u5c0f\u90fd\u662f\u4e00\u6837\u7684 ) \u8bb0\u4f4f ! \u5728python\u91cc , \u8be5\u6808\u533a\u6709\u4e2a\u4e13\u4e1a\u540d\u8bcd , \u53eb\u505a\u547d\u540d\u7a7a\u95f4 !! \u8981\u6761\u4ef6\u53cd\u5c04 , \u4e00\u65e6\u770b\u5230\u67d0\u53d8\u91cf\u540d , \u5c31\u8981\u77e5\u9053\u6307\u7684\u662f\u547d\u540d\u7a7a\u95f4\u4e2d\u8be5\u53d8\u91cf\u540d\u4e0e\u5bf9\u8c61\u5185\u5b58\u5730\u5740\u7684\u5173\u8054\u5173\u7cfb . \"'\u53d8\u91cf\u88ab\u8d4b\u503c = \u53d8\u91cf\u88ab\u5f15\u7528'\" \u7ed1\u5b9a\u64cd\u4f5c(eg \u8d4b\u503c)\u5c31\u662f\u4f20\u9012\u67d0\u4e00\u5bf9\u8c61\u7684\u5185\u5b58\u5730\u5740, \u63a5\u6536/\u88ab\u7ed1\u5b9a/\u88ab\u8d4b\u503c \u7684\u53d8\u91cf\u4e0e\u8be5\u5185\u5b58\u5730\u5740\u8fdb\u884c\u7ed1\u5b9a \u200b \u4e3e\u4e2a\u8d4b\u503c\u64cd\u4f5c\u4e2d\u6700\u7b80\u5355\u7684\u4f8b\u5b50 : a = 10 b = a \u5185\u5b58 ( \u5806\u533a ) >> \u5185\u5b58\u5730\u5740xb001\u5b58\u50a8\u6570\u503c10 \u547d\u540d\u7a7a\u95f4 ( \u6808\u533a ) >> xb201 : a -- xb001 xb202 : b -- xb001 a = 10 # -- \u4f20\u9012\u5bf9\u8c6110\u7684\u5185\u5b58\u5730\u5740 a\u5f00\u8f9f\u4e00\u5757\u7a7a\u95f4\u7ef4\u62a4\u6570\u503c10\u7684\u5185\u5b58\u5730\u5740 a\u5e76\u6ca1\u6709\u5b5810\u8fd9\u4e2a\u503c , \u800c\u662f\u5c06a\u53d8\u91cf\u540d\u4e0e\u53d8\u91cf\u503c10\u7684\u5730\u5740\u7ed1\u5b9a\u5728\u4e86\u4e00\u8d77 b = a # -- \u4f20\u9012\u53d8\u91cfa\u7ed1\u5b9a\u5bf9\u8c61\u7684\u5185\u5b58\u5730\u5740 '\u88ab\u8d4b\u503c = \u88ab\u5f15\u7528' \u7b49\u5f0f\u53f3\u8fb9\u5148\u6267\u884c , \u9996\u5148\u53f3\u8fb9\u7684a\u53d8\u91cf\u80af\u5b9a\u662f\u80fd\u627e\u5230\u7684 , \u5426\u5219\u4f1a\u62a5\u9519 . a\u53d8\u91cf\u88ab\u5f15\u7528 , \u62ff\u5230a\u4e0e\u5176\u5173\u8054\u7684\u5185\u5b58\u5730\u5740xb001\u4f20\u9012\u7ed9b\u53d8\u91cf . \u56e0\u4e3apython\u5185\u90e8\u7684\u4f18\u5316\u673a\u5236 , \u53ea\u9700\u5c06\u6570\u503c10\u7684\u5f15\u7528\u8ba1\u6570\u52a01\u5373\u53ef . x = 10 y = 20 z = x + y # -- \u4f20\u9012\u4e00\u4e2a\u65b0\u5bf9\u8c61\u7684\u5185\u5b58\u5730\u5740 \u201c = \u201c \u7b49\u53f7\u53f3\u8fb9\u7684x \u3001 y\u53d8\u91cf\u88ab\u5f15\u7528 , \u627e\u5230\u5404\u81ea\u7ed1\u5b9a\u5bf9\u8c61\u7684\u503c\u8fdb\u884c\u8fd0\u7b97 , \u5c06\u8fd0\u7b97\u540e\u7684\u5bf9\u8c61\u7684\u5185\u5b58\u5730\u5740\u4f20\u9012\u7ed9\u53d8\u91cfz \"\u5f15\u7528\" \u8fd9\u4e2a\u6982\u5ff5 , \u6df1\u6d45\u62f7\u8d1d \u3001 \u51fd\u6570\u53c2\u6570\u7684\u4f20\u9012\u7b49\u90fd\u4e0e\u5176\u606f\u606f\u76f8\u5173 .. \"python\u4e2d\u51fd\u6570\u53c2\u6570\u7684\u4f20\u9012\" \u90fd\u662f\u5f15\u7528 , \u53ea\u662f\u8981\u533a\u5206\u5f15\u7528\u7684\u5bf9\u8c61\u53ef\u53d8\u4e0e\u4e0d\u53ef\u53d8\u7f62\u5566 .. \u5b57\u7b26\u7f16\u7801 \u00b6 \u9996\u5148\u8981\u77e5\u9053 \u5728\u8ba1\u7b97\u673a\u4e2d\u5b58\u50a8\u7684\u6570\u636e\u662f0101011111\u7684\u6837\u5b50,01\u7684\u9ad8\u4f4e\u7535\u5e73. b\u4f4d|\u6bd4\u7279; B\u5b57\u8282; kB\u5343\u5b57\u8282;M;G;T 1byte == 8bit ASCII \u00b6 \u7279\u70b9: \u53ea\u6709\u82f1\u6587\u5b57\u7b26\u4e0e\u6570\u5b57\u7684\u4e00\u4e00\u5bf9\u5e94\u5173\u7cfb,\u4e00\u4e2a\u82f1\u6587\u5b57\u7b26\u5360\u75281byte \u6211\u4eec\u53ef\u4ee5\u7b97\u4e00\u7b97, \u4e00\u4e2a\u5b57\u8282\u5305\u542b8\u4e2abit\u6bd4\u7279\u4f4d(8\u4e2a\u4e8c\u8fdb\u5236\u4f4d),\u6bcf\u4e2a\u4f4d\u7f6e\u90fd\u53ef\u4ee5\u9009\u62e9\u586b\u51650\u6216\u80051 \u6240\u4ee5\u53ef\u4ee5\u8868\u793a2^8=256\u4e2a\u5b57\u7b26.. 256\u4e2a\u5b57\u7b26\u5305\u542b\u4e86\u82f1\u6587\u5b57\u6bcd\u4ee5\u53ca\u4e00\u4e9b\u7b26\u53f7. \u8fd9\u5c31\u662f\u719f\u77e5\u7684 ASCII \u7f16\u7801. \u5341\u8fdb\u5236\u8868\u793a:0-127. Unicode\u7f16\u7801 \u00b6 \u4e3a\u4e86\u8ba9\u8ba1\u7b97\u673a\u8bc6\u522b\u81ea\u5df1\u56fd\u5bb6\u7684\u8bed\u8a00\u548c\u82f1\u6587,\u4e2d\u56fd\u4eba\u8ba2\u5236\u4e86GBK..\u97e9\u56fd\u4eba\u5236\u5b9a\u4e86Euc-kr... GBK\u8868\u7684\u7279\u70b9: 1> \u53ea\u6709\u4e2d\u6587\u5b57\u7b26\u3001\u82f1\u6587\u5b57\u7b26\u4e0e\u6570\u5b57\u7684\u4e00\u4e00\u5bf9\u5e94\u5173\u7cfb (Euc-kr\u540c\u7406) 2> \u4e00\u4e2a\u82f1\u6587\u5b57\u7b26\u5bf9\u5e941Bytes 2^8=256 \u53ef\u8868\u793a\u6240\u6709\u82f1\u6587\u5b57\u7b26 3> \u4e00\u4e2a\u4e2d\u6587\u5b57\u7b26\u5bf9\u5e942Bytes 2^16=65536 \u53ef\u8868\u793a\u6240\u6709\u4e2d\u6587\u5b57\u7b26 \u4e3a\u4e86\u5c06\u6240\u6709\u8bed\u8a00\u7edf\u4e00\u5230\u4e00\u5957\u7f16\u7801\u91cc\u9762,\u5c31\u4ea7\u751f\u4e86Unicode\u7f16\u7801(\u6240\u6709\u5b57\u7b26\u90fd\u5360\u75282\u5b57\u8282). UTF-8\u7f16\u7801(\u53ef\u53d8\u957f): Unicode\u7f16\u7801\u4e2d\u7684\u4e00\u4e2a\u82f1\u6587\u5b57\u7b26\u4f1a\u5360\u7528\u4e24\u4e2a\u5b57\u8282, \u82e5\u82f1\u6587\u5b57\u7b26\u5f88\u591a,\u4f1a\u6d6a\u8d39\u5927\u91cf\u5b58\u50a8\u7a7a\u95f4\u4ee5\u53ca\u6570\u636e\u4ece\u5185\u5b58\u5199\u5165\u786c\u76d8\u7684IO\u65f6\u95f4... \u6240\u4ee5\u6709\u4e86UTF-8\u7f16\u7801,\u8be5\u7f16\u7801\u4e2d\u4e00\u4e2a\u82f1\u6587\u5b57\u7b26\u53601Bytes,\u4e00\u4e2a\u4e2d\u6587\u5b57\u7b26\u53603Bytes,\u751f\u50fb\u5b57\u7528\u66f4\u591a\u7684Bytes\u5b58\u50a8 \u6ce8\u610f\u4e00\u70b9 : \u6587\u672c\u7f16\u8f91\u5668\u8f93\u5165\u4efb\u4f55\u5b57\u7b26\u90fd\u662f\u6700\u5148\u5b58\u5728\u4e8e\u5185\u5b58\u4e2d , \u662funicode\u7f16\u7801\u7684 , \u4ece\u5185\u5b58\u5b58\u653e\u4e8e\u786c\u76d8\u7684\u8fc7\u7a0b\u4e2d\u6570\u636e\u53ef\u4ee5\u8f6c\u6362\u6210\u4efb\u610f\u5176\u4ed6\u7f16\u7801 . \u4e3e\u4e2a\u4f8b\u5b50 , \u6587\u672c\u7f16\u8f91\u5668\u4e2d\u5199\u5165\u591a\u56fd\u7684\u5b57\u7b26 \u591a\u56fd\u5b57\u7b26 \u2014\u221a\u2014\u300b \u5185\u5b58 ( unicode\u683c\u5f0f\u7684\u4e8c\u8fdb\u5236 ) \u2014\u2014\u221a\u2014\u300b \u786c\u76d8 ( utf - 8 \u683c\u5f0f\u7684\u4e8c\u8fdb\u5236 ) \u7f16\u7801encode : \u5b57\u7b26 -- \u5185\u5b58 -- \u786c\u76d8 \u7531\u5b57\u7b26\u8f6c\u6362\u6210\u5185\u5b58\u4e2d\u7684unicode , \u4ee5\u53ca\u7531unicode\u8f6c\u6362\u6210\u5176\u4ed6\u7f16\u7801\u7684\u8fc7\u7a0b \u82e5\u6587\u4ef6\u4e2d\u5305\u542b\u6c49\u5b57 \u3001 \u97e9\u6587\u7b49\u591a\u56fd\u8bed\u8a00 , unicode\u80fd\u8bc6\u522b\u591a\u56fd\u5b57\u7b26 , \u4f46GBK\u4e0d\u884c , \u6240\u4ee5\u5f80\u786c\u76d8\u4e2d\u5b58\u50a8\u7684\u65f6\u5019 , \u4f1a\u4f7f\u7528utf - 8 ( \u8282\u7701\u7a7a\u95f4 \u3001 \u51cf\u5c11IO ) \u89e3\u7801decode : \u786c\u76d8 -- \u5185\u5b58 -- \u5b57\u7b26 \u7531\u5176\u4ed6\u7f16\u7801\u8f6c\u6362\u6210unicode , \u4ee5\u53ca\u7531\u5185\u5b58\u4e2d\u7684unicode\u8f6c\u6362\u6210\u5b57\u7b26\u7684\u8fc7\u7a0b \u6709\u4e09\u4e2a\u95ee\u9898 ( \u4e0d\u60f3\u6df1\u7a76\u4e86 \u8bb0\u4f4f\u4ed6\u4e09\u90fd\u662f\u5bf9\u7684\u5c31\u884c ): 1. \u4e3a\u5565\u5b58\u5728\u5185\u5b58\u4e2d\u7684\u5b57\u7b26\u7f16\u7801\u683c\u5f0f\u4e0d\u7528utf - 8 , \u800c\u662funicode ? 2. unicode\u7f16\u7801\u662f\u5982\u4f55\u8f6c\u6210\u5176\u4ed6\u7f16\u7801\u7684 ? 3. \u4e3a\u4f55\u53ea\u6709unicode\u624d\u4f1a\u4e0e\u5b57\u7b26\u76f8\u5bf9\u5e94 ( \u6587\u672c\u7f16\u8f91\u5668\u8f93\u5165\u4efb\u4f55\u5b57\u7b26\u90fd\u662f\u6700\u5148\u5b58\u5728\u4e8e\u5185\u5b58\u4e2d , \u662funicode\u7f16\u7801\u7684\u5bfc\u81f4\u7684 ? ) \u4e71\u7801\u662f\u4ec0\u4e48\uff1f \u00b6 \u5f52\u6839\u5230\u5e95,\u4e2d\u95f4\u6709\u4e2aunicode\u5728\u4f5c\u795f... # -*- coding:utf-8 -*- \u6307\u660e\u8be5\u6587\u4ef6\u5199\u5165\u786c\u76d8\u65f6\u91c7\u7528\u7684\u7f16\u7801\u683c\u5f0f x = \"\u4e0a\" print ( x ) \u5728python2\u4e2d , \u5c06 \"\u4e0a\" \u4ece\u786c\u76d8\u8bfb\u5165\u5185\u5b58\u7684\u89e3\u7801\u683c\u5f0f\u662f\u6839\u636e\u6587\u4ef6\u5934\u7684\u7f16\u7801\u683c\u5f0f\u51b3\u5b9a\u7684 , \u8fd9\u91cc\u662futf - 8 , \u6ca1\u6709\u6587\u4ef6\u5934\u7684\u8bdd , \u5c31\u7528\u7f16\u8bd1\u5668\u9ed8\u8ba4\u7684\u7f16\u7801 ; \u5728\u6253\u5370x\u65f6 , pycharm\u53d1\u73b0 \"\u4e0a\" \u5bf9\u5e94\u7684\u5b57\u7b26\u7f16\u7801\u662futf - 8 ,( \u53ea\u6709unicode\u624d\u4f1a\u76f4\u63a5\u5bf9\u5e94\u5b57\u7b26 ), \u6240\u4ee5\u9700\u8981\u8fdb\u884c\u4e86\u89e3\u7801 .. pycharm\u9ed8\u8ba4\u7684\u7f16\u7801\u5c31\u662futf - 8 , \u6240\u4ee5\u80fd\u6b63\u786e\u663e\u793a .. \u4f46\u7528windows\u7684cmd\u8fd0\u884c\u8be5\u4ee3\u7801 , \u4f1a\u4e71\u7801 , \u56e0\u4e3awindows cmd\u7684\u9ed8\u8ba4\u7f16\u7801\u662fgbk .. \u82e5\u4f7f\u7528cmd\u7684\u9ed8\u8ba4\u7f16\u7801 . \"\u4e0a\" \u7528utf - 8 \u7f16\u7801\u5230\u786c\u76d8\u4e2d\u7684 , \u7528gbk\u4ece\u786c\u76d8\u4e2d\u89e3\u7801\u5c31\u4f1a\u4e71\u7801 .. python2\u7684\u89e3\u51b3\u65b9\u6848\u5c31\u662f x = u \"\u4e0a\" \u4fdd\u8bc1 \"\u4e0a\" \u5728\u5185\u5b58\u4e2d\u7684\u7f16\u7801\u662funicode .. \u5728python3\u4e2d , \u4e0d\u9700\u8981\u6587\u4ef6\u5934 , \u5728\u5185\u5b58\u4e2d\u7684\u7f16\u7801\u683c\u5f0f\u90fd\u662funicode !! So\u4e0d\u7ba1\u5728pychrm\u8fd8\u662fwindows cmd\u4e0a\u90fd\u80fd\u6b63\u786e\u663e\u793a !!! ( \u7b80\u5355\u7406\u89e3 \u5b57\u7b26\u4e0eunicode\u662f\u4e00\u8d77\u7684 !!! \u522b\u5206\u89e3\u6210 \u5b57\u7b26 -- encode -- unicode\u5566 .. \u6211\u7d2f\u4e86 . ) \u5177\u4f53\u6765\u8bf4 , python3\u4e2d\u5b57\u8282bytes\u4e0eUnicode\u5b57\u7b26\u7684\u8f6c\u5316 : bytes : \u5305\u542b8\u4f4d\u7684\u4e8c\u8fdb\u5236\u6570 ; str : \u5305\u542bunicode\u5b57\u7b26 . Unicode\u5b57\u7b26 ==> ` encode () ` ==> bytes\u4e8c\u8fdb\u5236\u6570\u636e \u5373 \u5b57\u7b26 encode \u4e8c\u8fdb\u5236 bytes\u4e8c\u8fdb\u5236\u6570\u636e ==> ` decode () ` ==> Unicode\u5b57\u7b26 \u5373 \u4e8c\u8fdb\u5236 decode \u5b57\u7b26 \"\"\" chr() \u5c06\u4e00\u4e2a\u6574\u6570\u8f6c\u6362\u4e3a\u4e00\u4e2aUnicode\u5b57\u7b26 ord() \u5c06\u4e00\u4e2a\u5b57\u7b26\u8f6c\u6362\u4e3a\u5b83\u7684ASCII\u6574\u6570\u503c \"\"\" Python\u4e2d\u7684\u4e0b\u5212\u7ebf \u00b6 \u73af\u5883\u53d8\u91cf \u00b6 Cpython\u5c31\u662f\u7ffb\u8bd1\u5de5\u4f5c , \u5c06python\u4ee3\u7801\u7ffb\u8bd1\u6210\u8ba1\u7b97\u673a\u80fd\u542c\u61c2\u7684 ! 1. \u73af\u5883\u53d8\u91cf - \u5728\u547d\u4ee4\u884c\u4e0b , \u4f7f\u7528\u53ef\u6267\u884c\u6587\u4ef6 , \u9700\u8981\u5230\u53ef\u6267\u884c\u6587\u4ef6\u7684\u8def\u5f84\u4e0b\u6267\u884c - \u82e5\u60f3\u5728\u4efb\u610f\u8def\u5f84\u4e0b\u6267\u884c\u53ef\u6267\u884c\u6587\u4ef6 , \u5c31\u9700\u8981\u5728\u73af\u5883\u53d8\u91cf\u91cc\u914d\u7f6e 2. \u8bbe\u7f6e\u73af\u5883\u53d8\u91cf - \u7528\u6237\u53d8\u91cf : \u5f53\u524d\u7528\u6237\u767b\u9646\u5230\u7cfb\u7edf , \u80fd\u591f\u8bc6\u522b\u7684\u73af\u5883\u53d8\u91cf - \u7cfb\u7edf\u53d8\u91cf : \u6240\u6709\u7528\u6237\u767b\u9646\u5230\u7cfb\u7edf , \u80fd\u591f\u8bc6\u522b\u7684\u73af\u5883\u53d8\u91cf - python\u914d\u7f6e : \u5b89\u88c5\u65f6 , add to path\u9009\u4e2d - python\u5b89\u88c5\u8def\u5f84 : \u627e\u5230 python . exe - python\u5b89\u88c5\u8def\u5f84\u7684script\u8def\u5f84 : \u627e\u5230 pip . exe 3. \u9700\u8981\u6ce8\u610f , \u5728\u7ec8\u7aef\u8f93\u5165\u7684python \u3001 pip install , \u6267\u884c\u7684\u662f\u54ea\u4e2a\u73af\u5883 \u4e0e\u5728\u73af\u5883\u53d8\u91cf\u91cc\u8bbe\u7f6e\u7684\u5148\u540e\u987a\u5e8f\u6709\u5173 4. pycharm\u4e2d\u5f00\u53d1\u9879\u76ee , \u9700\u8981\u6ce8\u610f\u4f7f\u7528\u7684\u89e3\u91ca\u5668\u662f\u54ea\u4e2a pycharm\u53ef\u4ee5\u521b\u5efa\u865a\u62df\u73af\u5883 , \u865a\u62df\u73af\u5883\u7528\u4e8e\u89e3\u51b3\u7248\u672c\u5171\u5b58\u7684\u95ee\u9898 . mac\u800c\u8a00 : \u9ed8\u8ba4\u5728 / Library / Frameworks / Python . framework / Versions \u8fd9\u4e2a\u8def\u5f84\u4e0b / Library / Frameworks / Python . framework / Versions / 3.8 / bin \u6709unix\u53ef\u6267\u884c\u6587\u4ef6pip / Library / Frameworks / Python . framework / Versions / 3.8 \u6709\u4e2aunix\u53ef\u6267\u884c\u6587\u4ef6python","title":"python\u8bed\u8a00\u4ecb\u7ecd"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/00_Python%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D/#python","text":"\u89e3\u91ca \uff5c\u7f16\u8bd1\u578b\u8bed\u8a00\u3001 \u5f3a \uff5c\u5f31\u7c7b\u578b\u3001 \u52a8 \uff5c\u9759\u7c7b\u578b","title":"Python\u8bed\u8a00\u7279\u6027"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/00_Python%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D/#_1","text":"\u53c2\u8003\u94fe\u63a5: http://c.biancheng.net/view/4136.html https://zhuanlan.zhihu.com/p/38855233 https://www.jianshu.com/p/3bd1e1e44991 \u521a\u5f00\u59cb\u63a5\u89e6Python\u7684\u65f6, \u8001\u5e08\u5c31\u544a\u8bc9\u6211\"python\u662f\u89e3\u91ca\u578b\u8bed\u8a00\".. \u8fd9\u6837\u7684\u8bf4\u6cd5\u6ca1\u9519,\u4f46\u4e0d\u591f\u5177\u4f53,\u4e0d\u4e25\u8c28. \u9996\u5148\u660e\u786e\u4e00\u70b9 , python \u3001 java \u3001 c\u8fd9\u4e9b\u9ad8\u7ea7\u8bed\u8a00\u4e0d\u7ba1\u662f\u7f16\u8bd1\u578b\u8fd8\u662f\u89e3\u91ca\u578b , \u90fd\u9700\u8981\u8f6c\u6362\u6210\u8ba1\u7b97\u673a\u80fd\u542c\u5f97\u61c2\u7684\u673a\u5668\u8bed\u8a00 ( 01 \u7684\u4e8c\u8fdb\u5236 ), \u800c\u8f6c\u6362\u7684\u8fc7\u7a0b\u5c31\u9700\u8981\u501f\u52a9\u7f16\u8bd1\u5668\u6216\u89e3\u91ca\u5668 . \"\"\" \u7f16\u8bd1\u578b VS \u89e3\u91ca\u578b \"\"\" \u25cb \u7f16\u8bd1\u578b\u8bed\u8a00 : \u4f7f\u7528\u7f16\u8bd1\u5668 , \u63d0\u524d\u5c06\u6240\u6709\u6e90\u4ee3\u7801\u4e00\u6b21\u6027\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u6307\u4ee4 , \u5373\u751f\u6210\u4e00\u4e2a\u53ef\u6267\u884c\u7a0b\u5e8f \u201c \u4e00\u6b21\u7f16\u8bd1 \uff0c \u65e0\u9650\u6b21\u8fd0\u884c \u201d , \u751f\u6210\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u4e0d\u518d\u9700\u8981\u6e90\u4ee3\u7801\u548c\u7f16\u8bd1\u5668 , So , \u7f16\u8bd1\u578b\u8bed\u8a00\u53ef\u4ee5\u8131\u79bb\u5f00\u53d1\u73af\u5883\u8fd0\u884c \u4f46\u7f16\u8bd1\u578b\u8bed\u8a00\u4e0d\u80fd\u8de8\u5e73\u53f0 , \u539f\u56e0\u6709\u4e8c : 1 > \u53ef\u6267\u884c\u7a0b\u5e8f\u4e0d\u80fd\u8de8\u5e73\u53f0 , eg : \u4e0d\u80fd\u5c06Windows\u4e0b\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u62ff\u5230Linux\u4e0b\u4f7f\u7528 2 > \u6e90\u4ee3\u7801\u4e0d\u80fd\u8de8\u5e73\u53f0 , eg : Windows\u5e73\u53f0\u4e0bSleep\u51fd\u6570\u4ee5\u6beb\u79d2\u4e3a\u65f6\u95f4\u5355\u4f4d ; Linux\u5e73\u53f0\u4e0b\u5219\u662f\u4ee5\u79d2\u4e3a\u5355\u4f4d \u25cb \u89e3\u91ca\u578b\u8bed\u8a00 : \u4f7f\u7528\u89e3\u91ca\u5668 , \u6bcf\u6b21\u6267\u884c\u7a0b\u5e8f\u90fd\u9700\u8981\u8fb9\u8f6c\u6362\u8fb9\u6267\u884c . \u53ea\u5c06\u7528\u5230\u7684\u6e90\u4ee3\u7801\u8f6c\u6362\u6210\u673a\u5668\u7801 ( \u4e8c\u8fdb\u5236 ), \u7528\u4e0d\u5230\u7684\u4e0d\u9700\u5904\u7406 . \u201c \u4e00\u6b21\u7f16\u5199 , \u5230\u5904\u8fd0\u884c \u201d \u89e3\u91ca\u578b\u8bed\u8a00\u662f\u8de8\u5e73\u53f0\u7684 , \u6ce8\u610f ! \u6240\u8bf4\u7684\u8de8\u5e73\u53f0 , \u662f\u6307\u6e90\u4ee3\u7801\u8de8\u5e73\u53f0 , \u800c\u975e\u89e3\u91ca\u5668\u8de8\u5e73\u53f0 eg : \u4ee5Python\u4e3a\u4f8b , Python\u5b98\u65b9\u9488\u5bf9\u4e0d\u540c\u5e73\u53f0 ( \u6bd4\u5982 Windows \u3001 macOS \u3001 Linux ) \u5f00\u53d1\u4e86\u4e0d\u540c\u7684\u89e3\u91ca\u5668 \u8fd9\u4e9b\u89e3\u91ca\u5668\u9075\u5b88\u540c\u6837\u7684\u8bed\u6cd5 , \u6240\u4ee5\u540c\u4e00\u4efd\u6e90\u4ee3\u7801\u624d\u80fd\u5728\u4e0d\u540c\u5e73\u53f0\u4e0a\u62e5\u6709\u76f8\u540c\u7684\u6267\u884c\u7ed3\u679c \"\"\" \u4e0b\u8f7d\u7a0b\u5e8f \"\"\" \u5f53\u6211\u4eec\u8bf4 \"\u4e0b\u8f7d\u4e00\u4e2a\u7a0b\u5e8f(\u8f6f\u4ef6)\" \u65f6 , \u4e0d\u540c\u7c7b\u578b\u7684\u8bed\u8a00\u6709\u4e0d\u540c\u7684\u542b\u4e49 \u5bf9\u4e8e\u7f16\u8bd1\u578b\u8bed\u8a00 , \u4e0b\u8f7d\u5230\u7684\u662f\u53ef\u6267\u884c\u6587\u4ef6 , \u6e90\u4ee3\u7801\u88ab\u4f5c\u8005\u4fdd\u7559 , \u6240\u4ee5\u7f16\u8bd1\u578b\u8bed\u8a00\u7684\u7a0b\u5e8f\u4e00\u822c\u662f\u95ed\u6e90\u7684 ; \u5bf9\u4e8e\u89e3\u91ca\u578b\u8bed\u8a00 , \u4e0b\u8f7d\u5230\u7684\u662f\u6240\u6709\u6e90\u4ee3\u7801 , \u56e0\u4e3a\u4f5c\u8005\u4e0d\u7ed9\u6e90\u4ee3\u7801\u5c31\u6ca1\u6cd5\u8fd0\u884c , \u6240\u4ee5\u89e3\u91ca\u578b\u8bed\u8a00\u7684\u7a0b\u5e8f\u4e00\u822c\u662f\u5f00\u6e90\u7684 . \"\"\" python\u865a\u62df\u673a \u5c06\u9700\u7528\u5230\u7684py\u6e90\u4ee3\u7801/\u9700\u6267\u884c\u7684py\u6587\u4ef6 --(\u8fdb\u884c\u7f16\u8bd1)-- \u5b57\u8282\u7801 --(\u901a\u8fc7python\u7684PVM\u865a\u62df\u673a\u9010\u884c\u89e3\u91ca)-- \u673a\u5668\u7801 \"\"\" \u968f\u7740Java\u7b49\u57fa\u4e8e\u865a\u62df\u673a\u7684\u8bed\u8a00\u7684\u5174\u8d77 , \u6211\u4eec\u4e0d\u80fd\u518d\u628a\u8bed\u8a00\u7eaf\u7cb9\u5730\u5206\u6210\u89e3\u91ca\u578b\u548c\u7f16\u8bd1\u578b\u8fd9\u4e24\u79cd Python\u662f\u4e00\u95e8\u5148\u7f16\u8bd1\u540e\u89e3\u91ca\u7684\u8bed\u8a00 . \u7f16\u8bd1\u7684\u7ed3\u679c \"\u5b57\u8282\u7801\" \u4f1a\u653e\u5230\u5185\u5b58\u7684PyCodeObject\u4e2d , \u82e5\u9700\u6301\u4e45\u5316\u4fdd\u5b58 , \u4f1a\u5199\u5165pyc\u6587\u4ef6 \u4ec0\u4e48\u65f6\u5019\u9700\u8981pyc \uff1f import\u7684\u65f6\u5019 , \u4f1a\u5c06import\u7684\u6a21\u5757\u7f16\u8bd1\u6210 . pyc\u6587\u4ef6 , \u4fbf\u4e8e\u4e0b\u6b21\u8fd0\u884c\u52a0\u5feb\u6548\u7387 . pyc\u6587\u4ef6\u7684\u8fc7\u671f : \u4f1a\u8ddfimport\u7684\u6a21\u5757\u6700\u540e\u7684\u4fee\u6539\u65e5\u671f\u8fdb\u884c\u5bf9\u6bd4 , \u82e5py\u6587\u4ef6 / \u6a21\u5757\u4fee\u6539\u4e86 , . pyc\u6587\u4ef6\u5c31\u4f1a\u91cd\u65b0\u751f\u6210 # -- python\u672c\u8d28\u4e0ejava c# \u4e00\u6837,python\u7a0b\u5e8f\u7684\u6267\u884c\u539f\u7406\u90fd\u53ef\u4ee5\u7528\u4e24\u4e2a\u5b57\u6982\u62ec -- \u865a\u62df\u673a\u3001\u5b57\u8282\u7801 1 > \u5728demo . py\u771f\u6b63\u8fd0\u884c\u4e4b\u524d , python\u7f16\u8bd1\u5668\u8981\u5bf9py\u6587\u4ef6\u4e2d\u7684\u6e90\u4ee3\u7801\u8fdb\u884c\u7f16\u8bd1 . 2 > \u5728\u7a0b\u5e8f\u8fd0\u884c\u671f\u95f4 , \u7f16\u8bd1\u7ed3\u679c\u5b58\u5728\u4e8e\u5185\u5b58\u7684PyCodeObject\u5bf9\u8c61\u4e2d , python\u7ed3\u675f\u8fd0\u884c\u540e , \u82e5\u7f16\u8bd1\u7ed3\u679c\u4fdd\u5b58\u5230\u4e86pyc\u6587\u4ef6\u4e2d , \u90a3\u4e48\u4e0b\u4e00\u6b21\u7684\u8fd0\u884c\u76f8\u540c\u7684\u7a0b\u5e8f\u7684\u65f6\u5019 , python\u4f1a\u6839\u636epyc\u6587\u4ef6\u4e2d\u8bb0\u5f55\u7684\u7f16\u8bd1\u7ed3\u679c\u76f4\u63a5\u5efa\u7acb\u5185\u5b58\u4e2d\u7684PyCodeObject\u5bf9\u8c61 , \u800c\u4e0d\u7528\u5bf9\u6e90\u6587\u4ef6\u518d\u6b21\u8fdb\u884c\u7f16\u8bd1 . 3 > demo . py\u6a21\u5757\u4f1a\u5bf9\u5e94\u4e00\u4e2aPyCodeObject\u5bf9\u8c61 , \u800c\u91cc\u9762\u7684\u4ee3\u7801\u5757\u90fd\u4f1a\u4e00\u4e00\u5bf9\u5e94\u4e00\u4e2aPycodeObject\u5bf9\u8c61 . \u662f\u5d4c\u5957\u7684 ! 4 > demo . py\u5bf9\u5e94\u7684PyCodeObject\u5bf9\u8c61\u5305\u542b\u5176\u4ed6PyCodeObject\u5bf9\u8c61 . 5 > \u4f5c\u7528\u57df \u3001 \u4ee3\u7801\u5757 \u3001 scope\u7684\u73af\u5883 \u3001 PycodeObject\u5bf9\u8c61\u90fd\u662f\u5d4c\u5957\u7684 \u6211\u60f3,\u6b63\u56e0\u4e3apython\u652f\u6301\u8de8\u5e73\u53f0,\u6240\u4ee5\u5927\u5bb6\u66f4\u613f\u610f\u79f0python\u662f\u89e3\u91ca\u578b\u8bed\u8a00!","title":"\u89e3\u91ca\u578b\u3001\u7f16\u8bd1\u578b"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/00_Python%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D/#_2","text":"\u52a8\u6001\u8bed\u8a00: a = 10 , a\u4e0d\u7528\u6307\u5b9aint \u8fd0\u884c\u65f6\u624d\u4f1a\u8fdb\u884c\u6570\u636e\u7c7b\u578b\u7684\u68c0\u67e5 \u5f3a\u7c7b\u578b\u8bed\u8a00: \u53d8\u91cf\u7684\u6570\u636e\u7c7b\u578b\u4e00\u65e6\u88ab\u5b9a\u4e49,\u90a3\u5c31\u4e0d\u4f1a\u518d\u6539\u53d8,\u9664\u975e\u8fdb\u884c\u5f3a\u8f6c \u4e0d\u540c\u7c7b\u578b\u7684\u53d8\u91cf\u4e0d\u80fd\u8fdb\u884c\u8fd0\u7b97(\u4e0d\u8003\u8651\u9690\u5f0f\u8f6c\u6362) eg: 5 - '3' \u62a5\u9519 python\u5f88\u5c11\u4f1a\u81ea\u52a8\u8fdb\u884c\u9690\u5f0f\u8f6c\u6362... 5/2.5 = 2.0 int\u7c7b\u578b\u548cfloat\u7c7b\u578b\u8ba1\u7b97\u4f1a\u81ea\u52a8\u628aint\u7c7b\u578b\u8f6c\u6362\u4e3afloat\u7c7b\u578b \u6084\u6084\u544a\u8bc9\u4f60, linux\u4e2d\u7684shell\u662f\u5f31\u7c7b\u578b\u8bed\u8a00 ,shell\u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf,\u968f\u7740\u8c03\u7528\u65b9\u5f0f\u7684\u4e0d\u540c,\u6570\u636e\u7c7b\u578b\u53ef\u968f\u610f\u5207\u6362..","title":"\u5f3a\u3001\u52a8"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/00_Python%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D/#_3","text":"\u53c2\u8003: https://zhuanlan.zhihu.com/p/108683483 \u2605 https://zhuanlan.zhihu.com/p/83251959 Python\u5f15\u5165\u4e86\"\u6807\u8bb0-\u6e05\u9664\"\u4e0e\"\u5206\u4ee3\u56de\u6536\"\u6765\u5206\u522b\u89e3\u51b3\u5f15\u7528\u8ba1\u6570\u7684\u81f4\u547d\u5f31\u70b9\u5faa\u73af\u5f15\u7528\u548c\u5f15\u7528\u8ba1\u6570\u6548\u7387\u4f4e\u7684\u95ee\u9898..","title":"\u5783\u573e\u56de\u6536\u673a\u5236!!!"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/00_Python%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D/#_4","text":"\u5185\u5b58\u4e2d\u6709\u4e24\u5757\u533a\u57df: \u6808\u533a stack\u4e0e \u5806\u533a heap. \u5728\u5b9a\u4e49\u53d8\u91cf\u65f6, \u53d8\u91cf\u540d\u4e0e\u503c\u5185\u5b58\u5730\u5740\u7684\u5173\u8054\u5173\u7cfb \u5b58\u653e\u4e8e\u6808\u533a ( \u547d\u540d\u7a7a\u95f4 ), \u53d8\u91cf\u503c \u5b58\u653e\u4e8e\u5806\u533a, \u5185\u5b58\u7ba1\u7406\u56de\u6536\u7684\u5219\u662f\u5806\u533a\u7684\u5185\u5bb9 \u7b80\u5355\u7406\u89e3\u6808\u533a\u548c\u5806\u533a,\u6808\u533a\u7531\u64cd\u4f5c\u7cfb\u7edf\u81ea\u52a8\u5206\u914d\u91ca\u653e,\u5806\u533a\u7531\u5f00\u53d1\u4eba\u5458\u5206\u914d\u91ca\u653e;\u524d\u8005\u5730\u5740\u8fde\u7eed,\u5177\u5907\u540e\u8fdb\u5148\u51fa\u7684\u7279\u6027,\u540e\u8005\u5730\u5740\u4e0d\u8fde\u7eed,\u7c7b\u4f3c\u4e8e\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u94fe\u8868.. \u4e3e\u4e2a\u6817\u5b50, \u5b9a\u4e49\u4e86\u4e24\u4e2a\u53d8\u91cf x=10 , y=20 \u5f53\u6211\u4eec\u6267\u884c x=y \u65f6, \u5185\u5b58\u4e2d\u7684\u6808\u533a\u4e0e\u5806\u533a\u53d8\u5316\u5982\u4e0b:","title":"\u53d8\u91cf\u5b58\u50a8"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/00_Python%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D/#_5","text":"\u5f15\u7528\u8ba1\u6570:\u53d8\u91cf\u503c\u88ab\u53d8\u91cf\u540d\u5173\u8054\u7684\u6b21\u6570 \u5f53\u503c\u4e0d\u518d\u88ab\u4efb\u4f55\u540d\u5b57\u5173\u8054,\u503c\u7684\u5f15\u7528\u8ba1\u6570\u4e3a0\u65f6\u5e94\u8be5\u88abgc\u673a\u5236\u56de\u6536 \u25cb \u5f15\u7528\u8ba1\u6570\u589e\u52a0 -- \u521b\u5efaa = 1\u3001\u76f4\u63a5\u8d4b\u503c b=a \u3001 \u51fd\u6570\u5f62\u53c2 \u3001\u6210\u4e3a\u5bb9\u5668\u5143\u7d20\u7b49 \u25cb \u5f15\u7528\u8ba1\u6570\u51cf\u5c11 -- del\u3001\u88ab\u91cd\u65b0\u8d4b\u503c\u3001\u5bb9\u5668\u9500\u6bc1\u3001\u5220\u9664\u5bb9\u5668\u5143\u7d20\u7b49 \u5f15\u7528\u8ba1\u6570\u7684 \u81f4\u547d\u5f31\u70b9 : \u5bb9\u5668\u5143\u7d20\u7684\u5faa\u73af\u5f15\u7528(\u4e5f\u79f0\u4ea4\u53c9\u5f15\u7528) a = [ 1 , 2 , 3 ] # [1,2,3]\u7684\u5f15\u7528\u8ba1\u6570\u4e3a1 b = [ 4 , 5 , 6 ] # [4,5,6]\u7684\u5f15\u7528\u8ba1\u6570\u4e3a1 a . append ( b ) # [4,5,6]\u7684\u5f15\u7528\u8ba1\u6570\u53d8\u4e3a2 b . append ( a ) # [1,2,3]\u7684\u5f15\u7528\u8ba1\u6570\u53d8\u4e3a2 del a # [1,2,3]\u7684\u5f15\u7528\u8ba1\u6570\u53d8\u4e3a1 del b # [4,5,6]\u7684\u5f15\u7528\u8ba1\u6570\u53d8\u4e3a1 \u503c\u4e0d\u518d\u88ab\u4efb\u4f55\u540d\u5b57\u5173\u8054 , \u503c\u7684\u5f15\u7528\u8ba1\u6570\u4e3a0 , \u5e94\u8be5\u88ab\u56de\u6536\u4f46\u56e0\u4e3a\u5faa\u73af\u5f15\u7528\u7684\u5b58\u5728\u4e0d\u80fd\u88ab\u56de\u6536 .. So , \u5faa\u73af\u5f15\u7528\u662f\u81f4\u547d\u7684 , \u8fd9\u4e0e\u624b\u52a8\u8fdb\u884c\u5185\u5b58\u7ba1\u7406\u6240\u9020\u6210\u7684\u5185\u5b58\u6cc4\u9732\u6beb\u65e0\u533a\u522b .. Ps : \u9b54\u6cd5\u65b9\u6cd5 ` __del__ ` \u6790\u6784\u51fd\u6570","title":"\u5f15\u7528\u8ba1\u6570"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/00_Python%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D/#-","text":"\u6807\u8bb0/\u6e05\u9664\u7b97\u6cd5\u7684\u505a\u6cd5\u662f\u5f53\u5e94\u7528\u7a0b\u5e8f\u53ef\u7528\u7684\u5185\u5b58\u7a7a\u95f4\u88ab\u8017\u5c3d\u7684\u65f6, \u5c31\u4f1a\u505c\u6b62\u6574\u4e2a\u7a0b\u5e8f,\u7136\u540e\u8fdb\u884c\u4e24\u9879\u5de5\u4f5c \u7b2c\u4e00\u9879\u5219\u662f\u6807\u8bb0,\u7b2c\u4e8c\u9879\u5219\u662f\u6e05\u9664 \u4ee5\u524d\u9762a\u3001b\u5217\u8868\u7684\u5faa\u73af\u5f15\u7528\u4e3a\u4f8b. \u5f53\u6211\u4eec\u540c\u65f6\u5220\u9664a\u4e0eb\u65f6,\u4f1a\u6e05\u7406\u5230\u6808\u533a\u4e2da\u4e0eb\u7684\u5185\u5bb9,\u53ea\u5269\u4e0b\u5806\u533a\u5185\u4e8c\u8005\u7684\u76f8\u4e92\u5f15\u7528... \u4e8e\u662f\u5217\u8868a\u4e0eb\u90fd\u672a\u88ab\u6807\u8bb0\u5b58\u6d3b,\u4e8c\u8005\u4f1a\u88ab\u6e05\u7406\u6389,\u8fd9\u6837\u5c31\u89e3\u51b3\u4e86\u5faa\u73af\u5f15\u7528\u5e26\u6765\u7684\u5185\u5b58\u6cc4\u6f0f\u95ee\u9898!!!","title":"\u6807\u8bb0-\u6e05\u9664"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/00_Python%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D/#_6","text":"\u57fa\u4e8e\u5f15\u7528\u8ba1\u6570\u7684\u56de\u6536\u673a\u5236, \u6bcf\u6b21\u56de\u6536\u5185\u5b58, \u90fd\u9700\u8981\u628a\u6240\u6709\u5bf9\u8c61\u7684\u5f15\u7528\u8ba1\u6570\u90fd\u904d\u5386\u4e00\u904d, \u8fd9\u662f\u975e\u5e38\u6d88\u8017\u65f6\u95f4\u7684 \u4e8e\u662f\u5f15\u5165\u4e86\u5206\u4ee3\u56de\u6536\u6765\u63d0\u9ad8\u56de\u6536\u6548\u7387, \u5206\u4ee3\u56de\u6536\u91c7\u7528\u7684\u662f\u7528\u201c \u7a7a\u95f4\u6362\u65f6\u95f4 \u201d\u7684\u7b56\u7565 \u6838\u5fc3\u601d\u60f3 : \u5b58\u6d3b\u7684\u8d8a\u4e45\u7684\u8d8a\u4e0d\u53ef\u80fd\u662f\u5783\u573e \u5728\u5386\u7ecf\u591a\u6b21\u626b\u63cf\u7684\u60c5\u51b5\u4e0b , \u90fd\u6ca1\u6709\u88ab\u56de\u6536\u7684\u53d8\u91cf , gc\u673a\u5236\u5c31\u4f1a\u8ba4\u4e3a , \u8be5\u53d8\u91cf\u662f\u7ecf\u5e38\u7528\u7684\u53d8\u91cf , gc\u5bf9\u5176\u626b\u63cf\u7684\u9891\u7387\u4f1a\u964d\u4f4e \u5206\u4ee3\u6307\u7684\u662f\u6839\u636e\u5b58\u6d3b\u65f6\u95f4\u6765\u4e3a\u53d8\u91cf\u5212\u5206\u4e0d\u540c\u7b49\u7ea7 ( \u4e5f\u5c31\u662f\u4e0d\u540c\u7684\u4ee3 ), \u56de\u6536\u4f9d\u7136\u662f\u4f7f\u7528\u5f15\u7528\u8ba1\u6570\u4f5c\u4e3a\u56de\u6536\u7684\u4f9d\u636e \u5047\u8bbegc\u673a\u5236\u5212\u5206\u4e863\u4e2a\u4ee3 : \u65b0\u751f\u4ee3 \u3001 \u9752\u6625\u4ee3 \u3001 \u8001\u5e74\u4ee3 1 > \u65b0\u5b9a\u4e49\u7684\u53d8\u91cf , \u653e\u5230\u65b0\u751f\u4ee3\u8fd9\u4e2a\u7b49\u7ea7\u4e2d , \u5047\u8bbe\u6bcf\u96941\u5206\u949f\u626b\u63cf\u65b0\u751f\u4ee3\u4e00\u6b21 , \u5982\u679c\u53d1\u73b0\u53d8\u91cf\u4f9d\u7136\u88ab\u5f15\u7528 , \u90a3\u4e48\u8be5\u5bf9\u8c61\u7684\u6743\u91cd ( \u6743\u91cd\u672c\u8d28\u5c31\u662f\u4e2a\u6574\u6570 ) \u52a0\u4e00 ; 2 > \u5f53\u53d8\u91cf\u7684\u6743\u91cd\u5927\u4e8e\u67d0\u4e2a\u8bbe\u5b9a\u5f97\u503c ( \u5047\u8bbe\u4e3a3 ), \u4f1a\u5c06\u5b83\u79fb\u52a8\u5230\u66f4\u9ad8\u4e00\u7ea7\u7684\u9752\u6625\u4ee3 , \u9752\u6625\u4ee3\u7684gc\u626b\u63cf\u7684\u9891\u7387\u4f4e\u4e8e\u65b0\u751f\u4ee3 ( \u626b\u63cf\u65f6\u95f4\u95f4\u9694\u66f4\u957f ); \u5047\u8bbe5\u5206\u949f\u626b\u63cf\u9752\u6625\u4ee3\u4e00\u6b21 , \u8fd9\u6837\u6bcf\u6b21gc\u9700\u8981\u626b\u63cf\u7684\u53d8\u91cf\u7684\u603b\u4e2a\u6570\u5c31\u53d8\u5c11\u4e86 , \u8282\u7701\u4e86\u626b\u63cf\u7684\u603b\u65f6\u95f4 3 > \u63a5\u4e0b\u6765 , \u9752\u6625\u4ee3\u4e2d\u7684\u5bf9\u8c61 , \u4e5f\u4f1a\u4ee5\u540c\u6837\u7684\u65b9\u5f0f\u88ab\u79fb\u52a8\u5230\u8001\u5e74\u4ee3\u4e2d . \u4e5f\u5c31\u662f\u7b49\u7ea7 ( \u4ee3 ) \u8d8a\u9ad8 , \u88ab\u5783\u573e\u56de\u6536\u673a\u5236\u626b\u63cf\u7684\u9891\u7387\u8d8a\u4f4e .. \u5206\u4ee3\u56de\u6536\u7684\u5f0a\u7aef : \u4f8b\u5982\u4e00\u4e2a\u53d8\u91cf\u521a\u521a\u4ece\u65b0\u751f\u4ee3\u79fb\u5165\u9752\u6625\u4ee3 , \u8be5\u53d8\u91cf\u7684\u7ed1\u5b9a\u5173\u7cfb\u5c31\u89e3\u9664\u4e86 , \u8be5\u53d8\u91cf\u5e94\u8be5\u88ab\u56de\u6536 , \u4f46\u9752\u6625\u4ee3\u7684\u626b\u63cf\u9891\u7387\u4f4e\u4e8e\u65b0\u751f\u4ee3 , \u8be5\u53d8\u91cf\u7684\u56de\u6536\u5c31\u4f1a\u88ab\u5ef6\u8fdf ..","title":"\u5206\u4ee3\u56de\u6536"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/00_Python%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D/#_7","text":"\u53d8\u91cf\u5206\u4e3a -- \u503c\u7c7b\u578b(\u503c\u8bed\u4e49)\u548c\u5f15\u7528\u7c7b\u578b(\u5f15\u7528\u8bed\u4e49) \u7ed9\u7237\u523b\u5728\u9aa8\u9ad3\u91cc: \u5f15\u7528\u662f\u5565\uff1f\u5f15\u7528\u5c31\u662f\u6307\u5411.\u53d8\u91cf\u540d\u6307\u5411\u81ea\u8eab\u7ed1\u5b9a\u5bf9\u8c61\u7684\u5185\u5b58\u5730\u5740!! \u4e00\u7cfb\u5217\u7684\u7ed1\u5b9a\u64cd\u4f5c\u90fd\u662f\u5728\u4f20\u9012\u67d0\u4e00\u5bf9\u8c61\u7684\u5730\u5740\u7ed9\u67d0\u4e00\u53d8\u91cf\u540d\u8fdb\u884c\u7ed1\u5b9a!! \u503c\u7c7b\u578b int a = 10 \u5fc5\u987b\u6307\u5b9a\u7c7b\u578b,a\u4e2d\u53ea\u80fd\u5b58\u6574\u6570 \u628a\u53d8\u91cf\u7684\u503c\u76f4\u63a5\u4fdd\u5b58\u5728\u53d8\u91cf\u7684\u5b58\u50a8\u533a\u91cc,\u4f8b\u5982C\u8bed\u8a00,\u91c7\u7528\u8fd9\u79cd\u5b58\u50a8\u65b9\u5f0f,\u6bcf\u4e00\u4e2a\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u6240\u5360\u7528\u7684\u7a7a\u95f4\u5c31\u8981\u6839\u636e\u53d8\u91cf\u7684\u5b9e\u9645\u5927\u5c0f\u800c\u5b9a,\u65e0\u6cd5\u56fa\u5b9a\u4e0b\u6765.. \u5f15\u7528\u7c7b\u578b a = 10 \u95ee: a\u662f\u6570\u503c10\u5185\u5b58\u7684\u522b\u540d\uff1f\uff08X\uff09; a\u4e2d\u5b58\u7684\u662f\u6570\u503c10\uff1f\uff08X\uff09 \u7b54: \u8fd9\u4e0e\u4e0a\u9762\u7684 \u53d8\u91cf\u5b58\u50a8 \u90e8\u5206\u7684\u5185\u5bb9\u4ea4\u76f8\u547c\u5e94... \u7b80\u5355\u6765\u8bf4. a\u72ec\u7acb\u5f00\u53d1\u4e86\u4e00\u5757\u7a7a\u95f4(\u6808\u533a), \u91cc\u9762\u4fdd\u5b58(\u7ef4\u62a4)\u7684\u662f \u53d8\u91cf\u540d\u4e0e10\u7684\u5185\u5b58\u5730\u5740\u7684\u5173\u8054\u5173\u7cfb. \u56e0\u800c \u6307\u5411\u6570\u503c10\u7684\u5185\u5b58\u5730\u5740,\u662fid(10)\u7684\u4e00\u4e2a\u5f15\u7528.. Python\u53d8\u91cf\u662f\u5f15\u7528\u8bed\u4e49, \u53d8\u91cf\u540d \u5f15\u7528(\u6307\u5411) \u7ed1\u5b9a\u5bf9\u8c61\u7684 \u5185\u5b58\u5730\u5740 \u53d8\u91cf\u8bb0\u5f55\u4e86\u5bf9\u8c61\u5728\u5806\u7a7a\u95f4\u4e2d\u7684\u5730\u5740 \u767e\u5ea6\u8c37\u6b4c\u67e5\u9605\u6587\u6863 , \u5f88\u591a\u6587\u7ae0\u4e2d\u90fd\u4f1a\u8fd9\u6837\u8bf4 \u53d8\u91cf\u540d\u53ea\u662f\u7ed9\u5bf9\u5e94\u7684\u5185\u5b58\u5730\u5740\u8d77\u4e86\u4e2a\u522b\u540d . \u5c31\u50cf\u662f\u4e00\u4e2a\u6807\u7b7e\u8d34\u5728\u4e86\u4e0a\u9762 !! \u2611\ufe0f \u53d8\u91cf\u5373\u67d0\u4e00\u5bf9\u8c61\u7684\u5185\u5b58\u5730\u5740 .. \u2611\ufe0f \u521a\u63a5\u89e6python\u65f6 , \u8fd9\u6837\u89e3\u91ca\u53ef\u4ee5\u65b9\u4fbf\u7406\u89e3 , \u4f46\u8fd9\u4e9b\u8bf4\u6cd5\u90fd\u662f\u7b80\u8bf4 . \u5177\u4f53\u6765\u8bf4 , python\u4e0d\u4f1a\u5bf9\u53d8\u91cf\u540d\u5355\u72ec\u4f5c\u5b58\u50a8 . \u4f46\u4f1a\u5c06\u53d8\u91cf\u540d\u4e0e\u503c\u5185\u5b58\u5730\u5740\u7684\u5173\u8054\u5173\u7cfb\u5b58\u5230\u6808\u533a . ( \u6bcf\u4e2a \"\u53d8\u91cf\u540d:id(\u503c)\" \u5728\u6808\u533a\u4e2d\u7684\u6240\u5360\u7a7a\u95f4\u7684\u5927\u5c0f\u90fd\u662f\u4e00\u6837\u7684 ) \u8bb0\u4f4f ! \u5728python\u91cc , \u8be5\u6808\u533a\u6709\u4e2a\u4e13\u4e1a\u540d\u8bcd , \u53eb\u505a\u547d\u540d\u7a7a\u95f4 !! \u8981\u6761\u4ef6\u53cd\u5c04 , \u4e00\u65e6\u770b\u5230\u67d0\u53d8\u91cf\u540d , \u5c31\u8981\u77e5\u9053\u6307\u7684\u662f\u547d\u540d\u7a7a\u95f4\u4e2d\u8be5\u53d8\u91cf\u540d\u4e0e\u5bf9\u8c61\u5185\u5b58\u5730\u5740\u7684\u5173\u8054\u5173\u7cfb . \"'\u53d8\u91cf\u88ab\u8d4b\u503c = \u53d8\u91cf\u88ab\u5f15\u7528'\" \u7ed1\u5b9a\u64cd\u4f5c(eg \u8d4b\u503c)\u5c31\u662f\u4f20\u9012\u67d0\u4e00\u5bf9\u8c61\u7684\u5185\u5b58\u5730\u5740, \u63a5\u6536/\u88ab\u7ed1\u5b9a/\u88ab\u8d4b\u503c \u7684\u53d8\u91cf\u4e0e\u8be5\u5185\u5b58\u5730\u5740\u8fdb\u884c\u7ed1\u5b9a \u200b \u4e3e\u4e2a\u8d4b\u503c\u64cd\u4f5c\u4e2d\u6700\u7b80\u5355\u7684\u4f8b\u5b50 : a = 10 b = a \u5185\u5b58 ( \u5806\u533a ) >> \u5185\u5b58\u5730\u5740xb001\u5b58\u50a8\u6570\u503c10 \u547d\u540d\u7a7a\u95f4 ( \u6808\u533a ) >> xb201 : a -- xb001 xb202 : b -- xb001 a = 10 # -- \u4f20\u9012\u5bf9\u8c6110\u7684\u5185\u5b58\u5730\u5740 a\u5f00\u8f9f\u4e00\u5757\u7a7a\u95f4\u7ef4\u62a4\u6570\u503c10\u7684\u5185\u5b58\u5730\u5740 a\u5e76\u6ca1\u6709\u5b5810\u8fd9\u4e2a\u503c , \u800c\u662f\u5c06a\u53d8\u91cf\u540d\u4e0e\u53d8\u91cf\u503c10\u7684\u5730\u5740\u7ed1\u5b9a\u5728\u4e86\u4e00\u8d77 b = a # -- \u4f20\u9012\u53d8\u91cfa\u7ed1\u5b9a\u5bf9\u8c61\u7684\u5185\u5b58\u5730\u5740 '\u88ab\u8d4b\u503c = \u88ab\u5f15\u7528' \u7b49\u5f0f\u53f3\u8fb9\u5148\u6267\u884c , \u9996\u5148\u53f3\u8fb9\u7684a\u53d8\u91cf\u80af\u5b9a\u662f\u80fd\u627e\u5230\u7684 , \u5426\u5219\u4f1a\u62a5\u9519 . a\u53d8\u91cf\u88ab\u5f15\u7528 , \u62ff\u5230a\u4e0e\u5176\u5173\u8054\u7684\u5185\u5b58\u5730\u5740xb001\u4f20\u9012\u7ed9b\u53d8\u91cf . \u56e0\u4e3apython\u5185\u90e8\u7684\u4f18\u5316\u673a\u5236 , \u53ea\u9700\u5c06\u6570\u503c10\u7684\u5f15\u7528\u8ba1\u6570\u52a01\u5373\u53ef . x = 10 y = 20 z = x + y # -- \u4f20\u9012\u4e00\u4e2a\u65b0\u5bf9\u8c61\u7684\u5185\u5b58\u5730\u5740 \u201c = \u201c \u7b49\u53f7\u53f3\u8fb9\u7684x \u3001 y\u53d8\u91cf\u88ab\u5f15\u7528 , \u627e\u5230\u5404\u81ea\u7ed1\u5b9a\u5bf9\u8c61\u7684\u503c\u8fdb\u884c\u8fd0\u7b97 , \u5c06\u8fd0\u7b97\u540e\u7684\u5bf9\u8c61\u7684\u5185\u5b58\u5730\u5740\u4f20\u9012\u7ed9\u53d8\u91cfz \"\u5f15\u7528\" \u8fd9\u4e2a\u6982\u5ff5 , \u6df1\u6d45\u62f7\u8d1d \u3001 \u51fd\u6570\u53c2\u6570\u7684\u4f20\u9012\u7b49\u90fd\u4e0e\u5176\u606f\u606f\u76f8\u5173 .. \"python\u4e2d\u51fd\u6570\u53c2\u6570\u7684\u4f20\u9012\" \u90fd\u662f\u5f15\u7528 , \u53ea\u662f\u8981\u533a\u5206\u5f15\u7528\u7684\u5bf9\u8c61\u53ef\u53d8\u4e0e\u4e0d\u53ef\u53d8\u7f62\u5566 ..","title":"\u503c\u7c7b\u578b\u4e0e\u5f15\u7528\u7c7b\u578b"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/00_Python%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D/#_8","text":"\u9996\u5148\u8981\u77e5\u9053 \u5728\u8ba1\u7b97\u673a\u4e2d\u5b58\u50a8\u7684\u6570\u636e\u662f0101011111\u7684\u6837\u5b50,01\u7684\u9ad8\u4f4e\u7535\u5e73. b\u4f4d|\u6bd4\u7279; B\u5b57\u8282; kB\u5343\u5b57\u8282;M;G;T 1byte == 8bit","title":"\u5b57\u7b26\u7f16\u7801"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/00_Python%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D/#ascii","text":"\u7279\u70b9: \u53ea\u6709\u82f1\u6587\u5b57\u7b26\u4e0e\u6570\u5b57\u7684\u4e00\u4e00\u5bf9\u5e94\u5173\u7cfb,\u4e00\u4e2a\u82f1\u6587\u5b57\u7b26\u5360\u75281byte \u6211\u4eec\u53ef\u4ee5\u7b97\u4e00\u7b97, \u4e00\u4e2a\u5b57\u8282\u5305\u542b8\u4e2abit\u6bd4\u7279\u4f4d(8\u4e2a\u4e8c\u8fdb\u5236\u4f4d),\u6bcf\u4e2a\u4f4d\u7f6e\u90fd\u53ef\u4ee5\u9009\u62e9\u586b\u51650\u6216\u80051 \u6240\u4ee5\u53ef\u4ee5\u8868\u793a2^8=256\u4e2a\u5b57\u7b26.. 256\u4e2a\u5b57\u7b26\u5305\u542b\u4e86\u82f1\u6587\u5b57\u6bcd\u4ee5\u53ca\u4e00\u4e9b\u7b26\u53f7. \u8fd9\u5c31\u662f\u719f\u77e5\u7684 ASCII \u7f16\u7801. \u5341\u8fdb\u5236\u8868\u793a:0-127.","title":"ASCII"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/00_Python%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D/#unicode","text":"\u4e3a\u4e86\u8ba9\u8ba1\u7b97\u673a\u8bc6\u522b\u81ea\u5df1\u56fd\u5bb6\u7684\u8bed\u8a00\u548c\u82f1\u6587,\u4e2d\u56fd\u4eba\u8ba2\u5236\u4e86GBK..\u97e9\u56fd\u4eba\u5236\u5b9a\u4e86Euc-kr... GBK\u8868\u7684\u7279\u70b9: 1> \u53ea\u6709\u4e2d\u6587\u5b57\u7b26\u3001\u82f1\u6587\u5b57\u7b26\u4e0e\u6570\u5b57\u7684\u4e00\u4e00\u5bf9\u5e94\u5173\u7cfb (Euc-kr\u540c\u7406) 2> \u4e00\u4e2a\u82f1\u6587\u5b57\u7b26\u5bf9\u5e941Bytes 2^8=256 \u53ef\u8868\u793a\u6240\u6709\u82f1\u6587\u5b57\u7b26 3> \u4e00\u4e2a\u4e2d\u6587\u5b57\u7b26\u5bf9\u5e942Bytes 2^16=65536 \u53ef\u8868\u793a\u6240\u6709\u4e2d\u6587\u5b57\u7b26 \u4e3a\u4e86\u5c06\u6240\u6709\u8bed\u8a00\u7edf\u4e00\u5230\u4e00\u5957\u7f16\u7801\u91cc\u9762,\u5c31\u4ea7\u751f\u4e86Unicode\u7f16\u7801(\u6240\u6709\u5b57\u7b26\u90fd\u5360\u75282\u5b57\u8282). UTF-8\u7f16\u7801(\u53ef\u53d8\u957f): Unicode\u7f16\u7801\u4e2d\u7684\u4e00\u4e2a\u82f1\u6587\u5b57\u7b26\u4f1a\u5360\u7528\u4e24\u4e2a\u5b57\u8282, \u82e5\u82f1\u6587\u5b57\u7b26\u5f88\u591a,\u4f1a\u6d6a\u8d39\u5927\u91cf\u5b58\u50a8\u7a7a\u95f4\u4ee5\u53ca\u6570\u636e\u4ece\u5185\u5b58\u5199\u5165\u786c\u76d8\u7684IO\u65f6\u95f4... \u6240\u4ee5\u6709\u4e86UTF-8\u7f16\u7801,\u8be5\u7f16\u7801\u4e2d\u4e00\u4e2a\u82f1\u6587\u5b57\u7b26\u53601Bytes,\u4e00\u4e2a\u4e2d\u6587\u5b57\u7b26\u53603Bytes,\u751f\u50fb\u5b57\u7528\u66f4\u591a\u7684Bytes\u5b58\u50a8 \u6ce8\u610f\u4e00\u70b9 : \u6587\u672c\u7f16\u8f91\u5668\u8f93\u5165\u4efb\u4f55\u5b57\u7b26\u90fd\u662f\u6700\u5148\u5b58\u5728\u4e8e\u5185\u5b58\u4e2d , \u662funicode\u7f16\u7801\u7684 , \u4ece\u5185\u5b58\u5b58\u653e\u4e8e\u786c\u76d8\u7684\u8fc7\u7a0b\u4e2d\u6570\u636e\u53ef\u4ee5\u8f6c\u6362\u6210\u4efb\u610f\u5176\u4ed6\u7f16\u7801 . \u4e3e\u4e2a\u4f8b\u5b50 , \u6587\u672c\u7f16\u8f91\u5668\u4e2d\u5199\u5165\u591a\u56fd\u7684\u5b57\u7b26 \u591a\u56fd\u5b57\u7b26 \u2014\u221a\u2014\u300b \u5185\u5b58 ( unicode\u683c\u5f0f\u7684\u4e8c\u8fdb\u5236 ) \u2014\u2014\u221a\u2014\u300b \u786c\u76d8 ( utf - 8 \u683c\u5f0f\u7684\u4e8c\u8fdb\u5236 ) \u7f16\u7801encode : \u5b57\u7b26 -- \u5185\u5b58 -- \u786c\u76d8 \u7531\u5b57\u7b26\u8f6c\u6362\u6210\u5185\u5b58\u4e2d\u7684unicode , \u4ee5\u53ca\u7531unicode\u8f6c\u6362\u6210\u5176\u4ed6\u7f16\u7801\u7684\u8fc7\u7a0b \u82e5\u6587\u4ef6\u4e2d\u5305\u542b\u6c49\u5b57 \u3001 \u97e9\u6587\u7b49\u591a\u56fd\u8bed\u8a00 , unicode\u80fd\u8bc6\u522b\u591a\u56fd\u5b57\u7b26 , \u4f46GBK\u4e0d\u884c , \u6240\u4ee5\u5f80\u786c\u76d8\u4e2d\u5b58\u50a8\u7684\u65f6\u5019 , \u4f1a\u4f7f\u7528utf - 8 ( \u8282\u7701\u7a7a\u95f4 \u3001 \u51cf\u5c11IO ) \u89e3\u7801decode : \u786c\u76d8 -- \u5185\u5b58 -- \u5b57\u7b26 \u7531\u5176\u4ed6\u7f16\u7801\u8f6c\u6362\u6210unicode , \u4ee5\u53ca\u7531\u5185\u5b58\u4e2d\u7684unicode\u8f6c\u6362\u6210\u5b57\u7b26\u7684\u8fc7\u7a0b \u6709\u4e09\u4e2a\u95ee\u9898 ( \u4e0d\u60f3\u6df1\u7a76\u4e86 \u8bb0\u4f4f\u4ed6\u4e09\u90fd\u662f\u5bf9\u7684\u5c31\u884c ): 1. \u4e3a\u5565\u5b58\u5728\u5185\u5b58\u4e2d\u7684\u5b57\u7b26\u7f16\u7801\u683c\u5f0f\u4e0d\u7528utf - 8 , \u800c\u662funicode ? 2. unicode\u7f16\u7801\u662f\u5982\u4f55\u8f6c\u6210\u5176\u4ed6\u7f16\u7801\u7684 ? 3. \u4e3a\u4f55\u53ea\u6709unicode\u624d\u4f1a\u4e0e\u5b57\u7b26\u76f8\u5bf9\u5e94 ( \u6587\u672c\u7f16\u8f91\u5668\u8f93\u5165\u4efb\u4f55\u5b57\u7b26\u90fd\u662f\u6700\u5148\u5b58\u5728\u4e8e\u5185\u5b58\u4e2d , \u662funicode\u7f16\u7801\u7684\u5bfc\u81f4\u7684 ? )","title":"Unicode\u7f16\u7801"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/00_Python%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D/#_9","text":"\u5f52\u6839\u5230\u5e95,\u4e2d\u95f4\u6709\u4e2aunicode\u5728\u4f5c\u795f... # -*- coding:utf-8 -*- \u6307\u660e\u8be5\u6587\u4ef6\u5199\u5165\u786c\u76d8\u65f6\u91c7\u7528\u7684\u7f16\u7801\u683c\u5f0f x = \"\u4e0a\" print ( x ) \u5728python2\u4e2d , \u5c06 \"\u4e0a\" \u4ece\u786c\u76d8\u8bfb\u5165\u5185\u5b58\u7684\u89e3\u7801\u683c\u5f0f\u662f\u6839\u636e\u6587\u4ef6\u5934\u7684\u7f16\u7801\u683c\u5f0f\u51b3\u5b9a\u7684 , \u8fd9\u91cc\u662futf - 8 , \u6ca1\u6709\u6587\u4ef6\u5934\u7684\u8bdd , \u5c31\u7528\u7f16\u8bd1\u5668\u9ed8\u8ba4\u7684\u7f16\u7801 ; \u5728\u6253\u5370x\u65f6 , pycharm\u53d1\u73b0 \"\u4e0a\" \u5bf9\u5e94\u7684\u5b57\u7b26\u7f16\u7801\u662futf - 8 ,( \u53ea\u6709unicode\u624d\u4f1a\u76f4\u63a5\u5bf9\u5e94\u5b57\u7b26 ), \u6240\u4ee5\u9700\u8981\u8fdb\u884c\u4e86\u89e3\u7801 .. pycharm\u9ed8\u8ba4\u7684\u7f16\u7801\u5c31\u662futf - 8 , \u6240\u4ee5\u80fd\u6b63\u786e\u663e\u793a .. \u4f46\u7528windows\u7684cmd\u8fd0\u884c\u8be5\u4ee3\u7801 , \u4f1a\u4e71\u7801 , \u56e0\u4e3awindows cmd\u7684\u9ed8\u8ba4\u7f16\u7801\u662fgbk .. \u82e5\u4f7f\u7528cmd\u7684\u9ed8\u8ba4\u7f16\u7801 . \"\u4e0a\" \u7528utf - 8 \u7f16\u7801\u5230\u786c\u76d8\u4e2d\u7684 , \u7528gbk\u4ece\u786c\u76d8\u4e2d\u89e3\u7801\u5c31\u4f1a\u4e71\u7801 .. python2\u7684\u89e3\u51b3\u65b9\u6848\u5c31\u662f x = u \"\u4e0a\" \u4fdd\u8bc1 \"\u4e0a\" \u5728\u5185\u5b58\u4e2d\u7684\u7f16\u7801\u662funicode .. \u5728python3\u4e2d , \u4e0d\u9700\u8981\u6587\u4ef6\u5934 , \u5728\u5185\u5b58\u4e2d\u7684\u7f16\u7801\u683c\u5f0f\u90fd\u662funicode !! So\u4e0d\u7ba1\u5728pychrm\u8fd8\u662fwindows cmd\u4e0a\u90fd\u80fd\u6b63\u786e\u663e\u793a !!! ( \u7b80\u5355\u7406\u89e3 \u5b57\u7b26\u4e0eunicode\u662f\u4e00\u8d77\u7684 !!! \u522b\u5206\u89e3\u6210 \u5b57\u7b26 -- encode -- unicode\u5566 .. \u6211\u7d2f\u4e86 . ) \u5177\u4f53\u6765\u8bf4 , python3\u4e2d\u5b57\u8282bytes\u4e0eUnicode\u5b57\u7b26\u7684\u8f6c\u5316 : bytes : \u5305\u542b8\u4f4d\u7684\u4e8c\u8fdb\u5236\u6570 ; str : \u5305\u542bunicode\u5b57\u7b26 . Unicode\u5b57\u7b26 ==> ` encode () ` ==> bytes\u4e8c\u8fdb\u5236\u6570\u636e \u5373 \u5b57\u7b26 encode \u4e8c\u8fdb\u5236 bytes\u4e8c\u8fdb\u5236\u6570\u636e ==> ` decode () ` ==> Unicode\u5b57\u7b26 \u5373 \u4e8c\u8fdb\u5236 decode \u5b57\u7b26 \"\"\" chr() \u5c06\u4e00\u4e2a\u6574\u6570\u8f6c\u6362\u4e3a\u4e00\u4e2aUnicode\u5b57\u7b26 ord() \u5c06\u4e00\u4e2a\u5b57\u7b26\u8f6c\u6362\u4e3a\u5b83\u7684ASCII\u6574\u6570\u503c \"\"\"","title":"\u4e71\u7801\u662f\u4ec0\u4e48\uff1f"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/00_Python%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D/#python_1","text":"","title":"Python\u4e2d\u7684\u4e0b\u5212\u7ebf"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/00_Python%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D/#_10","text":"Cpython\u5c31\u662f\u7ffb\u8bd1\u5de5\u4f5c , \u5c06python\u4ee3\u7801\u7ffb\u8bd1\u6210\u8ba1\u7b97\u673a\u80fd\u542c\u61c2\u7684 ! 1. \u73af\u5883\u53d8\u91cf - \u5728\u547d\u4ee4\u884c\u4e0b , \u4f7f\u7528\u53ef\u6267\u884c\u6587\u4ef6 , \u9700\u8981\u5230\u53ef\u6267\u884c\u6587\u4ef6\u7684\u8def\u5f84\u4e0b\u6267\u884c - \u82e5\u60f3\u5728\u4efb\u610f\u8def\u5f84\u4e0b\u6267\u884c\u53ef\u6267\u884c\u6587\u4ef6 , \u5c31\u9700\u8981\u5728\u73af\u5883\u53d8\u91cf\u91cc\u914d\u7f6e 2. \u8bbe\u7f6e\u73af\u5883\u53d8\u91cf - \u7528\u6237\u53d8\u91cf : \u5f53\u524d\u7528\u6237\u767b\u9646\u5230\u7cfb\u7edf , \u80fd\u591f\u8bc6\u522b\u7684\u73af\u5883\u53d8\u91cf - \u7cfb\u7edf\u53d8\u91cf : \u6240\u6709\u7528\u6237\u767b\u9646\u5230\u7cfb\u7edf , \u80fd\u591f\u8bc6\u522b\u7684\u73af\u5883\u53d8\u91cf - python\u914d\u7f6e : \u5b89\u88c5\u65f6 , add to path\u9009\u4e2d - python\u5b89\u88c5\u8def\u5f84 : \u627e\u5230 python . exe - python\u5b89\u88c5\u8def\u5f84\u7684script\u8def\u5f84 : \u627e\u5230 pip . exe 3. \u9700\u8981\u6ce8\u610f , \u5728\u7ec8\u7aef\u8f93\u5165\u7684python \u3001 pip install , \u6267\u884c\u7684\u662f\u54ea\u4e2a\u73af\u5883 \u4e0e\u5728\u73af\u5883\u53d8\u91cf\u91cc\u8bbe\u7f6e\u7684\u5148\u540e\u987a\u5e8f\u6709\u5173 4. pycharm\u4e2d\u5f00\u53d1\u9879\u76ee , \u9700\u8981\u6ce8\u610f\u4f7f\u7528\u7684\u89e3\u91ca\u5668\u662f\u54ea\u4e2a pycharm\u53ef\u4ee5\u521b\u5efa\u865a\u62df\u73af\u5883 , \u865a\u62df\u73af\u5883\u7528\u4e8e\u89e3\u51b3\u7248\u672c\u5171\u5b58\u7684\u95ee\u9898 . mac\u800c\u8a00 : \u9ed8\u8ba4\u5728 / Library / Frameworks / Python . framework / Versions \u8fd9\u4e2a\u8def\u5f84\u4e0b / Library / Frameworks / Python . framework / Versions / 3.8 / bin \u6709unix\u53ef\u6267\u884c\u6587\u4ef6pip / Library / Frameworks / Python . framework / Versions / 3.8 \u6709\u4e2aunix\u53ef\u6267\u884c\u6587\u4ef6python","title":"\u73af\u5883\u53d8\u91cf"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/01_%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/","text":"\u5e8f\u5217 ( \u5217\u8868 \u3001 \u5143\u7956 \u3001 \u5b57\u7b26\u4e32 ) \u90fd\u80fd\u7528\u64cd\u4f5c\u7b26 ( \u6bd4\u8f83 ` > `\u3001 \u8fde\u63a5 ` + `\u3001 \u91cd\u590d ` * `\u3001 \u590d\u5408\u8d4b\u503c ` * =`\u3001 \u6210\u5458 ` in ` ) \u4ee5\u53ca \u5207\u7247 for - else \u3001 while-else \u5f53\u5faa\u73af\u6761\u4ef6\u4e0d\u6210\u7acb\u800c\u81ea\u7136\u7ed3\u675f\u65f6,\u4f1a\u6267\u884celse\u91cc\u7684\u4ee3\u7801 python\u7684\u4f4d\u8fd0\u7b97 \uff5c & << >> + - \u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e- = + = a + = 2 \u7b49\u540c\u4e8e a = a + 2 float\u8fd0\u7b97\u9677\u9631 0.1 + 0.2 == 0.30000000000000004 or\u6709\u771f\u4e3a\u771f ,and\u6709\u5047\u5fc5\u5047 / ** and\u627e\u5047\u7684,or\u627e\u771f\u7684 ** ( 10 and 0 ) or ( '' and 0 ) \u7ed3\u679c\u4e3a '' res = x if x > y else y \u7ea6\u5b9a\u4fd7\u6210 ,\u5168\u90e8\u5927\u5199\u7684\u53d8\u91cf\u4e3a\u5e38\u91cf \u6bd4\u5982PI = 3.1415 \u94fe\u5f0f\u8d4b\u503c x = y = z = 10 \u4ea4\u53c9\u8d4b\u503c x = 10 y = 20 x,y = y,x \u89e3\u538b\u8d4b\u503c nums = [ 1 ,2,3 ] x,y,z = nums m, * _ = nums m\u4e3a1 * _ ,p = nums n\u4e3a3 x , * y = \"hello\" y\u4e3a [ ' e ' , ' l ' , ' l ' , ' o ' ] \u8fdb\u5236\u8f6c\u6362 \u57fa\u672c\u8fd0\u7b97\u7b26\u4e4b\u6570\u5b66\u8fd0\u7b97 \u00b6 res = 3==3,5 # res -- (True,5) 3<5>2 # True \u76f8\u5f53\u4e8e x=5 3\\<x>2 1<2<3 #True int(True) # 1 int(False) # 0 False None 0 \u201c\u201d {} python\u7684 \u4f4d\u8fd0\u7b97\u7b26 \uff5c & << >> # \u6309\u4f4d\u6216\u8fd0\u7b97\u7b26:\u53ea\u8981\u5bf9\u5e94\u7684\u4e8c\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u6709\u4e00\u4e2a\u4e3a1\u65f6,\u7ed3\u679c\u4f4d\u5c31\u4e3a1 3 \uff5c 5 # 7 # \u6309\u4f4d\u4e0e\u8fd0\u7b97\u7b26:\u53c2\u4e0e\u8fd0\u7b97\u7684\u4e24\u4e2a\u503c,\u5982\u679c\u4e24\u4e2a\u76f8\u5e94\u4f4d\u90fd\u4e3a1,\u5219\u8be5\u4f4d\u7684\u7ed3\u679c\u4e3a1,\u5426\u5219\u4e3a0 3 & 6 # 2 ''' 0011 0011 0101 0110 ---- ---- 0111 0010 ''' 3 << 2 # 3*(2^2) = 12 65 >> 1 # 65*(2^-1) = 32 \u6ce8\u610f:\u5b83\u5411\u4e0b\u53d6\u6574\u4e86\uff01 (1,2,3)+(4,5) # (1,2,3,4,5) \u5e8f\u5217 (\u5217\u8868 \u5143\u7956 \u5b57\u7b26\u4e32)\u90fd\u80fd\u7528 \u64cd\u4f5c\u7b26 (\u6bd4\u8f83 > \u3001\u8fde\u63a5 + \u3001\u91cd\u590d * \u3001\u590d\u5408\u8d4b\u503c *= \u3001\u6210\u5458 in ) \u4ee5\u53ca \u5207\u7247 \u4f55\u4e3a\u5e8f\u5217? \u53ef\u4ee5\u901a\u8fc7\u4e0b\u6807\u504f\u79fb\u91cf\u8bbf\u95ee\u5230\u5b83\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u6210\u5458.. + - \u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e -= += x=20 x-=x-x # 20 python float\u8fd0\u7b97\u9677\u9631 0.1+0.2 == 0.3 # False python\u7684\u4e58\u65b9\u8fd0\u7b97\u7b26 ** eg: 3**5 \u5c31\u662f3\u76845\u6b21\u65b9 \u57fa\u672c\u8fd0\u7b97\u7b26\u4e4b\u903b\u8f91\u4e0e\u5176\u5b83\u8fd0\u7b97 \u00b6 \u5047\u8bben\u4e3a\u6574\u6570,\u5219\u8868\u8fbe\u5f0fn&1==n%2\u7684\u503c\u4e3a True # -- n&1 n\u4e3a\u5355\u6570\u7ed3\u679c\u4e3a1;n\u4e3a\u53cc\u6570\u7ed3\u679c\u4e3a0 or \u6709\u771f\u4e3a\u771f and \u6709\u5047\u5fc5\u5047 not > and > or and\u627e\u5047\u7684,or\u627e\u771f\u7684 3 and 5 # 5 3 and not 5 # False 0 or False and 1 # False 1 and 2 or 3 --> 2 0 and 2 or 3 --> 3 \u6d41\u7a0b\u63a7\u5236 \u00b6 \u5faa\u73af\u51e0\u6b21\u7684\u5224\u65ad \u8bed\u53e5x\u548c\u8bed\u53e5y\u90fd\u4f1a\u6267\u884c\u76f8\u540c\u7684\u6b21\u6570,\u5f53 num==4 \u7684\u65f6\u5019,\u5faa\u73af\u7ed3\u675f,\u5373 num \u9700\u8981\u52a03\u4e2a1(\u8bed\u53e5y\u9700\u8981\u6267\u884c3\u6b21),\u6240\u4ee5\u8bed\u53e5x\u4e5f\u4f1a\u6267\u884c3\u6b21 PS: \u7ed3\u675f\u5faa\u73af\u7684\u65b9\u5f0f \u6761\u4ef6\u5224\u65ad | break num = 1 while num < 4 : print ( \"\u6211\u7231\u6211\u7684\u7956\u56fd\" ) # \u8bed\u53e5x num = num + 1 # \u8bed\u53e5y \u6211\u7231\u6211\u7684\u7956\u56fd \u6211\u7231\u6211\u7684\u7956\u56fd \u6211\u7231\u6211\u7684\u7956\u56fd for-else\u3001while-else \u5f53\u5faa\u73af\u6761\u4ef6\u4e0d\u6210\u7acb\u800c\u81ea\u7136\u7ed3\u675f\u65f6,\u4f1a\u6267\u884celse\u91cc\u7684\u4ee3\u7801 \u53c2\u8003:Effective Python\u7b2c12\u6761 sum(range(1,101)) \u6ce8\u610f:\u82e5\u524d\u9762\u8bed\u53e5\u5b9a\u4e49\u4e86\u540d\u4e3asum\u7684\u53d8\u91cf,\u90a3\u4e48\u5185\u7f6e\u51fd\u6570sum\u5c31\u4f1a\u5931\u6548\uff01 \u4e09\u5143\u8868\u8fbe\u5f0f: res = x if x >y else y \u8fdb\u5236\u8f6c\u6362 \u00b6 \"\"\" 10 -> 2 8 16 bin() oct() hex() \"\"\" bin ( 25 ) # 10->2 \"0b11001\" oct ( 23 ) # 10->8 \"0o27\" hex ( 28 ) # 10->16 \"0x1c\" \"\"\" 2 8 16 -> 10 int(\"\u5b57\u7b26\",base=\u8981\u8f6c\u6362\u7684\u5b57\u7b26\u662f\u4ec0\u4e48\u8fdb\u5236) \"\"\" int ( \"0b11001\" , base = 2 ) # 2->10 25 int ( \"0o27\" , base = 8 ) # 8->10 23 int ( \"0x1c\" , base = 16 ) # 16->10 28 int ( '123' , 16 ) int\u5185\u7f6e\u51fd\u6570\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216\u6570\u5b57\u8f6c\u6362\u4e3a\u6574\u578b \u82e5\u5e26base\u53c2\u6570 , 123 \u8981\u4ee5\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u8f93\u5165 int ( hex ( 255 ), 16 ) == 255 # True hex ( 255 ) '0xff' # 16\u8fdb\u5236\u7684'0xff'\u8f6c\u6362\u4e3a10\u8fdb\u5236\u6570\u4e3a255 round ( 3.4 ) # 3 \u8fd4\u56de\u6d6e\u70b9\u6570\u7684\u56db\u820d\u4e94\u5165\u503c \u8fd4\u56de\u503c\u4e3aint\u7c7b\u578b","title":"\u57fa\u672c\u8fd0\u7b97\u7b26\u548c\u6d41\u7a0b\u63a7\u5236"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/01_%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/#_1","text":"res = 3==3,5 # res -- (True,5) 3<5>2 # True \u76f8\u5f53\u4e8e x=5 3\\<x>2 1<2<3 #True int(True) # 1 int(False) # 0 False None 0 \u201c\u201d {} python\u7684 \u4f4d\u8fd0\u7b97\u7b26 \uff5c & << >> # \u6309\u4f4d\u6216\u8fd0\u7b97\u7b26:\u53ea\u8981\u5bf9\u5e94\u7684\u4e8c\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u6709\u4e00\u4e2a\u4e3a1\u65f6,\u7ed3\u679c\u4f4d\u5c31\u4e3a1 3 \uff5c 5 # 7 # \u6309\u4f4d\u4e0e\u8fd0\u7b97\u7b26:\u53c2\u4e0e\u8fd0\u7b97\u7684\u4e24\u4e2a\u503c,\u5982\u679c\u4e24\u4e2a\u76f8\u5e94\u4f4d\u90fd\u4e3a1,\u5219\u8be5\u4f4d\u7684\u7ed3\u679c\u4e3a1,\u5426\u5219\u4e3a0 3 & 6 # 2 ''' 0011 0011 0101 0110 ---- ---- 0111 0010 ''' 3 << 2 # 3*(2^2) = 12 65 >> 1 # 65*(2^-1) = 32 \u6ce8\u610f:\u5b83\u5411\u4e0b\u53d6\u6574\u4e86\uff01 (1,2,3)+(4,5) # (1,2,3,4,5) \u5e8f\u5217 (\u5217\u8868 \u5143\u7956 \u5b57\u7b26\u4e32)\u90fd\u80fd\u7528 \u64cd\u4f5c\u7b26 (\u6bd4\u8f83 > \u3001\u8fde\u63a5 + \u3001\u91cd\u590d * \u3001\u590d\u5408\u8d4b\u503c *= \u3001\u6210\u5458 in ) \u4ee5\u53ca \u5207\u7247 \u4f55\u4e3a\u5e8f\u5217? \u53ef\u4ee5\u901a\u8fc7\u4e0b\u6807\u504f\u79fb\u91cf\u8bbf\u95ee\u5230\u5b83\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u6210\u5458.. + - \u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e -= += x=20 x-=x-x # 20 python float\u8fd0\u7b97\u9677\u9631 0.1+0.2 == 0.3 # False python\u7684\u4e58\u65b9\u8fd0\u7b97\u7b26 ** eg: 3**5 \u5c31\u662f3\u76845\u6b21\u65b9","title":"\u57fa\u672c\u8fd0\u7b97\u7b26\u4e4b\u6570\u5b66\u8fd0\u7b97"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/01_%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/#_2","text":"\u5047\u8bben\u4e3a\u6574\u6570,\u5219\u8868\u8fbe\u5f0fn&1==n%2\u7684\u503c\u4e3a True # -- n&1 n\u4e3a\u5355\u6570\u7ed3\u679c\u4e3a1;n\u4e3a\u53cc\u6570\u7ed3\u679c\u4e3a0 or \u6709\u771f\u4e3a\u771f and \u6709\u5047\u5fc5\u5047 not > and > or and\u627e\u5047\u7684,or\u627e\u771f\u7684 3 and 5 # 5 3 and not 5 # False 0 or False and 1 # False 1 and 2 or 3 --> 2 0 and 2 or 3 --> 3","title":"\u57fa\u672c\u8fd0\u7b97\u7b26\u4e4b\u903b\u8f91\u4e0e\u5176\u5b83\u8fd0\u7b97"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/01_%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/#_3","text":"\u5faa\u73af\u51e0\u6b21\u7684\u5224\u65ad \u8bed\u53e5x\u548c\u8bed\u53e5y\u90fd\u4f1a\u6267\u884c\u76f8\u540c\u7684\u6b21\u6570,\u5f53 num==4 \u7684\u65f6\u5019,\u5faa\u73af\u7ed3\u675f,\u5373 num \u9700\u8981\u52a03\u4e2a1(\u8bed\u53e5y\u9700\u8981\u6267\u884c3\u6b21),\u6240\u4ee5\u8bed\u53e5x\u4e5f\u4f1a\u6267\u884c3\u6b21 PS: \u7ed3\u675f\u5faa\u73af\u7684\u65b9\u5f0f \u6761\u4ef6\u5224\u65ad | break num = 1 while num < 4 : print ( \"\u6211\u7231\u6211\u7684\u7956\u56fd\" ) # \u8bed\u53e5x num = num + 1 # \u8bed\u53e5y \u6211\u7231\u6211\u7684\u7956\u56fd \u6211\u7231\u6211\u7684\u7956\u56fd \u6211\u7231\u6211\u7684\u7956\u56fd for-else\u3001while-else \u5f53\u5faa\u73af\u6761\u4ef6\u4e0d\u6210\u7acb\u800c\u81ea\u7136\u7ed3\u675f\u65f6,\u4f1a\u6267\u884celse\u91cc\u7684\u4ee3\u7801 \u53c2\u8003:Effective Python\u7b2c12\u6761 sum(range(1,101)) \u6ce8\u610f:\u82e5\u524d\u9762\u8bed\u53e5\u5b9a\u4e49\u4e86\u540d\u4e3asum\u7684\u53d8\u91cf,\u90a3\u4e48\u5185\u7f6e\u51fd\u6570sum\u5c31\u4f1a\u5931\u6548\uff01 \u4e09\u5143\u8868\u8fbe\u5f0f: res = x if x >y else y","title":"\u6d41\u7a0b\u63a7\u5236"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/01_%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/#_4","text":"\"\"\" 10 -> 2 8 16 bin() oct() hex() \"\"\" bin ( 25 ) # 10->2 \"0b11001\" oct ( 23 ) # 10->8 \"0o27\" hex ( 28 ) # 10->16 \"0x1c\" \"\"\" 2 8 16 -> 10 int(\"\u5b57\u7b26\",base=\u8981\u8f6c\u6362\u7684\u5b57\u7b26\u662f\u4ec0\u4e48\u8fdb\u5236) \"\"\" int ( \"0b11001\" , base = 2 ) # 2->10 25 int ( \"0o27\" , base = 8 ) # 8->10 23 int ( \"0x1c\" , base = 16 ) # 16->10 28 int ( '123' , 16 ) int\u5185\u7f6e\u51fd\u6570\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216\u6570\u5b57\u8f6c\u6362\u4e3a\u6574\u578b \u82e5\u5e26base\u53c2\u6570 , 123 \u8981\u4ee5\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u8f93\u5165 int ( hex ( 255 ), 16 ) == 255 # True hex ( 255 ) '0xff' # 16\u8fdb\u5236\u7684'0xff'\u8f6c\u6362\u4e3a10\u8fdb\u5236\u6570\u4e3a255 round ( 3.4 ) # 3 \u8fd4\u56de\u6d6e\u70b9\u6570\u7684\u56db\u820d\u4e94\u5165\u503c \u8fd4\u56de\u503c\u4e3aint\u7c7b\u578b","title":"\u8fdb\u5236\u8f6c\u6362"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/02_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%BA%8F%E5%88%97/","text":"\u5b57\u7b26\u4e32 \u00b6 \u53ef\u53d8\u7c7b\u578b\u4e0e\u4e0d\u53ef\u53d8\u7c7b\u578b \u00b6 \u5b57 \u5217 \u5143 \u5178\u96c6 \u53ef\u53d8\u4e0e\u4e0d\u53ef\u53d8\u7684\u533a\u522b\u5728\u4e8e\u91cc\u9762\u5143\u7d20\u7684\u4e2a\u6570\u4ee5\u53ca\u5143\u7d20\u7684\u5185\u5b58\u5730\u5740\u662f\u5426\u53ef\u4ee5\u53d1\u751f\u53d8\u5316 \u53ef\u53d8 : list\u3001dict\u3001set \u200b \u91cc\u9762\u5143\u7d20\u7684\u4e2a\u6570\u4ee5\u53ca\u5143\u7d20\u7684\u5185\u5b58\u5730\u5740\u53ef\u4ee5\u53d1\u751f\u53d8\u5316.. \u5373\u53ef\u4ee5\u5bf9\u5bb9\u5668\u5185\u7684\u5143\u7d20\u5220\u6539\u4ee5\u53ca\u5bb9\u5668\u5143\u7d20\u7684\u589e\u52a0 \u200b \u4e0d\u53ef\u53d8 : \u6570\u5b57\u3001tuple\u3001str\u3001frozerset\u3001bool \u200b \u91cc\u9762\u5143\u7d20\u7684\u4e2a\u6570\u4ee5\u53ca\u5143\u7d20\u7684\u5185\u5b58\u5730\u5740\u90fd\u4e0d\u53ef\u4ee5\u53d1\u751f\u53d8\u5316.. \u5bf9\u4e0d\u53ef\u53d8\u5bf9\u8c61\u6765\u8bf4,\u8c03\u7528\u81ea\u8eab\u7684\u4efb\u610f\u65b9\u6cd5\u90fd\u4e0d\u4f1a\u6539\u53d8\u8be5\u5bf9\u8c61\u81ea\u8eab\u7684\u5185\u5bb9.\u5373\u5b57\u7b26\u4e32\u7684\u72ec\u6709\u529f\u80fd\u90fd\u662f\u65b0\u521b\u5efa\u4e00\u4efd\u6570\u636e.. \u5b57\u7b26\u4e32\u7684\u683c\u5f0f\u5316 \u00b6 \u683c\u5f0f\u5316\u64cd\u4f5c\u7b26--format--f ' %d , %x ' % ( 65 , 65 ) ' %s ' % (( 1 , 2 , 4 ),) a = ' %s ' % 14 a = ' %s ' % ( 14 ) a = ' %s ' % ( 14 ,) b = ( 14 ,) a = ' %s ' % b \u6ce8\u610f : 1 > \u53ea\u6709\u4e00\u4e2a % s , \u6240\u4ee5\u53ea\u80fd\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570 2 > % s \u63a5\u53d7\u4efb\u610f\u7c7b\u578b\u7684\u503c ; % d \u53ea\u63a5\u53d7int\u7c7b\u578b\u6570\u5b57 ; % x \u5341\u516d\u8fdb\u5236\u7684\u6570\u636e ; % f \u63a5\u6536\u6d6e\u70b9\u6570 'my name is {0} , my age is {1:.2f} !' . format ( '\u5706\u5468\u7387' , 3.1415926 ) # -- \u5de6\u5bf9\u9f50< \u53f3\u5bf9\u9f50> \u5c45\u4e2d^ a = 'abc' format ( a , '<10' ) # 'abc ' format ( a , '>10' ) # ' abc' format ( a , '^10' ) # ' abc ' format ( a , '*^10' ) # '***abc****' format ( 5 , '>10' ) # ' 5' # --\u7b49\u540c\u4e8e n = 5 n . __format__ ( '>10' ) # ' 5' # -- `+`\u4ee3\u8868\u603b\u662f\u6253\u5370\u6b63\u8d1f\u53f7 >>> format ( 123 , '+' ) '+123' >>> format ( - 123 , '+' ) '-123' >>> format ( - 123 , '>+10' ) ' -123' >>> format ( - 123 , '=+10' ) '- 123' >>> format ( - 123 , '0=+10' ) '-000000123' >>> format ( 546 , '0=+10' ) '+000000546' \u5b57\u7b26\u4e32\u7684\u9a7b\u7559\u673a\u5236 \u00b6 \u5b57\u7b26\u4e32\u9a7b\u7559\u662f\u4e00\u79cd\u5728\u5185\u5b58\u4e2d\u4ec5\u4fdd\u5b58\u4e00\u4efd\u76f8\u540c\u4e14\u4e0d\u53ef\u53d8\u5b57\u7b26\u4e32\u7684\u65b9\u6cd5 \"\"\" \u2605 --\u9a7b\u7559\u89c4\u5219 \"\"\" 1 > \u5b57\u7b26\u4e32\u957f\u5ea6\u4e3a0\u62161\u65f6 , \u9ed8\u8ba4\u91c7\u7528\u9a7b\u7559\u673a\u5236 \uff1b 2 > \u5b57\u7b26\u4e32\u957f\u5ea6\u5927\u4e8e1\u65f6 , \u4e14\u5b57\u7b26\u4e32\u4e2d\u53ea\u5305\u542b\u5927\u5c0f\u5199\u5b57\u6bcd \u3001 \u6570\u5b57 \u3001 \u4e0b\u5212\u7ebf ( _ ) \u65f6 , \u91c7\u7528\u9a7b\u7559\u673a\u5236 ; 3 > \u5bf9\u4e8e [ - 5 , 256 ] \u4e4b\u95f4\u7684\u6574\u6570\u6570\u5b57 , Python\u9ed8\u8ba4\u9a7b\u7559 ; 4 > \u5b57\u7b26\u4e32 \u53ea\u5728\u7f16\u8bd1\u6210\u5b57\u8282\u7801\u7684\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u9a7b\u7559 , \u800c\u975epvm\u89e3\u91ca\u8fd0\u884c\u65f6 5 > \u7528\u4e58\u6cd5\u5f97\u5230\u7684\u5b57\u7b26\u4e32 , \u82e5\u957f\u5ea6 <= 20 \u4e14\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u6570\u5b57 \u3001 \u5b57\u6bcd\u5927\u5c0f\u5199 \u3001 \u4e0b\u5212\u7ebf \uff0c \u652f\u6301\u9a7b\u7559 ; \u957f\u5ea6 > 20 , \u4e0d\u652f\u6301\u9a7b\u7559 . \u8fd9\u6837\u7684\u8bbe\u8ba1\u76ee\u7684\u662f\u4e3a\u4e86\u4fdd\u62a4 . pcy\u6587\u4ef6\u4e0d\u4f1a\u88ab\u9519\u8bef\u4ee3\u7801\u641e\u7684\u8fc7\u5927 . \"\"\" \u2605 --\u5b9e\u9a8c\u9a8c\u8bc1 \"\"\" >>> a = \"hello\" >>> b = \"hello\" >>> a is b True >>> a = \"hello$\" >>> b = \"hello$\" >>> a is b False >>> a = - 5 >>> b = - 5 >>> a is b True >>> c = - 6 >>> d = - 6 >>> c is d False \u7279\u522b\u6ce8\u610f\u5c0f\u6574\u6570\u6c60 Python\u63d0\u524d\u5efa\u7acb\u597d\u8303\u56f4\u5728[-5, 256]\u7684\u6574\u6570\u5bf9\u8c61, \u4e14\u4e0d\u4f1a\u88ab\u5783\u573e\u56de\u6536..\u65e0\u8bba\u8fd9\u4e2a\u6574\u6570\u5904\u4e8eLEGB\u4e2d\u7684\u54ea\u4e2a\u4f4d\u7f6e, \u6240\u6709\u4f4d\u4e8e\u8fd9\u4e2a\u8303\u56f4\u5185\u7684\u6574\u6570\u4f7f\u7528\u7684\u90fd\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61. \u4e3b\u8981\u76ee\u7684\u662f\u4e3a\u4e86\u907f\u514d\u9891\u7e41\u7533\u8bf7\u548c\u9500\u6bc1\u5c0f\u6574\u6570\u7684\u5185\u5b58\u7a7a\u95f4, \u63d0\u9ad8\u7a0b\u5e8f\u7684\u8fd0\u884c\u6548\u7387.. \u5b57\u7b26\u4e32\u5e38\u89c1\u5185\u7f6e\u65b9\u6cd5 \u00b6 \u5b57\u7b26\u4e32 \u65e0lindex lfind lsplit\u65b9\u6cd5 \u62fc\u63a5 -- join \u5927\u5c0f\u5199 -- swapcase upper lower casefold title \u5b57\u7b26\u4e32\u7ec4\u6210 -- isdigit isdecimal isalnum isalpha \u5f00\u5934\u7ed3\u5c3e -- startswith endswith \u627e\u4f4d\u7f6e -- index rindex find rfind \u6392\u7248 -- center ljust rjust \u5206\u5272 -- partition split rsplit \u53bb\u9664 -- strip lstrip rstrip \u66ff\u6362 -- replace \u6620\u5c04 -- maketrans\u3001translate --- \u2605 -- \u62fc\u63a5 --- \"\" . join ( \u53ef\u8fed\u4ee3\u5bf9\u8c61 ) # -- \u5207\u8bb0\u8fd9\u91cc\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u5fc5\u987b\u662fstr\u7c7b\u578b '' . join ( list ( \"Hello World\" )) # -- \"Hello World\" --- \u2605 -- \u5927\u5c0f\u5199 --- my_str . swapcase () # -- \u5927\u5c0f\u5199\u4e92\u6362 my_str . upper () my_str . lower () # -- \u5168\u53d8\u5927\u5199 my_str . casefold () # -- \u5168\u53d8\u5c0f\u5199 my_str . title () # -- \u9996\u5b57\u6bcd\u5927\u5199 my_str . islower () # -- \u662f\u5426\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210 --- \u2605 -- \u5b57\u7b26\u4e32\u7ec4\u6210\u5224\u65ad --- 'abc10' . isdigit () # False -- \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u662f\u7eaf\u6570\u5b57\u7ec4\u6210 \"\"\" isdecimal \u53ea\u5305\u542b\u5341\u8fdb\u5236\u5b57\u7b26,\u8fd9\u79cd\u65b9\u6cd5\u901a\u5e38\u7528\u4e8eunicode\u5bf9\u8c61.. bytes\u7c7b\u578b\u65e0isdecimal\u65b9\u6cd5 python3\u4f1a\u81ea\u52a8\u5c06\u53d8\u91cf\u8f6c\u53d8\u4e3aunicode,\u52a0\u4e0d\u52a0u\u90fd\u53ef \"\"\" u '123' . isdecimal () # True 'abc10' . isalnum () # True -- \u53ea\u6709\u5b57\u6bcd\u548c\u6570\u5b57 'saf\u54c8\u54c8\u54c8'.isalnum() \u7ed3\u679c\u5c45\u7136\u4e3aTrue Amazing\ud83e\udd14 'abc10' . isalpha () # False -- \u53ea\u6709\u5b57\u6bcd\u548c\u6587\u5b57 --- \u2605 -- \u5f00\u5934\u7ed3\u5c3e --- my_str . startswith ( \u5b50\u5b57\u7b26\u4e32 , \u8d77\u59cb\u4f4d\u7f6e \"\u9ed8\u8ba4\u4e3a0\" , \u7ed3\u675f\u4f4d\u7f6e \"\u9ed8\u8ba4\u4e3a\u5b57\u7b26\u4e32\u957f\u5ea6\" ) # -- \u5224\u65ad\u662f\u5426\u4ee5\u6307\u5b9a\u6570\u636e\u5f00\u5934 my_str . endswith ( \u5b50\u5b57\u7b26\u4e32 , \u8d77\u59cb\u4f4d\u7f6e , \u7ed3\u675f\u4f4d\u7f6e ) # -- \u5224\u65ad\u662f\u5426\u4ee5\u6307\u5b9a\u6570\u636e\u7ed3\u5c3e fn . endswith (( '.py' , '.sh' )) --- \u2605 -- \u627e\u4f4d\u7f6e index\u4e0efind\u7684\u533a\u522b \u82e5\u672a\u627e\u5230 \u524d\u8005\u62a5\u9519 \u540e\u8005\u8fd4\u56de - 1 --- my_str . index ( substring , beg = 0 , end = len ( string )) # -- \u8fd4\u56de\u6307\u5b9a\u5b50\u5b57\u7b26\u4e32\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u7d22\u5f15\u503c,\u5426\u5219\u629b\u51fa\u5f02\u5e38 \"im is boy is good\" . index ( \"is\" ) # 3 \"im is boy is good\" . rindex ( \"is\" ) # 10 'I like Python!!!' . rfind ( 'python' ) # -1 --- \u2605 -- \u6392\u7248 --- # center\u5c45\u4e2d # 20\u4e3a\u5b57\u7b26\u957f\u5ea6,\u5b57\u7b26\u672c\u8eab\u957f\u5ea6\u5927\u4e8e20\u4ee5\u5b57\u7b26\u957f\u5ea6\u672c\u8eab\u4e3a\u51c6;'-'\u5360\u4f4d\u7b26 # \u603b\u5bbd\u5ea6\u4e3a20,\u5b57\u7b26\u4e32\u5c45\u4e2d\u663e\u793a,\u4e0d\u591f\u7528-\u586b\u5145 'abc def' . center ( 9 , \"-\" ) # '-abc def-' 'abc def' . ljust ( 9 , \"-\" ) # 'abc def--' -- \u5c45\u5de6 'abc def' . rjust ( 9 , \"-\" ) # '--abc def' -- \u5c45\u53f3 --- \u2605 -- \u5206\u5272 \u4ee5\u6307\u5b9a\u5b57\u7b26\u4e32\u4e3a\u5355\u4f4d ( \u53ef\u4ee5\u662f\u53ea\u7531\u4e00\u4e2a\u5b57\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u4e32 ) \u8fdb\u884c\u5206\u5272 --- # -- partition\u7b2c\u4e00\u4e2a\u4e3a\u5206\u9694\u7b26\u5de6\u8fb9\u7684\u5b50\u4e32,\u7b2c\u4e8c\u4e2a\u4e3a\u5206\u9694\u7b26\u672c\u8eab,\u7b2c\u4e09\u4e2a\u4e3a\u5206\u9694\u7b26\u53f3\u8fb9\u7684\u5b50\u4e32 'abcark' . partition ( 'a' ) # ('', 'a', 'bcark') -- \u5206\u5272,\u8fd4\u56de\u4e00\u4e2a3\u5143\u7684\u5143\u7ec4 'arbcark' . split ( 'ar' ) # ['', 'bc', 'k'] -- \u4ece\u5de6\u5f00\u59cb\u5206\u5272,\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u5217\u8868 # -- split\u548crsplit\u90fd\u6709\u4e2a\u53ef\u9009\u53c2\u6570num\u4ee3\u8868\u5206\u5272\u6b21\u6570 \u9ed8\u8ba4\u662f-1 \u4ee3\u8868\u5206\u9694\u6240\u6709 'abcark' . rsplit ( 'a' , 1 ) # ['abc', 'rk'] -- \u4ece\u53f3\u5f00\u59cb\u5206\u9694 ' arb \\n \\n ' . split () # ['arb'] -- \u591a\u4e2a/n\u548c\u7a7a\u683c\u4f1a\u7b97\u4f5c\u4e00\u4e2a '' . join ( 'abcark' . split ( 'a' )) # 'bcrk' -- \u8fbe\u5230\u53bb\u9664\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u6307\u5b9a\u7684\u5b57\u7b26\u7684\u6548\u679c --- \u2605 -- \u53bb\u9664 \u53bb\u9664\u662f\u4ee5\u5b57\u7b26\u4e3a\u5355\u4f4d \u5339\u914d\u4e0d\u662f\u6309\u7167\u6574\u4e2a\u5b57\u7b26\u4e32 'as' \u5339\u914d\u7684 , \u800c\u662f\u4e00\u4e2a\u4e00\u4e2a\u5339\u914d\u7684 'a' 's' \uff01\uff01\uff01 Ps : my_str . replace () \u548cre . sub () \u90fd\u80fd\u8fbe\u5230\u53bb\u9664\u5b57\u7b26\u7684\u6548\u679c . --- 'aaastaarfsfa' . strip ( 'as' ) # 'taarfsf' -- \u53bb\u9664\u5b57\u7b26\u4e32\u5934\u5c3e\u6307\u5b9a\u5b57\u7b26 'aaastaarfsfa' . lstrip ( 'as' ) # 'taarfsfa' -- \u53bb\u9664\u5b57\u7b26\u4e32\u5de6\u8fb9\u6307\u5b9a\u5b57\u7b26 'aaastaarfsfa' . rstrip ( 'as' ) # 'aaastaarfsf' -- \u53bb\u9664\u5b57\u7b26\u4e32\u53f3\u8fb9\u6307\u5b9a\u5b57\u7b26 # 'arbcark' # \u82e5\u4e0d\u5199\u53c2\u6570,\u9ed8\u8ba4\u4ee5\u7a7a\u683c\u4e3a\u6807\u51c6,\u5305\u542b\\n,\u591a\u4e2a\u7a7a\u683c\u548c\\n\u8fde\u5728\u4e00\u8d77\u4f1a\u7b97\u6210\u4e00\u4e2a ' arbcark \\n \\n ' . strip () --- \u2605 -- \u66ff\u6362 --- my_str . replace ( old\u9700\u8981\u66ff\u6362\u7684\u5b57\u7b26\u4e32 , new\u66ff\u6362\u6210\u7684\u5b57\u7b26\u4e32 , \u4ece\u5de6\u5230\u53f3\u66ff\u6362\u591a\u5c11\u4e2a \"\u9ed8\u8ba4\u5168\u90e8\" ) # -- \u66ff\u6362 \"this is strising..is..!!!\" . replace ( 'is' , 'IS' , 2 ) # 'thIS IS strising..is..!!!' +\u3001+=\u3001join \u00b6 \"\"\" Python\u7684\u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8(immutable)\u7684 \u82e5\u60f3\u6539\u53d8\u5b57\u7b26\u4e32,\u53ea\u80fd\u901a\u8fc7\u521b\u5efa\u65b0\u7684\u5b57\u7b26\u4e32\u6765\u5b9e\u73b0. \u5c06\u5b57\u7b26\u4e32hello\u4e2d\u7684l\u6539\u4e3a\u5927\u5199\u7684L,\u6709\u4e24\u4e2a\u89e3\u51b3\u65b9\u6848: 1> \u4f7f\u7528\u5b57\u7b26\u4e32\u7684\u62fc\u63a5 2> \u4f7f\u7528\u5b57\u7b26\u4e32\u7684\u5185\u7f6e\u51fd\u6570replace \u4e24\u79cd\u65b9\u6848\u90fd\u4f1a\u5f97\u5230\u65b0\u7684\u5b57\u7b26\u4e32,\u4e14\u65f6\u95f4\u590d\u6742\u5ea6\u7686\u4e3aO(n). n\u4e3a\u65b0\u5b57\u7b26\u4e32\u7684\u957f\u5ea6. Ps: \u65f6\u95f4\u590d\u6742\u5ea6 \u5927O\u8868\u793a\u6cd5: T(n) = O( f(n) ),\u5176\u4e2df(n) \u8868\u793a\u6bcf\u884c\u4ee3\u7801\u6267\u884c\u6b21\u6570\u4e4b\u548c \u5217\u8868\u5207\u7247\u65f6\u95f4\u590d\u6742\u5ea6O(k),k\u4e3a\u5207\u7247\u957f\u5ea6,\u76f8\u5f53\u4e8e\u8981\u6267\u884c7\u6b21\u53d6\u5143\u7d20;\u5217\u8868\u6839\u636e\u4e0b\u6807\u53d6\u5143\u7d20\u662fO(1) \u8865\u5145: Java\u4e2d\u6709\u53ef\u53d8\u7684\u5b57\u7b26\u4e32\u7c7b\u578b,\u6bd4\u5982 StringBuilder,\u6bcf\u6b21\u6dfb\u52a0\u3001\u6539\u53d8\u6216\u5220\u9664\u5b57\u7b26(\u4e32),\u65e0\u9700\u521b\u5efa\u65b0\u7684\u5b57\u7b26\u4e32.. \u65f6\u95f4\u590d\u6742\u5ea6\u4ec5\u4e3aO(1)..\u8fd9\u6837\u5c31\u5927\u5927\u63d0\u9ad8\u4e86\u7a0b\u5e8f\u7684\u8fd0\u884c\u6548\u7387 \"\"\" >>> s = \"hello\" # -- s[-1:]\u4e0es[-1]\u7684\u7ed3\u679c\u90fd\u662f'o' >>> new_s = s [: 2 ] + \"LL\" + s [ - 1 :] # -- \u5b57\u7b26\u4e32\u7684\u62fc\u63a5 >>> new_s 'heLLo' >>> new_s2 = s . replace ( 'l' , 'L' ) >>> new_s2 'heLLo' += \u76f8\u8f83\u4e8e + \u6027\u80fd\u5f97\u5230\u4e86\u4e00\u5b9a\u7684\u63d0\u5347.. python\u5728\u5e95\u5c42\u5bf9+=\u505a\u4e86\u4f18\u5316\u64cd\u4f5c. \u5b57\u7b26\u4e32\u62fc\u63a5\u66f4\u63a8\u8350\u7528join(). s = \"\" for n in range ( 0 , 100000 ): # print(id(s)) s += str ( n ) \"\"\" \u5206\u6790: for\u5faa\u73af\u4f1a\u6267\u884cn\u6b21,\u5faa\u73af\u4f53\u5185\u7684\u62fc\u63a5\u64cd\u4f5c\u6bcf\u6b21\u90fd\u4f1a\u521b\u5efa\u65b0\u7684\u5b57\u7b26\u4e32,\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u4f9d\u7167\u5faa\u73af\u7684\u6b21\u6570\u4f9d\u6b21\u589e\u52a0 \u6240\u4ee5,\u8be5\u7a0b\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(1)+O(2)+...+O(n) = (n^2+n)/2 \u5373\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n^2) \u771f\u5b9e\u5206\u6790: +=\u64cd\u4f5c\u7684\u4f18\u5316,\u5728\u8fd910\u4e07\u6b21\u5b57\u7b26\u4e32\u62fc\u63a5\u64cd\u4f5c\u4e2d,\u4e0d\u4f1a\u6bcf\u6b21\u62fc\u63a5\u64cd\u4f5c\u90fd\u521b\u5efa\u65b0\u7684\u5b57\u7b26\u4e32. \u6bd4\u5982100\u5230200\u7684\u5b57\u7b26\u62fc\u63a5\u7684id(s)\u90fd\u4e3a4352190976, 200-270\u7684\u5b57\u7b26\u62fc\u63a5\u7684id(s)\u90fd\u4e3a1403247265.. \"\"\" Q : \u4e0b\u9762\u4e24\u79cd\u5b57\u7b26\u4e32\u62fc\u63a5\u65b9\u5f0f\u8c01\u66f4\u9ad8\u6548\uff1f s = '' for n in range ( 0 , 100000 ): s += str ( n ) l = [] # -- \u8be5\u7a0b\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(2n) for n in range ( 0 , 100000 ): l . append ( str ( n )) # -- append\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1),So,for\u5faa\u73af\u6574\u4f53\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n) s = ' ' . join ( l ) # -- join\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n) # -- \u7b80\u5199: ''.join([str(i) for i in range(0,100000)]) # -- \u4e00\u4e2a\u66f4\u52a0pythonic\u7684\u5199\u6cd5,s = \" \".join(map(str, range(0, 10000))) A: 1> \u5982\u679c\u5b57\u7b26\u4e32\u62fc\u63a5\u7684\u6b21\u6570\u8f83\u5c11, \u6bd4\u5982range(100), \u90a3\u4e48\u65b9\u6cd5\u4e00\u66f4\u4f18. 2> \u5982\u679c\u5b57\u7b26\u4e32\u62fc\u63a5\u7684\u6b21\u6570\u8f83\u591a, \u6bd4\u5982range(1000000), \u65b9\u6cd5\u4e8c\u7a0d\u5feb\u4e00\u4e9b.. \u5217\u8868 \u00b6 extend\u3001+=\u3001+ \u00b6 my_list.extend() \u662f\u5c06 \u53ef\u8fed\u4ee3\u5bf9\u8c61 \u7684\u5143\u7d20\u9010\u4e00\u52a0\u5165\u5217\u8868\u4e2d. my_list.extend([4,5,6])\u7b49\u540c\u4e8emy_list += [4,5,6] \u539f\u5730\u6539\u53d8 ; my_list = my_list + [4,5,6] \u5728my_list\u7684\u57fa\u7840\u4e0a\u6dfb\u52a0\u65b0\u7684\u5143\u7d20\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61. id\u4f1a\u53d8 >>> my_list = [ 1 , 2 , 3 ] >>> id ( my_list ) 140685461974272 >>> my_list += [ 4 ] >>> id ( my_list ) 140685461974272 >>> my_list . extend ([ 5 ]) >>> id ( my_list ) 140685461974272 >>> my_list = my_list + [ 6 ] >>> id ( my_list ) 140685461892032 \"\"\" \u5217\u8868\u5d4c\u5957\u7684\u95ee\u9898: \"\"\" my_list = [[ 0 ] * 3 for _ in range ( 5 )] my_list2 = [[ 0 ] * 3 ] * 5 for i in my_list : print ( id ( i )) for i in my_list2 : print ( id ( i )) range \u00b6 \u8054\u60f3\u8bb0\u5fc6: range()\u5185\u7f6e\u51fd\u6570\u4e0e\u5207\u7247\u4e00\u6837\u987e\u5934\u4e0d\u987e\u5c3e, range\u53ef\u4e0e\u5207\u7247\u642d\u914d. range ( 10 )[ - 1 ] # 9 range ( 10 )[: - 4 ] # range(0,6) range ( 10 )[:: 2 ] # range(0,10,2) \u8d4b\u503c\u3001\u5207\u7247 \u00b6 \u8bb0\u4f4f\u4e00\u4e2a\u539f\u5219 ,\u53ef\u4ee5\u4f7f\u7528\u4e0b\u6807\u7684(\u5373\u5e8f\u5217), \u6bd4\u5982my_str[2], \u5c31\u53ef\u4ee5\u4f7f\u7528\u5207\u7247 \u6ce8\u610f\u4e00\u70b9 : \u8d4b\u503c\u64cd\u4f5c\u7ed3\u5408\u5217\u8868\u5207\u7247 b = a[:] \u5207\u7247\u5728\u53f3\u4fa7,\u662f\u5bf9a\u5217\u8868\u8fdb\u884c\u6d45\u62f7\u8d1d a[:] = b \u5207\u7247\u5728\u5de6\u4fa7,\u662f\u5bf9a\u5217\u8868\u8fdb\u884c\u539f\u5730\u4fee\u6539 --- \u2605 -- \u5217\u8868\u5207\u7247\u7684\u5947\u5999\u6280\u5de7 --- 1. \u5728\u5217\u8868\u5bf9\u8c61my_list\u7684\u5f00\u59cb\u5904\u589e\u52a0\u4e00\u4e2a\u5143\u7d20\u4e3a3\u7684\u4ee3\u7801 . my_list . insert ( 0 , 3 ) my_list [ 0 : 0 ] = [ 3 ] \u540c\u7406 ( \u4e0b\u6807\u4e3a1\u7684\u5730\u65b9 ) --> my_list [ 1 : 1 ] = [ 3 ] 2. x = [ 3 , 5 , 7 ] x [ 10 :] --> [] x [ len ( x ):] = [ 1 , 2 ] --> x\u503c\u4e3a [ 3 , 5 , 7 , 1 , 2 ] x [ len ( x ) - 1 :] = [ 1 , 2 ] --> x\u503c\u4e3a [ 3 , 5 , 1 , 2 ] 3. x = [ 1 , 2 ] x [ 0 : 0 ] = [ 3 , 3 ] --> x\u503c\u4e3a [ 3 , 3 , 1 , 2 ] # \u6dfb\u52a0 x [ 0 : 1 ] = [ 3 , 3 ] --> x\u503c\u4e3a [ 3 , 3 , 2 ] # \u66ff\u6362 x [ 0 ] = [ 3 , 3 ] --> x\u503c\u4e3a [[ 3 , 3 ], 2 ] # \u4fee\u6539 \u5217\u8868\u5e38\u89c1\u5185\u7f6e\u65b9\u6cd5 \u00b6 \u521b\u5efa -- []\u3001list() \u589e -- append\u3001extend\u3001insert \u5220 -- del\u3001remove\u3001pop\u3001clear \u67e5 -- \u901a\u8fc7\u7d22\u5f15\u67e5\u627e\u3001\u5207\u7247\u67e5\u627e \u6539 -- \u5bf9\u67e5\u627e\u7684\u5185\u5bb9\u8fdb\u884c\u8d4b\u503c\u64cd\u4f5c\u5c31\u53ef\u4ee5\u66f4\u6539(\u6ce8\u610f\u4e00\u4e00\u5bf9\u5e94)\u3001sort\u3001reverse \u56e0\u4e3a\u5217\u8868\u662f\u53ef\u53d8\u5bf9\u8c61,\u6240\u4ee5\u5217\u8868\u8c03\u7528\u81ea\u8eab\u7684\u65b9\u6cd5\u4f1a\u539f\u5730\u8fdb\u884c\u6539\u53d8... --- \u2605 -- \u589e\u52a0 --- \u7ed3\u8bba : \u7528 [] \u521b\u5efa\u7a7a\u5217\u8868\u7684\u6548\u7387\u662f\u9ad8\u4e8elist () \u7684 !!! \u533a\u522b\u4e3b\u8981\u5728\u4e8elist () \u662f\u4e00\u4e2afunction call\u51fd\u6570\u8c03\u7528 , Python\u7684function call\u4f1a\u521b\u5efastack\u5806\u6808 , \u5e76\u4e14\u8fdb\u884c\u4e00\u7cfb\u5217\u53c2\u6570\u68c0\u67e5\u7684\u64cd\u4f5c , \u53cd\u89c2 [] \u662f\u4e00\u4e2a\u5185\u7f6e\u7684C\u51fd\u6570 , \u53ef\u4ee5\u76f4\u63a5\u88ab\u8c03\u7528 , \u56e0\u6b64\u6548\u7387\u9ad8 !! --- \u2605 -- \u589e\u52a0 --- my_list . append ([ 1 , 2 , 3 ]) # -- \u5217\u8868\u6574\u4f53\u52a0\u5165\u5217\u8868\u672b\u5c3e,\u539f\u5730\u6539\u53d8 my_list . extend ([ 1 , 2 , 3 ]) # -- \u5217\u8868\u5143\u7d20\u9010\u4e2a\u52a0\u5165\u5217\u8868\u672b\u5c3e,\u539f\u5730\u6539\u53d8 my_list . insert ( 0 , \"new\" ) # -- \u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20,\u7b49\u540c\u4e8e my_list[0:0] = [\"new\"] --- \u2605 -- \u5220\u9664 --- x = list ( range ( 10 )) del x [:: 2 ] # -- x\u7684\u503c\u4e3a[1,3,5,7,9] my_list . remove ( 2 ) # -- \u79fb\u9664\u7684\u662f\u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5339\u914d\u9879,\u65e0\u8fd4\u56de\u503c,\u82e5\u6ca1\u6709,\u4f1a\u62a5\u9519 my_list . pop () # -- pop()\u9ed8\u8ba4\u5220\u9664\u5217\u8868\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5e76\u5c06\u5220\u9664\u7684\u503c\u8fd4\u56de; # \u62ec\u53f7\u5185\u53ef\u4ee5\u901a\u8fc7\u52a0\u7d22\u5f15\u503c\u6765\u6307\u5b9a\u5220\u9664\u5143\u7d20 my_list . clear () # -- \u6e05\u7a7a\u5217\u8868 --- \u2605 -- \u6392\u5e8f\u7ffb\u8f6c my_list . sort () \u548c my_list . reverse () \u7684\u8fd4\u56de\u503c\u90fd\u4e3aNone \uff01 \u4e14\u53ea\u9002\u7528\u4e8e\u5217\u8868 . \u539f\u5730\u6539\u53d8 . --- my_list . sort ( reverse = True ) # -- \u7ed9\u5217\u8868\u5185\u6240\u6709\u5143\u7d20\u6392\u5e8f # \u6ce8\u610f\u54e6,\u6392\u5e8f\u65f6\u5217\u8868\u5143\u7d20\u4e4b\u95f4\u5fc5\u987b\u662f\u76f8\u540c\u6570\u636e\u7c7b\u578b,\u4e0d\u53ef\u6df7\u642d,\u5426\u5219\u4f1a\u62a5\u9519 my_list . reverse () # -- \u98a0\u5012\u5217\u8868\u5185\u5143\u7d20\u987a\u5e8f --- \u2605 -- \u6b65\u957f --- list ( range ( 10 ))[:: 2 ] # \u6b63\u5411\u6b65\u957f -- [0, 2, 4, 6, 8] list ( range ( 10 ))[ - 2 :: - 2 ] # \u53cd\u5411\u6b65\u957f -- [8, 6, 4, 2, 0] [] or list () ; () or tuple () my_list = [ i ** 2 for i in range ( 1 , 11 ) if i > 3 ] # -- \u5217\u8868\u751f\u6210\u5f0f ` x = [[ 1 ]] * 3 ` ` x [ 0 ][ 0 ] = 5 ` ` x ` --> [[ 5 ],[ 5 ],[ 5 ]] ` x = [ 1 , 3 , 2 ] ` ` a , b , c = map ( str , sorded ( x )) ` b --> '2' \u5206\u79bb\u5f0f\u987a\u5e8f\u8868 \u00b6 Ps: \u4e0a\u56fe\u7684\u5206\u79bb\u5f0f\u987a\u5e8f\u8868\u7684\u6570\u636e\u533a\u7684\u6570\u636e\u91c7\u7528\u7684\u662f \u5143\u7d20\u5916\u7f6e \u7684\u5f62\u5f0f\u8fdb\u884c\u7684\u5b58\u50a8!!\u8fde\u7eed\u5b58\u50a8\u7684\u662f\u5143\u7d20\u7684\u5730\u5740(\u5373\u5bf9\u5b9e\u9645\u6570\u636e\u7684\u7d22\u5f15/\u5f15\u7528),\u6bcf\u4e2a\u7a7a\u95f4\u5360\u636e\u7684\u5927\u5c0f\u90fd\u4e3a8\u5b57\u8282.. \u5217\u8868\u672c\u8d28\u4e0a\u662f\u5206\u79bb\u5f0f\u7684\u987a\u5e8f\u8868 .. \u987a\u5e8f\u8868\u7684\u7ed3\u6784\u5305\u62ec\u8868\u5934\u548c\u6570\u636e\u533a. \u5206\u79bb\u5f0f\u987a\u5e8f\u8868\u6bd4\u4e00\u4f53\u5f0f\u7684\u987a\u5e8f\u8868\u591a\u4e86\u4e00\u4e2a\u6570\u636e\u533a\u94fe\u63a5\u5730\u5740... \u5bf9\u5217\u8868\u7684\u5143\u7d20\u5b58\u50a8\u533a\u8fdb\u884c\u6269\u5145\u9700\u8981\u7ecf\u5386\u4e09\u4e2a\u6b65\u9aa4: 1> \u91cd\u65b0\u7533\u8bf7\u7a7a\u95f4 2> \u6570\u636e\u642c\u8fc1 3> \u91ca\u653e\u539f\u6765\u7684\u6570\u636e So, \u4e00\u4f53\u5f0f\u82e5\u9700\u6269\u5145\u7684\u8bdd,\u6574\u4f53\u90fd\u8981\u6539,\u53d8\u91cf\u7684\u6307\u5411(\u8d77\u59cb\u5730\u5740)\u4e5f\u4f1a\u968f\u4e4b\u6539\u53d8.. \u4f46\u5206\u79bb\u5f0f\u7684\u8d77\u59cb\u5730\u5740\u4e0d\u4f1a\u6539\u53d8,\u53ea\u9700\u8981\u66f4\u65b0\u8868\u5934\u4fe1\u606f\u4e2d\u6570\u636e\u533a\u94fe\u63a5\u5730\u5740\u5373\u53ef!! \u5217\u8868 \u4e0b\u6807/\u7d22\u5f15\u5b9a\u4f4d\u5143\u7d20 \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(1) -- \u5229\u7528\u6570\u636e\u94fe\u63a5\u533a\u7684\u5730\u5740\u548c\u504f\u79fb\u91cf(\u4e0b\u6807)\u77ac\u95f4\u5b9a\u4f4d\u5230.. \u5217\u8868 \u6307\u5b9a\u503c\u67e5\u627e \u7684 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) -- \u9700\u8981\u904d\u5386\u5217\u8868 \u5217\u8868 \u672b\u5c3e\u589e\u52a0\u548c\u5220\u9664 \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(1) , \u5728 \u6307\u5b9a\u4f4d\u7f6e\u6dfb\u52a0\u548c\u5220\u9664 \u5143\u7d20\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) .. \u5217\u8868 \u5207\u7247 \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(k) , k\u4e3a\u5207\u7247\u7684\u957f\u5ea6. \u76f8\u5f53\u4e8e\u6839\u636e\u4e0b\u6807\u5b9a\u4f4d\u4e86k\u6b21\u5143\u7d20.. Ps: \u5143\u7956\u7684\u4e5f\u91c7\u7528\u7684\u987a\u5e8f\u8868\u7684\u5b9e\u73b0\u65b9\u5f0f..\u4f46\u5143\u7956\u662f\u4e0d\u53d8\u7684\u987a\u5e8f\u8868,\u56e0\u800c\u4e0d\u652f\u6301\u4efb\u4f55\u6539\u53d8\u5176\u5185\u90e8\u72b6\u6001\u7684\u64cd\u4f5c.. \u5e8f\u5217 \u00b6 \u4f55\u4e3a\u5e8f\u5217\uff1f (\u5217\u8868\u3001\u5143\u7956\u3001\u5b57\u7b26\u4e32) \u53ef\u4ee5\u901a\u8fc7\u4e0b\u6807\u504f\u79fb\u91cf\u8bbf\u95ee\u5230\u5b83\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u6210\u5458.. \u5e8f\u5217\u5e38\u89c1\u65b9\u6cd5 \u4e0d\u4f1a\u6539\u53d8\u539f\u5e8f\u5217\u7684\u503c \u5e8f\u5217\u901a\u5e38\u4f7f\u7528\u65b9\u6cd5 \u00b6 \u5e8f\u5217(\u5217\u8868\u3001\u5143\u7956\u3001\u5b57\u7b26\u4e32)\u90fd\u80fd\u7528\u64cd\u4f5c\u7b26(\u6bd4\u8f83 > \u3001\u8fde\u63a5 + \u3001\u91cd\u590d * \u3001\u590d\u5408\u8d4b\u503c *= \u3001 \u6210\u5458 in )\u4ee5\u53ca \u5207\u7247 >>> tup = ( 1 , 2 , 3 ) >>> new_tup = tup + ( 4 , 5 ) # -- \u521b\u5efa\u65b0\u7684\u5143\u7ec4new_tup,\u5e76\u4f9d\u6b21\u586b\u5145\u4e24\u4e2a\u5143\u7ec4\u7684\u503c >>> new_tup ( 1 , 2 , 3 , 4 , 5 ) # -- \u9996\u5148\u6bd4\u8f83\u4e0b\u6807\u4e3a0\u7684\u5bf9\u5e94\u5143\u7d20,\u5982\u679c\u76f8\u7b49,\u518d\u6bd4\u8f83\u4e0b\u6807\u4e3a1\u7684\u5bf9\u5e94\u5143\u7d20,\u4ee5\u6b64\u7c7b\u63a8.. >>> a = [( 0 , 5 ),( 1 , 4 ),( 0 , 2 ),( 1 , 1 ),( 1 , 3 )] >>> list ( sorted ( a )) [( 0 , 2 ), ( 0 , 5 ), ( 1 , 1 ), ( 1 , 3 ), ( 1 , 4 )] \u5220\u9664\u4e00\u4e2alist\u91cc\u91cd\u590d\u5143\u7d20\u5e76\u4fdd\u6301\u5b83\u4eec\u539f\u6765\u7684\u6392\u5e8f key=l1.index >>> l1 = [ 'b' , 'c' , 'd' , 'b' , 'c' , 'a' , 'a' ] >>> sorted ( set ( l1 )) [ 'a' , 'b' , 'c' , 'd' ] >>> sorted ( l1 , key = l1 . index ) [ 'b' , 'b' , 'c' , 'c' , 'd' , 'a' , 'a' ] >>> sorted ( set ( l1 ), key = l1 . index ) [ 'b' , 'c' , 'd' , 'a' ] \u53e3\u8bc0: \u957f\u5927\u5c0f,\u548c\u6392\u7ffb,\u4e8c\u5143\u7956,\u4e09\u8f6c\u6362,z\u6b21\u67e5 len() max() min() sum() sorted() reversed() enumerate() str() tuple() list() zip() obj.count() obj.index() # \u8be6\u89c1 https://blog.csdn.net/weixin_42444693/article/details/104203479 x = [ '11' , '2' , '3' ], max ( x , key = len ) # -- \u5224\u65ad\u5217\u8868\u4e2d\u6700\u957f\u7684\u9879 # \u524d\u8005\u8fd4\u56de\u7684\u662f\u5217\u8868;\u540e\u8005\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u7ffb\u8f6c\u540e\u7684iterable\u53ef\u8fed\u4ee3\u5bf9\u8c61. sorted ([ 1 , 2 , 3 ], reverse = True ) == reversed ([ 1 , 2 , 3 ]) # -- False # enumerate\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u5bf9\u8c61. \u6b64\u5bf9\u8c61\u7684\u5143\u7d20\u662f\u7531\u53ef\u8fed\u4ee3\u53c2\u6570\u7684\u7d22\u5f15\u53f7\u53ca\u5176\u5bf9\u5e94\u7684\u5143\u7d20\u6784\u6210\u7684\u4e8c\u5143\u7956. # list()\u5c06\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u8f6c\u6362\u4e3a\u5217\u8868! list ( enumerate ( 'one' )) # [(0, 'o'), (1, 'n'), (2, 'e')] # zip\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u5bf9\u8c61. \u6b64\u5bf9\u8c61\u7684\u5143\u7d20\u662f\u7531iterable\u5bf9\u8c61\u4eec\u4e2d\u7684\u5143\u7d20\u4e00\u4e00\u5bf9\u5e94\u6784\u6210\u7684\u5143\u7956. list ( zip ([ 1 , 2 ],[ 3 , 4 ])) # -- [(1, 3), (2, 4)] list ( zip ([ 1 , 2 ],{ 3 : 1 , 4 : 2 })) # -- [(1, 3), (2, 4)] \u5217\u8868\u4e0e\u5143\u7956 \u00b6 \u5b58\u50a8\u65b9\u5f0f\u7684\u5dee\u5f02 \u00b6 \u53ef\u4ee5\u53d1\u73b0\u5b58\u50a8\u76f8\u540c\u7684\u5143\u7d20,\u5217\u8868\u4f1a\u6bd4\u5143\u7956\u591a\u5f00\u950016\u5b57\u8282\u7684\u7a7a\u95f4..why? # -- obj.__sizeof__() \u8fd4\u56de\u5bf9\u8c61\u7684\u5185\u5b58\u5927\u5c0f >>> a = [ 1 , 2 , 3 ] >>> a . __sizeof__ () 64 >>> b = ( 1 , 2 , 3 ) >>> b . __sizeof__ () 48 \"\"\" \u6b64\u5904int\u6574\u578b\u4e3a8\u5b57\u8282.. 3*8=24, \u6240\u4ee5\u521d\u59cb\u7684\u7a7a\u5217\u8868\u548c\u7a7a\u5143\u7956\u5206\u522b\u9700\u898140\u5b57\u8282\u548c24\u5b57\u8282\u7684\u7a7a\u95f4. \u5217\u8868\u6bd4\u5143\u7956\u591a\u768416\u5b57\u8282,\u6709\u4e24\u65b9\u9762\u539f\u56e0: 1> 8\u5b57\u8282\u7528\u4e8e\u5b58\u50a8\u6307\u9488 -- \u4fbf\u4e8e\u6570\u636e\u52a8\u6001\u53d8\u5316,\u52a8\u6001\u7684\u6539\u53d8\u5206\u79bb\u5f0f\u987a\u5e8f\u8868\u7684\u6570\u636e\u533a (\u5927\u80c6\u731c\u6d4b,\u56e0\u4e3a\u5217\u8868\u662f\u5206\u79bb\u5f0f\u7684\u987a\u5e8f\u8868,so\u6b64\u6307\u9488\u6307\u7684\u662f\u8868\u5934\u4e2d\u6307\u5411\u6570\u636e\u533a\u7684\u94fe\u63a5\u5730\u5740) 2> 8\u5b57\u8282\u7528\u4e8e\u5b58\u50a8\u5df2\u7ecf\u5206\u914d\u7684\u957f\u5ea6\u5927\u5c0f,\u5b9e\u65f6\u8ffd\u8e2a\u5217\u8868\u7a7a\u95f4\u7684\u4f7f\u7528\u60c5\u51b5,\u5f53\u7a7a\u95f4\u4e0d\u8db3\u65f6,\u53ca\u65f6\u5206\u914d\u989d\u5916\u7a7a\u95f4 \u5217\u8868\u662f\u52a8\u6001\u7684,\u957f\u5ea6\u53ef\u53d8,\u53ef\u4ee5\u968f\u610f\u7684\u589e\u52a0\u3001\u5220\u51cf\u6216\u6539\u53d8\u5143\u7d20; \u5143\u7ec4\u662f\u9759\u6001\u7684,\u957f\u5ea6\u5927\u5c0f\u56fa\u5b9a,\u4e0d\u53ef\u4ee5\u5bf9\u5143\u7d20\u8fdb\u884c\u589e\u52a0\u3001\u5220\u51cf\u6216\u8005\u6539\u53d8\u64cd\u4f5c. \"\"\" >>> [] . __sizeof__ () 40 >>> () . __sizeof__ () 24 \"\"\" \u518d\u6b21\u8bf4\u660e:\u5217\u8868\u548c\u5143\u7956\u5b58\u50a8\u5143\u7d20,\u91c7\u7528\u7684\u662f\u5143\u7d20\u5916\u7f6e\u7684\u5f62\u5f0f,\u8fde\u7eed\u5b58\u50a8\u7684\u662f\u5143\u7d20\u7684\u5730\u5740(\u5373\u5bf9\u5b9e\u9645\u6570\u636e\u7684\u7d22\u5f15/\u5f15\u7528) \"\"\" \u5217\u8868\u5728\u6269\u5145\u7a7a\u95f4\u65f6\u5177\u5907 over-allocating \u673a\u5236.. \u5373\u6269\u5145\u5bb9\u91cf\u7684\u65f6\u5019\u4f1a\u591a\u5206\u914d\u4e00\u4e9b\u5b58\u50a8\u7a7a\u95f4.. \u6b64\u673a\u5236\u4f18\u5316\u4e86\u5b58\u50a8\u7ed3\u6784, \u907f\u514d\u6bcf\u6b21\u589e\u52a0\u5143\u7d20\u90fd\u8981\u91cd\u65b0\u5206\u914d\u5185\u5b58 >>> a = [] >>> a . __sizeof__ () # -- \u7a7a\u5217\u8868\u7684\u5b58\u50a8\u7a7a\u95f4\u4e3a40\u5b57\u8282 40 >>> a . append ([ 1 , 2 , 3 ]) >>> a . __sizeof__ () # -- \u52a0\u5165\u4e86\u5143\u7d20[1,2,3]\u4e4b\u540e,\u5217\u8868\u4e3a\u5176\u5206\u914d\u4e86\u53ef\u4ee5\u5b58\u50a84\u4e2a\u5143\u7d20\u7684\u7a7a\u95f4(72 - 40)/8 = 4 72 # -- \u6bcf\u4e2a\u7a7a\u95f48\u5b57\u8282,\u4e00\u5171\u67094\u4e2a,\u8fde\u7eed\u5b58\u50a8\u7684\u662f\u5bf9\u5b9e\u9645\u6570\u636e\u7684\u5f15\u7528(\u5185\u5b58\u5730\u5740) >>> a . append ( 4 ) >>> a . __sizeof__ () # -- \u7531\u4e8e\u4e4b\u524d\u5206\u914d\u4e86\u7a7a\u95f4,\u6240\u4ee5\u52a0\u5165\u5143\u7d204,\u5217\u8868\u7a7a\u95f4\u5927\u5c0f\u4e0d\u53d8 72 >>> a . append ( 4 ) >>> a . __sizeof__ () # -- \u540c\u4e0a 72 >>> a . append ( 5 ) >>> a . __sizeof__ () # -- \u540c\u4e0a,\u8fd9\u662f\u52a0\u5165\u7684\u7b2c\u56db\u4e2a\u5143\u7d20 72 >>> a . append ( 1.2 ) # -- \u52a0\u5165\u5143\u7d201.2,\u5217\u8868\u7684\u7a7a\u95f4\u4e0d\u8db3,\u6240\u4ee5\u53c8\u989d\u5916\u5206\u914d\u4e86\u53ef\u4ee5\u5b58\u50a84\u4e2a\u5143\u7d20\u7684\u7a7a\u95f4 >>> a . __sizeof__ () 104 >>> a . append ( \"12\" ) >>> a . __sizeof__ () 104 >>> a [[ 1 , 2 , 3 ], 4 , 4 , 5 , 1.2 , '12' ] >>> a . append ( \"12\" ) >>> a . append ( \"12\" ) >>> a . __sizeof__ () 104 >>> a . append ( \"12\" ) >>> a . __sizeof__ () 168 # -- \u5217\u8868\u6bcf\u6b21\u5206\u914d\u7a7a\u95f4\u7684\u5927\u5c0f\u9075\u5faa: 0, 4, 8, 16, 25, 35, 46, 58, 72, 88 \u6027\u80fd\u5dee\u5f02 \u00b6 1> \u56e0\u4e3a\u5217\u8868over-allocating\u673a\u5236\u7684\u5b58\u5728,\u5143\u7ec4\u5360\u7528\u7684\u7a7a\u95f4\u80af\u5b9a\u662f\u5c0f\u4e8e\u5217\u8868\u7684.. 2> \u4e00\u822c\u6765\u8bf4,\u5783\u573e\u56de\u6536\u673a\u5236\u4f1a\u8fdb\u884c\u5185\u5b58\u56de\u6536\u7ed9OS,\u4f46 python\u5728\u540e\u53f0\u4f1a\u5bf9\u9759\u6001\u6570\u636e\u505a\u4e00\u4e9b\u8d44\u6e90\u7f13\u5b58 ,\u6bd4\u5982\u5143\u7956. \u5143\u7956\u7684\u7a7a\u95f4\u5927\u5c0f\u56fa\u5b9a,\u672c\u8d28\u4e0a\u4e5f\u662f\u4e00\u4e2aarray,\u4f46Python \u7684 tuple \u505a\u4e86\u8bb8\u591a\u4f18\u5316.. \u5982\u679c\u5b83\u4e0d\u88ab\u4f7f\u7528\u5e76\u4e14\u5360\u7528\u7a7a\u95f4\u4e0d\u5927\u65f6,Python \u4f1a\u5c06\u5176\u7f13\u5b58\u5230\u5185\u90e8\u7684\u4e00\u4e2afree list(\u7a7a\u95f2\u5217\u8868)\u4e2d. \u8fd9\u6837,\u4e0b\u6b21\u6211\u4eec\u518d\u521b\u5efa\u540c\u6837\u5927\u5c0f\u7684\u5143\u7ec4\u65f6,Python \u5c31\u53ef\u4ee5\u4e0d\u7528\u518d\u5411\u64cd\u4f5c\u7cfb\u7edf\u53d1\u51fa\u8bf7\u6c42,\u53bb\u7533\u8bf7\u5185\u5b58. \u800c\u662f\u53ef\u4ee5\u76f4\u63a5\u5206\u914d\u7f13\u5b58\u7684\u5185\u5b58\u7a7a\u95f4,\u63d0\u9ad8\u7a0b\u5e8f\u7684\u8fd0\u884c\u6548\u7387... 3> \u82e5\u60f3\u589e\u52a0\u5220\u9664\u6539\u53d8\u5143\u7d20,\u5217\u8868\u663e\u7136\u66f4\u4f18.. \u56e0\u4e3a\u5143\u7956\u9700\u8981\u901a\u8fc7\u5efa\u7acb\u4e00\u4e2a\u65b0\u7684\u5143\u7956\u6765\u5b9e\u73b0.. >>> a = ( 1 , 2 , 3 ) >>> id ( a ) 140324726613952 >>> del a >>> b = ( 1 , 2 , 3 ) >>> id ( b ) 140324726605952 >>> c = ( 1 , 2 , 3 ) >>> id ( c ) 140324726600768 # -- \u53ef\u4ee5\u770b\u5230\u56e0\u4e3apython\u8d44\u6e90\u7f13\u5b58\u7684\u5b58\u5728,\u521d\u59cb\u5316\u76f8\u540c\u6570\u636e\u7684\u5143\u7956\u8981\u6bd4\u5217\u8868\u5feb\u7684\u591a!! # -- \u4f7f\u7528timeit\u4f1a\u81ea\u52a8\u5173\u6389\u5783\u573e\u56de\u6536\u673a\u5236,\u8ba9\u7a0b\u5e8f\u7684\u8fd0\u884c\u66f4\u52a0\u72ec\u7acb,\u65f6\u95f4\u8ba1\u7b97\u66f4\u52a0\u51c6\u786e One_Piece @DCdeMacBook - Air ~ % python3 - m timeit 'x=[1,2,3,4,5,6]' 5000000 loops , best of 5 : 78.3 nsec per loop One_Piece @DCdeMacBook - Air ~ % python3 - m timeit 'x=(1,2,3,4,5,6)' 20000000 loops , best of 5 : 13.6 nsec per loop \u5e94\u7528\u573a\u666f \u00b6 1> \u82e5\u5b58\u50a8\u7684\u6570\u636e\u548c\u6570\u91cf\u4e0d\u53d8 , \u7528\u5143\u7ec4.. \u6bd4\u5982\u4f60\u6709\u4e00\u4e2a\u51fd\u6570,\u9700\u8981\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u5730\u70b9\u7684\u7ecf\u7eac\u5ea6,\u7136\u540e\u76f4\u63a5\u4f20\u7ed9\u524d\u7aef\u6e32\u67d3. 2> \u82e5\u5b58\u50a8\u7684\u6570\u636e\u6216\u6570\u91cf\u662f\u53ef\u53d8\u7684, \u7528\u5217\u8868.. \u6bd4\u5982\u793e\u4ea4\u5e73\u53f0\u4e0a\u7684\u4e00\u4e2a\u65e5\u5fd7\u529f\u80fd,\u662f\u7edf\u8ba1\u4e00\u4e2a\u7528\u6237\u5728\u4e00\u5468\u4e4b\u5185\u770b\u4e86\u54ea\u4e9b\u7528\u6237\u7684\u5e16\u5b50. python\u7684\u6df1\u6d45\u62f7\u8d1d \u00b6 https://note-rtd.readthedocs.io/en/latest/source/2_\u8bed\u8a00/Python/\u6df1\u62f7\u8d1d\u548c\u6d45\u62f7\u8d1d/_content.html \u76f4\u63a5\u8d4b\u503c \u00b6 >>> a = [ 1 , 2.1 ,[ 3 ]] >>> b = a # -- Python\u4e2d\u5bf9\u8c61\u7684\u8d4b\u503c\u90fd\u662f\u5728\u8fdb\u884c\u5bf9\u8c61\u5f15\u7528(\u5185\u5b58\u5730\u5740)\u4f20\u9012,\u5b9e\u9645\u4e0aa\u548cb\u6307\u5411\u7684\u90fd\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61. >>> a [ 1 ] = 4 # -- \u4fee\u6539a\u7684\u540c\u65f6,b\u4e5f\u4f1a\u540c\u6837\u88ab\u4fee\u6539 >>> a [ 1 , 4 , [ 3 ]] >>> b [ 1 , 4 , [ 3 ]] >>> a is b True \u6d45\u62f7\u8d1d \u00b6 \u9488\u5bf9\u53ef\u53d8\u5bf9\u8c61(\u4ee5\u5217\u8868\u4e3a\u4f8b)\u7684\u6d45\u62f7\u8d1d, b = a[:] , \u4ec5\u4ec5\u662f\u6700\u9876\u5c42\u5f00\u8f9f\u4e86(\u5217\u8868\u5185\u6bcf\u4e2a\u5143\u7d20\u7684\u5f15\u7528\u8ba1\u6570\u90fd\u4f1a\u53d8\u4e3a2). \u901a\u8fc7a\u5bf9\u5217\u8868\u5185\u7684\u5143\u7d20(\u4e0d\u7528\u7ba1\u6b64\u5143\u7d20\u662f\u53ef\u53d8\u5bf9\u8c61\u8fd8\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61)\u8fdb\u884c\u91cd\u65b0\u8d4b\u503c,\u4e0d\u4f1a\u5f71\u54cdb (\u56e0\u4e3a\u5217\u8868\u5185\u5143\u7d20\u7684\u5f15\u7528\u8ba1\u6570\u4e0d\u4e3a0)\u53cd\u4e4b\u540c\u7406.. \u82e5\u64cd\u4f5c(\u589e\u5220\u6539)\u5217\u8868\u4e2d\u7684\u53ef\u53d8\u5bf9\u8c61..a\u3001b\u90fd\u4f1a\u53d7\u5230\u5f71\u54cd.. \u53ef\u4ee5\u4ea7\u751f\u6d45\u62f7\u8d1d\u7684\u64cd\u4f5c\u6709\u4ee5\u4e0b\u51e0\u79cd: 1> \u4f7f\u7528\u5207\u7247\u64cd\u4f5c ( \u51c6\u786e\u70b9\u8bf4\u7684\u662f\u5217\u8868\u5207\u7247!! \u5b57\u7b26\u4e32\u4e0d\u5b58\u5728\u62f7\u8d1d\u4e00\u8bf4,\u5143\u7956\u5207\u7247\u4e5f\u4e0d\u4f1a\u521b\u5efa\u65b0\u5bf9\u8c61.. ) 2> \u4f7f\u7528\u5de5\u5382\u51fd\u6570\uff08list/dir/set\uff09-- \u5373\u6570\u636e\u672c\u8eab\u7684\u6784\u9020\u5668 3> \u4f7f\u7528 copy \u6a21\u5757\u4e2d\u7684 copy() \u51fd\u6570 >>> a = [ 1 , 2 ,[ 3 ]] >>> import copy >>> b = copy . copy ( a ) # -- \u6d45\u62f7\u8d1d\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61,\u7136\u540e\u628a\u751f\u6210\u7684\u65b0\u5bf9\u8c61\u8d4b\u503c\u7ed9\u65b0\u53d8\u91cf >>> b is a # -- 1\u30012\u3001[3,]\u8fd9\u4e09\u4e2a\u5bf9\u8c61\u5e76\u6ca1\u6709\u521b\u5efa\u65b0\u7684 # \u65b0\u7684\u5bf9\u8c61\u662f\u6307 copy \u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u5217\u8868\u5bf9\u8c61b # \u8fd9\u6837a\u548cb\u8fd9\u4e24\u4e2a\u53d8\u91cf\u6307\u5411\u7684\u5217\u8868\u5bf9\u8c61\u5c31\u4e0d\u662f\u540c\u4e00\u4e2a False >>> a [ 0 ] is b [ 0 ] # -- \u4e24\u4e2a\u5217\u8868\u5bf9\u8c61\u91cc\u9762\u7684\u5143\u7d20\u4f9d\u7136\u662f\u6309\u5f15\u7528\u4f20\u9012\u7684 # \u6240\u4ee5a\u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5bf9\u8c61\u548cb\u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5bf9\u8c61\u662f\u540c\u4e00\u4e2a True \"\"\" \u6572\u9ed1\u677f,\u53ef\u53d8\u4e0e\u4e0d\u53ef\u53d8\u6307\u7684\u662f\u5bb9\u5668\u91cc\u9762\u7684\u5143\u7d20\u4e2a\u6570\u4ee5\u53ca\u5143\u7d20\u7684\u5185\u5b58\u5730\u5740\u80fd\u4e0d\u80fd\u6539\u53d8.. \u5373\u9664\u4e86\u4e0d\u80fd\u5bf9\u4e0d\u53ef\u53d8\u7684\u5bb9\u5668\u5bf9\u8c61(\u6bd4\u5982\u5143\u7956)\u91cc\u9762\u7684\u5143\u7d20\u8fdb\u884c\u91cd\u65b0\u8d4b\u503c\u5916(\u82e5\u8d4b\u503c,\u5143\u7d20ID\u53d8).\u5176\u4f59\u60c5\u51b5\u7686\u53ef\u91cd\u65b0\u8d4b\u503c. \"\"\" >>> a [ 0 ] = 4 # -- \u4fee\u6539a\u5217\u8868\u4e2d\u7684\u4e0d\u53ef\u53d8\u5bf9\u8c61(\u91cd\u65b0\u8d4b\u503c),b\u5217\u8868\u4e0d\u4f1a\u53d7\u5230\u5f71\u54cd >>> b [ 1 ] = 5 # -- \u540c\u7406,\u4fee\u6539b\u5217\u8868\u4e2d\u7684\u4e0d\u53ef\u53d8\u5bf9\u8c61(\u91cd\u65b0\u8d4b\u503c),a\u5217\u8868\u4e0d\u4f1a\u53d7\u5230\u5f71\u54cd >>> a [ 4 , 2 , [ 3 ]] >>> b [ 1 , 5 , [ 3 ]] >>> a [ 2 ] . append ( 6 ) # -- \u4fee\u6539\u5217\u8868\u4e2d\u7684\u53ef\u53d8\u5bf9\u8c61,a\u3001b\u90fd\u4f1a\u53d7\u5230\u5f71\u54cd >>> b [ 2 ] . append ( 7 ) >>> a [ 4 , 2 , [ 3 , 6 , 7 ]] >>> b [ 1 , 5 , [ 3 , 6 , 7 ]] >>> a [ 2 ] = 111 # -- \u91cd\u65b0\u8d4b\u503c >>> a [ 4 , 2 , 111 ] >>> b [ 1 , 5 , [ 3 , 6 , 7 ]] # -- \u4e3e\u4e2a\u5b57\u5178\u7684\u4f8b\u5b50 >>> my_dict = { 'a' : 1 , 'b' :[ 1 , 2 , 3 ]} >>> a = copy . copy ( my_dict ) >>> my_dict [ 'b' ] . append ( 4 ) >>> a { 'a' : 1 , 'b' : [ 1 , 2 , 3 , 4 ]} \u6df1\u62f7\u8d1d \u00b6 \u6df1\u62f7\u8d1d\u9664\u4e86\u9876\u5c42\u62f7\u8d1d\u4ee5\u5916,\u8fd8\u5bf9\u5b50\u5143\u7d20\u8fdb\u884c\u4e86\u62f7\u8d1d,\u672c\u8d28\u662f \u9012\u5f52\u6d45\u62f7\u8d1d \uff01 >>> import copy >>> a = [ 1 , ( 1 , 2 ), ( 2 , [ 3 ]), [ 4 ]] >>> b = copy . deepcopy ( a ) >>> a is b False # -- \u6ce8\u610f\u4e86,\u5bf9\u8c61\u4e2d\u7684\u5143\u7d20,\u82e5\u6574\u4f53\u90fd\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61,\u5c31\u4f1a\u4f7f\u7528\u5f15\u7528,\u56e0\u4e3a\u6ca1\u6709\u4e3a\u6b64\u751f\u6210\u65b0\u5bf9\u8c61\u7684\u5fc5\u8981 >>> a [ 0 ] is b [ 0 ] True >>> a [ 1 ] is b [ 1 ] True >>> a [ 2 ] is b [ 2 ] # -- (2, [3])\u867d\u662f\u5143\u7956,\u4f46\u91cc\u9762\u5305\u542b\u6709\u53ef\u53d8\u7684\u5217\u8868. False >>> a [ 3 ] is b [ 3 ] False \u7279\u6b8a\u60c5\u51b5!! \u00b6 \u5bb9\u5668\u7c7b\u578b: \u5217\u8868\u3001\u5143\u7ec4\u3001\u5b57\u5178\u3001\u96c6\u5408 \u539f\u5b50\u7c7b\u578b: \u6307\u6240\u6709\u7684\u6570\u503c\u7c7b\u578b\u4ee5\u53ca\u5b57\u7b26\u4e32 1> \u5bf9\u4e8e\u975e\u5bb9\u5668\u7c7b\u578b\u662f\u6ca1\u6709\u62f7\u8d1d\u8fd9\u4e2a\u8bf4\u6cd5\u7684,\u65e0\u8bba\u662f\u6d45\u62f7\u8d1d\u8fd8\u662f\u6df1\u62f7\u8d1d\u90fd\u4e0d\u4f1a\u521b\u5efa\u65b0\u7684\u5bf9\u8c61 2> \u82e5\u5143\u7956\u4e2d\u53ea\u5305\u542b\u539f\u5b50\u7c7b\u578b\u5bf9\u8c61, \u6df1\u6d45\u62f7\u8d1d\u90fd\u4e0d\u4f1a\u521b\u5efa\u65b0\u7684\u5bf9\u8c61 \u5143\u7ec4\u672c\u8eab\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61, \u5982\u679c\u5143\u7ec4\u91cc\u7684\u5143\u7d20\u4e5f\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61, \u5c31\u6ca1\u6709\u8fdb\u884c\u62f7\u8d1d\u7684\u5fc5\u8981\u4e86.\u5b9e\u6d4b\u5982\u679c\u5143\u7ec4\u91cc\u9762\u7684\u5143\u7d20\u662f\u53ea\u5305\u542b\u539f\u5b50\u7c7b\u578b\u5bf9\u8c61\u7684\u5143\u7ec4, \u5219\u4e5f\u5c5e\u4e8e\u8fd9\u4e2a\u8303\u7574. >>> b = copy . copy ( a ) # -- \u975e\u5bb9\u5668\u7c7b\u578b(\u5982\u6570\u5b57\u3001\u5b57\u7b26\u4e32\u3001\u548c\u5176\u4ed6'\u539f\u5b50'\u7c7b\u578b\u7684\u5bf9\u8c61)\u662f\u6ca1\u6709\u62f7\u8d1d\u8fd9\u4e2a\u8bf4\u6cd5\u7684 >>> c = copy . deepcopy ( a ) >>> a is b True >>> a is c True >>> a = ( 1 , 2 , 3 ) # -- \u5143\u7956\u4e2d\u53ea\u5305\u542b\u539f\u5b50\u7c7b\u578b\u5bf9\u8c61 \u6df1\u6d45\u62f7\u8d1d\u90fd\u4e0d\u4f1a\u521b\u5efa\u65b0\u7684\u5bf9\u8c61 >>> b = copy . copy ( a ) >>> c = copy . deepcopy ( a ) >>> a is b True >>> a is c True >>> a = ( 1 , 2 ,( 3 ,)) # -- \u5143\u7ec4\u91cc\u7684\u5143\u7d20\u4e5f\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61 \u6df1\u6d45\u62f7\u8d1d\u90fd\u4e0d\u4f1a\u521b\u5efa\u65b0\u7684\u5bf9\u8c61 >>> b = copy . copy ( a ) >>> c = copy . deepcopy ( a ) >>> a is b True >>> a is c True \u5143\u7956\u62f7\u8d1d\u771f\u7684\u9ebb\u70e6.. \u8fd9\u6837\u8bb0, \u5143\u7956\u65e0\u8bba\u600e\u4e48\u5199,\u6d45\u62f7\u8d1d\u90fd\u4e0d\u4f1a\u521b\u5efa\u65b0\u5bf9\u8c61; \u89c2\u5bdf\u6574\u4e2a\u5143\u7956,\u9012\u5f52\u5305\u542b\u7684\u6709\u53ef\u53d8\u5bf9\u8c61\u65f6,\u6df1\u62f7\u8d1d\u4f1a\u521b\u5efa\u65b0\u7684\u5bf9\u8c61.. \u53e6\u5916\u5143\u7956\u5207\u7247\u4e0d\u4f1a\u4ea7\u751f\u65b0\u5bf9\u8c61.. >>> a = ( 1 , 2 ,[ 3 ]) # -- \u6df1\u62f7\u8d1d\u6210\u529f >>> b = copy . copy ( a ) >>> c = copy . deepcopy ( a ) >>> a is b True >>> a is c False >>> d = a [:] # -- \u5143\u7956\u5207\u7247\u4e0d\u4f1a\u4ea7\u751f\u65b0\u5bf9\u8c61 >>> d is a True \u5e94\u7528 \u00b6 1> x = [[1]]*3 x[0][0] = 5 x --> [[5],[5],[5]] >>> x = [[ 1 ]] * 3 # -- \u5185\u5b58\u5730\u5740\u88ab\u62f7\u8d1d\u4e86\uff01 >>> x [[ 1 ], [ 1 ], [ 1 ]] >>> assert x [ 0 ] is x [ 1 ] is x [ 2 ] >>> x [ 0 ] = 5 >>> x [ 5 , [ 1 ], [ 1 ]] >>> x [ 1 ][ 0 ] = 5 >>> x [ 5 , [ 5 ], [ 5 ]] 2> x\u4e3a\u975e\u7a7a\u5217\u8868,\u6267\u884c\u8bed\u53e5 y = x[:] \u540e, id(x[0]) == id(y[0]) \u7684\u503c\u4e3a True. x[:] \u662fx\u5217\u8868\u7684\u6d45\u62f7\u8d1d, x\u4e0ey\u7684id\u80af\u5b9a\u4e0d\u540c, \u4f46list\u662f\u590d\u6742\u7684\u6570\u636e\u7c7b\u578b,\u91cc\u5c42\u5143\u7d20\u7684id\u5b83\u4eec\u662f\u4e00\u81f4\u7684. >>> x = [ 1 , 2 ,[ 3 , 4 , 5 ], 6 ] >>> y = x [: 3 ] >>> y [ 0 ] = 11 >>> y [ 2 ] . extend ([ 55 ]) >>> y [ 11 , 2 , [ 3 , 4 , 5 , 55 ]] >>> x [ 1 , 2 , [ 3 , 4 , 5 , 55 ], 6 ] >>> del x [: 3 ] >>> x [ 6 ] >>> y [ 11 , 2 , [ 3 , 4 , 5 , 55 ]]","title":"\u6570\u636e\u7c7b\u578b\u4e4b\u5e8f\u5217"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/02_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%BA%8F%E5%88%97/#_1","text":"","title":"\u5b57\u7b26\u4e32"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/02_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%BA%8F%E5%88%97/#_2","text":"\u5b57 \u5217 \u5143 \u5178\u96c6 \u53ef\u53d8\u4e0e\u4e0d\u53ef\u53d8\u7684\u533a\u522b\u5728\u4e8e\u91cc\u9762\u5143\u7d20\u7684\u4e2a\u6570\u4ee5\u53ca\u5143\u7d20\u7684\u5185\u5b58\u5730\u5740\u662f\u5426\u53ef\u4ee5\u53d1\u751f\u53d8\u5316 \u53ef\u53d8 : list\u3001dict\u3001set \u200b \u91cc\u9762\u5143\u7d20\u7684\u4e2a\u6570\u4ee5\u53ca\u5143\u7d20\u7684\u5185\u5b58\u5730\u5740\u53ef\u4ee5\u53d1\u751f\u53d8\u5316.. \u5373\u53ef\u4ee5\u5bf9\u5bb9\u5668\u5185\u7684\u5143\u7d20\u5220\u6539\u4ee5\u53ca\u5bb9\u5668\u5143\u7d20\u7684\u589e\u52a0 \u200b \u4e0d\u53ef\u53d8 : \u6570\u5b57\u3001tuple\u3001str\u3001frozerset\u3001bool \u200b \u91cc\u9762\u5143\u7d20\u7684\u4e2a\u6570\u4ee5\u53ca\u5143\u7d20\u7684\u5185\u5b58\u5730\u5740\u90fd\u4e0d\u53ef\u4ee5\u53d1\u751f\u53d8\u5316.. \u5bf9\u4e0d\u53ef\u53d8\u5bf9\u8c61\u6765\u8bf4,\u8c03\u7528\u81ea\u8eab\u7684\u4efb\u610f\u65b9\u6cd5\u90fd\u4e0d\u4f1a\u6539\u53d8\u8be5\u5bf9\u8c61\u81ea\u8eab\u7684\u5185\u5bb9.\u5373\u5b57\u7b26\u4e32\u7684\u72ec\u6709\u529f\u80fd\u90fd\u662f\u65b0\u521b\u5efa\u4e00\u4efd\u6570\u636e..","title":"\u53ef\u53d8\u7c7b\u578b\u4e0e\u4e0d\u53ef\u53d8\u7c7b\u578b "},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/02_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%BA%8F%E5%88%97/#_3","text":"\u683c\u5f0f\u5316\u64cd\u4f5c\u7b26--format--f ' %d , %x ' % ( 65 , 65 ) ' %s ' % (( 1 , 2 , 4 ),) a = ' %s ' % 14 a = ' %s ' % ( 14 ) a = ' %s ' % ( 14 ,) b = ( 14 ,) a = ' %s ' % b \u6ce8\u610f : 1 > \u53ea\u6709\u4e00\u4e2a % s , \u6240\u4ee5\u53ea\u80fd\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570 2 > % s \u63a5\u53d7\u4efb\u610f\u7c7b\u578b\u7684\u503c ; % d \u53ea\u63a5\u53d7int\u7c7b\u578b\u6570\u5b57 ; % x \u5341\u516d\u8fdb\u5236\u7684\u6570\u636e ; % f \u63a5\u6536\u6d6e\u70b9\u6570 'my name is {0} , my age is {1:.2f} !' . format ( '\u5706\u5468\u7387' , 3.1415926 ) # -- \u5de6\u5bf9\u9f50< \u53f3\u5bf9\u9f50> \u5c45\u4e2d^ a = 'abc' format ( a , '<10' ) # 'abc ' format ( a , '>10' ) # ' abc' format ( a , '^10' ) # ' abc ' format ( a , '*^10' ) # '***abc****' format ( 5 , '>10' ) # ' 5' # --\u7b49\u540c\u4e8e n = 5 n . __format__ ( '>10' ) # ' 5' # -- `+`\u4ee3\u8868\u603b\u662f\u6253\u5370\u6b63\u8d1f\u53f7 >>> format ( 123 , '+' ) '+123' >>> format ( - 123 , '+' ) '-123' >>> format ( - 123 , '>+10' ) ' -123' >>> format ( - 123 , '=+10' ) '- 123' >>> format ( - 123 , '0=+10' ) '-000000123' >>> format ( 546 , '0=+10' ) '+000000546'","title":"\u5b57\u7b26\u4e32\u7684\u683c\u5f0f\u5316"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/02_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%BA%8F%E5%88%97/#_4","text":"\u5b57\u7b26\u4e32\u9a7b\u7559\u662f\u4e00\u79cd\u5728\u5185\u5b58\u4e2d\u4ec5\u4fdd\u5b58\u4e00\u4efd\u76f8\u540c\u4e14\u4e0d\u53ef\u53d8\u5b57\u7b26\u4e32\u7684\u65b9\u6cd5 \"\"\" \u2605 --\u9a7b\u7559\u89c4\u5219 \"\"\" 1 > \u5b57\u7b26\u4e32\u957f\u5ea6\u4e3a0\u62161\u65f6 , \u9ed8\u8ba4\u91c7\u7528\u9a7b\u7559\u673a\u5236 \uff1b 2 > \u5b57\u7b26\u4e32\u957f\u5ea6\u5927\u4e8e1\u65f6 , \u4e14\u5b57\u7b26\u4e32\u4e2d\u53ea\u5305\u542b\u5927\u5c0f\u5199\u5b57\u6bcd \u3001 \u6570\u5b57 \u3001 \u4e0b\u5212\u7ebf ( _ ) \u65f6 , \u91c7\u7528\u9a7b\u7559\u673a\u5236 ; 3 > \u5bf9\u4e8e [ - 5 , 256 ] \u4e4b\u95f4\u7684\u6574\u6570\u6570\u5b57 , Python\u9ed8\u8ba4\u9a7b\u7559 ; 4 > \u5b57\u7b26\u4e32 \u53ea\u5728\u7f16\u8bd1\u6210\u5b57\u8282\u7801\u7684\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u9a7b\u7559 , \u800c\u975epvm\u89e3\u91ca\u8fd0\u884c\u65f6 5 > \u7528\u4e58\u6cd5\u5f97\u5230\u7684\u5b57\u7b26\u4e32 , \u82e5\u957f\u5ea6 <= 20 \u4e14\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u6570\u5b57 \u3001 \u5b57\u6bcd\u5927\u5c0f\u5199 \u3001 \u4e0b\u5212\u7ebf \uff0c \u652f\u6301\u9a7b\u7559 ; \u957f\u5ea6 > 20 , \u4e0d\u652f\u6301\u9a7b\u7559 . \u8fd9\u6837\u7684\u8bbe\u8ba1\u76ee\u7684\u662f\u4e3a\u4e86\u4fdd\u62a4 . pcy\u6587\u4ef6\u4e0d\u4f1a\u88ab\u9519\u8bef\u4ee3\u7801\u641e\u7684\u8fc7\u5927 . \"\"\" \u2605 --\u5b9e\u9a8c\u9a8c\u8bc1 \"\"\" >>> a = \"hello\" >>> b = \"hello\" >>> a is b True >>> a = \"hello$\" >>> b = \"hello$\" >>> a is b False >>> a = - 5 >>> b = - 5 >>> a is b True >>> c = - 6 >>> d = - 6 >>> c is d False \u7279\u522b\u6ce8\u610f\u5c0f\u6574\u6570\u6c60 Python\u63d0\u524d\u5efa\u7acb\u597d\u8303\u56f4\u5728[-5, 256]\u7684\u6574\u6570\u5bf9\u8c61, \u4e14\u4e0d\u4f1a\u88ab\u5783\u573e\u56de\u6536..\u65e0\u8bba\u8fd9\u4e2a\u6574\u6570\u5904\u4e8eLEGB\u4e2d\u7684\u54ea\u4e2a\u4f4d\u7f6e, \u6240\u6709\u4f4d\u4e8e\u8fd9\u4e2a\u8303\u56f4\u5185\u7684\u6574\u6570\u4f7f\u7528\u7684\u90fd\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61. \u4e3b\u8981\u76ee\u7684\u662f\u4e3a\u4e86\u907f\u514d\u9891\u7e41\u7533\u8bf7\u548c\u9500\u6bc1\u5c0f\u6574\u6570\u7684\u5185\u5b58\u7a7a\u95f4, \u63d0\u9ad8\u7a0b\u5e8f\u7684\u8fd0\u884c\u6548\u7387..","title":"\u5b57\u7b26\u4e32\u7684\u9a7b\u7559\u673a\u5236"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/02_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%BA%8F%E5%88%97/#_5","text":"\u5b57\u7b26\u4e32 \u65e0lindex lfind lsplit\u65b9\u6cd5 \u62fc\u63a5 -- join \u5927\u5c0f\u5199 -- swapcase upper lower casefold title \u5b57\u7b26\u4e32\u7ec4\u6210 -- isdigit isdecimal isalnum isalpha \u5f00\u5934\u7ed3\u5c3e -- startswith endswith \u627e\u4f4d\u7f6e -- index rindex find rfind \u6392\u7248 -- center ljust rjust \u5206\u5272 -- partition split rsplit \u53bb\u9664 -- strip lstrip rstrip \u66ff\u6362 -- replace \u6620\u5c04 -- maketrans\u3001translate --- \u2605 -- \u62fc\u63a5 --- \"\" . join ( \u53ef\u8fed\u4ee3\u5bf9\u8c61 ) # -- \u5207\u8bb0\u8fd9\u91cc\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u5fc5\u987b\u662fstr\u7c7b\u578b '' . join ( list ( \"Hello World\" )) # -- \"Hello World\" --- \u2605 -- \u5927\u5c0f\u5199 --- my_str . swapcase () # -- \u5927\u5c0f\u5199\u4e92\u6362 my_str . upper () my_str . lower () # -- \u5168\u53d8\u5927\u5199 my_str . casefold () # -- \u5168\u53d8\u5c0f\u5199 my_str . title () # -- \u9996\u5b57\u6bcd\u5927\u5199 my_str . islower () # -- \u662f\u5426\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210 --- \u2605 -- \u5b57\u7b26\u4e32\u7ec4\u6210\u5224\u65ad --- 'abc10' . isdigit () # False -- \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u662f\u7eaf\u6570\u5b57\u7ec4\u6210 \"\"\" isdecimal \u53ea\u5305\u542b\u5341\u8fdb\u5236\u5b57\u7b26,\u8fd9\u79cd\u65b9\u6cd5\u901a\u5e38\u7528\u4e8eunicode\u5bf9\u8c61.. bytes\u7c7b\u578b\u65e0isdecimal\u65b9\u6cd5 python3\u4f1a\u81ea\u52a8\u5c06\u53d8\u91cf\u8f6c\u53d8\u4e3aunicode,\u52a0\u4e0d\u52a0u\u90fd\u53ef \"\"\" u '123' . isdecimal () # True 'abc10' . isalnum () # True -- \u53ea\u6709\u5b57\u6bcd\u548c\u6570\u5b57 'saf\u54c8\u54c8\u54c8'.isalnum() \u7ed3\u679c\u5c45\u7136\u4e3aTrue Amazing\ud83e\udd14 'abc10' . isalpha () # False -- \u53ea\u6709\u5b57\u6bcd\u548c\u6587\u5b57 --- \u2605 -- \u5f00\u5934\u7ed3\u5c3e --- my_str . startswith ( \u5b50\u5b57\u7b26\u4e32 , \u8d77\u59cb\u4f4d\u7f6e \"\u9ed8\u8ba4\u4e3a0\" , \u7ed3\u675f\u4f4d\u7f6e \"\u9ed8\u8ba4\u4e3a\u5b57\u7b26\u4e32\u957f\u5ea6\" ) # -- \u5224\u65ad\u662f\u5426\u4ee5\u6307\u5b9a\u6570\u636e\u5f00\u5934 my_str . endswith ( \u5b50\u5b57\u7b26\u4e32 , \u8d77\u59cb\u4f4d\u7f6e , \u7ed3\u675f\u4f4d\u7f6e ) # -- \u5224\u65ad\u662f\u5426\u4ee5\u6307\u5b9a\u6570\u636e\u7ed3\u5c3e fn . endswith (( '.py' , '.sh' )) --- \u2605 -- \u627e\u4f4d\u7f6e index\u4e0efind\u7684\u533a\u522b \u82e5\u672a\u627e\u5230 \u524d\u8005\u62a5\u9519 \u540e\u8005\u8fd4\u56de - 1 --- my_str . index ( substring , beg = 0 , end = len ( string )) # -- \u8fd4\u56de\u6307\u5b9a\u5b50\u5b57\u7b26\u4e32\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u7d22\u5f15\u503c,\u5426\u5219\u629b\u51fa\u5f02\u5e38 \"im is boy is good\" . index ( \"is\" ) # 3 \"im is boy is good\" . rindex ( \"is\" ) # 10 'I like Python!!!' . rfind ( 'python' ) # -1 --- \u2605 -- \u6392\u7248 --- # center\u5c45\u4e2d # 20\u4e3a\u5b57\u7b26\u957f\u5ea6,\u5b57\u7b26\u672c\u8eab\u957f\u5ea6\u5927\u4e8e20\u4ee5\u5b57\u7b26\u957f\u5ea6\u672c\u8eab\u4e3a\u51c6;'-'\u5360\u4f4d\u7b26 # \u603b\u5bbd\u5ea6\u4e3a20,\u5b57\u7b26\u4e32\u5c45\u4e2d\u663e\u793a,\u4e0d\u591f\u7528-\u586b\u5145 'abc def' . center ( 9 , \"-\" ) # '-abc def-' 'abc def' . ljust ( 9 , \"-\" ) # 'abc def--' -- \u5c45\u5de6 'abc def' . rjust ( 9 , \"-\" ) # '--abc def' -- \u5c45\u53f3 --- \u2605 -- \u5206\u5272 \u4ee5\u6307\u5b9a\u5b57\u7b26\u4e32\u4e3a\u5355\u4f4d ( \u53ef\u4ee5\u662f\u53ea\u7531\u4e00\u4e2a\u5b57\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u4e32 ) \u8fdb\u884c\u5206\u5272 --- # -- partition\u7b2c\u4e00\u4e2a\u4e3a\u5206\u9694\u7b26\u5de6\u8fb9\u7684\u5b50\u4e32,\u7b2c\u4e8c\u4e2a\u4e3a\u5206\u9694\u7b26\u672c\u8eab,\u7b2c\u4e09\u4e2a\u4e3a\u5206\u9694\u7b26\u53f3\u8fb9\u7684\u5b50\u4e32 'abcark' . partition ( 'a' ) # ('', 'a', 'bcark') -- \u5206\u5272,\u8fd4\u56de\u4e00\u4e2a3\u5143\u7684\u5143\u7ec4 'arbcark' . split ( 'ar' ) # ['', 'bc', 'k'] -- \u4ece\u5de6\u5f00\u59cb\u5206\u5272,\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u5217\u8868 # -- split\u548crsplit\u90fd\u6709\u4e2a\u53ef\u9009\u53c2\u6570num\u4ee3\u8868\u5206\u5272\u6b21\u6570 \u9ed8\u8ba4\u662f-1 \u4ee3\u8868\u5206\u9694\u6240\u6709 'abcark' . rsplit ( 'a' , 1 ) # ['abc', 'rk'] -- \u4ece\u53f3\u5f00\u59cb\u5206\u9694 ' arb \\n \\n ' . split () # ['arb'] -- \u591a\u4e2a/n\u548c\u7a7a\u683c\u4f1a\u7b97\u4f5c\u4e00\u4e2a '' . join ( 'abcark' . split ( 'a' )) # 'bcrk' -- \u8fbe\u5230\u53bb\u9664\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u6307\u5b9a\u7684\u5b57\u7b26\u7684\u6548\u679c --- \u2605 -- \u53bb\u9664 \u53bb\u9664\u662f\u4ee5\u5b57\u7b26\u4e3a\u5355\u4f4d \u5339\u914d\u4e0d\u662f\u6309\u7167\u6574\u4e2a\u5b57\u7b26\u4e32 'as' \u5339\u914d\u7684 , \u800c\u662f\u4e00\u4e2a\u4e00\u4e2a\u5339\u914d\u7684 'a' 's' \uff01\uff01\uff01 Ps : my_str . replace () \u548cre . sub () \u90fd\u80fd\u8fbe\u5230\u53bb\u9664\u5b57\u7b26\u7684\u6548\u679c . --- 'aaastaarfsfa' . strip ( 'as' ) # 'taarfsf' -- \u53bb\u9664\u5b57\u7b26\u4e32\u5934\u5c3e\u6307\u5b9a\u5b57\u7b26 'aaastaarfsfa' . lstrip ( 'as' ) # 'taarfsfa' -- \u53bb\u9664\u5b57\u7b26\u4e32\u5de6\u8fb9\u6307\u5b9a\u5b57\u7b26 'aaastaarfsfa' . rstrip ( 'as' ) # 'aaastaarfsf' -- \u53bb\u9664\u5b57\u7b26\u4e32\u53f3\u8fb9\u6307\u5b9a\u5b57\u7b26 # 'arbcark' # \u82e5\u4e0d\u5199\u53c2\u6570,\u9ed8\u8ba4\u4ee5\u7a7a\u683c\u4e3a\u6807\u51c6,\u5305\u542b\\n,\u591a\u4e2a\u7a7a\u683c\u548c\\n\u8fde\u5728\u4e00\u8d77\u4f1a\u7b97\u6210\u4e00\u4e2a ' arbcark \\n \\n ' . strip () --- \u2605 -- \u66ff\u6362 --- my_str . replace ( old\u9700\u8981\u66ff\u6362\u7684\u5b57\u7b26\u4e32 , new\u66ff\u6362\u6210\u7684\u5b57\u7b26\u4e32 , \u4ece\u5de6\u5230\u53f3\u66ff\u6362\u591a\u5c11\u4e2a \"\u9ed8\u8ba4\u5168\u90e8\" ) # -- \u66ff\u6362 \"this is strising..is..!!!\" . replace ( 'is' , 'IS' , 2 ) # 'thIS IS strising..is..!!!'","title":"\u5b57\u7b26\u4e32\u5e38\u89c1\u5185\u7f6e\u65b9\u6cd5"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/02_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%BA%8F%E5%88%97/#join","text":"\"\"\" Python\u7684\u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8(immutable)\u7684 \u82e5\u60f3\u6539\u53d8\u5b57\u7b26\u4e32,\u53ea\u80fd\u901a\u8fc7\u521b\u5efa\u65b0\u7684\u5b57\u7b26\u4e32\u6765\u5b9e\u73b0. \u5c06\u5b57\u7b26\u4e32hello\u4e2d\u7684l\u6539\u4e3a\u5927\u5199\u7684L,\u6709\u4e24\u4e2a\u89e3\u51b3\u65b9\u6848: 1> \u4f7f\u7528\u5b57\u7b26\u4e32\u7684\u62fc\u63a5 2> \u4f7f\u7528\u5b57\u7b26\u4e32\u7684\u5185\u7f6e\u51fd\u6570replace \u4e24\u79cd\u65b9\u6848\u90fd\u4f1a\u5f97\u5230\u65b0\u7684\u5b57\u7b26\u4e32,\u4e14\u65f6\u95f4\u590d\u6742\u5ea6\u7686\u4e3aO(n). n\u4e3a\u65b0\u5b57\u7b26\u4e32\u7684\u957f\u5ea6. Ps: \u65f6\u95f4\u590d\u6742\u5ea6 \u5927O\u8868\u793a\u6cd5: T(n) = O( f(n) ),\u5176\u4e2df(n) \u8868\u793a\u6bcf\u884c\u4ee3\u7801\u6267\u884c\u6b21\u6570\u4e4b\u548c \u5217\u8868\u5207\u7247\u65f6\u95f4\u590d\u6742\u5ea6O(k),k\u4e3a\u5207\u7247\u957f\u5ea6,\u76f8\u5f53\u4e8e\u8981\u6267\u884c7\u6b21\u53d6\u5143\u7d20;\u5217\u8868\u6839\u636e\u4e0b\u6807\u53d6\u5143\u7d20\u662fO(1) \u8865\u5145: Java\u4e2d\u6709\u53ef\u53d8\u7684\u5b57\u7b26\u4e32\u7c7b\u578b,\u6bd4\u5982 StringBuilder,\u6bcf\u6b21\u6dfb\u52a0\u3001\u6539\u53d8\u6216\u5220\u9664\u5b57\u7b26(\u4e32),\u65e0\u9700\u521b\u5efa\u65b0\u7684\u5b57\u7b26\u4e32.. \u65f6\u95f4\u590d\u6742\u5ea6\u4ec5\u4e3aO(1)..\u8fd9\u6837\u5c31\u5927\u5927\u63d0\u9ad8\u4e86\u7a0b\u5e8f\u7684\u8fd0\u884c\u6548\u7387 \"\"\" >>> s = \"hello\" # -- s[-1:]\u4e0es[-1]\u7684\u7ed3\u679c\u90fd\u662f'o' >>> new_s = s [: 2 ] + \"LL\" + s [ - 1 :] # -- \u5b57\u7b26\u4e32\u7684\u62fc\u63a5 >>> new_s 'heLLo' >>> new_s2 = s . replace ( 'l' , 'L' ) >>> new_s2 'heLLo' += \u76f8\u8f83\u4e8e + \u6027\u80fd\u5f97\u5230\u4e86\u4e00\u5b9a\u7684\u63d0\u5347.. python\u5728\u5e95\u5c42\u5bf9+=\u505a\u4e86\u4f18\u5316\u64cd\u4f5c. \u5b57\u7b26\u4e32\u62fc\u63a5\u66f4\u63a8\u8350\u7528join(). s = \"\" for n in range ( 0 , 100000 ): # print(id(s)) s += str ( n ) \"\"\" \u5206\u6790: for\u5faa\u73af\u4f1a\u6267\u884cn\u6b21,\u5faa\u73af\u4f53\u5185\u7684\u62fc\u63a5\u64cd\u4f5c\u6bcf\u6b21\u90fd\u4f1a\u521b\u5efa\u65b0\u7684\u5b57\u7b26\u4e32,\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u4f9d\u7167\u5faa\u73af\u7684\u6b21\u6570\u4f9d\u6b21\u589e\u52a0 \u6240\u4ee5,\u8be5\u7a0b\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(1)+O(2)+...+O(n) = (n^2+n)/2 \u5373\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n^2) \u771f\u5b9e\u5206\u6790: +=\u64cd\u4f5c\u7684\u4f18\u5316,\u5728\u8fd910\u4e07\u6b21\u5b57\u7b26\u4e32\u62fc\u63a5\u64cd\u4f5c\u4e2d,\u4e0d\u4f1a\u6bcf\u6b21\u62fc\u63a5\u64cd\u4f5c\u90fd\u521b\u5efa\u65b0\u7684\u5b57\u7b26\u4e32. \u6bd4\u5982100\u5230200\u7684\u5b57\u7b26\u62fc\u63a5\u7684id(s)\u90fd\u4e3a4352190976, 200-270\u7684\u5b57\u7b26\u62fc\u63a5\u7684id(s)\u90fd\u4e3a1403247265.. \"\"\" Q : \u4e0b\u9762\u4e24\u79cd\u5b57\u7b26\u4e32\u62fc\u63a5\u65b9\u5f0f\u8c01\u66f4\u9ad8\u6548\uff1f s = '' for n in range ( 0 , 100000 ): s += str ( n ) l = [] # -- \u8be5\u7a0b\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(2n) for n in range ( 0 , 100000 ): l . append ( str ( n )) # -- append\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1),So,for\u5faa\u73af\u6574\u4f53\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n) s = ' ' . join ( l ) # -- join\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n) # -- \u7b80\u5199: ''.join([str(i) for i in range(0,100000)]) # -- \u4e00\u4e2a\u66f4\u52a0pythonic\u7684\u5199\u6cd5,s = \" \".join(map(str, range(0, 10000))) A: 1> \u5982\u679c\u5b57\u7b26\u4e32\u62fc\u63a5\u7684\u6b21\u6570\u8f83\u5c11, \u6bd4\u5982range(100), \u90a3\u4e48\u65b9\u6cd5\u4e00\u66f4\u4f18. 2> \u5982\u679c\u5b57\u7b26\u4e32\u62fc\u63a5\u7684\u6b21\u6570\u8f83\u591a, \u6bd4\u5982range(1000000), \u65b9\u6cd5\u4e8c\u7a0d\u5feb\u4e00\u4e9b..","title":"+\u3001+=\u3001join"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/02_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%BA%8F%E5%88%97/#_6","text":"","title":"\u5217\u8868"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/02_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%BA%8F%E5%88%97/#extend","text":"my_list.extend() \u662f\u5c06 \u53ef\u8fed\u4ee3\u5bf9\u8c61 \u7684\u5143\u7d20\u9010\u4e00\u52a0\u5165\u5217\u8868\u4e2d. my_list.extend([4,5,6])\u7b49\u540c\u4e8emy_list += [4,5,6] \u539f\u5730\u6539\u53d8 ; my_list = my_list + [4,5,6] \u5728my_list\u7684\u57fa\u7840\u4e0a\u6dfb\u52a0\u65b0\u7684\u5143\u7d20\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61. id\u4f1a\u53d8 >>> my_list = [ 1 , 2 , 3 ] >>> id ( my_list ) 140685461974272 >>> my_list += [ 4 ] >>> id ( my_list ) 140685461974272 >>> my_list . extend ([ 5 ]) >>> id ( my_list ) 140685461974272 >>> my_list = my_list + [ 6 ] >>> id ( my_list ) 140685461892032 \"\"\" \u5217\u8868\u5d4c\u5957\u7684\u95ee\u9898: \"\"\" my_list = [[ 0 ] * 3 for _ in range ( 5 )] my_list2 = [[ 0 ] * 3 ] * 5 for i in my_list : print ( id ( i )) for i in my_list2 : print ( id ( i ))","title":"extend\u3001+=\u3001+"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/02_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%BA%8F%E5%88%97/#range","text":"\u8054\u60f3\u8bb0\u5fc6: range()\u5185\u7f6e\u51fd\u6570\u4e0e\u5207\u7247\u4e00\u6837\u987e\u5934\u4e0d\u987e\u5c3e, range\u53ef\u4e0e\u5207\u7247\u642d\u914d. range ( 10 )[ - 1 ] # 9 range ( 10 )[: - 4 ] # range(0,6) range ( 10 )[:: 2 ] # range(0,10,2)","title":"range"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/02_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%BA%8F%E5%88%97/#_7","text":"\u8bb0\u4f4f\u4e00\u4e2a\u539f\u5219 ,\u53ef\u4ee5\u4f7f\u7528\u4e0b\u6807\u7684(\u5373\u5e8f\u5217), \u6bd4\u5982my_str[2], \u5c31\u53ef\u4ee5\u4f7f\u7528\u5207\u7247 \u6ce8\u610f\u4e00\u70b9 : \u8d4b\u503c\u64cd\u4f5c\u7ed3\u5408\u5217\u8868\u5207\u7247 b = a[:] \u5207\u7247\u5728\u53f3\u4fa7,\u662f\u5bf9a\u5217\u8868\u8fdb\u884c\u6d45\u62f7\u8d1d a[:] = b \u5207\u7247\u5728\u5de6\u4fa7,\u662f\u5bf9a\u5217\u8868\u8fdb\u884c\u539f\u5730\u4fee\u6539 --- \u2605 -- \u5217\u8868\u5207\u7247\u7684\u5947\u5999\u6280\u5de7 --- 1. \u5728\u5217\u8868\u5bf9\u8c61my_list\u7684\u5f00\u59cb\u5904\u589e\u52a0\u4e00\u4e2a\u5143\u7d20\u4e3a3\u7684\u4ee3\u7801 . my_list . insert ( 0 , 3 ) my_list [ 0 : 0 ] = [ 3 ] \u540c\u7406 ( \u4e0b\u6807\u4e3a1\u7684\u5730\u65b9 ) --> my_list [ 1 : 1 ] = [ 3 ] 2. x = [ 3 , 5 , 7 ] x [ 10 :] --> [] x [ len ( x ):] = [ 1 , 2 ] --> x\u503c\u4e3a [ 3 , 5 , 7 , 1 , 2 ] x [ len ( x ) - 1 :] = [ 1 , 2 ] --> x\u503c\u4e3a [ 3 , 5 , 1 , 2 ] 3. x = [ 1 , 2 ] x [ 0 : 0 ] = [ 3 , 3 ] --> x\u503c\u4e3a [ 3 , 3 , 1 , 2 ] # \u6dfb\u52a0 x [ 0 : 1 ] = [ 3 , 3 ] --> x\u503c\u4e3a [ 3 , 3 , 2 ] # \u66ff\u6362 x [ 0 ] = [ 3 , 3 ] --> x\u503c\u4e3a [[ 3 , 3 ], 2 ] # \u4fee\u6539","title":"\u8d4b\u503c\u3001\u5207\u7247"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/02_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%BA%8F%E5%88%97/#_8","text":"\u521b\u5efa -- []\u3001list() \u589e -- append\u3001extend\u3001insert \u5220 -- del\u3001remove\u3001pop\u3001clear \u67e5 -- \u901a\u8fc7\u7d22\u5f15\u67e5\u627e\u3001\u5207\u7247\u67e5\u627e \u6539 -- \u5bf9\u67e5\u627e\u7684\u5185\u5bb9\u8fdb\u884c\u8d4b\u503c\u64cd\u4f5c\u5c31\u53ef\u4ee5\u66f4\u6539(\u6ce8\u610f\u4e00\u4e00\u5bf9\u5e94)\u3001sort\u3001reverse \u56e0\u4e3a\u5217\u8868\u662f\u53ef\u53d8\u5bf9\u8c61,\u6240\u4ee5\u5217\u8868\u8c03\u7528\u81ea\u8eab\u7684\u65b9\u6cd5\u4f1a\u539f\u5730\u8fdb\u884c\u6539\u53d8... --- \u2605 -- \u589e\u52a0 --- \u7ed3\u8bba : \u7528 [] \u521b\u5efa\u7a7a\u5217\u8868\u7684\u6548\u7387\u662f\u9ad8\u4e8elist () \u7684 !!! \u533a\u522b\u4e3b\u8981\u5728\u4e8elist () \u662f\u4e00\u4e2afunction call\u51fd\u6570\u8c03\u7528 , Python\u7684function call\u4f1a\u521b\u5efastack\u5806\u6808 , \u5e76\u4e14\u8fdb\u884c\u4e00\u7cfb\u5217\u53c2\u6570\u68c0\u67e5\u7684\u64cd\u4f5c , \u53cd\u89c2 [] \u662f\u4e00\u4e2a\u5185\u7f6e\u7684C\u51fd\u6570 , \u53ef\u4ee5\u76f4\u63a5\u88ab\u8c03\u7528 , \u56e0\u6b64\u6548\u7387\u9ad8 !! --- \u2605 -- \u589e\u52a0 --- my_list . append ([ 1 , 2 , 3 ]) # -- \u5217\u8868\u6574\u4f53\u52a0\u5165\u5217\u8868\u672b\u5c3e,\u539f\u5730\u6539\u53d8 my_list . extend ([ 1 , 2 , 3 ]) # -- \u5217\u8868\u5143\u7d20\u9010\u4e2a\u52a0\u5165\u5217\u8868\u672b\u5c3e,\u539f\u5730\u6539\u53d8 my_list . insert ( 0 , \"new\" ) # -- \u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20,\u7b49\u540c\u4e8e my_list[0:0] = [\"new\"] --- \u2605 -- \u5220\u9664 --- x = list ( range ( 10 )) del x [:: 2 ] # -- x\u7684\u503c\u4e3a[1,3,5,7,9] my_list . remove ( 2 ) # -- \u79fb\u9664\u7684\u662f\u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5339\u914d\u9879,\u65e0\u8fd4\u56de\u503c,\u82e5\u6ca1\u6709,\u4f1a\u62a5\u9519 my_list . pop () # -- pop()\u9ed8\u8ba4\u5220\u9664\u5217\u8868\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5e76\u5c06\u5220\u9664\u7684\u503c\u8fd4\u56de; # \u62ec\u53f7\u5185\u53ef\u4ee5\u901a\u8fc7\u52a0\u7d22\u5f15\u503c\u6765\u6307\u5b9a\u5220\u9664\u5143\u7d20 my_list . clear () # -- \u6e05\u7a7a\u5217\u8868 --- \u2605 -- \u6392\u5e8f\u7ffb\u8f6c my_list . sort () \u548c my_list . reverse () \u7684\u8fd4\u56de\u503c\u90fd\u4e3aNone \uff01 \u4e14\u53ea\u9002\u7528\u4e8e\u5217\u8868 . \u539f\u5730\u6539\u53d8 . --- my_list . sort ( reverse = True ) # -- \u7ed9\u5217\u8868\u5185\u6240\u6709\u5143\u7d20\u6392\u5e8f # \u6ce8\u610f\u54e6,\u6392\u5e8f\u65f6\u5217\u8868\u5143\u7d20\u4e4b\u95f4\u5fc5\u987b\u662f\u76f8\u540c\u6570\u636e\u7c7b\u578b,\u4e0d\u53ef\u6df7\u642d,\u5426\u5219\u4f1a\u62a5\u9519 my_list . reverse () # -- \u98a0\u5012\u5217\u8868\u5185\u5143\u7d20\u987a\u5e8f --- \u2605 -- \u6b65\u957f --- list ( range ( 10 ))[:: 2 ] # \u6b63\u5411\u6b65\u957f -- [0, 2, 4, 6, 8] list ( range ( 10 ))[ - 2 :: - 2 ] # \u53cd\u5411\u6b65\u957f -- [8, 6, 4, 2, 0] [] or list () ; () or tuple () my_list = [ i ** 2 for i in range ( 1 , 11 ) if i > 3 ] # -- \u5217\u8868\u751f\u6210\u5f0f ` x = [[ 1 ]] * 3 ` ` x [ 0 ][ 0 ] = 5 ` ` x ` --> [[ 5 ],[ 5 ],[ 5 ]] ` x = [ 1 , 3 , 2 ] ` ` a , b , c = map ( str , sorded ( x )) ` b --> '2'","title":"\u5217\u8868\u5e38\u89c1\u5185\u7f6e\u65b9\u6cd5"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/02_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%BA%8F%E5%88%97/#_9","text":"Ps: \u4e0a\u56fe\u7684\u5206\u79bb\u5f0f\u987a\u5e8f\u8868\u7684\u6570\u636e\u533a\u7684\u6570\u636e\u91c7\u7528\u7684\u662f \u5143\u7d20\u5916\u7f6e \u7684\u5f62\u5f0f\u8fdb\u884c\u7684\u5b58\u50a8!!\u8fde\u7eed\u5b58\u50a8\u7684\u662f\u5143\u7d20\u7684\u5730\u5740(\u5373\u5bf9\u5b9e\u9645\u6570\u636e\u7684\u7d22\u5f15/\u5f15\u7528),\u6bcf\u4e2a\u7a7a\u95f4\u5360\u636e\u7684\u5927\u5c0f\u90fd\u4e3a8\u5b57\u8282.. \u5217\u8868\u672c\u8d28\u4e0a\u662f\u5206\u79bb\u5f0f\u7684\u987a\u5e8f\u8868 .. \u987a\u5e8f\u8868\u7684\u7ed3\u6784\u5305\u62ec\u8868\u5934\u548c\u6570\u636e\u533a. \u5206\u79bb\u5f0f\u987a\u5e8f\u8868\u6bd4\u4e00\u4f53\u5f0f\u7684\u987a\u5e8f\u8868\u591a\u4e86\u4e00\u4e2a\u6570\u636e\u533a\u94fe\u63a5\u5730\u5740... \u5bf9\u5217\u8868\u7684\u5143\u7d20\u5b58\u50a8\u533a\u8fdb\u884c\u6269\u5145\u9700\u8981\u7ecf\u5386\u4e09\u4e2a\u6b65\u9aa4: 1> \u91cd\u65b0\u7533\u8bf7\u7a7a\u95f4 2> \u6570\u636e\u642c\u8fc1 3> \u91ca\u653e\u539f\u6765\u7684\u6570\u636e So, \u4e00\u4f53\u5f0f\u82e5\u9700\u6269\u5145\u7684\u8bdd,\u6574\u4f53\u90fd\u8981\u6539,\u53d8\u91cf\u7684\u6307\u5411(\u8d77\u59cb\u5730\u5740)\u4e5f\u4f1a\u968f\u4e4b\u6539\u53d8.. \u4f46\u5206\u79bb\u5f0f\u7684\u8d77\u59cb\u5730\u5740\u4e0d\u4f1a\u6539\u53d8,\u53ea\u9700\u8981\u66f4\u65b0\u8868\u5934\u4fe1\u606f\u4e2d\u6570\u636e\u533a\u94fe\u63a5\u5730\u5740\u5373\u53ef!! \u5217\u8868 \u4e0b\u6807/\u7d22\u5f15\u5b9a\u4f4d\u5143\u7d20 \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(1) -- \u5229\u7528\u6570\u636e\u94fe\u63a5\u533a\u7684\u5730\u5740\u548c\u504f\u79fb\u91cf(\u4e0b\u6807)\u77ac\u95f4\u5b9a\u4f4d\u5230.. \u5217\u8868 \u6307\u5b9a\u503c\u67e5\u627e \u7684 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) -- \u9700\u8981\u904d\u5386\u5217\u8868 \u5217\u8868 \u672b\u5c3e\u589e\u52a0\u548c\u5220\u9664 \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(1) , \u5728 \u6307\u5b9a\u4f4d\u7f6e\u6dfb\u52a0\u548c\u5220\u9664 \u5143\u7d20\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) .. \u5217\u8868 \u5207\u7247 \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(k) , k\u4e3a\u5207\u7247\u7684\u957f\u5ea6. \u76f8\u5f53\u4e8e\u6839\u636e\u4e0b\u6807\u5b9a\u4f4d\u4e86k\u6b21\u5143\u7d20.. Ps: \u5143\u7956\u7684\u4e5f\u91c7\u7528\u7684\u987a\u5e8f\u8868\u7684\u5b9e\u73b0\u65b9\u5f0f..\u4f46\u5143\u7956\u662f\u4e0d\u53d8\u7684\u987a\u5e8f\u8868,\u56e0\u800c\u4e0d\u652f\u6301\u4efb\u4f55\u6539\u53d8\u5176\u5185\u90e8\u72b6\u6001\u7684\u64cd\u4f5c..","title":"\u5206\u79bb\u5f0f\u987a\u5e8f\u8868"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/02_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%BA%8F%E5%88%97/#_10","text":"\u4f55\u4e3a\u5e8f\u5217\uff1f (\u5217\u8868\u3001\u5143\u7956\u3001\u5b57\u7b26\u4e32) \u53ef\u4ee5\u901a\u8fc7\u4e0b\u6807\u504f\u79fb\u91cf\u8bbf\u95ee\u5230\u5b83\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u6210\u5458.. \u5e8f\u5217\u5e38\u89c1\u65b9\u6cd5 \u4e0d\u4f1a\u6539\u53d8\u539f\u5e8f\u5217\u7684\u503c","title":"\u5e8f\u5217"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/02_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%BA%8F%E5%88%97/#_11","text":"\u5e8f\u5217(\u5217\u8868\u3001\u5143\u7956\u3001\u5b57\u7b26\u4e32)\u90fd\u80fd\u7528\u64cd\u4f5c\u7b26(\u6bd4\u8f83 > \u3001\u8fde\u63a5 + \u3001\u91cd\u590d * \u3001\u590d\u5408\u8d4b\u503c *= \u3001 \u6210\u5458 in )\u4ee5\u53ca \u5207\u7247 >>> tup = ( 1 , 2 , 3 ) >>> new_tup = tup + ( 4 , 5 ) # -- \u521b\u5efa\u65b0\u7684\u5143\u7ec4new_tup,\u5e76\u4f9d\u6b21\u586b\u5145\u4e24\u4e2a\u5143\u7ec4\u7684\u503c >>> new_tup ( 1 , 2 , 3 , 4 , 5 ) # -- \u9996\u5148\u6bd4\u8f83\u4e0b\u6807\u4e3a0\u7684\u5bf9\u5e94\u5143\u7d20,\u5982\u679c\u76f8\u7b49,\u518d\u6bd4\u8f83\u4e0b\u6807\u4e3a1\u7684\u5bf9\u5e94\u5143\u7d20,\u4ee5\u6b64\u7c7b\u63a8.. >>> a = [( 0 , 5 ),( 1 , 4 ),( 0 , 2 ),( 1 , 1 ),( 1 , 3 )] >>> list ( sorted ( a )) [( 0 , 2 ), ( 0 , 5 ), ( 1 , 1 ), ( 1 , 3 ), ( 1 , 4 )] \u5220\u9664\u4e00\u4e2alist\u91cc\u91cd\u590d\u5143\u7d20\u5e76\u4fdd\u6301\u5b83\u4eec\u539f\u6765\u7684\u6392\u5e8f key=l1.index >>> l1 = [ 'b' , 'c' , 'd' , 'b' , 'c' , 'a' , 'a' ] >>> sorted ( set ( l1 )) [ 'a' , 'b' , 'c' , 'd' ] >>> sorted ( l1 , key = l1 . index ) [ 'b' , 'b' , 'c' , 'c' , 'd' , 'a' , 'a' ] >>> sorted ( set ( l1 ), key = l1 . index ) [ 'b' , 'c' , 'd' , 'a' ] \u53e3\u8bc0: \u957f\u5927\u5c0f,\u548c\u6392\u7ffb,\u4e8c\u5143\u7956,\u4e09\u8f6c\u6362,z\u6b21\u67e5 len() max() min() sum() sorted() reversed() enumerate() str() tuple() list() zip() obj.count() obj.index() # \u8be6\u89c1 https://blog.csdn.net/weixin_42444693/article/details/104203479 x = [ '11' , '2' , '3' ], max ( x , key = len ) # -- \u5224\u65ad\u5217\u8868\u4e2d\u6700\u957f\u7684\u9879 # \u524d\u8005\u8fd4\u56de\u7684\u662f\u5217\u8868;\u540e\u8005\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u7ffb\u8f6c\u540e\u7684iterable\u53ef\u8fed\u4ee3\u5bf9\u8c61. sorted ([ 1 , 2 , 3 ], reverse = True ) == reversed ([ 1 , 2 , 3 ]) # -- False # enumerate\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u5bf9\u8c61. \u6b64\u5bf9\u8c61\u7684\u5143\u7d20\u662f\u7531\u53ef\u8fed\u4ee3\u53c2\u6570\u7684\u7d22\u5f15\u53f7\u53ca\u5176\u5bf9\u5e94\u7684\u5143\u7d20\u6784\u6210\u7684\u4e8c\u5143\u7956. # list()\u5c06\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u8f6c\u6362\u4e3a\u5217\u8868! list ( enumerate ( 'one' )) # [(0, 'o'), (1, 'n'), (2, 'e')] # zip\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u5bf9\u8c61. \u6b64\u5bf9\u8c61\u7684\u5143\u7d20\u662f\u7531iterable\u5bf9\u8c61\u4eec\u4e2d\u7684\u5143\u7d20\u4e00\u4e00\u5bf9\u5e94\u6784\u6210\u7684\u5143\u7956. list ( zip ([ 1 , 2 ],[ 3 , 4 ])) # -- [(1, 3), (2, 4)] list ( zip ([ 1 , 2 ],{ 3 : 1 , 4 : 2 })) # -- [(1, 3), (2, 4)]","title":"\u5e8f\u5217\u901a\u5e38\u4f7f\u7528\u65b9\u6cd5"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/02_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%BA%8F%E5%88%97/#_12","text":"","title":"\u5217\u8868\u4e0e\u5143\u7956"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/02_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%BA%8F%E5%88%97/#_13","text":"\u53ef\u4ee5\u53d1\u73b0\u5b58\u50a8\u76f8\u540c\u7684\u5143\u7d20,\u5217\u8868\u4f1a\u6bd4\u5143\u7956\u591a\u5f00\u950016\u5b57\u8282\u7684\u7a7a\u95f4..why? # -- obj.__sizeof__() \u8fd4\u56de\u5bf9\u8c61\u7684\u5185\u5b58\u5927\u5c0f >>> a = [ 1 , 2 , 3 ] >>> a . __sizeof__ () 64 >>> b = ( 1 , 2 , 3 ) >>> b . __sizeof__ () 48 \"\"\" \u6b64\u5904int\u6574\u578b\u4e3a8\u5b57\u8282.. 3*8=24, \u6240\u4ee5\u521d\u59cb\u7684\u7a7a\u5217\u8868\u548c\u7a7a\u5143\u7956\u5206\u522b\u9700\u898140\u5b57\u8282\u548c24\u5b57\u8282\u7684\u7a7a\u95f4. \u5217\u8868\u6bd4\u5143\u7956\u591a\u768416\u5b57\u8282,\u6709\u4e24\u65b9\u9762\u539f\u56e0: 1> 8\u5b57\u8282\u7528\u4e8e\u5b58\u50a8\u6307\u9488 -- \u4fbf\u4e8e\u6570\u636e\u52a8\u6001\u53d8\u5316,\u52a8\u6001\u7684\u6539\u53d8\u5206\u79bb\u5f0f\u987a\u5e8f\u8868\u7684\u6570\u636e\u533a (\u5927\u80c6\u731c\u6d4b,\u56e0\u4e3a\u5217\u8868\u662f\u5206\u79bb\u5f0f\u7684\u987a\u5e8f\u8868,so\u6b64\u6307\u9488\u6307\u7684\u662f\u8868\u5934\u4e2d\u6307\u5411\u6570\u636e\u533a\u7684\u94fe\u63a5\u5730\u5740) 2> 8\u5b57\u8282\u7528\u4e8e\u5b58\u50a8\u5df2\u7ecf\u5206\u914d\u7684\u957f\u5ea6\u5927\u5c0f,\u5b9e\u65f6\u8ffd\u8e2a\u5217\u8868\u7a7a\u95f4\u7684\u4f7f\u7528\u60c5\u51b5,\u5f53\u7a7a\u95f4\u4e0d\u8db3\u65f6,\u53ca\u65f6\u5206\u914d\u989d\u5916\u7a7a\u95f4 \u5217\u8868\u662f\u52a8\u6001\u7684,\u957f\u5ea6\u53ef\u53d8,\u53ef\u4ee5\u968f\u610f\u7684\u589e\u52a0\u3001\u5220\u51cf\u6216\u6539\u53d8\u5143\u7d20; \u5143\u7ec4\u662f\u9759\u6001\u7684,\u957f\u5ea6\u5927\u5c0f\u56fa\u5b9a,\u4e0d\u53ef\u4ee5\u5bf9\u5143\u7d20\u8fdb\u884c\u589e\u52a0\u3001\u5220\u51cf\u6216\u8005\u6539\u53d8\u64cd\u4f5c. \"\"\" >>> [] . __sizeof__ () 40 >>> () . __sizeof__ () 24 \"\"\" \u518d\u6b21\u8bf4\u660e:\u5217\u8868\u548c\u5143\u7956\u5b58\u50a8\u5143\u7d20,\u91c7\u7528\u7684\u662f\u5143\u7d20\u5916\u7f6e\u7684\u5f62\u5f0f,\u8fde\u7eed\u5b58\u50a8\u7684\u662f\u5143\u7d20\u7684\u5730\u5740(\u5373\u5bf9\u5b9e\u9645\u6570\u636e\u7684\u7d22\u5f15/\u5f15\u7528) \"\"\" \u5217\u8868\u5728\u6269\u5145\u7a7a\u95f4\u65f6\u5177\u5907 over-allocating \u673a\u5236.. \u5373\u6269\u5145\u5bb9\u91cf\u7684\u65f6\u5019\u4f1a\u591a\u5206\u914d\u4e00\u4e9b\u5b58\u50a8\u7a7a\u95f4.. \u6b64\u673a\u5236\u4f18\u5316\u4e86\u5b58\u50a8\u7ed3\u6784, \u907f\u514d\u6bcf\u6b21\u589e\u52a0\u5143\u7d20\u90fd\u8981\u91cd\u65b0\u5206\u914d\u5185\u5b58 >>> a = [] >>> a . __sizeof__ () # -- \u7a7a\u5217\u8868\u7684\u5b58\u50a8\u7a7a\u95f4\u4e3a40\u5b57\u8282 40 >>> a . append ([ 1 , 2 , 3 ]) >>> a . __sizeof__ () # -- \u52a0\u5165\u4e86\u5143\u7d20[1,2,3]\u4e4b\u540e,\u5217\u8868\u4e3a\u5176\u5206\u914d\u4e86\u53ef\u4ee5\u5b58\u50a84\u4e2a\u5143\u7d20\u7684\u7a7a\u95f4(72 - 40)/8 = 4 72 # -- \u6bcf\u4e2a\u7a7a\u95f48\u5b57\u8282,\u4e00\u5171\u67094\u4e2a,\u8fde\u7eed\u5b58\u50a8\u7684\u662f\u5bf9\u5b9e\u9645\u6570\u636e\u7684\u5f15\u7528(\u5185\u5b58\u5730\u5740) >>> a . append ( 4 ) >>> a . __sizeof__ () # -- \u7531\u4e8e\u4e4b\u524d\u5206\u914d\u4e86\u7a7a\u95f4,\u6240\u4ee5\u52a0\u5165\u5143\u7d204,\u5217\u8868\u7a7a\u95f4\u5927\u5c0f\u4e0d\u53d8 72 >>> a . append ( 4 ) >>> a . __sizeof__ () # -- \u540c\u4e0a 72 >>> a . append ( 5 ) >>> a . __sizeof__ () # -- \u540c\u4e0a,\u8fd9\u662f\u52a0\u5165\u7684\u7b2c\u56db\u4e2a\u5143\u7d20 72 >>> a . append ( 1.2 ) # -- \u52a0\u5165\u5143\u7d201.2,\u5217\u8868\u7684\u7a7a\u95f4\u4e0d\u8db3,\u6240\u4ee5\u53c8\u989d\u5916\u5206\u914d\u4e86\u53ef\u4ee5\u5b58\u50a84\u4e2a\u5143\u7d20\u7684\u7a7a\u95f4 >>> a . __sizeof__ () 104 >>> a . append ( \"12\" ) >>> a . __sizeof__ () 104 >>> a [[ 1 , 2 , 3 ], 4 , 4 , 5 , 1.2 , '12' ] >>> a . append ( \"12\" ) >>> a . append ( \"12\" ) >>> a . __sizeof__ () 104 >>> a . append ( \"12\" ) >>> a . __sizeof__ () 168 # -- \u5217\u8868\u6bcf\u6b21\u5206\u914d\u7a7a\u95f4\u7684\u5927\u5c0f\u9075\u5faa: 0, 4, 8, 16, 25, 35, 46, 58, 72, 88","title":"\u5b58\u50a8\u65b9\u5f0f\u7684\u5dee\u5f02"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/02_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%BA%8F%E5%88%97/#_14","text":"1> \u56e0\u4e3a\u5217\u8868over-allocating\u673a\u5236\u7684\u5b58\u5728,\u5143\u7ec4\u5360\u7528\u7684\u7a7a\u95f4\u80af\u5b9a\u662f\u5c0f\u4e8e\u5217\u8868\u7684.. 2> \u4e00\u822c\u6765\u8bf4,\u5783\u573e\u56de\u6536\u673a\u5236\u4f1a\u8fdb\u884c\u5185\u5b58\u56de\u6536\u7ed9OS,\u4f46 python\u5728\u540e\u53f0\u4f1a\u5bf9\u9759\u6001\u6570\u636e\u505a\u4e00\u4e9b\u8d44\u6e90\u7f13\u5b58 ,\u6bd4\u5982\u5143\u7956. \u5143\u7956\u7684\u7a7a\u95f4\u5927\u5c0f\u56fa\u5b9a,\u672c\u8d28\u4e0a\u4e5f\u662f\u4e00\u4e2aarray,\u4f46Python \u7684 tuple \u505a\u4e86\u8bb8\u591a\u4f18\u5316.. \u5982\u679c\u5b83\u4e0d\u88ab\u4f7f\u7528\u5e76\u4e14\u5360\u7528\u7a7a\u95f4\u4e0d\u5927\u65f6,Python \u4f1a\u5c06\u5176\u7f13\u5b58\u5230\u5185\u90e8\u7684\u4e00\u4e2afree list(\u7a7a\u95f2\u5217\u8868)\u4e2d. \u8fd9\u6837,\u4e0b\u6b21\u6211\u4eec\u518d\u521b\u5efa\u540c\u6837\u5927\u5c0f\u7684\u5143\u7ec4\u65f6,Python \u5c31\u53ef\u4ee5\u4e0d\u7528\u518d\u5411\u64cd\u4f5c\u7cfb\u7edf\u53d1\u51fa\u8bf7\u6c42,\u53bb\u7533\u8bf7\u5185\u5b58. \u800c\u662f\u53ef\u4ee5\u76f4\u63a5\u5206\u914d\u7f13\u5b58\u7684\u5185\u5b58\u7a7a\u95f4,\u63d0\u9ad8\u7a0b\u5e8f\u7684\u8fd0\u884c\u6548\u7387... 3> \u82e5\u60f3\u589e\u52a0\u5220\u9664\u6539\u53d8\u5143\u7d20,\u5217\u8868\u663e\u7136\u66f4\u4f18.. \u56e0\u4e3a\u5143\u7956\u9700\u8981\u901a\u8fc7\u5efa\u7acb\u4e00\u4e2a\u65b0\u7684\u5143\u7956\u6765\u5b9e\u73b0.. >>> a = ( 1 , 2 , 3 ) >>> id ( a ) 140324726613952 >>> del a >>> b = ( 1 , 2 , 3 ) >>> id ( b ) 140324726605952 >>> c = ( 1 , 2 , 3 ) >>> id ( c ) 140324726600768 # -- \u53ef\u4ee5\u770b\u5230\u56e0\u4e3apython\u8d44\u6e90\u7f13\u5b58\u7684\u5b58\u5728,\u521d\u59cb\u5316\u76f8\u540c\u6570\u636e\u7684\u5143\u7956\u8981\u6bd4\u5217\u8868\u5feb\u7684\u591a!! # -- \u4f7f\u7528timeit\u4f1a\u81ea\u52a8\u5173\u6389\u5783\u573e\u56de\u6536\u673a\u5236,\u8ba9\u7a0b\u5e8f\u7684\u8fd0\u884c\u66f4\u52a0\u72ec\u7acb,\u65f6\u95f4\u8ba1\u7b97\u66f4\u52a0\u51c6\u786e One_Piece @DCdeMacBook - Air ~ % python3 - m timeit 'x=[1,2,3,4,5,6]' 5000000 loops , best of 5 : 78.3 nsec per loop One_Piece @DCdeMacBook - Air ~ % python3 - m timeit 'x=(1,2,3,4,5,6)' 20000000 loops , best of 5 : 13.6 nsec per loop","title":"\u6027\u80fd\u5dee\u5f02"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/02_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%BA%8F%E5%88%97/#_15","text":"1> \u82e5\u5b58\u50a8\u7684\u6570\u636e\u548c\u6570\u91cf\u4e0d\u53d8 , \u7528\u5143\u7ec4.. \u6bd4\u5982\u4f60\u6709\u4e00\u4e2a\u51fd\u6570,\u9700\u8981\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u5730\u70b9\u7684\u7ecf\u7eac\u5ea6,\u7136\u540e\u76f4\u63a5\u4f20\u7ed9\u524d\u7aef\u6e32\u67d3. 2> \u82e5\u5b58\u50a8\u7684\u6570\u636e\u6216\u6570\u91cf\u662f\u53ef\u53d8\u7684, \u7528\u5217\u8868.. \u6bd4\u5982\u793e\u4ea4\u5e73\u53f0\u4e0a\u7684\u4e00\u4e2a\u65e5\u5fd7\u529f\u80fd,\u662f\u7edf\u8ba1\u4e00\u4e2a\u7528\u6237\u5728\u4e00\u5468\u4e4b\u5185\u770b\u4e86\u54ea\u4e9b\u7528\u6237\u7684\u5e16\u5b50.","title":"\u5e94\u7528\u573a\u666f"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/02_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%BA%8F%E5%88%97/#python","text":"https://note-rtd.readthedocs.io/en/latest/source/2_\u8bed\u8a00/Python/\u6df1\u62f7\u8d1d\u548c\u6d45\u62f7\u8d1d/_content.html","title":"python\u7684\u6df1\u6d45\u62f7\u8d1d"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/02_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%BA%8F%E5%88%97/#_16","text":">>> a = [ 1 , 2.1 ,[ 3 ]] >>> b = a # -- Python\u4e2d\u5bf9\u8c61\u7684\u8d4b\u503c\u90fd\u662f\u5728\u8fdb\u884c\u5bf9\u8c61\u5f15\u7528(\u5185\u5b58\u5730\u5740)\u4f20\u9012,\u5b9e\u9645\u4e0aa\u548cb\u6307\u5411\u7684\u90fd\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61. >>> a [ 1 ] = 4 # -- \u4fee\u6539a\u7684\u540c\u65f6,b\u4e5f\u4f1a\u540c\u6837\u88ab\u4fee\u6539 >>> a [ 1 , 4 , [ 3 ]] >>> b [ 1 , 4 , [ 3 ]] >>> a is b True","title":"\u76f4\u63a5\u8d4b\u503c"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/02_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%BA%8F%E5%88%97/#_17","text":"\u9488\u5bf9\u53ef\u53d8\u5bf9\u8c61(\u4ee5\u5217\u8868\u4e3a\u4f8b)\u7684\u6d45\u62f7\u8d1d, b = a[:] , \u4ec5\u4ec5\u662f\u6700\u9876\u5c42\u5f00\u8f9f\u4e86(\u5217\u8868\u5185\u6bcf\u4e2a\u5143\u7d20\u7684\u5f15\u7528\u8ba1\u6570\u90fd\u4f1a\u53d8\u4e3a2). \u901a\u8fc7a\u5bf9\u5217\u8868\u5185\u7684\u5143\u7d20(\u4e0d\u7528\u7ba1\u6b64\u5143\u7d20\u662f\u53ef\u53d8\u5bf9\u8c61\u8fd8\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61)\u8fdb\u884c\u91cd\u65b0\u8d4b\u503c,\u4e0d\u4f1a\u5f71\u54cdb (\u56e0\u4e3a\u5217\u8868\u5185\u5143\u7d20\u7684\u5f15\u7528\u8ba1\u6570\u4e0d\u4e3a0)\u53cd\u4e4b\u540c\u7406.. \u82e5\u64cd\u4f5c(\u589e\u5220\u6539)\u5217\u8868\u4e2d\u7684\u53ef\u53d8\u5bf9\u8c61..a\u3001b\u90fd\u4f1a\u53d7\u5230\u5f71\u54cd.. \u53ef\u4ee5\u4ea7\u751f\u6d45\u62f7\u8d1d\u7684\u64cd\u4f5c\u6709\u4ee5\u4e0b\u51e0\u79cd: 1> \u4f7f\u7528\u5207\u7247\u64cd\u4f5c ( \u51c6\u786e\u70b9\u8bf4\u7684\u662f\u5217\u8868\u5207\u7247!! \u5b57\u7b26\u4e32\u4e0d\u5b58\u5728\u62f7\u8d1d\u4e00\u8bf4,\u5143\u7956\u5207\u7247\u4e5f\u4e0d\u4f1a\u521b\u5efa\u65b0\u5bf9\u8c61.. ) 2> \u4f7f\u7528\u5de5\u5382\u51fd\u6570\uff08list/dir/set\uff09-- \u5373\u6570\u636e\u672c\u8eab\u7684\u6784\u9020\u5668 3> \u4f7f\u7528 copy \u6a21\u5757\u4e2d\u7684 copy() \u51fd\u6570 >>> a = [ 1 , 2 ,[ 3 ]] >>> import copy >>> b = copy . copy ( a ) # -- \u6d45\u62f7\u8d1d\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61,\u7136\u540e\u628a\u751f\u6210\u7684\u65b0\u5bf9\u8c61\u8d4b\u503c\u7ed9\u65b0\u53d8\u91cf >>> b is a # -- 1\u30012\u3001[3,]\u8fd9\u4e09\u4e2a\u5bf9\u8c61\u5e76\u6ca1\u6709\u521b\u5efa\u65b0\u7684 # \u65b0\u7684\u5bf9\u8c61\u662f\u6307 copy \u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u5217\u8868\u5bf9\u8c61b # \u8fd9\u6837a\u548cb\u8fd9\u4e24\u4e2a\u53d8\u91cf\u6307\u5411\u7684\u5217\u8868\u5bf9\u8c61\u5c31\u4e0d\u662f\u540c\u4e00\u4e2a False >>> a [ 0 ] is b [ 0 ] # -- \u4e24\u4e2a\u5217\u8868\u5bf9\u8c61\u91cc\u9762\u7684\u5143\u7d20\u4f9d\u7136\u662f\u6309\u5f15\u7528\u4f20\u9012\u7684 # \u6240\u4ee5a\u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5bf9\u8c61\u548cb\u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5bf9\u8c61\u662f\u540c\u4e00\u4e2a True \"\"\" \u6572\u9ed1\u677f,\u53ef\u53d8\u4e0e\u4e0d\u53ef\u53d8\u6307\u7684\u662f\u5bb9\u5668\u91cc\u9762\u7684\u5143\u7d20\u4e2a\u6570\u4ee5\u53ca\u5143\u7d20\u7684\u5185\u5b58\u5730\u5740\u80fd\u4e0d\u80fd\u6539\u53d8.. \u5373\u9664\u4e86\u4e0d\u80fd\u5bf9\u4e0d\u53ef\u53d8\u7684\u5bb9\u5668\u5bf9\u8c61(\u6bd4\u5982\u5143\u7956)\u91cc\u9762\u7684\u5143\u7d20\u8fdb\u884c\u91cd\u65b0\u8d4b\u503c\u5916(\u82e5\u8d4b\u503c,\u5143\u7d20ID\u53d8).\u5176\u4f59\u60c5\u51b5\u7686\u53ef\u91cd\u65b0\u8d4b\u503c. \"\"\" >>> a [ 0 ] = 4 # -- \u4fee\u6539a\u5217\u8868\u4e2d\u7684\u4e0d\u53ef\u53d8\u5bf9\u8c61(\u91cd\u65b0\u8d4b\u503c),b\u5217\u8868\u4e0d\u4f1a\u53d7\u5230\u5f71\u54cd >>> b [ 1 ] = 5 # -- \u540c\u7406,\u4fee\u6539b\u5217\u8868\u4e2d\u7684\u4e0d\u53ef\u53d8\u5bf9\u8c61(\u91cd\u65b0\u8d4b\u503c),a\u5217\u8868\u4e0d\u4f1a\u53d7\u5230\u5f71\u54cd >>> a [ 4 , 2 , [ 3 ]] >>> b [ 1 , 5 , [ 3 ]] >>> a [ 2 ] . append ( 6 ) # -- \u4fee\u6539\u5217\u8868\u4e2d\u7684\u53ef\u53d8\u5bf9\u8c61,a\u3001b\u90fd\u4f1a\u53d7\u5230\u5f71\u54cd >>> b [ 2 ] . append ( 7 ) >>> a [ 4 , 2 , [ 3 , 6 , 7 ]] >>> b [ 1 , 5 , [ 3 , 6 , 7 ]] >>> a [ 2 ] = 111 # -- \u91cd\u65b0\u8d4b\u503c >>> a [ 4 , 2 , 111 ] >>> b [ 1 , 5 , [ 3 , 6 , 7 ]] # -- \u4e3e\u4e2a\u5b57\u5178\u7684\u4f8b\u5b50 >>> my_dict = { 'a' : 1 , 'b' :[ 1 , 2 , 3 ]} >>> a = copy . copy ( my_dict ) >>> my_dict [ 'b' ] . append ( 4 ) >>> a { 'a' : 1 , 'b' : [ 1 , 2 , 3 , 4 ]}","title":"\u6d45\u62f7\u8d1d"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/02_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%BA%8F%E5%88%97/#_18","text":"\u6df1\u62f7\u8d1d\u9664\u4e86\u9876\u5c42\u62f7\u8d1d\u4ee5\u5916,\u8fd8\u5bf9\u5b50\u5143\u7d20\u8fdb\u884c\u4e86\u62f7\u8d1d,\u672c\u8d28\u662f \u9012\u5f52\u6d45\u62f7\u8d1d \uff01 >>> import copy >>> a = [ 1 , ( 1 , 2 ), ( 2 , [ 3 ]), [ 4 ]] >>> b = copy . deepcopy ( a ) >>> a is b False # -- \u6ce8\u610f\u4e86,\u5bf9\u8c61\u4e2d\u7684\u5143\u7d20,\u82e5\u6574\u4f53\u90fd\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61,\u5c31\u4f1a\u4f7f\u7528\u5f15\u7528,\u56e0\u4e3a\u6ca1\u6709\u4e3a\u6b64\u751f\u6210\u65b0\u5bf9\u8c61\u7684\u5fc5\u8981 >>> a [ 0 ] is b [ 0 ] True >>> a [ 1 ] is b [ 1 ] True >>> a [ 2 ] is b [ 2 ] # -- (2, [3])\u867d\u662f\u5143\u7956,\u4f46\u91cc\u9762\u5305\u542b\u6709\u53ef\u53d8\u7684\u5217\u8868. False >>> a [ 3 ] is b [ 3 ] False","title":"\u6df1\u62f7\u8d1d"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/02_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%BA%8F%E5%88%97/#_19","text":"\u5bb9\u5668\u7c7b\u578b: \u5217\u8868\u3001\u5143\u7ec4\u3001\u5b57\u5178\u3001\u96c6\u5408 \u539f\u5b50\u7c7b\u578b: \u6307\u6240\u6709\u7684\u6570\u503c\u7c7b\u578b\u4ee5\u53ca\u5b57\u7b26\u4e32 1> \u5bf9\u4e8e\u975e\u5bb9\u5668\u7c7b\u578b\u662f\u6ca1\u6709\u62f7\u8d1d\u8fd9\u4e2a\u8bf4\u6cd5\u7684,\u65e0\u8bba\u662f\u6d45\u62f7\u8d1d\u8fd8\u662f\u6df1\u62f7\u8d1d\u90fd\u4e0d\u4f1a\u521b\u5efa\u65b0\u7684\u5bf9\u8c61 2> \u82e5\u5143\u7956\u4e2d\u53ea\u5305\u542b\u539f\u5b50\u7c7b\u578b\u5bf9\u8c61, \u6df1\u6d45\u62f7\u8d1d\u90fd\u4e0d\u4f1a\u521b\u5efa\u65b0\u7684\u5bf9\u8c61 \u5143\u7ec4\u672c\u8eab\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61, \u5982\u679c\u5143\u7ec4\u91cc\u7684\u5143\u7d20\u4e5f\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61, \u5c31\u6ca1\u6709\u8fdb\u884c\u62f7\u8d1d\u7684\u5fc5\u8981\u4e86.\u5b9e\u6d4b\u5982\u679c\u5143\u7ec4\u91cc\u9762\u7684\u5143\u7d20\u662f\u53ea\u5305\u542b\u539f\u5b50\u7c7b\u578b\u5bf9\u8c61\u7684\u5143\u7ec4, \u5219\u4e5f\u5c5e\u4e8e\u8fd9\u4e2a\u8303\u7574. >>> b = copy . copy ( a ) # -- \u975e\u5bb9\u5668\u7c7b\u578b(\u5982\u6570\u5b57\u3001\u5b57\u7b26\u4e32\u3001\u548c\u5176\u4ed6'\u539f\u5b50'\u7c7b\u578b\u7684\u5bf9\u8c61)\u662f\u6ca1\u6709\u62f7\u8d1d\u8fd9\u4e2a\u8bf4\u6cd5\u7684 >>> c = copy . deepcopy ( a ) >>> a is b True >>> a is c True >>> a = ( 1 , 2 , 3 ) # -- \u5143\u7956\u4e2d\u53ea\u5305\u542b\u539f\u5b50\u7c7b\u578b\u5bf9\u8c61 \u6df1\u6d45\u62f7\u8d1d\u90fd\u4e0d\u4f1a\u521b\u5efa\u65b0\u7684\u5bf9\u8c61 >>> b = copy . copy ( a ) >>> c = copy . deepcopy ( a ) >>> a is b True >>> a is c True >>> a = ( 1 , 2 ,( 3 ,)) # -- \u5143\u7ec4\u91cc\u7684\u5143\u7d20\u4e5f\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61 \u6df1\u6d45\u62f7\u8d1d\u90fd\u4e0d\u4f1a\u521b\u5efa\u65b0\u7684\u5bf9\u8c61 >>> b = copy . copy ( a ) >>> c = copy . deepcopy ( a ) >>> a is b True >>> a is c True \u5143\u7956\u62f7\u8d1d\u771f\u7684\u9ebb\u70e6.. \u8fd9\u6837\u8bb0, \u5143\u7956\u65e0\u8bba\u600e\u4e48\u5199,\u6d45\u62f7\u8d1d\u90fd\u4e0d\u4f1a\u521b\u5efa\u65b0\u5bf9\u8c61; \u89c2\u5bdf\u6574\u4e2a\u5143\u7956,\u9012\u5f52\u5305\u542b\u7684\u6709\u53ef\u53d8\u5bf9\u8c61\u65f6,\u6df1\u62f7\u8d1d\u4f1a\u521b\u5efa\u65b0\u7684\u5bf9\u8c61.. \u53e6\u5916\u5143\u7956\u5207\u7247\u4e0d\u4f1a\u4ea7\u751f\u65b0\u5bf9\u8c61.. >>> a = ( 1 , 2 ,[ 3 ]) # -- \u6df1\u62f7\u8d1d\u6210\u529f >>> b = copy . copy ( a ) >>> c = copy . deepcopy ( a ) >>> a is b True >>> a is c False >>> d = a [:] # -- \u5143\u7956\u5207\u7247\u4e0d\u4f1a\u4ea7\u751f\u65b0\u5bf9\u8c61 >>> d is a True","title":"\u7279\u6b8a\u60c5\u51b5!!"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/02_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%BA%8F%E5%88%97/#_20","text":"1> x = [[1]]*3 x[0][0] = 5 x --> [[5],[5],[5]] >>> x = [[ 1 ]] * 3 # -- \u5185\u5b58\u5730\u5740\u88ab\u62f7\u8d1d\u4e86\uff01 >>> x [[ 1 ], [ 1 ], [ 1 ]] >>> assert x [ 0 ] is x [ 1 ] is x [ 2 ] >>> x [ 0 ] = 5 >>> x [ 5 , [ 1 ], [ 1 ]] >>> x [ 1 ][ 0 ] = 5 >>> x [ 5 , [ 5 ], [ 5 ]] 2> x\u4e3a\u975e\u7a7a\u5217\u8868,\u6267\u884c\u8bed\u53e5 y = x[:] \u540e, id(x[0]) == id(y[0]) \u7684\u503c\u4e3a True. x[:] \u662fx\u5217\u8868\u7684\u6d45\u62f7\u8d1d, x\u4e0ey\u7684id\u80af\u5b9a\u4e0d\u540c, \u4f46list\u662f\u590d\u6742\u7684\u6570\u636e\u7c7b\u578b,\u91cc\u5c42\u5143\u7d20\u7684id\u5b83\u4eec\u662f\u4e00\u81f4\u7684. >>> x = [ 1 , 2 ,[ 3 , 4 , 5 ], 6 ] >>> y = x [: 3 ] >>> y [ 0 ] = 11 >>> y [ 2 ] . extend ([ 55 ]) >>> y [ 11 , 2 , [ 3 , 4 , 5 , 55 ]] >>> x [ 1 , 2 , [ 3 , 4 , 5 , 55 ], 6 ] >>> del x [: 3 ] >>> x [ 6 ] >>> y [ 11 , 2 , [ 3 , 4 , 5 , 55 ]]","title":"\u5e94\u7528"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/03_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%93%88%E5%B8%8C/","text":"\u7ecf\u5b9e\u9a8c,\u5e8f\u5217\u7684\u65b9\u6cd5, \u957f\u5927\u5c0f \u548c\u6392\u7ffb \u4e8c\u5143\u7956 \u4e09\u8f6c\u6362 zip \u4ee5\u53ca in \u64cd\u4f5c\u7b26 \u5b57\u5178\u548c\u5e8f\u5217\u90fd\u53ef\u4ee5\u7528!!! \u7279\u522b\u9700\u8981\u6ce8\u610f\u7684\u662f , \u5177\u5907\u54c8\u5e0c\u7279\u6027\u7684\u5b57\u5178\u548c\u96c6\u5408\u4e0d\u80fd\u4f7f\u7528\u4e0b\u6807\u8fdb\u884c\u7d22\u5f15(\u5373\u4e0d\u80fd\u5207\u7247).. \u5b57\u5178\u904d\u5386\u65f6\u53d6\u5f97\u7684\u662f\u952e! \u5b57\u5178 \u00b6 \u521b\u5efa\u76847\u79cd\u65b9\u5f0f \u00b6 {}\u3001dict\u3001formkeys \u6ce8\u610f: \u5b57\u5178\u7684\u952e\u5fc5\u987b\u662f\u53ef\u54c8\u5e0c\u7684(\u4ece\u91cc\u5230\u5916\u90fd\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61)!!! \u54ea\u6015\u5143\u7956\u5185\u5305\u542b\u53ef\u53d8\u5bf9\u8c61\u4e5f\u4e0d\u884c.. d = {1: 123} d[1.0] = 234 d[True] = 345 \u4e09\u8005\u662f\u7b49\u4ef7\u7684.. 1 > { 'one' : 1 , 'tow' : 2 , 'three' : 3 } {} # -- \u521b\u5efa\u7a7a\u5b57\u5178(\u63a8\u8350) 2 > dict ( one = 1 , two = 2 , three = 3 ) # -- \u6ce8\u610f\u6b64\u65b9\u5f0f\u952e\u4e0d\u80fd\u52a0\u5f15\u53f7 3 > dict ({ 'one' : 1 , 'tow' : 2 , 'three' : 3 }) 4 > dict ([( 'one' , 1 ),( 'two' , 2 ),( 'three' , 3 )]) dict ((( 'one' , 1 ),( 'two' , 2 ),( 'three' , 3 ))) 5 > dict ( zip ([ 'one' , 'two' , 'three' ],[ 1 , 2 , 3 ])) 6 > dict . fromkeys ( \u5e8f\u5217 , \u6bcf\u4e2a\u952e\u7684\u521d\u59cb\u503c ) # -- \u9ed8\u8ba4\u521d\u59cb\u503c\u4e3aNone 7 > \u5b57\u5178\u751f\u6210\u5f0f keys = [ 'names' , 'age' , 'sex' ] values = [ 'egon' , 18 , 'male' ] res = { k : v for k , v in zip ( keys , values )} \"\"\" -- fromkeys \"\"\" >>> v = dict . fromkeys ([ 'k1' , 'k2' ],[]) >>> v { 'k1' : [], 'k2' : []} >>> v [ 'k1' ] is v [ 'k2' ] True >>> v [ 'k1' ] . append ( 666 ) >>> v { 'k1' : [ 666 ], 'k2' : [ 666 ]} >>> v [ 'k1' ] = 777 >>> v { 'k1' : 777 , 'k2' : [ 666 ]} data = [ 12 , 5 , 6 , 4 , 6 , 5 , 5 , 7 ] print ( dict . fromkeys ( data , 0 )) # -- {12: 0, 5: 0, 6: 0, 4: 0, 7: 0} \u589e\u52a0\u3001\u4fee\u6539\u3001\u67e5\u627e \u00b6 \u67e5\u627e -- key\u3001values\u3001items\u3001get\u3001 setdefault \u3001my_dict[key\u503c] \u589e\u52a0 -- \u76f4\u63a5\u8d4b\u503c \u3001update\u3001setdefault \u4fee\u6539 -- update \u3001\u76f4\u63a5\u8d4b\u503c\u8986\u76d6 key()\u3001values()\u3001items()\u7686\u8fd4\u56deiterable\u53ef\u8fed\u4ee3\u5bf9\u8c61.. price.values() \u7b49\u540c\u4e8e dict.values(price) \u5176\u4f59\u540c\u7406 get() \u82e5\u952e\u4e0d\u5b58\u5728,\u9ed8\u8ba4\u8fd4\u56deNone,\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u8fd4\u56de\u503c my_dict.get(12,'\u6728\u6709') \u589e\u6dfb\u952e\u503c\u5bf9\u7684\u4e09\u79cd\u65b9\u5f0f: 1> setdefault() \u7c7b\u4f3c\u4e8eget(),\u533a\u522b\u5728\u4e8e\u82e5\u952e\u4e0d\u5b58\u5728,\u8bbe\u7f6e\u7684\u8fd4\u56de\u503c\u4f1a\u4f5c\u4e3avalue\u81ea\u52a8\u6dfb\u52a0\u952e\u503c\u5bf9. 2> \u76f4\u63a5\u7ed9\u5b57\u5178\u8d4b\u503c, \u82e5\u8be5\u952e\u5b58\u5728,\u5219\u6539\u5199\u952e\u5bf9\u5e94\u7684\u503c; \u82e5\u8be5\u952e\u4e0d\u5b58\u5728, \u5219\u7ed9\u5b57\u5178\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u952e\u503c\u5bf9.. 3> update\u66f4\u65b0\u64cd\u4f5c\u540c\u7406,\u82e5\u952e\u4e0d\u5b58\u5728\u5219\u65b0\u589e\u952e\u503c\u5bf9 my_dict . keys () # -- \u8fd4\u56de\u5b57\u5178\u4e2d\u7684\u952e my_dict . values () # -- \u8fd4\u56de\u5b57\u5178\u4e2d\u7684\u503c my_dict . items () # -- \u8fd4\u56de\u5b57\u5178\u4e2d\u7684\u952e\u503c\u5bf9(\u9879) \"\"\" -- update \u66f4\u65b0\u5b57\u5178\u4e2d\u6307\u5b9a\u952e\u7684\u503c,\u82e5\u952e\u4e0d\u5b58\u5728\u5219\u65b0\u589e\u952e\u503c\u5bf9 my_dict.update({'\u952e':\u503c}) my_dict.update(\u952e=\u503c) \"\"\" >>> a = { 'k1' : 10 , 'k2' : 20 } >>> a . update ( k1 = 80 ) # -- \u6ce8\u610f\u6b64\u65b9\u5f0f\u66f4\u65b0,\u952e\u4e0d\u9700\u8981\u52a0\u5f15\u53f7 >>> a { 'k1' : 80 , 'k2' : 20 } # -- 'k1'\u7684\u503c\u66f4\u65b0\u4e3a80 >>> a . update ({ 'k1' : 30 }) >>> a { 'k1' : 30 , 'k2' : 20 } # -- 'k1'\u7684\u503c\u66f4\u65b0\u4e3a30 >>> a . update ({ 'k3' : 50 }) # -- \u5b57\u5178\u4e2d\u6ca1\u6709\u540d\u4e3a'k3'\u7684\u952e,\u5219\u65b0\u589e\u952e\u503c\u5bf9 >>> a { 'k1' : 30 , 'k2' : 20 , 'k3' : 50 } \"\"\" -- setdefault \"\"\" >>> a . setdefault ( 'k1' , 0 ) 30 >>> a { 'k1' : 30 , 'k2' : 20 , 'k3' : 50 } >>> a . setdefault ( 'k4' , 0 ) 0 >>> a { 'k1' : 30 , 'k2' : 20 , 'k3' : 50 , 'k4' : 0 } \"\"\" -- \u76f4\u63a5\u8d4b\u503c \"\"\" >>> a [ 'age' ] = 18 >>> a { 'k1' : 30 , 'k2' : 20 , 'k3' : 50 , 'k4' : 0 , 'age' : 18 } >>> a [ 'age' ] = 22 >>> a { 'k1' : 30 , 'k2' : 20 , 'k3' : 50 , 'k4' : 0 , 'age' : 22 } \u5220\u9664\u3001\u590d\u5236 \u00b6 \u5220\u9664 -- pop\u3001popitem\u3001del\u3001clear \u590d\u5236 -- copy \"\"\" \u2605 --\u5220\u9664 \"\"\" my_dict . pop ( '\u6307\u5b9a\u952e' ) # -- \u6307\u5b9a\u952e,\u5220\u9664\u5bf9\u5e94\u7684\u952e\u503c\u5bf9,\u8fd4\u56dekey\u5bf9\u5e94\u7684value,\u82e5\u6307\u5b9a\u952e\u4e0d\u5b58\u5728,\u62a5\u9519 my_dict . popitem () # -- \u8fd4\u56de\u5220\u9664\u7684\u952e\u503c\u5bf9(py3.6\u4e4b\u524d\u662f\u968f\u673a\u5220\u9664,py3.6\u4e4b\u540e\u662f\u79fb\u9664\u6700\u540e\u7684) del my_dict [ '\u6307\u5b9a\u952e' ] # -- \u6307\u5b9a\u952e,\u5220\u9664\u5bf9\u5e94\u7684\u952e\u503c\u5bf9 my_dict . clear () # -- \u6e05\u7a7a\u5b57\u5178 >>> from random import randint >>> d1 = { k : randint ( 1 , 10 ) for k in 'abcd' } # -- \u5b57\u5178\u751f\u6210\u5f0f >>> d1 { 'a' : 7 , 'b' : 3 , 'c' : 5 , 'd' : 6 } >>> d1 . pop ( 'b' ) 3 >>> d1 { 'a' : 7 , 'c' : 5 , 'd' : 6 } >>> d1 . popitem () ( 'd' , 6 ) >>> d1 { 'a' : 7 , 'c' : 5 } >>> del d1 [ 'c' ] >>> d1 { 'a' : 7 } >>> d1 . clear () >>> d1 {} \"\"\" \u2605 --\u590d\u5236 \"\"\" my_dict . copy () # -- \u590d\u5236\u5b57\u5178,\u662f\u6d45\u62f7\u8d1d!! >>> d2 = { 'a' : [ 1 , 2 , 3 ], 'b' : 'one' } >>> d3 = d2 . copy () >>> d2 is d3 False >>> d3 { 'a' : [ 1 , 2 , 3 ], 'b' : 'one' } >>> d2 [ 'b' ] = 5 >>> d2 [ 'a' ] . append ( 6 ) >>> d2 { 'a' : [ 1 , 2 , 3 , 6 ], 'b' : 5 } >>> d3 { 'a' : [ 1 , 2 , 3 , 6 ], 'b' : 'one' } \u5b57\u5178\u5408\u5e76 \u00b6 \u4e09\u79cd \u5408\u5e76\u65b9\u5f0f: 1> dict(dic_1.items()+dic_2.items()) 2> dict(dic_1,**dic2) \u7b49\u540c\u4e8e dict(dic_1,a=10,b=20) dict(dic_1,dic_2) \u62a5\u9519 3> dic_1.update(dic_2) \u5b57\u5178\u4ea4\u96c6\u3001\u5dee\u96c6\u3001\u5e76\u96c6 \u00b6 \u8be5\u64cd\u4f5c\u4ec5\u9650\u4e8ekeys()\u548citems()!!! & # -- \u4ea4\u96c6 - # -- \u5dee\u96c6 | # -- \u5e76\u96c6 >>> a = { 'x' : 1 , 'y' : 2 , 'z' : 3 } >>> b = { 'w' : 10 , 'x' : 11 , 'y' : 2 } >>> a . keys () & b . keys () { 'y' , 'x' } >>> a . keys () - b . keys () { 'z' } >>> a . keys () | b . keys () { 'y' , 'x' , 'z' , 'w' } >>> a . items () & b . items () {( 'y' , 2 )} >>> a . items () - b . items () # -- a\u6709\u7684,b\u6ca1\u6709. {( 'z' , 3 ), ( 'x' , 1 )} >>> a . items () | b . items () {( 'w' , 10 ), ( 'x' , 11 ), ( 'z' , 3 ), ( 'x' , 1 ), ( 'y' , 2 )} \u5bf9\u5b57\u5178\u904d\u5386 \u00b6 \u4f46\u51e1\u5bf9\u5b57\u5178\u8fdb\u884c\u5faa\u73af,\u5faa\u73af\u7684\u662f\u5b83\u7684key\u503c >>> price = { 'a' : 205.34 , 'b' : 612.98 , 'c' : 45.23 } >>> min ( price ) # -- \u4f1a\u5bf9\u5b57\u5178\u904d\u5386 'a' >>> max ( price ) 'c' >>> sorted ( price ) [ 'a' , 'b' , 'c' ] >>> min ( price , key = lambda k : price [ k ]) 'c' >>> max ( price , key = lambda k : price [ k ]) 'b' >>> sorted ( price , key = lambda k : price [ k ]) [ 'c' , 'a' , 'b' ] >>> x = { 1 : 3 , 2 : 4 } >>> sum ( x ) 3 >>> sum ( x . values ()) 7 >>> my_dict = { 'a' : 24 , 'g' : 52 , 'i' : 12 , 'k' : 33 } >>> dict ( sorted ( my_dict . items (), key = lambda x : x [ 1 ])) { 'i' : 12 , 'a' : 24 , 'k' : 33 , 'g' : 52 } >>> sorted ( my_dict ) [ 'a' , 'g' , 'i' , 'k' ] >>> x = { i : str ( i + 3 ) for i in range ( 3 )} >>> '' . join ( x . values ()) '345' >>> '' . join ( map ( str , x )) '012' \u96c6\u5408 \u00b6 \u521b\u5efa\u3001\u589e\u5220\u6539 \u00b6 \u96c6\u5408\u548c\u5b57\u5178\u90fd\u662f\u4e0d\u80fd\u6839\u636e\u4e0b\u6807\u6765\u83b7\u53d6\u548c\u4fee\u6539\u6570\u636e\u7684 set() frozenset add update remove discard clear set () # -- \u521b\u5efa\u7a7a\u96c6\u5408 { \"a\" , \"b\" , \"c\" } \u3001 set ([ \"a\" , \"b\" , \"c\" ]) # -- \u521b\u5efa\u96c6\u5408 frozenset ({ 1 , 2 , 3 , 4 }) # -- \u521b\u5efa\u4e0d\u53ef\u53d8\u96c6\u5408 my_set . add ( 'abc' ) # -- \u4e3a\u96c6\u5408\u6dfb\u52a0\u5143\u7d20 my_set1 . update ( my_set2 ) # -- \u6dfb\u52a0\u65b0\u7684\u5143\u7d20\u6216\u96c6\u5408\u5230\u5f53\u524d\u96c6\u5408\u4e2d my_set . remove ( 'abc' ) # -- \u5220\u9664\u7ed3\u5408\u4e2d\u5df2\u77e5\u5143\u7d20,\u82e5\u5143\u7d20\u4e0d\u5b58\u5728,\u62a5\u9519 my_set . discard ( 'abc' ) # -- \u5220\u9664\u7ed3\u5408\u4e2d\u5df2\u77e5\u5143\u7d20,\u82e5\u5143\u7d20\u4e0d\u5b58\u5728,\u5ffd\u7565 my_set . clear () # -- \u6e05\u7a7a\u96c6\u5408 \"\"\" -- update \"\"\" >>> x = { 1 , 2 , 3 } >>> y = { 2 , 3 , 4 , 5 } >>> x . update ( y ) >>> x { 1 , 2 , 3 , 4 , 5 } >>> y { 2 , 3 , 4 , 5 } >>> x . update ( '6778' ) # -- \u4f1a\u8fdb\u884c\u904d\u5386,\u7ed3\u679c\u4f1a\u81ea\u52a8\u53bb\u91cd,\u5373\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u5177\u6709\u552f\u4e00\u6027 >>> x { 1 , 2 , 3 , 4 , 5 , '8' , '7' , '6' } >>> x . update ({ '6778' }) >>> x { 1 , 2 , 3 , 4 , 5 , '7' , '6' , '8' , '6778' } \u96c6\u5408\u7684\u8fd0\u7b97\u7b26 \u00b6 A<B -- \u5224\u65ad&NBSP;\u662f\u5426\u662fB\u7684 \u5b50\u96c6 {1,2,3,4}-{3,4,5,6} -- {1,2} \u5dee\u96c6 \u53d6\u4e00\u4e2a\u96c6\u5408\u4e2d\u53e6\u4e00\u4e2a\u96c6\u5408\u6ca1\u6709\u7684\u5143\u7d20 {1,2,3}|{3,4,5} -- {1,2,3,4,5} \u5e76\u96c6 {1,2,3}&{2,3,4} -- {2,3} \u4ea4\u96c6 {1,2,3,4,5}^{4,5,6,7} -- {1,2,3,6,7} \u5bf9\u79f0\u5dee\u96c6 \u5b57\u5178\u96c6\u5408\u7684\u9ad8\u6027\u80fd \u00b6 \u5b57\u5178\u7684\u5e95\u5c42\u662f\u501f\u52a9 \u54c8\u5e0c\u8868 \u5b9e\u73b0\u7684.. \u6240\u4ee5 \u5b57\u5178\u7684\u6dfb\u52a0\u3001\u5220\u9664\u3001\u67e5\u627e\u5143\u7d20\u7b49\u64cd\u4f5c\u7684\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(1). \u5f53\u7136\u8fd8\u662f\u8981\u77e5\u9053, \u5728 \u54c8\u5e0c\u4e0d\u5747\u5300 \u7684\u60c5\u51b5\u4e0b, \u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n), \u4f46\u662f\u8fd9\u79cd\u60c5\u51b5\u5f88\u5c11\u53d1\u751f. \u5b57\u5178\u7684\"\u5feb\"\u4e0d\u4f1a\u53d7\u5230\u6570\u636e\u91cf\u7684\u5f71\u54cd, \u4ece\u542b\u6709\u4e00\u4e07\u4e2a\u952e\u503c\u5bf9\u548c\u542b\u6709\u4e00\u5343\u4e07\u4e2a\u952e\u503c\u5bf9\u7684\u5b57\u5178\u4e2d\u67e5\u627e,\u4e24\u8005\u82b1\u8d39\u7684\u65f6\u95f4\u51e0\u4e4e\u662f\u6ca1\u6709\u533a\u522b\u7684 \u5b9e\u9a8c\u4e00: \u67e5\u8be2\u5143\u7d20\u6548\u7387 \u00b6 \u4ece\u6d4b\u8bd5\u4e2d\u6211\u4eec\u770b\u5230, \u968f\u7740\u5faa\u73af\u6b21\u6570\u8d8a\u6765\u8d8a\u591a, \u5217\u8868\u6240\u82b1\u8d39\u7684\u603b\u65f6\u95f4\u8d8a\u6765\u8d8a\u957f. \u4f46\u5b57\u5178\u67e5\u8be2\u6240\u82b1\u8d39\u7684\u65f6\u95f4\u6781\u5c11, \u67e5\u8be2\u901f\u5ea6\u975e\u5e38\u5feb, \u5373\u4fbf\u5faa\u73af20\u4e07\u6b21, \u82b1\u8d39\u7684\u603b\u65f6\u95f4\u4e5f\u4e0d\u8fc70.06\u79d2.. import time import numpy as np def test ( count : int , value : int ): \"\"\" :param count: \u5faa\u73af\u6b21\u6570 :param value: \u67e5\u8be2\u7684\u5143\u7d20 :return: \"\"\" lst = list ( np . random . randint ( 0 , 2 ** 30 , size = 1000 )) # --\u62e5\u6709\u4e00\u5343\u4e07\u4e2a\u968f\u673a\u6570\u7684\u5217\u8868 d = dict . fromkeys ( lst ) # --\u6839\u636e\u8fd9\u4e2a\u5217\u8868\u6784\u9020\u51fa\u542b\u6709\u4e00\u5343\u4e07\u4e2a\u952e\u503c\u5bf9\u7684\u5b57\u5178 print ( f \"\u67e5\u8be2\u6b21\u6570\u4e3a { count } \u6b21 --:>\" ) # --\u67e5\u8be2\u5143\u7d20value\u662f\u5426\u5728\u5217\u8868\u4e2d,\u5faa\u73afcount\u6b21,\u5e76\u7edf\u8ba1\u65f6\u95f4 t1 = time . perf_counter () for _ in range ( count ): value in lst t2 = time . perf_counter () print ( \" \u5217\u8868\u67e5\u8be2\u8017\u65f6:\" , round ( t2 - t1 , 2 )) # --\u67e5\u8be2\u5143\u7d20value\u662f\u5426\u5728\u5b57\u5178\u4e2d,\u5faa\u73afcount\u6b21,\u5e76\u7edf\u8ba1\u65f6\u95f4 t1 = time . perf_counter () for _ in range ( count ): value in d t2 = time . perf_counter () print ( \" \u5b57\u5178\u67e5\u8be2\u8017\u65f6:\" , round ( t2 - t1 , 2 )) # --\u5206\u522b\u67e5\u8be2\u4e00\u5343\u6b21\u3001\u4e00\u4e07\u6b21\u3001\u5341\u4e07\u6b21\u3001\u4e8c\u5341\u4e07\u6b21 test ( 10 ** 3 , 22333 ) test ( 10 ** 4 , 22333 ) test ( 10 ** 5 , 22333 ) test ( 10 ** 5 * 2 , 22333 ) \"\"\" \u67e5\u8be2\u6b21\u6570\u4e3a1000\u6b21 --:> \u5217\u8868\u67e5\u8be2\u8017\u65f6: 0.09 \u5b57\u5178\u67e5\u8be2\u8017\u65f6: 0.0 \u67e5\u8be2\u6b21\u6570\u4e3a10000\u6b21 --:> \u5217\u8868\u67e5\u8be2\u8017\u65f6: 0.58 \u5b57\u5178\u67e5\u8be2\u8017\u65f6: 0.0 \u67e5\u8be2\u6b21\u6570\u4e3a100000\u6b21 --:> \u5217\u8868\u67e5\u8be2\u8017\u65f6: 5.42 \u5b57\u5178\u67e5\u8be2\u8017\u65f6: 0.02 \u67e5\u8be2\u6b21\u6570\u4e3a200000\u6b21 --:> \u5217\u8868\u67e5\u8be2\u8017\u65f6: 12.2 \u5b57\u5178\u67e5\u8be2\u8017\u65f6: 0.06 \"\"\" \u5b9e\u9a8c\u4e8c: \u7535\u5546\u540e\u53f0\u6570\u636e \u00b6 \u67d0\u7535\u5546\u4f01\u4e1a\u7684\u540e\u53f0, \u5b58\u50a8\u4e86\u6bcf\u4ef6\u4ea7\u54c1\u7684 ID\u548c\u4ef7\u683c.. \u73b0\u9700\u6839\u636e\u7ed9\u5b9a\u7684\u67d0\u4ef6\u5546\u54c1ID,\u627e\u51fa\u5176\u4ef7\u683c.. \"\"\" \u6bcf\u4ef6\u4ea7\u54c1\u7684ID\u548c\u4ef7\u683c\u7684\u5b58\u50a8,\u6709\u4e24\u4e2a\u65b9\u6848: 1> \u7528\u5217\u8868\u5b58\u50a8 2> \u7528\u5b57\u5178\u5b58\u50a8 \u65b9\u6848\u4e00,\u5047\u8bbe\u5217\u8868\u6709n\u4e2a\u5143\u7d20,\u67e5\u627e\u9700\u8981\u904d\u5386\u5217\u8868,\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n); \u5373\u904d\u6211\u4eec\u5148\u5bf9\u5217\u8868\u8fdb\u884c\u6392\u5e8f,\u6392\u5e8f\u9700\u8981O(nlogn)\u65f6\u95f4;\u7136\u540e\u4f7f\u7528\u4e8c\u5206\u67e5\u627e,\u4e8c\u5206\u6cd5\u9700\u8981O(logn)\u65f6\u95f4.. \u65b9\u6848\u4e8c,\u53ea\u9700O(1)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u53ef\u4ee5\u5b8c\u6210!!! \"\"\" products_list = [( 143121312 , 100 ), ( 432314553 , 30 ), ( 32421912367 , 150 )] products_dict = { 143121312 : 100 , 432314553 : 30 , 32421912367 : 150 } def find_product_price ( proID , products_list ): for id , price in products_list : if id == proID : return price print ( find_product_price ( 32421912367 , products_list )) # 150 print ( products_dict [ 32421912367 ]) # 150 \u73b0\u9700\u7edf\u8ba1\u8fd9\u4e9b\u5546\u54c1\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u4ef7\u683c.. (\u5047\u5b9a\u5546\u54c1\u7684ID\u548c\u4ef7\u683c\u662f\u7528\u5217\u8868\u5b58\u50a8\u7684) \u4ec5\u4ec5\u6a21\u62df\u4e86\u5341\u4e07\u7684\u6570\u636e\u91cf, \u4e24\u8005\u7684\u901f\u5ea6\u5dee\u5f02\u5c31\u5982\u6b64\u4e4b\u5927! \u4e8b\u5b9e\u4e0a, \u5927\u578b\u4f01\u4e1a\u7684\u540e\u53f0\u6570\u636e\u5f80\u5f80\u6709\u4e0a\u4ebf\u4e43\u81f3\u5341\u4ebf\u6570\u91cf\u7ea7, \u5982\u679c\u4f7f\u7528\u4e86\u4e0d\u5408\u9002\u7684\u6570\u636e\u7ed3\u6784, \u5c31\u5f88\u5bb9\u6613\u9020\u6210\u670d\u52a1\u5668\u7684\u5d29\u6e83, \u4e0d\u4f46\u5f71\u54cd\u7528\u6237\u4f53\u9a8c, \u5e76\u4e14\u4f1a\u7ed9\u516c\u53f8\u5e26\u6765\u5de8\u5927\u7684\u8d22\u4ea7\u635f\u5931.. # -- \u4f7f\u7528\u5217\u8868\u7edf\u8ba1\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)*O(m) m\u7684\u5927\u5c0f\u662f\u4e0d\u65ad\u53d8\u5927\u7684m<=n def find_unique_price_using_list ( products_list ): unique_price_list = [] for _ , price in products_list : # -- \u904d\u5386\u5546\u54c1\u5217\u8868 O(n) if price not in unique_price_list : # -- in\u64cd\u4f5c\u904d\u5386unique\u5217\u8868 O(m),\u6700\u574f\u65f6m=n unique_price_list . append ( price ) # -- \u672b\u5c3e\u63d2\u5165\u64cd\u4f5c O(1) return len ( unique_price_list ) # -- \u4f7f\u7528\u96c6\u5408\u7edf\u8ba1\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n) def find_unique_price_using_set ( products_list ): unique_price_set = set () # -- \u96c6\u5408\u4f1a\u81ea\u52a8\u53bb\u91cd for _ , price in products_list : # -- O(n) unique_price_set . add ( price ) # -- O(1) return len ( unique_price_set ) # -- \u6a21\u62df\u51fa10\u4e07\u6761\u5546\u54c1\u6570\u636e # -- enumerate\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668!\u8282\u7701\u4e86\u7a7a\u95f4!\u4e00\u6b21\u53ea\u4ea7\u751f\u4e00\u4e2a\u503c\u5728\u5185\u5b58\u91cc # \u6240\u4ee5len(products_list)\u4f1a\u5f88\u5feb\u5f88\u5feb,\u4f46\u5f88\u8be7\u5f02print(products_list)\u5f88\u6162,\u6162\u7684\u662f\u6253\u5370\u7684\u65f6\u95f4\uff01 products_list = list ( enumerate ( range ( 100000 ))) t1 = time . perf_counter () find_unique_price_using_list ( products_list ) t2 = time . perf_counter () print ( f \"\u5217\u8868\u65b9\u6848\u82b1\u8d39\u65f6\u95f4 { t2 - t1 } \" ) # -- \u5217\u8868\u65b9\u6848\u82b1\u8d39\u65f6\u95f4101.28520515 t1 = time . perf_counter () find_unique_price_using_set ( products_list ) t2 = time . perf_counter () print ( f \"\u96c6\u5408\u65b9\u6848\u82b1\u8d39\u65f6\u95f4 { t2 - t1 } \" ) # -- \u96c6\u5408\u65b9\u6848\u82b1\u8d39\u65f6\u95f40.09064802600001087 \u5b57\u5178\u5de5\u4f5c\u539f\u7406 \u00b6 \u4e0d\u540c\u4e8e\u5176\u4ed6\u6570\u636e\u7ed3\u6784, \u5b57\u5178\u548c\u96c6\u5408\u7684\u5185\u90e8\u7ed3\u6784\u90fd\u662f\u4e00\u5f20\u54c8\u5e0c\u8868.. \u8fd9\u4f7f\u5f97\u8fdb\u884c\u67e5\u627e \u63d2\u5165 \u5220\u9664\u64cd\u4f5c\u65f6\u5f88\u9ad8\u6548!! \u53c2\u8003\u6587\u6863: -_-\u611f\u89c9\u81ea\u5df1\u597d\u83dc!! https://zhuanlan.zhihu.com/p/73426505 https://www.cnblogs.com/traditional/p/13503114.html \u4ecepy3.6\u5f00\u59cb,\u5b57\u5178\u5b58\u50a8\u7684\u5e95\u5c42\u539f\u7406\u88ab\u8fdb\u884c\u4e86\u4f18\u5316. \u5185\u7f6e\u5b57\u5178\u5df2\u7ecf\u662f\u6709\u5e8f\u5b57\u5178\u4e86! \u904d\u5386\u8fed\u4ee3\u51fa\u6765\u7684\u987a\u5e8f\u5c31\u662f\u5b58\u50a8\u7684\u987a\u5e8f. # -- \u53ef\u4ee5\u53d1\u73b0\u5b57\u5178\u6700\u7ec8\u7684\u7ed3\u679c\u7684\u987a\u5e8f\u5c31\u662f\u5b58\u50a8\u7684\u987a\u5e8f c a e d b >>> from random import randint >>> a = { k : randint ( 1 , 4 ) for k in 'caed' } >>> a { 'c' : 4 , 'a' : 2 , 'e' : 3 , 'd' : 3 } >>> a [ 'b' ] = 33 >>> a { 'c' : 4 , 'a' : 2 , 'e' : 3 , 'd' : 3 , 'b' : 33 } # -- \u8981\u6ce8\u610f\u54e6!!\u96c6\u5408\u662f\u4e0d\u4f1a\u81ea\u52a8\u6392\u5e8f\u7684,\u82e5\u9047\u5230\u4e86,\u53ea\u662f\u6070\u5de7 # -- \u6709\u70b9\u7591\u60d1\u7684\u662f,\u96c6\u5408\u548c\u5b57\u5178\u5e95\u5c42\u90fd\u4f7f\u7528\u7684\u662f\u54c8\u5e0c,\u4e3a\u4f55\u96c6\u5408\u6700\u7ec8\u7ed3\u679c\u7684\u987a\u5e8f\u4e0e\u5b58\u50a8\u7684\u987a\u5e8f\u4e0d\u4e00\u81f4 # \u731c\u6d4b\u662f\u4e0e\u96c6\u5408\u5e95\u5c42\u7684\u53bb\u91cd\u539f\u7406\u6709\u5173..\u9762\u5411\u5bf9\u8c61\u5b66\u4e60\u540e\u518d\u6df1\u7a76. >>> a = set ([ 1 , 3 , 8 , - 2 , 99 , 98 , 77 , 1 , 5 , 3 , 77 , 12 ]) >>> a { 1 , 98 , 3 , 99 , 5 , 8 , 12 , 77 , - 2 } >>> set ([ 1 , 3 , 2 ]) { 1 , 2 , 3 } \u8001\u7248\u672c\u54c8\u5e0c\u8868 \u00b6 python3.5(\u542b)\u4e4b\u524d,\u5b57\u5178\u7684\u5e95\u5c42\u539f\u7406 \u521d\u59cb\u5316\u7a7a\u5217\u8868 \u00b6 \u5f53\u6211\u4eec\u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u5b57\u5178\u7684\u65f6\u5019, CPython\u7684\u5e95\u5c42\u4f1a\u521d\u59cb\u5316\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4, \u8fd9\u4e2a\u6570\u7ec4\u67098\u884c, 3\u5217 \u7b2c\u4e00\u5217: \u54c8\u5e0c\u503c(hash) ; \u7b2c\u4e8c\u5217: \u952e(key) ; \u7b2c\u4e09\u5217: \u503c(value) \u6bcf\u4e00\u884c\u6709\u4e09\u5217, \u6bcf\u4e00\u5217\u5360\u7528 8byte \u7684\u5185\u5b58\u7a7a\u95f4, \u6240\u4ee5\u6bcf\u4e00\u884c\u4f1a\u5360\u7528 24byte \u7684\u5185\u5b58\u7a7a\u95f4 my_dict = {} \"\"\" \u7b80\u5355\u63cf\u7ed8\u6b64\u65f6\u7684\u5185\u5b58\u793a\u610f\u56fe \"\"\" [ [ --- , --- , --- ], [ --- , --- , --- ], [ --- , --- , --- ], [ --- , --- , --- ], [ --- , --- , --- ], [ --- , --- , --- ], [ --- , --- , --- ], [ --- , --- , --- ], ] \u5f80\u5b57\u5178\u91cc\u6dfb\u52a0\u6570\u636e \u00b6 \u7531\u4e8eHash\u503c\u53d6\u4f59\u6570\u4ee5\u540e, \u4f59\u6570\u53ef\u5927\u53ef\u5c0f, \u6240\u4ee5\u5b57\u5178\u7684Key\u5e76\u4e0d\u662f\u6309\u7167\u63d2\u5165\u7684\u987a\u5e8f\u5b58\u653e\u7684 step1 : \u8c03\u7528Python\u7684hash\u51fd\u6570,\u8ba1\u7b97\u952ename\u3001age\u3001salary\u5728 \u5f53\u524d\u8fd0\u884c \u65f6\u7684hash\u503c\uff01 \u7279\u522b\u5f3a\u8c03,\u662f\u5f53\u524d\u8fd0\u884c,\u56e0\u4e3apython\u81ea\u5e26\u7684hash\u51fd\u6570\u4e0d\u540c\u4e8e\u4f20\u7edf\u7684hash\u51fd\u6570,\u5f53python\u8fdb\u7a0b\u5173\u95ed\u540e,\u5bf9\u540c\u4e00\u4e2a\u503c\u7684\u54c8\u5e0c\u7ed3\u679c\u53ef\u80fd\u4e0d\u4e00\u6837 step2 : \u5c06name\u7684hash\u503c\u5bf98\u53d6\u4f59\u6570, \u82e5\u4f59\u6570\u4e3a5,\u5219\u4f1a\u628a\u8be5hash\u503c\u653e\u5728\u521a\u521a\u521d\u59cb\u5316\u7684\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u4e0b\u6807\u4e3a5\u7684\u8fd9\u4e00\u884c\u7684\u7b2c\u4e00\u5217; \u5e95\u5c42C\u8bed\u8a00\u4f1a\u4f7f\u7528\u4e24\u4e2a\u53d8\u91cf\u5b58\u653ehash(name)\u5bf9\u5e94\u7684\u952e\u548c\u503c..\u4f9d\u6b21\u653e\u5165hash\u503c\u6240\u5728\u884c\u7684\u7b2c\u4e8c\u3001\u4e09\u5217.. age\u3001salary\u540c\u7406.. key\u901a\u8fc7\u54c8\u5e0c\u51fd\u6570\u6620\u5c04\u6210\u4e00\u4e2a\u6570\u503c, \u4f5c\u4e3a\u7d22\u5f15. -- \u56e0\u800c\u54c8\u5e0c\u8868\u53c8\u79f0\u4e3a\u6620\u5c04\u8868! \u5373\u5c06key\u8f6c\u6362\u6210\u7c7b\u4f3c\u4e8e\u5217\u8868\u7684\u7d22\u5f15,\u4f46\u7d22\u5f15\u4e0d\u662f\u8fde\u7eed\u7684..\u662f\u968f\u673a\u7684 \u6240\u4ee5\u5b57\u5178\u4e0d\u53ef\u80fd\u50cf\u5217\u8868\u4e00\u6837\u901a\u8fc7\u4e0b\u6807\u53d6\u503c\u3001\u5207\u7247.. my_dict [ 'name' ] = 'dc' my_dict [ 'age' ] = 18 my_dict [ 'salary' ] = 999999 \"\"\" \u2605 --\u5f53\u524d\u8fd0\u884c\u65f6\u7684hash\u503c \"\"\" One_Piece @DCdeMacBook - Air ~ % python3 Python 3.8.7 ( v3 .8.7 : 6503 f05dd5 , Dec 21 2020 , 12 : 45 : 15 ) >>> hash ( 'name' ) - 3919752505198988186 >>> exit () One_Piece @DCdeMacBook - Air ~ % python3 Python 3.8.7 ( v3 .8.7 : 6503 f05dd5 , Dec 21 2020 , 12 : 45 : 15 ) >>> hash ( 'name' ) - 3236881314859452204 \"\"\" \u2605 --\u6b64\u65f6\u7684\u5185\u5b58\u793a\u610f\u56fe 1278649844881305901%8 == 5 1545085610920597121%8 == 1 4234469173262486640%8 == 0 \"\"\" [ [ - 4234469173262486640 , id ( salary ), id ( 999999 )], # -- id(salary)\u5185\u5b58\u5730\u5740\u5373\u6307\u5411salary\u7684\u6307\u9488 [ 1545085610920597121 , id ( age ), id ( 18 )], [ --- , --- , --- ], [ --- , --- , --- ], [ --- , --- , --- ], [ 1278649844881305901 , id ( name ), id ( kingname )], [ --- , --- , --- ], [ --- , --- , --- ] ] \u8bfb\u53d6\u5b57\u5178\u6570\u636e \u00b6 \u5b58\u50a8\u65f6 hash('name') % 8 \u4f5c\u4e3a\u6570\u7ec4\u7684\u7d22\u5f15... \u5b57\u5178\u901a\u8fc7\u952e\u53d6\u503c\u65f6,\u540c\u7406, \u6309\u7167\u6b64\u516c\u5f0f\u5f97\u5230\u7d22\u5f15,\u518d\u6bd4\u8f83\u5224\u65ad\u540e\u53d6\u5230\u7ed3\u679c, \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1) \"\"\" \u2605 --\u5047\u8bbe\u6211\u4eec\u8981\u8bfb\u53d6age\u5bf9\u5e94\u7684\u503c \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1) -- \u56e0\u4e3a\u7d22\u5f15\u548ckey\u3001value\u662f\u4e00\u4e00\u5bf9\u5e94\u7684,\u6240\u4ee5\u901a\u8fc7\u7d22\u5f15\u6211\u4eec\u80fd\u77ac\u95f4\u5b9a\u4f4d\u5230\u6307\u5b9a\u7684key \"\"\" step1 : Python\u5148\u8ba1\u7b97\u5728\u5f53\u524d\u8fd0\u884c\u65f6 , age\u5bf9\u5e94\u7684Hash\u503c\u662f\u591a\u5c11 hash ( \"age\" ) step2 : hash ( \"age\" ) % 8 \u7ed3\u679c\u4e3a1 step3 : \u5bf9\u6bd4\u4e8c\u7ef4\u6570\u7ec4\u7d22\u5f15\u4e3a1\u7684\u4f4d\u7f6e \u5373\u7b2c\u4e8c\u884c\u7b2c\u4e00\u5217\u7684\u503c\u662f\u5426\u7b49\u4e8e hash ( \"age\" ) step3 : \u82e5\u7b49\u4e8e , \u53d6\u51fa\u7b2c\u4e8c\u884c\u7b2c\u4e09\u5217\u6307\u9488\u5bf9\u5e94\u5185\u5b58\u4e2d\u7684\u503c \u7ed3\u679c\u4e3a18 Ps : \u56e0\u4e3a\u90fd\u662f\u5728\u540c\u4e00\u4e2a\u5f53\u524d\u8fd0\u884c\u65f6 ( \u540c\u4e00\u4e2apython\u8fdb\u7a0b ), \u8fdb\u884c\u7684hash\u8fd0\u7b97 . \u6240\u4ee5\u5b58\u4e0e\u8bfb\u7684hash ( \"age\" ) \u503c\u662f\u4e00\u6837\u7684\u7684 . \"\"\" \u2605 --\u5047\u8bbe\u9700\u8981\u5faa\u73af\u904d\u5386\u5b57\u5178 \"\"\" Python\u5e95\u5c42\u4f1a\u904d\u5386\u8fd9\u4e2a\u4e8c\u7ef4\u6570\u7ec4 , \u5982\u679c\u5f53\u524d\u884c\u6709\u6570\u636e , \u90a3\u4e48\u5c31\u8fd4\u56deKey\u6307\u9488\u5bf9\u5e94\u7684\u5185\u5b58\u91cc\u9762\u7684\u503c . \u5982\u679c\u5f53\u524d\u884c\u6ca1\u6709\u6570\u636e , \u90a3\u4e48\u5c31\u8df3\u8fc7 .. \u8981\u6e05\u695a\u6653\u5f97\u904d\u5386\u5b57\u5178\u603b\u662f\u4f1a\u904d\u5386\u6574\u4e2a\u4e8c\u4f4d\u6570\u7ec4\u7684\u6bcf\u4e00\u884c .. \u54c8\u5e0c\u51b2\u7a81 \u00b6 \u4e0d\u540c\u7684key\u8fdb\u884c\u54c8\u5e0c\u3001\u53d6\u6a21\u8fd0\u7b97\u4e4b\u540e\u5f97\u5230\u7684 \u7ed3\u679c/\u4e8c\u7ef4\u6570\u7ec4\u7d22\u5f15 \u53ef\u80fd\u4f1a\u662f\u76f8\u540c\u7684 \u6240\u4ee5\u4e0a\u8ff0\u7684\u5b58\u50a8\u548c\u8bfb\u53d6\u7684\u65b9\u5f0f\u5b58\u5728\u7f3a\u9677.. \u9700\u8981\u6539\u53d8\u7b56\u7565\u91cd\u65b0\u6620\u5c04\u5f97\u5230\u65b0\u7684\u7d22\u5f15,\u89e3\u51b3\u54c8\u5e0c\u51b2\u7a81\uff01\uff01 \u54c8\u5e0c\u51b2\u7a81\u4e3b\u8981\u6709\u4e24\u65b9\u9762: \u8bbe\u7f6e\u952e\u503c\u5bf9\u3001\u6839\u636e\u952e\u83b7\u53d6\u503c \u4e3e\u4e2a\u4f8b\u5b50 : ( \u4f9d\u6b21\u6267\u884cABC\u64cd\u4f5c ) my_dict [ 'xx' ] = 00 # A my_dict [ 'yy' ] = 11 # B my_dict [ 'xx' ] = 01 # C \u901a\u8fc7\u8fd0\u7b97 hash ( 'xx' ) % 8 == hash ( 'yy' ) % 8 == 1 \u5148\u6210\u529f\u5b58\u50a8\u952e\u503c\u5bf9 { 'xx' : 00 }; \u518d\u6dfb\u52a0\u952e\u503c\u5bf9 { 'yy' : 11 } \u65f6\u53d1\u73b0\u4e8c\u7ef4\u6570\u7ec4\u7d22\u5f15\u4e3a1\u7684\u4f4d\u7f6e\u88ab\u5360\u7528\u4e86 .. \u5148\u5224\u65adkey\u503c\u662f\u5426\u4e00\u6837 , 'yy' != 'xx' Python\u5e95\u5c42\u4f1a\u6539\u53d8\u7b56\u7565\u91cd\u65b0\u6620\u5c04 , \u76f4\u5230\u6620\u5c04\u51fa\u6765\u7684\u7d22\u5f15\u6ca1\u6709\u88ab\u5360\u7528 .. \u5047\u8bbe\u901a\u8fc7\u8be5\u7b56\u7565\u6620\u5c04\u51fa\u7684\u7d22\u5f15\u503c\u4e3a4 , \u90a3\u4e48\u952e\u503c\u5bf9 { 'yy' : 11 } \u5c31\u4f1a\u5b58\u50a8\u5230\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7d22\u5f15\u4e3a4\u7684\u4f4d\u7f6e .. \u8fdb\u884cC\u64cd\u4f5c\u65f6 , \u5728\u8fdb\u884ckey\u503c\u662f\u5426\u76f8\u7b49\u5224\u65ad\u65f6 , \u7ed3\u679c\u4e3a\u76f8\u7b49 , \u5219\u76f4\u63a5\u4fee\u6539\u952e \"xx\" \u7684\u503c\u4e3a01 \u4e3e\u4e2a\u4f8b\u5b50 : my_dict [ 'zz' ] my_dict [ 'xx' ] my_dict [ 'yy' ] my_dict [ 'zz' ] \u8fd0\u7b97\u5f97\u5230\u7d22\u5f15 , \u4e8c\u7ef4\u6570\u7ec4\u8be5\u7d22\u5f15\u4f4d\u7f6e\u6ca1\u6709\u6570\u636e , \u76f4\u63a5\u62a5\u9519 , \u5b57\u5178\u4e2d\u6ca1\u6709\u952e \"zz\" my_dict [ 'xx' ] \u8fd0\u7b97\u5f97\u5230\u7d22\u5f15\u540e , \u53d1\u73b0\u8be5\u4f4d\u7f6e\u88ab\u5360\u7528\u4f46\u8be5\u4f4d\u7f6e\u7684key\u5c31\u662f 'xx' , \u76f4\u63a5\u83b7\u53d6\u5230\u503c ! my_dict [ 'yy' ] \u8fd0\u7b97\u5f97\u5230\u7d22\u5f15\u540e , \u53d1\u73b0\u8be5\u4f4d\u7f6e\u88ab\u5360\u7528\u4e14\u8be5\u4f4d\u7f6e\u7684key\u4e0d\u662f 'yy' .. \u6539\u53d8\u7b56\u7565 ( \u4e0e\u5b58\u50a8\u65f6\u89e3\u51b3\u54c8\u5e0c\u51b2\u7a81\u7684\u7b56\u7565\u4e00\u81f4 ), \u91cd\u65b0\u5f97\u5230\u7d22\u5f15\u4e3a4 , \u53d1\u73b0\u6b64\u4f4d\u7f6e\u7684key\u5c31\u662f 'yy' , \u6210\u529f\u53d6\u503c . \u6240\u8c13\u7684\u7b56\u7565\u4e0d\u5fc5\u6df1\u7a76.. \u6709\u5f00\u653e\u5bfb\u5740\u6cd5\u3001\u94fe\u63a5\u6cd5\u7b49.. \u5f00\u653e\u5bfb\u5740\u6cd5 : \u5982\u679c\u54c8\u5e0c\u8fd0\u7b97\u540e\u8fd4\u56de\u7684\u7d22\u5f15\u4f4d\u7f6e\u5df2\u7ecf\u88ab\u5360\u7528, \u5219\u53ef\u4ee5\u901a\u8fc7\u7ebf\u6027\u63a2\u67e5\u3001\u5e73\u65b9\u63a2\u67e5\u7b49\u627e\u7a7a\u4f4d\u7f6e; \u94fe\u63a5\u6cd5 : \u7528\u94fe\u8868\u7684\u65b9\u5f0f(\u589e\u52a0\u7ed3\u70b9)\u5c06\u54c8\u5e0c\u8fd0\u884c\u7ed3\u679c\u76f8\u540c\u7684\u952e\u503c\u5bf9\u94fe\u63a5\u8d77\u6765.. java\u7684hashmap\u5c31\u662f\u8fd9\u6837\u505a\u7684.. \u6269\u5bb9 \u00b6 2/3 8,16,32... \u4e0d\u65ad\u6269\u5bb9\u4e0d\u65ad\u7a00\u758f \u6269\u5bb9\u9700\u8981\u8fdb\u884c\u65e7\u6570\u636e\u642c\u8fc1O(n)\u7ea7\u522b\u64cd\u4f5c \u5b57\u5178\u4e0d\u4f1a\u50cf\u5217\u8868\u90a3\u6837\u5bb9\u91cf\u4e0d\u591f\u65f6\u624d\u6269\u5bb9, \u5f53\u5b57\u5178\u7684\u952e\u503c\u5bf9\u6570\u91cf\u8d85\u8fc7\u5f53\u524d\u6570\u7ec4\u957f\u5ea6\u76842/3\u65f6, \u4e3a\u4e86\u4fdd\u8bc1\u76f8\u5173\u64cd\u4f5c\u7684\u9ad8\u6548\u6027\u5e76\u907f\u514d\u54c8\u5e0c\u51b2\u7a81. \u6570\u7ec4\u4f1a\u8fdb\u884c\u6269\u5bb9, \u91cd\u65b0\u5206\u914d\u66f4\u5927\u7684\u5185\u5b58, 8\u884c\u53d8\u621016\u884c, 16\u884c\u53d8\u621032\u884c. So, \u4e0d\u65ad\u7684\u6269\u5bb9\u4f1a\u4f7f\u54c8\u5e0c\u8868(\u4e8c\u7ef4\u6570\u7ec4)\u7684\u5bb9\u91cf\u8d8a\u6765\u8d8a\u5927,\u8fd9\u6837\u4e00\u6765,\u7a7a\u95f2\u7684\u4f4d\u7f6e\u8d8a\u6765\u8d8a\u591a(\u81f3\u5c11\u5360\u636e\u6570\u7ec4\u5bb9\u91cf\u7684\u4e09\u5206\u4e4b\u4e00),\u54c8\u5e0c\u8868\u4fbf\u4f1a\u8d8a\u6765\u8d8a\u7a00\u758f.. \u8fd8\u9700\u8981\u6ce8\u610f\u7684\u662f, \u6269\u5bb9\u540e\u9700\u8981\u91cd\u65b0\u7533\u8bf7\u5185\u5b58\u7a7a\u95f4,\u5c06\u65e7\u6570\u636e\u91cd\u65b0hash\u5230\u65b0\u6570\u7ec4\u4e2d ...\u662fO(n)\u7ea7\u522b\u7684\u64cd\u4f5c... Ps: redis\u4f7f\u7528\u6e10\u8fdb\u5f0frehash,\u4e00\u70b9\u4e00\u70b9\u6269\u5bb9 \u65b0\u7248\u672c\u54c8\u5e0c\u8868 \u00b6 \u65e7\u54c8\u5e0c\u8868\u4e0d\u65ad\u6269\u5bb9,\u8d8a\u6765\u8d8a\u7a00\u758f,\u4f1a\u6d6a\u8d39\u5927\u91cf\u7684\u5185\u5b58\u7a7a\u95f4.. \u4e3a\u4e86\u907f\u514d\u7a7a\u95f4\u7684\u6d6a\u8d39,py3.6\u5f00\u59cb\u5bf9\u54c8\u5e0c\u8868\u8fdb\u884c\u4e86\u4f18\u5316!! \u521d\u59cb\u5316\u7a7a\u5217\u8868 \u00b6 \u4ecePy3.6\u5f00\u59cb, \u5b57\u5178\u7684\u5e95\u5c42\u6570\u636e\u7ed3\u6784\u53d1\u751f\u4e86\u53d8\u5316.. \u521d\u59cb\u5316\u4e00\u4e2a\u5b57\u5178\u4ee5\u540e, CPython\u7684\u5e95\u5c42\u4f1a\u521d\u59cb\u5316\u4e00\u4e2a\u957f\u5ea6\u4e3a8\u7684\u4e00\u7ef4\u6570\u7ec4\u548c\u4e00\u4e2a\u7a7a\u7684\u4e8c\u7ef4\u6570\u7ec4 my_dict = {} \"\"\" \u7b80\u5355\u63cf\u7ed8\u6b64\u65f6\u7684\u5185\u5b58\u793a\u610f\u56fe \"\"\" # -- 'None'\u4ee3\u8868\u8fd9\u4e2a\u4f4d\u7f6e\u5206\u914d\u4e86\u5185\u5b58\u4f46\u6ca1\u6709\u5143\u7d20 indices = [ None , None , None , None , None , None , None , None ] entries = [] \u6dfb\u52a0\u3001\u8bfb\u53d6\u6570\u636e \u00b6 1> \u5f53\u6211\u8981\u63d2\u5165\u65b0\u7684\u6570\u636e\u7684\u65f6\u5019, \u59cb\u7ec8\u53ea\u662f\u5f80 entries \u7684\u540e\u9762\u6dfb\u52a0\u6570\u636e, \u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u63d2\u5165\u7684\u987a\u5e8f.. 2> \u5f53\u6211\u4eec\u8981\u904d\u5386\u5b57\u5178\u7684Keys\u548cValues\u7684\u65f6\u5019, \u76f4\u63a5\u904d\u5386 entries \u5373\u53ef \u91cc\u9762\u6bcf\u4e00\u884c\u90fd\u662f\u6709\u7528\u7684\u6570\u636e, \u4e0d\u5b58\u5728\u8df3\u8fc7\u7684\u60c5\u51b5, \u51cf\u5c11\u4e86\u904d\u5386\u7684\u4e2a\u6570!! 3> \u54c8\u5e0c\u8868\u4e0d\u65ad\u6269\u5145, \u54c8\u5e0c\u8868\u8d8a\u6765\u8d8a\u7a00\u758f\u7684\u60c5\u51b5\u53ea\u4f1a\u51fa\u73b0\u5728 entries \u8fd9\u4e2a\u4e00\u4f4d\u6570\u7ec4\u4e2d... \u6dfb\u52a0\u6570\u636e: \u63d2\u5165\u952e\u503c\u5bf9 {'name':'dc'} , hash('name')%8 == 5 \u628a indices \u8fd9\u4e2a\u4e00\u7ef4\u6570\u7ec4\u91cc\u9762,\u4e0b\u6807\u4e3a5\u7684\u4f4d\u7f6e\u7684\u503c\u4fee\u6539\u4e3a0 0\u662f\u952e\u503c\u5bf9{'name':'dc'}\u5728\u4e8c\u7ef4\u6570\u7ec4 entries \u7684\u884c\u7d22\u5f15, \u5176\u4f59\u540c\u7406 \u4f9d\u6b21\u6dfb\u52a0\u952e\u503c\u5bf9'name'\u3001'age'\u3001'salary', \u5b83\u4ee8\u5728entries\u7684\u884c\u7d22\u5f15\u4f9d\u6b21\u4e3a 0 1 2.. \u8bfb\u53d6\u6570\u636e : hash('salary')%8 == 0 ; indices[0] == 2 ; \u5219salary\u6240\u5bf9\u5e94\u7684\u952e\u503c\u5bf9\u5728entries[2]\u4e2d.. Indices \u4e2d\u5143\u7d20\u7684\u503c, \u5bf9\u5e94 entries \u4e2d\u76f8\u5e94\u7684\u7d22\u5f15 !!! my_dict [ 'name' ] = 'dc' my_dict [ 'age' ] = 18 my_dict [ 'salary' ] = 999999 \"\"\" \u2605 --\u6b64\u65f6\u7684\u5185\u5b58\u793a\u610f\u56fe 1278649844881305901%8 == 5 'name' 1545085610920597121%8 == 1 'age' 4234469173262486640%8 == 0 'salary' \"\"\" # -- \u65b0\u54c8\u5e0c\u8868 \u5c06\u5b58\u50a8\u7684\u6570\u636e\u4f9d\u6b21\u5b58\u5165\u4e86\u4e8c\u7ef4\u6570\u7ec4entries\u4e2d # \u5c06key\u503c\u901a\u8fc7\u54c8\u5e0c\u8fd0\u7b97\u5f97\u5230\u7684\u7d22\u5f15\u503c\u4e0e\u952e\u503c\u5bf9\u5728\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15,\u8fd9\u4e24\u8005\u7684\u5bf9\u5e94\u5173\u7cfb\u5b58\u50a8\u5230\u4e86\u4e00\u7ef4\u6570\u7ec4indices\u4e2d # \u4e00\u7ef4\u6570\u7ec4\u7684\u4e0b\u6807:key\u901a\u8fc7\u54c8\u5e0c\u8fd0\u7b97\u5f97\u5230\u7684\u7d22\u5f15\u503c \u4e00\u7ef4\u6570\u7ec4\u8be5\u4e0b\u6807\u7684\u503c:\u952e\u503c\u5bf9\u5728\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15 indices = [ 2 , 1 , None , None , None , 0 , None , None ] entries = [ [ 1278649844881305901 , id ( name ), id ( kingname )], [ 1545085610920597121 , id ( age ), id ( 18 )], [ - 4234469173262486640 , id ( salary ), id ( 999999 )], ] \u65b0\u54c8\u5e0c\u8868\u8282\u7701\u4e86\u5927\u91cf\u7684\u7a7a\u95f4 \"\"\" \u65e7\u54c8\u5e0c\u8868 3*8*8==192byte \u65b0\u54c8\u5e0c\u8868\u7684\u4e00\u4f4d\u6570\u7ec4\u53ea\u5360\u636e8byte 3*8*3+8==80byte \u8282\u7701 (192-80)/80==58% \"\"\" # -- \u4e0e\u65e7\u54c8\u5e0c\u8868\u7684\u5b58\u50a8\u505a\u4e2a\u5bf9\u6bd4 [ [ - 4234469173262486640 , id ( salary ), id ( 999999 )], # -- salary [ 1545085610920597121 , id ( age ), id ( 18 )], # -- age [ --- , --- , --- ], [ --- , --- , --- ], [ --- , --- , --- ], [ 1278649844881305901 , id ( name ), id ( kingname )], # -- name [ --- , --- , --- ], [ --- , --- , --- ] ]","title":"\u6570\u636e\u7c7b\u578b\u4e4b\u54c8\u5e0c"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/03_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%93%88%E5%B8%8C/#_1","text":"","title":"\u5b57\u5178"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/03_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%93%88%E5%B8%8C/#7","text":"{}\u3001dict\u3001formkeys \u6ce8\u610f: \u5b57\u5178\u7684\u952e\u5fc5\u987b\u662f\u53ef\u54c8\u5e0c\u7684(\u4ece\u91cc\u5230\u5916\u90fd\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61)!!! \u54ea\u6015\u5143\u7956\u5185\u5305\u542b\u53ef\u53d8\u5bf9\u8c61\u4e5f\u4e0d\u884c.. d = {1: 123} d[1.0] = 234 d[True] = 345 \u4e09\u8005\u662f\u7b49\u4ef7\u7684.. 1 > { 'one' : 1 , 'tow' : 2 , 'three' : 3 } {} # -- \u521b\u5efa\u7a7a\u5b57\u5178(\u63a8\u8350) 2 > dict ( one = 1 , two = 2 , three = 3 ) # -- \u6ce8\u610f\u6b64\u65b9\u5f0f\u952e\u4e0d\u80fd\u52a0\u5f15\u53f7 3 > dict ({ 'one' : 1 , 'tow' : 2 , 'three' : 3 }) 4 > dict ([( 'one' , 1 ),( 'two' , 2 ),( 'three' , 3 )]) dict ((( 'one' , 1 ),( 'two' , 2 ),( 'three' , 3 ))) 5 > dict ( zip ([ 'one' , 'two' , 'three' ],[ 1 , 2 , 3 ])) 6 > dict . fromkeys ( \u5e8f\u5217 , \u6bcf\u4e2a\u952e\u7684\u521d\u59cb\u503c ) # -- \u9ed8\u8ba4\u521d\u59cb\u503c\u4e3aNone 7 > \u5b57\u5178\u751f\u6210\u5f0f keys = [ 'names' , 'age' , 'sex' ] values = [ 'egon' , 18 , 'male' ] res = { k : v for k , v in zip ( keys , values )} \"\"\" -- fromkeys \"\"\" >>> v = dict . fromkeys ([ 'k1' , 'k2' ],[]) >>> v { 'k1' : [], 'k2' : []} >>> v [ 'k1' ] is v [ 'k2' ] True >>> v [ 'k1' ] . append ( 666 ) >>> v { 'k1' : [ 666 ], 'k2' : [ 666 ]} >>> v [ 'k1' ] = 777 >>> v { 'k1' : 777 , 'k2' : [ 666 ]} data = [ 12 , 5 , 6 , 4 , 6 , 5 , 5 , 7 ] print ( dict . fromkeys ( data , 0 )) # -- {12: 0, 5: 0, 6: 0, 4: 0, 7: 0}","title":"\u521b\u5efa\u76847\u79cd\u65b9\u5f0f"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/03_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%93%88%E5%B8%8C/#_2","text":"\u67e5\u627e -- key\u3001values\u3001items\u3001get\u3001 setdefault \u3001my_dict[key\u503c] \u589e\u52a0 -- \u76f4\u63a5\u8d4b\u503c \u3001update\u3001setdefault \u4fee\u6539 -- update \u3001\u76f4\u63a5\u8d4b\u503c\u8986\u76d6 key()\u3001values()\u3001items()\u7686\u8fd4\u56deiterable\u53ef\u8fed\u4ee3\u5bf9\u8c61.. price.values() \u7b49\u540c\u4e8e dict.values(price) \u5176\u4f59\u540c\u7406 get() \u82e5\u952e\u4e0d\u5b58\u5728,\u9ed8\u8ba4\u8fd4\u56deNone,\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u8fd4\u56de\u503c my_dict.get(12,'\u6728\u6709') \u589e\u6dfb\u952e\u503c\u5bf9\u7684\u4e09\u79cd\u65b9\u5f0f: 1> setdefault() \u7c7b\u4f3c\u4e8eget(),\u533a\u522b\u5728\u4e8e\u82e5\u952e\u4e0d\u5b58\u5728,\u8bbe\u7f6e\u7684\u8fd4\u56de\u503c\u4f1a\u4f5c\u4e3avalue\u81ea\u52a8\u6dfb\u52a0\u952e\u503c\u5bf9. 2> \u76f4\u63a5\u7ed9\u5b57\u5178\u8d4b\u503c, \u82e5\u8be5\u952e\u5b58\u5728,\u5219\u6539\u5199\u952e\u5bf9\u5e94\u7684\u503c; \u82e5\u8be5\u952e\u4e0d\u5b58\u5728, \u5219\u7ed9\u5b57\u5178\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u952e\u503c\u5bf9.. 3> update\u66f4\u65b0\u64cd\u4f5c\u540c\u7406,\u82e5\u952e\u4e0d\u5b58\u5728\u5219\u65b0\u589e\u952e\u503c\u5bf9 my_dict . keys () # -- \u8fd4\u56de\u5b57\u5178\u4e2d\u7684\u952e my_dict . values () # -- \u8fd4\u56de\u5b57\u5178\u4e2d\u7684\u503c my_dict . items () # -- \u8fd4\u56de\u5b57\u5178\u4e2d\u7684\u952e\u503c\u5bf9(\u9879) \"\"\" -- update \u66f4\u65b0\u5b57\u5178\u4e2d\u6307\u5b9a\u952e\u7684\u503c,\u82e5\u952e\u4e0d\u5b58\u5728\u5219\u65b0\u589e\u952e\u503c\u5bf9 my_dict.update({'\u952e':\u503c}) my_dict.update(\u952e=\u503c) \"\"\" >>> a = { 'k1' : 10 , 'k2' : 20 } >>> a . update ( k1 = 80 ) # -- \u6ce8\u610f\u6b64\u65b9\u5f0f\u66f4\u65b0,\u952e\u4e0d\u9700\u8981\u52a0\u5f15\u53f7 >>> a { 'k1' : 80 , 'k2' : 20 } # -- 'k1'\u7684\u503c\u66f4\u65b0\u4e3a80 >>> a . update ({ 'k1' : 30 }) >>> a { 'k1' : 30 , 'k2' : 20 } # -- 'k1'\u7684\u503c\u66f4\u65b0\u4e3a30 >>> a . update ({ 'k3' : 50 }) # -- \u5b57\u5178\u4e2d\u6ca1\u6709\u540d\u4e3a'k3'\u7684\u952e,\u5219\u65b0\u589e\u952e\u503c\u5bf9 >>> a { 'k1' : 30 , 'k2' : 20 , 'k3' : 50 } \"\"\" -- setdefault \"\"\" >>> a . setdefault ( 'k1' , 0 ) 30 >>> a { 'k1' : 30 , 'k2' : 20 , 'k3' : 50 } >>> a . setdefault ( 'k4' , 0 ) 0 >>> a { 'k1' : 30 , 'k2' : 20 , 'k3' : 50 , 'k4' : 0 } \"\"\" -- \u76f4\u63a5\u8d4b\u503c \"\"\" >>> a [ 'age' ] = 18 >>> a { 'k1' : 30 , 'k2' : 20 , 'k3' : 50 , 'k4' : 0 , 'age' : 18 } >>> a [ 'age' ] = 22 >>> a { 'k1' : 30 , 'k2' : 20 , 'k3' : 50 , 'k4' : 0 , 'age' : 22 }","title":"\u589e\u52a0\u3001\u4fee\u6539\u3001\u67e5\u627e"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/03_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%93%88%E5%B8%8C/#_3","text":"\u5220\u9664 -- pop\u3001popitem\u3001del\u3001clear \u590d\u5236 -- copy \"\"\" \u2605 --\u5220\u9664 \"\"\" my_dict . pop ( '\u6307\u5b9a\u952e' ) # -- \u6307\u5b9a\u952e,\u5220\u9664\u5bf9\u5e94\u7684\u952e\u503c\u5bf9,\u8fd4\u56dekey\u5bf9\u5e94\u7684value,\u82e5\u6307\u5b9a\u952e\u4e0d\u5b58\u5728,\u62a5\u9519 my_dict . popitem () # -- \u8fd4\u56de\u5220\u9664\u7684\u952e\u503c\u5bf9(py3.6\u4e4b\u524d\u662f\u968f\u673a\u5220\u9664,py3.6\u4e4b\u540e\u662f\u79fb\u9664\u6700\u540e\u7684) del my_dict [ '\u6307\u5b9a\u952e' ] # -- \u6307\u5b9a\u952e,\u5220\u9664\u5bf9\u5e94\u7684\u952e\u503c\u5bf9 my_dict . clear () # -- \u6e05\u7a7a\u5b57\u5178 >>> from random import randint >>> d1 = { k : randint ( 1 , 10 ) for k in 'abcd' } # -- \u5b57\u5178\u751f\u6210\u5f0f >>> d1 { 'a' : 7 , 'b' : 3 , 'c' : 5 , 'd' : 6 } >>> d1 . pop ( 'b' ) 3 >>> d1 { 'a' : 7 , 'c' : 5 , 'd' : 6 } >>> d1 . popitem () ( 'd' , 6 ) >>> d1 { 'a' : 7 , 'c' : 5 } >>> del d1 [ 'c' ] >>> d1 { 'a' : 7 } >>> d1 . clear () >>> d1 {} \"\"\" \u2605 --\u590d\u5236 \"\"\" my_dict . copy () # -- \u590d\u5236\u5b57\u5178,\u662f\u6d45\u62f7\u8d1d!! >>> d2 = { 'a' : [ 1 , 2 , 3 ], 'b' : 'one' } >>> d3 = d2 . copy () >>> d2 is d3 False >>> d3 { 'a' : [ 1 , 2 , 3 ], 'b' : 'one' } >>> d2 [ 'b' ] = 5 >>> d2 [ 'a' ] . append ( 6 ) >>> d2 { 'a' : [ 1 , 2 , 3 , 6 ], 'b' : 5 } >>> d3 { 'a' : [ 1 , 2 , 3 , 6 ], 'b' : 'one' }","title":"\u5220\u9664\u3001\u590d\u5236"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/03_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%93%88%E5%B8%8C/#_4","text":"\u4e09\u79cd \u5408\u5e76\u65b9\u5f0f: 1> dict(dic_1.items()+dic_2.items()) 2> dict(dic_1,**dic2) \u7b49\u540c\u4e8e dict(dic_1,a=10,b=20) dict(dic_1,dic_2) \u62a5\u9519 3> dic_1.update(dic_2)","title":"\u5b57\u5178\u5408\u5e76"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/03_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%93%88%E5%B8%8C/#_5","text":"\u8be5\u64cd\u4f5c\u4ec5\u9650\u4e8ekeys()\u548citems()!!! & # -- \u4ea4\u96c6 - # -- \u5dee\u96c6 | # -- \u5e76\u96c6 >>> a = { 'x' : 1 , 'y' : 2 , 'z' : 3 } >>> b = { 'w' : 10 , 'x' : 11 , 'y' : 2 } >>> a . keys () & b . keys () { 'y' , 'x' } >>> a . keys () - b . keys () { 'z' } >>> a . keys () | b . keys () { 'y' , 'x' , 'z' , 'w' } >>> a . items () & b . items () {( 'y' , 2 )} >>> a . items () - b . items () # -- a\u6709\u7684,b\u6ca1\u6709. {( 'z' , 3 ), ( 'x' , 1 )} >>> a . items () | b . items () {( 'w' , 10 ), ( 'x' , 11 ), ( 'z' , 3 ), ( 'x' , 1 ), ( 'y' , 2 )}","title":"\u5b57\u5178\u4ea4\u96c6\u3001\u5dee\u96c6\u3001\u5e76\u96c6"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/03_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%93%88%E5%B8%8C/#_6","text":"\u4f46\u51e1\u5bf9\u5b57\u5178\u8fdb\u884c\u5faa\u73af,\u5faa\u73af\u7684\u662f\u5b83\u7684key\u503c >>> price = { 'a' : 205.34 , 'b' : 612.98 , 'c' : 45.23 } >>> min ( price ) # -- \u4f1a\u5bf9\u5b57\u5178\u904d\u5386 'a' >>> max ( price ) 'c' >>> sorted ( price ) [ 'a' , 'b' , 'c' ] >>> min ( price , key = lambda k : price [ k ]) 'c' >>> max ( price , key = lambda k : price [ k ]) 'b' >>> sorted ( price , key = lambda k : price [ k ]) [ 'c' , 'a' , 'b' ] >>> x = { 1 : 3 , 2 : 4 } >>> sum ( x ) 3 >>> sum ( x . values ()) 7 >>> my_dict = { 'a' : 24 , 'g' : 52 , 'i' : 12 , 'k' : 33 } >>> dict ( sorted ( my_dict . items (), key = lambda x : x [ 1 ])) { 'i' : 12 , 'a' : 24 , 'k' : 33 , 'g' : 52 } >>> sorted ( my_dict ) [ 'a' , 'g' , 'i' , 'k' ] >>> x = { i : str ( i + 3 ) for i in range ( 3 )} >>> '' . join ( x . values ()) '345' >>> '' . join ( map ( str , x )) '012'","title":"\u5bf9\u5b57\u5178\u904d\u5386"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/03_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%93%88%E5%B8%8C/#_7","text":"","title":"\u96c6\u5408"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/03_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%93%88%E5%B8%8C/#_8","text":"\u96c6\u5408\u548c\u5b57\u5178\u90fd\u662f\u4e0d\u80fd\u6839\u636e\u4e0b\u6807\u6765\u83b7\u53d6\u548c\u4fee\u6539\u6570\u636e\u7684 set() frozenset add update remove discard clear set () # -- \u521b\u5efa\u7a7a\u96c6\u5408 { \"a\" , \"b\" , \"c\" } \u3001 set ([ \"a\" , \"b\" , \"c\" ]) # -- \u521b\u5efa\u96c6\u5408 frozenset ({ 1 , 2 , 3 , 4 }) # -- \u521b\u5efa\u4e0d\u53ef\u53d8\u96c6\u5408 my_set . add ( 'abc' ) # -- \u4e3a\u96c6\u5408\u6dfb\u52a0\u5143\u7d20 my_set1 . update ( my_set2 ) # -- \u6dfb\u52a0\u65b0\u7684\u5143\u7d20\u6216\u96c6\u5408\u5230\u5f53\u524d\u96c6\u5408\u4e2d my_set . remove ( 'abc' ) # -- \u5220\u9664\u7ed3\u5408\u4e2d\u5df2\u77e5\u5143\u7d20,\u82e5\u5143\u7d20\u4e0d\u5b58\u5728,\u62a5\u9519 my_set . discard ( 'abc' ) # -- \u5220\u9664\u7ed3\u5408\u4e2d\u5df2\u77e5\u5143\u7d20,\u82e5\u5143\u7d20\u4e0d\u5b58\u5728,\u5ffd\u7565 my_set . clear () # -- \u6e05\u7a7a\u96c6\u5408 \"\"\" -- update \"\"\" >>> x = { 1 , 2 , 3 } >>> y = { 2 , 3 , 4 , 5 } >>> x . update ( y ) >>> x { 1 , 2 , 3 , 4 , 5 } >>> y { 2 , 3 , 4 , 5 } >>> x . update ( '6778' ) # -- \u4f1a\u8fdb\u884c\u904d\u5386,\u7ed3\u679c\u4f1a\u81ea\u52a8\u53bb\u91cd,\u5373\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u5177\u6709\u552f\u4e00\u6027 >>> x { 1 , 2 , 3 , 4 , 5 , '8' , '7' , '6' } >>> x . update ({ '6778' }) >>> x { 1 , 2 , 3 , 4 , 5 , '7' , '6' , '8' , '6778' }","title":"\u521b\u5efa\u3001\u589e\u5220\u6539"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/03_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%93%88%E5%B8%8C/#_9","text":"A<B -- \u5224\u65ad&NBSP;\u662f\u5426\u662fB\u7684 \u5b50\u96c6 {1,2,3,4}-{3,4,5,6} -- {1,2} \u5dee\u96c6 \u53d6\u4e00\u4e2a\u96c6\u5408\u4e2d\u53e6\u4e00\u4e2a\u96c6\u5408\u6ca1\u6709\u7684\u5143\u7d20 {1,2,3}|{3,4,5} -- {1,2,3,4,5} \u5e76\u96c6 {1,2,3}&{2,3,4} -- {2,3} \u4ea4\u96c6 {1,2,3,4,5}^{4,5,6,7} -- {1,2,3,6,7} \u5bf9\u79f0\u5dee\u96c6","title":"\u96c6\u5408\u7684\u8fd0\u7b97\u7b26"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/03_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%93%88%E5%B8%8C/#_10","text":"\u5b57\u5178\u7684\u5e95\u5c42\u662f\u501f\u52a9 \u54c8\u5e0c\u8868 \u5b9e\u73b0\u7684.. \u6240\u4ee5 \u5b57\u5178\u7684\u6dfb\u52a0\u3001\u5220\u9664\u3001\u67e5\u627e\u5143\u7d20\u7b49\u64cd\u4f5c\u7684\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(1). \u5f53\u7136\u8fd8\u662f\u8981\u77e5\u9053, \u5728 \u54c8\u5e0c\u4e0d\u5747\u5300 \u7684\u60c5\u51b5\u4e0b, \u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n), \u4f46\u662f\u8fd9\u79cd\u60c5\u51b5\u5f88\u5c11\u53d1\u751f. \u5b57\u5178\u7684\"\u5feb\"\u4e0d\u4f1a\u53d7\u5230\u6570\u636e\u91cf\u7684\u5f71\u54cd, \u4ece\u542b\u6709\u4e00\u4e07\u4e2a\u952e\u503c\u5bf9\u548c\u542b\u6709\u4e00\u5343\u4e07\u4e2a\u952e\u503c\u5bf9\u7684\u5b57\u5178\u4e2d\u67e5\u627e,\u4e24\u8005\u82b1\u8d39\u7684\u65f6\u95f4\u51e0\u4e4e\u662f\u6ca1\u6709\u533a\u522b\u7684","title":"\u5b57\u5178\u96c6\u5408\u7684\u9ad8\u6027\u80fd"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/03_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%93%88%E5%B8%8C/#_11","text":"\u4ece\u6d4b\u8bd5\u4e2d\u6211\u4eec\u770b\u5230, \u968f\u7740\u5faa\u73af\u6b21\u6570\u8d8a\u6765\u8d8a\u591a, \u5217\u8868\u6240\u82b1\u8d39\u7684\u603b\u65f6\u95f4\u8d8a\u6765\u8d8a\u957f. \u4f46\u5b57\u5178\u67e5\u8be2\u6240\u82b1\u8d39\u7684\u65f6\u95f4\u6781\u5c11, \u67e5\u8be2\u901f\u5ea6\u975e\u5e38\u5feb, \u5373\u4fbf\u5faa\u73af20\u4e07\u6b21, \u82b1\u8d39\u7684\u603b\u65f6\u95f4\u4e5f\u4e0d\u8fc70.06\u79d2.. import time import numpy as np def test ( count : int , value : int ): \"\"\" :param count: \u5faa\u73af\u6b21\u6570 :param value: \u67e5\u8be2\u7684\u5143\u7d20 :return: \"\"\" lst = list ( np . random . randint ( 0 , 2 ** 30 , size = 1000 )) # --\u62e5\u6709\u4e00\u5343\u4e07\u4e2a\u968f\u673a\u6570\u7684\u5217\u8868 d = dict . fromkeys ( lst ) # --\u6839\u636e\u8fd9\u4e2a\u5217\u8868\u6784\u9020\u51fa\u542b\u6709\u4e00\u5343\u4e07\u4e2a\u952e\u503c\u5bf9\u7684\u5b57\u5178 print ( f \"\u67e5\u8be2\u6b21\u6570\u4e3a { count } \u6b21 --:>\" ) # --\u67e5\u8be2\u5143\u7d20value\u662f\u5426\u5728\u5217\u8868\u4e2d,\u5faa\u73afcount\u6b21,\u5e76\u7edf\u8ba1\u65f6\u95f4 t1 = time . perf_counter () for _ in range ( count ): value in lst t2 = time . perf_counter () print ( \" \u5217\u8868\u67e5\u8be2\u8017\u65f6:\" , round ( t2 - t1 , 2 )) # --\u67e5\u8be2\u5143\u7d20value\u662f\u5426\u5728\u5b57\u5178\u4e2d,\u5faa\u73afcount\u6b21,\u5e76\u7edf\u8ba1\u65f6\u95f4 t1 = time . perf_counter () for _ in range ( count ): value in d t2 = time . perf_counter () print ( \" \u5b57\u5178\u67e5\u8be2\u8017\u65f6:\" , round ( t2 - t1 , 2 )) # --\u5206\u522b\u67e5\u8be2\u4e00\u5343\u6b21\u3001\u4e00\u4e07\u6b21\u3001\u5341\u4e07\u6b21\u3001\u4e8c\u5341\u4e07\u6b21 test ( 10 ** 3 , 22333 ) test ( 10 ** 4 , 22333 ) test ( 10 ** 5 , 22333 ) test ( 10 ** 5 * 2 , 22333 ) \"\"\" \u67e5\u8be2\u6b21\u6570\u4e3a1000\u6b21 --:> \u5217\u8868\u67e5\u8be2\u8017\u65f6: 0.09 \u5b57\u5178\u67e5\u8be2\u8017\u65f6: 0.0 \u67e5\u8be2\u6b21\u6570\u4e3a10000\u6b21 --:> \u5217\u8868\u67e5\u8be2\u8017\u65f6: 0.58 \u5b57\u5178\u67e5\u8be2\u8017\u65f6: 0.0 \u67e5\u8be2\u6b21\u6570\u4e3a100000\u6b21 --:> \u5217\u8868\u67e5\u8be2\u8017\u65f6: 5.42 \u5b57\u5178\u67e5\u8be2\u8017\u65f6: 0.02 \u67e5\u8be2\u6b21\u6570\u4e3a200000\u6b21 --:> \u5217\u8868\u67e5\u8be2\u8017\u65f6: 12.2 \u5b57\u5178\u67e5\u8be2\u8017\u65f6: 0.06 \"\"\"","title":"\u5b9e\u9a8c\u4e00: \u67e5\u8be2\u5143\u7d20\u6548\u7387"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/03_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%93%88%E5%B8%8C/#_12","text":"\u67d0\u7535\u5546\u4f01\u4e1a\u7684\u540e\u53f0, \u5b58\u50a8\u4e86\u6bcf\u4ef6\u4ea7\u54c1\u7684 ID\u548c\u4ef7\u683c.. \u73b0\u9700\u6839\u636e\u7ed9\u5b9a\u7684\u67d0\u4ef6\u5546\u54c1ID,\u627e\u51fa\u5176\u4ef7\u683c.. \"\"\" \u6bcf\u4ef6\u4ea7\u54c1\u7684ID\u548c\u4ef7\u683c\u7684\u5b58\u50a8,\u6709\u4e24\u4e2a\u65b9\u6848: 1> \u7528\u5217\u8868\u5b58\u50a8 2> \u7528\u5b57\u5178\u5b58\u50a8 \u65b9\u6848\u4e00,\u5047\u8bbe\u5217\u8868\u6709n\u4e2a\u5143\u7d20,\u67e5\u627e\u9700\u8981\u904d\u5386\u5217\u8868,\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n); \u5373\u904d\u6211\u4eec\u5148\u5bf9\u5217\u8868\u8fdb\u884c\u6392\u5e8f,\u6392\u5e8f\u9700\u8981O(nlogn)\u65f6\u95f4;\u7136\u540e\u4f7f\u7528\u4e8c\u5206\u67e5\u627e,\u4e8c\u5206\u6cd5\u9700\u8981O(logn)\u65f6\u95f4.. \u65b9\u6848\u4e8c,\u53ea\u9700O(1)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u53ef\u4ee5\u5b8c\u6210!!! \"\"\" products_list = [( 143121312 , 100 ), ( 432314553 , 30 ), ( 32421912367 , 150 )] products_dict = { 143121312 : 100 , 432314553 : 30 , 32421912367 : 150 } def find_product_price ( proID , products_list ): for id , price in products_list : if id == proID : return price print ( find_product_price ( 32421912367 , products_list )) # 150 print ( products_dict [ 32421912367 ]) # 150 \u73b0\u9700\u7edf\u8ba1\u8fd9\u4e9b\u5546\u54c1\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u4ef7\u683c.. (\u5047\u5b9a\u5546\u54c1\u7684ID\u548c\u4ef7\u683c\u662f\u7528\u5217\u8868\u5b58\u50a8\u7684) \u4ec5\u4ec5\u6a21\u62df\u4e86\u5341\u4e07\u7684\u6570\u636e\u91cf, \u4e24\u8005\u7684\u901f\u5ea6\u5dee\u5f02\u5c31\u5982\u6b64\u4e4b\u5927! \u4e8b\u5b9e\u4e0a, \u5927\u578b\u4f01\u4e1a\u7684\u540e\u53f0\u6570\u636e\u5f80\u5f80\u6709\u4e0a\u4ebf\u4e43\u81f3\u5341\u4ebf\u6570\u91cf\u7ea7, \u5982\u679c\u4f7f\u7528\u4e86\u4e0d\u5408\u9002\u7684\u6570\u636e\u7ed3\u6784, \u5c31\u5f88\u5bb9\u6613\u9020\u6210\u670d\u52a1\u5668\u7684\u5d29\u6e83, \u4e0d\u4f46\u5f71\u54cd\u7528\u6237\u4f53\u9a8c, \u5e76\u4e14\u4f1a\u7ed9\u516c\u53f8\u5e26\u6765\u5de8\u5927\u7684\u8d22\u4ea7\u635f\u5931.. # -- \u4f7f\u7528\u5217\u8868\u7edf\u8ba1\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)*O(m) m\u7684\u5927\u5c0f\u662f\u4e0d\u65ad\u53d8\u5927\u7684m<=n def find_unique_price_using_list ( products_list ): unique_price_list = [] for _ , price in products_list : # -- \u904d\u5386\u5546\u54c1\u5217\u8868 O(n) if price not in unique_price_list : # -- in\u64cd\u4f5c\u904d\u5386unique\u5217\u8868 O(m),\u6700\u574f\u65f6m=n unique_price_list . append ( price ) # -- \u672b\u5c3e\u63d2\u5165\u64cd\u4f5c O(1) return len ( unique_price_list ) # -- \u4f7f\u7528\u96c6\u5408\u7edf\u8ba1\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n) def find_unique_price_using_set ( products_list ): unique_price_set = set () # -- \u96c6\u5408\u4f1a\u81ea\u52a8\u53bb\u91cd for _ , price in products_list : # -- O(n) unique_price_set . add ( price ) # -- O(1) return len ( unique_price_set ) # -- \u6a21\u62df\u51fa10\u4e07\u6761\u5546\u54c1\u6570\u636e # -- enumerate\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668!\u8282\u7701\u4e86\u7a7a\u95f4!\u4e00\u6b21\u53ea\u4ea7\u751f\u4e00\u4e2a\u503c\u5728\u5185\u5b58\u91cc # \u6240\u4ee5len(products_list)\u4f1a\u5f88\u5feb\u5f88\u5feb,\u4f46\u5f88\u8be7\u5f02print(products_list)\u5f88\u6162,\u6162\u7684\u662f\u6253\u5370\u7684\u65f6\u95f4\uff01 products_list = list ( enumerate ( range ( 100000 ))) t1 = time . perf_counter () find_unique_price_using_list ( products_list ) t2 = time . perf_counter () print ( f \"\u5217\u8868\u65b9\u6848\u82b1\u8d39\u65f6\u95f4 { t2 - t1 } \" ) # -- \u5217\u8868\u65b9\u6848\u82b1\u8d39\u65f6\u95f4101.28520515 t1 = time . perf_counter () find_unique_price_using_set ( products_list ) t2 = time . perf_counter () print ( f \"\u96c6\u5408\u65b9\u6848\u82b1\u8d39\u65f6\u95f4 { t2 - t1 } \" ) # -- \u96c6\u5408\u65b9\u6848\u82b1\u8d39\u65f6\u95f40.09064802600001087","title":"\u5b9e\u9a8c\u4e8c: \u7535\u5546\u540e\u53f0\u6570\u636e"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/03_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%93%88%E5%B8%8C/#_13","text":"\u4e0d\u540c\u4e8e\u5176\u4ed6\u6570\u636e\u7ed3\u6784, \u5b57\u5178\u548c\u96c6\u5408\u7684\u5185\u90e8\u7ed3\u6784\u90fd\u662f\u4e00\u5f20\u54c8\u5e0c\u8868.. \u8fd9\u4f7f\u5f97\u8fdb\u884c\u67e5\u627e \u63d2\u5165 \u5220\u9664\u64cd\u4f5c\u65f6\u5f88\u9ad8\u6548!! \u53c2\u8003\u6587\u6863: -_-\u611f\u89c9\u81ea\u5df1\u597d\u83dc!! https://zhuanlan.zhihu.com/p/73426505 https://www.cnblogs.com/traditional/p/13503114.html \u4ecepy3.6\u5f00\u59cb,\u5b57\u5178\u5b58\u50a8\u7684\u5e95\u5c42\u539f\u7406\u88ab\u8fdb\u884c\u4e86\u4f18\u5316. \u5185\u7f6e\u5b57\u5178\u5df2\u7ecf\u662f\u6709\u5e8f\u5b57\u5178\u4e86! \u904d\u5386\u8fed\u4ee3\u51fa\u6765\u7684\u987a\u5e8f\u5c31\u662f\u5b58\u50a8\u7684\u987a\u5e8f. # -- \u53ef\u4ee5\u53d1\u73b0\u5b57\u5178\u6700\u7ec8\u7684\u7ed3\u679c\u7684\u987a\u5e8f\u5c31\u662f\u5b58\u50a8\u7684\u987a\u5e8f c a e d b >>> from random import randint >>> a = { k : randint ( 1 , 4 ) for k in 'caed' } >>> a { 'c' : 4 , 'a' : 2 , 'e' : 3 , 'd' : 3 } >>> a [ 'b' ] = 33 >>> a { 'c' : 4 , 'a' : 2 , 'e' : 3 , 'd' : 3 , 'b' : 33 } # -- \u8981\u6ce8\u610f\u54e6!!\u96c6\u5408\u662f\u4e0d\u4f1a\u81ea\u52a8\u6392\u5e8f\u7684,\u82e5\u9047\u5230\u4e86,\u53ea\u662f\u6070\u5de7 # -- \u6709\u70b9\u7591\u60d1\u7684\u662f,\u96c6\u5408\u548c\u5b57\u5178\u5e95\u5c42\u90fd\u4f7f\u7528\u7684\u662f\u54c8\u5e0c,\u4e3a\u4f55\u96c6\u5408\u6700\u7ec8\u7ed3\u679c\u7684\u987a\u5e8f\u4e0e\u5b58\u50a8\u7684\u987a\u5e8f\u4e0d\u4e00\u81f4 # \u731c\u6d4b\u662f\u4e0e\u96c6\u5408\u5e95\u5c42\u7684\u53bb\u91cd\u539f\u7406\u6709\u5173..\u9762\u5411\u5bf9\u8c61\u5b66\u4e60\u540e\u518d\u6df1\u7a76. >>> a = set ([ 1 , 3 , 8 , - 2 , 99 , 98 , 77 , 1 , 5 , 3 , 77 , 12 ]) >>> a { 1 , 98 , 3 , 99 , 5 , 8 , 12 , 77 , - 2 } >>> set ([ 1 , 3 , 2 ]) { 1 , 2 , 3 }","title":"\u5b57\u5178\u5de5\u4f5c\u539f\u7406"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/03_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%93%88%E5%B8%8C/#_14","text":"python3.5(\u542b)\u4e4b\u524d,\u5b57\u5178\u7684\u5e95\u5c42\u539f\u7406","title":"\u8001\u7248\u672c\u54c8\u5e0c\u8868"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/03_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%93%88%E5%B8%8C/#_15","text":"\u5f53\u6211\u4eec\u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u5b57\u5178\u7684\u65f6\u5019, CPython\u7684\u5e95\u5c42\u4f1a\u521d\u59cb\u5316\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4, \u8fd9\u4e2a\u6570\u7ec4\u67098\u884c, 3\u5217 \u7b2c\u4e00\u5217: \u54c8\u5e0c\u503c(hash) ; \u7b2c\u4e8c\u5217: \u952e(key) ; \u7b2c\u4e09\u5217: \u503c(value) \u6bcf\u4e00\u884c\u6709\u4e09\u5217, \u6bcf\u4e00\u5217\u5360\u7528 8byte \u7684\u5185\u5b58\u7a7a\u95f4, \u6240\u4ee5\u6bcf\u4e00\u884c\u4f1a\u5360\u7528 24byte \u7684\u5185\u5b58\u7a7a\u95f4 my_dict = {} \"\"\" \u7b80\u5355\u63cf\u7ed8\u6b64\u65f6\u7684\u5185\u5b58\u793a\u610f\u56fe \"\"\" [ [ --- , --- , --- ], [ --- , --- , --- ], [ --- , --- , --- ], [ --- , --- , --- ], [ --- , --- , --- ], [ --- , --- , --- ], [ --- , --- , --- ], [ --- , --- , --- ], ]","title":"\u521d\u59cb\u5316\u7a7a\u5217\u8868"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/03_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%93%88%E5%B8%8C/#_16","text":"\u7531\u4e8eHash\u503c\u53d6\u4f59\u6570\u4ee5\u540e, \u4f59\u6570\u53ef\u5927\u53ef\u5c0f, \u6240\u4ee5\u5b57\u5178\u7684Key\u5e76\u4e0d\u662f\u6309\u7167\u63d2\u5165\u7684\u987a\u5e8f\u5b58\u653e\u7684 step1 : \u8c03\u7528Python\u7684hash\u51fd\u6570,\u8ba1\u7b97\u952ename\u3001age\u3001salary\u5728 \u5f53\u524d\u8fd0\u884c \u65f6\u7684hash\u503c\uff01 \u7279\u522b\u5f3a\u8c03,\u662f\u5f53\u524d\u8fd0\u884c,\u56e0\u4e3apython\u81ea\u5e26\u7684hash\u51fd\u6570\u4e0d\u540c\u4e8e\u4f20\u7edf\u7684hash\u51fd\u6570,\u5f53python\u8fdb\u7a0b\u5173\u95ed\u540e,\u5bf9\u540c\u4e00\u4e2a\u503c\u7684\u54c8\u5e0c\u7ed3\u679c\u53ef\u80fd\u4e0d\u4e00\u6837 step2 : \u5c06name\u7684hash\u503c\u5bf98\u53d6\u4f59\u6570, \u82e5\u4f59\u6570\u4e3a5,\u5219\u4f1a\u628a\u8be5hash\u503c\u653e\u5728\u521a\u521a\u521d\u59cb\u5316\u7684\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u4e0b\u6807\u4e3a5\u7684\u8fd9\u4e00\u884c\u7684\u7b2c\u4e00\u5217; \u5e95\u5c42C\u8bed\u8a00\u4f1a\u4f7f\u7528\u4e24\u4e2a\u53d8\u91cf\u5b58\u653ehash(name)\u5bf9\u5e94\u7684\u952e\u548c\u503c..\u4f9d\u6b21\u653e\u5165hash\u503c\u6240\u5728\u884c\u7684\u7b2c\u4e8c\u3001\u4e09\u5217.. age\u3001salary\u540c\u7406.. key\u901a\u8fc7\u54c8\u5e0c\u51fd\u6570\u6620\u5c04\u6210\u4e00\u4e2a\u6570\u503c, \u4f5c\u4e3a\u7d22\u5f15. -- \u56e0\u800c\u54c8\u5e0c\u8868\u53c8\u79f0\u4e3a\u6620\u5c04\u8868! \u5373\u5c06key\u8f6c\u6362\u6210\u7c7b\u4f3c\u4e8e\u5217\u8868\u7684\u7d22\u5f15,\u4f46\u7d22\u5f15\u4e0d\u662f\u8fde\u7eed\u7684..\u662f\u968f\u673a\u7684 \u6240\u4ee5\u5b57\u5178\u4e0d\u53ef\u80fd\u50cf\u5217\u8868\u4e00\u6837\u901a\u8fc7\u4e0b\u6807\u53d6\u503c\u3001\u5207\u7247.. my_dict [ 'name' ] = 'dc' my_dict [ 'age' ] = 18 my_dict [ 'salary' ] = 999999 \"\"\" \u2605 --\u5f53\u524d\u8fd0\u884c\u65f6\u7684hash\u503c \"\"\" One_Piece @DCdeMacBook - Air ~ % python3 Python 3.8.7 ( v3 .8.7 : 6503 f05dd5 , Dec 21 2020 , 12 : 45 : 15 ) >>> hash ( 'name' ) - 3919752505198988186 >>> exit () One_Piece @DCdeMacBook - Air ~ % python3 Python 3.8.7 ( v3 .8.7 : 6503 f05dd5 , Dec 21 2020 , 12 : 45 : 15 ) >>> hash ( 'name' ) - 3236881314859452204 \"\"\" \u2605 --\u6b64\u65f6\u7684\u5185\u5b58\u793a\u610f\u56fe 1278649844881305901%8 == 5 1545085610920597121%8 == 1 4234469173262486640%8 == 0 \"\"\" [ [ - 4234469173262486640 , id ( salary ), id ( 999999 )], # -- id(salary)\u5185\u5b58\u5730\u5740\u5373\u6307\u5411salary\u7684\u6307\u9488 [ 1545085610920597121 , id ( age ), id ( 18 )], [ --- , --- , --- ], [ --- , --- , --- ], [ --- , --- , --- ], [ 1278649844881305901 , id ( name ), id ( kingname )], [ --- , --- , --- ], [ --- , --- , --- ] ]","title":"\u5f80\u5b57\u5178\u91cc\u6dfb\u52a0\u6570\u636e"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/03_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%93%88%E5%B8%8C/#_17","text":"\u5b58\u50a8\u65f6 hash('name') % 8 \u4f5c\u4e3a\u6570\u7ec4\u7684\u7d22\u5f15... \u5b57\u5178\u901a\u8fc7\u952e\u53d6\u503c\u65f6,\u540c\u7406, \u6309\u7167\u6b64\u516c\u5f0f\u5f97\u5230\u7d22\u5f15,\u518d\u6bd4\u8f83\u5224\u65ad\u540e\u53d6\u5230\u7ed3\u679c, \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1) \"\"\" \u2605 --\u5047\u8bbe\u6211\u4eec\u8981\u8bfb\u53d6age\u5bf9\u5e94\u7684\u503c \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1) -- \u56e0\u4e3a\u7d22\u5f15\u548ckey\u3001value\u662f\u4e00\u4e00\u5bf9\u5e94\u7684,\u6240\u4ee5\u901a\u8fc7\u7d22\u5f15\u6211\u4eec\u80fd\u77ac\u95f4\u5b9a\u4f4d\u5230\u6307\u5b9a\u7684key \"\"\" step1 : Python\u5148\u8ba1\u7b97\u5728\u5f53\u524d\u8fd0\u884c\u65f6 , age\u5bf9\u5e94\u7684Hash\u503c\u662f\u591a\u5c11 hash ( \"age\" ) step2 : hash ( \"age\" ) % 8 \u7ed3\u679c\u4e3a1 step3 : \u5bf9\u6bd4\u4e8c\u7ef4\u6570\u7ec4\u7d22\u5f15\u4e3a1\u7684\u4f4d\u7f6e \u5373\u7b2c\u4e8c\u884c\u7b2c\u4e00\u5217\u7684\u503c\u662f\u5426\u7b49\u4e8e hash ( \"age\" ) step3 : \u82e5\u7b49\u4e8e , \u53d6\u51fa\u7b2c\u4e8c\u884c\u7b2c\u4e09\u5217\u6307\u9488\u5bf9\u5e94\u5185\u5b58\u4e2d\u7684\u503c \u7ed3\u679c\u4e3a18 Ps : \u56e0\u4e3a\u90fd\u662f\u5728\u540c\u4e00\u4e2a\u5f53\u524d\u8fd0\u884c\u65f6 ( \u540c\u4e00\u4e2apython\u8fdb\u7a0b ), \u8fdb\u884c\u7684hash\u8fd0\u7b97 . \u6240\u4ee5\u5b58\u4e0e\u8bfb\u7684hash ( \"age\" ) \u503c\u662f\u4e00\u6837\u7684\u7684 . \"\"\" \u2605 --\u5047\u8bbe\u9700\u8981\u5faa\u73af\u904d\u5386\u5b57\u5178 \"\"\" Python\u5e95\u5c42\u4f1a\u904d\u5386\u8fd9\u4e2a\u4e8c\u7ef4\u6570\u7ec4 , \u5982\u679c\u5f53\u524d\u884c\u6709\u6570\u636e , \u90a3\u4e48\u5c31\u8fd4\u56deKey\u6307\u9488\u5bf9\u5e94\u7684\u5185\u5b58\u91cc\u9762\u7684\u503c . \u5982\u679c\u5f53\u524d\u884c\u6ca1\u6709\u6570\u636e , \u90a3\u4e48\u5c31\u8df3\u8fc7 .. \u8981\u6e05\u695a\u6653\u5f97\u904d\u5386\u5b57\u5178\u603b\u662f\u4f1a\u904d\u5386\u6574\u4e2a\u4e8c\u4f4d\u6570\u7ec4\u7684\u6bcf\u4e00\u884c ..","title":"\u8bfb\u53d6\u5b57\u5178\u6570\u636e"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/03_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%93%88%E5%B8%8C/#_18","text":"\u4e0d\u540c\u7684key\u8fdb\u884c\u54c8\u5e0c\u3001\u53d6\u6a21\u8fd0\u7b97\u4e4b\u540e\u5f97\u5230\u7684 \u7ed3\u679c/\u4e8c\u7ef4\u6570\u7ec4\u7d22\u5f15 \u53ef\u80fd\u4f1a\u662f\u76f8\u540c\u7684 \u6240\u4ee5\u4e0a\u8ff0\u7684\u5b58\u50a8\u548c\u8bfb\u53d6\u7684\u65b9\u5f0f\u5b58\u5728\u7f3a\u9677.. \u9700\u8981\u6539\u53d8\u7b56\u7565\u91cd\u65b0\u6620\u5c04\u5f97\u5230\u65b0\u7684\u7d22\u5f15,\u89e3\u51b3\u54c8\u5e0c\u51b2\u7a81\uff01\uff01 \u54c8\u5e0c\u51b2\u7a81\u4e3b\u8981\u6709\u4e24\u65b9\u9762: \u8bbe\u7f6e\u952e\u503c\u5bf9\u3001\u6839\u636e\u952e\u83b7\u53d6\u503c \u4e3e\u4e2a\u4f8b\u5b50 : ( \u4f9d\u6b21\u6267\u884cABC\u64cd\u4f5c ) my_dict [ 'xx' ] = 00 # A my_dict [ 'yy' ] = 11 # B my_dict [ 'xx' ] = 01 # C \u901a\u8fc7\u8fd0\u7b97 hash ( 'xx' ) % 8 == hash ( 'yy' ) % 8 == 1 \u5148\u6210\u529f\u5b58\u50a8\u952e\u503c\u5bf9 { 'xx' : 00 }; \u518d\u6dfb\u52a0\u952e\u503c\u5bf9 { 'yy' : 11 } \u65f6\u53d1\u73b0\u4e8c\u7ef4\u6570\u7ec4\u7d22\u5f15\u4e3a1\u7684\u4f4d\u7f6e\u88ab\u5360\u7528\u4e86 .. \u5148\u5224\u65adkey\u503c\u662f\u5426\u4e00\u6837 , 'yy' != 'xx' Python\u5e95\u5c42\u4f1a\u6539\u53d8\u7b56\u7565\u91cd\u65b0\u6620\u5c04 , \u76f4\u5230\u6620\u5c04\u51fa\u6765\u7684\u7d22\u5f15\u6ca1\u6709\u88ab\u5360\u7528 .. \u5047\u8bbe\u901a\u8fc7\u8be5\u7b56\u7565\u6620\u5c04\u51fa\u7684\u7d22\u5f15\u503c\u4e3a4 , \u90a3\u4e48\u952e\u503c\u5bf9 { 'yy' : 11 } \u5c31\u4f1a\u5b58\u50a8\u5230\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7d22\u5f15\u4e3a4\u7684\u4f4d\u7f6e .. \u8fdb\u884cC\u64cd\u4f5c\u65f6 , \u5728\u8fdb\u884ckey\u503c\u662f\u5426\u76f8\u7b49\u5224\u65ad\u65f6 , \u7ed3\u679c\u4e3a\u76f8\u7b49 , \u5219\u76f4\u63a5\u4fee\u6539\u952e \"xx\" \u7684\u503c\u4e3a01 \u4e3e\u4e2a\u4f8b\u5b50 : my_dict [ 'zz' ] my_dict [ 'xx' ] my_dict [ 'yy' ] my_dict [ 'zz' ] \u8fd0\u7b97\u5f97\u5230\u7d22\u5f15 , \u4e8c\u7ef4\u6570\u7ec4\u8be5\u7d22\u5f15\u4f4d\u7f6e\u6ca1\u6709\u6570\u636e , \u76f4\u63a5\u62a5\u9519 , \u5b57\u5178\u4e2d\u6ca1\u6709\u952e \"zz\" my_dict [ 'xx' ] \u8fd0\u7b97\u5f97\u5230\u7d22\u5f15\u540e , \u53d1\u73b0\u8be5\u4f4d\u7f6e\u88ab\u5360\u7528\u4f46\u8be5\u4f4d\u7f6e\u7684key\u5c31\u662f 'xx' , \u76f4\u63a5\u83b7\u53d6\u5230\u503c ! my_dict [ 'yy' ] \u8fd0\u7b97\u5f97\u5230\u7d22\u5f15\u540e , \u53d1\u73b0\u8be5\u4f4d\u7f6e\u88ab\u5360\u7528\u4e14\u8be5\u4f4d\u7f6e\u7684key\u4e0d\u662f 'yy' .. \u6539\u53d8\u7b56\u7565 ( \u4e0e\u5b58\u50a8\u65f6\u89e3\u51b3\u54c8\u5e0c\u51b2\u7a81\u7684\u7b56\u7565\u4e00\u81f4 ), \u91cd\u65b0\u5f97\u5230\u7d22\u5f15\u4e3a4 , \u53d1\u73b0\u6b64\u4f4d\u7f6e\u7684key\u5c31\u662f 'yy' , \u6210\u529f\u53d6\u503c . \u6240\u8c13\u7684\u7b56\u7565\u4e0d\u5fc5\u6df1\u7a76.. \u6709\u5f00\u653e\u5bfb\u5740\u6cd5\u3001\u94fe\u63a5\u6cd5\u7b49.. \u5f00\u653e\u5bfb\u5740\u6cd5 : \u5982\u679c\u54c8\u5e0c\u8fd0\u7b97\u540e\u8fd4\u56de\u7684\u7d22\u5f15\u4f4d\u7f6e\u5df2\u7ecf\u88ab\u5360\u7528, \u5219\u53ef\u4ee5\u901a\u8fc7\u7ebf\u6027\u63a2\u67e5\u3001\u5e73\u65b9\u63a2\u67e5\u7b49\u627e\u7a7a\u4f4d\u7f6e; \u94fe\u63a5\u6cd5 : \u7528\u94fe\u8868\u7684\u65b9\u5f0f(\u589e\u52a0\u7ed3\u70b9)\u5c06\u54c8\u5e0c\u8fd0\u884c\u7ed3\u679c\u76f8\u540c\u7684\u952e\u503c\u5bf9\u94fe\u63a5\u8d77\u6765.. java\u7684hashmap\u5c31\u662f\u8fd9\u6837\u505a\u7684..","title":"\u54c8\u5e0c\u51b2\u7a81"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/03_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%93%88%E5%B8%8C/#_19","text":"2/3 8,16,32... \u4e0d\u65ad\u6269\u5bb9\u4e0d\u65ad\u7a00\u758f \u6269\u5bb9\u9700\u8981\u8fdb\u884c\u65e7\u6570\u636e\u642c\u8fc1O(n)\u7ea7\u522b\u64cd\u4f5c \u5b57\u5178\u4e0d\u4f1a\u50cf\u5217\u8868\u90a3\u6837\u5bb9\u91cf\u4e0d\u591f\u65f6\u624d\u6269\u5bb9, \u5f53\u5b57\u5178\u7684\u952e\u503c\u5bf9\u6570\u91cf\u8d85\u8fc7\u5f53\u524d\u6570\u7ec4\u957f\u5ea6\u76842/3\u65f6, \u4e3a\u4e86\u4fdd\u8bc1\u76f8\u5173\u64cd\u4f5c\u7684\u9ad8\u6548\u6027\u5e76\u907f\u514d\u54c8\u5e0c\u51b2\u7a81. \u6570\u7ec4\u4f1a\u8fdb\u884c\u6269\u5bb9, \u91cd\u65b0\u5206\u914d\u66f4\u5927\u7684\u5185\u5b58, 8\u884c\u53d8\u621016\u884c, 16\u884c\u53d8\u621032\u884c. So, \u4e0d\u65ad\u7684\u6269\u5bb9\u4f1a\u4f7f\u54c8\u5e0c\u8868(\u4e8c\u7ef4\u6570\u7ec4)\u7684\u5bb9\u91cf\u8d8a\u6765\u8d8a\u5927,\u8fd9\u6837\u4e00\u6765,\u7a7a\u95f2\u7684\u4f4d\u7f6e\u8d8a\u6765\u8d8a\u591a(\u81f3\u5c11\u5360\u636e\u6570\u7ec4\u5bb9\u91cf\u7684\u4e09\u5206\u4e4b\u4e00),\u54c8\u5e0c\u8868\u4fbf\u4f1a\u8d8a\u6765\u8d8a\u7a00\u758f.. \u8fd8\u9700\u8981\u6ce8\u610f\u7684\u662f, \u6269\u5bb9\u540e\u9700\u8981\u91cd\u65b0\u7533\u8bf7\u5185\u5b58\u7a7a\u95f4,\u5c06\u65e7\u6570\u636e\u91cd\u65b0hash\u5230\u65b0\u6570\u7ec4\u4e2d ...\u662fO(n)\u7ea7\u522b\u7684\u64cd\u4f5c... Ps: redis\u4f7f\u7528\u6e10\u8fdb\u5f0frehash,\u4e00\u70b9\u4e00\u70b9\u6269\u5bb9","title":"\u6269\u5bb9"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/03_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%93%88%E5%B8%8C/#_20","text":"\u65e7\u54c8\u5e0c\u8868\u4e0d\u65ad\u6269\u5bb9,\u8d8a\u6765\u8d8a\u7a00\u758f,\u4f1a\u6d6a\u8d39\u5927\u91cf\u7684\u5185\u5b58\u7a7a\u95f4.. \u4e3a\u4e86\u907f\u514d\u7a7a\u95f4\u7684\u6d6a\u8d39,py3.6\u5f00\u59cb\u5bf9\u54c8\u5e0c\u8868\u8fdb\u884c\u4e86\u4f18\u5316!!","title":"\u65b0\u7248\u672c\u54c8\u5e0c\u8868"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/03_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%93%88%E5%B8%8C/#_21","text":"\u4ecePy3.6\u5f00\u59cb, \u5b57\u5178\u7684\u5e95\u5c42\u6570\u636e\u7ed3\u6784\u53d1\u751f\u4e86\u53d8\u5316.. \u521d\u59cb\u5316\u4e00\u4e2a\u5b57\u5178\u4ee5\u540e, CPython\u7684\u5e95\u5c42\u4f1a\u521d\u59cb\u5316\u4e00\u4e2a\u957f\u5ea6\u4e3a8\u7684\u4e00\u7ef4\u6570\u7ec4\u548c\u4e00\u4e2a\u7a7a\u7684\u4e8c\u7ef4\u6570\u7ec4 my_dict = {} \"\"\" \u7b80\u5355\u63cf\u7ed8\u6b64\u65f6\u7684\u5185\u5b58\u793a\u610f\u56fe \"\"\" # -- 'None'\u4ee3\u8868\u8fd9\u4e2a\u4f4d\u7f6e\u5206\u914d\u4e86\u5185\u5b58\u4f46\u6ca1\u6709\u5143\u7d20 indices = [ None , None , None , None , None , None , None , None ] entries = []","title":"\u521d\u59cb\u5316\u7a7a\u5217\u8868"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/03_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%93%88%E5%B8%8C/#_22","text":"1> \u5f53\u6211\u8981\u63d2\u5165\u65b0\u7684\u6570\u636e\u7684\u65f6\u5019, \u59cb\u7ec8\u53ea\u662f\u5f80 entries \u7684\u540e\u9762\u6dfb\u52a0\u6570\u636e, \u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u63d2\u5165\u7684\u987a\u5e8f.. 2> \u5f53\u6211\u4eec\u8981\u904d\u5386\u5b57\u5178\u7684Keys\u548cValues\u7684\u65f6\u5019, \u76f4\u63a5\u904d\u5386 entries \u5373\u53ef \u91cc\u9762\u6bcf\u4e00\u884c\u90fd\u662f\u6709\u7528\u7684\u6570\u636e, \u4e0d\u5b58\u5728\u8df3\u8fc7\u7684\u60c5\u51b5, \u51cf\u5c11\u4e86\u904d\u5386\u7684\u4e2a\u6570!! 3> \u54c8\u5e0c\u8868\u4e0d\u65ad\u6269\u5145, \u54c8\u5e0c\u8868\u8d8a\u6765\u8d8a\u7a00\u758f\u7684\u60c5\u51b5\u53ea\u4f1a\u51fa\u73b0\u5728 entries \u8fd9\u4e2a\u4e00\u4f4d\u6570\u7ec4\u4e2d... \u6dfb\u52a0\u6570\u636e: \u63d2\u5165\u952e\u503c\u5bf9 {'name':'dc'} , hash('name')%8 == 5 \u628a indices \u8fd9\u4e2a\u4e00\u7ef4\u6570\u7ec4\u91cc\u9762,\u4e0b\u6807\u4e3a5\u7684\u4f4d\u7f6e\u7684\u503c\u4fee\u6539\u4e3a0 0\u662f\u952e\u503c\u5bf9{'name':'dc'}\u5728\u4e8c\u7ef4\u6570\u7ec4 entries \u7684\u884c\u7d22\u5f15, \u5176\u4f59\u540c\u7406 \u4f9d\u6b21\u6dfb\u52a0\u952e\u503c\u5bf9'name'\u3001'age'\u3001'salary', \u5b83\u4ee8\u5728entries\u7684\u884c\u7d22\u5f15\u4f9d\u6b21\u4e3a 0 1 2.. \u8bfb\u53d6\u6570\u636e : hash('salary')%8 == 0 ; indices[0] == 2 ; \u5219salary\u6240\u5bf9\u5e94\u7684\u952e\u503c\u5bf9\u5728entries[2]\u4e2d.. Indices \u4e2d\u5143\u7d20\u7684\u503c, \u5bf9\u5e94 entries \u4e2d\u76f8\u5e94\u7684\u7d22\u5f15 !!! my_dict [ 'name' ] = 'dc' my_dict [ 'age' ] = 18 my_dict [ 'salary' ] = 999999 \"\"\" \u2605 --\u6b64\u65f6\u7684\u5185\u5b58\u793a\u610f\u56fe 1278649844881305901%8 == 5 'name' 1545085610920597121%8 == 1 'age' 4234469173262486640%8 == 0 'salary' \"\"\" # -- \u65b0\u54c8\u5e0c\u8868 \u5c06\u5b58\u50a8\u7684\u6570\u636e\u4f9d\u6b21\u5b58\u5165\u4e86\u4e8c\u7ef4\u6570\u7ec4entries\u4e2d # \u5c06key\u503c\u901a\u8fc7\u54c8\u5e0c\u8fd0\u7b97\u5f97\u5230\u7684\u7d22\u5f15\u503c\u4e0e\u952e\u503c\u5bf9\u5728\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15,\u8fd9\u4e24\u8005\u7684\u5bf9\u5e94\u5173\u7cfb\u5b58\u50a8\u5230\u4e86\u4e00\u7ef4\u6570\u7ec4indices\u4e2d # \u4e00\u7ef4\u6570\u7ec4\u7684\u4e0b\u6807:key\u901a\u8fc7\u54c8\u5e0c\u8fd0\u7b97\u5f97\u5230\u7684\u7d22\u5f15\u503c \u4e00\u7ef4\u6570\u7ec4\u8be5\u4e0b\u6807\u7684\u503c:\u952e\u503c\u5bf9\u5728\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15 indices = [ 2 , 1 , None , None , None , 0 , None , None ] entries = [ [ 1278649844881305901 , id ( name ), id ( kingname )], [ 1545085610920597121 , id ( age ), id ( 18 )], [ - 4234469173262486640 , id ( salary ), id ( 999999 )], ] \u65b0\u54c8\u5e0c\u8868\u8282\u7701\u4e86\u5927\u91cf\u7684\u7a7a\u95f4 \"\"\" \u65e7\u54c8\u5e0c\u8868 3*8*8==192byte \u65b0\u54c8\u5e0c\u8868\u7684\u4e00\u4f4d\u6570\u7ec4\u53ea\u5360\u636e8byte 3*8*3+8==80byte \u8282\u7701 (192-80)/80==58% \"\"\" # -- \u4e0e\u65e7\u54c8\u5e0c\u8868\u7684\u5b58\u50a8\u505a\u4e2a\u5bf9\u6bd4 [ [ - 4234469173262486640 , id ( salary ), id ( 999999 )], # -- salary [ 1545085610920597121 , id ( age ), id ( 18 )], # -- age [ --- , --- , --- ], [ --- , --- , --- ], [ --- , --- , --- ], [ 1278649844881305901 , id ( name ), id ( kingname )], # -- name [ --- , --- , --- ], [ --- , --- , --- ] ]","title":"\u6dfb\u52a0\u3001\u8bfb\u53d6\u6570\u636e"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/04_%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/","text":"\u5728\u51fd\u6570\u5f00\u59cb\u4e4b\u524d,\u58f0\u660e\u4e0b\u6211\u7684\u4e00\u4e2a\u57fa\u7840\u6982\u5ff5\u7684\u8ba4\u77e5\u9519\u8bef, namescope\u6307\u7684\u662f\u547d\u540d\u7a7a\u95f4! scope\u6307\u7684\u662f\u4f5c\u7528\u57df! \u6211\u6df7\u7528\u4e86..\u5728\u7c7b\u7684\u5b66\u4e60\u4e2d\u624d\u8ba4\u8bc6\u5230\u8fd9\u4e2a\u95ee\u9898.. \u95ee\u9898\u4e0d\u5927. \u51fd\u6570\u7684\u5b9a\u4e49\u8c03\u7528 \u00b6 \u51fd\u6570\u7684\u4f7f\u7528\u5fc5\u987b\u9075\u5faa\u5148\u5b9a\u4e49,\u540e\u8c03\u7528\u7684\u539f\u5219 \u6269\u5c55: \u63d0\u9ad8\u5065\u58ee\u6027 -- https://www.cnblogs.com/liuqingzheng/p/11012099.html (\u8be5\u7bc7\u535a\u6587\u7684\u5f00\u5934\u5199\u9519\u4e86, python\u662f\u4e00\u95e8\u5f3a\u7c7b\u578b\u8bed\u8a00!!\u4e0d\u662f\u5f31\u7c7b\u578b.) \u4f7f\u7528\u8be5\u65b9\u5f0f,\u4f20\u9012\u7684\u5b9e\u53c2\u6216\u8005\u8fd4\u56de\u7684\u6570\u636e\u4e0d\u662f\u6307\u5b9a\u7684\u7c7b\u578b,\u4e0d\u4f1a\u62a5\u9519,\u6307\u5b9a\u7684\u90a3\u4e9b\u4e1c\u897f\u4e5f\u4e0d\u4f1a\u5141\u8bb8,\u53ea\u662f\u8f85\u52a9,\u5199\u6765\u65b9\u4fbf\u770b\u7684.. \u50cfjava\u548cgo\u8fd9\u4e9b\u7f16\u8bd1\u578b\u8bed\u8a00,\u5fc5\u987b\u6307\u5b9a\u7c7b\u578b\u5e76\u4e14\u4f20\u6307\u5b9a\u7684\u7c7b\u578b,\u4e0d\u7136\u62a5\u9519.. \u975e\u5e38\u4e25\u683c. \u52a8\u6001\u4e00\u65f6\u723d, \u91cd\u6784\u706b\u846c\u573a. Python\u4e2d\u7684\u9519\u8bef\u81f3\u5c11\u6709\u4e24\u79cd: \u8bed\u6cd5/\u89e3\u6790\u9519\u8bef -- \u8bed\u53e5\u6216\u8868\u8fbe\u5f0f\u5728\u8bed\u6cd5\u4e0a\u7684\u9519\u8bef \u5f02\u5e38 -- \u5728\u6267\u884c\u65f6\u68c0\u6d4b\u5230\u7684\u9519\u8bef\u88ab\u79f0\u4e3a\u5f02\u5e38 \u51fd\u6570 \u5b9a\u4e49 \u9636\u6bb5: \u53ea\u68c0\u6d4b\u51fd\u6570\u4f53\u7684\u8bed\u6cd5,\u4e0d\u6267\u884c\u51fd\u6570\u4f53\u4ee3\u7801 \u51fd\u6570 \u8c03\u7528 \u9636\u6bb5: \u6267\u884c\u51fd\u6570\u4f53\u4ee3\u7801 \"\"\" a.py\u6a21\u5757\u4e0b\u53ea\u6709\u8fd9\u4e9b\u4ee3\u7801,\u8fd0\u884ca.py\u6587\u4ef6. \u7b2c5\u884c\u4f1a\u62a5\u8bed\u6cd5\u9519\u8bef. \u7b2c\u4e8c\u884c\u6ca1\u62a5\u9519,\u8bc1\u660e\u4e86\u5728\u5b9a\u4e49\u9636\u6bb5\u51fd\u6570\u4f53\u4ee3\u7801\u662f\u4e0d\u4f1a\u6267\u884c\u7684!! \u6253\u5f00\u6ce8\u91ca \u8c03\u7528func\u51fd\u6570,\u5f00\u59cb\u6267\u884c\u51fd\u6570\u4f53\u4ee3\u7801,\u7b2c\u4e8c\u884c\u4f1a\u62a5UnboundLocalError\u7684\u5f02\u5e38 \"\"\" def func (): a a = b + 1 yuasyf m n p # func() \u51fd\u6570\u5b9a\u4e49\u7684 \u89c4\u8303 \u5199\u6cd5: def \u51fd\u6570\u540d ( \u53c2\u65701 , \u53c2\u65702 , ... ): \"\"\" \u51fd\u6570\u529f\u80fd\u63cf\u8ff0\u6d88\u606f :param \u53c2\u65701:\u63cf\u8ff0 :param \u53c2\u65702:\u63cf\u8ff0 :return: \u8fd4\u56de\u503c \"\"\" pass \u51fd\u6570\u8fd4\u56de\u503c \u51fd\u6570\u4e2d\u4e0d\u5199return\u6216return\u4e0d\u5e26\u4efb\u4f55\u8fd4\u56de\u503c,\u90fd\u76f8\u5f53\u4e8e\u5728\u51fd\u6570\u4f53\u6700\u540e\u4e00\u884c\u6dfb\u52a0 return None \u51fd\u6570\u53c2\u6570\u4f20\u9012 \u00b6 \u6572\u91cd\u70b9, \u51fd\u6570\u53c2\u6570\u4f20\u9012\u7b49\u540c\u4e8e\u76f4\u63a5\u8d4b\u503c, \u6839\u636e \u5b9a\u74061 , \u51fd\u6570\u88ab\u8c03\u7528\u540e, \u51fd\u6570\u7684\u53c2\u6570\u5c31\u662f\u5c40\u90e8\u53d8\u91cf!! \u8d4b\u503c\u64cd\u4f5c \u00b6 \u5728\u7406\u6e05\u51fd\u6570\u53c2\u6570\u4f20\u9012\u4e4b\u524d,\u8981\u5148\u8bb0\u4f4f\u4e24\u4e2a\u91cd\u8981\u7684\u5b9a\u7406!! \u975e\u5e38\u91cd\u8981! \u77e5\u5176\u7136\u8981\u77e5\u5176\u6240\u4ee5\u7136.. \u25ce \u5b9a\u74061 : python\u5728\u4f5c\u7528\u57df\u91cc\u5bf9\u53d8\u91cf\u7684 \u8d4b\u503c\u64cd\u4f5c \u89c4\u5219: \u82e5\u88ab\u8d4b\u503c\u7684\u53d8\u91cf\u5728\u8be5\u4f5c\u7528\u57df\u5df2\u5b58\u5728,\u5219\u5bf9\u5176\u7ed1\u5b9a\u65b0\u7684\u5bf9\u8c61; \u82e5\u4e0d\u5b58\u5728,\u5219\u5c06\u6b64\u6b21\u8d4b\u503c\u89c6\u4e3a\u5bf9\u8fd9\u4e2a\u53d8\u91cf\u7684\u5b9a\u4e49.. \u63d0\u4e00\u5634\u54c8,\u5b9a\u74061\u7684\u7531\u6765\u8ddf\u53d8\u91cf\u7684\u53ef\u89c1\u6027\u7684\u5224\u5b9a\u6709\u5173!! \u25ce \u5b9a\u74062 : python\u4e2d\u7684\u7ed1\u5b9a\u64cd\u4f5c(eg \u8d4b\u503c)\u90fd\u662f\u5bf9\u8c61\u5f15\u7528(\u5185\u5b58\u5730\u5740)\u7684\u4f20\u9012 \u6362\u4e2a\u8bf4\u6cd5,\u4e00\u7cfb\u5217\u7684\u7ed1\u5b9a\u64cd\u4f5c\u90fd\u662f\u5728\u4f20\u9012\u67d0\u4e00\u5bf9\u8c61\u7684\u5730\u5740\u7ed9\u67d0\u4e00\u53d8\u91cf\u540d\u8fdb\u884c\u7ed1\u5b9a!! \u5f15\u7528\u662f\u5565\uff1f\u5f15\u7528\u5c31\u662f\u6307\u5411. \u53d8\u91cf\u540d\u6307\u5411\u81ea\u8eab\u7ed1\u5b9a\u5bf9\u8c61\u7684\u5185\u5b58\u5730\u5740!! \u200b \u88ab\u8d4b\u503c = (\u53f3\u4fa7\u7684\u53d8\u91cf/\u5bf9\u8c61\u4eec)\u88ab\u5f15\u7528 -- \u627e\u5230\u5f15\u7528\u53d8\u91cf\u7ed1\u5b9a\u7684\u5bf9\u8c61, \u8fdb\u884c\u8fd0\u7b97\u540e\u7684\u7ed3\u679c/\u5bf9\u8c61 \u4f20\u9012\u7ed9\u88ab\u8d4b\u503c\u7684\u53d8\u91cf \u5728\u8fd9\u91cc,\u4f53\u4f1a\u4e0b \"python\u5f15\u7528\u8bed\u4e49\" \u5e26\u6765\u7684 \u5751 .. \u25b2\u9700\u6c42:\u5faa\u73af\u53bb\u9664\u5217\u8868\u4e2d\u76843 \"\"\" \u5206\u6790: \u6211\u4eec\u77e5\u9053,A\u64cd\u4f5c\u4f1a\u6839\u636enums\u5217\u8868\u7684 \"\u4e0b\u6807\" 1\u30012\u30013..\u7684\u987a\u5e8f\u5faa\u73af\u53d6\u503c\u8d4b\u503c\u7ed9i \u5373i\u53d8\u91cf\u662fnums[0]\u3001nums[1]\u3001nums[2]\u7684\u5f15\u7528 \u5f53\u4e0b\u6807\u5faa\u73af\u52302\u65f6,\u53bb\u9664\u4e86nums\u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a3, \u4f46\u56e0\u4e3aremove\u64cd\u4f5c,nums\u5217\u8868\u4ece\u4e0b\u6807\u4e3a3\u5f00\u59cb\u7684\u4f4d\u7f6e\u7684\u6570\u636e\u90fd\u5f80\u524d\u632a\u52a8\u4e86\u4e00\u4f4d,\u6700\u540e\u53d8\u4e3a\u4e86[1,2,3,3,4]; A\u5faa\u73af\u64cd\u4f5c\u7684\u4e0b\u6807\u6309\u7167\u987a\u5e8f\u63a5\u7740\u5faa\u73af\u52303,\u95ee\u9898\u6765\u5566,\u6b64\u65f6\u5217\u8868\u4e2dnums[2]\u7684\u503c\u4e3a3\u5374\u88ab\u8df3\u8fc7\u4e86.. \"\"\" nums = [ 1 , 2 , 3 , 3 , 3 , 4 ] for i in nums : # A if i == 3 : nums . remove ( i ) # B print ( nums , len ( nums )) # [1, 2, 3, 4] 4 # -- \u6b63\u89e3 \u8fdb\u884c\u5217\u8868\u7684\u6d45\u62f7\u8d1d nums = [ 1 , 2 , 3 , 3 , 3 , 4 ] for i in nums [:]: if i == 3 : nums . remove ( i ) print ( nums , len ( nums )) # [1, 2, 4] 3 \u4f20\u9012\u4e0d\u53ef\u53d8\u5bf9\u8c61 \u00b6 \u9488\u5bf9\u4e0d\u53ef\u53d8\u5bf9\u8c61(tuple\\str\\bool\\\u6570\u5b57\\\u4e0d\u53ef\u53d8\u96c6\u5408) \u5f88\u591a\u8d44\u6599\u5c06\u5176\u79f0\u4f5c \u51fd\u6570\u53c2\u6570 --\u503c\u4f20\u9012(\u62f7\u8d1d) \u522b\u88ab\u9a97\u4e86, \u672c\u8d28\u662f\u4f20\u9012\u5185\u5b58\u5730\u5740 , \u8fd8\u662f\u5f15\u7528\u8bed\u4e49 ,\u4e0d\u662f\u503c\u8bed\u4e49!! \u4ed4\u7ec6\u60f3\u54c8\u561b, \u4e0d\u53ef\u53d8\u5bf9\u8c61\u53d8\u4e0d\u4e86\u554a, \u4e00\u53d8\u5c31\u662f\u91cd\u65b0\u8d4b\u503c, id\u90fd\u53d8\u4e86.. \u6709\u70b9\u503c\u7c7b\u578b\u90a3\u5473,\u4f46\u4e0d\u662f\u503c\u7c7b\u578b!! \"\"\"-- \u5206\u6790 1> \u53c2\u6570a\u63a5\u6536\u5230\u7684\u662f\u503c\u7684\u7c7b\u578b\u662f\u6570\u5b57,\u6570\u5b57\u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u5bf9\u8c61 2> So,\u4f1a\u5c06\u63a5\u6536\u5230\u7684\u503c\u8fdb\u884c\u4e00\u4efd\u62f7\u8d1d! -- \u503c\u4f20\u9012(\u62f7\u8d1d) \u6839\u636e\u5b9a\u74061,\u56e0\u4e3afunc\u51fd\u6570\u5185\u4e0d\u5b58\u5728\u53d8\u91cfa,\u6240\u4ee5\u4f1a\u5728func\u51fd\u6570\u91cc\u65b0\u5b9a\u4e49\u5c40\u90e8\u53d8\u91cfa,\u5e76\u5c06\u62f7\u8d1d\u7684\u503c\u8d4b\u503c\u7ed9\u5c40\u90e8\u53d8\u91cfa. \u2605 \u6ce8\u610f: func\u51fd\u6570\u65b0\u5b9a\u4e49\u7684\u5c40\u90e8\u53d8\u91cfa\u4e0e\u5168\u5c40\u53d8\u91cfa\u65e0\u4efb\u4f55\u74dc\u845b!! \"\"\" def func ( a ): a = a + '3' return a a = '5' res = func ( a ) print ( a , res ) # '5' '53' \u4f20\u9012\u53ef\u53d8\u5bf9\u8c61 \u00b6 \u51fd\u6570\u53c2\u6570 --\u5f15\u7528\u4f20\u9012(\u5185\u5b58\u5730\u5740) \u9488\u5bf9\u53ef\u53d8\u5bf9\u8c61(list\\dict\\set) \"\"\"-- \u521d\u6b65\u5206\u6790 1> \u53c2\u6570a\u63a5\u6536\u5230\u7684\u662f\u503c\u7684\u7c7b\u578b\u662f\u5217\u8868,\u5217\u8868\u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u5bf9\u8c61 2> So,\u4f1a\u5bf9\u63a5\u6536\u5230\u7684\u503c\u8fdb\u884c\u5f15\u7528 -- \u5f15\u7528\u4f20\u9012(\u5185\u5b58\u5730\u5740) \u6839\u636e\u5b9a\u74061,\u56e0\u4e3afunc\u51fd\u6570\u5185\u4e0d\u5b58\u5728\u53d8\u91cfa,\u6240\u4ee5\u4f1a\u5728func\u51fd\u6570\u91cc\u65b0\u5b9a\u4e49\u5c40\u90e8\u53d8\u91cfa,\u5c06\u63a5\u6536\u5230\u7684\u5f15\u7528\u7ed9\u5c40\u90e8\u53d8\u91cfa. \u2605 \u6ce8\u610f: func\u51fd\u6570\u65b0\u5b9a\u4e49\u7684\u5c40\u90e8\u53d8\u91cfa\u4e0e\u5168\u5c40\u53d8\u91cfa\u7ef4\u62a4/\u6307\u5411\u7684\u662f\u540c\u4e00\u4e2a\u5185\u5b58\u5730\u5740!! \"\"\" def func ( a ): a += [ 4 ] # -- \u5217\u8868+=\u64cd\u4f5c\u539f\u5730\u6539\u53d8 \u7b49\u540c\u4e8e a.extend([4]) return a a = [ 1 , 2 , 3 ] res = func ( a ) print ( a , res ) # [1, 2, 3, 4] [1, 2, 3, 4] # --- --- --- def func ( a ): # -- \u6839\u636e\u5b9a\u74061,\u53c2\u6570\u4f20\u9012,\u5b9a\u4e49\u4e86\u5c40\u90e8\u53d8\u91cfa. \u6b64\u65f6[1,2,3]\u7684\u5f15\u7528\u8ba1\u6570\u4e3a2 a = a + [ 4 ] # -- \u6839\u636e\u5b9a\u74061,\u56e0\u4e3a\u5df2\u7ecf\u5b58\u5728\u5c40\u90e8\u53d8\u91cfa,\u8be5\u8d4b\u503c\u64cd\u4f5c\u662f\u5728\u5bf9\u5c40\u90e8\u53d8\u91cfa\u91cd\u65b0\u8d4b\u503c # \u91cd\u65b0\u8d4b\u503c\u540e,\u5c40\u90e8\u53d8\u91cfa\u91cd\u65b0\u7ed1\u5b9a\u4e86\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61[1,2,3,4]. \u5bfc\u81f4[1,2,3]\u7684\u5f15\u7528\u8ba1\u6570\u51cf1 # id(\u5de6\u8fb9a) != id(\u53f3\u8fb9a) \u5b83\u4fe9\u4e0d\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61 return a a = [ 1 , 2 , 3 ] res = func ( a ) print ( a , res ) # [1, 2, 3] [1, 2, 3, 4] UnboundLocalError \u00b6 \u5b98\u65b9\u89e3\u91ca: When a name is not found at all, a NameError exception is raised. If the name refers to a local variable that has not been bound, a UnboundLocalError exception is raised. UnboundLocalError is a subclass of NameError . \u7ffb\u8bd1\u6210\u4eba\u8bdd: \u82e5\u5f15\u7528\u4e86\u67d0\u4e2a\u53d8\u91cf,\u6b64\u53d8\u91cf\u5728\u5404\u4e2a\u4f5c\u7528\u57df\u91cc\u90fd\u627e\u4e0d\u5230,\u5c31\u4f1a\u62a5\u9519 NameError ; \u82e5\u5f15\u7528\u7684\u53d8\u91cf\u662f \u5c40\u90e8\u53d8\u91cf ,\u4f46\u8fd8\u672a\u5b8c\u6210\u7ed1\u5b9a,\u5c31\u4f1a\u62a5\u9519 UnboundLocalError .. UnboundLocalError \u662f NameError \u7684\u4e00\u4e2a\u5b50\u7c7b.. \u6df1\u5ea6\u5206\u6790\u8be6\u89c1\u540e\u6587 \u201cpython\u53d8\u91cf\u7684\u53ef\u89c1\u6027\u201d \u90e8\u5206\u7684\u5185\u5bb9!!! \"\"\" \u4ee3\u7801\u7b2c\u4e8c\u884c\u62a5\u9519: local variable 'a' referenced before assignment \u7ffb\u8bd1\u8fc7\u6765: \u5c40\u90e8\u53d8\u91cf'a'\u5728\u8d4b\u503c\u524d\u88ab\u5f15\u7528 \u5206\u6790: func()\u51fd\u6570\u6ca1\u6709\u53c2\u6570,\u5373\u4e0d\u5b58\u5728\u51fd\u6570\u4f20\u9012\u8fc7\u7a0b\u4e2d\u5b9a\u4e49\u5c40\u90e8\u53d8\u91cf \u51fd\u6570\u4f53\u5185\u6709\u5bf9a\u7684\u8d4b\u503c\u64cd\u4f5c,\u6839\u636e\u5b9a\u74061,\u56e0\u4e3afunc\u51fd\u6570\u5185\u6ca1\u6709\u5c40\u90e8\u53d8\u91cfa,\u5219\u8be5\u8d4b\u503c\u64cd\u4f5c\u662f\u5728\u5b9a\u4e49\u5c40\u90e8\u53d8\u91cfa,\u800c\u5728\u8d4b\u503c\u64cd\u4f5c\u7684\u53f3\u4fa7\u5f15\u7528\u4e86\u8fd8\u672a\u88ab\u5b9a\u4e49\u5b8c\u6210\u7684\u5c40\u90e8\u53d8\u91cfa Ps:\u6709\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u6211\u662f\u8fd9\u6837\u7406\u89e3\u8fd9\u4e2a\u62a5\u9519\u7684.\u5f00\u59cb\u56de\u6eaf\u6211\u7684\u7406\u89e3.\u7406\u89e3\u51fa\u9519\u7684\u5730\u65b9\u5728\u4e8e(-- --)\u5305\u542b\u8d77\u6765\u7684\u8fd9\u6bb5\u6587\u5b57. (-- \u89e3\u91ca\u5668\u53d1\u73b0\u53f3\u4fa7\u7684a\u53d8\u91cf\u5728\u5c40\u90e8\u4f5c\u7528\u57df\u91cc\u8fd8\u672a\u7ed1\u5b9a\u597d,\u5c31\u5f15\u7528\u5168\u5c40\u53d8\u91cfa-- ),\u800c\"=\"\u5de6\u4fa7\u7684a\u662f\u5c40\u90e8\u53d8\u91cf,\u5728\u4e00\u4e2a\u8d4b\u503c\u64cd\u4f5c\u4e2d,\u67d0\u4e00\u53d8\u91cf\u4e0d\u53ef\u80fd\u65e2\u5145\u5f53\u5c40\u90e8\u53d8\u91cf,\u53c8\u5145\u5f53\u5168\u5c40\u53d8\u91cf.. \u8fdb\u800c\u4ea7\u751f\u4e86\u51b2\u7a81.\u62a5\u9519\u63d0\u793a\u4e0d\u662f\u8fd9\u6837\u7684,\u663e\u7136\u8fd9\u6837\u7406\u89e3\u6709\u504f\u5dee!! \u6b63\u786e\u7684\u8fc7\u7a0b\u5e94\u8be5\u662f,\u8c03\u7528\u51fd\u6570,\u51fd\u6570\u4f53\u4ee3\u7801\u5f00\u59cb\u6267\u884c,\u5728\u6267\u884c\u4e4b\u524d\u4f1a\u626b\u63cf\u51fd\u6570\u4f53\u4ee3\u7801,\u770b\u662f\u5426\u6709\u7ed1\u5b9a\u64cd\u4f5c\u7684\u4ee3\u7801,\u5728\u8fd9\u4e2a\u6848\u4f8b\u91cc, a = a + 4,\u8fd9\u4e2a\u8bed\u53e5,\u53d1\u73b0\u5b83\u662f\u8d4b\u503c\u64cd\u4f5c(\u7ed1\u5b9a\u64cd\u4f5c\u7684\u4e00\u79cd),a\u53d8\u91cf\u5728\u8be5\u5c40\u90e8\u547d\u540d\u7a7a\u95f4(\u5c31\u662f\u5b58\u653e\u53d8\u91cf\u540d\u4e0e\u7ed1\u5b9a\u5bf9\u8c61\u7684\u6808\u533a!!)\u4fbf\u5177\u5907\u53ef\u89c1\u6027,\u5230\u8fd9\u4e00\u6b65a\u53d8\u91cf\u5df2\u7ecf\u5b9a\u6027\u4e3a\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u5566..\u4f46\u8981\u6ce8\u610f\u4e00\u70b9,\u53ef\u89c1\u6027\u7684\u53d8\u91cf\u5728\u5b8c\u6210\u7ed1\u5b9a\u540e,\u624d\u80fd\u88ab\u5f15\u7528. \u51fd\u6570\u4f53\u4ee3\u7801\u5f00\u59cb\u771f\u6b63\u6267\u884c,\u6267\u884c\u5230a = a + 4\u8fd9\u884c\u4ee3\u7801,\u7b49\u5f0f\u53f3\u8fb9\u4f1a\u5148\u6267\u884c,\u53d1\u73b0\u53f3\u4fa7\u5f15\u7528\u4e86\u8fd8\u672a\u7ed1\u5b9a\u597d\u7684\u5c40\u90e8\u53d8\u91cfa.. \u4e3a\u5565\u62a5\u9519,\"UnboundLocalError:\u5c40\u90e8\u53d8\u91cf'a'\u5728\u8d4b\u503c\u524d\u88ab\u5f15\u7528\"\u4e5f\u5c31\u5f97\u5230\u4e86\u5408\u7406\u7684\u89e3\u91ca. \"\"\" def func (): a += 4 # a+=[4]\u62a5\u9519 a.extend([4])\u4e0d\u4f1a\u62a5\u9519 return a a = 1 # a=[] \u5f53a\u662f\u4e00\u4e2a\u5217\u8868\u65f6 res = func () print ( a , res ) # --- --- --- # `\u82e5\u5f15\u7528\u7684\u53d8\u91cf\u662f\u5c40\u90e8\u53d8\u91cf,\u4f46\u8fd8\u672a\u5b8c\u6210\u7ed1\u5b9a,\u5c31\u4f1a\u62a5\u9519UnboundLocalError.` # \u6ce8\u610f\u62a5UnboundLocalError\u9519\u8bef\u7684\u524d\u63d0\u662f\u8be5\u53d8\u91cf\u662f\u5c40\u90e8\u53d8\u91cf!!\u800c\u4e0b\u65b9\u7684m\u662f\u5168\u5c40\u53d8\u91cf! m = m + 1 # -- NameError: name 'a' is not defined \u51fd\u6570\u5f62\u53c2\u548c\u5b9e\u53c2 \u00b6 \u5728\u4e0a\u6587\u6211\u4eec\u77e5\u9053 \u51fd\u6570\u7684\u53c2\u6570\u4f20\u9012 \u53ef\u770b\u4f5c\u662f\u4e00\u4e2a\u8d4b\u503c\u64cd\u4f5c a = \uff1f \u5b9a\u4e49\u7684\u662f\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf \u5177\u4f53\u4e00\u70b9, \u53c2\u6570\u5206\u4e3a\u5f62\u53c2\u548c\u5b9e\u53c2: \u5f62\u53c2 -- \u672c\u8d28\u5c31\u662f\u53d8\u91cf\u540d; \u5b9e\u53c2 -- \u672c\u8d28\u5c31\u662f\u53d8\u91cf\u7684\u503c \u5b9a\u4e49\u51fd\u6570\u65f6 -- \u884c\u53c2 \u00b6 \u5b9a\u4e49\u51fd\u6570\u65f6 \u4f4d\u7f6e\u5f62\u53c2-\u9ed8\u8ba4\u5f62\u53c2-\u4e0d\u5b9a\u957f\u4f4d\u7f6e\u5f62\u53c2-\u547d\u540d\u5173\u952e\u5b57\u5f62\u53c2-\u4e0d\u5b9a\u957f\u5173\u952e\u5b57\u5f62\u53c2 \u5f62\u53c2 \u7279\u6027 \u4f4d\u7f6e\u5f62\u53c2 \u5fc5\u987b\u88ab\u4f20\u503c,\u591a\u4e00\u4e2a\u4e0d\u884c\u5c11\u4e00\u4e2a\u4e5f\u4e0d\u884c!! \u9ed8\u8ba4\u5f62\u53c2 \u610f\u5473\u7740\u8c03\u7528\u9636\u6bb5\u53ef\u4ee5\u4e0d\u7528\u4e3a\u5176\u8d4b\u503c(\u53ef\u4ee5\u4e0d\u7528\u6307\u5b9a\u5bf9\u5e94\u7684\u5b9e\u53c2)!! \u4e0d\u5b9a\u957f\u4f4d\u7f6e\u5f62\u53c2 *args \u4f1a\u5c06\u6ea2\u51fa\u7684\u4f4d\u7f6e\u5b9e\u53c2\u5168\u90e8\u63a5\u6536,\u7136\u540e\u4ee5\u5143\u7956\u7684\u5f62\u5f0f\u8d4b\u503c\u7ed9 * \u540e\u9762\u7684\u53d8\u91cf args \u547d\u540d\u5173\u952e\u5b57\u5f62\u53c2 * ( * \u6216\u8005 *args ) \u540e\u9762\u7684\u5f62\u53c2\u5bf9\u5e94\u7684\u5b9e\u53c2\u5fc5\u987b\u6309\u7167key=value\u7684\u5f62\u5f0f\u8fdb\u884c\u4f20\u503c \u4e0d\u5b9a\u957f\u5173\u952e\u5b57\u5f62\u53c2 **kwargs \u4f1a\u5c06\u6ea2\u51fa\u7684\u5173\u952e\u5b57\u5b9e\u53c2\u5168\u90e8\u63a5\u6536, \u7136\u540e\u4ee5\u5b57\u5178\u7684\u5f62\u5f0f\u8d4b\u503c\u7ed9 ** \u540e\u9762\u7684\u53d8\u91cf kwargs \u8c03\u7528\u51fd\u6570\u65f6 -- \u5b9e\u53c2 \u00b6 \u8c03\u7528\u51fd\u6570\u65f6 \u4f4d\u7f6e\u5b9e\u53c2 \u5173\u952e\u5b57\u5b9e\u53c2 1> \u4e24\u79cd\u5b9e\u53c2\u53ef\u4ee5\u6df7\u7528, \u4f46\u4f4d\u7f6e\u5b9e\u53c2\u5fc5\u987b\u5728\u5173\u952e\u5b57\u5b9e\u53c2\u524d\u9762\uff01\u4e14\u4e0d\u80fd\u5bf9\u4e00\u4e2a\u5f62\u53c2\u91cd\u590d\u8d4b\u503c\uff01 2> \u5b9e\u53c2\u53ef\u4ee5\u62c6\u5305\uff01 \u5b9e\u53c2\u4e2d\u5e26 * , * \u4f1a\u5c06\u8be5\u53d8\u91cf\u7684\u503c\u5faa\u73af\u53d6\u51fa,\u6253\u6563\u6210\u4f4d\u7f6e\u5b9e\u53c2. \u5373\u4ee5\u540e\u4f46\u51e1\u78b0\u5230\u5b9e\u53c2\u4e2d\u5e26 * \u7684,\u5b83\u5c31\u662f\u4f4d\u7f6e\u5b9e\u53c2,\u5e94\u8be5\u7acb\u523b\u6253\u6563\u6210\u4f4d\u7f6e\u5b9e\u53c2\u6765\u770b \u5b9e\u53c2\u4e2d\u5e26 ** , ** \u4f1a\u5c06\u8be5\u53d8\u91cf\u7684\u503c\u5faa\u73af\u53d6\u51fa,\u6253\u6563\u6210\u5173\u952e\u5b57\u5b9e\u53c2. \u5373\u4ee5\u540e\u4f46\u51e1\u78b0\u5230\u5b9e\u53c2\u4e2d\u5e26 ** \u7684,\u5b83\u5c31\u662f\u5173\u952e\u5b57\u5b9e\u53c2,\u5e94\u8be5\u7acb\u523b\u6253\u6563\u6210\u5173\u952e\u5b57\u5b9e\u53c2\u53bb\u770b def func3 ( a1 , a2 , a3 , a4 = 10 , * args , a5 = 20 , a6 , ** kwargs ): # 11 22 33 44 20 10 (55, 66, 77) {'a10': 123} print ( a1 , a2 , a3 , a4 , a5 , a6 , args , kwargs ) # func3(11, *[22, 33, 44, 55, 66, 77], **{'a6': 10, 'a10': 123}) func3 ( 11 , 22 , 33 , 44 , 55 , 66 , 77 , a6 = 10 , a10 = 123 ) def func ( * p ): return sum ( p ) func ( 1 , 2 , 3 , 4 ) # 10 def func ( ** p ): return '' . join ( sorted ( p )) func ( x = 1 , z = 2 , y = 3 ) # 'xyz' \u9ed8\u8ba4\u5f62\u53c2\u9677\u9631 \u00b6 \u8bb0\u4f4f\u4e24\u70b9: \u9664\u975e\u7a0b\u5e8f\u7ed3\u675f,\u5426\u5219\u8be5\u5171\u4eab\u7a7a\u95f4\u4e0d\u4f1a\u88ab\u91ca\u653e ; \u7c7b\u4f3c\u4e8e\u5168\u5c40\u53d8\u91cf . \u9ed8\u8ba4\u5f62\u53c2\u7684\u503c\u901a\u5e38\u5e94\u8be5\u5b9a\u4e49\u4e3a\u4e0d\u53ef\u53d8\u7c7b\u578b. egon\u8bf4, \"\u9ed8\u8ba4\u5f62\u53c2\u7684\u503c\u53ea\u5728\u5b9a\u4e49\u9636\u6bb5\u8d4b\u503c\u4e00\u6b21,\u5373\u9ed8\u8ba4\u53c2\u6570\u7684\u503c\u5728\u51fd\u6570\u5b9a\u4e49\u9636\u6bb5\u5c31\u5df2\u7ecf\u56fa\u5b9a\u6b7b\u4e86\". \u8fd9\u610f\u5473\u7740\u5f53\u51fd\u6570\u88ab\u5b9a\u4e49\u65f6\u5c06\u5bf9\u8868\u8fbe\u5f0f\u6c42\u503c\u4e00\u6b21,\u76f8\u540c\u7684\u201c\u9884\u8ba1\u7b97\u201d\u503c\u5c06\u5728\u6bcf\u6b21\u8c03\u7528\u65f6\u88ab\u4f7f\u7528 \u25cb one.py\u6587\u4ef6\u5f00\u59cb\u8fd0\u884c,\u521b\u5efa\u5168\u5c40scope, \u4ece\u4e0a\u5f80\u4e0b\u4f9d\u6b21\u6267\u884c\u4ee3\u7801 \u6267\u884c\u7b2c1 2\u884c\u4ee3\u7801, \u5b9e\u73b0\u5c06x\u3001func\u4f9d\u6b21\u538b\u5165\u5168\u5c40scope\u8fd9\u4e2a\u6808\u4e2d \u6267\u884c\u7b2c2\u884c\u4ee3\u7801\u65f6, \u53d1\u73b0\u8be5func\u51fd\u6570\u6709\u9ed8\u8ba4\u53c2\u6570,\u5219\u4f1a\u521b\u5efa\u4e00\u4e2a \"\u5171\u4eab\u7a7a\u95f4\" ,\u5c06\u8be5\u9ed8\u8ba4\u53c2\u6570\u7684\u503c\u5b58\u50a8\u8d77\u6765 \u25cb \u7b2c3\u884c\u4ee3\u7801\u6682\u65f6\u4e0d\u4f1a\u6267\u884c,\u5f80\u4e0b\u6267\u884c\u7b2c5\u884c\u4ee3\u7801,\u8c03\u7528func\u51fd\u6570,\u5e76\u4f20\u9012\u4e86\u4e00\u4e2a\u4e0d\u53ef\u53d8\u7c7b\u578b\u7684\u53c2\u6570.. \u5177\u4f53\u5c55\u5f00: 1> \u8c03\u7528\u51fd\u6570\u65f6,\u89e3\u91ca\u5668\u5c31\u4f1a\u4e3a\u8be5\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u5c40\u90e8scope\u547d\u540d\u7a7a\u95f4 2> \u5728\u51fd\u6570\u771f\u6b63\u6267\u884c\u4e4b\u524d\u626b\u63cf\u51fd\u6570\u4ee3\u7801, \u627e\u7ed1\u5b9a\u64cd\u4f5c, \u53d1\u73b0\u4e86\u6709\u4e24\u4e2a\u5f62\u53c2 ( \u5f62\u53c2\u662f\u7ed1\u5b9a\u64cd\u4f5c\u7684\u4e00\u79cd ) \u56e0\u4e3a\u7ed1\u5b9a\u64cd\u4f5c, \u53d8\u91cfa\u548cb\u4fbf\u5728\u521a\u521b\u5efa\u7684scope\u7a7a\u95f4\u4e2d\u5177\u5907\u4e86\u53ef\u89c1\u6027!!\u610f\u5473\u7740a\u548cb\u53d8\u91cf\u5b9a\u6027\u4e3a\u5c40\u90e8\u53d8\u91cf.. 3> \u51fd\u6570\u771f\u6b63\u6267\u884c, \u53d8\u91cf\u7ed1\u5b9a\u4e865\u7684\u5185\u5b58\u5730\u5740,b\u53d8\u91cf\u7ed1\u5b9a\u4e86\u5171\u4eab\u7a7a\u95f4\u4e2d1\u7684\u5185\u5b58\u5730\u5740.. \u548cb\u53d8\u91cf\u5b8c\u6210\u7ed1\u5b9a\u64cd\u4f5c\u540e, \u548cb\u53d8\u91cf\u4fbf\u53ef\u4ee5\u88ab\u5f15\u7528!! retuen\u8bed\u53e5\u4e2d\u5c31\u6709\u5bf9 \u548cb\u53d8\u91cf\u7684\u5f15\u7528. \u25cb \u7b2c5\u884c\u4ee3\u7801\u6267\u884c\u5b8c\u540e,\u5bf9\u5e94\u7684\u5c40\u90e8scope\u7a7a\u95f4\u4f1a\u91ca\u653e!! \u7ee7\u7eed\u5f80\u4e0b\u6267\u884c,\u53ea\u8981\u662f\u8c03\u7528\u51fd\u6570\u7684\u4ee3\u7801\u5c31\u4f1a\u521b\u5efa\u65b0\u7684\u5c40\u90e8scope,\u51fd\u6570\u8c03\u7528\u5b8c\u5c31\u91ca\u653e.. \u4e09\u6b21\u51fd\u6570\u8c03\u7528,\u4e0d\u540c\u70b9\u5728\u4e8e\u7b2c\u4e09\u6b21\u8c03\u7528\u7684func\u51fd\u6570,\u6ca1\u6709\u7528\u5171\u4eab\u7a7a\u95f4\u91cc\u7684\u503c.. \u4f46\u5bf9\u5171\u4eab\u7a7a\u95f4\u6ca1\u6709\u5f71\u54cd!! \u6309\u7406\u6765\u8bf4,\u5806\u533a\u91cc\u7684\u6570\u636e\u6839\u636egc\u673a\u5236,\u5f15\u7528\u8ba1\u6570\u4e3a0\u4f1a\u91ca\u653e\u6389, \u4f46\u5171\u4eab\u7a7a\u95f4\u91cc\u7684\u503c\u7c7b\u4f3c\u4e8e\u5168\u5c40\u53d8\u91cf.. \u9664\u975e\u7a0b\u5e8f\u7ed3\u675f,\u5426\u5219\u8be5\u5171\u4eab\u7a7a\u95f4\u4e0d\u4f1a\u88ab\u91ca\u653e!!! \u25b2\u5b9e\u9a8c\u89c1\u771f\u77e5: \u9ed8\u8ba4\u53c2\u6570\u662f\u53ef\u53d8\u7c7b\u578b\u7684\u6570\u636e\u5e26\u6765\u7684\u9ebb\u70e6!!! def func ( a = [ 555 ]): a . extend ([ 1 , 2 , 3 ]) # -- \u7b49\u540c\u4e8e a+=[1,2,3] return a , id ( a ) # -- \u51fd\u6570\u7b2c\u4e00\u6b21\u8c03\u7528\u65f6\u5171\u4eab\u7a7a\u95f4\u4e3a[555];\u7b2c\u4e8c\u6b21\u8c03\u7528\u65f6\u6ca1\u6709\u7528\u5171\u4eab\u7a7a\u95f4;\u7b2c\u4e09\u6b21\u8c03\u7528\u65f6\u5171\u4eab\u7a7a\u95f4\u4e3a[555,1,2,3]; # \u53ef\u4ee5\u89c2\u5bdf\u5230,\u7b2c\u4e00\u6b21id(a)\u548c\u7b2c\u4e09\u6b21id(a)\u662f\u4e00\u6837\u7684.. # \u8bc1\u660e\u7b2c\u4e8c\u6b21\u8c03\u7528\u867d\u7136\u6ca1\u6709\u7528\u5171\u4eab\u7a7a\u95f4\u4f1a\u5bfc\u81f4[555]\u7684\u5f15\u7528\u8ba1\u6570\u4e3a0,\u4f46\u8be5\u5171\u4eab\u7a7a\u95f4\u6ca1\u6709\u88ab\u91ca\u653e!! print ( func ()) print ( func ([])) # -- \u82e5\u4e0d\u4f7f\u7528\u9ed8\u8ba4\u7684[555],\u81ea\u5df1\u6307\u5b9a\u503c,\u90a3\u4e48\u51fd\u6570\u4f53\u5185\u7684a\u7684id\u4e0d\u662f\u5171\u4eab\u7a7a\u95f4\u4e2da\u7684id. print ( func ()) \"\"\"\u7ed3\u679c ([555, 1, 2, 3], 140573741203776) ([1, 2, 3], 140692741938688) ([555, 1, 2, 3, 1, 2, 3], 140573741203776) \"\"\" # --- --- --- # \u4f9d\u7167python\u5728\u4f5c\u7528\u57df\u91cc\u5bf9\u53d8\u91cf\u7684\u8d4b\u503c\u64cd\u4f5c\u89c4\u5219 # \u6ce8\u610f\u54e6,\u51fd\u6570\u4f53\u5185\u5bf9\u6b64\u9ed8\u8ba4\u5f62\u53c2\u91cd\u65b0\u8d4b\u503c,\u662f\u4e3a\u6b64\u53d8\u91cf\u7ed1\u5b9a\u4e86\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61!!! def func ( a = [ 555 ]): print ( a , id ( a )) a = a + [ 1 , 2 , 3 ] # -- \u5c40\u90e8\u53d8\u91cfa\u91cd\u65b0\u8d4b\u503c,\u5176id\u53d1\u751f\u53d8\u5316 return a , id ( a ) # -- \u53ef\u4ee5\u89c2\u5bdf\u5230\u51fd\u6570\u7b2c\u4e00\u6b21\u548c\u7b2c\u4e8c\u6b21\u8c03\u7528\u7684\u5171\u4eab\u7a7a\u95f4\u90fd\u4e3a[555],\u5176id\u4e5f\u6ca1\u6709\u53d1\u751f\u53d8\u5316! # \u8bc1\u660e a = a + [1, 2, 3] \u8be5\u884c\u4ee3\u7801\u867d\u7136\u5bfc\u81f4[555]\u7684\u5f15\u7528\u8ba1\u6570\u4e3a0,\u4f46\u8be5\u5171\u4eab\u7a7a\u95f4\u6ca1\u6709\u88ab\u91ca\u653e\uff01 print ( func ()) # [555, 1, 2, 3] print ( func ()) # [555, 1, 2, 3] \"\"\"\u7ed3\u679c [555] 140263832453056 ([555, 1, 2, 3], 140263832467520) [555] 140263832453056 ([555, 1, 2, 3], 140263832428928) \"\"\" # --- --- --- \u6b63\u89e3 def func0 ( a , b = None ): if b is None : b = [] # --- --- --- \u6362\u4e2a\u601d\u8003\u89d2\u5ea6\u7406\u89e3 \u9ed8\u8ba4\u5f62\u53c2\u9677\u9631 \"\"\" \u9ed8\u8ba4\u5f62\u53c2\u7684\u5171\u4eab\u7a7a\u95f4\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u6210 \u4e00\u4e2a\u5168\u5c40\u53d8\u91cf \"\"\" def func ( a = [ 555 ]): pass func () func () b = [ 555 ] def func ( a = b ): pass func () func () b = [ 555 ] def func ( a ): pass func ( b ) func ( b ) \u51fd\u6570\u547d\u540d\u7a7a\u95f4\u4e0e\u4f5c\u7528\u57df \u00b6 \u51fd\u6570\u5bf9\u8c61 \u00b6 \u51fd\u6570\u662f\u7b2c\u4e00\u7c7b\u5bf9\u8c61 \u00b6 \u51fd\u6570\u662f\u7b2c\u4e00\u7c7b\u5bf9\u8c61, \u53ef\u4ee5\u5f53\u4f5c\u6570\u636e\u8fdb\u884c\u4f20\u9012 \uff01 a = lambda x:x+1 1> \u88ab\u5f15\u7528; b = a 2> \u5f53\u4f5c\u53c2\u6570\u4f20\u9012; func(a):pass 3> \u8fd4\u56de\u503c\u662f\u51fd\u6570; func(*args):return a 4> \u4f5c\u4e3a\u5bb9\u5668\u7c7b\u578b\u7684\u5143\u7d20 [1,2,a,3] def foo (): print ( 'foo' ) def bar (): print ( 'bar' ) dic = { 'foo' : foo , 'bar' : bar , } while True : choice = input ( '>>: ' ) . strip () if choice in dic : dic [ choice ]() \u51fd\u6570\u5d4c\u5957\u5b9a\u4e49 \u00b6 \u9700\u6c42: \u5c06\u5706\u76f8\u5173\u7684\u8ba1\u7b97(\u9762\u79ef\u3001\u5468\u957f)\u96c6\u4e2d\u5728\u4e00\u8d77. from math import pi def circle ( radius , action = 'area' ): def area (): return pi * ( radius ** 2 ) def perimeter (): return 2 * pi * radius if action == 'area' : return area () elif action == 'perimeter' : return perimeter () print ( circle ( 10 , 'perimeter' )) # -- Ps: max(max(2,3),8) \u6253\u7834\u5c42\u7ea7\u9650\u5236 \u00b6 \u51fd\u6570\u5bf9\u8c61\u53ef\u4ee5\u5c06\u5b9a\u4e49\u5728\u51fd\u6570\u5185\u7684\u51fd\u6570\u8fd4\u56de\u5230\u5168\u5c40\u4e2d\u4f7f\u7528,\u4ece\u800c\u6253\u7834\u51fd\u6570\u7684\u5c42\u7ea7\u9650\u5236 def f1 (): def inner (): print ( 'from inner' ) return inner f = f1 () # -- \u62ff\u5230inner\u51fd\u6570\u7684\u5185\u5b58\u5730\u5740. \u547d\u540d\u7a7a\u95f4scope/\u6808\u533a \u00b6 \u547d\u540d\u7a7a\u95f4\u6982\u5ff5 \u00b6 \u5728\u4e00\u4e2a\u590d\u6742\u7684\u7a0b\u5e8f\u4e2d,\u4f1a\u5b9a\u4e49\u6210\u5343\u4e0a\u4e07\u4e2a\u53d8\u91cf(\u51fd\u6570\u540d\u3001\u7c7b\u540d\u90fd\u662f\u53d8\u91cf), \u4e3a\u4e86\u4fbf\u4e8e\u8ffd\u8e2a\u8fd9\u4e9b\u53d8\u91cf,\u8ba9\u5b83\u4eec\u4e92\u4e0d\u5e72\u6270,\u547d\u540d\u7a7a\u95f4\u5c31\u5e94\u8fd0\u800c\u751f\u5566!! \u547d\u540d\u7a7a\u95f4 scope/namespaces: \u8fd9\u51e0\u79cd\u8bf4\u6cd5\u90fd\u6b63\u786e 1> \u5b58\u653e\u540d\u5b57\u4e0e\u503c\u7ed1\u5b9a\u5173\u7cfb\u7684\u5730\u65b9 , \u4e00\u822c\u7b80\u8bf4\u547d\u540d\u7a7a\u95f4(\u6808\u533a)\u4e3a\u5b58\u653e\u53d8\u91cf\u540d\u7684\u5730\u65b9. 2> \u547d\u540d\u7a7a\u95f4\u662f\u952e\u503c\u5bf9\u7684\u96c6\u5408! \u53d8\u91cf\u540d\u4e0e\u503c\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u5173\u7cfb.. 3> \u547d\u540d\u7a7a\u95f4\u662f\u53d8\u91cf\u540d\u5230\u5bf9\u8c61\u5185\u5b58\u5730\u5740\u7684\u6620\u5c04. eg: x=1 \u5f00\u8f9f\u4e00\u5757\u7a7a\u95f4, 1 \u5b58\u653e\u5728\u5185\u5b58\u4e2d; x:id(1) \u653e\u5728\u547d\u540d\u7a7a\u95f4\u4e2d \u4ece \u53d8\u91cf\u5b58\u50a8 \u7684\u89d2\u5ea6, \u5728\u5b9a\u4e49\u53d8\u91cf\u65f6, \u53d8\u91cf\u540d\u4e0e\u503c\u5185\u5b58\u5730\u5740\u7684\u5173\u8054\u5173\u7cfb \u5b58\u653e\u4e8e\u6808\u533a stack , \u53d8\u91cf\u503c \u5b58\u653e\u4e8e\u5806\u533a heap . \u547d\u540d\u7a7a\u95f4\u5206\u7c7b \u00b6 \u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u4e0d\u80fd\u6709\u91cd\u540d\u7684\u53d8\u91cf\u540d \u5404\u4e2a\u547d\u540d\u7a7a\u95f4\u662f\u72ec\u7acb\u7684 , \u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u7684, \u6240\u4ee5 \u4e0d\u540c\u7684\u547d\u540d\u7a7a\u95f4\u662f\u53ef\u4ee5\u6709\u91cd\u540d\u7684,\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd Ps: \u4e00\u4e2a\u5957\u4e00\u4e2a\u7684\u540d\u5b57\u7a7a\u95f4\u4e2d\u540c\u540d\u7684\u53d8\u91cf\u540d\u4f1a\u5f62\u6210\u540d\u5b57\u7a7a\u95f4\u94fe print ( len ) # <built-in function len> x = 1 if 3 > 2 : z = 5 def func (): y = 2 func () # -- \u5185\u7f6e\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u5bf9\u8c61\u53ef\u4ee5\u901a\u8fc7 dir(__builtins__) \u547d\u4ee4\u67e5\u770b. \u7c7b\u522b \u89e3\u91ca \u5185\u7f6e\u547d\u540d\u7a7a\u95f4 built-in names \u5b58\u653epython\u89e3\u91ca\u5668\u81ea\u5e26\u7684\u540d\u5b57 len \u5168\u5c40\u547d\u540d\u7a7a\u95f4 global names \u5b58\u653e\u6a21\u5757\u4e2d \u5b9a\u4e49 \u7684\u540d\u5b57(\u8be5\u6a21\u5757\u4e2d\u9664\u5f00\u5185\u7f6e\u7684\u548c\u5c40\u90e8\u7684,\u90fd\u662f\u5168\u5c40\u7684) x func z \u5c40\u90e8\u547d\u540d\u7a7a\u95f4 local names \u5b58\u653e\u51fd\u6570\u8c03\u7528\u65f6\u51fd\u6570\u4e2d \u5b9a\u4e49 \u7684\u540d\u5b57 y \u63d0\u4e00\u5634,\u4e25\u8c28\u70b9\u8bf4\u5e94\u8be5\u8bf4\u662f\u4ee3\u7801\u5757\u91cc\u7ed1\u5b9a\u64cd\u4f5c\u4e2d\u7684\u540d\u5b57!! Ps: \u4e25\u8c28\u4e00\u70b9, \u89e3\u91ca\u5668\u8fd8\u4e3a\u7a0b\u5e8f\u4f7f\u7528 import \u8bed\u53e5\u52a0\u8f7d\u7684\u4efb\u4f55\u6a21\u5757\u521b\u5efa\u4e00\u4e2a\u5168\u5c40\u547d\u540d\u7a7a\u95f4 \u6ce8\u610f: \u5168\u5c40\u548c\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u7684\u5b9e\u73b0\u662f\u5b57\u5178, \u4f46\u5185\u7f6e\u547d\u540d\u7a7a\u95f4\u4e0d\u662f! \u547d\u540d\u7a7a\u95f4\u4e0e\u4ee3\u7801\u5757\u7684\u5173\u7cfb \u00b6 \u4ee3\u7801\u5757\u901a\u5e38\u662f\u6307, \u7c7b\u3001\u51fd\u6570 \u4e2d\u5305\u542b\u7684\u4ee3\u7801!! Python\u89e3\u91ca\u5668\u4f1a\u5728 \u6267\u884c \u51fd\u6570\u4ee3\u7801\u5757\u65f6,\u4e3a\u5176\u5206\u914d\u4e00\u4e2a\u5c40\u90e8\u547d\u540d\u7a7a\u95f4.. \"\"\" 0 \u4e0d\u662f\u4e00\u4e2a\u4ee3\u7801\u5757,\u662f\u9664\u7c7b\u548c\u51fd\u6570\u4ee5\u5916\u7684\u4ee3\u7801,\u5f52\u5c5e\u4e8e\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u7ba1! 1-2 \u662f\u4e00\u4e2a\u4ee3\u7801\u5757 3-10 \u662f\u4e00\u4e2a\u4ee3\u7801\u5757 5-10 \u662f\u4e00\u4e2a\u4ee3\u7801\u5757 7-9 \u662f\u4e00\u4e2a\u4ee3\u7801\u5757 (\u540e\u4e09\u4e2a\u4ee3\u7801\u5757\u5b9e\u73b0\u4e86\u4ee3\u7801\u5757\u7684\u5d4c\u5957) \u4ee3\u7801\u5757\u4e0e\u547d\u540d\u7a7a\u95f4 \u4e0a\u8ff0\u7684\u56db\u4e2a\u4ee3\u7801\u5757,\u6bcf\u4e2a\u4ee3\u7801\u5757\u5728\u6267\u884c\u65f6,python\u89e3\u91ca\u5668\u4f1a\u5206\u914d\u4e00\u4e2a\u5c40\u90e8\u547d\u540d\u7a7a\u95f4(\u662f\u771f\u5b9e\u7684\u5185\u5b58\u7a7a\u95f4) \u6ce8\u610f\u54e6,\u51fd\u6570\u5728\u8c03\u7528\u65f6\u624d\u4f1a\u6267\u884c\uff01 \u8fd8\u8981\u7279\u522b\u6ce8\u610f,\u4ee3\u7801\u5757\u53ef\u4ee5\u5d4c\u5957,\u4f46\u547d\u540d\u7a7a\u95f4\u662f\u76f8\u4e92\u72ec\u7acb\u7684!! \"\"\" m = 0 # 0 def func0 (): # 1 return 1 # 2 class Test : # 3 a = 1 # 4 def func1 ( self ): # 5 a = 2 # 6 def func2 (): # 7 b = 3 # 8 print ( b ) # 9 return func2 # 10 \u547d\u540d\u7a7a\u95f4\u751f\u547d\u5468\u671f \u00b6 \u6307\u7684\u662f\u547d\u540d\u7a7a\u95f4\u4e2d\u7684 \u53d8\u91cf\u540d!! \u4e0d\u662f\u5185\u5b58\u4e2d\u7684\u53d8\u91cf\u503c\u7684\u751f\u547d\u5468\u671f!! \u5185\u7f6e: \u5728\u89e3\u91ca\u5668\u542f\u52a8\u65f6\u76f4\u63a5\u521b\u5efa\u52a0\u8f7d,\u76f4\u5230\u89e3\u91ca\u5668\u5173\u95ed\u65f6\u5931\u6548. \u5168\u5c40: \u5728\u6587\u4ef6\u6267\u884c\u65f6\u751f\u6548,\u5728\u6587\u4ef6\u6267\u884c\u5b8c\u6bd5\u65f6\u5931\u6548. \u5c40\u90e8: \u5728 \u6587\u4ef6\u6267\u884c\u8fc7\u7a0b\u4e2d ,\u5982\u679c\u8c03\u7528\u4e86\u67d0\u4e2a\u51fd\u6570\u624d\u4f1a \u4e34\u65f6\u751f\u6548 ,\u5728 \u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u540e\u5931\u6548 . \u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u7684\u58f0\u660e\u5468\u671f\u662f\u81ea\u5176\u5efa\u7acb\u5f00\u59cb,\u5230\u5b83\u4eec\u5404\u81ea\u7684\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u7ec8\u6b62.. \u5f53\u8fd9\u4e9b\u547d\u540d\u7a7a\u95f4\u7684\u51fd\u6570\u7ec8\u6b62\u65f6, Python\u53ef\u80fd\u4e0d\u4f1a\u7acb\u5373\u56de\u6536\u5206\u914d\u7ed9\u8fd9\u4e9b\u547d\u540d\u7a7a\u95f4\u7684\u5185\u5b58, \u4f46\u662f\u5bf9\u5176\u4e2d\u5bf9\u8c61\u7684\u6240\u6709\u5f15\u7528\u90fd\u5c06\u5931\u6548.. \u53d8\u91cf\u52a0\u8f7d\u67e5\u8be2\u987a\u5e8f \u00b6 \u53d8\u91cf\u52a0\u8f7d\u8fdb\u547d\u540d\u7a7a\u95f4\u7684\u987a\u5e8f: \u5185\u7f6e --> \u5168\u5c40 --> \u5c40\u90e8 \u53d8\u91cf\u5728\u547d\u540d\u7a7a\u95f4\u91cc\u67e5\u627e\u7684\u987a\u5e8f: \u4ece\u5f53\u524d\u4f4d\u7f6e\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4 --> \u5168\u5c40 --> \u5185\u7f6e \u901a\u4fd7\u70b9\u89e3\u91ca\u4e0b: \u5728\u4ee3\u7801\u4ece\u800c\u4e0b\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d,\u4e0d\u65ad\u6709\u53d8\u91cf\u88ab\u52a0\u8f7d\u8fdb\u5bf9\u5e94\u7684\u547d\u540d\u7a7a\u95f4.. \u5f53\u9047\u5230def\u8bed\u53e5,\u4f1a\u5148\u5c06\u51fd\u6570\u540d\u5b57\u52a0\u8f7d\u8fdb\u5168\u5c40\u547d\u540d\u7a7a\u95f4,\u4f46\u51fd\u6570\u4f53\u4ee3\u7801\u4e0d\u4f1a\u6267\u884c,\u4f1a\u6682\u65f6\u8df3\u8fc7; \u51fd\u6570\u5185\u90e8\u7684\u53d8\u91cf\u8981\u7b49\u5230\u51fd\u6570\u8c03\u7528\u7684\u65f6\u5019\u624d\u4f1a\u52a0\u8f7d\u8fdb\u5c40\u90e8\u547d\u540d\u7a7a\u95f4... \u5f15\u7528\u7684\u53d8\u91cf\u5728\u547d\u540d\u7a7a\u95f4\u91cc\u67e5\u627e\u7684\u987a\u5e8f(\u4f5c\u7528\u57df\u5173\u7cfb): \u4e3e\u4e2a\u4f8b\u5b50,\u51fd\u6570\u91cc\u4f7f\u7528\u4e86x\u53d8\u91cf,\u4f46\u6b64\u53d8\u91cf\u4e0d\u5728\u8be5\u51fd\u6570\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u91cc,\u5c31\u4f1a\u53bb\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u91cc\u627e... \u5f53\u7136\u5b9e\u9645\u60c5\u51b5\u4f1a\u66f4\u590d\u6742.\u540e\u6587\u4f1a\u8be6\u7ec6\u9610\u8ff0\u4f5c\u7528\u57df. \"\"\"\u53d8\u91cf\u52a0\u8f7d\u8fdb\u547d\u540d\u7a7a\u95f4 \u7b2c\u51e0\u884c\u4ee3\u7801 \u5168\u5c40 \u5c40\u90e8 1 func 4 func x:1 5 func x:1 y:2 6 func x:10 y:2 \u8bb0\u4f4f\u4e00\u53e5\u8bdd,\u4f5c\u7528\u57df\u5173\u7cfb\u662f\u5728\u51fd\u6570\u5b9a\u4e49\u9636\u6bb5\u5c31\u56fa\u5b9a\u6b7b\u4e86,\u4e0e\u51fd\u6570\u7684\u8c03\u7528\u4f4d\u7f6e\u65e0\u5173!! \"\"\" def func (): y = 2 print ( x ) x = 1 func () # 1 x = 10 func () # 10 -- \u5728\u8c03\u7528\u51fd\u6570\u4e4b\u524d,\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u91cc\u7684x\u7684\u503c\u88ab\u6539\u4e3a10\u5566 # --- --- --- x = 10 a = lambda y : x + y x = 20 b = lambda y : x + y print ( a ( 10 )) # 30 print ( b ( 10 )) # 30 \u4f5c\u7528\u57df \u00b6 \u6982\u5ff5 \u00b6 \u4e25\u8c28\u70b9\u8bf4,python\u89e3\u91ca\u5668\u4f1a\u7ed9\u6bcf\u4e2a\u4ee3\u7801\u5757\u5206\u914d\u547d\u540d\u7a7a\u95f4,\u4ee3\u7801\u5757\u4e2d\u7684\u7ed1\u5b9a\u64cd\u4f5c\u4f7f\u5f97\u53d8\u91cf\u5728\u547d\u540d\u7a7a\u95f4\u5177\u5907\u53ef\u89c1\u6027.\u7ed1\u5b9a\u64cd\u4f5c\u5b8c\u6210\u540e,\u53d8\u91cf\u53ef\u88ab\u5f15\u7528.. \u547d\u540d\u7a7a\u95f4\u76f8\u4e92\u72ec\u7acb,\u4e0d\u540c\u547d\u540d\u7a7a\u95f4\u4e2d\u53ef\u80fd\u5177\u5907\u76f8\u540c\u7684\u53d8\u91cf\u540d,\u5f53\u4ee3\u7801\u5757\u4e2d\u51fa\u73b0\u53d8\u91cf\u5f15\u7528\u65f6,\u5f15\u7528\u54ea\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u53d8\u91cf\u5462\uff1f\u8fd9\u5c31\u9700\u8981\u4f5c\u7528\u57df!! (\u4ee3\u7801\u5757\u4e2d\u7684\u7ed1\u5b9a\u64cd\u4f5c -- \u547d\u540d\u7a7a\u95f4\u5b58\u50a8\u5bf9\u5e94\u7684\u53d8\u91cf\u540d; \u4ee3\u7801\u5757\u4e2d\u7684\u53d8\u91cf\u5f15\u7528 -- \u6309\u4f5c\u7528\u57df\u5173\u7cfb\u8fdb\u884c\u67e5\u627e! ) Ps: \u4ee3\u7801\u5757\u73af\u5883\u662f\u4ec0\u4e48? \u8be5code block\u4e2d\u6240\u6709scope\u4e2d\u53ef\u89c1\u7684name\u7684\u96c6\u5408\u6784\u6210block\u7684\u73af\u5883.. \u4f5c\u7528\u57df\u5373\u4ee3\u7801\u5757!! scope\u7a7a\u95f4\u91cc\u7684\u53d8\u91cf\u4f5c\u7528\u7684\u8303\u56f4\u5c31\u662f\u6240\u5bf9\u5e94\u7684\u4ee3\u7801\u5757,\u8fd9\u4e9b\u53d8\u91cf\u5728\u8be5\u4ee3\u7801\u5757\u4e2d\u662f\u53ef\u89c1\u7684 \u4f5c\u7528\u57df\u5173\u7cfbLEGB/\u51fd\u6570\u91cc\u5f15\u7528\u53d8\u91cf\u7684\u641c\u7d22\u8def\u5f84/\u4f9d\u6b21\u4eceLEGB\u4f5c\u7528\u57df\u5bf9\u5e94\u7684scope\u4e2d\u67e5\u627e! \u4ece\u5d4c\u5957\u7684\u91cc\u5c42\u5f80\u5916\u5c42\u67e5\u627e \u4f5c\u7528\u57df\u5173\u7cfb \u67e5\u627e\u987a\u5e8fLEGB,\u6240\u4ee5\u8ddf \u4ee3\u7801\u5757\u7684\u5d4c\u5957 \u6709\u5173, \u67e5\u7684\u662fLEGB\u5bf9\u5e94\u7684scope,\u6240\u4ee5\u8ddf \u4ee3\u7801\u5757\u7684\u73af\u5883 \u6709\u5173! \u5185\u5fc3OS : \u611f\u89c9\u81ea\u5df1\u5c06\u7b80\u5355\u7684\u4e1c\u897f\u590d\u6742\u5316\u4e86 , \u60f3\u4e0e\u4e13\u4e1a\u540d\u8bcd\u4e00\u4e00\u5bf9\u5e94\u4e0a . \u256e ( \uffe3\u25bd\uffe3 \"\" ) \u256d \u5f53\u4f5c\u52a0\u6df1\u5370\u8c61\u7406\u89e3\u5427 \u89e3\u91ca\u4e0b\u4e0a\u56fe : \u8be5\u7a0b\u5e8f\u6709\u4e09\u4e2a\u51fd\u6570 , \u53ef\u5212\u5206\u51fa\u4ee3\u7801\u5757A \u3001 B \u3001 C , \u8fd9\u4e09\u4e2a\u4ee3\u7801\u5757\u662f\u76f8\u4e92\u5d4c\u5957\u7684 . ( \u4ee3\u7801\u5757A\u5305\u542b1 - 10 \u884c\u5168\u90e8\u4ee3\u7801 ; \u4ee3\u7801\u5757B\u5305\u542b4 - 9 \u884c\u4ee3\u7801 ; \u4ee3\u7801\u5757C\u5305\u542b7 - 9 \u884c\u4ee3\u7801 ) A\u4ee3\u7801\u5757\u4f1a\u6267\u884c\u7ea2\u8272\u6846\u8d77\u6765\u7684\u90a3\u4e24\u90e8\u5206\u4ee3\u7801 ( B\u51fd\u6570\u4f53\u4ee3\u7801\u662f\u4e0d\u4f1a\u6267\u884c\u7684 ), \u5c06\u7ed1\u5b9a\u64cd\u4f5c\u4ee3\u7801\u91cc\u7684\u53d8\u91cf\u5b58\u5230\u5c40\u90e8scope\u4e2d ! \u5373A\u4ee3\u7801\u4f1a\u4f9d\u6b21\u5c06a b funcB m\u538b\u5165scope ( funcA ) \u8fd9\u4e2a\u6808\u4e2d B\u4ee3\u7801\u5757 \u3001 C\u4ee3\u7801\u5757\u7684\u6267\u884c\u540c\u7406 . scope\u7a7a\u95f4\u91cc\u7684\u53d8\u91cf\u4f5c\u7528\u7684\u8303\u56f4\u5c31\u662f\u6240\u5bf9\u5e94\u7684\u4ee3\u7801\u5757 . \u4ee3\u7801\u5757A\u7684\u5c40\u90e8scope\u7684\u4f5c\u7528\u8303\u56f4\u5c31\u662f\u4ee3\u7801\u5757A . \u4f5c\u7528\u57df\u5373\u4ee3\u7801\u5757 !! \u4ee3\u7801\u5757\u5f15\u7528\u53d8\u91cf\u7684\u67e5\u627e\u987a\u5e8fLEGB\u4ece\u4ee3\u7801\u5757\u73af\u5883\u7684\u89d2\u5ea6\u89e3\u91ca\u662f\u89e3\u91ca\u5f97\u901a\u7684 . \u4f46\u611f\u89c9\u590d\u6742\u5316\u4e86 . \u4ee3\u7801\u5757\u5f15\u7528\u53d8\u91cf\u5148\u4ece\u672c\u5730\u4f5c\u7528\u57df / \u91cc\u5c42\u4ee3\u7801\u5757\u6240\u5bf9\u5e94\u7684scope\u4e2d\u67e5\u627e ; \u82e5\u6ca1\u6709\u518d\u53bb\u5d4c\u5957\u4f5c\u7528\u57df / \u4e2d\u95f4\u5c42\u4ee3\u7801\u5757\u6240\u5bf9\u5e94\u7684scope\u4e2d\u67e5\u627e ; \u4ee5\u6b64\u7c7b\u63a8 . \u5728\u8fd9\u91cc , \u4ee3\u7801\u5757C\u4e2d\u5f15\u7528\u4e86\u53d8\u91cfm , \u5728scope ( c ) / \u4ee3\u7801\u5757C\u7684\u73af\u5883\u4e2d\u6ca1\u6709 , \u5728scope ( B ) / \u4ee3\u7801\u5757B\u7684\u73af\u5883\u4e2d\u67e5\u627e \u4e5f\u6ca1\u6709 . \"\u4f60\u60f3\u4e00\u4e0b\u4ee3\u7801\u5757B\u7684\u73af\u5883=scope(B)+scope(C),scope(C)\u4e2d\u6ca1\u6709\u662f\u4e0d\u662f\u5c31\u5269scope(B)\u5566\" \u6700\u540e\u5728scope ( A ) \u91cc\u627e\u5230\u5566 \uff01 \u4f9d\u6b21\u4eceLEGB\u4f5c\u7528\u57df\u5bf9\u5e94\u7684scope\u4e2d\u67e5\u627e ! \u63d0\u4e00\u5634, \u901a\u5e38\u5728\u7f16\u7a0b\u8bed\u8a00\u4e2d, \u53d8\u91cf\u7684\u4f5c\u7528\u57df\u4ece\u4ee3\u7801\u7ed3\u6784 (\u4ee3\u7801\u5757) \u89d2\u5ea6\u6765\u770b, \u6709\u5757\u7ea7\u3001\u51fd\u6570\u3001\u7c7b\u3001\u6a21\u5757\u3001\u5305\u7b49\u7531\u5c0f\u5230\u5927\u7684\u7ea7\u522b.\u4f46\u662f\u5728Python\u4e2d, \u6ca1\u6709\u5757\u7ea7\u4f5c\u7528\u57df, \u4e5f\u5c31\u662f\u7c7b\u4f3cif\u8bed\u53e5\u5757\u3001for\u8bed\u53e5\u5757\u3001with\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7b49\u7b49\u662f\u4e0d\u5b58\u5728\u4f5c\u7528\u57df\u6982\u5ff5\u7684, \u4ed6\u4eec\u7b49\u540c\u4e8e\u666e\u901a\u7684\u8bed\u53e5\uff01 \u6362\u4e2a\u8bf4\u6cd5: \u53ea\u6709\u6a21\u5757module,\u7c7bclass\u4ee5\u53ca\u51fd\u6570def\u3001lambda\u624d\u4f1a\u5f15\u5165\u65b0\u7684\u4f5c\u7528\u57df(\u5373\u5f00\u8f9f\u65b0\u7684\u547d\u540d\u7a7a\u95f4), \u5176\u5b83\u7684\u4ee3\u7801\u5757(\u5982 if/elif/else/\u3001try/except\u3001for/while\u7b49)\u662f\u4e0d\u4f1a\u5f15\u5165\u65b0\u7684\u4f5c\u7528\u57df\u7684.. LEGB \u00b6 \u5728\u8868\u8fbe\u5f0f\u4e2d\u5f15\u7528\u53d8\u91cf\u65f6,Python\u89e3\u91ca\u5668\u5c06\u6309\u7167\u5982\u4e0b\u987a\u5e8f\u904d\u5386\u5404\u4f5c\u7528\u57df,\u4ee5\u89e3\u6790\u8be5\u5f15\u7528: \u5c40\u90e8\u4f5c\u7528\u57df/\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u91cc\u53d8\u91cf\u7684\u4f5c\u7528\u8303\u56f4 -- \u5f53\u524d\u51fd\u6570\u7684\u8303\u56f4 L Local \u5185\u5d4c\u4f5c\u7528\u57df/\u5185\u5d4c\u547d\u540d\u7a7a\u95f4\u91cc\u53d8\u91cf\u7684\u4f5c\u7528\u8303\u56f4 -- \u51fd\u6570\u5d4c\u5957\u91cc\u5916\u56f4\u51fd\u6570\u7684\u8303\u56f4 E Enclosing \u5168\u5c40\u4f5c\u7528\u57df/\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u91cc\u53d8\u91cf\u7684\u4f5c\u7528\u8303\u56f4 -- \u5f53\u524dpy\u6a21\u5757\u7684\u8303\u56f4(\u4e0d\u5305\u542bimport\u7684py\u6a21\u5757) G Global \u5185\u7f6e\u4f5c\u7528\u57df/\u5185\u7f6e\u547d\u540d\u7a7a\u95f4\u91cc\u53d8\u91cf\u7684\u4f5c\u7528\u8303\u56f4 -- \u5305\u542blen\u53castr\u7b49\u51fd\u6570\u7684\u90a3\u4e2ascope B Built-in \u82e5\u5728\u8fd9\u4e9b\u5730\u65b9\u90fd\u627e\u4e0d\u5230\u540d\u79f0\u76f8\u7b26\u7684\u53d8\u91cf,\u5c31\u4f1a\u629b\u51faNameError\u5f02\u5e38.. \u4f5c\u7528\u57df\u5173\u7cfb(\u51fd\u6570\u91cc\u5f15\u7528\u53d8\u91cf\u7684\u641c\u7d22\u8def\u5f84)\u662f\u5728\u51fd\u6570\u5b9a\u4e49\u9636\u6bb5\u5c31\u56fa\u5b9a\u6b7b\u4e86,\u4e0e\u51fd\u6570\u7684\u8c03\u7528\u4f4d\u7f6e\u65e0\u5173!! \u4f5c\u7528\u57df\u662fscope\u91cc\u53d8\u91cf\u4f5c\u7528\u7684\u8303\u56f4,\u5c31\u662fscope\u6240\u5728\u4ee3\u7801\u5757. \u800cLEGB\u9075\u5faa\u6700\u5185\u4f5c\u7528\u57df\u539f\u5219,\u6240\u4ee5\u5b9a\u4e49\u9636\u6bb5\u5c31\u56fa\u5b9a\u6b7b\u4e86! def f1 (): x = 1 # -- \u63d0\u4e00\u5634,f1\u51fd\u6570\u7ed3\u675f\u540e,x\u53d8\u91cf\u8fd8\u80fd\u88ab\u51fd\u6570\u5d4c\u5957\u4e2d\u7684\u5185\u90e8\u51fd\u6570inner\u8bbf\u95ee\u5230..Why\uff1f\u56e0\u4e3ax\u662f\u81ea\u7531\u53d8\u91cf\uff01 # \u540e\u7eed\u7684\u95ed\u5305\u90e8\u5206\u4f1a\u8be6\u7ec6\u9610\u8ff0!! def inner (): print ( x ) # -- \u4f5c\u7528\u57df\u5173\u7cfb\u662f\u5728\u51fd\u6570\u5b9a\u4e49\u9636\u6bb5\u5c31\u56fa\u5b9a\u6b7b\u4e86,\u4e0e\u51fd\u6570\u7684\u8c03\u7528\u4f4d\u7f6e\u65e0\u5173!! return inner f = f1 () def bar (): x = 111 f () # -- \u4e0e\u8c03\u7528\u4f4d\u7f6e\u65e0\u5173 bar () # 1 globals()\u3001locals() \u00b6 python\u63d0\u4f9b\u4e86\u4e24\u4e2a\u5185\u7f6e\u51fd\u6570globals()\u548clocals(),\u524d\u8005\u8fd4\u56de\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u7684\u5b57\u5178,\u540e\u8005\u8fd4\u56de\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u5b57\u5178.. >>> type ( globals ()), type ( locals ()) ( < class ' dict '>, <class ' dict '>) \u6ce8\u610f: globals() \u8fd4\u56de\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u7684\u5b9e\u9645\u5f15\u7528; \u968f\u4fbf\u600e\u4e48\u6298\u817e\u90fd\u662f\u5728\u64cd\u4f5c\u5168\u5c40\u547d\u540d\u7a7a\u95f4, \u7c7b\u4f3c\u4e8e a = b \"\"\" \u53ef\u4ee5\u901a\u8fc7\u5f15\u7528\u5bf9\u8c61\u7684\u53d8\u91cf\u540dx,\u4ee5\u5e38\u89c4\u7684\u65b9\u5f0f\u8bbf\u95ee\u8be5\u5bf9\u8c61..\u4ea6\u53ef\u4ee5\u901a\u8fc7\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u5b57\u5178\u95f4\u63a5\u8bbf\u95ee\u5b83 \"\"\" >>> x = 'foo' >>> 'x' in globals () # -- \u6ce8\u610f,\u53d8\u91cf\u540d\u662f\u4ee5\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u4f5c\u4e3a\u952e\u7684 True >>> x 'foo' >>> globals ()[ 'x' ] 'foo' >>> x is globals ()[ 'x' ] # -- x\u7684\u503c\u4e0e\"x\"\u952e\u6240\u5bf9\u5e94vlaue\u503c\u7684\u5185\u5b58\u5730\u5740\u76f8\u540c True \"\"\" \u53ef\u4ee5\u4f7f\u7528globals()\u51fd\u6570\u5728\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u4e2d\u521b\u5efa\u548c\u4fee\u6539\u5168\u5c40\u53d8\u91cf \"\"\" >>> y NameError : name 'z' is not defined # -- \u5168\u5c40\u547d\u540d\u7a7a\u95f4\u4e2d\u6ca1\u6709\u53d8\u91cfy >>> glo = globals () # -- \u6ce8\u610f:glo\u662f\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u7684\u5f15\u7528 >>> glo = 100 # -- \u521b\u5efa \u7b49\u540c\u4e8e globals()['y'] = 100 >>> y 100 >>> glo [ 'y' ] = 123 # -- \u4fee\u6539 >>> y 123 \"\"\" globals\u7ed3\u5408format\u7684\u5e94\u7528 \"\"\" >>> x = 1 >>> y = 2 >>> \" {x} , {y} \" . format ( ** globals ()) '1,2' locals() \u8fd4\u56de\u7684\u4e0d\u662f\u5bf9\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u7684\u5f15\u7528!! \u90a3\u5230\u5e95\u8fd4\u56de\u7684\u662f\u4ec0\u4e48\u5462\uff1f \u67e5\u9605\u8d44\u6599,\u5f88\u591a\u535a\u5ba2\u8bf4\u662f\u62f7\u8d1d\u3001\u526f\u672c.. \u4e91\u91cc\u96fe\u91cc\u7684. \u81ea\u5df1\u505a\u4e86\u5b9e\u9a8c\u540e, \u53d1\u73b0\u8fd9\u6837\u7684\u63cf\u8ff0\u90fd\u4e0d\u591f\u4e25\u8c28.. \u5148\u8bf4\u7ed3\u8bba : locals()\u51fd\u6570\u8fd4\u56de\u7684\u662f\u5bf9\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u7684\u4e00\u4e2a \"\u62f7\u8d1d\" ( \u6253\u4e86\u5f15\u53f7\u54e6 ) ,\u4f46\u6b64\u62f7\u8d1d\u6709\u70b9\u7279\u6b8a,\u5b83\u5177\u5907\u6d45\u62f7\u8d1d\u7684\u4e00\u4e9b\u7279\u70b9,\u540c\u65f6\u5f53\u6211\u4eec\u518d\u6b21\u8c03\u7528locals()\u51fd\u6570\u65f6,\u5b83\u4f1a \u540c\u6b65\u66f4\u65b0 \"\u62f7\u8d1d\"\u7684\u503c.. \u6b64\"\u62f7\u8d1d\"\u6dfb\u52a0,\u6539\u53d8\u53ef\u53d8\u7c7b\u578b\u7684\u53d8\u91cf\u662fok\u7684,\u4f46\u4fee\u6539\u4e0d\u53ef\u53d8\u53d8\u91cf\u662f\u4e0d\u6210\u529f\u7684.. \"\"\" \u4ec0\u4e48\u662f\u62f7\u8d1d\u3001\u526f\u672c\u3001\u89c6\u56fe\uff1f \u53c2\u8003\u94fe\u63a5: https://blog.csdn.net/Reborn214/article/details/124539097 \u7b80\u5355\u6765\u8bf4,\u526f\u672c\u3001\u89c6\u56fe\u662fpython numpy\u6570\u7ec4\u4e2d\u7684\u4e13\u4e1a\u540d\u8bcd,\u4f46\u5176\u5177\u5907\u7684\u7279\u6027\u8ddf\u62f7\u8d1d\u5dee\u4e0d\u591a. numpy\u4e2d\u5f15\u7528 = python\u4e2d\u5f15\u7528; numpy\u4e2d\u89c6\u56fe = python\u4e2d\u6d45\u62f7\u8d1d; numpy\u4e2d\u526f\u672c = python\u4e2d\u6df1\u62f7\u8d1d \u503c\u5f97\u4e00\u63d0\u7684\u662f,\u5f15\u7528\u4e00\u822c\u53d1\u751f\u5728\u8d4b\u503c\u64cd\u4f5c(python\u8d4b\u503c\u90fd\u662f\u5f15\u7528\"\u5185\u5b58\u5730\u5740\"\u4f20\u9012) \u8fd8\u8981\u6ce8\u610f\u4e00\u4e2a\u5751!! id():\u8fd4\u56de\u5bf9\u8c61\u7684\u201c\u6807\u8bc6\u503c\u201d.\u8be5\u503c\u662f\u4e00\u4e2a\u6574\u6570,\u5728\u6b64\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u4e2d\u4fdd\u8bc1\u662f\u552f\u4e00\u4e14\u6052\u5b9a\u7684. \u4e24\u4e2a\u751f\u547d\u671f\u4e0d\u91cd\u53e0\u7684\u5bf9\u8c61\u53ef\u80fd\u5177\u6709\u76f8\u540c\u7684id()\u503c.. \u4e3e\u4f8b\u5206\u6790 \u6ca1\u6709\u5c06a[:]\u8d4b\u503c\u7ed9\u53d8\u91cf\u8fdb\u884c\u5f15\u7528,\u5f53\u6267\u884c\u5b8ca[:]\u540e,\u8fd9\u4e2a\u5bf9\u8c61\u5c31\u91ca\u653e\u5566.\u4f46\u8fd9\u5757\u5185\u5b58\u53ef\u80fd\u5e76\u6ca1\u6709\u6765\u5f97\u53ca\u91ca\u653e. \u5f53\u6211\u4eec\u65b0\u6267\u884ca[:]\u7684\u65f6\u5019,\u7528\u7684\u5c06\u4f1a\u662f\u540c\u4e00\u4e2a\u5185\u5b58,\u5e76\u6ca1\u6709\u7533\u8bf7\u65b0\u7684\u5185\u5b58. \u8fd9\u4f1a\u8ba9\u6211\u4eec\u89c9\u5f97\u4e24\u4e2aa[:]\u4e0ea[:]\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61 >>> a = [1,2,3] >>> id(a[:]) 140417051683648 >>> id(a[:]) 140417051684544 >>> id(a[:]) 140417051684544 >>> id(a[:]) is id(a[:]) # -- \u8ba9\u5176\u5904\u4e8e\u540c\u4e00\u751f\u547d\u5468\u671f,\u6bcf\u6b21\u6d45\u62f7\u8d1d\u90fd\u4f1a\u751f\u6210\u4e0d\u540c\u7684\u5bf9\u8c61,\u7ed3\u679c\u80af\u5b9a\u4e3aFalse False \"\"\" def func (): # -- \u9a8c\u8bc1\u4e86id()\u7684\u5751. print ( id ( locals ())) # 140204424022656 print ( id ( locals ())) # 140204424022656 print ( id ( locals ()) is id ( locals ())) # False m = [ 1 , 2 , 3 ] n = 66 loc = locals () # -- loc\u662f\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u7684\u201c\u62f7\u8d1d\u201d loc\u662f\u5bf9\u6b64\"\u62f7\u8d1d\"\u7684\u5f15\u7528!! print ( loc ) # {'m': [1, 2, 3], 'n': 66} \"\"\"\u6765,\u7b80\u5316\u4e00\u4e0b import copy scope = {'m': [1, 2, 3], 'n': 66} # -- \u6307\u4ee3\u5c40\u90e8\u547d\u540d\u7a7a\u95f4 loc = copy.copy(scope) # -- \u6307\u4ee3\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u7684\u6d45\u62f7\u8d1d loc['m'].append(4) scope.append(5) scope['n'] = 88 scope['x'] = 20 loc['n'] = 77 print(scope) # -- {'m': [1, 2, 3, 4, 5], 'n': 88, 'x': 20} print(loc) # -- {'m': [1, 2, 3, 4, 5], 'n': 77} \"\"\" loc [ 'm' ] . append ( 4 ) # -- \u8bd5\u56fe\u901a\u8fc7\"\u62f7\u8d1d\"\u8fc7\u6765\u7684\u5b57\u5178\u4fee\u6539\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u91cc\u7684\u53ef\u53d8\u7c7b\u578b\u7684\u53d8\u91cfm \u6210\u529f m . append ( 5 ) # -- \u5728\u5c40\u90e8\u547d\u4ee4\u7a7a\u95f4\u91cc\u4fee\u6539\u4e86m\u53d8\u91cf\u5bf9\u5e94\u7684\u503c n = 88 # -- \u5728\u5c40\u90e8\u547d\u4ee4\u7a7a\u95f4\u91cc\u4fee\u6539\u4e86n\u53d8\u91cf\u5bf9\u5e94\u7684\u503c x = 20 # -- \u5728\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u91cc\u6dfb\u52a0\u4e86x\u53d8\u91cf # -- \u53ef\u4ee5\u53d1\u73b0\u6b64\"\u62f7\u8d1d\",\u5177\u5907\u6d45\u62f7\u8d1d\u7684\u7279\u6027 print ( loc ) # {'m': [1, 2, 3, 4, 5], 'n': 66} loc [ 'n' ] = 77 # -- \u8bd5\u56fe\u901a\u8fc7\"\u62f7\u8d1d\"\u8fc7\u6765\u7684\u5b57\u5178\u4fee\u6539\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u91cc\u7684\u53ef\u53d8\u7c7b\u578b\u7684\u53d8\u91cfn \u5931\u8d25 loc [ 'q' ] = 250 # -- loc\u6dfb\u52a0\u662f\u6210\u529f\u7684 print ( loc ) # {'m': [1, 2, 3, 4, 5], 'n': 77, 'q': 250} print ( locals ()) # {'m': [1, 2, 3, 4, 5], 'n': 88, 'q': 250, 'loc': {...}, 'x': 20} # -- \u518d\u6b21\u8c03\u7528locals()\u540e,\"\u62f7\u8d1d\"\u540c\u6b65\u66f4\u65b0\u4e86. print ( loc ) # {'m': [1, 2, 3, 4, 5], 'n': 88, 'q': 250, 'loc': {...}, 'x': 20} func () global\u3001nonlocal \u00b6 \u56de\u987e\u4e0bPython\u5728\u4f5c\u7528\u57df\u91cc\u5bf9\u53d8\u91cf\u7684\u8d4b\u503c\u64cd\u4f5c\u89c4\u5219: \u82e5\u8fd9\u4e2a\u53d8\u91cf\u5728\u8be5\u4f5c\u7528\u57df\u5b58\u5728(\u5df2\u7ecf\u5b9a\u4e49), \u5219\u5bf9\u5176\u7ed1\u5b9a\u65b0\u7684\u5bf9\u8c61; \u82e5\u4e0d\u5b58\u5728,\u5219\u5c06\u8fd9\u6b21\u8d4b\u503c\u89c6\u4e3a\u5bf9\u8fd9\u4e2a\u53d8\u91cf\u7684\u5b9a\u4e49.. global -- \u4e0d\u7ba1\u662f\u5728\u51fd\u6570\u5d4c\u5957\u7684\u54ea\u4e00\u5c42,\u5bf9x\u53d8\u91cf\u7684\u8d4b\u503c\u64cd\u4f5c\u90fd\u662f\u4fee\u6539\u5168\u5c40\u4f5c\u7528\u57df\u91cc\u7684\u90a3\u4e2ax\u53d8\u91cf!! nonlocal -- \u5982\u679c\u5728\u95ed\u5305\u5185\u7ed9x\u53d8\u91cf\u8d4b\u503c,\u90a3\u4e48\u4fee\u6539\u7684\u5176\u5b9e\u662f\u95ed\u5305\u5916\u90a3\u4e2a\u4f5c\u7528\u57df\u91cc\u7684x\u53d8\u91cf.. nonlocal\u7684\u552f\u4e00\u9650\u5236\u5728\u4e8e,\u4e0d\u80fd\u5ef6\u4f38\u5230\u6a21\u5757\u7ea7\u522b,\u8fd9\u662f\u4e3a\u4e86\u9632\u6b62\u5b83\u6c61\u67d3\u5168\u5c40\u53d8\u91cf.. Ps: \u63d0\u4e00\u5634\u95ed\u5305,\u540e\u7eed\u4f1a\u8be6\u7ec6\u9610\u8ff0. \u51fd\u6570\u5d4c\u5957,\u5185\u90e8\u51fd\u6570\u5f15\u7528\u5916\u90e8\u51fd\u6570\u7684\u53c2\u6570\u6216\u53d8\u91cf,\u5c31\u6784\u6210\u4e86\u95ed\u5305.. \"\"\" \u2605 --global \u5728\u5c40\u90e8\u82e5\u60f3\u4fee\u6539\u5168\u5c40\u7684\u4e0d\u53ef\u53d8\u7c7b\u578b,\u9700\u8981\u501f\u52a9global\u58f0\u660e \u5728\u5c40\u90e8\u82e5\u60f3\u4fee\u6539\u5168\u5c40\u7684\u53ef\u53d8\u7c7b\u578b,\u4e0d\u9700\u8981\u501f\u52a9\u4efb\u4f55\u58f0\u660e,\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539 \u82e5\u5168\u5c40\u4e2d\u6ca1\u6709x\u53d8\u91cf,global\u8bed\u53e5\u548c\u8d4b\u503c\u7684\u7ec4\u5408(\u4e0d\u7ba1\u5904\u4e8e\u5d4c\u5957\u7684\u54ea\u4e00\u5c42)\u53ef\u4ee5\u95f4\u63a5\u5728\u5c40\u90e8\u4e2d\u521b\u5efax\u5168\u5c40\u53d8\u91cf \"\"\" x = [] def func (): global m # -- \u7533\u660em\u53d8\u91cf\u662f\u5168\u5c40\u53d8\u91cf m = 10 globals ()[ 'n' ] = 20 # -- n\u53d8\u91cf\u5728\u5168\u5c40\u4e2d\u5b58\u5728\u7684\u8bdd,\u6b64\u8d4b\u503c\u64cd\u4f5c\u5c31\u662f\u5728\u4fee\u6539;\u901a\u5e38\u4e0d\u4f1a\u8fd9\u4e48\u505a,\u5b8c\u5168\u6ca1\u5fc5\u8981 x . append ( 1 ) func () func () print ( x ) # [1,1] print ( m , n ) # 10,20 \"\"\" \u2605 --nonlocal \u6307\u975e\u5168\u5c40\u6700\u8fd1\u7684\u90a3\u4e2a \"\"\" x = 1 def f1 (): # E f1\u7684\u53c2\u6570\u5bf9f2\u800c\u8a00 x = 111 # E \u6b64\u5904\u7684x\u5bf9f2\u800c\u8a00 def f2 (): # E f2\u7684\u53c2\u6570\u5bf9f3\u800c\u8a00 x = 222 # E \u6b64\u5904\u7684x\u5bf9f3\u800c\u8a00 def f3 (): nonlocal x # -- \u82e5f1\u51fd\u6570\u5d4c\u5957\u91cc\u6ca1\u6709x \u5219\u62a5\u9519\u627e\u4e0d\u5230x\u53d8\u91cf x = 333 # -- \u6539\u7684\u662f\u6700\u8fd1\u7684x = 222\u7684\u503c f3 () print ( x ) # 333 # {'f3': <function f1.<locals>.f2.<locals>.f3 at 0x7fc60c71c9d0>, 'x': 333} print ( locals ()) # f2\u7684\u5c40\u90e8\u4f5c\u7528\u57df f2 () print ( x ) # 111 # {'x': 111, 'f2': <function f1.<locals>.f2 at 0x7fc60c71c790>} print ( locals ()) # f1\u7684\u5c40\u90e8\u4f5c\u7528\u57df f1 () print ( x ) # 1","title":"\u51fd\u6570\u57fa\u7840"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/04_%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/#_1","text":"\u51fd\u6570\u7684\u4f7f\u7528\u5fc5\u987b\u9075\u5faa\u5148\u5b9a\u4e49,\u540e\u8c03\u7528\u7684\u539f\u5219 \u6269\u5c55: \u63d0\u9ad8\u5065\u58ee\u6027 -- https://www.cnblogs.com/liuqingzheng/p/11012099.html (\u8be5\u7bc7\u535a\u6587\u7684\u5f00\u5934\u5199\u9519\u4e86, python\u662f\u4e00\u95e8\u5f3a\u7c7b\u578b\u8bed\u8a00!!\u4e0d\u662f\u5f31\u7c7b\u578b.) \u4f7f\u7528\u8be5\u65b9\u5f0f,\u4f20\u9012\u7684\u5b9e\u53c2\u6216\u8005\u8fd4\u56de\u7684\u6570\u636e\u4e0d\u662f\u6307\u5b9a\u7684\u7c7b\u578b,\u4e0d\u4f1a\u62a5\u9519,\u6307\u5b9a\u7684\u90a3\u4e9b\u4e1c\u897f\u4e5f\u4e0d\u4f1a\u5141\u8bb8,\u53ea\u662f\u8f85\u52a9,\u5199\u6765\u65b9\u4fbf\u770b\u7684.. \u50cfjava\u548cgo\u8fd9\u4e9b\u7f16\u8bd1\u578b\u8bed\u8a00,\u5fc5\u987b\u6307\u5b9a\u7c7b\u578b\u5e76\u4e14\u4f20\u6307\u5b9a\u7684\u7c7b\u578b,\u4e0d\u7136\u62a5\u9519.. \u975e\u5e38\u4e25\u683c. \u52a8\u6001\u4e00\u65f6\u723d, \u91cd\u6784\u706b\u846c\u573a. Python\u4e2d\u7684\u9519\u8bef\u81f3\u5c11\u6709\u4e24\u79cd: \u8bed\u6cd5/\u89e3\u6790\u9519\u8bef -- \u8bed\u53e5\u6216\u8868\u8fbe\u5f0f\u5728\u8bed\u6cd5\u4e0a\u7684\u9519\u8bef \u5f02\u5e38 -- \u5728\u6267\u884c\u65f6\u68c0\u6d4b\u5230\u7684\u9519\u8bef\u88ab\u79f0\u4e3a\u5f02\u5e38 \u51fd\u6570 \u5b9a\u4e49 \u9636\u6bb5: \u53ea\u68c0\u6d4b\u51fd\u6570\u4f53\u7684\u8bed\u6cd5,\u4e0d\u6267\u884c\u51fd\u6570\u4f53\u4ee3\u7801 \u51fd\u6570 \u8c03\u7528 \u9636\u6bb5: \u6267\u884c\u51fd\u6570\u4f53\u4ee3\u7801 \"\"\" a.py\u6a21\u5757\u4e0b\u53ea\u6709\u8fd9\u4e9b\u4ee3\u7801,\u8fd0\u884ca.py\u6587\u4ef6. \u7b2c5\u884c\u4f1a\u62a5\u8bed\u6cd5\u9519\u8bef. \u7b2c\u4e8c\u884c\u6ca1\u62a5\u9519,\u8bc1\u660e\u4e86\u5728\u5b9a\u4e49\u9636\u6bb5\u51fd\u6570\u4f53\u4ee3\u7801\u662f\u4e0d\u4f1a\u6267\u884c\u7684!! \u6253\u5f00\u6ce8\u91ca \u8c03\u7528func\u51fd\u6570,\u5f00\u59cb\u6267\u884c\u51fd\u6570\u4f53\u4ee3\u7801,\u7b2c\u4e8c\u884c\u4f1a\u62a5UnboundLocalError\u7684\u5f02\u5e38 \"\"\" def func (): a a = b + 1 yuasyf m n p # func() \u51fd\u6570\u5b9a\u4e49\u7684 \u89c4\u8303 \u5199\u6cd5: def \u51fd\u6570\u540d ( \u53c2\u65701 , \u53c2\u65702 , ... ): \"\"\" \u51fd\u6570\u529f\u80fd\u63cf\u8ff0\u6d88\u606f :param \u53c2\u65701:\u63cf\u8ff0 :param \u53c2\u65702:\u63cf\u8ff0 :return: \u8fd4\u56de\u503c \"\"\" pass \u51fd\u6570\u8fd4\u56de\u503c \u51fd\u6570\u4e2d\u4e0d\u5199return\u6216return\u4e0d\u5e26\u4efb\u4f55\u8fd4\u56de\u503c,\u90fd\u76f8\u5f53\u4e8e\u5728\u51fd\u6570\u4f53\u6700\u540e\u4e00\u884c\u6dfb\u52a0 return None","title":"\u51fd\u6570\u7684\u5b9a\u4e49\u8c03\u7528"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/04_%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/#_2","text":"\u6572\u91cd\u70b9, \u51fd\u6570\u53c2\u6570\u4f20\u9012\u7b49\u540c\u4e8e\u76f4\u63a5\u8d4b\u503c, \u6839\u636e \u5b9a\u74061 , \u51fd\u6570\u88ab\u8c03\u7528\u540e, \u51fd\u6570\u7684\u53c2\u6570\u5c31\u662f\u5c40\u90e8\u53d8\u91cf!!","title":"\u51fd\u6570\u53c2\u6570\u4f20\u9012"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/04_%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/#_3","text":"\u5728\u7406\u6e05\u51fd\u6570\u53c2\u6570\u4f20\u9012\u4e4b\u524d,\u8981\u5148\u8bb0\u4f4f\u4e24\u4e2a\u91cd\u8981\u7684\u5b9a\u7406!! \u975e\u5e38\u91cd\u8981! \u77e5\u5176\u7136\u8981\u77e5\u5176\u6240\u4ee5\u7136.. \u25ce \u5b9a\u74061 : python\u5728\u4f5c\u7528\u57df\u91cc\u5bf9\u53d8\u91cf\u7684 \u8d4b\u503c\u64cd\u4f5c \u89c4\u5219: \u82e5\u88ab\u8d4b\u503c\u7684\u53d8\u91cf\u5728\u8be5\u4f5c\u7528\u57df\u5df2\u5b58\u5728,\u5219\u5bf9\u5176\u7ed1\u5b9a\u65b0\u7684\u5bf9\u8c61; \u82e5\u4e0d\u5b58\u5728,\u5219\u5c06\u6b64\u6b21\u8d4b\u503c\u89c6\u4e3a\u5bf9\u8fd9\u4e2a\u53d8\u91cf\u7684\u5b9a\u4e49.. \u63d0\u4e00\u5634\u54c8,\u5b9a\u74061\u7684\u7531\u6765\u8ddf\u53d8\u91cf\u7684\u53ef\u89c1\u6027\u7684\u5224\u5b9a\u6709\u5173!! \u25ce \u5b9a\u74062 : python\u4e2d\u7684\u7ed1\u5b9a\u64cd\u4f5c(eg \u8d4b\u503c)\u90fd\u662f\u5bf9\u8c61\u5f15\u7528(\u5185\u5b58\u5730\u5740)\u7684\u4f20\u9012 \u6362\u4e2a\u8bf4\u6cd5,\u4e00\u7cfb\u5217\u7684\u7ed1\u5b9a\u64cd\u4f5c\u90fd\u662f\u5728\u4f20\u9012\u67d0\u4e00\u5bf9\u8c61\u7684\u5730\u5740\u7ed9\u67d0\u4e00\u53d8\u91cf\u540d\u8fdb\u884c\u7ed1\u5b9a!! \u5f15\u7528\u662f\u5565\uff1f\u5f15\u7528\u5c31\u662f\u6307\u5411. \u53d8\u91cf\u540d\u6307\u5411\u81ea\u8eab\u7ed1\u5b9a\u5bf9\u8c61\u7684\u5185\u5b58\u5730\u5740!! \u200b \u88ab\u8d4b\u503c = (\u53f3\u4fa7\u7684\u53d8\u91cf/\u5bf9\u8c61\u4eec)\u88ab\u5f15\u7528 -- \u627e\u5230\u5f15\u7528\u53d8\u91cf\u7ed1\u5b9a\u7684\u5bf9\u8c61, \u8fdb\u884c\u8fd0\u7b97\u540e\u7684\u7ed3\u679c/\u5bf9\u8c61 \u4f20\u9012\u7ed9\u88ab\u8d4b\u503c\u7684\u53d8\u91cf \u5728\u8fd9\u91cc,\u4f53\u4f1a\u4e0b \"python\u5f15\u7528\u8bed\u4e49\" \u5e26\u6765\u7684 \u5751 .. \u25b2\u9700\u6c42:\u5faa\u73af\u53bb\u9664\u5217\u8868\u4e2d\u76843 \"\"\" \u5206\u6790: \u6211\u4eec\u77e5\u9053,A\u64cd\u4f5c\u4f1a\u6839\u636enums\u5217\u8868\u7684 \"\u4e0b\u6807\" 1\u30012\u30013..\u7684\u987a\u5e8f\u5faa\u73af\u53d6\u503c\u8d4b\u503c\u7ed9i \u5373i\u53d8\u91cf\u662fnums[0]\u3001nums[1]\u3001nums[2]\u7684\u5f15\u7528 \u5f53\u4e0b\u6807\u5faa\u73af\u52302\u65f6,\u53bb\u9664\u4e86nums\u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a3, \u4f46\u56e0\u4e3aremove\u64cd\u4f5c,nums\u5217\u8868\u4ece\u4e0b\u6807\u4e3a3\u5f00\u59cb\u7684\u4f4d\u7f6e\u7684\u6570\u636e\u90fd\u5f80\u524d\u632a\u52a8\u4e86\u4e00\u4f4d,\u6700\u540e\u53d8\u4e3a\u4e86[1,2,3,3,4]; A\u5faa\u73af\u64cd\u4f5c\u7684\u4e0b\u6807\u6309\u7167\u987a\u5e8f\u63a5\u7740\u5faa\u73af\u52303,\u95ee\u9898\u6765\u5566,\u6b64\u65f6\u5217\u8868\u4e2dnums[2]\u7684\u503c\u4e3a3\u5374\u88ab\u8df3\u8fc7\u4e86.. \"\"\" nums = [ 1 , 2 , 3 , 3 , 3 , 4 ] for i in nums : # A if i == 3 : nums . remove ( i ) # B print ( nums , len ( nums )) # [1, 2, 3, 4] 4 # -- \u6b63\u89e3 \u8fdb\u884c\u5217\u8868\u7684\u6d45\u62f7\u8d1d nums = [ 1 , 2 , 3 , 3 , 3 , 4 ] for i in nums [:]: if i == 3 : nums . remove ( i ) print ( nums , len ( nums )) # [1, 2, 4] 3","title":"\u8d4b\u503c\u64cd\u4f5c"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/04_%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/#_4","text":"\u9488\u5bf9\u4e0d\u53ef\u53d8\u5bf9\u8c61(tuple\\str\\bool\\\u6570\u5b57\\\u4e0d\u53ef\u53d8\u96c6\u5408) \u5f88\u591a\u8d44\u6599\u5c06\u5176\u79f0\u4f5c \u51fd\u6570\u53c2\u6570 --\u503c\u4f20\u9012(\u62f7\u8d1d) \u522b\u88ab\u9a97\u4e86, \u672c\u8d28\u662f\u4f20\u9012\u5185\u5b58\u5730\u5740 , \u8fd8\u662f\u5f15\u7528\u8bed\u4e49 ,\u4e0d\u662f\u503c\u8bed\u4e49!! \u4ed4\u7ec6\u60f3\u54c8\u561b, \u4e0d\u53ef\u53d8\u5bf9\u8c61\u53d8\u4e0d\u4e86\u554a, \u4e00\u53d8\u5c31\u662f\u91cd\u65b0\u8d4b\u503c, id\u90fd\u53d8\u4e86.. \u6709\u70b9\u503c\u7c7b\u578b\u90a3\u5473,\u4f46\u4e0d\u662f\u503c\u7c7b\u578b!! \"\"\"-- \u5206\u6790 1> \u53c2\u6570a\u63a5\u6536\u5230\u7684\u662f\u503c\u7684\u7c7b\u578b\u662f\u6570\u5b57,\u6570\u5b57\u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u5bf9\u8c61 2> So,\u4f1a\u5c06\u63a5\u6536\u5230\u7684\u503c\u8fdb\u884c\u4e00\u4efd\u62f7\u8d1d! -- \u503c\u4f20\u9012(\u62f7\u8d1d) \u6839\u636e\u5b9a\u74061,\u56e0\u4e3afunc\u51fd\u6570\u5185\u4e0d\u5b58\u5728\u53d8\u91cfa,\u6240\u4ee5\u4f1a\u5728func\u51fd\u6570\u91cc\u65b0\u5b9a\u4e49\u5c40\u90e8\u53d8\u91cfa,\u5e76\u5c06\u62f7\u8d1d\u7684\u503c\u8d4b\u503c\u7ed9\u5c40\u90e8\u53d8\u91cfa. \u2605 \u6ce8\u610f: func\u51fd\u6570\u65b0\u5b9a\u4e49\u7684\u5c40\u90e8\u53d8\u91cfa\u4e0e\u5168\u5c40\u53d8\u91cfa\u65e0\u4efb\u4f55\u74dc\u845b!! \"\"\" def func ( a ): a = a + '3' return a a = '5' res = func ( a ) print ( a , res ) # '5' '53'","title":"\u4f20\u9012\u4e0d\u53ef\u53d8\u5bf9\u8c61"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/04_%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/#_5","text":"\u51fd\u6570\u53c2\u6570 --\u5f15\u7528\u4f20\u9012(\u5185\u5b58\u5730\u5740) \u9488\u5bf9\u53ef\u53d8\u5bf9\u8c61(list\\dict\\set) \"\"\"-- \u521d\u6b65\u5206\u6790 1> \u53c2\u6570a\u63a5\u6536\u5230\u7684\u662f\u503c\u7684\u7c7b\u578b\u662f\u5217\u8868,\u5217\u8868\u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u5bf9\u8c61 2> So,\u4f1a\u5bf9\u63a5\u6536\u5230\u7684\u503c\u8fdb\u884c\u5f15\u7528 -- \u5f15\u7528\u4f20\u9012(\u5185\u5b58\u5730\u5740) \u6839\u636e\u5b9a\u74061,\u56e0\u4e3afunc\u51fd\u6570\u5185\u4e0d\u5b58\u5728\u53d8\u91cfa,\u6240\u4ee5\u4f1a\u5728func\u51fd\u6570\u91cc\u65b0\u5b9a\u4e49\u5c40\u90e8\u53d8\u91cfa,\u5c06\u63a5\u6536\u5230\u7684\u5f15\u7528\u7ed9\u5c40\u90e8\u53d8\u91cfa. \u2605 \u6ce8\u610f: func\u51fd\u6570\u65b0\u5b9a\u4e49\u7684\u5c40\u90e8\u53d8\u91cfa\u4e0e\u5168\u5c40\u53d8\u91cfa\u7ef4\u62a4/\u6307\u5411\u7684\u662f\u540c\u4e00\u4e2a\u5185\u5b58\u5730\u5740!! \"\"\" def func ( a ): a += [ 4 ] # -- \u5217\u8868+=\u64cd\u4f5c\u539f\u5730\u6539\u53d8 \u7b49\u540c\u4e8e a.extend([4]) return a a = [ 1 , 2 , 3 ] res = func ( a ) print ( a , res ) # [1, 2, 3, 4] [1, 2, 3, 4] # --- --- --- def func ( a ): # -- \u6839\u636e\u5b9a\u74061,\u53c2\u6570\u4f20\u9012,\u5b9a\u4e49\u4e86\u5c40\u90e8\u53d8\u91cfa. \u6b64\u65f6[1,2,3]\u7684\u5f15\u7528\u8ba1\u6570\u4e3a2 a = a + [ 4 ] # -- \u6839\u636e\u5b9a\u74061,\u56e0\u4e3a\u5df2\u7ecf\u5b58\u5728\u5c40\u90e8\u53d8\u91cfa,\u8be5\u8d4b\u503c\u64cd\u4f5c\u662f\u5728\u5bf9\u5c40\u90e8\u53d8\u91cfa\u91cd\u65b0\u8d4b\u503c # \u91cd\u65b0\u8d4b\u503c\u540e,\u5c40\u90e8\u53d8\u91cfa\u91cd\u65b0\u7ed1\u5b9a\u4e86\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61[1,2,3,4]. \u5bfc\u81f4[1,2,3]\u7684\u5f15\u7528\u8ba1\u6570\u51cf1 # id(\u5de6\u8fb9a) != id(\u53f3\u8fb9a) \u5b83\u4fe9\u4e0d\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61 return a a = [ 1 , 2 , 3 ] res = func ( a ) print ( a , res ) # [1, 2, 3] [1, 2, 3, 4]","title":"\u4f20\u9012\u53ef\u53d8\u5bf9\u8c61"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/04_%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/#unboundlocalerror","text":"\u5b98\u65b9\u89e3\u91ca: When a name is not found at all, a NameError exception is raised. If the name refers to a local variable that has not been bound, a UnboundLocalError exception is raised. UnboundLocalError is a subclass of NameError . \u7ffb\u8bd1\u6210\u4eba\u8bdd: \u82e5\u5f15\u7528\u4e86\u67d0\u4e2a\u53d8\u91cf,\u6b64\u53d8\u91cf\u5728\u5404\u4e2a\u4f5c\u7528\u57df\u91cc\u90fd\u627e\u4e0d\u5230,\u5c31\u4f1a\u62a5\u9519 NameError ; \u82e5\u5f15\u7528\u7684\u53d8\u91cf\u662f \u5c40\u90e8\u53d8\u91cf ,\u4f46\u8fd8\u672a\u5b8c\u6210\u7ed1\u5b9a,\u5c31\u4f1a\u62a5\u9519 UnboundLocalError .. UnboundLocalError \u662f NameError \u7684\u4e00\u4e2a\u5b50\u7c7b.. \u6df1\u5ea6\u5206\u6790\u8be6\u89c1\u540e\u6587 \u201cpython\u53d8\u91cf\u7684\u53ef\u89c1\u6027\u201d \u90e8\u5206\u7684\u5185\u5bb9!!! \"\"\" \u4ee3\u7801\u7b2c\u4e8c\u884c\u62a5\u9519: local variable 'a' referenced before assignment \u7ffb\u8bd1\u8fc7\u6765: \u5c40\u90e8\u53d8\u91cf'a'\u5728\u8d4b\u503c\u524d\u88ab\u5f15\u7528 \u5206\u6790: func()\u51fd\u6570\u6ca1\u6709\u53c2\u6570,\u5373\u4e0d\u5b58\u5728\u51fd\u6570\u4f20\u9012\u8fc7\u7a0b\u4e2d\u5b9a\u4e49\u5c40\u90e8\u53d8\u91cf \u51fd\u6570\u4f53\u5185\u6709\u5bf9a\u7684\u8d4b\u503c\u64cd\u4f5c,\u6839\u636e\u5b9a\u74061,\u56e0\u4e3afunc\u51fd\u6570\u5185\u6ca1\u6709\u5c40\u90e8\u53d8\u91cfa,\u5219\u8be5\u8d4b\u503c\u64cd\u4f5c\u662f\u5728\u5b9a\u4e49\u5c40\u90e8\u53d8\u91cfa,\u800c\u5728\u8d4b\u503c\u64cd\u4f5c\u7684\u53f3\u4fa7\u5f15\u7528\u4e86\u8fd8\u672a\u88ab\u5b9a\u4e49\u5b8c\u6210\u7684\u5c40\u90e8\u53d8\u91cfa Ps:\u6709\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u6211\u662f\u8fd9\u6837\u7406\u89e3\u8fd9\u4e2a\u62a5\u9519\u7684.\u5f00\u59cb\u56de\u6eaf\u6211\u7684\u7406\u89e3.\u7406\u89e3\u51fa\u9519\u7684\u5730\u65b9\u5728\u4e8e(-- --)\u5305\u542b\u8d77\u6765\u7684\u8fd9\u6bb5\u6587\u5b57. (-- \u89e3\u91ca\u5668\u53d1\u73b0\u53f3\u4fa7\u7684a\u53d8\u91cf\u5728\u5c40\u90e8\u4f5c\u7528\u57df\u91cc\u8fd8\u672a\u7ed1\u5b9a\u597d,\u5c31\u5f15\u7528\u5168\u5c40\u53d8\u91cfa-- ),\u800c\"=\"\u5de6\u4fa7\u7684a\u662f\u5c40\u90e8\u53d8\u91cf,\u5728\u4e00\u4e2a\u8d4b\u503c\u64cd\u4f5c\u4e2d,\u67d0\u4e00\u53d8\u91cf\u4e0d\u53ef\u80fd\u65e2\u5145\u5f53\u5c40\u90e8\u53d8\u91cf,\u53c8\u5145\u5f53\u5168\u5c40\u53d8\u91cf.. \u8fdb\u800c\u4ea7\u751f\u4e86\u51b2\u7a81.\u62a5\u9519\u63d0\u793a\u4e0d\u662f\u8fd9\u6837\u7684,\u663e\u7136\u8fd9\u6837\u7406\u89e3\u6709\u504f\u5dee!! \u6b63\u786e\u7684\u8fc7\u7a0b\u5e94\u8be5\u662f,\u8c03\u7528\u51fd\u6570,\u51fd\u6570\u4f53\u4ee3\u7801\u5f00\u59cb\u6267\u884c,\u5728\u6267\u884c\u4e4b\u524d\u4f1a\u626b\u63cf\u51fd\u6570\u4f53\u4ee3\u7801,\u770b\u662f\u5426\u6709\u7ed1\u5b9a\u64cd\u4f5c\u7684\u4ee3\u7801,\u5728\u8fd9\u4e2a\u6848\u4f8b\u91cc, a = a + 4,\u8fd9\u4e2a\u8bed\u53e5,\u53d1\u73b0\u5b83\u662f\u8d4b\u503c\u64cd\u4f5c(\u7ed1\u5b9a\u64cd\u4f5c\u7684\u4e00\u79cd),a\u53d8\u91cf\u5728\u8be5\u5c40\u90e8\u547d\u540d\u7a7a\u95f4(\u5c31\u662f\u5b58\u653e\u53d8\u91cf\u540d\u4e0e\u7ed1\u5b9a\u5bf9\u8c61\u7684\u6808\u533a!!)\u4fbf\u5177\u5907\u53ef\u89c1\u6027,\u5230\u8fd9\u4e00\u6b65a\u53d8\u91cf\u5df2\u7ecf\u5b9a\u6027\u4e3a\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u5566..\u4f46\u8981\u6ce8\u610f\u4e00\u70b9,\u53ef\u89c1\u6027\u7684\u53d8\u91cf\u5728\u5b8c\u6210\u7ed1\u5b9a\u540e,\u624d\u80fd\u88ab\u5f15\u7528. \u51fd\u6570\u4f53\u4ee3\u7801\u5f00\u59cb\u771f\u6b63\u6267\u884c,\u6267\u884c\u5230a = a + 4\u8fd9\u884c\u4ee3\u7801,\u7b49\u5f0f\u53f3\u8fb9\u4f1a\u5148\u6267\u884c,\u53d1\u73b0\u53f3\u4fa7\u5f15\u7528\u4e86\u8fd8\u672a\u7ed1\u5b9a\u597d\u7684\u5c40\u90e8\u53d8\u91cfa.. \u4e3a\u5565\u62a5\u9519,\"UnboundLocalError:\u5c40\u90e8\u53d8\u91cf'a'\u5728\u8d4b\u503c\u524d\u88ab\u5f15\u7528\"\u4e5f\u5c31\u5f97\u5230\u4e86\u5408\u7406\u7684\u89e3\u91ca. \"\"\" def func (): a += 4 # a+=[4]\u62a5\u9519 a.extend([4])\u4e0d\u4f1a\u62a5\u9519 return a a = 1 # a=[] \u5f53a\u662f\u4e00\u4e2a\u5217\u8868\u65f6 res = func () print ( a , res ) # --- --- --- # `\u82e5\u5f15\u7528\u7684\u53d8\u91cf\u662f\u5c40\u90e8\u53d8\u91cf,\u4f46\u8fd8\u672a\u5b8c\u6210\u7ed1\u5b9a,\u5c31\u4f1a\u62a5\u9519UnboundLocalError.` # \u6ce8\u610f\u62a5UnboundLocalError\u9519\u8bef\u7684\u524d\u63d0\u662f\u8be5\u53d8\u91cf\u662f\u5c40\u90e8\u53d8\u91cf!!\u800c\u4e0b\u65b9\u7684m\u662f\u5168\u5c40\u53d8\u91cf! m = m + 1 # -- NameError: name 'a' is not defined","title":"UnboundLocalError"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/04_%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/#_6","text":"\u5728\u4e0a\u6587\u6211\u4eec\u77e5\u9053 \u51fd\u6570\u7684\u53c2\u6570\u4f20\u9012 \u53ef\u770b\u4f5c\u662f\u4e00\u4e2a\u8d4b\u503c\u64cd\u4f5c a = \uff1f \u5b9a\u4e49\u7684\u662f\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf \u5177\u4f53\u4e00\u70b9, \u53c2\u6570\u5206\u4e3a\u5f62\u53c2\u548c\u5b9e\u53c2: \u5f62\u53c2 -- \u672c\u8d28\u5c31\u662f\u53d8\u91cf\u540d; \u5b9e\u53c2 -- \u672c\u8d28\u5c31\u662f\u53d8\u91cf\u7684\u503c","title":"\u51fd\u6570\u5f62\u53c2\u548c\u5b9e\u53c2"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/04_%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/#-","text":"\u5b9a\u4e49\u51fd\u6570\u65f6 \u4f4d\u7f6e\u5f62\u53c2-\u9ed8\u8ba4\u5f62\u53c2-\u4e0d\u5b9a\u957f\u4f4d\u7f6e\u5f62\u53c2-\u547d\u540d\u5173\u952e\u5b57\u5f62\u53c2-\u4e0d\u5b9a\u957f\u5173\u952e\u5b57\u5f62\u53c2 \u5f62\u53c2 \u7279\u6027 \u4f4d\u7f6e\u5f62\u53c2 \u5fc5\u987b\u88ab\u4f20\u503c,\u591a\u4e00\u4e2a\u4e0d\u884c\u5c11\u4e00\u4e2a\u4e5f\u4e0d\u884c!! \u9ed8\u8ba4\u5f62\u53c2 \u610f\u5473\u7740\u8c03\u7528\u9636\u6bb5\u53ef\u4ee5\u4e0d\u7528\u4e3a\u5176\u8d4b\u503c(\u53ef\u4ee5\u4e0d\u7528\u6307\u5b9a\u5bf9\u5e94\u7684\u5b9e\u53c2)!! \u4e0d\u5b9a\u957f\u4f4d\u7f6e\u5f62\u53c2 *args \u4f1a\u5c06\u6ea2\u51fa\u7684\u4f4d\u7f6e\u5b9e\u53c2\u5168\u90e8\u63a5\u6536,\u7136\u540e\u4ee5\u5143\u7956\u7684\u5f62\u5f0f\u8d4b\u503c\u7ed9 * \u540e\u9762\u7684\u53d8\u91cf args \u547d\u540d\u5173\u952e\u5b57\u5f62\u53c2 * ( * \u6216\u8005 *args ) \u540e\u9762\u7684\u5f62\u53c2\u5bf9\u5e94\u7684\u5b9e\u53c2\u5fc5\u987b\u6309\u7167key=value\u7684\u5f62\u5f0f\u8fdb\u884c\u4f20\u503c \u4e0d\u5b9a\u957f\u5173\u952e\u5b57\u5f62\u53c2 **kwargs \u4f1a\u5c06\u6ea2\u51fa\u7684\u5173\u952e\u5b57\u5b9e\u53c2\u5168\u90e8\u63a5\u6536, \u7136\u540e\u4ee5\u5b57\u5178\u7684\u5f62\u5f0f\u8d4b\u503c\u7ed9 ** \u540e\u9762\u7684\u53d8\u91cf kwargs","title":"\u5b9a\u4e49\u51fd\u6570\u65f6 -- \u884c\u53c2"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/04_%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/#-_1","text":"\u8c03\u7528\u51fd\u6570\u65f6 \u4f4d\u7f6e\u5b9e\u53c2 \u5173\u952e\u5b57\u5b9e\u53c2 1> \u4e24\u79cd\u5b9e\u53c2\u53ef\u4ee5\u6df7\u7528, \u4f46\u4f4d\u7f6e\u5b9e\u53c2\u5fc5\u987b\u5728\u5173\u952e\u5b57\u5b9e\u53c2\u524d\u9762\uff01\u4e14\u4e0d\u80fd\u5bf9\u4e00\u4e2a\u5f62\u53c2\u91cd\u590d\u8d4b\u503c\uff01 2> \u5b9e\u53c2\u53ef\u4ee5\u62c6\u5305\uff01 \u5b9e\u53c2\u4e2d\u5e26 * , * \u4f1a\u5c06\u8be5\u53d8\u91cf\u7684\u503c\u5faa\u73af\u53d6\u51fa,\u6253\u6563\u6210\u4f4d\u7f6e\u5b9e\u53c2. \u5373\u4ee5\u540e\u4f46\u51e1\u78b0\u5230\u5b9e\u53c2\u4e2d\u5e26 * \u7684,\u5b83\u5c31\u662f\u4f4d\u7f6e\u5b9e\u53c2,\u5e94\u8be5\u7acb\u523b\u6253\u6563\u6210\u4f4d\u7f6e\u5b9e\u53c2\u6765\u770b \u5b9e\u53c2\u4e2d\u5e26 ** , ** \u4f1a\u5c06\u8be5\u53d8\u91cf\u7684\u503c\u5faa\u73af\u53d6\u51fa,\u6253\u6563\u6210\u5173\u952e\u5b57\u5b9e\u53c2. \u5373\u4ee5\u540e\u4f46\u51e1\u78b0\u5230\u5b9e\u53c2\u4e2d\u5e26 ** \u7684,\u5b83\u5c31\u662f\u5173\u952e\u5b57\u5b9e\u53c2,\u5e94\u8be5\u7acb\u523b\u6253\u6563\u6210\u5173\u952e\u5b57\u5b9e\u53c2\u53bb\u770b def func3 ( a1 , a2 , a3 , a4 = 10 , * args , a5 = 20 , a6 , ** kwargs ): # 11 22 33 44 20 10 (55, 66, 77) {'a10': 123} print ( a1 , a2 , a3 , a4 , a5 , a6 , args , kwargs ) # func3(11, *[22, 33, 44, 55, 66, 77], **{'a6': 10, 'a10': 123}) func3 ( 11 , 22 , 33 , 44 , 55 , 66 , 77 , a6 = 10 , a10 = 123 ) def func ( * p ): return sum ( p ) func ( 1 , 2 , 3 , 4 ) # 10 def func ( ** p ): return '' . join ( sorted ( p )) func ( x = 1 , z = 2 , y = 3 ) # 'xyz'","title":"\u8c03\u7528\u51fd\u6570\u65f6 -- \u5b9e\u53c2"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/04_%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/#_7","text":"\u8bb0\u4f4f\u4e24\u70b9: \u9664\u975e\u7a0b\u5e8f\u7ed3\u675f,\u5426\u5219\u8be5\u5171\u4eab\u7a7a\u95f4\u4e0d\u4f1a\u88ab\u91ca\u653e ; \u7c7b\u4f3c\u4e8e\u5168\u5c40\u53d8\u91cf . \u9ed8\u8ba4\u5f62\u53c2\u7684\u503c\u901a\u5e38\u5e94\u8be5\u5b9a\u4e49\u4e3a\u4e0d\u53ef\u53d8\u7c7b\u578b. egon\u8bf4, \"\u9ed8\u8ba4\u5f62\u53c2\u7684\u503c\u53ea\u5728\u5b9a\u4e49\u9636\u6bb5\u8d4b\u503c\u4e00\u6b21,\u5373\u9ed8\u8ba4\u53c2\u6570\u7684\u503c\u5728\u51fd\u6570\u5b9a\u4e49\u9636\u6bb5\u5c31\u5df2\u7ecf\u56fa\u5b9a\u6b7b\u4e86\". \u8fd9\u610f\u5473\u7740\u5f53\u51fd\u6570\u88ab\u5b9a\u4e49\u65f6\u5c06\u5bf9\u8868\u8fbe\u5f0f\u6c42\u503c\u4e00\u6b21,\u76f8\u540c\u7684\u201c\u9884\u8ba1\u7b97\u201d\u503c\u5c06\u5728\u6bcf\u6b21\u8c03\u7528\u65f6\u88ab\u4f7f\u7528 \u25cb one.py\u6587\u4ef6\u5f00\u59cb\u8fd0\u884c,\u521b\u5efa\u5168\u5c40scope, \u4ece\u4e0a\u5f80\u4e0b\u4f9d\u6b21\u6267\u884c\u4ee3\u7801 \u6267\u884c\u7b2c1 2\u884c\u4ee3\u7801, \u5b9e\u73b0\u5c06x\u3001func\u4f9d\u6b21\u538b\u5165\u5168\u5c40scope\u8fd9\u4e2a\u6808\u4e2d \u6267\u884c\u7b2c2\u884c\u4ee3\u7801\u65f6, \u53d1\u73b0\u8be5func\u51fd\u6570\u6709\u9ed8\u8ba4\u53c2\u6570,\u5219\u4f1a\u521b\u5efa\u4e00\u4e2a \"\u5171\u4eab\u7a7a\u95f4\" ,\u5c06\u8be5\u9ed8\u8ba4\u53c2\u6570\u7684\u503c\u5b58\u50a8\u8d77\u6765 \u25cb \u7b2c3\u884c\u4ee3\u7801\u6682\u65f6\u4e0d\u4f1a\u6267\u884c,\u5f80\u4e0b\u6267\u884c\u7b2c5\u884c\u4ee3\u7801,\u8c03\u7528func\u51fd\u6570,\u5e76\u4f20\u9012\u4e86\u4e00\u4e2a\u4e0d\u53ef\u53d8\u7c7b\u578b\u7684\u53c2\u6570.. \u5177\u4f53\u5c55\u5f00: 1> \u8c03\u7528\u51fd\u6570\u65f6,\u89e3\u91ca\u5668\u5c31\u4f1a\u4e3a\u8be5\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u5c40\u90e8scope\u547d\u540d\u7a7a\u95f4 2> \u5728\u51fd\u6570\u771f\u6b63\u6267\u884c\u4e4b\u524d\u626b\u63cf\u51fd\u6570\u4ee3\u7801, \u627e\u7ed1\u5b9a\u64cd\u4f5c, \u53d1\u73b0\u4e86\u6709\u4e24\u4e2a\u5f62\u53c2 ( \u5f62\u53c2\u662f\u7ed1\u5b9a\u64cd\u4f5c\u7684\u4e00\u79cd ) \u56e0\u4e3a\u7ed1\u5b9a\u64cd\u4f5c, \u53d8\u91cfa\u548cb\u4fbf\u5728\u521a\u521b\u5efa\u7684scope\u7a7a\u95f4\u4e2d\u5177\u5907\u4e86\u53ef\u89c1\u6027!!\u610f\u5473\u7740a\u548cb\u53d8\u91cf\u5b9a\u6027\u4e3a\u5c40\u90e8\u53d8\u91cf.. 3> \u51fd\u6570\u771f\u6b63\u6267\u884c, \u53d8\u91cf\u7ed1\u5b9a\u4e865\u7684\u5185\u5b58\u5730\u5740,b\u53d8\u91cf\u7ed1\u5b9a\u4e86\u5171\u4eab\u7a7a\u95f4\u4e2d1\u7684\u5185\u5b58\u5730\u5740.. \u548cb\u53d8\u91cf\u5b8c\u6210\u7ed1\u5b9a\u64cd\u4f5c\u540e, \u548cb\u53d8\u91cf\u4fbf\u53ef\u4ee5\u88ab\u5f15\u7528!! retuen\u8bed\u53e5\u4e2d\u5c31\u6709\u5bf9 \u548cb\u53d8\u91cf\u7684\u5f15\u7528. \u25cb \u7b2c5\u884c\u4ee3\u7801\u6267\u884c\u5b8c\u540e,\u5bf9\u5e94\u7684\u5c40\u90e8scope\u7a7a\u95f4\u4f1a\u91ca\u653e!! \u7ee7\u7eed\u5f80\u4e0b\u6267\u884c,\u53ea\u8981\u662f\u8c03\u7528\u51fd\u6570\u7684\u4ee3\u7801\u5c31\u4f1a\u521b\u5efa\u65b0\u7684\u5c40\u90e8scope,\u51fd\u6570\u8c03\u7528\u5b8c\u5c31\u91ca\u653e.. \u4e09\u6b21\u51fd\u6570\u8c03\u7528,\u4e0d\u540c\u70b9\u5728\u4e8e\u7b2c\u4e09\u6b21\u8c03\u7528\u7684func\u51fd\u6570,\u6ca1\u6709\u7528\u5171\u4eab\u7a7a\u95f4\u91cc\u7684\u503c.. \u4f46\u5bf9\u5171\u4eab\u7a7a\u95f4\u6ca1\u6709\u5f71\u54cd!! \u6309\u7406\u6765\u8bf4,\u5806\u533a\u91cc\u7684\u6570\u636e\u6839\u636egc\u673a\u5236,\u5f15\u7528\u8ba1\u6570\u4e3a0\u4f1a\u91ca\u653e\u6389, \u4f46\u5171\u4eab\u7a7a\u95f4\u91cc\u7684\u503c\u7c7b\u4f3c\u4e8e\u5168\u5c40\u53d8\u91cf.. \u9664\u975e\u7a0b\u5e8f\u7ed3\u675f,\u5426\u5219\u8be5\u5171\u4eab\u7a7a\u95f4\u4e0d\u4f1a\u88ab\u91ca\u653e!!! \u25b2\u5b9e\u9a8c\u89c1\u771f\u77e5: \u9ed8\u8ba4\u53c2\u6570\u662f\u53ef\u53d8\u7c7b\u578b\u7684\u6570\u636e\u5e26\u6765\u7684\u9ebb\u70e6!!! def func ( a = [ 555 ]): a . extend ([ 1 , 2 , 3 ]) # -- \u7b49\u540c\u4e8e a+=[1,2,3] return a , id ( a ) # -- \u51fd\u6570\u7b2c\u4e00\u6b21\u8c03\u7528\u65f6\u5171\u4eab\u7a7a\u95f4\u4e3a[555];\u7b2c\u4e8c\u6b21\u8c03\u7528\u65f6\u6ca1\u6709\u7528\u5171\u4eab\u7a7a\u95f4;\u7b2c\u4e09\u6b21\u8c03\u7528\u65f6\u5171\u4eab\u7a7a\u95f4\u4e3a[555,1,2,3]; # \u53ef\u4ee5\u89c2\u5bdf\u5230,\u7b2c\u4e00\u6b21id(a)\u548c\u7b2c\u4e09\u6b21id(a)\u662f\u4e00\u6837\u7684.. # \u8bc1\u660e\u7b2c\u4e8c\u6b21\u8c03\u7528\u867d\u7136\u6ca1\u6709\u7528\u5171\u4eab\u7a7a\u95f4\u4f1a\u5bfc\u81f4[555]\u7684\u5f15\u7528\u8ba1\u6570\u4e3a0,\u4f46\u8be5\u5171\u4eab\u7a7a\u95f4\u6ca1\u6709\u88ab\u91ca\u653e!! print ( func ()) print ( func ([])) # -- \u82e5\u4e0d\u4f7f\u7528\u9ed8\u8ba4\u7684[555],\u81ea\u5df1\u6307\u5b9a\u503c,\u90a3\u4e48\u51fd\u6570\u4f53\u5185\u7684a\u7684id\u4e0d\u662f\u5171\u4eab\u7a7a\u95f4\u4e2da\u7684id. print ( func ()) \"\"\"\u7ed3\u679c ([555, 1, 2, 3], 140573741203776) ([1, 2, 3], 140692741938688) ([555, 1, 2, 3, 1, 2, 3], 140573741203776) \"\"\" # --- --- --- # \u4f9d\u7167python\u5728\u4f5c\u7528\u57df\u91cc\u5bf9\u53d8\u91cf\u7684\u8d4b\u503c\u64cd\u4f5c\u89c4\u5219 # \u6ce8\u610f\u54e6,\u51fd\u6570\u4f53\u5185\u5bf9\u6b64\u9ed8\u8ba4\u5f62\u53c2\u91cd\u65b0\u8d4b\u503c,\u662f\u4e3a\u6b64\u53d8\u91cf\u7ed1\u5b9a\u4e86\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61!!! def func ( a = [ 555 ]): print ( a , id ( a )) a = a + [ 1 , 2 , 3 ] # -- \u5c40\u90e8\u53d8\u91cfa\u91cd\u65b0\u8d4b\u503c,\u5176id\u53d1\u751f\u53d8\u5316 return a , id ( a ) # -- \u53ef\u4ee5\u89c2\u5bdf\u5230\u51fd\u6570\u7b2c\u4e00\u6b21\u548c\u7b2c\u4e8c\u6b21\u8c03\u7528\u7684\u5171\u4eab\u7a7a\u95f4\u90fd\u4e3a[555],\u5176id\u4e5f\u6ca1\u6709\u53d1\u751f\u53d8\u5316! # \u8bc1\u660e a = a + [1, 2, 3] \u8be5\u884c\u4ee3\u7801\u867d\u7136\u5bfc\u81f4[555]\u7684\u5f15\u7528\u8ba1\u6570\u4e3a0,\u4f46\u8be5\u5171\u4eab\u7a7a\u95f4\u6ca1\u6709\u88ab\u91ca\u653e\uff01 print ( func ()) # [555, 1, 2, 3] print ( func ()) # [555, 1, 2, 3] \"\"\"\u7ed3\u679c [555] 140263832453056 ([555, 1, 2, 3], 140263832467520) [555] 140263832453056 ([555, 1, 2, 3], 140263832428928) \"\"\" # --- --- --- \u6b63\u89e3 def func0 ( a , b = None ): if b is None : b = [] # --- --- --- \u6362\u4e2a\u601d\u8003\u89d2\u5ea6\u7406\u89e3 \u9ed8\u8ba4\u5f62\u53c2\u9677\u9631 \"\"\" \u9ed8\u8ba4\u5f62\u53c2\u7684\u5171\u4eab\u7a7a\u95f4\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u6210 \u4e00\u4e2a\u5168\u5c40\u53d8\u91cf \"\"\" def func ( a = [ 555 ]): pass func () func () b = [ 555 ] def func ( a = b ): pass func () func () b = [ 555 ] def func ( a ): pass func ( b ) func ( b )","title":"\u9ed8\u8ba4\u5f62\u53c2\u9677\u9631"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/04_%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/#_8","text":"","title":"\u51fd\u6570\u547d\u540d\u7a7a\u95f4\u4e0e\u4f5c\u7528\u57df"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/04_%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/#_9","text":"","title":"\u51fd\u6570\u5bf9\u8c61"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/04_%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/#_10","text":"\u51fd\u6570\u662f\u7b2c\u4e00\u7c7b\u5bf9\u8c61, \u53ef\u4ee5\u5f53\u4f5c\u6570\u636e\u8fdb\u884c\u4f20\u9012 \uff01 a = lambda x:x+1 1> \u88ab\u5f15\u7528; b = a 2> \u5f53\u4f5c\u53c2\u6570\u4f20\u9012; func(a):pass 3> \u8fd4\u56de\u503c\u662f\u51fd\u6570; func(*args):return a 4> \u4f5c\u4e3a\u5bb9\u5668\u7c7b\u578b\u7684\u5143\u7d20 [1,2,a,3] def foo (): print ( 'foo' ) def bar (): print ( 'bar' ) dic = { 'foo' : foo , 'bar' : bar , } while True : choice = input ( '>>: ' ) . strip () if choice in dic : dic [ choice ]()","title":"\u51fd\u6570\u662f\u7b2c\u4e00\u7c7b\u5bf9\u8c61"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/04_%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/#_11","text":"\u9700\u6c42: \u5c06\u5706\u76f8\u5173\u7684\u8ba1\u7b97(\u9762\u79ef\u3001\u5468\u957f)\u96c6\u4e2d\u5728\u4e00\u8d77. from math import pi def circle ( radius , action = 'area' ): def area (): return pi * ( radius ** 2 ) def perimeter (): return 2 * pi * radius if action == 'area' : return area () elif action == 'perimeter' : return perimeter () print ( circle ( 10 , 'perimeter' )) # -- Ps: max(max(2,3),8)","title":"\u51fd\u6570\u5d4c\u5957\u5b9a\u4e49"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/04_%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/#_12","text":"\u51fd\u6570\u5bf9\u8c61\u53ef\u4ee5\u5c06\u5b9a\u4e49\u5728\u51fd\u6570\u5185\u7684\u51fd\u6570\u8fd4\u56de\u5230\u5168\u5c40\u4e2d\u4f7f\u7528,\u4ece\u800c\u6253\u7834\u51fd\u6570\u7684\u5c42\u7ea7\u9650\u5236 def f1 (): def inner (): print ( 'from inner' ) return inner f = f1 () # -- \u62ff\u5230inner\u51fd\u6570\u7684\u5185\u5b58\u5730\u5740.","title":"\u6253\u7834\u5c42\u7ea7\u9650\u5236"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/04_%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/#scope","text":"","title":"\u547d\u540d\u7a7a\u95f4scope/\u6808\u533a"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/04_%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/#_13","text":"\u5728\u4e00\u4e2a\u590d\u6742\u7684\u7a0b\u5e8f\u4e2d,\u4f1a\u5b9a\u4e49\u6210\u5343\u4e0a\u4e07\u4e2a\u53d8\u91cf(\u51fd\u6570\u540d\u3001\u7c7b\u540d\u90fd\u662f\u53d8\u91cf), \u4e3a\u4e86\u4fbf\u4e8e\u8ffd\u8e2a\u8fd9\u4e9b\u53d8\u91cf,\u8ba9\u5b83\u4eec\u4e92\u4e0d\u5e72\u6270,\u547d\u540d\u7a7a\u95f4\u5c31\u5e94\u8fd0\u800c\u751f\u5566!! \u547d\u540d\u7a7a\u95f4 scope/namespaces: \u8fd9\u51e0\u79cd\u8bf4\u6cd5\u90fd\u6b63\u786e 1> \u5b58\u653e\u540d\u5b57\u4e0e\u503c\u7ed1\u5b9a\u5173\u7cfb\u7684\u5730\u65b9 , \u4e00\u822c\u7b80\u8bf4\u547d\u540d\u7a7a\u95f4(\u6808\u533a)\u4e3a\u5b58\u653e\u53d8\u91cf\u540d\u7684\u5730\u65b9. 2> \u547d\u540d\u7a7a\u95f4\u662f\u952e\u503c\u5bf9\u7684\u96c6\u5408! \u53d8\u91cf\u540d\u4e0e\u503c\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u5173\u7cfb.. 3> \u547d\u540d\u7a7a\u95f4\u662f\u53d8\u91cf\u540d\u5230\u5bf9\u8c61\u5185\u5b58\u5730\u5740\u7684\u6620\u5c04. eg: x=1 \u5f00\u8f9f\u4e00\u5757\u7a7a\u95f4, 1 \u5b58\u653e\u5728\u5185\u5b58\u4e2d; x:id(1) \u653e\u5728\u547d\u540d\u7a7a\u95f4\u4e2d \u4ece \u53d8\u91cf\u5b58\u50a8 \u7684\u89d2\u5ea6, \u5728\u5b9a\u4e49\u53d8\u91cf\u65f6, \u53d8\u91cf\u540d\u4e0e\u503c\u5185\u5b58\u5730\u5740\u7684\u5173\u8054\u5173\u7cfb \u5b58\u653e\u4e8e\u6808\u533a stack , \u53d8\u91cf\u503c \u5b58\u653e\u4e8e\u5806\u533a heap .","title":"\u547d\u540d\u7a7a\u95f4\u6982\u5ff5"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/04_%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/#_14","text":"\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u4e0d\u80fd\u6709\u91cd\u540d\u7684\u53d8\u91cf\u540d \u5404\u4e2a\u547d\u540d\u7a7a\u95f4\u662f\u72ec\u7acb\u7684 , \u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u7684, \u6240\u4ee5 \u4e0d\u540c\u7684\u547d\u540d\u7a7a\u95f4\u662f\u53ef\u4ee5\u6709\u91cd\u540d\u7684,\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd Ps: \u4e00\u4e2a\u5957\u4e00\u4e2a\u7684\u540d\u5b57\u7a7a\u95f4\u4e2d\u540c\u540d\u7684\u53d8\u91cf\u540d\u4f1a\u5f62\u6210\u540d\u5b57\u7a7a\u95f4\u94fe print ( len ) # <built-in function len> x = 1 if 3 > 2 : z = 5 def func (): y = 2 func () # -- \u5185\u7f6e\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u5bf9\u8c61\u53ef\u4ee5\u901a\u8fc7 dir(__builtins__) \u547d\u4ee4\u67e5\u770b. \u7c7b\u522b \u89e3\u91ca \u5185\u7f6e\u547d\u540d\u7a7a\u95f4 built-in names \u5b58\u653epython\u89e3\u91ca\u5668\u81ea\u5e26\u7684\u540d\u5b57 len \u5168\u5c40\u547d\u540d\u7a7a\u95f4 global names \u5b58\u653e\u6a21\u5757\u4e2d \u5b9a\u4e49 \u7684\u540d\u5b57(\u8be5\u6a21\u5757\u4e2d\u9664\u5f00\u5185\u7f6e\u7684\u548c\u5c40\u90e8\u7684,\u90fd\u662f\u5168\u5c40\u7684) x func z \u5c40\u90e8\u547d\u540d\u7a7a\u95f4 local names \u5b58\u653e\u51fd\u6570\u8c03\u7528\u65f6\u51fd\u6570\u4e2d \u5b9a\u4e49 \u7684\u540d\u5b57 y \u63d0\u4e00\u5634,\u4e25\u8c28\u70b9\u8bf4\u5e94\u8be5\u8bf4\u662f\u4ee3\u7801\u5757\u91cc\u7ed1\u5b9a\u64cd\u4f5c\u4e2d\u7684\u540d\u5b57!! Ps: \u4e25\u8c28\u4e00\u70b9, \u89e3\u91ca\u5668\u8fd8\u4e3a\u7a0b\u5e8f\u4f7f\u7528 import \u8bed\u53e5\u52a0\u8f7d\u7684\u4efb\u4f55\u6a21\u5757\u521b\u5efa\u4e00\u4e2a\u5168\u5c40\u547d\u540d\u7a7a\u95f4 \u6ce8\u610f: \u5168\u5c40\u548c\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u7684\u5b9e\u73b0\u662f\u5b57\u5178, \u4f46\u5185\u7f6e\u547d\u540d\u7a7a\u95f4\u4e0d\u662f!","title":"\u547d\u540d\u7a7a\u95f4\u5206\u7c7b"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/04_%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/#_15","text":"\u4ee3\u7801\u5757\u901a\u5e38\u662f\u6307, \u7c7b\u3001\u51fd\u6570 \u4e2d\u5305\u542b\u7684\u4ee3\u7801!! Python\u89e3\u91ca\u5668\u4f1a\u5728 \u6267\u884c \u51fd\u6570\u4ee3\u7801\u5757\u65f6,\u4e3a\u5176\u5206\u914d\u4e00\u4e2a\u5c40\u90e8\u547d\u540d\u7a7a\u95f4.. \"\"\" 0 \u4e0d\u662f\u4e00\u4e2a\u4ee3\u7801\u5757,\u662f\u9664\u7c7b\u548c\u51fd\u6570\u4ee5\u5916\u7684\u4ee3\u7801,\u5f52\u5c5e\u4e8e\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u7ba1! 1-2 \u662f\u4e00\u4e2a\u4ee3\u7801\u5757 3-10 \u662f\u4e00\u4e2a\u4ee3\u7801\u5757 5-10 \u662f\u4e00\u4e2a\u4ee3\u7801\u5757 7-9 \u662f\u4e00\u4e2a\u4ee3\u7801\u5757 (\u540e\u4e09\u4e2a\u4ee3\u7801\u5757\u5b9e\u73b0\u4e86\u4ee3\u7801\u5757\u7684\u5d4c\u5957) \u4ee3\u7801\u5757\u4e0e\u547d\u540d\u7a7a\u95f4 \u4e0a\u8ff0\u7684\u56db\u4e2a\u4ee3\u7801\u5757,\u6bcf\u4e2a\u4ee3\u7801\u5757\u5728\u6267\u884c\u65f6,python\u89e3\u91ca\u5668\u4f1a\u5206\u914d\u4e00\u4e2a\u5c40\u90e8\u547d\u540d\u7a7a\u95f4(\u662f\u771f\u5b9e\u7684\u5185\u5b58\u7a7a\u95f4) \u6ce8\u610f\u54e6,\u51fd\u6570\u5728\u8c03\u7528\u65f6\u624d\u4f1a\u6267\u884c\uff01 \u8fd8\u8981\u7279\u522b\u6ce8\u610f,\u4ee3\u7801\u5757\u53ef\u4ee5\u5d4c\u5957,\u4f46\u547d\u540d\u7a7a\u95f4\u662f\u76f8\u4e92\u72ec\u7acb\u7684!! \"\"\" m = 0 # 0 def func0 (): # 1 return 1 # 2 class Test : # 3 a = 1 # 4 def func1 ( self ): # 5 a = 2 # 6 def func2 (): # 7 b = 3 # 8 print ( b ) # 9 return func2 # 10","title":"\u547d\u540d\u7a7a\u95f4\u4e0e\u4ee3\u7801\u5757\u7684\u5173\u7cfb"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/04_%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/#_16","text":"\u6307\u7684\u662f\u547d\u540d\u7a7a\u95f4\u4e2d\u7684 \u53d8\u91cf\u540d!! \u4e0d\u662f\u5185\u5b58\u4e2d\u7684\u53d8\u91cf\u503c\u7684\u751f\u547d\u5468\u671f!! \u5185\u7f6e: \u5728\u89e3\u91ca\u5668\u542f\u52a8\u65f6\u76f4\u63a5\u521b\u5efa\u52a0\u8f7d,\u76f4\u5230\u89e3\u91ca\u5668\u5173\u95ed\u65f6\u5931\u6548. \u5168\u5c40: \u5728\u6587\u4ef6\u6267\u884c\u65f6\u751f\u6548,\u5728\u6587\u4ef6\u6267\u884c\u5b8c\u6bd5\u65f6\u5931\u6548. \u5c40\u90e8: \u5728 \u6587\u4ef6\u6267\u884c\u8fc7\u7a0b\u4e2d ,\u5982\u679c\u8c03\u7528\u4e86\u67d0\u4e2a\u51fd\u6570\u624d\u4f1a \u4e34\u65f6\u751f\u6548 ,\u5728 \u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u540e\u5931\u6548 . \u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u7684\u58f0\u660e\u5468\u671f\u662f\u81ea\u5176\u5efa\u7acb\u5f00\u59cb,\u5230\u5b83\u4eec\u5404\u81ea\u7684\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u7ec8\u6b62.. \u5f53\u8fd9\u4e9b\u547d\u540d\u7a7a\u95f4\u7684\u51fd\u6570\u7ec8\u6b62\u65f6, Python\u53ef\u80fd\u4e0d\u4f1a\u7acb\u5373\u56de\u6536\u5206\u914d\u7ed9\u8fd9\u4e9b\u547d\u540d\u7a7a\u95f4\u7684\u5185\u5b58, \u4f46\u662f\u5bf9\u5176\u4e2d\u5bf9\u8c61\u7684\u6240\u6709\u5f15\u7528\u90fd\u5c06\u5931\u6548..","title":"\u547d\u540d\u7a7a\u95f4\u751f\u547d\u5468\u671f"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/04_%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/#_17","text":"\u53d8\u91cf\u52a0\u8f7d\u8fdb\u547d\u540d\u7a7a\u95f4\u7684\u987a\u5e8f: \u5185\u7f6e --> \u5168\u5c40 --> \u5c40\u90e8 \u53d8\u91cf\u5728\u547d\u540d\u7a7a\u95f4\u91cc\u67e5\u627e\u7684\u987a\u5e8f: \u4ece\u5f53\u524d\u4f4d\u7f6e\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4 --> \u5168\u5c40 --> \u5185\u7f6e \u901a\u4fd7\u70b9\u89e3\u91ca\u4e0b: \u5728\u4ee3\u7801\u4ece\u800c\u4e0b\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d,\u4e0d\u65ad\u6709\u53d8\u91cf\u88ab\u52a0\u8f7d\u8fdb\u5bf9\u5e94\u7684\u547d\u540d\u7a7a\u95f4.. \u5f53\u9047\u5230def\u8bed\u53e5,\u4f1a\u5148\u5c06\u51fd\u6570\u540d\u5b57\u52a0\u8f7d\u8fdb\u5168\u5c40\u547d\u540d\u7a7a\u95f4,\u4f46\u51fd\u6570\u4f53\u4ee3\u7801\u4e0d\u4f1a\u6267\u884c,\u4f1a\u6682\u65f6\u8df3\u8fc7; \u51fd\u6570\u5185\u90e8\u7684\u53d8\u91cf\u8981\u7b49\u5230\u51fd\u6570\u8c03\u7528\u7684\u65f6\u5019\u624d\u4f1a\u52a0\u8f7d\u8fdb\u5c40\u90e8\u547d\u540d\u7a7a\u95f4... \u5f15\u7528\u7684\u53d8\u91cf\u5728\u547d\u540d\u7a7a\u95f4\u91cc\u67e5\u627e\u7684\u987a\u5e8f(\u4f5c\u7528\u57df\u5173\u7cfb): \u4e3e\u4e2a\u4f8b\u5b50,\u51fd\u6570\u91cc\u4f7f\u7528\u4e86x\u53d8\u91cf,\u4f46\u6b64\u53d8\u91cf\u4e0d\u5728\u8be5\u51fd\u6570\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u91cc,\u5c31\u4f1a\u53bb\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u91cc\u627e... \u5f53\u7136\u5b9e\u9645\u60c5\u51b5\u4f1a\u66f4\u590d\u6742.\u540e\u6587\u4f1a\u8be6\u7ec6\u9610\u8ff0\u4f5c\u7528\u57df. \"\"\"\u53d8\u91cf\u52a0\u8f7d\u8fdb\u547d\u540d\u7a7a\u95f4 \u7b2c\u51e0\u884c\u4ee3\u7801 \u5168\u5c40 \u5c40\u90e8 1 func 4 func x:1 5 func x:1 y:2 6 func x:10 y:2 \u8bb0\u4f4f\u4e00\u53e5\u8bdd,\u4f5c\u7528\u57df\u5173\u7cfb\u662f\u5728\u51fd\u6570\u5b9a\u4e49\u9636\u6bb5\u5c31\u56fa\u5b9a\u6b7b\u4e86,\u4e0e\u51fd\u6570\u7684\u8c03\u7528\u4f4d\u7f6e\u65e0\u5173!! \"\"\" def func (): y = 2 print ( x ) x = 1 func () # 1 x = 10 func () # 10 -- \u5728\u8c03\u7528\u51fd\u6570\u4e4b\u524d,\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u91cc\u7684x\u7684\u503c\u88ab\u6539\u4e3a10\u5566 # --- --- --- x = 10 a = lambda y : x + y x = 20 b = lambda y : x + y print ( a ( 10 )) # 30 print ( b ( 10 )) # 30","title":"\u53d8\u91cf\u52a0\u8f7d\u67e5\u8be2\u987a\u5e8f"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/04_%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/#_18","text":"","title":"\u4f5c\u7528\u57df"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/04_%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/#_19","text":"\u4e25\u8c28\u70b9\u8bf4,python\u89e3\u91ca\u5668\u4f1a\u7ed9\u6bcf\u4e2a\u4ee3\u7801\u5757\u5206\u914d\u547d\u540d\u7a7a\u95f4,\u4ee3\u7801\u5757\u4e2d\u7684\u7ed1\u5b9a\u64cd\u4f5c\u4f7f\u5f97\u53d8\u91cf\u5728\u547d\u540d\u7a7a\u95f4\u5177\u5907\u53ef\u89c1\u6027.\u7ed1\u5b9a\u64cd\u4f5c\u5b8c\u6210\u540e,\u53d8\u91cf\u53ef\u88ab\u5f15\u7528.. \u547d\u540d\u7a7a\u95f4\u76f8\u4e92\u72ec\u7acb,\u4e0d\u540c\u547d\u540d\u7a7a\u95f4\u4e2d\u53ef\u80fd\u5177\u5907\u76f8\u540c\u7684\u53d8\u91cf\u540d,\u5f53\u4ee3\u7801\u5757\u4e2d\u51fa\u73b0\u53d8\u91cf\u5f15\u7528\u65f6,\u5f15\u7528\u54ea\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u53d8\u91cf\u5462\uff1f\u8fd9\u5c31\u9700\u8981\u4f5c\u7528\u57df!! (\u4ee3\u7801\u5757\u4e2d\u7684\u7ed1\u5b9a\u64cd\u4f5c -- \u547d\u540d\u7a7a\u95f4\u5b58\u50a8\u5bf9\u5e94\u7684\u53d8\u91cf\u540d; \u4ee3\u7801\u5757\u4e2d\u7684\u53d8\u91cf\u5f15\u7528 -- \u6309\u4f5c\u7528\u57df\u5173\u7cfb\u8fdb\u884c\u67e5\u627e! ) Ps: \u4ee3\u7801\u5757\u73af\u5883\u662f\u4ec0\u4e48? \u8be5code block\u4e2d\u6240\u6709scope\u4e2d\u53ef\u89c1\u7684name\u7684\u96c6\u5408\u6784\u6210block\u7684\u73af\u5883.. \u4f5c\u7528\u57df\u5373\u4ee3\u7801\u5757!! scope\u7a7a\u95f4\u91cc\u7684\u53d8\u91cf\u4f5c\u7528\u7684\u8303\u56f4\u5c31\u662f\u6240\u5bf9\u5e94\u7684\u4ee3\u7801\u5757,\u8fd9\u4e9b\u53d8\u91cf\u5728\u8be5\u4ee3\u7801\u5757\u4e2d\u662f\u53ef\u89c1\u7684 \u4f5c\u7528\u57df\u5173\u7cfbLEGB/\u51fd\u6570\u91cc\u5f15\u7528\u53d8\u91cf\u7684\u641c\u7d22\u8def\u5f84/\u4f9d\u6b21\u4eceLEGB\u4f5c\u7528\u57df\u5bf9\u5e94\u7684scope\u4e2d\u67e5\u627e! \u4ece\u5d4c\u5957\u7684\u91cc\u5c42\u5f80\u5916\u5c42\u67e5\u627e \u4f5c\u7528\u57df\u5173\u7cfb \u67e5\u627e\u987a\u5e8fLEGB,\u6240\u4ee5\u8ddf \u4ee3\u7801\u5757\u7684\u5d4c\u5957 \u6709\u5173, \u67e5\u7684\u662fLEGB\u5bf9\u5e94\u7684scope,\u6240\u4ee5\u8ddf \u4ee3\u7801\u5757\u7684\u73af\u5883 \u6709\u5173! \u5185\u5fc3OS : \u611f\u89c9\u81ea\u5df1\u5c06\u7b80\u5355\u7684\u4e1c\u897f\u590d\u6742\u5316\u4e86 , \u60f3\u4e0e\u4e13\u4e1a\u540d\u8bcd\u4e00\u4e00\u5bf9\u5e94\u4e0a . \u256e ( \uffe3\u25bd\uffe3 \"\" ) \u256d \u5f53\u4f5c\u52a0\u6df1\u5370\u8c61\u7406\u89e3\u5427 \u89e3\u91ca\u4e0b\u4e0a\u56fe : \u8be5\u7a0b\u5e8f\u6709\u4e09\u4e2a\u51fd\u6570 , \u53ef\u5212\u5206\u51fa\u4ee3\u7801\u5757A \u3001 B \u3001 C , \u8fd9\u4e09\u4e2a\u4ee3\u7801\u5757\u662f\u76f8\u4e92\u5d4c\u5957\u7684 . ( \u4ee3\u7801\u5757A\u5305\u542b1 - 10 \u884c\u5168\u90e8\u4ee3\u7801 ; \u4ee3\u7801\u5757B\u5305\u542b4 - 9 \u884c\u4ee3\u7801 ; \u4ee3\u7801\u5757C\u5305\u542b7 - 9 \u884c\u4ee3\u7801 ) A\u4ee3\u7801\u5757\u4f1a\u6267\u884c\u7ea2\u8272\u6846\u8d77\u6765\u7684\u90a3\u4e24\u90e8\u5206\u4ee3\u7801 ( B\u51fd\u6570\u4f53\u4ee3\u7801\u662f\u4e0d\u4f1a\u6267\u884c\u7684 ), \u5c06\u7ed1\u5b9a\u64cd\u4f5c\u4ee3\u7801\u91cc\u7684\u53d8\u91cf\u5b58\u5230\u5c40\u90e8scope\u4e2d ! \u5373A\u4ee3\u7801\u4f1a\u4f9d\u6b21\u5c06a b funcB m\u538b\u5165scope ( funcA ) \u8fd9\u4e2a\u6808\u4e2d B\u4ee3\u7801\u5757 \u3001 C\u4ee3\u7801\u5757\u7684\u6267\u884c\u540c\u7406 . scope\u7a7a\u95f4\u91cc\u7684\u53d8\u91cf\u4f5c\u7528\u7684\u8303\u56f4\u5c31\u662f\u6240\u5bf9\u5e94\u7684\u4ee3\u7801\u5757 . \u4ee3\u7801\u5757A\u7684\u5c40\u90e8scope\u7684\u4f5c\u7528\u8303\u56f4\u5c31\u662f\u4ee3\u7801\u5757A . \u4f5c\u7528\u57df\u5373\u4ee3\u7801\u5757 !! \u4ee3\u7801\u5757\u5f15\u7528\u53d8\u91cf\u7684\u67e5\u627e\u987a\u5e8fLEGB\u4ece\u4ee3\u7801\u5757\u73af\u5883\u7684\u89d2\u5ea6\u89e3\u91ca\u662f\u89e3\u91ca\u5f97\u901a\u7684 . \u4f46\u611f\u89c9\u590d\u6742\u5316\u4e86 . \u4ee3\u7801\u5757\u5f15\u7528\u53d8\u91cf\u5148\u4ece\u672c\u5730\u4f5c\u7528\u57df / \u91cc\u5c42\u4ee3\u7801\u5757\u6240\u5bf9\u5e94\u7684scope\u4e2d\u67e5\u627e ; \u82e5\u6ca1\u6709\u518d\u53bb\u5d4c\u5957\u4f5c\u7528\u57df / \u4e2d\u95f4\u5c42\u4ee3\u7801\u5757\u6240\u5bf9\u5e94\u7684scope\u4e2d\u67e5\u627e ; \u4ee5\u6b64\u7c7b\u63a8 . \u5728\u8fd9\u91cc , \u4ee3\u7801\u5757C\u4e2d\u5f15\u7528\u4e86\u53d8\u91cfm , \u5728scope ( c ) / \u4ee3\u7801\u5757C\u7684\u73af\u5883\u4e2d\u6ca1\u6709 , \u5728scope ( B ) / \u4ee3\u7801\u5757B\u7684\u73af\u5883\u4e2d\u67e5\u627e \u4e5f\u6ca1\u6709 . \"\u4f60\u60f3\u4e00\u4e0b\u4ee3\u7801\u5757B\u7684\u73af\u5883=scope(B)+scope(C),scope(C)\u4e2d\u6ca1\u6709\u662f\u4e0d\u662f\u5c31\u5269scope(B)\u5566\" \u6700\u540e\u5728scope ( A ) \u91cc\u627e\u5230\u5566 \uff01 \u4f9d\u6b21\u4eceLEGB\u4f5c\u7528\u57df\u5bf9\u5e94\u7684scope\u4e2d\u67e5\u627e ! \u63d0\u4e00\u5634, \u901a\u5e38\u5728\u7f16\u7a0b\u8bed\u8a00\u4e2d, \u53d8\u91cf\u7684\u4f5c\u7528\u57df\u4ece\u4ee3\u7801\u7ed3\u6784 (\u4ee3\u7801\u5757) \u89d2\u5ea6\u6765\u770b, \u6709\u5757\u7ea7\u3001\u51fd\u6570\u3001\u7c7b\u3001\u6a21\u5757\u3001\u5305\u7b49\u7531\u5c0f\u5230\u5927\u7684\u7ea7\u522b.\u4f46\u662f\u5728Python\u4e2d, \u6ca1\u6709\u5757\u7ea7\u4f5c\u7528\u57df, \u4e5f\u5c31\u662f\u7c7b\u4f3cif\u8bed\u53e5\u5757\u3001for\u8bed\u53e5\u5757\u3001with\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7b49\u7b49\u662f\u4e0d\u5b58\u5728\u4f5c\u7528\u57df\u6982\u5ff5\u7684, \u4ed6\u4eec\u7b49\u540c\u4e8e\u666e\u901a\u7684\u8bed\u53e5\uff01 \u6362\u4e2a\u8bf4\u6cd5: \u53ea\u6709\u6a21\u5757module,\u7c7bclass\u4ee5\u53ca\u51fd\u6570def\u3001lambda\u624d\u4f1a\u5f15\u5165\u65b0\u7684\u4f5c\u7528\u57df(\u5373\u5f00\u8f9f\u65b0\u7684\u547d\u540d\u7a7a\u95f4), \u5176\u5b83\u7684\u4ee3\u7801\u5757(\u5982 if/elif/else/\u3001try/except\u3001for/while\u7b49)\u662f\u4e0d\u4f1a\u5f15\u5165\u65b0\u7684\u4f5c\u7528\u57df\u7684..","title":"\u6982\u5ff5"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/04_%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/#legb","text":"\u5728\u8868\u8fbe\u5f0f\u4e2d\u5f15\u7528\u53d8\u91cf\u65f6,Python\u89e3\u91ca\u5668\u5c06\u6309\u7167\u5982\u4e0b\u987a\u5e8f\u904d\u5386\u5404\u4f5c\u7528\u57df,\u4ee5\u89e3\u6790\u8be5\u5f15\u7528: \u5c40\u90e8\u4f5c\u7528\u57df/\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u91cc\u53d8\u91cf\u7684\u4f5c\u7528\u8303\u56f4 -- \u5f53\u524d\u51fd\u6570\u7684\u8303\u56f4 L Local \u5185\u5d4c\u4f5c\u7528\u57df/\u5185\u5d4c\u547d\u540d\u7a7a\u95f4\u91cc\u53d8\u91cf\u7684\u4f5c\u7528\u8303\u56f4 -- \u51fd\u6570\u5d4c\u5957\u91cc\u5916\u56f4\u51fd\u6570\u7684\u8303\u56f4 E Enclosing \u5168\u5c40\u4f5c\u7528\u57df/\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u91cc\u53d8\u91cf\u7684\u4f5c\u7528\u8303\u56f4 -- \u5f53\u524dpy\u6a21\u5757\u7684\u8303\u56f4(\u4e0d\u5305\u542bimport\u7684py\u6a21\u5757) G Global \u5185\u7f6e\u4f5c\u7528\u57df/\u5185\u7f6e\u547d\u540d\u7a7a\u95f4\u91cc\u53d8\u91cf\u7684\u4f5c\u7528\u8303\u56f4 -- \u5305\u542blen\u53castr\u7b49\u51fd\u6570\u7684\u90a3\u4e2ascope B Built-in \u82e5\u5728\u8fd9\u4e9b\u5730\u65b9\u90fd\u627e\u4e0d\u5230\u540d\u79f0\u76f8\u7b26\u7684\u53d8\u91cf,\u5c31\u4f1a\u629b\u51faNameError\u5f02\u5e38.. \u4f5c\u7528\u57df\u5173\u7cfb(\u51fd\u6570\u91cc\u5f15\u7528\u53d8\u91cf\u7684\u641c\u7d22\u8def\u5f84)\u662f\u5728\u51fd\u6570\u5b9a\u4e49\u9636\u6bb5\u5c31\u56fa\u5b9a\u6b7b\u4e86,\u4e0e\u51fd\u6570\u7684\u8c03\u7528\u4f4d\u7f6e\u65e0\u5173!! \u4f5c\u7528\u57df\u662fscope\u91cc\u53d8\u91cf\u4f5c\u7528\u7684\u8303\u56f4,\u5c31\u662fscope\u6240\u5728\u4ee3\u7801\u5757. \u800cLEGB\u9075\u5faa\u6700\u5185\u4f5c\u7528\u57df\u539f\u5219,\u6240\u4ee5\u5b9a\u4e49\u9636\u6bb5\u5c31\u56fa\u5b9a\u6b7b\u4e86! def f1 (): x = 1 # -- \u63d0\u4e00\u5634,f1\u51fd\u6570\u7ed3\u675f\u540e,x\u53d8\u91cf\u8fd8\u80fd\u88ab\u51fd\u6570\u5d4c\u5957\u4e2d\u7684\u5185\u90e8\u51fd\u6570inner\u8bbf\u95ee\u5230..Why\uff1f\u56e0\u4e3ax\u662f\u81ea\u7531\u53d8\u91cf\uff01 # \u540e\u7eed\u7684\u95ed\u5305\u90e8\u5206\u4f1a\u8be6\u7ec6\u9610\u8ff0!! def inner (): print ( x ) # -- \u4f5c\u7528\u57df\u5173\u7cfb\u662f\u5728\u51fd\u6570\u5b9a\u4e49\u9636\u6bb5\u5c31\u56fa\u5b9a\u6b7b\u4e86,\u4e0e\u51fd\u6570\u7684\u8c03\u7528\u4f4d\u7f6e\u65e0\u5173!! return inner f = f1 () def bar (): x = 111 f () # -- \u4e0e\u8c03\u7528\u4f4d\u7f6e\u65e0\u5173 bar () # 1","title":"LEGB"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/04_%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/#globalslocals","text":"python\u63d0\u4f9b\u4e86\u4e24\u4e2a\u5185\u7f6e\u51fd\u6570globals()\u548clocals(),\u524d\u8005\u8fd4\u56de\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u7684\u5b57\u5178,\u540e\u8005\u8fd4\u56de\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u5b57\u5178.. >>> type ( globals ()), type ( locals ()) ( < class ' dict '>, <class ' dict '>) \u6ce8\u610f: globals() \u8fd4\u56de\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u7684\u5b9e\u9645\u5f15\u7528; \u968f\u4fbf\u600e\u4e48\u6298\u817e\u90fd\u662f\u5728\u64cd\u4f5c\u5168\u5c40\u547d\u540d\u7a7a\u95f4, \u7c7b\u4f3c\u4e8e a = b \"\"\" \u53ef\u4ee5\u901a\u8fc7\u5f15\u7528\u5bf9\u8c61\u7684\u53d8\u91cf\u540dx,\u4ee5\u5e38\u89c4\u7684\u65b9\u5f0f\u8bbf\u95ee\u8be5\u5bf9\u8c61..\u4ea6\u53ef\u4ee5\u901a\u8fc7\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u5b57\u5178\u95f4\u63a5\u8bbf\u95ee\u5b83 \"\"\" >>> x = 'foo' >>> 'x' in globals () # -- \u6ce8\u610f,\u53d8\u91cf\u540d\u662f\u4ee5\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u4f5c\u4e3a\u952e\u7684 True >>> x 'foo' >>> globals ()[ 'x' ] 'foo' >>> x is globals ()[ 'x' ] # -- x\u7684\u503c\u4e0e\"x\"\u952e\u6240\u5bf9\u5e94vlaue\u503c\u7684\u5185\u5b58\u5730\u5740\u76f8\u540c True \"\"\" \u53ef\u4ee5\u4f7f\u7528globals()\u51fd\u6570\u5728\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u4e2d\u521b\u5efa\u548c\u4fee\u6539\u5168\u5c40\u53d8\u91cf \"\"\" >>> y NameError : name 'z' is not defined # -- \u5168\u5c40\u547d\u540d\u7a7a\u95f4\u4e2d\u6ca1\u6709\u53d8\u91cfy >>> glo = globals () # -- \u6ce8\u610f:glo\u662f\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u7684\u5f15\u7528 >>> glo = 100 # -- \u521b\u5efa \u7b49\u540c\u4e8e globals()['y'] = 100 >>> y 100 >>> glo [ 'y' ] = 123 # -- \u4fee\u6539 >>> y 123 \"\"\" globals\u7ed3\u5408format\u7684\u5e94\u7528 \"\"\" >>> x = 1 >>> y = 2 >>> \" {x} , {y} \" . format ( ** globals ()) '1,2' locals() \u8fd4\u56de\u7684\u4e0d\u662f\u5bf9\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u7684\u5f15\u7528!! \u90a3\u5230\u5e95\u8fd4\u56de\u7684\u662f\u4ec0\u4e48\u5462\uff1f \u67e5\u9605\u8d44\u6599,\u5f88\u591a\u535a\u5ba2\u8bf4\u662f\u62f7\u8d1d\u3001\u526f\u672c.. \u4e91\u91cc\u96fe\u91cc\u7684. \u81ea\u5df1\u505a\u4e86\u5b9e\u9a8c\u540e, \u53d1\u73b0\u8fd9\u6837\u7684\u63cf\u8ff0\u90fd\u4e0d\u591f\u4e25\u8c28.. \u5148\u8bf4\u7ed3\u8bba : locals()\u51fd\u6570\u8fd4\u56de\u7684\u662f\u5bf9\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u7684\u4e00\u4e2a \"\u62f7\u8d1d\" ( \u6253\u4e86\u5f15\u53f7\u54e6 ) ,\u4f46\u6b64\u62f7\u8d1d\u6709\u70b9\u7279\u6b8a,\u5b83\u5177\u5907\u6d45\u62f7\u8d1d\u7684\u4e00\u4e9b\u7279\u70b9,\u540c\u65f6\u5f53\u6211\u4eec\u518d\u6b21\u8c03\u7528locals()\u51fd\u6570\u65f6,\u5b83\u4f1a \u540c\u6b65\u66f4\u65b0 \"\u62f7\u8d1d\"\u7684\u503c.. \u6b64\"\u62f7\u8d1d\"\u6dfb\u52a0,\u6539\u53d8\u53ef\u53d8\u7c7b\u578b\u7684\u53d8\u91cf\u662fok\u7684,\u4f46\u4fee\u6539\u4e0d\u53ef\u53d8\u53d8\u91cf\u662f\u4e0d\u6210\u529f\u7684.. \"\"\" \u4ec0\u4e48\u662f\u62f7\u8d1d\u3001\u526f\u672c\u3001\u89c6\u56fe\uff1f \u53c2\u8003\u94fe\u63a5: https://blog.csdn.net/Reborn214/article/details/124539097 \u7b80\u5355\u6765\u8bf4,\u526f\u672c\u3001\u89c6\u56fe\u662fpython numpy\u6570\u7ec4\u4e2d\u7684\u4e13\u4e1a\u540d\u8bcd,\u4f46\u5176\u5177\u5907\u7684\u7279\u6027\u8ddf\u62f7\u8d1d\u5dee\u4e0d\u591a. numpy\u4e2d\u5f15\u7528 = python\u4e2d\u5f15\u7528; numpy\u4e2d\u89c6\u56fe = python\u4e2d\u6d45\u62f7\u8d1d; numpy\u4e2d\u526f\u672c = python\u4e2d\u6df1\u62f7\u8d1d \u503c\u5f97\u4e00\u63d0\u7684\u662f,\u5f15\u7528\u4e00\u822c\u53d1\u751f\u5728\u8d4b\u503c\u64cd\u4f5c(python\u8d4b\u503c\u90fd\u662f\u5f15\u7528\"\u5185\u5b58\u5730\u5740\"\u4f20\u9012) \u8fd8\u8981\u6ce8\u610f\u4e00\u4e2a\u5751!! id():\u8fd4\u56de\u5bf9\u8c61\u7684\u201c\u6807\u8bc6\u503c\u201d.\u8be5\u503c\u662f\u4e00\u4e2a\u6574\u6570,\u5728\u6b64\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u4e2d\u4fdd\u8bc1\u662f\u552f\u4e00\u4e14\u6052\u5b9a\u7684. \u4e24\u4e2a\u751f\u547d\u671f\u4e0d\u91cd\u53e0\u7684\u5bf9\u8c61\u53ef\u80fd\u5177\u6709\u76f8\u540c\u7684id()\u503c.. \u4e3e\u4f8b\u5206\u6790 \u6ca1\u6709\u5c06a[:]\u8d4b\u503c\u7ed9\u53d8\u91cf\u8fdb\u884c\u5f15\u7528,\u5f53\u6267\u884c\u5b8ca[:]\u540e,\u8fd9\u4e2a\u5bf9\u8c61\u5c31\u91ca\u653e\u5566.\u4f46\u8fd9\u5757\u5185\u5b58\u53ef\u80fd\u5e76\u6ca1\u6709\u6765\u5f97\u53ca\u91ca\u653e. \u5f53\u6211\u4eec\u65b0\u6267\u884ca[:]\u7684\u65f6\u5019,\u7528\u7684\u5c06\u4f1a\u662f\u540c\u4e00\u4e2a\u5185\u5b58,\u5e76\u6ca1\u6709\u7533\u8bf7\u65b0\u7684\u5185\u5b58. \u8fd9\u4f1a\u8ba9\u6211\u4eec\u89c9\u5f97\u4e24\u4e2aa[:]\u4e0ea[:]\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61 >>> a = [1,2,3] >>> id(a[:]) 140417051683648 >>> id(a[:]) 140417051684544 >>> id(a[:]) 140417051684544 >>> id(a[:]) is id(a[:]) # -- \u8ba9\u5176\u5904\u4e8e\u540c\u4e00\u751f\u547d\u5468\u671f,\u6bcf\u6b21\u6d45\u62f7\u8d1d\u90fd\u4f1a\u751f\u6210\u4e0d\u540c\u7684\u5bf9\u8c61,\u7ed3\u679c\u80af\u5b9a\u4e3aFalse False \"\"\" def func (): # -- \u9a8c\u8bc1\u4e86id()\u7684\u5751. print ( id ( locals ())) # 140204424022656 print ( id ( locals ())) # 140204424022656 print ( id ( locals ()) is id ( locals ())) # False m = [ 1 , 2 , 3 ] n = 66 loc = locals () # -- loc\u662f\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u7684\u201c\u62f7\u8d1d\u201d loc\u662f\u5bf9\u6b64\"\u62f7\u8d1d\"\u7684\u5f15\u7528!! print ( loc ) # {'m': [1, 2, 3], 'n': 66} \"\"\"\u6765,\u7b80\u5316\u4e00\u4e0b import copy scope = {'m': [1, 2, 3], 'n': 66} # -- \u6307\u4ee3\u5c40\u90e8\u547d\u540d\u7a7a\u95f4 loc = copy.copy(scope) # -- \u6307\u4ee3\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u7684\u6d45\u62f7\u8d1d loc['m'].append(4) scope.append(5) scope['n'] = 88 scope['x'] = 20 loc['n'] = 77 print(scope) # -- {'m': [1, 2, 3, 4, 5], 'n': 88, 'x': 20} print(loc) # -- {'m': [1, 2, 3, 4, 5], 'n': 77} \"\"\" loc [ 'm' ] . append ( 4 ) # -- \u8bd5\u56fe\u901a\u8fc7\"\u62f7\u8d1d\"\u8fc7\u6765\u7684\u5b57\u5178\u4fee\u6539\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u91cc\u7684\u53ef\u53d8\u7c7b\u578b\u7684\u53d8\u91cfm \u6210\u529f m . append ( 5 ) # -- \u5728\u5c40\u90e8\u547d\u4ee4\u7a7a\u95f4\u91cc\u4fee\u6539\u4e86m\u53d8\u91cf\u5bf9\u5e94\u7684\u503c n = 88 # -- \u5728\u5c40\u90e8\u547d\u4ee4\u7a7a\u95f4\u91cc\u4fee\u6539\u4e86n\u53d8\u91cf\u5bf9\u5e94\u7684\u503c x = 20 # -- \u5728\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u91cc\u6dfb\u52a0\u4e86x\u53d8\u91cf # -- \u53ef\u4ee5\u53d1\u73b0\u6b64\"\u62f7\u8d1d\",\u5177\u5907\u6d45\u62f7\u8d1d\u7684\u7279\u6027 print ( loc ) # {'m': [1, 2, 3, 4, 5], 'n': 66} loc [ 'n' ] = 77 # -- \u8bd5\u56fe\u901a\u8fc7\"\u62f7\u8d1d\"\u8fc7\u6765\u7684\u5b57\u5178\u4fee\u6539\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u91cc\u7684\u53ef\u53d8\u7c7b\u578b\u7684\u53d8\u91cfn \u5931\u8d25 loc [ 'q' ] = 250 # -- loc\u6dfb\u52a0\u662f\u6210\u529f\u7684 print ( loc ) # {'m': [1, 2, 3, 4, 5], 'n': 77, 'q': 250} print ( locals ()) # {'m': [1, 2, 3, 4, 5], 'n': 88, 'q': 250, 'loc': {...}, 'x': 20} # -- \u518d\u6b21\u8c03\u7528locals()\u540e,\"\u62f7\u8d1d\"\u540c\u6b65\u66f4\u65b0\u4e86. print ( loc ) # {'m': [1, 2, 3, 4, 5], 'n': 88, 'q': 250, 'loc': {...}, 'x': 20} func ()","title":"globals()\u3001locals()"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/04_%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/#globalnonlocal","text":"\u56de\u987e\u4e0bPython\u5728\u4f5c\u7528\u57df\u91cc\u5bf9\u53d8\u91cf\u7684\u8d4b\u503c\u64cd\u4f5c\u89c4\u5219: \u82e5\u8fd9\u4e2a\u53d8\u91cf\u5728\u8be5\u4f5c\u7528\u57df\u5b58\u5728(\u5df2\u7ecf\u5b9a\u4e49), \u5219\u5bf9\u5176\u7ed1\u5b9a\u65b0\u7684\u5bf9\u8c61; \u82e5\u4e0d\u5b58\u5728,\u5219\u5c06\u8fd9\u6b21\u8d4b\u503c\u89c6\u4e3a\u5bf9\u8fd9\u4e2a\u53d8\u91cf\u7684\u5b9a\u4e49.. global -- \u4e0d\u7ba1\u662f\u5728\u51fd\u6570\u5d4c\u5957\u7684\u54ea\u4e00\u5c42,\u5bf9x\u53d8\u91cf\u7684\u8d4b\u503c\u64cd\u4f5c\u90fd\u662f\u4fee\u6539\u5168\u5c40\u4f5c\u7528\u57df\u91cc\u7684\u90a3\u4e2ax\u53d8\u91cf!! nonlocal -- \u5982\u679c\u5728\u95ed\u5305\u5185\u7ed9x\u53d8\u91cf\u8d4b\u503c,\u90a3\u4e48\u4fee\u6539\u7684\u5176\u5b9e\u662f\u95ed\u5305\u5916\u90a3\u4e2a\u4f5c\u7528\u57df\u91cc\u7684x\u53d8\u91cf.. nonlocal\u7684\u552f\u4e00\u9650\u5236\u5728\u4e8e,\u4e0d\u80fd\u5ef6\u4f38\u5230\u6a21\u5757\u7ea7\u522b,\u8fd9\u662f\u4e3a\u4e86\u9632\u6b62\u5b83\u6c61\u67d3\u5168\u5c40\u53d8\u91cf.. Ps: \u63d0\u4e00\u5634\u95ed\u5305,\u540e\u7eed\u4f1a\u8be6\u7ec6\u9610\u8ff0. \u51fd\u6570\u5d4c\u5957,\u5185\u90e8\u51fd\u6570\u5f15\u7528\u5916\u90e8\u51fd\u6570\u7684\u53c2\u6570\u6216\u53d8\u91cf,\u5c31\u6784\u6210\u4e86\u95ed\u5305.. \"\"\" \u2605 --global \u5728\u5c40\u90e8\u82e5\u60f3\u4fee\u6539\u5168\u5c40\u7684\u4e0d\u53ef\u53d8\u7c7b\u578b,\u9700\u8981\u501f\u52a9global\u58f0\u660e \u5728\u5c40\u90e8\u82e5\u60f3\u4fee\u6539\u5168\u5c40\u7684\u53ef\u53d8\u7c7b\u578b,\u4e0d\u9700\u8981\u501f\u52a9\u4efb\u4f55\u58f0\u660e,\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539 \u82e5\u5168\u5c40\u4e2d\u6ca1\u6709x\u53d8\u91cf,global\u8bed\u53e5\u548c\u8d4b\u503c\u7684\u7ec4\u5408(\u4e0d\u7ba1\u5904\u4e8e\u5d4c\u5957\u7684\u54ea\u4e00\u5c42)\u53ef\u4ee5\u95f4\u63a5\u5728\u5c40\u90e8\u4e2d\u521b\u5efax\u5168\u5c40\u53d8\u91cf \"\"\" x = [] def func (): global m # -- \u7533\u660em\u53d8\u91cf\u662f\u5168\u5c40\u53d8\u91cf m = 10 globals ()[ 'n' ] = 20 # -- n\u53d8\u91cf\u5728\u5168\u5c40\u4e2d\u5b58\u5728\u7684\u8bdd,\u6b64\u8d4b\u503c\u64cd\u4f5c\u5c31\u662f\u5728\u4fee\u6539;\u901a\u5e38\u4e0d\u4f1a\u8fd9\u4e48\u505a,\u5b8c\u5168\u6ca1\u5fc5\u8981 x . append ( 1 ) func () func () print ( x ) # [1,1] print ( m , n ) # 10,20 \"\"\" \u2605 --nonlocal \u6307\u975e\u5168\u5c40\u6700\u8fd1\u7684\u90a3\u4e2a \"\"\" x = 1 def f1 (): # E f1\u7684\u53c2\u6570\u5bf9f2\u800c\u8a00 x = 111 # E \u6b64\u5904\u7684x\u5bf9f2\u800c\u8a00 def f2 (): # E f2\u7684\u53c2\u6570\u5bf9f3\u800c\u8a00 x = 222 # E \u6b64\u5904\u7684x\u5bf9f3\u800c\u8a00 def f3 (): nonlocal x # -- \u82e5f1\u51fd\u6570\u5d4c\u5957\u91cc\u6ca1\u6709x \u5219\u62a5\u9519\u627e\u4e0d\u5230x\u53d8\u91cf x = 333 # -- \u6539\u7684\u662f\u6700\u8fd1\u7684x = 222\u7684\u503c f3 () print ( x ) # 333 # {'f3': <function f1.<locals>.f2.<locals>.f3 at 0x7fc60c71c9d0>, 'x': 333} print ( locals ()) # f2\u7684\u5c40\u90e8\u4f5c\u7528\u57df f2 () print ( x ) # 111 # {'x': 111, 'f2': <function f1.<locals>.f2 at 0x7fc60c71c790>} print ( locals ()) # f1\u7684\u5c40\u90e8\u4f5c\u7528\u57df f1 () print ( x ) # 1","title":"global\u3001nonlocal"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/05_%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/","text":"\u53d8\u91cf\u7684\u53ef\u89c1\u6027\u4e0e\u5f15\u7528 \u00b6 \u5b66\u5230\u8fd9\u91cc,\u6211\u4eec\u518d\u6df1\u5c42\u6b21\u7684\u5256\u6790\u4e0bUnboundLocalError\u9519\u8bef,\u5728\u524d\u6587\u7684\u9610\u8ff0\u4e2d\u6709\u8fd9\u4e48\u4e00\u6bb5\u6587\u5b57 \"\u5230\u8fd9\u4e00\u6b65a\u53d8\u91cf\u5df2\u7ecf\u5b9a\u6027\u4e3a\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u5566,\u4f46\u662f\u6b64a\u53d8\u91cf\u8fd8\u672a\u5b8c\u6210\u7ed1\u5b9a\" , \u8fd9\u6d89\u53ca\u5230python\u7684 \u53ef\u89c1\u6027\u4e0e\u7ed1\u5b9a . \u53c2\u8003\u94fe\u63a5 : https://www.cnblogs.com/yssjun/p/9873689.html \u76ee\u6807: \u4e5f\u5c31\u662f\u6211\u4eec\u60f3\u5f04\u6e05\u695a, \u6ee1\u8db3\u4ec0\u4e48\u6761\u4ef6\u53d8\u91cf\u540d\u5728\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u4e2d\u5c31\u662f\u53ef\u89c1\u7684.. \u73b0\u9636\u6bb5,\u4e0d\u8981\u7ea0\u7ed3\u5e95\u5c42\u600e\u4e48\u5b9e\u73b0\u53ef\u89c1\u6027\u7684,\u90a3\u662f\u9700\u8981\u7ecf\u8fc7\u9605\u8bfb\u6e90\u7801\u8fdb\u884c\u5206\u6790\u7684..\u9976\u8fc7\u6211\u5427...\u4fee\u884c\u4e0d\u591f,\u770b\u4e0d\u61c2\u6e90\u7801. def func (): a += 4 # -- UnboundLocalError:local variable 'a' referenced before assignment return a a = 1 func () \u547d\u540d\u7a7a\u95f4\u4e0e\u4f5c\u7528\u57df \u00b6 \u4f5c\u7528\u57df\u5373\u4ee3\u7801\u5757!! scope\u7a7a\u95f4\u91cc\u7684\u53d8\u91cf\u4f5c\u7528\u7684\u8303\u56f4\u5c31\u662f\u6240\u5bf9\u5e94\u7684\u4ee3\u7801\u5757,\u8fd9\u4e9b\u53d8\u91cf\u5728\u8be5\u4ee3\u7801\u5757\u4e2d\u662f\u53ef\u89c1\u7684 \u4f5c\u7528\u57df\u5173\u7cfbLEGB/\u51fd\u6570\u91cc\u5f15\u7528\u53d8\u91cf\u7684\u641c\u7d22\u8def\u5f84/\u4f9d\u6b21\u4eceLEGB\u4f5c\u7528\u57df\u5bf9\u5e94\u7684scope\u4e2d\u67e5\u627e! \u4ece\u5d4c\u5957\u7684\u91cc\u5c42\u5f80\u5916\u5c42\u67e5\u627e \u4f5c\u7528\u57df\u5173\u7cfb \u67e5\u627e\u987a\u5e8fLEGB,\u6240\u4ee5\u8ddf \u4ee3\u7801\u5757\u7684\u5d4c\u5957 \u6709\u5173, \u67e5\u7684\u662fLEGB\u5bf9\u5e94\u7684scope,\u6240\u4ee5\u8ddf \u4ee3\u7801\u5757\u7684\u73af\u5883 \u6709\u5173! \u4e13\u4e1a\u540d\u8bcd\u89e3\u91ca \u00b6 \u8bf4\u660e: python\u4e2d\u7684\u51fd\u6570\u3001\u7c7b\u3001\u6a21\u5757\u90fd\u662f\u4ee3\u7801\u5757, \u53ea\u4e0d\u8fc7\u5728\u6b64\u5904\u8ba8\u8bba\u7684\u91cd\u70b9\u662f\u51fd\u6570\u7684\u547d\u540d\u7a7a\u95f4\u548c\u4f5c\u7528\u57df,\u6240\u4ee5\u7279\u6b64\u58f0\u660e\u4e0b\u4ee5\u4e0b\u9610\u8ff0\u4e2d\u7684\u4ee3\u7801\u5757\u7edf\u7edf\u6307\u51fd\u6570.. code block \u6211\u4eec\u53ef\u4ee5\u5bf9\u4ee3\u7801\u8fdb\u884c\u5206\u5757 code block . \u4e3e\u4e2a\u4f8b\u5b50,\u5b9a\u4e49\u4e86\u4e00\u4e2a&NBSP;\u7c7b,\u8fd9\u4e2a\u7c7b\u91cc\u9762\u53c8\u5b9a\u4e49\u4e86\u51fd\u6570B\u3001\u51fd\u6570C, \u51fd\u6570C\u91cc\u5d4c\u5957\u4e86\u51fd\u6570D, \u90a3\u4e48&NBSP;\u662f\u4e00\u4e2a\u4ee3\u7801\u5757,\u91cc\u9762\u5305\u542bB\u3001C\u4e24\u4e2a\u4ee3\u7801\u5757..C\u53c8\u5305\u542bD\u8fd9\u4e2a\u4ee3\u7801\u5757. scope \u7a0b\u5e8f\u5f00\u59cb\u8fd0\u884c\u540e, python\u89e3\u91ca\u5668\u4f1a\u4ece\u4e0a\u5230\u4e0b\u6267\u884c\u4ee3\u7801,\u6267\u884c\u5230\u67d0\u4e2a\u4ee3\u7801\u5757\u65f6,\u4f1a\u4e3a\u5176\u4e00\u5bf9\u4e00\u5206\u914d\u547d\u540d\u7a7a\u95f4 scope (\u662f\u771f\u5b9e\u7684\u5185\u5b58\u7a7a\u95f4) , \u7528\u4e8e\u5b58\u653e\u4ee3\u7801\u5757\u91cc\u9762 \u7ed1\u5b9a \u7684\u53d8\u91cf\u540d(\u53d8\u91cf\u540d\u4e0e\u5bf9\u8c61\u4e4b\u95f4\u7684\u5173\u7cfb).. \u9700\u8981\u6ce8\u610f\u7684\u662f, \u4ee3\u7801\u5757\u770b\u8d77\u6765\u662f\u5d4c\u5957\u7684(A\u5305\u542bB\u548cC,B\u5305\u542bD),\u4f46\u4ee3\u7801\u5757\u5bf9\u5e94\u7684scope\u662f\u76f8\u4e92\u72ec\u7acb\u7684.. block\u2019s environment \u8be5code block\u4e2d\u6240\u6709scope\u4e2d\u53ef\u89c1\u7684name\u7684\u96c6\u5408\u6784\u6210block\u7684\u73af\u5883 \u79f0\u4f5c\u8be5\u4ee3\u7801\u5757\u7684\u73af\u5883. local variable,global variable scope\u547d\u540d\u7a7a\u95f4\u4e5f\u6709\u5f88\u591a\u5206\u7c7b,\u6211\u4eec\u63a5\u89e6\u6700\u591a\u7684\u662f\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u548c\u5c40\u90e8\u547d\u540d\u7a7a\u95f4. \u6574\u4e2apy\u6a21\u5757/\u6267\u884c\u6587\u4ef6\u4ee5\u53capy\u6267\u884c\u6587\u4ef6\u91cc\u4f7f\u7528 import \u8bed\u53e5\u52a0\u8f7d\u7684\u4efb\u4f55\u6a21\u5757\u90fd\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u5168\u5c40\u547d\u540d\u7a7a\u95f4... \u4e00\u4e2a\u4e2acode block\u4ee3\u7801\u5757\u5bf9\u5e94\u7684\u662f\u4e00\u4e2a\u4e2a\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4.. \u4ee3\u7801\u5757 ----- \u5c40\u90e8\u547d\u540d\u7a7a\u95f4 ; import\u52a0\u8f7d\u7684\u6a21\u5757\u3001py\u6587\u4ef6 ------ \u5168\u5c40\u547d\u540d\u7a7a\u95f4 \u5728\u5168\u5c40scope\u548c\u5c40\u90e8scope\u4e4b\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\u5206\u522b\u53eb\u505a local variable \u5c40\u90e8\u53d8\u91cf\u548c global variable \u5168\u5c40\u53d8\u91cf.. \u67e5\u9605\u8d44\u6599\u65f6,\u7ecf\u5e38\u4f1a\u770b\u5230, \"\u5728\u5168\u5c40\u4f5c\u7528\u57df\u91cc\u5b9a\u4e49\u7684\u53d8\u91cf\u53eb\u505a\u5168\u5c40\u53d8\u91cf..\" \u8bf4\u7684\u662f\u5168\u5c40\u3001\u5c40\u90e8 \u4f5c\u7528\u57df \u800c\u4e0d\u662f\u5168\u5c40\u3001\u5c40\u90e8scope\u547d\u540d\u7a7a\u95f4.. \u8fd9\u4e9b\u8bf4\u6cd5\u90fd\u6ca1\u6bdb\u75c5.. \u6211\u4eec\u8fd9\u6837\u60f3\u5c31\u60f3\u901a\u4e86, \u4f5c\u7528\u57df\u4e0e\u547d\u540d\u7a7a\u95f4\u4f9d\u6258\u4e8e/\u4f5c\u7528\u4e8e\u540c\u4e00\u5757\u4ee3\u7801\u5757,\u8fd9\u4e2a\u4ee3\u7801\u5757\u4e2d\u7684\u7ed1\u5b9a\u64cd\u4f5c\u4e2d\u7684\u53d8\u91cf\u5f52\u547d\u540d\u7a7a\u95f4\u7ba1;\u8fd9\u4e2a\u4ee3\u7801\u5757\u4e2d\u7684\u5f15\u7528\u53d8\u91cf\u5f52\u4f5c\u7528\u57df\u7ba1,\u6309\u7167\u4f5c\u7528\u57df\u5173\u7cfbLEGB\u7684\u89c4\u5219\u5728scope\u4e2d\u8c03\u7528\u88ab\u5f15\u7528\u7684\u53d8\u91cf.. \u4f5c\u7528\u57df\u662f\u4ee3\u7801\u5757\u9759\u6001\u7684\u4f53\u73b0,scope\u547d\u540d\u7a7a\u95f4\u662f\u4ee3\u7801\u5757\u52a8\u6001\u7684\u4f53\u73b0 Free variable Free variable \u662f\u4e00\u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u6982\u5ff5, \u95ed\u5305\u90a3\u91cc\u4f1a\u8be6\u7ec6\u9610\u8ff0, \u8fd9\u91cc\u7b80\u5355\u63d0\u4e00\u5634, \u5728\u95ed\u5305\u4e2d\u5f15\u7528\u7684\u7236\u51fd\u6570\u4e2d\u7684\u5c40\u90e8\u53d8\u91cf\u662f\u4e00\u4e2a\u81ea\u7531\u53d8\u91cf,\u800c\u4e14\u8be5\u81ea\u7531\u53d8\u91cf\u88ab\u5b58\u653e\u5728\u4e00\u4e2acell\u5bf9\u8c61\u4e2d.. bind name scope\u7528\u4e8e\u5b58\u653ecode block\u91cc\u5b9a\u4e49\u7684\u53d8\u91cf,\u5177\u4f53\u6765\u8bf4,\u5c06\u67d0\u4e00\u4e2a\u5bf9\u8c61\u4e0e\u53d8\u91cf\u8fdb\u884c\u7ed1\u5b9a,\u5e76\u5c06\u8fd9\u7ed1\u5b9a\u5173\u7cfb\u5b58\u653e\u5728\u547d\u540d\u7a7a\u95f4\u4e2d. code block\u4e2d\u7684\u54ea\u4e9b\u4ee3\u7801\u5728\u6267\u884c\u65f6\u9700\u8981\u8fdb\u884c bind name \u7ed1\u5b9a\u64cd\u4f5c\u5462\uff1f 1> \u51fd\u6570\u7684\u5f62\u53c2a\u3001b def func(a,b):pass 2> py\u6587\u4ef6\u4e2d\u7684import import numpy 3> \u76f4\u63a5\u8d4b\u503c\u7684\u64cd\u4f5c a = 1 4> for \u5faa\u73af \u4e2d\u7684 i for i in range(10):pass 5> \u5f02\u5e38\u5904\u7406except\u540e\u7684\u540d\u5b57\u3001\u6587\u4ef6\u5904\u7406 with open(..) as f as\u540e\u9762\u7684f \u7b49 \u540d\u8bcd \u89e3\u91ca \u4ee3\u7801\u5757 code block \u4f5c\u4e3a\u4e00\u4e2a\u5355\u5143(Unit)\u88ab\u6267\u884c\u7684\u4e00\u6bb5python\u7a0b\u5e8f\u6587\u672c.eg: \u4e00\u4e2a\u6a21\u5757\u3001\u51fd\u6570\u4f53\u548c\u7c7b\u7684\u5b9a\u4e49\u7b49 \u547d\u540d\u7a7a\u95f4 scope \u5c06block\u4ee3\u7801\u5757\u4e2d\u7684\u53d8\u91cfbind\u7ed1\u5b9a\u5230\u8be5block\u5bf9\u5e94\u7684\u547d\u540d\u7a7a\u95f4\u4e2d \u5c40\u90e8\u53d8\u91cf local variable \u5728\u4e00\u4e2ablock\u4e2d\u88ab\u7ed1\u5b9a(eg \u51fd\u6570\u4e2d)\u7684\u53d8\u91cf \u5168\u5c40\u53d8\u91cf global variable \u5728\u4e00\u4e2amodule\u4e2d\u88ab\u7ed1\u5b9a(eg py\u6a21\u5757)\u7684\u53d8\u91cf \u81ea\u7531\u53d8\u91cf free variable \u5728\u67d0\u4e2ablock\u4e2d\u88ab\u5f15\u7528,\u4f46\u6ca1\u6709\u5728\u8be5\u4ee3\u7801\u5757\u4e2d\u88ab\u5b9a\u4e49\u7684\u53d8\u91cf \u7ed3\u5408\u5b98\u65b9\u6587\u6863\u5206\u6790 \u00b6 \u4ee3\u7801\u5757\u73af\u5883 \"The set of all such scopes visible to a code block is called the block\u2019s environment.\" LEGB \"When a name is used in a code block, it is resolved using the nearest enclosing scope\" \u8fd9\u6bb5\u8bdd\u544a\u8bc9\u6211\u4eec\u5f53\u4e00\u4e2aname\u88ab\u5f15\u7528\u65f6,\u5b83\u4f1a\u5728\u5176\u6700\u8fd1\u7684scope\u4e2d\u5bfb\u627e\u88ab\u5f15\u7528name\u7684\u5b9a\u4e49 \u53d8\u91cf\u7684\u53ef\u89c1\u6027 \"The local variables of a code block can be determined by scanning the entire text of the block for name binding operations.\" \u4ee3\u7801\u5757(eg \u51fd\u6570\u91cc\u7684\u4ee3\u7801)\u5f00\u59cb\u6267\u884c\u5566,\u89e3\u91ca\u5668\u4f1a\u4e3a\u5176\u5206\u914d\u5185\u5b58\u7a7a\u95f4scope. \u4f46\u5728\u771f\u6b63\u6267\u884c\u4e4b\u524d\u4f1a\u5148\u626b\u7784\u51fd\u6570\u4f53\u91cc\u7684\u4ee3\u7801,\u82e5\u5b58\u5728\u7ed1\u5b9a\u64cd\u4f5c\u7684\u4ee3\u7801,\u5bf9\u8c61\u7ed1\u5b9a\u7684\u53d8\u91cf\u5728scope\u7a7a\u95f4\u4fbf\u5177\u6709\u4e86\u53ef\u89c1\u6027...\u8be5\u53d8\u91cf\u5c31\u5b9a\u6027\u6210\u4e86\u5c40\u90e8\u53d8\u91cf; \u626b\u63cf\u5b8c\u540e,\u5f00\u59cb\u771f\u6b63\u6267\u884c,\u5b8c\u6210\u7ed1\u5b9a\u64cd\u4f5c..\u53d8\u91cf\u4fbf\u53ef\u4ee5\u88ab\u5f15\u7528. \u81ea\u7531\u53d8\u91cf \"If a variable is used in a code block but not defined there, it is a free variable .\" \u6ce8\u610f: \u51fd\u6570\u5d4c\u5957,A\u51fd\u6570\u5305\u542bB\u51fd\u6570..A\u6267\u884c\u65f6\u4f1a\u626b\u63cfB\u51fd\u6570\u7684\u4ee3\u7801,\u6709\u4e24\u70b9,\u5176\u4e00B\u51fd\u6570\u91cc\u7ed1\u5b9a\u64cd\u4f5c\u7684\u53d8\u91cf\u4e0d\u4f1a\u5b58\u5165A\u7684scope\u4e2d.\u5176\u4e8c\u626b\u63cf\u65f6\u4f1a\u8bb0\u5f55B\u4e2d\u672a\u5728B\u91cc\u5b9a\u4e49\u5374\u5f15\u7528A\u4e2d\u53ef\u89c1\u7684\u53d8\u91cf..\u5f53A\u6267\u884c\u5b8c\u91ca\u653e,\u8fd9\u4e9b\u5c40\u90e8\u53d8\u91cf\u5c31\u6210\u4e86\u81ea\u7531\u53d8\u91cf,\u4f46\u8fd9\u4e9b\u81ea\u7531\u53d8\u91cf\u80fd\u5426\u88abB\u6210\u529f\u5f15\u7528\u53d6\u51b3\u4e8e\u8fd9\u4e9b\u81ea\u7531\u53d8\u91cf\u662f\u5426\u5b8c\u6210\u7ed1\u5b9a.. Python\u5728\u4f5c\u7528\u57df\u91cc\u5bf9\u53d8\u91cf\u7684\u8d4b\u503c\u64cd\u4f5c\u89c4\u5219 \u82e5\u8fd9\u4e2a\u53d8\u91cf\u5728\u8be5\u4f5c\u7528\u57df\u91cc\u4e0d\u5b58\u5728, \u5219\u5c06\u8fd9\u6b21\u8d4b\u503c\u89c6\u4e3a\u5bf9\u8fd9\u4e2a\u53d8\u91cf\u7684\u5b9a\u4e49..\u82e5\u5b58\u5728,\u5219\u5bf9\u5176\u7ed1\u5b9a\u65b0\u7684\u5bf9\u8c61; \u5047\u8bbe\u4ee3\u7801\u5757(\u4e00\u4e2a\u51fd\u6570)\u5728\u771f\u6b63\u6267\u884c\u4e4b\u524d,\u626b\u63cf\u5230\u51fd\u6570\u4e2d\u4f9d\u6b21\u6709\u4e24\u4e2a\u76f4\u63a5\u8d4b\u503c\u7684\u64cd\u4f5c a = 1 \u548c a=\"Hello\" , a\u53d8\u91cf\u4fbf\u5177\u6709\u4e86\u53ef\u53d8\u6027,\u53ea\u8981\u5176\u4e2d\u6709\u4e00\u4e2a\u64cd\u4f5c\u5b8c\u6210\u4e86\u6267\u884c,a\u53d8\u91cf\u5c31\u5b8c\u6210\u4e86\u5b9a\u4e49/\u7ed1\u5b9a,\u5c31\u53ef\u4ee5\u88ab\u5f15\u7528.. \u82e5\u5bf9a\u53d8\u91cf\u88ab\u591a\u6b21\u6267\u884c\u8d4b\u503c\u64cd\u4f5c,a\u53d8\u91cf\u5c31\u4f1a\u7ecf\u5386\u7ed1\u5b9a\u65b0\u7684\u5bf9\u8c61\u7684\u8fc7\u7a0b.. UnboundLocalError\u62a5\u9519 \"If the name refers to a local variable that has not been bound, a UnboundLocalError exception is raised. \" \u82e5\u5f15\u7528\u7684\u53d8\u91cf\u662f \u5c40\u90e8\u53d8\u91cf (\u4ee3\u7801\u5757\u4e2d\u7684\u53d8\u91cf) ,\u4f46\u8fd8\u672a\u5b8c\u6210\u7ed1\u5b9a,\u5c31\u4f1a\u62a5\u9519 UnboundLocalError .. \u6ce8\u610f \u5f15\u7528\u7684\u662f\u5c40\u90e8\u53d8\u91cf!! \u81ea\u7531\u53d8\u91cf\u8ddf\u5c40\u90e8\u53d8\u91cf\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u6982\u5ff5!! \u51fd\u6570\u62a5\u9519\u5206\u6790 \u00b6 \u2605 \u6392\u9519\u601d\u8def : \u5148\u626b\u63cf,\u6839\u636e\u7ed1\u5b9a\u64cd\u4f5c\u5b9a\u6027\u5c40\u90e8\u53d8\u91cf; \u5f15\u7528\u53d8\u91cf\u65f6\u6839\u636eLEGB\u89c4\u5219\u67e5\u627e.\u82e5\u5f15\u7528\u7684\u5c40\u90e8\u53d8\u91cf\u53ea\u6709\u53ef\u89c1\u6027..UnboundLocalError 1> Python\u4e2d\u8981\u60f3\u5f15\u7528\u4e00\u4e2aname, \u8be5name\u5fc5\u987b\u8981\u53ef\u89c1\u800c\u4e14\u662f\u5b8c\u6210\u7ed1\u5b9a\u4e86\u7684! 2> \u4f46\u51e1\u6267\u884c\u7684\u4ee3\u7801\u5757\u91cc\u6709\u7ed1\u5b9a\u64cd\u4f5c,\u7ed1\u5b9a\u7684\u53d8\u91cf\u5728\u6240\u5728\u4ee3\u7801\u5757\u5bf9\u5e94\u7684scope\u5c31\u5177\u6709\u53ef\u89c1\u6027 \u5177\u5907\u53ef\u89c1\u6027\u7684\u53d8\u91cf\u5c06\u4f1a\u88ab\u5b9a\u6027\u4e3a\u5c40\u90e8\u53d8\u91cf.\u7ed1\u5b9a\u64cd\u4f5c\u771f\u6b63\u6267\u884c\u540e,\u53ef\u89c1\u6027\u53d8\u91cf\u664b\u5347\u4e3a\u53ef\u88ab\u5f15\u7528\u7684\u53d8\u91cf. (\u4e0d\u7ba1\u4ee3\u7801\u5757\u91cc\u7ed1\u5b9a\u64cd\u4f5c\u7684\u4ee3\u7801\u662f\u5426\u4f1a\u6267\u884c,\u56e0\u4e3a\u5bf9\u4ee3\u7801\u5757\u4e2d\u4ee3\u7801\u7684\u626b\u63cf\u4f1a\u53d1\u751f\u5728\u4ee3\u7801\u5757\u771f\u6b63\u6267\u884c\u4e4b\u524d) 3> \u82e5\u5f15\u7528\u4e86\u67d0\u4e2a\u53d8\u91cf,\u6b64\u53d8\u91cf\u5728\u5404\u4e2a\u4f5c\u7528\u57df\u91cc\u90fd\u627e\u4e0d\u5230(LEGB),\u5c31\u4f1a\u62a5\u9519 NameError ; \u82e5\u5f15\u7528\u7684\u53d8\u91cf\u662f \u5c40\u90e8\u53d8\u91cf ,\u4f46\u8fd8\u672a\u5b8c\u6210\u7ed1\u5b9a,\u5c31\u4f1a\u62a5\u9519 UnboundLocalError .. 4> \u82e5\u8fd9\u4e2a\u53d8\u91cf\u5728\u8be5\u4f5c\u7528\u57df(\u51fd\u6570)\u91cc\u4e0d\u5b58\u5728, \u5219\u5c06\u8fd9\u6b21\u8d4b\u503c\u89c6\u4e3a\u5bf9\u8fd9\u4e2a\u53d8\u91cf\u7684\u5b9a\u4e49.. \u82e5\u5b58\u5728,\u5219\u5bf9\u5176\u7ed1\u5b9a\u65b0\u7684\u5bf9\u8c61; \u56db\u5927\u6848\u4f8b\u5b9e\u8df5 \u00b6 \u25b2 \u6848\u4f8b\u4e00\u5206\u6790 \"\"\"\u5206\u6790 \u5728outer_func\u4e2d\u6211\u4eec\u5b9a\u4e49\u4e86\u53d8\u91cfloc_var,\u56e0\u4e3a\u8d4b\u503c\u662f\u4e00\u79cd\u7ed1\u5b9a\u64cd\u4f5c,\u56e0\u6b64loc_var\u5177\u6709\u53ef\u89c1\u6027,\u5e76\u4e14\u5b8c\u6210\u4e86\u7ed1\u5b9a,\u53ef\u4ee5\u88ab\u5f15\u7528. \u4f46\u6839\u636e\u62a5\u9519,\u5728outer_func\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570inner_func\u5e76\u4e0d\u80fd\u5f15\u7528\u53d8\u91cfloc_var.. \u8fd9\u5c31\u8ba9\u4eba\u5f88\u7591\u60d1. \u8fd9\u62a5\u9519\u7ed3\u679c\u4e0e\u4ee3\u7801\u5757\u7684\u73af\u5883block\u2019s environment\u7684\u6982\u5ff5\u76f8\u77db\u76fe\u4e86.\u56e0\u4e3ablock\u2019s environment\u544a\u8bc9\u6211\u4eec\u51fd\u6570\u4e2d\u7684scope\u662f\u53ef\u4ee5\u6269\u5c55\u5230\u5176\u5185\u5b9a\u4e49\u7684\u6240\u6709scope\u4e2d\u7684.\u4e5f\u5c31\u610f\u5473\u7740outer_func\u51fd\u6570\u4e2d\u7684loc_var\u53d8\u91cf\u662f\u53ef\u4ee5\u88abinner_func\u51fd\u6570\u6240\u5f15\u7528\u7684.. \u95ee\u9898\u51fa\u5728\u54ea\u91cc\u5462\uff1f\u7ee7\u7eed\u5f80\u4e0b\u770b. \u5f53\u6211\u4eec\u6267\u884cclo_func()\u540e,inner_func\u51fd\u6570\u7684\u51fd\u6570\u4f53\u4ee3\u7801\u5f00\u59cb\u6267\u884c,\u5148\u626b\u63cf,\u626b\u63cf\u5230\u4e86loc_var += \" in inner func\"\u8fd9\u4e2a\u8d4b\u503c/\u7ed1\u5b9a\u64cd\u4f5c,inner_func\u51fd\u6570\u4e2d\u7684loc_var\u53d8\u91cf\u4fbf\u5177\u6709\u4e86\u53ef\u89c1\u6027.\u626b\u63cf\u5b8c\u6bd5\u540e\u5f00\u59cb\u771f\u6b63\u6267\u884c\u4ee3\u7801. \u8be5\u8d4b\u503c\u64cd\u4f5c\u53ef\u4ee5\u6362\u4e2a\u5199\u6cd5 loc_var = loc_var + \" in inner func\" \"=\"\u53f7\u53f3\u8fb9\u7684loc_var\u53d8\u91cf\u4f1a\u5148\u88ab\u5f15\u7528,\u6839\u636e\u53d8\u91cf\u7684\u5f15\u7528\u89c4\u5219(LEGB),\u4f1a\u5148\u5728loc_var\u53d8\u91cf\u6240\u5728\u7684inner_func\u51fd\u6570\u5bf9\u5e94\u7684scope\u67e5\u627eloc_var,\u53d1\u73b0\u5728\u6b64scope\u4e2d,loc_var\u662f\u53ef\u89c1\u7684,\u6240\u4ee5\u4e0d\u4f1a\u4f7f\u7528outer_func\u4e2d\u5b9a\u4e49\u7684loc_var.. \u4f46\u6b64scope\u4e2dloc_var\u53d8\u91cf\u8fd8\u6ca1\u6709\u5b8c\u6210\u7ed1\u5b9a\u5c31\u88ab\u5f15\u7528\u5566,\u6240\u4ee5\u62a5\u9519UnboundLocalError!! \"\"\" def outer_func (): loc_var = \"local variable\" # -- inner_func\u4e2d\u6ca1\u6709\u5f15\u7528\u6b64\u5904\u7684loc_var def inner_func (): # \u8be5\u884c\u62a5\u9519 --UnboundLocalError:local variable 'loc_var' referenced before assignment loc_var += \" in inner func\" return loc_var return inner_func clo_func = outer_func () clo_func () \u25b2 \u6848\u4f8b\u4e8c\u5206\u6790 \"\"\"\u5206\u6790 flag\u4e3aFalse `sel_res = 'Do select name = %s' % name`\u8d4b\u503c\u8bed\u53e5\u4e0d\u4f1a\u6267\u884c is_format\u4e3atrue \u5728\u6267\u884c`return sel_res if is_format else name`\u8bed\u53e5\u65f6\u4f1a\u5f15\u7528sel_res\u53d8\u91cf \u56e0\u4e3aget_select_desc\u6267\u884c\u4e4b\u524d\u4f1a\u626b\u63cf\u4ee3\u7801\u5757\u4ee3\u7801,\u7ed1\u5b9a\u64cd\u4f5c\u4e2d\u7684sel_res\u53d8\u91cf\u5c31\u5177\u6709\u4e86\u53ef\u89c1\u6027; \u4f46\u5728return\u8bed\u53e5\u4e2d\u5f15\u7528\u4e86\u8fd8\u672a\u5b8c\u6210\u7ed1\u5b9a\u7684\u5c40\u90e8\u53d8\u91cfsel_res,\u6240\u4ee5\u62a5\u9519UnboundLocalError.. \"\"\" def get_select_desc ( name , flag , is_format = True ): if flag : sel_res = 'Do select name = %s ' % name # -- UnboundLocalError: local variable 'sel_res' referenced before assignment return sel_res if is_format else name get_select_desc ( 'Error' , False , True ) \u25b2 \u6848\u4f8b\u4e09\u5206\u6790 \u6b64\u6848\u4f8b\u4e3b\u8981\u662f\u9488\u5bf9free variable\u7684\u5f15\u7528 \"\"\" \u5728\u521b\u5efa\u95ed\u5305inner_func\u65f6,loc_var1\u548cloc_var2\u4f5c\u4e3a\u7236\u51fd\u6570outer_func\u4e2d\u7684\u4e24\u4e2alocal variable.\u5177\u6709\u53ef\u89c1\u6027. \u8fd4\u56de\u95ed\u5305\u51fd\u6570inner_func\u4e4b\u540e,\u6267\u884c\u8be5\u95ed\u5305\u51fd\u6570,\u53ef\u4ee5\u53d1\u73b0\u5728\u95ed\u5305\u4e2d\u5f15\u7528\u4e86outer_func\u4e2d\u7684local variable. \u88ab\u5f15\u7528\u7684local variable\u88ab\u79f0\u4e3a\u4e00\u4e2afree variable. \u4f46\u662f\u95ed\u5305\u4e2d\u7684free variable\u53ef\u4e0d\u53ef\u4ee5\u88ab\u5f15\u7528\u53d6\u51b3\u4e8e\u5b83\u4eec\u6709\u6ca1\u6709\u88ab\u7ed1\u5b9a\u5230\u5177\u4f53\u7684\u5bf9\u8c61,\u5f15\u7528\u6709\u4e24\u4e2a\u524d\u63d0--\u53ef\u89c1+\u6267\u884c\u7ed1\u5b9a. \"\"\" def outer_func ( out_flag ): # -- outer_func\u4e2d\u7684\u5c40\u90e8\u53d8\u91cfloc_var1\u548cloc_var2\u82e5\u88abinner_func\u5f15\u7528, # \u5219\u88ab\u5f15\u7528\u7684\u5c40\u90e8\u53d8\u91cf\u79f0\u4e3afree variable\u81ea\u7531\u53d8\u91cf if out_flag : # True loc_var1 = 'local variable with flag' else : loc_var2 = 'local variable without flag' def inner_func ( in_flag ): # -- NameError: # free variable 'loc_var2' referenced before assignment in enclosing scope # loc_var1\u53ef\u4ee5\u88ab\u5f15\u7528,loc_var2\u56e0\u4e3a\u6ca1\u6709\u5b8c\u6210\u7ed1\u5b9a\u6240\u4ee5\u4e0d\u80fd\u88ab\u5f15\u7528\uff01 return loc_var1 if in_flag else loc_var2 return inner_func clo_func = outer_func ( True ) print ( clo_func ( False )) \u25b2 \u6848\u4f8b\u56db\u5206\u6790 \"\"\" \u4ee3\u7801\u4ece\u4e0a\u5f80\u4e0b\u6267\u884c,sys\u5148\u662f\u5168\u5c40\u53d8\u91cf add_path\u51fd\u6570\u51c6\u5907\u6267\u884c,\u5148\u626b\u63cf,\u53d1\u73b0\u4e86\u7ed1\u5b9a\u64cd\u4f5cimport sys,sys\u88ab\u5b9a\u6027\u4e3a\u4e86\u5c40\u90e8\u53d8\u91cf add_path\u51fd\u6570\u771f\u6b63\u5f00\u59cb\u6267\u884c, path_list = sys.path \u5f15\u7528\u4e86\u8fd8\u672a\u5b8c\u6210\u7ed1\u5b9a\u7684\u5c40\u90e8\u53d8\u91cfsys \"\"\" import sys def add_path ( new_path ): # UnboundLocalError:local variable 'sys' referenced before assignment path_list = sys . path if new_path not in path_list : import sys sys . path . append ( new_path ) add_path ( './' ) # --- --- --- \u540c\u7406 \u7b80\u5316\u7248\u672c i = 10 def func (): # UnboundLocalError:local variable 'i' referenced before assignment print ( i ) for i in range ( 10 ): print ( i ) func () \u95ed\u5305\u51fd\u6570 \u00b6 \u51fd\u6570\u4ee3\u7801\u6267\u884c\u8fc7\u7a0b!! \u00b6 \u53c2\u8003\u94fe\u63a5: https://www.cnblogs.com/traditional/p/13544103.html https://www.icode9.com/content-1-1334531.html PyCodeObject : \u4ee3\u7801\u5bf9\u8c61, \u662f\u4e00\u6bb5\u4ee3\u7801\u7f16\u8bd1\u540e\u5f62\u6210\u7684\u5bf9\u8c61. \u5728\u51fd\u6570\u4e2d\u5bf9\u5e94\u7684\u5c31\u662f\u51fd\u6570\u4f53\u7684\u4ee3\u7801\u7f16\u8bd1\u7ed3\u679c. \u9759\u6001\u7684 PyFunctionObject : \u51fd\u6570\u5bf9\u8c61, \u5b83\u662f\u5bf9PyCodeObject\u7684\u5c01\u88c5. \u76f8\u5f53\u4e8e PyCodeObject + \u51fd\u6570def \u5b9a\u4e49\u8fd9\u4e00\u884c\u4ee3\u7801. \u5728PyCodeObject\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u51fd\u6570\u7684\u540d\u79f0\u3001\u6240\u5c5e\u6a21\u5757\u3001\u53c2\u6570\u9ed8\u8ba4\u503c\u3001globals\u3001builtins. PyFrameObject : \u51fd\u6570\u6267\u884c\u65f6\u5bf9\u5e94\u7684\u6808\u5e27, \u5b83\u7528\u4e8e\u627f\u8f7dPyFunctionObject\u5728\u6267\u884c\u65f6\u6240\u9700\u8981\u7684\u52a8\u6001\u4fe1\u606f. \u52a8\u6001\u7684 \u5305\u62ec\u51fd\u6570\u7684\u5b9e\u53c2\u3001\u51fd\u6570\u6267\u884c\u65f6\u6240\u9700\u7684\u6808\u3001\u5168\u5c40\u53d8\u91cf\u3001\u5c40\u90e8\u53d8\u91cf\u3001\u5f53\u524d\u6267\u884c\u5230\u7684\u6307\u4ee4\u7684\u7f16\u53f7. # -- \u865a\u62df\u673a\u4ece\u4e0a\u5230\u4e0b\u6267\u884c\u5b57\u8282\u7801 name = \"\u590f\u8272\u796d\" age = - 1 # pia, \u51fa\u73b0\u4e86\u4e00\u4e2adef,\u6765\u5230\u4e86\u4e00\u4e2a\u65b0\u7684\u4ee3\u7801\u5757,\u4f1a\u5bf9\u5e94\u521b\u5efa\u4e00\u4e2a\u65b0\u7684PyCodeObject\u5bf9\u8c61 # \u63a5\u7740\u4f1a\u5c06PyCodeObject\u5bf9\u8c61\u5c01\u88c5\u6210PyFunctionObject # \u5f53\u6267\u884c\u5b8cdef\u8bed\u53e5\u4e4b\u540e,\u4e00\u4e2a\u51fd\u6570\u5c31\u88ab\u521b\u5efa\u4e86,\u653e\u5728\u5f53\u524d\u7684local\u7a7a\u95f4\u4e2d # \u6ce8\u610f:PyFunctionObject\u5728\u6267\u884c\u5230\u51fd\u6570\u5b9a\u4e49\u6307\u4ee4MAKE_FUNCTION\u65f6\u751f\u6210,\u751f\u6210\u540e\u662f\u9759\u6001\u4e0d\u53d8\u7684. # \u4e5f\u5c31\u662f\u8bf4,\u4e00\u4e2a\u51fd\u6570\u4e00\u65e6\u5b9a\u4e49,\u5176\u51fd\u6570\u540d\u53c2\u6570\u9ed8\u8ba4\u503c\u3001\u51fd\u6570\u7ed1\u5b9a\u7684globals\u548cbuiltins\u4fe1\u606f(\u90fd\u662f\u5c01\u88c5\u7684\u5185\u5bb9)\u4e0d\u518d\u53d8\u5316. def foo (): pass # \u51fd\u6570\u7684\u7c7b\u578b\u662f<class 'function'>, \u5f53\u7136\u8fd9\u4e2a\u7c7bPython\u6ca1\u6709\u66b4\u9732\u7ed9\u6211\u4eec # \u5f53\u6211\u4eec\u8c03\u7528\u51fd\u6570foo\u7684\u65f6\u5019, \u4f1a\u4ecelocal\u7a7a\u95f4\u4e2d\u53d6\u51fa\u7b26\u53f7\"foo\"\u5bf9\u5e94\u7684PyFunctionObject\u5bf9\u8c61 # \u7136\u540e\u6839\u636e\u8fd9\u4e2aPyFunctionObject\u5bf9\u8c61\u521b\u5efaPyFrameObject\u5bf9\u8c61, \u4e5f\u5c31\u662f\u4e3a\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u6808\u5e27 (\u547d\u540d\u7a7a\u95f4) # \u7136\u540e\u5c06\u6267\u884c\u6743\u4ea4\u7ed9\u65b0\u521b\u5efa\u7684\u6808\u5e27, \u5728\u65b0\u521b\u5efa\u7684\u6808\u5e27\u4e2d\u6267\u884c\u5b57\u8282\u7801 # PyFrameObject\u662f\u52a8\u6001\u53ef\u53d8\u7684\uff0c\u5176\u5305\u542b\u4e24\u5c42\u542b\u4e49: # 1>\u5bf9\u540c\u4e00\u4e2a\u51fd\u6570\u7684\u6bcf\u4e00\u6b21\u8c03\u7528,\u90fd\u4f1a\u751f\u6210\u4e00\u4e2a\u65b0\u7684PyFrameObject; # 2>\u6bcf\u4e2aPyFrameObject\u5728\u5176\u751f\u547d\u5468\u671f\u5185\u662f\u4e0d\u65ad\u53d1\u751f\u53d8\u5316\u7684,PyFrameObject\u627f\u8f7d\u7740\u51fd\u6570\u6267\u884c\u65f6\u6240\u9700\u8981\u7684\u6240\u6709\u52a8\u6001\u4fe1\u606f. print ( locals ()) # {......, 'foo': <function foo at 0x000001B299FAF3A0>} \u4f20\u7edf\u51fd\u6570 vs \u95ed\u5305 \u00b6 \u4e0d\u4e25\u8c28\u7684\u89e3\u91ca( \u6700 \u5e38\u89c1\u7684\u95ed\u5305): \u51fd\u6570\u5d4c\u5957, \u5185\u90e8\u51fd\u6570\u5f15\u7528\u4e86\u5916\u90e8\u51fd\u6570\u7684\u53c2\u6570\u6216\u53d8\u91cf, \u5e76\u5c06\u8fd9\u4e2a\u5185\u90e8\u51fd\u6570\u8fd4\u56de. \u8fd4\u56de\u7684\u5185\u90e8\u51fd\u6570\u5c31\u79f0\u4e3a\u95ed\u5305\u51fd\u6570! \"\u95ed\"\u4ee3\u8868\u51fd\u6570\u662f\u5185\u90e8\u7684,\"\u5305\"\u4ee3\u8868\u51fd\u6570\u5916\u2019\u5305\u88f9\u2019\u7740\u5bf9\u5916\u5c42\u4f5c\u7528\u57df\u7684\u5f15\u7528.. \u56e0\u800c\u65e0\u8bba\u5728\u4f55\u5904\u8c03\u7528\u95ed\u5305\u51fd\u6570,\u4f7f\u7528\u7684\u4ecd\u7136\u662f\u5305\u88f9\u5728\u5176\u5916\u5c42\u7684\u53d8\u91cf! \u95ed\u5305\u4e0d\u662f\u4f20\u7edf\u610f\u4e49\u4e0a\u5b9a\u4e49\u7684\u51fd\u6570,\u6211\u4eec\u6240\u8ba4\u8bc6\u7684\u51fd\u6570\u5927\u6982\u662f\u8fd9\u6837\u7684: 1 > \u7a0b\u5e8f\u88ab\u52a0\u8f7d\u5230\u5185\u5b58\u6267\u884c\u65f6 , \u51fd\u6570\u5b9a\u4e49\u7684\u4ee3\u7801\u88ab\u5b58\u653e\u5728\u4ee3\u7801\u6bb5\u4e2d 2 > \u51fd\u6570\u88ab\u8c03\u7528\u65f6 , \u4f1a\u5728\u6808\u4e0a\u521b\u5efa\u5176\u6267\u884c\u73af\u5883 , \u521d\u59cb\u5316\u5176\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\u548c\u5916\u90e8\u4f20\u5165\u7684\u5f62\u53c2 -- scope \u6808\u533a 3 > \u5f53\u51fd\u6570\u6267\u884c\u5b8c\u6210\u5e76\u8fd4\u56de\u51fd\u6570\u7ed3\u679c\u540e -- return \u51fd\u6570\u6808\u5e27\u4fbf\u4f1a\u88ab\u9500\u6bc1\u6389 , \u51fd\u6570\u4e2d\u7684\u4e34\u65f6\u53d8\u91cf\u4ee5\u53ca\u5b58\u50a8\u7684\u4e2d\u95f4\u8ba1\u7b97\u7ed3\u679c\u90fd\u4e0d\u4f1a\u4fdd\u7559 -- \u5185\u5b58\u56de\u6536 4 > \u4e0b\u6b21\u8c03\u7528\u65f6\u552f\u4e00\u53d1\u751f\u53d8\u5316\u7684\u5c31\u662f\u51fd\u6570\u4f20\u5165\u7684\u5f62\u53c2\u53ef\u80fd\u4f1a\u4e0d\u4e00\u6837 , \u51fd\u6570\u6808\u5e27\u4f1a\u91cd\u65b0\u521d\u59cb\u5316\u51fd\u6570\u7684\u6267\u884c\u73af\u5883 def func ( a ): b = 1 return a + b func ( 2 ) \u7ef4\u57fa\u767e\u79d1\u4e2d\u5bf9\u95ed\u5305\u7684\u89e3\u91ca: \"\u4e00\u4e2a\u51fd\u6570\u5b9a\u4e49\u4e2d\u5f15\u7528\u4e86\u51fd\u6570\u5916\u5b9a\u4e49\u7684\u53d8\u91cf, \u8be5\u51fd\u6570\u53ef\u4ee5\u5728\u5176\u5b9a\u4e49\u73af\u5883\u5916\u88ab\u6267\u884c.\" \u4ffa\u6597\u80c6\u4e3e\u4e2a\u6817\u5b50\u8f85\u52a9\u5206\u6790\u4e0b, A\u5d4c\u5957B. B\u5f15\u7528A\u7684\u5c40\u90e8\u53d8\u91cf, \u5728A\u7684\u751f\u547d\u5468\u671f\u7ed3\u675f\u540e , \u8be5\u53d8\u91cf\u624d\u79f0\u4f5c\u81ea\u7531\u53d8\u91cf,\u5185\u90e8\u51fd\u6570B\u624d\u79f0\u4f5c\u95ed\u5305\u51fd\u6570; B\u51fd\u6570 \u53ef\u4ee5 \u5728\u5916\u90e8\u51fd\u6570A\u4e4b\u5916\u8fd0\u884c. \u6210\u4e3a\u95ed\u5305\u51fd\u6570\u7684 \u4e24\u4e2a\u524d\u63d0\u6761\u4ef6 : 1> \u51fd\u6570\u5d4c\u5957; 2> \u5185\u90e8\u51fd\u6570\u5f15\u7528\u5916\u90e8\u51fd\u6570( E \u5185\u5d4c\u4f5c\u7528\u57df )\u4e2d\u7684\u53c2\u6570\u6216\u53d8\u91cf.. \u6210\u4e3a\u95ed\u5305\u51fd\u6570\u7684 \u5fc5\u8981\u89e6\u53d1\u6761\u4ef6 : \u5916\u90e8\u51fd\u6570\u6267\u884c\u5b8c\u6210,\u751f\u547d\u5468\u671f\u7ed3\u675f..\u5185\u90e8\u51fd\u6570\u624d\u53ef\u79f0\u4e3a\u95ed\u5305\u51fd\u6570. \u6210\u4e3a\u95ed\u5305\u51fd\u6570\u7684 \u4e0d\u5fc5\u8981\u6761\u4ef6 : \u4e00\u65e6\u5916\u90e8\u51fd\u6570\u5c06\u5185\u90e8\u51fd\u6570\u4f5c\u4e3a\u51fd\u6570\u7ed3\u679c\u8fd4\u56de..\u95ed\u5305\u51fd\u6570\u5c31\u53ef\u4ee5\u5728\u5916\u90e8\u51fd\u6570\u4e4b\u5916\u8fd0\u884c \u95ed\u5305\u521d\u63a2 \u00b6 # -- demo.py def outer_func (): my_list = [] def inner_func ( name ): my_list . append ( len ( my_list ) + 1 ) print ( ' %s my_list = %s ' % ( name , my_list )) return inner_func closure_1 = outer_func () closure_1 ( 'cls1_instance_1' ) # -- cls1_instance_1 my_list = [1] closure_1 ( 'cls1_instance_2' ) # -- cls1_instance_2 my_list = [1, 2] closure_1 ( 'cls1_instance_3' ) # -- cls1_instance_3 my_list = [1, 2, 3] closure_2 = outer_func () closure_2 ( 'cls2_instance_1' ) # -- cls2_instance_1 my_list = [1] closure_1 ( 'cls1_instance_4' ) # -- cls1_instance_4 my_list = [1, 2, 3, 4] closure_2 ( 'cls2_instance_2' ) # -- cls2_instance_2 my_list = [1, 2] \"\"\" \u8c03\u7528\u4e24\u6b21outer_func,\u5206\u522breturn\u8fd4\u56de\u4e86closure_1\u548cclosure_2\u4e24\u4e2a\u95ed\u5305\u51fd\u6570. \u95ed\u5305\u51fd\u6570\u8ddf\u666e\u901a\u51fd\u6570\u7684\u8c03\u7528\u6ca1\u5565\u533a\u522b,\u53ef\u4ee5\u5bf9\u95ed\u5305\u51fd\u6570\u591a\u6b21\u8c03\u7528. 1> \u89c2\u5bdf\u95ed\u5305\u51fd\u6570closure_1\u7684\u591a\u6b21\u8c03\u7528,my_list\u5728\u53d8\u5316: \u5bf9\u540c\u4e00\u4e2a\u95ed\u5305\u51fd\u6570\u591a\u6b21\u8c03\u7528,\u6bcf\u6b21\u8c03\u7528\u5bf9\u5176\u81ea\u7531\u53d8\u91cf\u7684\u4fee\u6539\u4f1a\u88ab\u4f20\u9012\u5230\u4e0b\u4e00\u6b21\u7684\u8c03\u7528.(\u6709\u70b9\u9ed8\u8ba4\u53c2\u6570\u90a3\u5473) 2> \u53ef\u4ee5\u89c2\u5bdf\u95ed\u5305\u51fd\u6570closure_1\u7684\u8c03\u7528\u548c\u95ed\u5305\u51fd\u6570closure_2\u7684\u8c03\u7528,\u5e76\u4e0d\u4f1a\u4e92\u76f8\u5e72\u6270. \u95ed\u5305\u4e2d\u5f15\u7528\u7684\u81ea\u7531\u53d8\u91cf\u53ea\u548c\u5177\u4f53\u7684\u95ed\u5305\u6709\u5173\u8054. \"\"\" \u51fd\u6570\u5f00\u59cb\u6267\u884c,\u4f1a\u5148\u626b\u63cf\u51fd\u6570\u4f53\u7684\u4ee3\u7801,\u5305\u62ec\u5185\u90e8\u51fd\u6570inner_func\u7684\u4ee3\u7801,\u8bb0\u5f55inner_func\u4e2d\u7684\u5f15\u7528\u53d8\u91cf. \u8bb0\u5f55\u7684\u5f15\u7528\u53d8\u91cf\u5e94\u6ee1\u8db3\u4e24\u70b9,\u5176\u4e00,\u5728inner_func\u91cc\u672a\u5b9a\u4e49,\u5176\u4e8c,\u5728outer_func\u4e2d\u662f\u53ef\u89c1\u7684. \u5f53outer_func\u51fd\u6570\u7ed3\u675f,inner_func\u4ece\u5185\u90e8\u51fd\u6570\u8fdb\u5316\u6210\u4e3a\u95ed\u5305\u51fd\u6570.. my_list\u4ece\u5c40\u90e8\u53d8\u91cf\u53d8\u4e3a\u81ea\u7531\u53d8\u91cf. \u95ed\u5305\u4e2d\u5f15\u7528\u7684\u7236\u51fd\u6570\u4e2d\u7684\u5c40\u90e8\u53d8\u91cf\u662f\u4e00\u4e2a\u81ea\u7531\u53d8\u91cf, \u81ea\u7531\u53d8\u91cf\u5b58\u5230inner_func\u7684cell\u5bf9\u8c61\u4e2d \u81ea\u7531\u53d8\u91cf\u7684\u5b58\u50a8 \u00b6 Q: \u51fd\u6570inner\u5982\u4f55\u5b58\u50a8\u53d8\u91cfvar\u5462? A: inner.__code__.co_freevars \u8bb0\u5f55\u4e86\u81ea\u7531\u53d8\u91cf\u7684\u540d\u5b57 \u5728\u51fd\u6570\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u5185\u90e8\u51fd\u6570\u4f1a\u6709\u4e00\u4e2a\u95ed\u5305\u7684\u7279\u6b8a\u5c5e\u6027 __closure__ , \u82e5\u5185\u90e8\u51fd\u6570\u4e2d\u4e0d\u5305\u542b\u5bf9\u5916\u90e8\u51fd\u6570\u53d8\u91cf\u7684\u5f15\u7528, __closure__ \u5c5e\u6027\u662f\u4e0d\u5b58\u5728\u7684, \u8be5\u5c5e\u6027\u8bb0\u5f55\u4e86\u81ea\u7531\u53d8\u91cf\u7684\u503c,\u5b83\u662f\u4e00\u4e2a\u7531cell\u5bf9\u8c61\u7ec4\u6210\u7684\u5143\u7ec4 g_var = 1 def outer (): e_var_x = [] e_var_y = 6 def inner (): e_var_x . append ( g_var + e_var_y ) print ( e_var_x , e_var_y ) return inner a = outer () # ('e_var_x', 'e_var_y') -- inner\u5f15\u7528\u4e86\u5168\u5c40\u53d8\u91cfg_var,\u4f46g_var\u4e0d\u7b97\u4f5c\u81ea\u7531\u53d8\u91cf! print ( a . __code__ . co_freevars ) # (<cell at 0x7fe0a0e7cac0: list object at 0x7fe0a0e8b940>, <cell at 0x7fe0a0e7c6a0: int object at 0x100aceb60>) print ( a . __closure__ ) print ( a . __closure__ [ 0 ] . cell_contents ) # [] -- \u6b64\u65f6\u95ed\u5305\u8fd8\u6ca1\u8fd0\u884c,\u81ea\u7531\u53d8\u91cf\u7684\u503c\u6700\u521d\u72b6\u6001 print ( a . __closure__ [ 1 ] . cell_contents ) # 6 a () # [7] 6 g_var = 8 a () # [7, 14] 6 -- \u540c\u4e00\u4e2a\u95ed\u5305\u51fd\u6570\u591a\u6b21\u8fd0\u884c,\u5bf9\u81ea\u7531\u53d8\u91cf\u7684\u4fee\u6539\u4f1a\u4f20\u9012 [7]->[7, 14] print ( a . __closure__ [ 0 ] . cell_contents ) # [7,14] print ( a . __closure__ [ 1 ] . cell_contents ) # 6 g_var = 11 b = outer () b () # [17] 6 -- \u95ed\u5305a\u3001b\u5f15\u7528\u7684\u81ea\u7531\u53d8\u91cf\u4e92\u4e0d\u5e72\u6270 id\u4e0d\u540c\u7f18\u7531 \u00b6 \u8865\u5145: \u8bf7\u89e3\u91ca\u4e0b\u9762\u7684id\u76f8\u540c\u4e0e\u4e0d\u540c\u7684\u7f18\u7531.. \u8fd9\u4e2a\u95ee\u9898\u7ea0\u7ed3\u4e86\u6211\u4e00\u5929!!!(\u2229_\u2229) \u5806\u533a\u6c34\u592a\u6df1,\u9053\u884c\u592a\u6d45,\u52ff\u6d89 ` Two objects with non - overlapping lifetimes may have the same id () value . ` \u4e24\u4e2a\u751f\u5b58\u5468\u671f\u4e0d\u76f8\u4ea4\u7684\u4e0d\u540c\u5bf9\u8c61 , \u53ef\u80fd\u6709\u4e00\u4e2a\u5730\u5740 . \u5224\u65ad\u5bf9\u8c61\u76f8\u540c\u4e0e\u5426\u7528is , \u4e0d\u8981\u7528id\u53bb\u6bd4\u8f83 , is\u7531\u4e8e\u4e0d\u80fd\u88ab\u91cd\u8f7d , \u56e0\u6b64\u4e0d\u7528\u67e5\u54c8\u5e0c\u8868 , \u4f1a\u66f4\u5feb\u4e00\u4e9b !!! \"\"\" 1> \u6bcf\u6b21\u6267\u884cdef\u8bed\u53e5,\u90fd\u4f1a\u751f\u6210\u4e00\u4e2a\u4e0d\u540c\u7684PyFunctionObjec\u5bf9\u8c61 \u6bcf\u6b21\u8c03\u7528\u6267\u884c\u51fd\u6570,\u90fd\u4f1a\u751f\u6210\u4e00\u4e2a\u4e0d\u540c\u7684PyFrameObjec\u5bf9\u8c61,\u4e5f\u5c31\u662f\u547d\u540d\u7a7a\u95f4 2> outer\u51fd\u6570\u6267\u884c\u5b8c\u540e,\u547d\u540d\u7a7a\u95f4\u91cc\u7684\u53d8\u91cf\u540d\u4f1a\u4e0e\u5177\u4f53\u7684\u5bf9\u8c61\u65ad\u5f00\u8fde\u63a5 \u91ca\u653e\u547d\u540d\u7a7a\u95f4 \u82e5\u5806\u533a\u7684\u5bf9\u8c61\u5f15\u7528\u8ba1\u6570\u4e3a0,\u4f1a\u8fdb\u884cgc\u56de\u6536 \u4e5f\u5c31\u662f\u8bf4,outer\u51fd\u6570\u6267\u884c\u5b8c,inner\u51fd\u6570/\u53d8\u91cf\u540d\u4e0ePyFunctionObject\u65ad\u5f00\u8fde\u63a5\u4e86 `print(id(a), id(b))` \u503c\u76f8\u540c \u8fd4\u56de\u4e86PyFunctionObject\u5bf9\u8c61\u5e76\u8d4b\u503c\u7ed9\u4e86\u67d0\u4e2a\u5168\u5c40\u53d8\u91cf So,\u5806\u533a\u4e2d\u7684PyFunctionObject\u5bf9\u8c61\u5f97\u4ee5\u4fdd\u5b58,\u5f15\u7528\u8ba1\u6570\u4e3a1,\u4e0d\u4f1a\u88abgc\u56de\u6536 \u8c03\u7528\u6267\u884c\u4e24\u6b21outer\u51fd\u6570,\u5728outer\u51fd\u6570\u7684\u51fd\u6570\u4f53\u91cc\u6267\u884c\u4e86\u4e24\u6b21\u76f8\u540c\u7684def\u8bed\u53e5 def\u8bed\u53e5\u76f8\u540c,\u4f46\u90fd\u4f1a\u751f\u6210\u4e00\u4e2a\u4e0d\u540c\u7684PyFunctionObjec\u5bf9\u8c61 `print(id(outer()), id(outer()))` \u503c\u4e0d\u540c \u4f60\u4f1a\u53d1\u73b0,\u8fd9\u91cc\u540c\u6837\u8c03\u7528\u6267\u884c\u4e86\u4e24\u6b21outer\u51fd\u6570,\u5728outer\u51fd\u6570\u7684\u51fd\u6570\u4f53\u91cc\u6267\u884c\u4e86\u4e24\u6b21\u76f8\u540c\u7684def\u8bed\u53e5 \u4e3a\u5565id\u76f8\u540c\u5462\uff1f\u56e0\u4e3a\u7b2c\u4e00\u6b21\u7684PyFunctionObjec\u5bf9\u8c61\u7684\u5f15\u7528\u8ba1\u6570\u4e3a0,\u4f18\u5316\u673a\u5236,\u7b2c\u4e8c\u6b21\u7684def\u76f4\u63a5\u62ff\u6765\u7528 \"\"\" print ( id ( a ), id ( b )) # 140650857597392 140650857597248 print ( id ( outer ()), id ( outer ())) # 140650857596672 140650857596672 # -- \u4e3e\u4e2a\u7b80\u5355\u4f8b\u5b50\u8f85\u52a9\u7406\u89e3 \u6a21\u62df`def inner`\u751f\u6210PyFunctionObjec\u5bf9\u8c61 def func (): pass print ( id ( func )) # 140402907130320 del func def func (): pass print ( id ( func )) # 140402907130320 def func (): pass print ( id ( func )) # 140690837776848 temp = func # !!!!!! del func def func (): pass print ( id ( func )) # 140690837776704 \u95ed\u5305\u9677\u9631 \u00b6 \u8fd4\u56de\u95ed\u5305\u4e2d\u4e0d\u8981\u5f15\u7528\u4efb\u4f55\u5faa\u73af\u53d8\u91cf, \u6216\u8005\u540e\u7eed\u4f1a\u53d1\u751f\u53d8\u5316\u7684\u53d8\u91cf \u56e0\u4e3a\u5728\u8fd4\u56de\u95ed\u5305\u524d,\u95ed\u5305\u4e2d\u5f15\u7528\u7684\u7236\u51fd\u6570\u4e2d\u5b9a\u4e49\u53d8\u91cf\u7684\u503c\u53ef\u80fd\u4f1a\u53d1\u751f\u4e0d\u662f\u6211\u4eec\u671f\u671b\u7684\u53d8\u5316 \u81ea\u7531\u53d8\u91cf\u7684\u540d\u79f0\u89e3\u6790\u53d1\u751f\u4e8e\u8fd0\u884c\u65f6\u800c\u4e0d\u662f\u7f16\u8bd1\u65f6 i = 10 def f (): print ( i ) i = 42 f () \u7a0b\u5e8f\u7684\u7ed3\u679c\u5e76\u4e0d\u662f\u6211\u4eec\u60f3\u8c61\u7684\u7ed3\u679c0,1,4. \u5b9e\u9645\u7ed3\u679c\u5168\u90e8\u662f4. \u4e3a\u5565\uff1f \"\"\" \u5728\u51fd\u6570outer\u8fd4\u56de\u524d\u5176\u5185\u90e8\u5b9a\u4e49\u7684\u51fd\u6570\u5e76\u4e0d\u662f\u95ed\u5305\u51fd\u6570,\u53ea\u662f\u4e00\u4e2a\u5185\u90e8\u5b9a\u4e49\u7684\u51fd\u6570 \u8fd9\u4e2a\u5185\u90e8\u51fd\u6570\u5f15\u7528\u7684\u7236\u51fd\u6570\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\u4e5f\u4e0d\u662f\u81ea\u7531\u53d8\u91cf,\u800c\u53ea\u662f\u5f53\u524dblock\u4e2d\u7684\u4e00\u4e2alocal variable \u5728\u8fd4\u56de\u95ed\u5305\u5217\u8868clo_list\u4e4b\u524dfor\u5faa\u73af\u7684\u53d8\u91cf\u7684\u503c\u5df2\u7ecf\u53d1\u751f\u6539\u53d8\u4e86,\u800c\u4e14\u8fd9\u4e2a\u6539\u53d8\u4f1a\u5f71\u54cd\u5230\u6240\u6709\u5f15\u7528\u5b83\u7684\u5185\u90e8\u5b9a\u4e49\u7684\u51fd\u6570 \u51fd\u6570outer\u4e00\u65e6\u8fd4\u56de,\u5176\u5185\u90e8\u5b9a\u4e49\u7684\u51fd\u6570inner\u4fbf\u662f\u4e00\u4e2a\u95ed\u5305,\u5176\u4e2d\u5f15\u7528\u7684\u53d8\u91cfi\u6210\u4e3a\u4e00\u4e2a\u53ea\u548c\u5177\u4f53\u95ed\u5305\u76f8\u5173\u7684\u81ea\u7531\u53d8\u91cf.. \"\"\" def outer (): clo_list = [] for i in range ( 3 ): # -- \u7b49\u540c\u4e8einner = lambda : i * i def inner (): return i * i clo_list . append ( inner ) return clo_list clo1 , clo2 , clo3 = outer () print ( clo1 ()) # 4 print ( clo2 ()) # 4 print ( clo3 ()) # 4 # -- \u8be5\u4ee3\u7801\u4e0e\u4e0a\u9762\u7684\u5206\u6790\u903b\u8f91\u662f\u4e00\u6837\u7684 def outer (): clo_list = [] m = 0 for i in range ( 3 ): def inner (): return m * m clo_list . append ( inner ) m = 3 return clo_list clo1 , clo2 , clo3 = outer () print ( clo1 (), clo2 (), clo3 ()) # 9 9 9 # -- \u6b63\u89e3 # outer\u7ed3\u675f,\u81ea\u7531\u53d8\u91cfi\u4f1a\u4f5c\u4e3a\u4e00\u4e2acell\u5bf9\u8c61\u5b58\u50a8\u5728inner\u51fd\u6570\u7684__closure__\u5c5e\u6027\u91cc # \u4e0d\u4f7f\u7528\u81ea\u7531\u53d8\u91cf\u5373\u53ef,\u4f7f\u7528\u9ed8\u8ba4\u53c2\u6570\u89e3\u51b3 \u9ed8\u8ba4\u5f62\u53c2\u4fdd\u5b58\u4e86\u5f53\u524d\u7684i\u503c,\u5728\u5bf9\u5e94\u95ed\u5305\u4e2d\u4ee5\u5c40\u90e8\u53d8\u91cf\u4f53\u73b0 def outer (): clo_list = [] for i in range ( 3 ): # -- \u6dfb\u52a0\u4e00\u4e2a\u9ed8\u8ba4\u51fd\u6570,\u5176\u503c\u8bbe\u7f6e\u4e3a\u6bcf\u6b21\u5faa\u73af\u7684i\u503c # \u5bf9\u5f62\u53c2\u7684\u4e0d\u540c\u8d4b\u503c\u4f1a\u4fdd\u7559\u5728\u5f53\u524d\u51fd\u6570\u5b9a\u4e49\u4e2d,\u4e0d\u4f1a\u5bf9\u5176\u4ed6\u51fd\u6570\u6709\u5f71\u54cd inner = lambda _i = i : _i * _i clo_list . append ( inner ) return clo_list nonlocal \u00b6 nonlocal\u5173\u952e\u5b57 \u5b9e\u73b0\u5728\u5bf9\u81ea\u7531\u53d8\u91cf\u7684\u5f15\u7528\u540c\u65f6,\u4fee\u6539\u81ea\u7531\u53d8\u91cf # -- \u8ba1\u7b97\u5e73\u5747\u503c def make_averager (): total = 0 # -- \u5143\u7d20\u503c\u603b\u8ba1 count = 0 # -- \u5171\u591a\u5c11\u5143\u7d20\u53c2\u4e0e \"\"\" `nonlocal count, total`\u8bed\u53e5,\u6307\u660eaverager\u4e2d\u4f7f\u7528\u7684count\u548ctotal\u53d8\u91cf\u662f\u5728\u5f15\u7528make_averager\u4e2d\u7684\u53d8\u91cf count = count + 1 \u53f3\u4fa7\u5f15\u7528\u5185\u5d4c\u4f5c\u7528\u57df\u7684count,\u5de6\u4fa7\u5bf9\u5185\u5d4c\u4f5c\u7528\u57df\u4e2d\u7684count\u91cd\u65b0\u8d4b\u503c(\u7ed1\u5b9a\u5bf9\u8c61) \u8fd9\u6837\u7684\u8bdd\u6709\u6548\u7684\u907f\u514d\u4e86UnboundLocalError\u62a5\u9519 \u5f53make_averager\u8fd4\u56de\u540e,count\u548ctotal\u53d8\u91cf\u5c31\u53d8\u6210\u4e86\u81ea\u7531\u53d8\u91cf! \u6ce8\u610f\u524d\u9762\u6848\u4f8b\u91cc\u63d0\u5230\u8fc7\u7684\u4e00\u70b9:\u540c\u4e00\u4e2a\u95ed\u5305\u51fd\u6570\u7684\u591a\u6b21\u8c03\u7528\u53ef\u4ee5\u5c06\u81ea\u7531\u53d8\u91cf\u7684\u4fee\u6539\u8fdb\u884c\u4f20\u9012! \u81ea\u7531\u53d8\u91cf\u82e5\u662f\u53ef\u53d8\u7c7b\u578b,eg:\u5217\u8868 \u95ed\u5305\u51fd\u6570\u53ef\u4ee5\u901a\u8fc7append\u7b49\u5185\u7f6e\u51fd\u6570\u4fee\u6539 \u82e5\u81ea\u7531\u53d8\u91cf\u662f\u4e0d\u53ef\u53d8\u7c7b\u578b eg:\u6570\u5b57 \u95ed\u5305\u51fd\u6570\u4f7f\u7528\u8d4b\u503c\u8bed\u53e5\u6765\u6539\u53d8 \u76f8\u5f53\u4e8e\u5728\u95ed\u5305\u51fd\u6570\u5185\u90e8\u521b\u5efa\u4e2a\u540c\u540d\u7684\u5c40\u90e8\u53d8\u91cf,\u5c31\u4e0d\u4f1a\u4f7f\u7528\u81ea\u7531\u53d8\u91cf\u5566\u3001 nonlocal\u5173\u952e\u5b57\u53ef\u4ee5 \u5b9e\u73b0\u5728\u5bf9\u81ea\u7531\u53d8\u91cf\u7684\u5f15\u7528\u540c\u65f6,\u4fee\u6539\u81ea\u7531\u53d8\u91cf \"\"\" def averager ( new_value ): nonlocal count , total count += 1 total += new_value return total / count return averager avg = make_averager () print ( avg ( 10 )) print ( \"---:> \" , avg . __closure__ [ 0 ] . cell_contents , avg . __closure__ [ 1 ] . cell_contents ) print ( avg ( 11 )) print ( \"---:> \" , avg . __closure__ [ 0 ] . cell_contents , avg . __closure__ [ 1 ] . cell_contents ) \"\"\" 10.0 ---:> 1 10 10.5 ---:> 2 21 \"\"\" # --- --- --- def outer (): x = 5 def inner (): nonlocal x x += 1 return x return inner () # -- \u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u786e\u5b9a\u7684\u503c,\u4e0d\u662f\u51fd\u6570!! a = outer () print ( a ) # 6 print ( a ) # 6 b = outer () print ( b ) # 6 print ( b ) # 6 \u4e3a\u51fd\u6570\u4f53\u4f20\u503c \u00b6 \u53c2\u6570\u5f62\u5f0f \u00b6 import requests \"\"\" \u2605 --\u4f7f\u7528\u53c2\u6570\u7684\u5f62\u5f0f \"\"\" def get ( url = 'https://www.baidu.com/' ): res = requests . get ( url ) if res . status_code == 200 : print ( res . text ) # -- \u591a\u6b21\u8c03\u7528,\u6bcf\u6b21\u90fd\u5199url\u5f88\u9ebb\u70e6 get ( 'https://www.python.org' ) get ( 'https://www.python.org' ) # -- \u9ed8\u8ba4\u53c2\u6570\u5e94\u7528\u573a\u666f:\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u90fd\u662f\u8fd9\u4e2a\u503c get () get () \u5305\u7ed9\u51fd\u6570/\u60f0\u6027\u8ba1\u7b97 \u00b6 \"\"\" \u2605 --\u5305\u7ed9\u51fd\u6570 \u5e94\u7528\u9886\u57df:\u5ef6\u8fdf\u8ba1\u7b97 \"\"\" def outer ( url ): def get (): res = requests . get ( url ) if res . status_code == 200 : print ( res . text ) return get baidu = outer ( 'https://www.baidu.com/' ) # -- \u5c06\u6307\u5b9a\u7684url\u5730\u5740\u5305\u7ed9\u4e86\u51fd\u6570 python = outer ( 'https://www.python.org' ) baidu () baidu () python () python () \u51fd\u6570\u88c5\u9970\u5668 \u00b6 \u88c5\u9970\u5668\u662f\u7528\u6765\u4e3a\u88ab\u88c5\u9970\u5bf9\u8c61\u6dfb\u52a0\u989d\u5916\u529f\u80fd\u7684\u5de5\u5177/\u51fd\u6570 \u88c5\u9970\u5668\u548c\u88ab\u88c5\u9970\u8005\u90fd\u53ef\u4ee5\u662f\u4efb\u610f\u53ef\u8c03\u7528\u7684\u5bf9\u8c61. \u5f00\u653e\u5c01\u95ed\u539f\u5219 \u00b6 \u8f6f\u4ef6\u7684\u7ef4\u62a4\u5e94\u8be5\u9075\u5faa \u5f00\u653e\u5c01\u95ed \u539f\u5219\uff01\u5373\u8f6f\u4ef6\u4e00\u65e6\u4e0a\u7ebf\u4e4b\u540e\u5bf9\u4fee\u6539\u6e90\u4ee3\u7801\u662f\u5c01\u95ed\u7684,\u5bf9\u6269\u5c55\u529f\u80fd\u662f\u5f00\u653e\u7684. \u56e0\u800c\u88c5\u9970\u5668\u7684\u5b9e\u73b0\u5fc5\u987b\u9075\u5faa\u4e24\u5927\u539f\u5219: (\u5728\u9075\u5faa1\u548c2\u7684\u524d\u63d0\u4e0b\u4e3a\u88ab\u88c5\u9970\u5bf9\u8c61\u6dfb\u52a0\u65b0\u529f\u80fd) 1.\u4e0d\u4fee\u6539\u88ab\u88c5\u9970\u5bf9\u8c61\u7684\u6e90\u4ee3\u7801 2.\u4e0d\u4fee\u6539\u88ab\u88c5\u9970\u5bf9\u8c61\u7684\u8c03\u7528\u65b9\u5f0f \u9700\u6c42: \u7ed9index\u51fd\u6570\u52a0\u4e0a\u7edf\u8ba1\u8fd0\u884c\u65f6\u95f4\u7684\u529f\u80fd.. import time def index (): print ( 'welcome to index!' ) time . sleep ( 3 ) \"\"\" \u2605 --\u65b9\u6848\u4e00: \u6539\u53d8\u4e86\u6e90\u4ee3\u7801 \"\"\" def index (): start = time . time () print ( 'welcome to index!' ) time . sleep ( 3 ) stop = time . time () print ( f 'run time is { stop - start } ' ) index () \"\"\" \u2605 --\u65b9\u6848\u4e8c: \u4e0d\u5177\u5907\u901a\u7528\u6027,\u7ed9\u5176\u4ed6\u51fd\u6570\u6dfb\u52a0\u6b64\u529f\u80fd\u4f1a\u91cd\u590d\u5199\u4ee3\u7801 \"\"\" def index (): print ( 'welcome to index!' ) time . sleep ( 3 ) start = time . time () index () stop = time . time () print ( f 'run time is { stop - start } ' ) \"\"\" \u2605 --\u65b9\u6848\u4e09: \u89e3\u51b3\u4e86\u91cd\u590d\u5199,\u4f46\u6539\u53d8\u4e86\u88ab\u88c5\u9970\u5bf9\u8c61\u7684\u8c03\u7528\u65b9\u5f0f \"\"\" def timmer ( func ): start = time . time () func () stop = time . time () print ( f 'run time is { stop - start } ' ) timmer ( index ) \"\"\" \u2605 --\u65b9\u6848\u56db: \u4f7f\u7528\u88c5\u9970\u5668 \"\"\" def timmer ( func ): def wrapper (): start = time . time () func () stop = time . time () print ( f 'run time is { stop - start } ' ) return wrapper index = timmer ( index ) # -- index = wrapper index () \u65e0\u53c2\u88c5\u9970\u5668 \u00b6 import functools def dec ( func ): @functools . wraps ( func ) # -- \u4fdd\u7559\u88ab\u88c5\u9970\u51fd\u6570\u7684\u6587\u6863\u548c\u51fd\u6570\u540d\u5c5e\u6027 def wrapper ( * args , ** kwargs ): # -- *args,**kwargs \u63a5\u6536\u4f20\u7ed9\u88ab\u88c5\u9970\u51fd\u6570\u7684\u5b9e\u53c2 return func ( * args , ** kwargs ) # -- \u6ce8\u610f\u54e6,\u4e0d\u5199return \u8fd4\u56de\u7684\u662fNone # wrapper.__doc__ = func.__doc__ # wrapper.__name__ = func.__name__ return wrapper \"\"\" @dec \u7b49\u540c\u4e8e func = dec(func) dec(func) -- wrapper So,func = wrapper \"\"\" @dec def func (): pass \u6709\u53c2\u88c5\u9970\u5668 \u00b6 import functools def func_name ( param1 , param2 ) def dec ( func ): @functools . wraps ( func ) def wrapper ( * args , ** kwargs ): # -- param1\u3001param2\u3001func\u90fd\u662fwrapper\u51fd\u6570\u7684\u81ea\u7531\u53d8\u91cf! res = func ( * args , ** kwargs ) return res return wrapper return dec \"\"\" \u5728handler\u51fd\u6570\u5b9a\u4e49\u5b8c\u540e,\u5f00\u59cb\u6267\u884c@func_name(\"\",\"\") @func_name(\"\",\"\")\u7b49\u540c\u4e8e\u6267\u884c\u8bed\u53e5 handler = func_name(\"\",\"\")(handler) func_name(\"\",\"\")(handler) -- deco(handler) -- wrapper So,handler = wrapper handler()\u8bed\u53e5\u8c03\u7528\u6267\u884c\u65f6,\u662f\u5728\u8c03\u7528wrapper() \u662f\u8fd9\u4e48\u56de\u4e8b:\u4e00\u5f00\u59cb`def handler`\u751f\u6210\u7684PyFunctionObject\u5bf9\u8c61, \u4e5f\u4e0e\u95ed\u5305\u51fd\u6570wrapper\u7684\u81ea\u7531\u53d8\u91cffunc\u8fdb\u884c\u4e86\u7ed1\u5b9a \u7136\u540e\u5c06\u95ed\u5305\u51fd\u6570wrapper\u7684\u5185\u5b58\u5730\u5740\u4f20\u9012\u7ed9\u5168\u5c40\u53d8\u91cfhandler,\u8fdb\u884c\u4e86\u8986\u76d6 \"\"\" @func_name ( \"\" , \"\" ) def handler (): pass \u8ba1\u65f6\u7a0b\u5e8f \u00b6 import time def timing ( status ): def dec ( func ): def wrapper ( * args , ** kwargs ): start = time . time () res = func ( * args , ** kwargs ) print ( f \"[ { status } ] use time: { time . time () - start } \" ) return res return wrapper return dec # -- \u8bad\u7ec3 @timing ( 'train' ) def training (): time . sleep ( 3 ) # -- c\u6d4b\u8bd5 @timing ( 'test' ) def testing (): time . sleep ( 2 ) training () testing () \u767b\u5f55\u7528\u6237\u8ba4\u8bc1 \u00b6 import time current_user = { 'user' : None } # -- \u5f53\u524d\u767b\u5f55\u7528\u6237 def auth ( way = 'file' ): def dec ( func ): def wrapper ( * args , ** kwargs ): if current_user [ 'user' ]: return func ( * args , ** kwargs ) user = input ( '\u8bf7\u8f93\u5165\u7528\u6237\u540d>>:' ) pwd = input ( '\u8bf7\u8f93\u5165\u5bc6\u7801>>:' ) if way == \"file\" : # -- \u57fa\u4e8e\u6587\u4ef6\u7684\u9a8c\u8bc1 if user == 'egon' and pwd == '123' : # -- \u6a21\u62df\u4ece\u6587\u4ef6\u4e2d\u53d6\u6570\u636e current_user [ 'user' ] = user return func ( * args , ** kwargs ) else : print ( \"login fail\" ) elif way == \"ldap\" : pass # -- \u57fa\u4e8eldap\u7684\u8ba4\u8bc1 else : print ( '\u65e0\u6cd5\u8bc6\u522b\u9a8c\u8bc1\u6765\u6e90' ) return wrapper return dec @auth ( 'file' ) def index (): print ( f \"welcome to index\" ) time . sleep ( 1 ) @auth () def home ( name ): print ( f \"welcome home, { name } \" ) time . sleep ( 0.5 ) index () home ( 'dc' ) print ( index . __code__ . co_freevars ) # ('func', 'way') \u5c06\u51fd\u6570\u88c5\u5230\u5b57\u5178\u4e2d \u00b6 \u7075\u6d3b\u4f7f\u7528\u8bed\u6cd5\u7cd6@ func_dic = {} def make_route ( name ): def dec ( func ): # -- \u901a\u5e38\u662f\u8981\u518d\u5d4c\u5957\u4e00\u5c42 def wrapper(*args,**kwargs)\u7528\u4e8e\u88ab\u88c5\u9970\u51fd\u6570\u7684\u8fd0\u884c\u4ee5\u53ca\u52a0\u989d\u5916\u529f\u80fd # -- \u4f46\u8fd9\u91cc\u4e0d\u9700\u8981\u88ab\u88c5\u9970\u51fd\u6570\u7684\u8fd0\u884c.. \u4f46\u9700\u8981\u5c06\u51fd\u6570\u540d\u5bf9\u5e94\u7684pyfunctionobject\u88c5\u5728\u5b57\u5178\u4e2d func_dic [ name ] = func return func # -- \u6dfb\u52a0\u540e,\u5c31\u4e0d\u4f1a\u5f71\u54cd\u88ab\u88c5\u9970\u51fd\u6570\u539f\u6765\u7684\u8fd0\u884c\u5566 # \u82e5\u4e0d\u5199\u8fd9\u884c\u8bed\u53e5 \u5168\u5c40\u53d8\u91cff1 = None return dec @make_route ( 'select' ) # -- f1 = dec(f1) dec\u5185\u90e8\u6267\u884c\u8bed\u53e5func_dic['select'] = f1 def f1 (): print ( 'This is select func.' ) @make_route ( 'update' ) def f2 (): print ( 'This is update func.' ) # {'select': <function f1 at 0x7fe14c72d9d0>, 'update': <function f2 at 0x7fe14c72db80>} print ( func_dic ) func_dic [ 'update' ]() # This is update func. -- \u53ef\u901a\u8fc7\u5b57\u5178\u8c03\u7528\u51fd\u6570 f2 () # This is update func. -- \u539f\u51fd\u6570\u7684\u8c03\u7528\u6ca1\u6709\u5f71\u54cd \u591a\u4e2a\u88c5\u9970\u5668 \u00b6 \u591a\u4e2a@\u8bed\u6cd5\u7cd6 \u88ab\u88c5\u9970\u51fd\u6570\u5b9a\u4e49\u9636\u6bb5, \u4ece\u4e0b\u5230\u4e0a\u8c03\u7528\u88c5\u9970\u5668\u51fd\u6570 \u88ab\u88c5\u9970\u51fd\u6570\u8c03\u7528\u9636\u6bb5, \u4ece\u4e0a\u5230\u4e0b\u6267\u884c\u88c5\u9970\u5668\u91cc\u7684\u95ed\u5305\u51fd\u6570 (\u7279\u522b\u8981\u6ce8\u610f fun\u662f\u5565!! fun\u662f\u4e0b\u4e00\u6b21\u8981\u8c03\u7528\u7684\u95ed\u5305\u51fd\u6570\u5bf9\u8c61,\u82e5\u63a5\u4e0b\u6765\u6ca1\u6709\u95ed\u5305\u51fd\u6570\u8c03\u7528\u4e86,\u5c31\u662ffun\u5b9a\u4e49\u65f6\u751f\u6210\u7684PyFunctionObject\u5bf9\u8c61\uff01 ) \u5b9e\u9a8c\u9a8c\u8bc1\u8bc1\u660e\u4e0a\u65b9\u7684\u7ed3\u8bba!!! \u9c81\u8fc5\u5148\u751f\u8bf4\u8fc7,\u5b9e\u8df5\u662f\u68c0\u9a8c\u771f\u7406\u7684\u552f\u4e00\u529e\u6cd5. import functools import time def timing ( status = 'train' ): print ( 'this is timing' ) # -- 0 def dec3 ( func ): print ( 'this is dec3 in timing' ) # -- 1 @functools . wraps ( func ) def wrapper3 ( * args , ** kwargs ): start = time . time () res = func ( * args , ** kwargs ) print ( '[ %s ] time: %.3f s ' % ( status , time . time () - start )) # -- 6 return res return wrapper3 return dec3 def dec1 ( func ): print ( 'this is dec1' ) # -- 3 @functools . wraps ( func ) def wrapper1 ( * args , ** kwargs ): print ( 'The wrapper in dec1' ) # -- 4 return func ( * args , ** kwargs ) return wrapper1 def dec2 ( func ): print ( 'this is dec2' ) # -- 2 @functools . wraps ( func ) def wrapper2 ( * args , ** kwargs ): print ( 'The wrapper in dec2' ) # -- 5 return func ( * args , ** kwargs ) return wrapper2 @dec1 @dec2 @timing ( status = 'test' ) def fun (): pass \u88ab\u88c5\u9970\u51fd\u6570\u5b9a\u4e49\u9636\u6bb5 \u00b6 \u6ce8\u610f\u4e09\u4e2a\u88c5\u9970\u5668\u7684\u5f62\u53c2\u90fd\u662ffunc! \u7b2c\u4e00\u6b65\u6267\u884c timing('Test')(fun) \u8be5\u8bed\u53e5\u91cc\u7684func\u5c31\u662f def fun \u5b9a\u4e49\u65f6\u5168\u5c40\u53d8\u91cffun\u7ed1\u5b9a\u7684PyFunctionObject\u5bf9\u8c61; \u7b2c\u4e00\u6b65\u6267\u884c\u5b8c\u540e\u8fd4\u56de\u95ed\u5305\u51fd\u6570wrapper3, wrapper3\u4f5c\u4e3a\u7b2c\u4e8c\u6b65\u88c5\u9970\u5668\u51fd\u6570dec2\u8c03\u7528\u65f6\u7684\u5f62\u53c2. \u540c\u7406,\u7b2c\u4e8c\u6b65\u6267\u884c\u5b8c\u540e\u8fd4\u56de\u7684\u95ed\u5305\u51fd\u6570wrapper2\u4f5c\u4e3a\u7b2c\u4e09\u6b65\u88c5\u9970\u5668\u51fd\u6570dec1\u8c03\u7528\u65f6\u7684\u5f62\u53c2. \u7b2c\u4e09\u6b65\u5b8c\u6210\u540e,\u8fd4\u56de\u4e86\u95ed\u5305\u51fd\u6570wrapper1.. \u8d4b\u503c\u7ed9\u4e86\u5168\u5c40\u53d8\u91cffun (\u5168\u5c40\u53d8\u91cffun\u91cd\u65b0\u8fdb\u884c\u4e86\u7ed1\u5b9a!) # -- fun = dec1(dec2(timing('Test')(fun))) \u5148\u8fd0\u884c\u91cc\u5c42\u62ec\u53f7\u7684\u5185\u5bb9 # \u7c7b\u4f3c\u4e8e str(3+1) '4' \u4f1a\u5c06\u62ec\u53f7\u91cc\u7684\u5185\u5bb9\u5148\u8fdb\u884c\u8fd0\u7b97,\u5c06\u7ed3\u679c\u4f5c\u4e3a\u5b9e\u53c2\u4f20\u7ed9str\u51fd\u6570\u7684\u884c\u53c2 # \u6839\u636e\u7ed3\u679c,dec1(dec2(timing('Test')(fun)))\u4ece\u91cc\u5230\u5916/\u4ece\u4e0b\u5230\u4e0a\u4f9d\u6b21\u8c03\u7528\u6267\u884c\u4e86dec3\u3001dec2\u3001dec1\u88c5\u9970\u5668 # \u8fd4\u56de\u7684\u7ed3\u679c\u4f9d\u6b21\u4e3awrapper3\u3001wrapper2\u3001wrapper1 # \u5168\u5c40\u547d\u540d\u7a7a\u95f4\u91cc\u7684fun\u53d8\u91cf\u88ab\u8986\u76d6\u4e86,\u91cd\u65b0\u6307\u5411\u4e86\u95ed\u5305\u51fd\u6570wrapper1\u7684\u5185\u5b58\u5730\u5740 @dec1 @dec2 @timing ( status = 'test' ) def fun (): time . sleep ( 2 ) \"\"\" this is timing this is dec3 in timing this is dec2 this is dec1 \"\"\" \u88ab\u88c5\u9970\u51fd\u6570\u8c03\u7528\u9636\u6bb5 \u00b6 \u8c03\u7528\u65f6,\u8981\u6ce8\u610f!! \u5728\u6700\u5916\u5c42(\u5168\u5c40\u4f5c\u7528\u57df\u91cc), fun=wrapper1 ; \u5728 wrapper1 \u7684\u4f5c\u7528\u57df\u5185 fun=wrapper2 ; \u5728 wrapper2 \u7684\u4f5c\u7528\u57df\u5185 fun=wrapper3 @dec1 @dec2 @timing ( status = 'test' ) def fun (): time . sleep ( 2 ) # -- \u5b9e\u9a8c\u7ed3\u679c\u80fd\u5145\u5206\u8868\u660e # \u5148\u6267\u884c\u7684\u95ed\u5305\u51fd\u6570wrapper1,\u91cc\u9762\u9047\u5230func()\u65f6,\u5b9e\u5219\u8c03\u7528\u7684\u662f\u95ed\u5305\u51fd\u6570wrapper2..\u4ee5\u6b64\u7c7b\u63a8. print ( \"--- \u6211\u662f\u5206\u9694\u7b26 ---\" ) fun () \"\"\" this is timing this is dec3 in timing this is dec2 this is dec1 --- \u6211\u662f\u5206\u9694\u7b26 --- The wrapper in dec1 The wrapper in dec2 [test] time: 2.001 s \"\"\"","title":"\u51fd\u6570\u9ad8\u7ea7"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/05_%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/#_1","text":"\u5b66\u5230\u8fd9\u91cc,\u6211\u4eec\u518d\u6df1\u5c42\u6b21\u7684\u5256\u6790\u4e0bUnboundLocalError\u9519\u8bef,\u5728\u524d\u6587\u7684\u9610\u8ff0\u4e2d\u6709\u8fd9\u4e48\u4e00\u6bb5\u6587\u5b57 \"\u5230\u8fd9\u4e00\u6b65a\u53d8\u91cf\u5df2\u7ecf\u5b9a\u6027\u4e3a\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u5566,\u4f46\u662f\u6b64a\u53d8\u91cf\u8fd8\u672a\u5b8c\u6210\u7ed1\u5b9a\" , \u8fd9\u6d89\u53ca\u5230python\u7684 \u53ef\u89c1\u6027\u4e0e\u7ed1\u5b9a . \u53c2\u8003\u94fe\u63a5 : https://www.cnblogs.com/yssjun/p/9873689.html \u76ee\u6807: \u4e5f\u5c31\u662f\u6211\u4eec\u60f3\u5f04\u6e05\u695a, \u6ee1\u8db3\u4ec0\u4e48\u6761\u4ef6\u53d8\u91cf\u540d\u5728\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u4e2d\u5c31\u662f\u53ef\u89c1\u7684.. \u73b0\u9636\u6bb5,\u4e0d\u8981\u7ea0\u7ed3\u5e95\u5c42\u600e\u4e48\u5b9e\u73b0\u53ef\u89c1\u6027\u7684,\u90a3\u662f\u9700\u8981\u7ecf\u8fc7\u9605\u8bfb\u6e90\u7801\u8fdb\u884c\u5206\u6790\u7684..\u9976\u8fc7\u6211\u5427...\u4fee\u884c\u4e0d\u591f,\u770b\u4e0d\u61c2\u6e90\u7801. def func (): a += 4 # -- UnboundLocalError:local variable 'a' referenced before assignment return a a = 1 func ()","title":"\u53d8\u91cf\u7684\u53ef\u89c1\u6027\u4e0e\u5f15\u7528"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/05_%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/#_2","text":"\u4f5c\u7528\u57df\u5373\u4ee3\u7801\u5757!! scope\u7a7a\u95f4\u91cc\u7684\u53d8\u91cf\u4f5c\u7528\u7684\u8303\u56f4\u5c31\u662f\u6240\u5bf9\u5e94\u7684\u4ee3\u7801\u5757,\u8fd9\u4e9b\u53d8\u91cf\u5728\u8be5\u4ee3\u7801\u5757\u4e2d\u662f\u53ef\u89c1\u7684 \u4f5c\u7528\u57df\u5173\u7cfbLEGB/\u51fd\u6570\u91cc\u5f15\u7528\u53d8\u91cf\u7684\u641c\u7d22\u8def\u5f84/\u4f9d\u6b21\u4eceLEGB\u4f5c\u7528\u57df\u5bf9\u5e94\u7684scope\u4e2d\u67e5\u627e! \u4ece\u5d4c\u5957\u7684\u91cc\u5c42\u5f80\u5916\u5c42\u67e5\u627e \u4f5c\u7528\u57df\u5173\u7cfb \u67e5\u627e\u987a\u5e8fLEGB,\u6240\u4ee5\u8ddf \u4ee3\u7801\u5757\u7684\u5d4c\u5957 \u6709\u5173, \u67e5\u7684\u662fLEGB\u5bf9\u5e94\u7684scope,\u6240\u4ee5\u8ddf \u4ee3\u7801\u5757\u7684\u73af\u5883 \u6709\u5173!","title":"\u547d\u540d\u7a7a\u95f4\u4e0e\u4f5c\u7528\u57df"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/05_%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/#_3","text":"\u8bf4\u660e: python\u4e2d\u7684\u51fd\u6570\u3001\u7c7b\u3001\u6a21\u5757\u90fd\u662f\u4ee3\u7801\u5757, \u53ea\u4e0d\u8fc7\u5728\u6b64\u5904\u8ba8\u8bba\u7684\u91cd\u70b9\u662f\u51fd\u6570\u7684\u547d\u540d\u7a7a\u95f4\u548c\u4f5c\u7528\u57df,\u6240\u4ee5\u7279\u6b64\u58f0\u660e\u4e0b\u4ee5\u4e0b\u9610\u8ff0\u4e2d\u7684\u4ee3\u7801\u5757\u7edf\u7edf\u6307\u51fd\u6570.. code block \u6211\u4eec\u53ef\u4ee5\u5bf9\u4ee3\u7801\u8fdb\u884c\u5206\u5757 code block . \u4e3e\u4e2a\u4f8b\u5b50,\u5b9a\u4e49\u4e86\u4e00\u4e2a&NBSP;\u7c7b,\u8fd9\u4e2a\u7c7b\u91cc\u9762\u53c8\u5b9a\u4e49\u4e86\u51fd\u6570B\u3001\u51fd\u6570C, \u51fd\u6570C\u91cc\u5d4c\u5957\u4e86\u51fd\u6570D, \u90a3\u4e48&NBSP;\u662f\u4e00\u4e2a\u4ee3\u7801\u5757,\u91cc\u9762\u5305\u542bB\u3001C\u4e24\u4e2a\u4ee3\u7801\u5757..C\u53c8\u5305\u542bD\u8fd9\u4e2a\u4ee3\u7801\u5757. scope \u7a0b\u5e8f\u5f00\u59cb\u8fd0\u884c\u540e, python\u89e3\u91ca\u5668\u4f1a\u4ece\u4e0a\u5230\u4e0b\u6267\u884c\u4ee3\u7801,\u6267\u884c\u5230\u67d0\u4e2a\u4ee3\u7801\u5757\u65f6,\u4f1a\u4e3a\u5176\u4e00\u5bf9\u4e00\u5206\u914d\u547d\u540d\u7a7a\u95f4 scope (\u662f\u771f\u5b9e\u7684\u5185\u5b58\u7a7a\u95f4) , \u7528\u4e8e\u5b58\u653e\u4ee3\u7801\u5757\u91cc\u9762 \u7ed1\u5b9a \u7684\u53d8\u91cf\u540d(\u53d8\u91cf\u540d\u4e0e\u5bf9\u8c61\u4e4b\u95f4\u7684\u5173\u7cfb).. \u9700\u8981\u6ce8\u610f\u7684\u662f, \u4ee3\u7801\u5757\u770b\u8d77\u6765\u662f\u5d4c\u5957\u7684(A\u5305\u542bB\u548cC,B\u5305\u542bD),\u4f46\u4ee3\u7801\u5757\u5bf9\u5e94\u7684scope\u662f\u76f8\u4e92\u72ec\u7acb\u7684.. block\u2019s environment \u8be5code block\u4e2d\u6240\u6709scope\u4e2d\u53ef\u89c1\u7684name\u7684\u96c6\u5408\u6784\u6210block\u7684\u73af\u5883 \u79f0\u4f5c\u8be5\u4ee3\u7801\u5757\u7684\u73af\u5883. local variable,global variable scope\u547d\u540d\u7a7a\u95f4\u4e5f\u6709\u5f88\u591a\u5206\u7c7b,\u6211\u4eec\u63a5\u89e6\u6700\u591a\u7684\u662f\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u548c\u5c40\u90e8\u547d\u540d\u7a7a\u95f4. \u6574\u4e2apy\u6a21\u5757/\u6267\u884c\u6587\u4ef6\u4ee5\u53capy\u6267\u884c\u6587\u4ef6\u91cc\u4f7f\u7528 import \u8bed\u53e5\u52a0\u8f7d\u7684\u4efb\u4f55\u6a21\u5757\u90fd\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u5168\u5c40\u547d\u540d\u7a7a\u95f4... \u4e00\u4e2a\u4e2acode block\u4ee3\u7801\u5757\u5bf9\u5e94\u7684\u662f\u4e00\u4e2a\u4e2a\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4.. \u4ee3\u7801\u5757 ----- \u5c40\u90e8\u547d\u540d\u7a7a\u95f4 ; import\u52a0\u8f7d\u7684\u6a21\u5757\u3001py\u6587\u4ef6 ------ \u5168\u5c40\u547d\u540d\u7a7a\u95f4 \u5728\u5168\u5c40scope\u548c\u5c40\u90e8scope\u4e4b\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\u5206\u522b\u53eb\u505a local variable \u5c40\u90e8\u53d8\u91cf\u548c global variable \u5168\u5c40\u53d8\u91cf.. \u67e5\u9605\u8d44\u6599\u65f6,\u7ecf\u5e38\u4f1a\u770b\u5230, \"\u5728\u5168\u5c40\u4f5c\u7528\u57df\u91cc\u5b9a\u4e49\u7684\u53d8\u91cf\u53eb\u505a\u5168\u5c40\u53d8\u91cf..\" \u8bf4\u7684\u662f\u5168\u5c40\u3001\u5c40\u90e8 \u4f5c\u7528\u57df \u800c\u4e0d\u662f\u5168\u5c40\u3001\u5c40\u90e8scope\u547d\u540d\u7a7a\u95f4.. \u8fd9\u4e9b\u8bf4\u6cd5\u90fd\u6ca1\u6bdb\u75c5.. \u6211\u4eec\u8fd9\u6837\u60f3\u5c31\u60f3\u901a\u4e86, \u4f5c\u7528\u57df\u4e0e\u547d\u540d\u7a7a\u95f4\u4f9d\u6258\u4e8e/\u4f5c\u7528\u4e8e\u540c\u4e00\u5757\u4ee3\u7801\u5757,\u8fd9\u4e2a\u4ee3\u7801\u5757\u4e2d\u7684\u7ed1\u5b9a\u64cd\u4f5c\u4e2d\u7684\u53d8\u91cf\u5f52\u547d\u540d\u7a7a\u95f4\u7ba1;\u8fd9\u4e2a\u4ee3\u7801\u5757\u4e2d\u7684\u5f15\u7528\u53d8\u91cf\u5f52\u4f5c\u7528\u57df\u7ba1,\u6309\u7167\u4f5c\u7528\u57df\u5173\u7cfbLEGB\u7684\u89c4\u5219\u5728scope\u4e2d\u8c03\u7528\u88ab\u5f15\u7528\u7684\u53d8\u91cf.. \u4f5c\u7528\u57df\u662f\u4ee3\u7801\u5757\u9759\u6001\u7684\u4f53\u73b0,scope\u547d\u540d\u7a7a\u95f4\u662f\u4ee3\u7801\u5757\u52a8\u6001\u7684\u4f53\u73b0 Free variable Free variable \u662f\u4e00\u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u6982\u5ff5, \u95ed\u5305\u90a3\u91cc\u4f1a\u8be6\u7ec6\u9610\u8ff0, \u8fd9\u91cc\u7b80\u5355\u63d0\u4e00\u5634, \u5728\u95ed\u5305\u4e2d\u5f15\u7528\u7684\u7236\u51fd\u6570\u4e2d\u7684\u5c40\u90e8\u53d8\u91cf\u662f\u4e00\u4e2a\u81ea\u7531\u53d8\u91cf,\u800c\u4e14\u8be5\u81ea\u7531\u53d8\u91cf\u88ab\u5b58\u653e\u5728\u4e00\u4e2acell\u5bf9\u8c61\u4e2d.. bind name scope\u7528\u4e8e\u5b58\u653ecode block\u91cc\u5b9a\u4e49\u7684\u53d8\u91cf,\u5177\u4f53\u6765\u8bf4,\u5c06\u67d0\u4e00\u4e2a\u5bf9\u8c61\u4e0e\u53d8\u91cf\u8fdb\u884c\u7ed1\u5b9a,\u5e76\u5c06\u8fd9\u7ed1\u5b9a\u5173\u7cfb\u5b58\u653e\u5728\u547d\u540d\u7a7a\u95f4\u4e2d. code block\u4e2d\u7684\u54ea\u4e9b\u4ee3\u7801\u5728\u6267\u884c\u65f6\u9700\u8981\u8fdb\u884c bind name \u7ed1\u5b9a\u64cd\u4f5c\u5462\uff1f 1> \u51fd\u6570\u7684\u5f62\u53c2a\u3001b def func(a,b):pass 2> py\u6587\u4ef6\u4e2d\u7684import import numpy 3> \u76f4\u63a5\u8d4b\u503c\u7684\u64cd\u4f5c a = 1 4> for \u5faa\u73af \u4e2d\u7684 i for i in range(10):pass 5> \u5f02\u5e38\u5904\u7406except\u540e\u7684\u540d\u5b57\u3001\u6587\u4ef6\u5904\u7406 with open(..) as f as\u540e\u9762\u7684f \u7b49 \u540d\u8bcd \u89e3\u91ca \u4ee3\u7801\u5757 code block \u4f5c\u4e3a\u4e00\u4e2a\u5355\u5143(Unit)\u88ab\u6267\u884c\u7684\u4e00\u6bb5python\u7a0b\u5e8f\u6587\u672c.eg: \u4e00\u4e2a\u6a21\u5757\u3001\u51fd\u6570\u4f53\u548c\u7c7b\u7684\u5b9a\u4e49\u7b49 \u547d\u540d\u7a7a\u95f4 scope \u5c06block\u4ee3\u7801\u5757\u4e2d\u7684\u53d8\u91cfbind\u7ed1\u5b9a\u5230\u8be5block\u5bf9\u5e94\u7684\u547d\u540d\u7a7a\u95f4\u4e2d \u5c40\u90e8\u53d8\u91cf local variable \u5728\u4e00\u4e2ablock\u4e2d\u88ab\u7ed1\u5b9a(eg \u51fd\u6570\u4e2d)\u7684\u53d8\u91cf \u5168\u5c40\u53d8\u91cf global variable \u5728\u4e00\u4e2amodule\u4e2d\u88ab\u7ed1\u5b9a(eg py\u6a21\u5757)\u7684\u53d8\u91cf \u81ea\u7531\u53d8\u91cf free variable \u5728\u67d0\u4e2ablock\u4e2d\u88ab\u5f15\u7528,\u4f46\u6ca1\u6709\u5728\u8be5\u4ee3\u7801\u5757\u4e2d\u88ab\u5b9a\u4e49\u7684\u53d8\u91cf","title":"\u4e13\u4e1a\u540d\u8bcd\u89e3\u91ca"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/05_%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/#_4","text":"\u4ee3\u7801\u5757\u73af\u5883 \"The set of all such scopes visible to a code block is called the block\u2019s environment.\" LEGB \"When a name is used in a code block, it is resolved using the nearest enclosing scope\" \u8fd9\u6bb5\u8bdd\u544a\u8bc9\u6211\u4eec\u5f53\u4e00\u4e2aname\u88ab\u5f15\u7528\u65f6,\u5b83\u4f1a\u5728\u5176\u6700\u8fd1\u7684scope\u4e2d\u5bfb\u627e\u88ab\u5f15\u7528name\u7684\u5b9a\u4e49 \u53d8\u91cf\u7684\u53ef\u89c1\u6027 \"The local variables of a code block can be determined by scanning the entire text of the block for name binding operations.\" \u4ee3\u7801\u5757(eg \u51fd\u6570\u91cc\u7684\u4ee3\u7801)\u5f00\u59cb\u6267\u884c\u5566,\u89e3\u91ca\u5668\u4f1a\u4e3a\u5176\u5206\u914d\u5185\u5b58\u7a7a\u95f4scope. \u4f46\u5728\u771f\u6b63\u6267\u884c\u4e4b\u524d\u4f1a\u5148\u626b\u7784\u51fd\u6570\u4f53\u91cc\u7684\u4ee3\u7801,\u82e5\u5b58\u5728\u7ed1\u5b9a\u64cd\u4f5c\u7684\u4ee3\u7801,\u5bf9\u8c61\u7ed1\u5b9a\u7684\u53d8\u91cf\u5728scope\u7a7a\u95f4\u4fbf\u5177\u6709\u4e86\u53ef\u89c1\u6027...\u8be5\u53d8\u91cf\u5c31\u5b9a\u6027\u6210\u4e86\u5c40\u90e8\u53d8\u91cf; \u626b\u63cf\u5b8c\u540e,\u5f00\u59cb\u771f\u6b63\u6267\u884c,\u5b8c\u6210\u7ed1\u5b9a\u64cd\u4f5c..\u53d8\u91cf\u4fbf\u53ef\u4ee5\u88ab\u5f15\u7528. \u81ea\u7531\u53d8\u91cf \"If a variable is used in a code block but not defined there, it is a free variable .\" \u6ce8\u610f: \u51fd\u6570\u5d4c\u5957,A\u51fd\u6570\u5305\u542bB\u51fd\u6570..A\u6267\u884c\u65f6\u4f1a\u626b\u63cfB\u51fd\u6570\u7684\u4ee3\u7801,\u6709\u4e24\u70b9,\u5176\u4e00B\u51fd\u6570\u91cc\u7ed1\u5b9a\u64cd\u4f5c\u7684\u53d8\u91cf\u4e0d\u4f1a\u5b58\u5165A\u7684scope\u4e2d.\u5176\u4e8c\u626b\u63cf\u65f6\u4f1a\u8bb0\u5f55B\u4e2d\u672a\u5728B\u91cc\u5b9a\u4e49\u5374\u5f15\u7528A\u4e2d\u53ef\u89c1\u7684\u53d8\u91cf..\u5f53A\u6267\u884c\u5b8c\u91ca\u653e,\u8fd9\u4e9b\u5c40\u90e8\u53d8\u91cf\u5c31\u6210\u4e86\u81ea\u7531\u53d8\u91cf,\u4f46\u8fd9\u4e9b\u81ea\u7531\u53d8\u91cf\u80fd\u5426\u88abB\u6210\u529f\u5f15\u7528\u53d6\u51b3\u4e8e\u8fd9\u4e9b\u81ea\u7531\u53d8\u91cf\u662f\u5426\u5b8c\u6210\u7ed1\u5b9a.. Python\u5728\u4f5c\u7528\u57df\u91cc\u5bf9\u53d8\u91cf\u7684\u8d4b\u503c\u64cd\u4f5c\u89c4\u5219 \u82e5\u8fd9\u4e2a\u53d8\u91cf\u5728\u8be5\u4f5c\u7528\u57df\u91cc\u4e0d\u5b58\u5728, \u5219\u5c06\u8fd9\u6b21\u8d4b\u503c\u89c6\u4e3a\u5bf9\u8fd9\u4e2a\u53d8\u91cf\u7684\u5b9a\u4e49..\u82e5\u5b58\u5728,\u5219\u5bf9\u5176\u7ed1\u5b9a\u65b0\u7684\u5bf9\u8c61; \u5047\u8bbe\u4ee3\u7801\u5757(\u4e00\u4e2a\u51fd\u6570)\u5728\u771f\u6b63\u6267\u884c\u4e4b\u524d,\u626b\u63cf\u5230\u51fd\u6570\u4e2d\u4f9d\u6b21\u6709\u4e24\u4e2a\u76f4\u63a5\u8d4b\u503c\u7684\u64cd\u4f5c a = 1 \u548c a=\"Hello\" , a\u53d8\u91cf\u4fbf\u5177\u6709\u4e86\u53ef\u53d8\u6027,\u53ea\u8981\u5176\u4e2d\u6709\u4e00\u4e2a\u64cd\u4f5c\u5b8c\u6210\u4e86\u6267\u884c,a\u53d8\u91cf\u5c31\u5b8c\u6210\u4e86\u5b9a\u4e49/\u7ed1\u5b9a,\u5c31\u53ef\u4ee5\u88ab\u5f15\u7528.. \u82e5\u5bf9a\u53d8\u91cf\u88ab\u591a\u6b21\u6267\u884c\u8d4b\u503c\u64cd\u4f5c,a\u53d8\u91cf\u5c31\u4f1a\u7ecf\u5386\u7ed1\u5b9a\u65b0\u7684\u5bf9\u8c61\u7684\u8fc7\u7a0b.. UnboundLocalError\u62a5\u9519 \"If the name refers to a local variable that has not been bound, a UnboundLocalError exception is raised. \" \u82e5\u5f15\u7528\u7684\u53d8\u91cf\u662f \u5c40\u90e8\u53d8\u91cf (\u4ee3\u7801\u5757\u4e2d\u7684\u53d8\u91cf) ,\u4f46\u8fd8\u672a\u5b8c\u6210\u7ed1\u5b9a,\u5c31\u4f1a\u62a5\u9519 UnboundLocalError .. \u6ce8\u610f \u5f15\u7528\u7684\u662f\u5c40\u90e8\u53d8\u91cf!! \u81ea\u7531\u53d8\u91cf\u8ddf\u5c40\u90e8\u53d8\u91cf\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u6982\u5ff5!!","title":"\u7ed3\u5408\u5b98\u65b9\u6587\u6863\u5206\u6790"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/05_%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/#_5","text":"\u2605 \u6392\u9519\u601d\u8def : \u5148\u626b\u63cf,\u6839\u636e\u7ed1\u5b9a\u64cd\u4f5c\u5b9a\u6027\u5c40\u90e8\u53d8\u91cf; \u5f15\u7528\u53d8\u91cf\u65f6\u6839\u636eLEGB\u89c4\u5219\u67e5\u627e.\u82e5\u5f15\u7528\u7684\u5c40\u90e8\u53d8\u91cf\u53ea\u6709\u53ef\u89c1\u6027..UnboundLocalError 1> Python\u4e2d\u8981\u60f3\u5f15\u7528\u4e00\u4e2aname, \u8be5name\u5fc5\u987b\u8981\u53ef\u89c1\u800c\u4e14\u662f\u5b8c\u6210\u7ed1\u5b9a\u4e86\u7684! 2> \u4f46\u51e1\u6267\u884c\u7684\u4ee3\u7801\u5757\u91cc\u6709\u7ed1\u5b9a\u64cd\u4f5c,\u7ed1\u5b9a\u7684\u53d8\u91cf\u5728\u6240\u5728\u4ee3\u7801\u5757\u5bf9\u5e94\u7684scope\u5c31\u5177\u6709\u53ef\u89c1\u6027 \u5177\u5907\u53ef\u89c1\u6027\u7684\u53d8\u91cf\u5c06\u4f1a\u88ab\u5b9a\u6027\u4e3a\u5c40\u90e8\u53d8\u91cf.\u7ed1\u5b9a\u64cd\u4f5c\u771f\u6b63\u6267\u884c\u540e,\u53ef\u89c1\u6027\u53d8\u91cf\u664b\u5347\u4e3a\u53ef\u88ab\u5f15\u7528\u7684\u53d8\u91cf. (\u4e0d\u7ba1\u4ee3\u7801\u5757\u91cc\u7ed1\u5b9a\u64cd\u4f5c\u7684\u4ee3\u7801\u662f\u5426\u4f1a\u6267\u884c,\u56e0\u4e3a\u5bf9\u4ee3\u7801\u5757\u4e2d\u4ee3\u7801\u7684\u626b\u63cf\u4f1a\u53d1\u751f\u5728\u4ee3\u7801\u5757\u771f\u6b63\u6267\u884c\u4e4b\u524d) 3> \u82e5\u5f15\u7528\u4e86\u67d0\u4e2a\u53d8\u91cf,\u6b64\u53d8\u91cf\u5728\u5404\u4e2a\u4f5c\u7528\u57df\u91cc\u90fd\u627e\u4e0d\u5230(LEGB),\u5c31\u4f1a\u62a5\u9519 NameError ; \u82e5\u5f15\u7528\u7684\u53d8\u91cf\u662f \u5c40\u90e8\u53d8\u91cf ,\u4f46\u8fd8\u672a\u5b8c\u6210\u7ed1\u5b9a,\u5c31\u4f1a\u62a5\u9519 UnboundLocalError .. 4> \u82e5\u8fd9\u4e2a\u53d8\u91cf\u5728\u8be5\u4f5c\u7528\u57df(\u51fd\u6570)\u91cc\u4e0d\u5b58\u5728, \u5219\u5c06\u8fd9\u6b21\u8d4b\u503c\u89c6\u4e3a\u5bf9\u8fd9\u4e2a\u53d8\u91cf\u7684\u5b9a\u4e49.. \u82e5\u5b58\u5728,\u5219\u5bf9\u5176\u7ed1\u5b9a\u65b0\u7684\u5bf9\u8c61;","title":"\u51fd\u6570\u62a5\u9519\u5206\u6790"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/05_%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/#_6","text":"\u25b2 \u6848\u4f8b\u4e00\u5206\u6790 \"\"\"\u5206\u6790 \u5728outer_func\u4e2d\u6211\u4eec\u5b9a\u4e49\u4e86\u53d8\u91cfloc_var,\u56e0\u4e3a\u8d4b\u503c\u662f\u4e00\u79cd\u7ed1\u5b9a\u64cd\u4f5c,\u56e0\u6b64loc_var\u5177\u6709\u53ef\u89c1\u6027,\u5e76\u4e14\u5b8c\u6210\u4e86\u7ed1\u5b9a,\u53ef\u4ee5\u88ab\u5f15\u7528. \u4f46\u6839\u636e\u62a5\u9519,\u5728outer_func\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570inner_func\u5e76\u4e0d\u80fd\u5f15\u7528\u53d8\u91cfloc_var.. \u8fd9\u5c31\u8ba9\u4eba\u5f88\u7591\u60d1. \u8fd9\u62a5\u9519\u7ed3\u679c\u4e0e\u4ee3\u7801\u5757\u7684\u73af\u5883block\u2019s environment\u7684\u6982\u5ff5\u76f8\u77db\u76fe\u4e86.\u56e0\u4e3ablock\u2019s environment\u544a\u8bc9\u6211\u4eec\u51fd\u6570\u4e2d\u7684scope\u662f\u53ef\u4ee5\u6269\u5c55\u5230\u5176\u5185\u5b9a\u4e49\u7684\u6240\u6709scope\u4e2d\u7684.\u4e5f\u5c31\u610f\u5473\u7740outer_func\u51fd\u6570\u4e2d\u7684loc_var\u53d8\u91cf\u662f\u53ef\u4ee5\u88abinner_func\u51fd\u6570\u6240\u5f15\u7528\u7684.. \u95ee\u9898\u51fa\u5728\u54ea\u91cc\u5462\uff1f\u7ee7\u7eed\u5f80\u4e0b\u770b. \u5f53\u6211\u4eec\u6267\u884cclo_func()\u540e,inner_func\u51fd\u6570\u7684\u51fd\u6570\u4f53\u4ee3\u7801\u5f00\u59cb\u6267\u884c,\u5148\u626b\u63cf,\u626b\u63cf\u5230\u4e86loc_var += \" in inner func\"\u8fd9\u4e2a\u8d4b\u503c/\u7ed1\u5b9a\u64cd\u4f5c,inner_func\u51fd\u6570\u4e2d\u7684loc_var\u53d8\u91cf\u4fbf\u5177\u6709\u4e86\u53ef\u89c1\u6027.\u626b\u63cf\u5b8c\u6bd5\u540e\u5f00\u59cb\u771f\u6b63\u6267\u884c\u4ee3\u7801. \u8be5\u8d4b\u503c\u64cd\u4f5c\u53ef\u4ee5\u6362\u4e2a\u5199\u6cd5 loc_var = loc_var + \" in inner func\" \"=\"\u53f7\u53f3\u8fb9\u7684loc_var\u53d8\u91cf\u4f1a\u5148\u88ab\u5f15\u7528,\u6839\u636e\u53d8\u91cf\u7684\u5f15\u7528\u89c4\u5219(LEGB),\u4f1a\u5148\u5728loc_var\u53d8\u91cf\u6240\u5728\u7684inner_func\u51fd\u6570\u5bf9\u5e94\u7684scope\u67e5\u627eloc_var,\u53d1\u73b0\u5728\u6b64scope\u4e2d,loc_var\u662f\u53ef\u89c1\u7684,\u6240\u4ee5\u4e0d\u4f1a\u4f7f\u7528outer_func\u4e2d\u5b9a\u4e49\u7684loc_var.. \u4f46\u6b64scope\u4e2dloc_var\u53d8\u91cf\u8fd8\u6ca1\u6709\u5b8c\u6210\u7ed1\u5b9a\u5c31\u88ab\u5f15\u7528\u5566,\u6240\u4ee5\u62a5\u9519UnboundLocalError!! \"\"\" def outer_func (): loc_var = \"local variable\" # -- inner_func\u4e2d\u6ca1\u6709\u5f15\u7528\u6b64\u5904\u7684loc_var def inner_func (): # \u8be5\u884c\u62a5\u9519 --UnboundLocalError:local variable 'loc_var' referenced before assignment loc_var += \" in inner func\" return loc_var return inner_func clo_func = outer_func () clo_func () \u25b2 \u6848\u4f8b\u4e8c\u5206\u6790 \"\"\"\u5206\u6790 flag\u4e3aFalse `sel_res = 'Do select name = %s' % name`\u8d4b\u503c\u8bed\u53e5\u4e0d\u4f1a\u6267\u884c is_format\u4e3atrue \u5728\u6267\u884c`return sel_res if is_format else name`\u8bed\u53e5\u65f6\u4f1a\u5f15\u7528sel_res\u53d8\u91cf \u56e0\u4e3aget_select_desc\u6267\u884c\u4e4b\u524d\u4f1a\u626b\u63cf\u4ee3\u7801\u5757\u4ee3\u7801,\u7ed1\u5b9a\u64cd\u4f5c\u4e2d\u7684sel_res\u53d8\u91cf\u5c31\u5177\u6709\u4e86\u53ef\u89c1\u6027; \u4f46\u5728return\u8bed\u53e5\u4e2d\u5f15\u7528\u4e86\u8fd8\u672a\u5b8c\u6210\u7ed1\u5b9a\u7684\u5c40\u90e8\u53d8\u91cfsel_res,\u6240\u4ee5\u62a5\u9519UnboundLocalError.. \"\"\" def get_select_desc ( name , flag , is_format = True ): if flag : sel_res = 'Do select name = %s ' % name # -- UnboundLocalError: local variable 'sel_res' referenced before assignment return sel_res if is_format else name get_select_desc ( 'Error' , False , True ) \u25b2 \u6848\u4f8b\u4e09\u5206\u6790 \u6b64\u6848\u4f8b\u4e3b\u8981\u662f\u9488\u5bf9free variable\u7684\u5f15\u7528 \"\"\" \u5728\u521b\u5efa\u95ed\u5305inner_func\u65f6,loc_var1\u548cloc_var2\u4f5c\u4e3a\u7236\u51fd\u6570outer_func\u4e2d\u7684\u4e24\u4e2alocal variable.\u5177\u6709\u53ef\u89c1\u6027. \u8fd4\u56de\u95ed\u5305\u51fd\u6570inner_func\u4e4b\u540e,\u6267\u884c\u8be5\u95ed\u5305\u51fd\u6570,\u53ef\u4ee5\u53d1\u73b0\u5728\u95ed\u5305\u4e2d\u5f15\u7528\u4e86outer_func\u4e2d\u7684local variable. \u88ab\u5f15\u7528\u7684local variable\u88ab\u79f0\u4e3a\u4e00\u4e2afree variable. \u4f46\u662f\u95ed\u5305\u4e2d\u7684free variable\u53ef\u4e0d\u53ef\u4ee5\u88ab\u5f15\u7528\u53d6\u51b3\u4e8e\u5b83\u4eec\u6709\u6ca1\u6709\u88ab\u7ed1\u5b9a\u5230\u5177\u4f53\u7684\u5bf9\u8c61,\u5f15\u7528\u6709\u4e24\u4e2a\u524d\u63d0--\u53ef\u89c1+\u6267\u884c\u7ed1\u5b9a. \"\"\" def outer_func ( out_flag ): # -- outer_func\u4e2d\u7684\u5c40\u90e8\u53d8\u91cfloc_var1\u548cloc_var2\u82e5\u88abinner_func\u5f15\u7528, # \u5219\u88ab\u5f15\u7528\u7684\u5c40\u90e8\u53d8\u91cf\u79f0\u4e3afree variable\u81ea\u7531\u53d8\u91cf if out_flag : # True loc_var1 = 'local variable with flag' else : loc_var2 = 'local variable without flag' def inner_func ( in_flag ): # -- NameError: # free variable 'loc_var2' referenced before assignment in enclosing scope # loc_var1\u53ef\u4ee5\u88ab\u5f15\u7528,loc_var2\u56e0\u4e3a\u6ca1\u6709\u5b8c\u6210\u7ed1\u5b9a\u6240\u4ee5\u4e0d\u80fd\u88ab\u5f15\u7528\uff01 return loc_var1 if in_flag else loc_var2 return inner_func clo_func = outer_func ( True ) print ( clo_func ( False )) \u25b2 \u6848\u4f8b\u56db\u5206\u6790 \"\"\" \u4ee3\u7801\u4ece\u4e0a\u5f80\u4e0b\u6267\u884c,sys\u5148\u662f\u5168\u5c40\u53d8\u91cf add_path\u51fd\u6570\u51c6\u5907\u6267\u884c,\u5148\u626b\u63cf,\u53d1\u73b0\u4e86\u7ed1\u5b9a\u64cd\u4f5cimport sys,sys\u88ab\u5b9a\u6027\u4e3a\u4e86\u5c40\u90e8\u53d8\u91cf add_path\u51fd\u6570\u771f\u6b63\u5f00\u59cb\u6267\u884c, path_list = sys.path \u5f15\u7528\u4e86\u8fd8\u672a\u5b8c\u6210\u7ed1\u5b9a\u7684\u5c40\u90e8\u53d8\u91cfsys \"\"\" import sys def add_path ( new_path ): # UnboundLocalError:local variable 'sys' referenced before assignment path_list = sys . path if new_path not in path_list : import sys sys . path . append ( new_path ) add_path ( './' ) # --- --- --- \u540c\u7406 \u7b80\u5316\u7248\u672c i = 10 def func (): # UnboundLocalError:local variable 'i' referenced before assignment print ( i ) for i in range ( 10 ): print ( i ) func ()","title":"\u56db\u5927\u6848\u4f8b\u5b9e\u8df5"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/05_%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/#_7","text":"","title":"\u95ed\u5305\u51fd\u6570"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/05_%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/#_8","text":"\u53c2\u8003\u94fe\u63a5: https://www.cnblogs.com/traditional/p/13544103.html https://www.icode9.com/content-1-1334531.html PyCodeObject : \u4ee3\u7801\u5bf9\u8c61, \u662f\u4e00\u6bb5\u4ee3\u7801\u7f16\u8bd1\u540e\u5f62\u6210\u7684\u5bf9\u8c61. \u5728\u51fd\u6570\u4e2d\u5bf9\u5e94\u7684\u5c31\u662f\u51fd\u6570\u4f53\u7684\u4ee3\u7801\u7f16\u8bd1\u7ed3\u679c. \u9759\u6001\u7684 PyFunctionObject : \u51fd\u6570\u5bf9\u8c61, \u5b83\u662f\u5bf9PyCodeObject\u7684\u5c01\u88c5. \u76f8\u5f53\u4e8e PyCodeObject + \u51fd\u6570def \u5b9a\u4e49\u8fd9\u4e00\u884c\u4ee3\u7801. \u5728PyCodeObject\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u51fd\u6570\u7684\u540d\u79f0\u3001\u6240\u5c5e\u6a21\u5757\u3001\u53c2\u6570\u9ed8\u8ba4\u503c\u3001globals\u3001builtins. PyFrameObject : \u51fd\u6570\u6267\u884c\u65f6\u5bf9\u5e94\u7684\u6808\u5e27, \u5b83\u7528\u4e8e\u627f\u8f7dPyFunctionObject\u5728\u6267\u884c\u65f6\u6240\u9700\u8981\u7684\u52a8\u6001\u4fe1\u606f. \u52a8\u6001\u7684 \u5305\u62ec\u51fd\u6570\u7684\u5b9e\u53c2\u3001\u51fd\u6570\u6267\u884c\u65f6\u6240\u9700\u7684\u6808\u3001\u5168\u5c40\u53d8\u91cf\u3001\u5c40\u90e8\u53d8\u91cf\u3001\u5f53\u524d\u6267\u884c\u5230\u7684\u6307\u4ee4\u7684\u7f16\u53f7. # -- \u865a\u62df\u673a\u4ece\u4e0a\u5230\u4e0b\u6267\u884c\u5b57\u8282\u7801 name = \"\u590f\u8272\u796d\" age = - 1 # pia, \u51fa\u73b0\u4e86\u4e00\u4e2adef,\u6765\u5230\u4e86\u4e00\u4e2a\u65b0\u7684\u4ee3\u7801\u5757,\u4f1a\u5bf9\u5e94\u521b\u5efa\u4e00\u4e2a\u65b0\u7684PyCodeObject\u5bf9\u8c61 # \u63a5\u7740\u4f1a\u5c06PyCodeObject\u5bf9\u8c61\u5c01\u88c5\u6210PyFunctionObject # \u5f53\u6267\u884c\u5b8cdef\u8bed\u53e5\u4e4b\u540e,\u4e00\u4e2a\u51fd\u6570\u5c31\u88ab\u521b\u5efa\u4e86,\u653e\u5728\u5f53\u524d\u7684local\u7a7a\u95f4\u4e2d # \u6ce8\u610f:PyFunctionObject\u5728\u6267\u884c\u5230\u51fd\u6570\u5b9a\u4e49\u6307\u4ee4MAKE_FUNCTION\u65f6\u751f\u6210,\u751f\u6210\u540e\u662f\u9759\u6001\u4e0d\u53d8\u7684. # \u4e5f\u5c31\u662f\u8bf4,\u4e00\u4e2a\u51fd\u6570\u4e00\u65e6\u5b9a\u4e49,\u5176\u51fd\u6570\u540d\u53c2\u6570\u9ed8\u8ba4\u503c\u3001\u51fd\u6570\u7ed1\u5b9a\u7684globals\u548cbuiltins\u4fe1\u606f(\u90fd\u662f\u5c01\u88c5\u7684\u5185\u5bb9)\u4e0d\u518d\u53d8\u5316. def foo (): pass # \u51fd\u6570\u7684\u7c7b\u578b\u662f<class 'function'>, \u5f53\u7136\u8fd9\u4e2a\u7c7bPython\u6ca1\u6709\u66b4\u9732\u7ed9\u6211\u4eec # \u5f53\u6211\u4eec\u8c03\u7528\u51fd\u6570foo\u7684\u65f6\u5019, \u4f1a\u4ecelocal\u7a7a\u95f4\u4e2d\u53d6\u51fa\u7b26\u53f7\"foo\"\u5bf9\u5e94\u7684PyFunctionObject\u5bf9\u8c61 # \u7136\u540e\u6839\u636e\u8fd9\u4e2aPyFunctionObject\u5bf9\u8c61\u521b\u5efaPyFrameObject\u5bf9\u8c61, \u4e5f\u5c31\u662f\u4e3a\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u6808\u5e27 (\u547d\u540d\u7a7a\u95f4) # \u7136\u540e\u5c06\u6267\u884c\u6743\u4ea4\u7ed9\u65b0\u521b\u5efa\u7684\u6808\u5e27, \u5728\u65b0\u521b\u5efa\u7684\u6808\u5e27\u4e2d\u6267\u884c\u5b57\u8282\u7801 # PyFrameObject\u662f\u52a8\u6001\u53ef\u53d8\u7684\uff0c\u5176\u5305\u542b\u4e24\u5c42\u542b\u4e49: # 1>\u5bf9\u540c\u4e00\u4e2a\u51fd\u6570\u7684\u6bcf\u4e00\u6b21\u8c03\u7528,\u90fd\u4f1a\u751f\u6210\u4e00\u4e2a\u65b0\u7684PyFrameObject; # 2>\u6bcf\u4e2aPyFrameObject\u5728\u5176\u751f\u547d\u5468\u671f\u5185\u662f\u4e0d\u65ad\u53d1\u751f\u53d8\u5316\u7684,PyFrameObject\u627f\u8f7d\u7740\u51fd\u6570\u6267\u884c\u65f6\u6240\u9700\u8981\u7684\u6240\u6709\u52a8\u6001\u4fe1\u606f. print ( locals ()) # {......, 'foo': <function foo at 0x000001B299FAF3A0>}","title":"\u51fd\u6570\u4ee3\u7801\u6267\u884c\u8fc7\u7a0b!!"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/05_%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/#vs","text":"\u4e0d\u4e25\u8c28\u7684\u89e3\u91ca( \u6700 \u5e38\u89c1\u7684\u95ed\u5305): \u51fd\u6570\u5d4c\u5957, \u5185\u90e8\u51fd\u6570\u5f15\u7528\u4e86\u5916\u90e8\u51fd\u6570\u7684\u53c2\u6570\u6216\u53d8\u91cf, \u5e76\u5c06\u8fd9\u4e2a\u5185\u90e8\u51fd\u6570\u8fd4\u56de. \u8fd4\u56de\u7684\u5185\u90e8\u51fd\u6570\u5c31\u79f0\u4e3a\u95ed\u5305\u51fd\u6570! \"\u95ed\"\u4ee3\u8868\u51fd\u6570\u662f\u5185\u90e8\u7684,\"\u5305\"\u4ee3\u8868\u51fd\u6570\u5916\u2019\u5305\u88f9\u2019\u7740\u5bf9\u5916\u5c42\u4f5c\u7528\u57df\u7684\u5f15\u7528.. \u56e0\u800c\u65e0\u8bba\u5728\u4f55\u5904\u8c03\u7528\u95ed\u5305\u51fd\u6570,\u4f7f\u7528\u7684\u4ecd\u7136\u662f\u5305\u88f9\u5728\u5176\u5916\u5c42\u7684\u53d8\u91cf! \u95ed\u5305\u4e0d\u662f\u4f20\u7edf\u610f\u4e49\u4e0a\u5b9a\u4e49\u7684\u51fd\u6570,\u6211\u4eec\u6240\u8ba4\u8bc6\u7684\u51fd\u6570\u5927\u6982\u662f\u8fd9\u6837\u7684: 1 > \u7a0b\u5e8f\u88ab\u52a0\u8f7d\u5230\u5185\u5b58\u6267\u884c\u65f6 , \u51fd\u6570\u5b9a\u4e49\u7684\u4ee3\u7801\u88ab\u5b58\u653e\u5728\u4ee3\u7801\u6bb5\u4e2d 2 > \u51fd\u6570\u88ab\u8c03\u7528\u65f6 , \u4f1a\u5728\u6808\u4e0a\u521b\u5efa\u5176\u6267\u884c\u73af\u5883 , \u521d\u59cb\u5316\u5176\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\u548c\u5916\u90e8\u4f20\u5165\u7684\u5f62\u53c2 -- scope \u6808\u533a 3 > \u5f53\u51fd\u6570\u6267\u884c\u5b8c\u6210\u5e76\u8fd4\u56de\u51fd\u6570\u7ed3\u679c\u540e -- return \u51fd\u6570\u6808\u5e27\u4fbf\u4f1a\u88ab\u9500\u6bc1\u6389 , \u51fd\u6570\u4e2d\u7684\u4e34\u65f6\u53d8\u91cf\u4ee5\u53ca\u5b58\u50a8\u7684\u4e2d\u95f4\u8ba1\u7b97\u7ed3\u679c\u90fd\u4e0d\u4f1a\u4fdd\u7559 -- \u5185\u5b58\u56de\u6536 4 > \u4e0b\u6b21\u8c03\u7528\u65f6\u552f\u4e00\u53d1\u751f\u53d8\u5316\u7684\u5c31\u662f\u51fd\u6570\u4f20\u5165\u7684\u5f62\u53c2\u53ef\u80fd\u4f1a\u4e0d\u4e00\u6837 , \u51fd\u6570\u6808\u5e27\u4f1a\u91cd\u65b0\u521d\u59cb\u5316\u51fd\u6570\u7684\u6267\u884c\u73af\u5883 def func ( a ): b = 1 return a + b func ( 2 ) \u7ef4\u57fa\u767e\u79d1\u4e2d\u5bf9\u95ed\u5305\u7684\u89e3\u91ca: \"\u4e00\u4e2a\u51fd\u6570\u5b9a\u4e49\u4e2d\u5f15\u7528\u4e86\u51fd\u6570\u5916\u5b9a\u4e49\u7684\u53d8\u91cf, \u8be5\u51fd\u6570\u53ef\u4ee5\u5728\u5176\u5b9a\u4e49\u73af\u5883\u5916\u88ab\u6267\u884c.\" \u4ffa\u6597\u80c6\u4e3e\u4e2a\u6817\u5b50\u8f85\u52a9\u5206\u6790\u4e0b, A\u5d4c\u5957B. B\u5f15\u7528A\u7684\u5c40\u90e8\u53d8\u91cf, \u5728A\u7684\u751f\u547d\u5468\u671f\u7ed3\u675f\u540e , \u8be5\u53d8\u91cf\u624d\u79f0\u4f5c\u81ea\u7531\u53d8\u91cf,\u5185\u90e8\u51fd\u6570B\u624d\u79f0\u4f5c\u95ed\u5305\u51fd\u6570; B\u51fd\u6570 \u53ef\u4ee5 \u5728\u5916\u90e8\u51fd\u6570A\u4e4b\u5916\u8fd0\u884c. \u6210\u4e3a\u95ed\u5305\u51fd\u6570\u7684 \u4e24\u4e2a\u524d\u63d0\u6761\u4ef6 : 1> \u51fd\u6570\u5d4c\u5957; 2> \u5185\u90e8\u51fd\u6570\u5f15\u7528\u5916\u90e8\u51fd\u6570( E \u5185\u5d4c\u4f5c\u7528\u57df )\u4e2d\u7684\u53c2\u6570\u6216\u53d8\u91cf.. \u6210\u4e3a\u95ed\u5305\u51fd\u6570\u7684 \u5fc5\u8981\u89e6\u53d1\u6761\u4ef6 : \u5916\u90e8\u51fd\u6570\u6267\u884c\u5b8c\u6210,\u751f\u547d\u5468\u671f\u7ed3\u675f..\u5185\u90e8\u51fd\u6570\u624d\u53ef\u79f0\u4e3a\u95ed\u5305\u51fd\u6570. \u6210\u4e3a\u95ed\u5305\u51fd\u6570\u7684 \u4e0d\u5fc5\u8981\u6761\u4ef6 : \u4e00\u65e6\u5916\u90e8\u51fd\u6570\u5c06\u5185\u90e8\u51fd\u6570\u4f5c\u4e3a\u51fd\u6570\u7ed3\u679c\u8fd4\u56de..\u95ed\u5305\u51fd\u6570\u5c31\u53ef\u4ee5\u5728\u5916\u90e8\u51fd\u6570\u4e4b\u5916\u8fd0\u884c","title":"\u4f20\u7edf\u51fd\u6570 vs \u95ed\u5305"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/05_%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/#_9","text":"# -- demo.py def outer_func (): my_list = [] def inner_func ( name ): my_list . append ( len ( my_list ) + 1 ) print ( ' %s my_list = %s ' % ( name , my_list )) return inner_func closure_1 = outer_func () closure_1 ( 'cls1_instance_1' ) # -- cls1_instance_1 my_list = [1] closure_1 ( 'cls1_instance_2' ) # -- cls1_instance_2 my_list = [1, 2] closure_1 ( 'cls1_instance_3' ) # -- cls1_instance_3 my_list = [1, 2, 3] closure_2 = outer_func () closure_2 ( 'cls2_instance_1' ) # -- cls2_instance_1 my_list = [1] closure_1 ( 'cls1_instance_4' ) # -- cls1_instance_4 my_list = [1, 2, 3, 4] closure_2 ( 'cls2_instance_2' ) # -- cls2_instance_2 my_list = [1, 2] \"\"\" \u8c03\u7528\u4e24\u6b21outer_func,\u5206\u522breturn\u8fd4\u56de\u4e86closure_1\u548cclosure_2\u4e24\u4e2a\u95ed\u5305\u51fd\u6570. \u95ed\u5305\u51fd\u6570\u8ddf\u666e\u901a\u51fd\u6570\u7684\u8c03\u7528\u6ca1\u5565\u533a\u522b,\u53ef\u4ee5\u5bf9\u95ed\u5305\u51fd\u6570\u591a\u6b21\u8c03\u7528. 1> \u89c2\u5bdf\u95ed\u5305\u51fd\u6570closure_1\u7684\u591a\u6b21\u8c03\u7528,my_list\u5728\u53d8\u5316: \u5bf9\u540c\u4e00\u4e2a\u95ed\u5305\u51fd\u6570\u591a\u6b21\u8c03\u7528,\u6bcf\u6b21\u8c03\u7528\u5bf9\u5176\u81ea\u7531\u53d8\u91cf\u7684\u4fee\u6539\u4f1a\u88ab\u4f20\u9012\u5230\u4e0b\u4e00\u6b21\u7684\u8c03\u7528.(\u6709\u70b9\u9ed8\u8ba4\u53c2\u6570\u90a3\u5473) 2> \u53ef\u4ee5\u89c2\u5bdf\u95ed\u5305\u51fd\u6570closure_1\u7684\u8c03\u7528\u548c\u95ed\u5305\u51fd\u6570closure_2\u7684\u8c03\u7528,\u5e76\u4e0d\u4f1a\u4e92\u76f8\u5e72\u6270. \u95ed\u5305\u4e2d\u5f15\u7528\u7684\u81ea\u7531\u53d8\u91cf\u53ea\u548c\u5177\u4f53\u7684\u95ed\u5305\u6709\u5173\u8054. \"\"\" \u51fd\u6570\u5f00\u59cb\u6267\u884c,\u4f1a\u5148\u626b\u63cf\u51fd\u6570\u4f53\u7684\u4ee3\u7801,\u5305\u62ec\u5185\u90e8\u51fd\u6570inner_func\u7684\u4ee3\u7801,\u8bb0\u5f55inner_func\u4e2d\u7684\u5f15\u7528\u53d8\u91cf. \u8bb0\u5f55\u7684\u5f15\u7528\u53d8\u91cf\u5e94\u6ee1\u8db3\u4e24\u70b9,\u5176\u4e00,\u5728inner_func\u91cc\u672a\u5b9a\u4e49,\u5176\u4e8c,\u5728outer_func\u4e2d\u662f\u53ef\u89c1\u7684. \u5f53outer_func\u51fd\u6570\u7ed3\u675f,inner_func\u4ece\u5185\u90e8\u51fd\u6570\u8fdb\u5316\u6210\u4e3a\u95ed\u5305\u51fd\u6570.. my_list\u4ece\u5c40\u90e8\u53d8\u91cf\u53d8\u4e3a\u81ea\u7531\u53d8\u91cf. \u95ed\u5305\u4e2d\u5f15\u7528\u7684\u7236\u51fd\u6570\u4e2d\u7684\u5c40\u90e8\u53d8\u91cf\u662f\u4e00\u4e2a\u81ea\u7531\u53d8\u91cf, \u81ea\u7531\u53d8\u91cf\u5b58\u5230inner_func\u7684cell\u5bf9\u8c61\u4e2d","title":"\u95ed\u5305\u521d\u63a2"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/05_%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/#_10","text":"Q: \u51fd\u6570inner\u5982\u4f55\u5b58\u50a8\u53d8\u91cfvar\u5462? A: inner.__code__.co_freevars \u8bb0\u5f55\u4e86\u81ea\u7531\u53d8\u91cf\u7684\u540d\u5b57 \u5728\u51fd\u6570\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u5185\u90e8\u51fd\u6570\u4f1a\u6709\u4e00\u4e2a\u95ed\u5305\u7684\u7279\u6b8a\u5c5e\u6027 __closure__ , \u82e5\u5185\u90e8\u51fd\u6570\u4e2d\u4e0d\u5305\u542b\u5bf9\u5916\u90e8\u51fd\u6570\u53d8\u91cf\u7684\u5f15\u7528, __closure__ \u5c5e\u6027\u662f\u4e0d\u5b58\u5728\u7684, \u8be5\u5c5e\u6027\u8bb0\u5f55\u4e86\u81ea\u7531\u53d8\u91cf\u7684\u503c,\u5b83\u662f\u4e00\u4e2a\u7531cell\u5bf9\u8c61\u7ec4\u6210\u7684\u5143\u7ec4 g_var = 1 def outer (): e_var_x = [] e_var_y = 6 def inner (): e_var_x . append ( g_var + e_var_y ) print ( e_var_x , e_var_y ) return inner a = outer () # ('e_var_x', 'e_var_y') -- inner\u5f15\u7528\u4e86\u5168\u5c40\u53d8\u91cfg_var,\u4f46g_var\u4e0d\u7b97\u4f5c\u81ea\u7531\u53d8\u91cf! print ( a . __code__ . co_freevars ) # (<cell at 0x7fe0a0e7cac0: list object at 0x7fe0a0e8b940>, <cell at 0x7fe0a0e7c6a0: int object at 0x100aceb60>) print ( a . __closure__ ) print ( a . __closure__ [ 0 ] . cell_contents ) # [] -- \u6b64\u65f6\u95ed\u5305\u8fd8\u6ca1\u8fd0\u884c,\u81ea\u7531\u53d8\u91cf\u7684\u503c\u6700\u521d\u72b6\u6001 print ( a . __closure__ [ 1 ] . cell_contents ) # 6 a () # [7] 6 g_var = 8 a () # [7, 14] 6 -- \u540c\u4e00\u4e2a\u95ed\u5305\u51fd\u6570\u591a\u6b21\u8fd0\u884c,\u5bf9\u81ea\u7531\u53d8\u91cf\u7684\u4fee\u6539\u4f1a\u4f20\u9012 [7]->[7, 14] print ( a . __closure__ [ 0 ] . cell_contents ) # [7,14] print ( a . __closure__ [ 1 ] . cell_contents ) # 6 g_var = 11 b = outer () b () # [17] 6 -- \u95ed\u5305a\u3001b\u5f15\u7528\u7684\u81ea\u7531\u53d8\u91cf\u4e92\u4e0d\u5e72\u6270","title":"\u81ea\u7531\u53d8\u91cf\u7684\u5b58\u50a8"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/05_%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/#id","text":"\u8865\u5145: \u8bf7\u89e3\u91ca\u4e0b\u9762\u7684id\u76f8\u540c\u4e0e\u4e0d\u540c\u7684\u7f18\u7531.. \u8fd9\u4e2a\u95ee\u9898\u7ea0\u7ed3\u4e86\u6211\u4e00\u5929!!!(\u2229_\u2229) \u5806\u533a\u6c34\u592a\u6df1,\u9053\u884c\u592a\u6d45,\u52ff\u6d89 ` Two objects with non - overlapping lifetimes may have the same id () value . ` \u4e24\u4e2a\u751f\u5b58\u5468\u671f\u4e0d\u76f8\u4ea4\u7684\u4e0d\u540c\u5bf9\u8c61 , \u53ef\u80fd\u6709\u4e00\u4e2a\u5730\u5740 . \u5224\u65ad\u5bf9\u8c61\u76f8\u540c\u4e0e\u5426\u7528is , \u4e0d\u8981\u7528id\u53bb\u6bd4\u8f83 , is\u7531\u4e8e\u4e0d\u80fd\u88ab\u91cd\u8f7d , \u56e0\u6b64\u4e0d\u7528\u67e5\u54c8\u5e0c\u8868 , \u4f1a\u66f4\u5feb\u4e00\u4e9b !!! \"\"\" 1> \u6bcf\u6b21\u6267\u884cdef\u8bed\u53e5,\u90fd\u4f1a\u751f\u6210\u4e00\u4e2a\u4e0d\u540c\u7684PyFunctionObjec\u5bf9\u8c61 \u6bcf\u6b21\u8c03\u7528\u6267\u884c\u51fd\u6570,\u90fd\u4f1a\u751f\u6210\u4e00\u4e2a\u4e0d\u540c\u7684PyFrameObjec\u5bf9\u8c61,\u4e5f\u5c31\u662f\u547d\u540d\u7a7a\u95f4 2> outer\u51fd\u6570\u6267\u884c\u5b8c\u540e,\u547d\u540d\u7a7a\u95f4\u91cc\u7684\u53d8\u91cf\u540d\u4f1a\u4e0e\u5177\u4f53\u7684\u5bf9\u8c61\u65ad\u5f00\u8fde\u63a5 \u91ca\u653e\u547d\u540d\u7a7a\u95f4 \u82e5\u5806\u533a\u7684\u5bf9\u8c61\u5f15\u7528\u8ba1\u6570\u4e3a0,\u4f1a\u8fdb\u884cgc\u56de\u6536 \u4e5f\u5c31\u662f\u8bf4,outer\u51fd\u6570\u6267\u884c\u5b8c,inner\u51fd\u6570/\u53d8\u91cf\u540d\u4e0ePyFunctionObject\u65ad\u5f00\u8fde\u63a5\u4e86 `print(id(a), id(b))` \u503c\u76f8\u540c \u8fd4\u56de\u4e86PyFunctionObject\u5bf9\u8c61\u5e76\u8d4b\u503c\u7ed9\u4e86\u67d0\u4e2a\u5168\u5c40\u53d8\u91cf So,\u5806\u533a\u4e2d\u7684PyFunctionObject\u5bf9\u8c61\u5f97\u4ee5\u4fdd\u5b58,\u5f15\u7528\u8ba1\u6570\u4e3a1,\u4e0d\u4f1a\u88abgc\u56de\u6536 \u8c03\u7528\u6267\u884c\u4e24\u6b21outer\u51fd\u6570,\u5728outer\u51fd\u6570\u7684\u51fd\u6570\u4f53\u91cc\u6267\u884c\u4e86\u4e24\u6b21\u76f8\u540c\u7684def\u8bed\u53e5 def\u8bed\u53e5\u76f8\u540c,\u4f46\u90fd\u4f1a\u751f\u6210\u4e00\u4e2a\u4e0d\u540c\u7684PyFunctionObjec\u5bf9\u8c61 `print(id(outer()), id(outer()))` \u503c\u4e0d\u540c \u4f60\u4f1a\u53d1\u73b0,\u8fd9\u91cc\u540c\u6837\u8c03\u7528\u6267\u884c\u4e86\u4e24\u6b21outer\u51fd\u6570,\u5728outer\u51fd\u6570\u7684\u51fd\u6570\u4f53\u91cc\u6267\u884c\u4e86\u4e24\u6b21\u76f8\u540c\u7684def\u8bed\u53e5 \u4e3a\u5565id\u76f8\u540c\u5462\uff1f\u56e0\u4e3a\u7b2c\u4e00\u6b21\u7684PyFunctionObjec\u5bf9\u8c61\u7684\u5f15\u7528\u8ba1\u6570\u4e3a0,\u4f18\u5316\u673a\u5236,\u7b2c\u4e8c\u6b21\u7684def\u76f4\u63a5\u62ff\u6765\u7528 \"\"\" print ( id ( a ), id ( b )) # 140650857597392 140650857597248 print ( id ( outer ()), id ( outer ())) # 140650857596672 140650857596672 # -- \u4e3e\u4e2a\u7b80\u5355\u4f8b\u5b50\u8f85\u52a9\u7406\u89e3 \u6a21\u62df`def inner`\u751f\u6210PyFunctionObjec\u5bf9\u8c61 def func (): pass print ( id ( func )) # 140402907130320 del func def func (): pass print ( id ( func )) # 140402907130320 def func (): pass print ( id ( func )) # 140690837776848 temp = func # !!!!!! del func def func (): pass print ( id ( func )) # 140690837776704","title":"id\u4e0d\u540c\u7f18\u7531"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/05_%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/#_11","text":"\u8fd4\u56de\u95ed\u5305\u4e2d\u4e0d\u8981\u5f15\u7528\u4efb\u4f55\u5faa\u73af\u53d8\u91cf, \u6216\u8005\u540e\u7eed\u4f1a\u53d1\u751f\u53d8\u5316\u7684\u53d8\u91cf \u56e0\u4e3a\u5728\u8fd4\u56de\u95ed\u5305\u524d,\u95ed\u5305\u4e2d\u5f15\u7528\u7684\u7236\u51fd\u6570\u4e2d\u5b9a\u4e49\u53d8\u91cf\u7684\u503c\u53ef\u80fd\u4f1a\u53d1\u751f\u4e0d\u662f\u6211\u4eec\u671f\u671b\u7684\u53d8\u5316 \u81ea\u7531\u53d8\u91cf\u7684\u540d\u79f0\u89e3\u6790\u53d1\u751f\u4e8e\u8fd0\u884c\u65f6\u800c\u4e0d\u662f\u7f16\u8bd1\u65f6 i = 10 def f (): print ( i ) i = 42 f () \u7a0b\u5e8f\u7684\u7ed3\u679c\u5e76\u4e0d\u662f\u6211\u4eec\u60f3\u8c61\u7684\u7ed3\u679c0,1,4. \u5b9e\u9645\u7ed3\u679c\u5168\u90e8\u662f4. \u4e3a\u5565\uff1f \"\"\" \u5728\u51fd\u6570outer\u8fd4\u56de\u524d\u5176\u5185\u90e8\u5b9a\u4e49\u7684\u51fd\u6570\u5e76\u4e0d\u662f\u95ed\u5305\u51fd\u6570,\u53ea\u662f\u4e00\u4e2a\u5185\u90e8\u5b9a\u4e49\u7684\u51fd\u6570 \u8fd9\u4e2a\u5185\u90e8\u51fd\u6570\u5f15\u7528\u7684\u7236\u51fd\u6570\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\u4e5f\u4e0d\u662f\u81ea\u7531\u53d8\u91cf,\u800c\u53ea\u662f\u5f53\u524dblock\u4e2d\u7684\u4e00\u4e2alocal variable \u5728\u8fd4\u56de\u95ed\u5305\u5217\u8868clo_list\u4e4b\u524dfor\u5faa\u73af\u7684\u53d8\u91cf\u7684\u503c\u5df2\u7ecf\u53d1\u751f\u6539\u53d8\u4e86,\u800c\u4e14\u8fd9\u4e2a\u6539\u53d8\u4f1a\u5f71\u54cd\u5230\u6240\u6709\u5f15\u7528\u5b83\u7684\u5185\u90e8\u5b9a\u4e49\u7684\u51fd\u6570 \u51fd\u6570outer\u4e00\u65e6\u8fd4\u56de,\u5176\u5185\u90e8\u5b9a\u4e49\u7684\u51fd\u6570inner\u4fbf\u662f\u4e00\u4e2a\u95ed\u5305,\u5176\u4e2d\u5f15\u7528\u7684\u53d8\u91cfi\u6210\u4e3a\u4e00\u4e2a\u53ea\u548c\u5177\u4f53\u95ed\u5305\u76f8\u5173\u7684\u81ea\u7531\u53d8\u91cf.. \"\"\" def outer (): clo_list = [] for i in range ( 3 ): # -- \u7b49\u540c\u4e8einner = lambda : i * i def inner (): return i * i clo_list . append ( inner ) return clo_list clo1 , clo2 , clo3 = outer () print ( clo1 ()) # 4 print ( clo2 ()) # 4 print ( clo3 ()) # 4 # -- \u8be5\u4ee3\u7801\u4e0e\u4e0a\u9762\u7684\u5206\u6790\u903b\u8f91\u662f\u4e00\u6837\u7684 def outer (): clo_list = [] m = 0 for i in range ( 3 ): def inner (): return m * m clo_list . append ( inner ) m = 3 return clo_list clo1 , clo2 , clo3 = outer () print ( clo1 (), clo2 (), clo3 ()) # 9 9 9 # -- \u6b63\u89e3 # outer\u7ed3\u675f,\u81ea\u7531\u53d8\u91cfi\u4f1a\u4f5c\u4e3a\u4e00\u4e2acell\u5bf9\u8c61\u5b58\u50a8\u5728inner\u51fd\u6570\u7684__closure__\u5c5e\u6027\u91cc # \u4e0d\u4f7f\u7528\u81ea\u7531\u53d8\u91cf\u5373\u53ef,\u4f7f\u7528\u9ed8\u8ba4\u53c2\u6570\u89e3\u51b3 \u9ed8\u8ba4\u5f62\u53c2\u4fdd\u5b58\u4e86\u5f53\u524d\u7684i\u503c,\u5728\u5bf9\u5e94\u95ed\u5305\u4e2d\u4ee5\u5c40\u90e8\u53d8\u91cf\u4f53\u73b0 def outer (): clo_list = [] for i in range ( 3 ): # -- \u6dfb\u52a0\u4e00\u4e2a\u9ed8\u8ba4\u51fd\u6570,\u5176\u503c\u8bbe\u7f6e\u4e3a\u6bcf\u6b21\u5faa\u73af\u7684i\u503c # \u5bf9\u5f62\u53c2\u7684\u4e0d\u540c\u8d4b\u503c\u4f1a\u4fdd\u7559\u5728\u5f53\u524d\u51fd\u6570\u5b9a\u4e49\u4e2d,\u4e0d\u4f1a\u5bf9\u5176\u4ed6\u51fd\u6570\u6709\u5f71\u54cd inner = lambda _i = i : _i * _i clo_list . append ( inner ) return clo_list","title":"\u95ed\u5305\u9677\u9631"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/05_%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/#nonlocal","text":"nonlocal\u5173\u952e\u5b57 \u5b9e\u73b0\u5728\u5bf9\u81ea\u7531\u53d8\u91cf\u7684\u5f15\u7528\u540c\u65f6,\u4fee\u6539\u81ea\u7531\u53d8\u91cf # -- \u8ba1\u7b97\u5e73\u5747\u503c def make_averager (): total = 0 # -- \u5143\u7d20\u503c\u603b\u8ba1 count = 0 # -- \u5171\u591a\u5c11\u5143\u7d20\u53c2\u4e0e \"\"\" `nonlocal count, total`\u8bed\u53e5,\u6307\u660eaverager\u4e2d\u4f7f\u7528\u7684count\u548ctotal\u53d8\u91cf\u662f\u5728\u5f15\u7528make_averager\u4e2d\u7684\u53d8\u91cf count = count + 1 \u53f3\u4fa7\u5f15\u7528\u5185\u5d4c\u4f5c\u7528\u57df\u7684count,\u5de6\u4fa7\u5bf9\u5185\u5d4c\u4f5c\u7528\u57df\u4e2d\u7684count\u91cd\u65b0\u8d4b\u503c(\u7ed1\u5b9a\u5bf9\u8c61) \u8fd9\u6837\u7684\u8bdd\u6709\u6548\u7684\u907f\u514d\u4e86UnboundLocalError\u62a5\u9519 \u5f53make_averager\u8fd4\u56de\u540e,count\u548ctotal\u53d8\u91cf\u5c31\u53d8\u6210\u4e86\u81ea\u7531\u53d8\u91cf! \u6ce8\u610f\u524d\u9762\u6848\u4f8b\u91cc\u63d0\u5230\u8fc7\u7684\u4e00\u70b9:\u540c\u4e00\u4e2a\u95ed\u5305\u51fd\u6570\u7684\u591a\u6b21\u8c03\u7528\u53ef\u4ee5\u5c06\u81ea\u7531\u53d8\u91cf\u7684\u4fee\u6539\u8fdb\u884c\u4f20\u9012! \u81ea\u7531\u53d8\u91cf\u82e5\u662f\u53ef\u53d8\u7c7b\u578b,eg:\u5217\u8868 \u95ed\u5305\u51fd\u6570\u53ef\u4ee5\u901a\u8fc7append\u7b49\u5185\u7f6e\u51fd\u6570\u4fee\u6539 \u82e5\u81ea\u7531\u53d8\u91cf\u662f\u4e0d\u53ef\u53d8\u7c7b\u578b eg:\u6570\u5b57 \u95ed\u5305\u51fd\u6570\u4f7f\u7528\u8d4b\u503c\u8bed\u53e5\u6765\u6539\u53d8 \u76f8\u5f53\u4e8e\u5728\u95ed\u5305\u51fd\u6570\u5185\u90e8\u521b\u5efa\u4e2a\u540c\u540d\u7684\u5c40\u90e8\u53d8\u91cf,\u5c31\u4e0d\u4f1a\u4f7f\u7528\u81ea\u7531\u53d8\u91cf\u5566\u3001 nonlocal\u5173\u952e\u5b57\u53ef\u4ee5 \u5b9e\u73b0\u5728\u5bf9\u81ea\u7531\u53d8\u91cf\u7684\u5f15\u7528\u540c\u65f6,\u4fee\u6539\u81ea\u7531\u53d8\u91cf \"\"\" def averager ( new_value ): nonlocal count , total count += 1 total += new_value return total / count return averager avg = make_averager () print ( avg ( 10 )) print ( \"---:> \" , avg . __closure__ [ 0 ] . cell_contents , avg . __closure__ [ 1 ] . cell_contents ) print ( avg ( 11 )) print ( \"---:> \" , avg . __closure__ [ 0 ] . cell_contents , avg . __closure__ [ 1 ] . cell_contents ) \"\"\" 10.0 ---:> 1 10 10.5 ---:> 2 21 \"\"\" # --- --- --- def outer (): x = 5 def inner (): nonlocal x x += 1 return x return inner () # -- \u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u786e\u5b9a\u7684\u503c,\u4e0d\u662f\u51fd\u6570!! a = outer () print ( a ) # 6 print ( a ) # 6 b = outer () print ( b ) # 6 print ( b ) # 6","title":"nonlocal"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/05_%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/#_12","text":"","title":"\u4e3a\u51fd\u6570\u4f53\u4f20\u503c"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/05_%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/#_13","text":"import requests \"\"\" \u2605 --\u4f7f\u7528\u53c2\u6570\u7684\u5f62\u5f0f \"\"\" def get ( url = 'https://www.baidu.com/' ): res = requests . get ( url ) if res . status_code == 200 : print ( res . text ) # -- \u591a\u6b21\u8c03\u7528,\u6bcf\u6b21\u90fd\u5199url\u5f88\u9ebb\u70e6 get ( 'https://www.python.org' ) get ( 'https://www.python.org' ) # -- \u9ed8\u8ba4\u53c2\u6570\u5e94\u7528\u573a\u666f:\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u90fd\u662f\u8fd9\u4e2a\u503c get () get ()","title":"\u53c2\u6570\u5f62\u5f0f"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/05_%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/#_14","text":"\"\"\" \u2605 --\u5305\u7ed9\u51fd\u6570 \u5e94\u7528\u9886\u57df:\u5ef6\u8fdf\u8ba1\u7b97 \"\"\" def outer ( url ): def get (): res = requests . get ( url ) if res . status_code == 200 : print ( res . text ) return get baidu = outer ( 'https://www.baidu.com/' ) # -- \u5c06\u6307\u5b9a\u7684url\u5730\u5740\u5305\u7ed9\u4e86\u51fd\u6570 python = outer ( 'https://www.python.org' ) baidu () baidu () python () python ()","title":"\u5305\u7ed9\u51fd\u6570/\u60f0\u6027\u8ba1\u7b97"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/05_%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/#_15","text":"\u88c5\u9970\u5668\u662f\u7528\u6765\u4e3a\u88ab\u88c5\u9970\u5bf9\u8c61\u6dfb\u52a0\u989d\u5916\u529f\u80fd\u7684\u5de5\u5177/\u51fd\u6570 \u88c5\u9970\u5668\u548c\u88ab\u88c5\u9970\u8005\u90fd\u53ef\u4ee5\u662f\u4efb\u610f\u53ef\u8c03\u7528\u7684\u5bf9\u8c61.","title":"\u51fd\u6570\u88c5\u9970\u5668"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/05_%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/#_16","text":"\u8f6f\u4ef6\u7684\u7ef4\u62a4\u5e94\u8be5\u9075\u5faa \u5f00\u653e\u5c01\u95ed \u539f\u5219\uff01\u5373\u8f6f\u4ef6\u4e00\u65e6\u4e0a\u7ebf\u4e4b\u540e\u5bf9\u4fee\u6539\u6e90\u4ee3\u7801\u662f\u5c01\u95ed\u7684,\u5bf9\u6269\u5c55\u529f\u80fd\u662f\u5f00\u653e\u7684. \u56e0\u800c\u88c5\u9970\u5668\u7684\u5b9e\u73b0\u5fc5\u987b\u9075\u5faa\u4e24\u5927\u539f\u5219: (\u5728\u9075\u5faa1\u548c2\u7684\u524d\u63d0\u4e0b\u4e3a\u88ab\u88c5\u9970\u5bf9\u8c61\u6dfb\u52a0\u65b0\u529f\u80fd) 1.\u4e0d\u4fee\u6539\u88ab\u88c5\u9970\u5bf9\u8c61\u7684\u6e90\u4ee3\u7801 2.\u4e0d\u4fee\u6539\u88ab\u88c5\u9970\u5bf9\u8c61\u7684\u8c03\u7528\u65b9\u5f0f \u9700\u6c42: \u7ed9index\u51fd\u6570\u52a0\u4e0a\u7edf\u8ba1\u8fd0\u884c\u65f6\u95f4\u7684\u529f\u80fd.. import time def index (): print ( 'welcome to index!' ) time . sleep ( 3 ) \"\"\" \u2605 --\u65b9\u6848\u4e00: \u6539\u53d8\u4e86\u6e90\u4ee3\u7801 \"\"\" def index (): start = time . time () print ( 'welcome to index!' ) time . sleep ( 3 ) stop = time . time () print ( f 'run time is { stop - start } ' ) index () \"\"\" \u2605 --\u65b9\u6848\u4e8c: \u4e0d\u5177\u5907\u901a\u7528\u6027,\u7ed9\u5176\u4ed6\u51fd\u6570\u6dfb\u52a0\u6b64\u529f\u80fd\u4f1a\u91cd\u590d\u5199\u4ee3\u7801 \"\"\" def index (): print ( 'welcome to index!' ) time . sleep ( 3 ) start = time . time () index () stop = time . time () print ( f 'run time is { stop - start } ' ) \"\"\" \u2605 --\u65b9\u6848\u4e09: \u89e3\u51b3\u4e86\u91cd\u590d\u5199,\u4f46\u6539\u53d8\u4e86\u88ab\u88c5\u9970\u5bf9\u8c61\u7684\u8c03\u7528\u65b9\u5f0f \"\"\" def timmer ( func ): start = time . time () func () stop = time . time () print ( f 'run time is { stop - start } ' ) timmer ( index ) \"\"\" \u2605 --\u65b9\u6848\u56db: \u4f7f\u7528\u88c5\u9970\u5668 \"\"\" def timmer ( func ): def wrapper (): start = time . time () func () stop = time . time () print ( f 'run time is { stop - start } ' ) return wrapper index = timmer ( index ) # -- index = wrapper index ()","title":"\u5f00\u653e\u5c01\u95ed\u539f\u5219"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/05_%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/#_17","text":"import functools def dec ( func ): @functools . wraps ( func ) # -- \u4fdd\u7559\u88ab\u88c5\u9970\u51fd\u6570\u7684\u6587\u6863\u548c\u51fd\u6570\u540d\u5c5e\u6027 def wrapper ( * args , ** kwargs ): # -- *args,**kwargs \u63a5\u6536\u4f20\u7ed9\u88ab\u88c5\u9970\u51fd\u6570\u7684\u5b9e\u53c2 return func ( * args , ** kwargs ) # -- \u6ce8\u610f\u54e6,\u4e0d\u5199return \u8fd4\u56de\u7684\u662fNone # wrapper.__doc__ = func.__doc__ # wrapper.__name__ = func.__name__ return wrapper \"\"\" @dec \u7b49\u540c\u4e8e func = dec(func) dec(func) -- wrapper So,func = wrapper \"\"\" @dec def func (): pass","title":"\u65e0\u53c2\u88c5\u9970\u5668"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/05_%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/#_18","text":"import functools def func_name ( param1 , param2 ) def dec ( func ): @functools . wraps ( func ) def wrapper ( * args , ** kwargs ): # -- param1\u3001param2\u3001func\u90fd\u662fwrapper\u51fd\u6570\u7684\u81ea\u7531\u53d8\u91cf! res = func ( * args , ** kwargs ) return res return wrapper return dec \"\"\" \u5728handler\u51fd\u6570\u5b9a\u4e49\u5b8c\u540e,\u5f00\u59cb\u6267\u884c@func_name(\"\",\"\") @func_name(\"\",\"\")\u7b49\u540c\u4e8e\u6267\u884c\u8bed\u53e5 handler = func_name(\"\",\"\")(handler) func_name(\"\",\"\")(handler) -- deco(handler) -- wrapper So,handler = wrapper handler()\u8bed\u53e5\u8c03\u7528\u6267\u884c\u65f6,\u662f\u5728\u8c03\u7528wrapper() \u662f\u8fd9\u4e48\u56de\u4e8b:\u4e00\u5f00\u59cb`def handler`\u751f\u6210\u7684PyFunctionObject\u5bf9\u8c61, \u4e5f\u4e0e\u95ed\u5305\u51fd\u6570wrapper\u7684\u81ea\u7531\u53d8\u91cffunc\u8fdb\u884c\u4e86\u7ed1\u5b9a \u7136\u540e\u5c06\u95ed\u5305\u51fd\u6570wrapper\u7684\u5185\u5b58\u5730\u5740\u4f20\u9012\u7ed9\u5168\u5c40\u53d8\u91cfhandler,\u8fdb\u884c\u4e86\u8986\u76d6 \"\"\" @func_name ( \"\" , \"\" ) def handler (): pass","title":"\u6709\u53c2\u88c5\u9970\u5668"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/05_%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/#_19","text":"import time def timing ( status ): def dec ( func ): def wrapper ( * args , ** kwargs ): start = time . time () res = func ( * args , ** kwargs ) print ( f \"[ { status } ] use time: { time . time () - start } \" ) return res return wrapper return dec # -- \u8bad\u7ec3 @timing ( 'train' ) def training (): time . sleep ( 3 ) # -- c\u6d4b\u8bd5 @timing ( 'test' ) def testing (): time . sleep ( 2 ) training () testing ()","title":"\u8ba1\u65f6\u7a0b\u5e8f"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/05_%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/#_20","text":"import time current_user = { 'user' : None } # -- \u5f53\u524d\u767b\u5f55\u7528\u6237 def auth ( way = 'file' ): def dec ( func ): def wrapper ( * args , ** kwargs ): if current_user [ 'user' ]: return func ( * args , ** kwargs ) user = input ( '\u8bf7\u8f93\u5165\u7528\u6237\u540d>>:' ) pwd = input ( '\u8bf7\u8f93\u5165\u5bc6\u7801>>:' ) if way == \"file\" : # -- \u57fa\u4e8e\u6587\u4ef6\u7684\u9a8c\u8bc1 if user == 'egon' and pwd == '123' : # -- \u6a21\u62df\u4ece\u6587\u4ef6\u4e2d\u53d6\u6570\u636e current_user [ 'user' ] = user return func ( * args , ** kwargs ) else : print ( \"login fail\" ) elif way == \"ldap\" : pass # -- \u57fa\u4e8eldap\u7684\u8ba4\u8bc1 else : print ( '\u65e0\u6cd5\u8bc6\u522b\u9a8c\u8bc1\u6765\u6e90' ) return wrapper return dec @auth ( 'file' ) def index (): print ( f \"welcome to index\" ) time . sleep ( 1 ) @auth () def home ( name ): print ( f \"welcome home, { name } \" ) time . sleep ( 0.5 ) index () home ( 'dc' ) print ( index . __code__ . co_freevars ) # ('func', 'way')","title":"\u767b\u5f55\u7528\u6237\u8ba4\u8bc1"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/05_%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/#_21","text":"\u7075\u6d3b\u4f7f\u7528\u8bed\u6cd5\u7cd6@ func_dic = {} def make_route ( name ): def dec ( func ): # -- \u901a\u5e38\u662f\u8981\u518d\u5d4c\u5957\u4e00\u5c42 def wrapper(*args,**kwargs)\u7528\u4e8e\u88ab\u88c5\u9970\u51fd\u6570\u7684\u8fd0\u884c\u4ee5\u53ca\u52a0\u989d\u5916\u529f\u80fd # -- \u4f46\u8fd9\u91cc\u4e0d\u9700\u8981\u88ab\u88c5\u9970\u51fd\u6570\u7684\u8fd0\u884c.. \u4f46\u9700\u8981\u5c06\u51fd\u6570\u540d\u5bf9\u5e94\u7684pyfunctionobject\u88c5\u5728\u5b57\u5178\u4e2d func_dic [ name ] = func return func # -- \u6dfb\u52a0\u540e,\u5c31\u4e0d\u4f1a\u5f71\u54cd\u88ab\u88c5\u9970\u51fd\u6570\u539f\u6765\u7684\u8fd0\u884c\u5566 # \u82e5\u4e0d\u5199\u8fd9\u884c\u8bed\u53e5 \u5168\u5c40\u53d8\u91cff1 = None return dec @make_route ( 'select' ) # -- f1 = dec(f1) dec\u5185\u90e8\u6267\u884c\u8bed\u53e5func_dic['select'] = f1 def f1 (): print ( 'This is select func.' ) @make_route ( 'update' ) def f2 (): print ( 'This is update func.' ) # {'select': <function f1 at 0x7fe14c72d9d0>, 'update': <function f2 at 0x7fe14c72db80>} print ( func_dic ) func_dic [ 'update' ]() # This is update func. -- \u53ef\u901a\u8fc7\u5b57\u5178\u8c03\u7528\u51fd\u6570 f2 () # This is update func. -- \u539f\u51fd\u6570\u7684\u8c03\u7528\u6ca1\u6709\u5f71\u54cd","title":"\u5c06\u51fd\u6570\u88c5\u5230\u5b57\u5178\u4e2d"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/05_%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/#_22","text":"\u591a\u4e2a@\u8bed\u6cd5\u7cd6 \u88ab\u88c5\u9970\u51fd\u6570\u5b9a\u4e49\u9636\u6bb5, \u4ece\u4e0b\u5230\u4e0a\u8c03\u7528\u88c5\u9970\u5668\u51fd\u6570 \u88ab\u88c5\u9970\u51fd\u6570\u8c03\u7528\u9636\u6bb5, \u4ece\u4e0a\u5230\u4e0b\u6267\u884c\u88c5\u9970\u5668\u91cc\u7684\u95ed\u5305\u51fd\u6570 (\u7279\u522b\u8981\u6ce8\u610f fun\u662f\u5565!! fun\u662f\u4e0b\u4e00\u6b21\u8981\u8c03\u7528\u7684\u95ed\u5305\u51fd\u6570\u5bf9\u8c61,\u82e5\u63a5\u4e0b\u6765\u6ca1\u6709\u95ed\u5305\u51fd\u6570\u8c03\u7528\u4e86,\u5c31\u662ffun\u5b9a\u4e49\u65f6\u751f\u6210\u7684PyFunctionObject\u5bf9\u8c61\uff01 ) \u5b9e\u9a8c\u9a8c\u8bc1\u8bc1\u660e\u4e0a\u65b9\u7684\u7ed3\u8bba!!! \u9c81\u8fc5\u5148\u751f\u8bf4\u8fc7,\u5b9e\u8df5\u662f\u68c0\u9a8c\u771f\u7406\u7684\u552f\u4e00\u529e\u6cd5. import functools import time def timing ( status = 'train' ): print ( 'this is timing' ) # -- 0 def dec3 ( func ): print ( 'this is dec3 in timing' ) # -- 1 @functools . wraps ( func ) def wrapper3 ( * args , ** kwargs ): start = time . time () res = func ( * args , ** kwargs ) print ( '[ %s ] time: %.3f s ' % ( status , time . time () - start )) # -- 6 return res return wrapper3 return dec3 def dec1 ( func ): print ( 'this is dec1' ) # -- 3 @functools . wraps ( func ) def wrapper1 ( * args , ** kwargs ): print ( 'The wrapper in dec1' ) # -- 4 return func ( * args , ** kwargs ) return wrapper1 def dec2 ( func ): print ( 'this is dec2' ) # -- 2 @functools . wraps ( func ) def wrapper2 ( * args , ** kwargs ): print ( 'The wrapper in dec2' ) # -- 5 return func ( * args , ** kwargs ) return wrapper2 @dec1 @dec2 @timing ( status = 'test' ) def fun (): pass","title":"\u591a\u4e2a\u88c5\u9970\u5668"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/05_%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/#_23","text":"\u6ce8\u610f\u4e09\u4e2a\u88c5\u9970\u5668\u7684\u5f62\u53c2\u90fd\u662ffunc! \u7b2c\u4e00\u6b65\u6267\u884c timing('Test')(fun) \u8be5\u8bed\u53e5\u91cc\u7684func\u5c31\u662f def fun \u5b9a\u4e49\u65f6\u5168\u5c40\u53d8\u91cffun\u7ed1\u5b9a\u7684PyFunctionObject\u5bf9\u8c61; \u7b2c\u4e00\u6b65\u6267\u884c\u5b8c\u540e\u8fd4\u56de\u95ed\u5305\u51fd\u6570wrapper3, wrapper3\u4f5c\u4e3a\u7b2c\u4e8c\u6b65\u88c5\u9970\u5668\u51fd\u6570dec2\u8c03\u7528\u65f6\u7684\u5f62\u53c2. \u540c\u7406,\u7b2c\u4e8c\u6b65\u6267\u884c\u5b8c\u540e\u8fd4\u56de\u7684\u95ed\u5305\u51fd\u6570wrapper2\u4f5c\u4e3a\u7b2c\u4e09\u6b65\u88c5\u9970\u5668\u51fd\u6570dec1\u8c03\u7528\u65f6\u7684\u5f62\u53c2. \u7b2c\u4e09\u6b65\u5b8c\u6210\u540e,\u8fd4\u56de\u4e86\u95ed\u5305\u51fd\u6570wrapper1.. \u8d4b\u503c\u7ed9\u4e86\u5168\u5c40\u53d8\u91cffun (\u5168\u5c40\u53d8\u91cffun\u91cd\u65b0\u8fdb\u884c\u4e86\u7ed1\u5b9a!) # -- fun = dec1(dec2(timing('Test')(fun))) \u5148\u8fd0\u884c\u91cc\u5c42\u62ec\u53f7\u7684\u5185\u5bb9 # \u7c7b\u4f3c\u4e8e str(3+1) '4' \u4f1a\u5c06\u62ec\u53f7\u91cc\u7684\u5185\u5bb9\u5148\u8fdb\u884c\u8fd0\u7b97,\u5c06\u7ed3\u679c\u4f5c\u4e3a\u5b9e\u53c2\u4f20\u7ed9str\u51fd\u6570\u7684\u884c\u53c2 # \u6839\u636e\u7ed3\u679c,dec1(dec2(timing('Test')(fun)))\u4ece\u91cc\u5230\u5916/\u4ece\u4e0b\u5230\u4e0a\u4f9d\u6b21\u8c03\u7528\u6267\u884c\u4e86dec3\u3001dec2\u3001dec1\u88c5\u9970\u5668 # \u8fd4\u56de\u7684\u7ed3\u679c\u4f9d\u6b21\u4e3awrapper3\u3001wrapper2\u3001wrapper1 # \u5168\u5c40\u547d\u540d\u7a7a\u95f4\u91cc\u7684fun\u53d8\u91cf\u88ab\u8986\u76d6\u4e86,\u91cd\u65b0\u6307\u5411\u4e86\u95ed\u5305\u51fd\u6570wrapper1\u7684\u5185\u5b58\u5730\u5740 @dec1 @dec2 @timing ( status = 'test' ) def fun (): time . sleep ( 2 ) \"\"\" this is timing this is dec3 in timing this is dec2 this is dec1 \"\"\"","title":"\u88ab\u88c5\u9970\u51fd\u6570\u5b9a\u4e49\u9636\u6bb5"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/05_%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/#_24","text":"\u8c03\u7528\u65f6,\u8981\u6ce8\u610f!! \u5728\u6700\u5916\u5c42(\u5168\u5c40\u4f5c\u7528\u57df\u91cc), fun=wrapper1 ; \u5728 wrapper1 \u7684\u4f5c\u7528\u57df\u5185 fun=wrapper2 ; \u5728 wrapper2 \u7684\u4f5c\u7528\u57df\u5185 fun=wrapper3 @dec1 @dec2 @timing ( status = 'test' ) def fun (): time . sleep ( 2 ) # -- \u5b9e\u9a8c\u7ed3\u679c\u80fd\u5145\u5206\u8868\u660e # \u5148\u6267\u884c\u7684\u95ed\u5305\u51fd\u6570wrapper1,\u91cc\u9762\u9047\u5230func()\u65f6,\u5b9e\u5219\u8c03\u7528\u7684\u662f\u95ed\u5305\u51fd\u6570wrapper2..\u4ee5\u6b64\u7c7b\u63a8. print ( \"--- \u6211\u662f\u5206\u9694\u7b26 ---\" ) fun () \"\"\" this is timing this is dec3 in timing this is dec2 this is dec1 --- \u6211\u662f\u5206\u9694\u7b26 --- The wrapper in dec1 The wrapper in dec2 [test] time: 2.001 s \"\"\"","title":"\u88ab\u88c5\u9970\u51fd\u6570\u8c03\u7528\u9636\u6bb5"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/06_%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/","text":"\u8fed\u4ee3\u5668 \u00b6 \u8fed\u4ee3\u662f\u4ec0\u4e48 \u00b6 \u6ce8\u610f: \u8fed\u4ee3 = \u91cd\u590d + \u6bcf\u4e00\u6b21\u91cd\u590d\u7684\u7ed3\u679c\u4f5c\u4e3a\u4e0b\u4e00\u6b21\u91cd\u590d\u7684\u521d\u59cb\u503c ( \u5355\u7eaf\u7684\u91cd\u590d\u4e0d\u662f\u8fed\u4ee3 ) \"\"\" \u2605 --\u5355\u7eaf\u7684\u91cd\u590d \"\"\" while True : msg = input ( \">>: \" ) . strip () \"\"\" \u2605 --\u8fed\u4ee3 \u8be5\u7a0b\u5e8f\u4e2d\u7684while\u5faa\u73af\u662f\u4e00\u4e2a\u8fed\u4ee3\u8fc7\u7a0b,\u4e0d\u4ec5\u6ee1\u8db3\u91cd\u590d,\u800c\u4e14\u6bcf\u6b21\u91cd\u65b0\u8d4b\u503c\u540e\u7684index\u503c\u4f1a\u4f5c\u4e3a\u4e0b\u4e00\u6b21\u5faa\u73af\u4e2d\u65b0\u7684\u7d22\u5f15\u8fdb\u884c\u53d6\u503c,\u53cd\u590d\u8fed\u4ee3,\u6700\u7ec8\u53ef\u4ee5\u53d6\u5c3d\u5217\u8868\u4e2d\u7684\u503c -- \u6839\u636e\u7d22\u5f15\u7684\u65b9\u5f0f\u8fed\u4ee3\u53d6\u503c \"\"\" my_list = [ \"a\" , \"b\" , \"c\" ] def iterator ( item ): index = 0 while i < len ( item ): print ( item [ index ]) index += 1 iterator ( my_list ) \u8fed\u4ee3\u5668\u5bf9\u8c61 \u00b6 \u4e00\u65e6\u8fed\u4ee3\u5668\u53d6\u5e72\u51c0, \u518d\u7ee7\u7eed\u53d6\u5c31\u4f1a\u629b\u51faStopIteration\u5f02\u5e38 \u4e3a\u4ec0\u4e48\u9700\u8981\u8fed\u4ee3\u5668? \u00b6 Q: \u4e3a\u4ec0\u4e48\u9700\u8981\u8fed\u4ee3\u5668? A: \u53ea\u6709 \u5e8f\u5217\u7c7b\u578b(\u5217\u8868\u3001\u5143\u7956\u3001\u5b57\u7b26\u4e32)\u53ef\u4ee5 \u4f9d\u8d56\u7d22\u5f15\u7684\u65b9\u5f0f \u8fed\u4ee3\u53d6\u51fa\u5176\u5305\u542b\u7684\u5143\u7d20. \u4f46\u5b57\u5178\u3001\u96c6\u5408\u3001\u6587\u4ef6\u7b49 \u975e\u5e8f\u5217\u7c7b\u578b\u662f\u6ca1\u6709\u7d22\u5f15\u7684 ,\u8fd9\u4e9b\u7c7b\u578b\u7684\u6570\u636e\u4e5f\u60f3\u8fed\u4ee3\u4e00\u4e2a\u4e2a\u7684\u53d6\u51fa\u5185\u90e8\u7684\u5143\u7d20. \u6240\u4ee5\u9700\u8981\u627e\u5230 \u4e00\u79cd\u4e0d\u4f9d\u8d56\u7d22\u5f15\u7684\u8fed\u4ee3\u53d6\u503c\u65b9\u5f0f -- \u8fed\u4ee3\u5668 \u522b\u95eeobj.next()\u548b\u5c31\u53d6\u5230\u8fed\u4ee3\u5668\u4e2d\u7684\u503c\u4e86\u5462\uff1f\u5e95\u5c42\u548b\u5b9e\u73b0\u7684\u4ffa\u4e5f\u6653\u4e0d\u5f97..\u8981\u7814\u7a76Cpython\u6e90\u7801..\u83ab\u7ea0\u7ed3 iter() \u00b6 \u53ef\u8fed\u4ee3\u5bf9\u8c61 iterable: \u5185\u7f6e\u6709 __iter__ \u65b9\u6cd5\u7684\u5bf9\u8c61 eg: \u5e38\u89c1\u7684\u5bb9\u5668(\u5217\u8868 \u5143\u7956 \u5b57\u5178 \u96c6\u5408) \u3001\u5b57\u7b26\u4e32\u3001\u6587\u4ef6 \u8fed\u4ee3\u5668\u5bf9\u8c61 iterator: \u5185\u7f6e\u6709 __iter__ \u548c __next__ \u65b9\u6cd5\u7684\u5bf9\u8c61 eg: \u6587\u4ef6 \u2605 iterator\u4e00\u5b9a\u662fiterable,\u53cd\u4e4b\u4e0d\u4e00\u5b9a. \u53ef\u8fed\u4ee3\u5bf9\u8c61\u6267\u884c obj.__iter__() \u8fd4\u56de\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\u5bf9\u8c61 \u8fed\u4ee3\u5668\u5bf9\u8c61\u6267\u884c obj.__iter__() \u5f97\u5230\u7684\u662f\u8fed\u4ee3\u5668\u672c\u8eab (\u4e3a\u4e86for\u5faa\u73af\u80fd\u5efa\u7acb\u4e00\u79cd\u7edf\u4e00\u7684\u6807\u51c6) \u8fed\u4ee3\u5668\u5bf9\u8c61\u6267\u884c obj.__next__() \u5f97\u5230\u7684\u662f\u8fed\u4ee3\u5668\u4e2d\u7684\u4e0b\u4e00\u4e2a\u503c \u6ce8\u610f\u54e6\uff01\u62ff\u5230\u4e86\u4e00\u4e2a\u8fd4\u56de\u503c\uff01 ps: \u50cf__\u5f00\u5934, __\u7ed3\u5c3e\u7684\u9b54\u6cd5\u65b9\u6cd5,\u6211\u4eec\u4e00\u822c\u4e0d\u4f1a\u76f4\u63a5\u4f7f\u7528\u7684,\u56e0\u4e3apython\u89e3\u91ca\u5668\u4f1a\u5728\u6ee1\u8db3\u67d0\u79cd\u6761\u4ef6\u4e0b \u81ea\u52a8\u8c03\u7528 \uff01 dic = { 'a' : 1 , 'b' : 2 , 'c' : 3 } # -- \u5b57\u5178,\u975e\u5e8f\u5217\u7c7b\u578b\u7684\u6570\u636e\u4e0d\u80fd\u4f7f\u7528\u7d22\u5f15/\u4e0b\u6807 iter_dic = dic . __iter__ () # -- dic.__iter__()\u7b49\u540c\u4e8eiter(dic) while True : try : k = iter_dic . __next__ () # -- iter_dic.__next__()\u7b49\u540c\u4e8enext(iter_dic) print ( dic [ k ]) except StopIteration : # -- \u4e00\u65e6\u8fed\u4ee3\u5668\u53d6\u5e72\u51c0,\u518d\u7ee7\u7eed\u53d6\u5c31\u4f1a\u629b\u51faStopIteration\u5f02\u5e38(\u4ee3\u8868\u65e0\u503c\u53ef\u53d6) break for\u5faa\u73af\u539f\u7406 \u00b6 \u53ef\u4ee5\u7528for..in.. \u7b80\u5316\u5b9e\u73b0\u8fed\u4ee3\u7684\u8fc7\u7a0b dic = { 'a' : 1 , 'b' : 2 , 'c' : 3 } for k in dic : print ( dic [ k ]) for\u5faa\u73af\u5de5\u4f5c\u8fc7\u7a0b\u5982\u4e0b: \u5927\u524d\u63d0 : in\u540e\u9762\u7684\u5bf9\u8c61\u4e00\u5b9a\u8981\u662f\u4e2a \u53ef\u8fed\u4ee3\u5bf9\u8c61 \u25cb \u6267\u884cin\u540e\u5bf9\u8c61\u7684dic.__iter__()\u65b9\u6cd5, \u5f97\u5230\u4e00\u4e2a\u8fed\u4ee3\u5668\u5bf9\u8c61iter_dic \u25cb \u6267\u884cnext(iter_dic),\u5c06\u5f97\u5230\u7684\u503c\u8d4b\u503c\u7ed9k,\u7136\u540e\u6267\u884c\u5faa\u73af\u4f53\u4ee3\u7801 \u25cb \u91cd\u590d\u8fc7\u7a0b2, \u5468\u800c\u590d\u59cb, \u76f4\u5230\u6355\u6349\u5230StopIteration\u5f02\u5e38,\u7ed3\u675f\u8fed\u4ee3 list('abc')\u3001tuple()\u3001set()\u3001sum() \u7b49\u9700\u8981\u904d\u5386\u7684\u5185\u7f6e\u65b9\u6cd5,\u5176\u5e95\u5c42\u539f\u7406\u8ddffor\u5faa\u73af\u7c7b\u4f3c \u8c03\u7528iterable\u7684iter()\u65b9\u6cd5...\u518dnext().. # -- range()\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61; # sum()\u5e95\u5c42\u662ffor\u5faa\u73af\u7684\u673a\u5236,\u4f1a\u5c06range()\u8fd9\u4e2aIterable\u53d8\u6210Iterator! # \u5185\u5b58\u91cc\u53ea\u4f1a\u6709\u4e00\u4e2a\u503c,\u5185\u5b58\u662f\u4e0d\u4f1a\u7206\u7684! \u5c31\u662f\u8981\u7b97\u5f88\u4e45..Hhhh sum ( range ( 1000000000 )) \u8fed\u4ee3\u5668\u4f18\u7f3a\u70b9 \u00b6 \u6210\u4e5f\u60f0\u6027\u8ba1\u7b97,\u8d25\u4e5f\u60f0\u6027\u8ba1\u6570..Hhh. \u4f18\u70b9 \u00b6 1> \u4e3a\u5e8f\u5217\u548c\u975e\u5e8f\u5217\u7c7b\u578b\u63d0\u4f9b\u4e86\u4e00\u79cd\u7edf\u4e00\u7684\u8fed\u4ee3\u53d6\u503c\u65b9\u5f0f(\u53ef\u4ee5\u4e0d\u4f9d\u8d56\u7d22\u5f15) \u200b 2> \u60f0\u6027\u8ba1\u7b97/\u6d41\u5f0f\u52a0\u8f7d : \u8fed\u4ee3\u5668\u5bf9\u8c61\u8868\u793a\u7684\u662f\u4e00\u4e2a\"\u6570\u636e\u6d41\", Iterator\u5bf9\u8c61\u53ef\u4ee5\u88abnext()\u65b9\u6cd5\u4e0d\u65ad\u8c03\u7528\u5e76\u8fd4\u56de\u4e0b\u4e00\u4e2a\u6570\u636e,\u76f4\u5230\u6ca1\u6709\u6570\u636e\u65f6,\u629b\u51faStopIteration\u7684\u9519\u8bef.. \u4f46Iterator\u8ba1\u7b97\u662f\u60f0\u6027\u7684, \u53ea\u6709\u5728\u9700\u8981\u8fd4\u56de\u4e0b\u4e00\u4e2a\u6570\u636e\u65f6,\u5b83\u624d\u4f1a\u8ba1\u7b97, \u8fd9\u610f\u5473\u7740, \u540c\u4e00\u65f6\u95f4\u8fed\u4ee3\u5668\u5bf9\u8c61\u5728\u5185\u5b58\u4e4b\u4e2d\u53ea\u5b58\u5728\u4e00\u4e2a\u503c, \u56e0\u800c\u53ef\u4ee5\u5b58\u653e\u65e0\u9650\u5927\u7684\u6570\u636e\u6d41 , eg \u5168\u4f53\u81ea\u7136\u6570. \u800c\u5bf9\u4e8e\u5176\u4ed6\u5bb9\u5668\u7c7b\u5982\u5217\u8868, \u9700\u8981\u628a\u6240\u6709\u7684\u5143\u7d20\u90fd\u5b58\u653e\u4e8e\u5185\u5b58\u4e2d, \u53d7\u5185\u5b58\u5927\u5c0f\u7684\u9650\u5236, \u53ef\u4ee5\u5b58\u653e\u7684\u503c\u7684\u4e2a\u6570\u662f\u6709\u9650\u7684... \u7f3a\u70b9 \u00b6 1> \u9664\u975e\u53d6\u5c3d, \u5426\u5219\u65e0\u6cd5\u83b7\u53d6\u8fed\u4ee3\u5668\u7684\u957f\u5ea6. \u6362\u4e2a\u8bf4\u6cd5,\u53ef\u4ee5\u628a\u8fd9\u4e2aIterator\u6570\u636e\u6d41\u770b\u4f5c\u662f\u4e00\u4e2a\u6709\u5e8f\u5e8f\u5217,\u4f46\u6211\u4eec\u4e0d\u80fd\u63d0\u524d\u83b7\u53d6\u5e8f\u5217\u7684\u957f\u5ea6.. 2> \u8fed\u4ee3\u5668\u7684\u53d6\u503c\u4e0d\u5982\u6309\u7167\u7d22\u5f15\u7684\u65b9\u5f0f\u7075\u6d3b,\u53ea\u80fd\u5f80\u540e\u8d70\u4e0d\u80fd\u5f80\u524d\u9000, \u4e0d\u80fd\u7279\u5b9a\u53d6\u503c \u200b 3> \u5b83\u662f \u4e00\u6b21\u6027\u7684,\u8fed\u4ee3\u5b8c\u5c31\u6ca1\u4e86 , \u8fed\u4ee3\u5668\u4ea7\u751f\u540e\u7684\u552f\u4e00\u76ee\u6807\u5c31\u662f\u91cd\u590d\u6267\u884cnext\u65b9\u6cd5\u76f4\u5230\u503c\u53d6\u5c3d, \u5426\u5219\u5c31\u4f1a\u505c\u7559\u5728\u67d0\u4e2a\u4f4d\u7f6e\u7b49\u5f85\u4e0b\u4e00\u6b21\u8c03\u7528next ; \u82e5\u662f\u8981\u518d\u6b21\u8fed\u4ee3\u540c\u4e2a\u5bf9\u8c61, \u53ea\u80fd\u91cd\u65b0\u8c03\u7528iter\u65b9\u6cd5\u53bb\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8fed\u4ee3\u5668\u5bf9\u8c61; \u82e5\u6709\u4e24\u4e2a\u6216\u8005\u591a\u4e2a\u5faa\u73af\u4f7f\u7528\u540c\u4e00\u4e2a\u8fed\u4ee3\u5668, \u5fc5\u7136\u53ea\u4f1a\u6709\u4e00\u4e2a\u5faa\u73af\u80fd\u53d6\u5230\u503c... \"\"\"train.txt a b c d \"\"\" # -- \u9a8c\u8bc1\u8fed\u4ee3\u5668\u662f\u4e00\u6b21\u6027\u7684!! f = open ( 'train.txt' , 'r' , encoding = 'utf8' ) # -- \u54ea\u6015train.txt\u6587\u4ef6\u5927\u5c0f\u4e3a10T,\u8fd0\u884c\u6b64\u884c\u4ee3\u7801\u65f6\u90fd\u4e0d\u4f1a\u5361 # \u6587\u4ef6\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668,\u9ed8\u8ba4\u4f1a\u5c06\u6587\u4ef6\u6309\u884c\u5206\u5272\u4ee5\u60f0\u6027\u52a0\u8f7d print ( next ( f )) # a/n -- \u57fa\u4e8e\u8fed\u4ee3\u5668\u53d6\u503c,next(f)\u6bcf\u6b21\u53ea\u4f1a\u53d6\u6587\u4ef6\u7684\u4e00\u884c\u6570\u636e print ( f . __next__ ()) # b/n print ( list ( f )) # ['c\\n', 'd'] print ( list ( f )) # [] \u751f\u6210\u5668 \u00b6 \u53c2\u8003\u6587\u6863: https://www.qtmuniao.com/2019/11/03/python3-generator/ https://www.cnblogs.com/yssjun/p/10236126.html https://www.zhihu.com/column/c_1189883314197168128 \u6d45\u5c1d\u751f\u6210\u5668 \u00b6 \u4e13\u4e1a\u540d\u8bcd \u00b6 \u82e5\u51fd\u6570\u4f53\u5305\u542byield\u5173\u952e\u5b57, \u5728\u8c03\u7528\u51fd\u6570\u65f6, \u5e76\u4e0d\u4f1a\u6267\u884c\u51fd\u6570\u4f53\u4ee3\u7801 , \u5c06\u4f1a\u8fd4\u56de\u4e00\u4e2a\u751f\u6210\u5668\u5bf9\u8c61. \u51c6\u786e\u6765\u8bf4 : \u6839\u636e\u4e0a\u4e0b\u6587\u4e0d\u540c,\u751f\u6210\u5668\u6709\u5bf9\u5e94\u7684\u5b98\u65b9\u4e13\u4e1a\u540d\u8bcd\u89e3\u91ca \u540d\u8bcd \u89e3\u91ca Generator Function \u542b\u6709 yield \u5173\u952e\u5b57\u7684 \u51fd\u6570 , \u4f1a\u8fd4\u56de\u4e00\u7cfb\u5217\u503c, \u53ef\u4ee5\u4f7f\u7528 next () \u5bf9\u5176\u8fd4\u56de\u503c\u8fdb\u884c\u8fed\u4ee3. Generator Iterator generator function \u8fd4\u56de\u7684 \u5bf9\u8c61 , \u53ef\u4ee5\u8fdb\u884c\u4e00\u6b21\u6027\u5730\u8fed\u4ee3. Generator Expression \u751f\u6210\u5668\u8868\u8fbe\u5f0f . \u901a\u5e38\u4f7f\u7528\u5c0f\u62ec\u53f7\u548c for \u6765\u5b9a\u4e49. \u4e25\u683c\u6765\u8bf4,\u4f7f\u7528\u4e86yield\u7684\u51fd\u6570\u4e25\u683c\u6765\u8bb2\u5df2\u7ecf\u4e0d\u662f\u4e00\u4e2a\u51fd\u6570, \u800c\u662f\u4e00\u4e2a\u751f\u6210\u5668. Generator Function\u53ea\u80fd\u901a\u8fc7yield\u5c06\u6bcf\u6b21\u8c03\u7528\u7684\u7ed3\u679c\u8fd4\u56de\u7ed9\u8c03\u7528\u8005!! \u751f\u6210\u5668\u5185\u7f6e\u6709 __iter__ \u548c __next__ \u65b9\u6cd5, \u6240\u4ee5 \u751f\u6210\u5668\u672c\u8eab\u5c31\u662f\u4e00\u79cd\u8fed\u4ee3\u5668,\u5b83\u5177\u5907\u8fed\u4ee3\u5668\u7684\u4e00\u5207\u7279\u6027 \u4e3e\u4f8b\u5256\u6790 \u00b6 def fun (): # -- fun\u51fd\u6570\u662fGenerator Function print ( \"I'm generator function.\" ) yield print ( \"Hello.\" ) g = fun () # -- g\u662fGenerator Iterator print ( g , type ( g )) # <generator object fun at 0x7fd4a8d1bac0> <class 'generator'> print ( \"__iter__\" in dir ( g ), \"__next__\" in dir ( g )) # True True -- \u751f\u6210\u5668\u662f\u8fed\u4ee3\u5668 next()\u65b9\u6cd5\u89e6\u53d1\u51fd\u6570\u4ece\u4e0a\u5f80\u4e0b\u5f00\u59cb\u6267\u884c, \u9047\u5230yield\u5173\u952e\u5b57\u6682\u505c, \u62ff\u5230\u4e00\u4e2a\u8fd4\u56de\u503c \u6b64\u5904,\u62ff\u5230\u7684\u8fd4\u56de\u503c\u4e3aNone. res1 = next ( g ) # \u4f1a\u5148\u6253\u5370\"I'm generator function.\" print ( res1 ) # None -- \u6b64\u5904yield\u7684\u8fd4\u56de\u503c\u4e3aNone \u518d\u6267\u884cnext()\u65b9\u6cd5, \u4f1a\u4ece\u4e0a\u4e00\u6b21\u7528next\u65b9\u6cd5\u6682\u505c/\u6302\u8d77\u7684\u5730\u65b9\u7ee7\u7eed\u6267\u884c \u6240\u4ee5\u63a5\u7740\u4f1a\u5148\u6253\u5370 \"Hello.\" \u518d\u5f80\u4e0b,\u53d1\u73b0\u9047\u4e0d\u5230yield\u5566,\u6b64\u6b21\u7684next()\u5c31\u62ff\u4e0d\u5230\u8fd4\u56de\u503c\u5566 , \u62a5\u9519StopIteration \u5373 \u89e6\u53d1\u51fd\u6570\u6267\u884c\u6ca1\u6709\u9047\u5230yield\u5219\u65e0\u503c\u8fd4\u56de, \u610f\u5473\u7740\u53d6\u503c\u5b8c\u6bd5 ,\u8fed\u4ee3\u5668\u65e0\u503c\u53ef\u53d6, next()\u8bed\u53e5\u5c06\u629b\u51fa\u5f02\u5e38\u7ed3\u675f\u8fed\u4ee3 \u6ce8\u610f!! \u662fnext(g)\u62a5\u9519,\u4e0d\u662f\u51fd\u6570\u4f53\u5185\u5bb9\u62a5\u9519!!So, try..except..\u5728\u51fd\u6570\u4f53\u91cc\u4f7f\u7528\u6ca1\u7528, \u5e94\u8be5\u5bf9next(g)\u4f7f\u7528 \"\"\" \u751f\u6210\u5668\u51fd\u6570\u6bcf\u6b21\u6267\u884c\u5230yield\u4fbf\u4f1a\u8fd4\u56de,\u4e0e\u666e\u901a\u51fd\u6570\u4e0d\u540c\u7684\u662fyield\u8fd4\u56de\u65f6\u4f1a\u4fdd\u7559\u5f53\u524d\u51fd\u6570\u7684\u6267\u884c\u72b6\u6001,\u518d\u6b21\u901a\u8fc7next()\u88ab\u8c03\u7528\u65f6\u53ef\u4ee5\u4ece\u4e2d\u65ad\u7684\u5730\u65b9\u7ee7\u7eed\u6267\u884c \"\"\" g . __next__ () # \u6253\u5370Hello.\u540e StopIteration\u62a5\u9519 \u5b9e\u9645\u4e0a, \u5728\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2agenerator\u540e, \u57fa\u672c\u4e0a\u6c38\u8fdc\u4e0d\u4f1a\u8c03\u7528next(), \u800c\u662f \u901a\u8fc7for\u5faa\u73af\u6765\u8fed\u4ee3\u53d6yield\u8fd4\u56de\u7684\u503c . \u5e76\u4e14\u4e0d\u9700\u8981\u5173\u5fc3StopIteration\u7684\u9519\u8bef, for\u5faa\u73af\u4f1a\u81ea\u52a8\u5904\u7406\u8be5\u5f02\u5e38. def fun (): print ( \"I'm generator function.\" ) yield print ( \"Hello.\" ) g = fun () for iter_value in g : print ( \"iter_value:\" , iter_value ) \"\"\" I'm generator function. iter_value: None Hello. \"\"\" \u751f\u6210\u5668\u8868\u8fbe\u5f0f: \u751f\u6210\u5668\u8868\u8fbe\u5f0f\u5c31\u662f\u5c06 \u5217\u8868\u63a8\u5bfc\u5f0f \u4e2d\u7684 [] \u6539\u6210 () \u5c31\u53ef\u4ee5\u4e86 >>> a = ( i * i for i in range ( 10 )) # -- a\u662fGenerator Expression >>> type ( a ) < class ' generator '> # -- a\u6bd4b\u8282\u7701\u4e86\u4e00\u6b21\u751f\u6210\u4ee5\u4e00\u4ebf\u4e2a\u5143\u7d20\u7684\u8fc7\u7a0b,\u6240\u4ee5\u8017\u65f6\u660e\u663e\u4f1a\u6bd4\u8fed\u4ee3\u5668\u77ed a = sum (( i for i in range ( 100000000 ))) b = sum ([ i for i in range ( 100000000 )]) yield VS return \u00b6 \u53ef\u4ee5\u5c06yield\u6d45\u770b\u6210return, \u4f1a\u8fd4\u56de\u503c, \u82e5\u4e0d\u8bbe\u7f6e, \u9ed8\u8ba4\u4e3aNone, \u4f46yield\u4e0d\u4f1a\u7ed3\u675f\u51fd\u6570 yield \u662f\u4e00\u4e2a\u795e\u5947\u7684\u5173\u952e\u5b57, \u9047\u5230yield, \u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u503c, \u5e76 \u4e34\u65f6\u6302\u8d77\u5f53\u524d\u51fd\u6570 , \u8bb0\u4e0b\u5176\u4e0a\u4e0b\u6587 ( \u5305\u62ec\u5c40\u90e8\u53d8\u91cf\u3001\u5f85\u51b3\u7684 try catch \u7b49 ), \u5c06\u63a7\u5236\u6743\u8fd4\u56de\u7ed9\u51fd\u6570\u8c03\u7528\u8005. \u5f53\u4e0b\u4e00\u6b21\u4f7f\u7528 next()\u65b9\u6cd5 \u53bb Generator Iterator\u4e2d\u53d6\u503c ( \u5373 \u8c03\u7528\u5176\u6240\u5728 generator function )\u65f6 , \u4f1a\u6062\u590d\u4fdd\u5b58\u7684\u4e0a\u4e0b\u6587, \u7ee7\u7eed\u6267\u884c\u5269\u4e0b\u7684\u8bed\u53e5, \u76f4\u5230\u518d\u9047\u5230 yield \u6216\u8005\u9000\u51fa\u4e3a\u6b62.. \u4ee5 yield \u8fdb\u884c\u6267\u884c\u6d41\u63a7\u5236\u7684\u51fd\u6570\u79f0\u4e3a generator function return \u4f1a\u7ed3\u675f\u51fd\u6570\u8c03\u7528, \u9500\u6bc1\u4e0a\u4e0b\u6587 (\u5f39\u51fa\u6808\u5e27/\u547d\u540d\u7a7a\u95f4) , \u5c06\u63a7\u5236\u6743\u8fd4\u56de\u7ed9\u8c03\u7528\u8005 \u4ee5return \u8fdb\u884c\u6267\u884c\u6d41\u63a7\u5236\u7684\u51fd\u6570 \u5c31\u662f\u666e\u901a\u7684 function # -- python3\u4e2dyield\u548creturn\u653e\u4e00\u8d77\u4e0d\u4f1a\u62a5\u9519,python2\u4e2d\u4f1a >>> def fun (): yield 123 return 666 >>> g = fun () >>> g . __next__ () 123 next & send \u00b6 \u9996\u5148\u8c03\u7528 next \u5c06\u51fd\u6570\u8fd0\u884c\u81f3 yield\u540e, \u5f80\u540e\u4e0d\u8bba\u662fnext\u8fd8\u662fsend\u90fd\u4ece\u6302\u8d77\u7684yield\u5904\u5f00\u59cb,\u4ece\u4e0b\u4e00\u4e2ayield\u5904\u8fd4\u56de\u8fed\u4ee3\u503c.. \u901a\u8fc7send\u65b9\u6cd5\u53bb\u4e3a\u4e0a\u4e00\u6b21\u88ab\u6302\u8d77\u7684yield\u8bed\u53e5\u8d4b\u503c , next\u4e5f\u53ef\u4ee5,\u4e0d\u8fc7\u4f20\u7684\u662fNone\u503c! \u6267\u884c\u8fc7\u7a0b \u00b6 next(g) \u7b49\u540c\u4e8e g.send(None) \u901a\u8fc7for\u548cnext\u53ef\u4ee5\u904d\u5386\u751f\u6210\u5668, \u800csend\u5219\u53ef\u4ee5\u7528\u4e8e\u5411\u751f\u6210\u5668\u51fd\u6570\u53d1\u9001\u6d88\u606f next\u548csend\u5747\u4f1a\u89e6\u53d1Generator function\u7684\u6267\u884c/\u5747\u4f1a\u53bbGenerator Iterator\u4e2d\u53d6\u503c yield\u6302\u8d77\u51fd\u6570\u8fd4\u56de\u8fed\u4ee3\u503c 1 def yield_func (): 2 for i in range ( 1 , 5 ): # -- \u6ce8\u610f\u70b9!!! \u521d\u6b21next(gen_func)\u65f6\u5019\u9047\u5230yield\u4e0d\u4f1a\u7ed9x\u8d4b\u503c,\u76f4\u63a5\u6302\u8d77\u51fd\u6570\u8fd4\u56de\u8fed\u4ee3\u503c\u4e86. # \u5f80\u540e\u7684next()\u4f1a\u4ece\u6b64\u5904\u5f00\u59cb\u6267\u884c,next(gen_func)\u76f8\u5f53\u4e8egen_func.send(None),\u4f1a\u7ed9x\u8d4b\u503cNone 3 x = yield i # -- i\u662fyield\u8fd4\u56de\u7684\u8fed\u4ee3\u503c; # yield\u63a5\u6536\u7684\u503c\u5bf9i\u662f\u6ca1\u6709\u5f71\u54cd\u7684,\u662fyield\u63a5\u6536,\u4e0d\u662fyield i\u63a5\u6536! 4 print ( 'yield_func' , x ) 5 gen_func = yield_func () # -- next\u548csend\u5747\u4f1a\u89e6\u53d1Generator function\u7684\u6267\u884c/\u5747\u4f1a\u53bbGenerator Iterator\u4e2d\u53d6\u503c # -- next(g) \u7b49\u540c\u4e8e g.send(None) 6 print ( 'iter result: %d ' % next ( gen_func )) # iter result: 1 7 print ( 'iter result: %d ' % next ( gen_func )) # yield_func None # iter result: 2 8 print ( 'iter result: %d ' % gen_func . send ( 100 )) # yield_func 100 # iter result: 3 9 print ( 'iter result: %d ' % next ( gen_func )) # yield_func None # iter result: 4 10 print ( 'iter result: %d ' % next ( gen_func )) # \u629b\u51fa\u5f02\u5e38 \u4ee3\u7801\u7ed3\u679c\u5206\u6790\u5982\u4e0b: line_no 5 \u8c03\u7528Generator function \"yield_func\" \u5f97\u5230 Generator Iterator \"gen_func\" line_no 6 \u4f7f\u7528next\u65b9\u6cd5\u53bbgen_func\u8fd9\u4e2a\u8fed\u4ee3\u5668\u4e2d\u53d6\u503c,\u6b64\u65f6\u624d\u771f\u6b63\u7684\u5f00\u59cb\u6267\u884cyield_func\u5b9a\u4e49\u7684\u4ee3\u7801 line_no 3 \u6267\u884c\u5230yield i,\u51fd\u6570yield_func\u6682\u505c\u6267\u884c\u5e76\u8fd4\u56de\u5f53\u524di\u7684\u503c1. line_no 6 next ( gen_func ) \u5f97\u5230\u51fd\u6570yield_func\u6267\u884c\u5230yield i\u8fd4\u56de\u7684\u503c1,\u8f93\u51fa\u7ed3\u679citer result: 1 line_no 7 \u518d\u6b21\u4f7f\u7528next\u65b9\u6cd5\u53bbgen_func\u8fd9\u4e2a\u8fed\u4ee3\u5668\u4e2d\u53d6\u503c,\u4f1a\u4eceyield\u6682\u505c\u6267\u884c\u7684\u5730\u65b9\u5f00\u59cb line_no 3 next ( gen_func ) \u7b49\u540c\u4e8e gen_func.send ( None ); \u51fd\u6570yield_func\u7ee7\u7eed\u6267\u884c ,\u6240\u4ee5x\u7684\u503c\u4e3aNone. line_no 4 \u8f93\u51fa\u7ed3\u679cyield_func None line_no 3 \u6267\u884c\u5230yield i,\u51fd\u6570yield_func\u6682\u505c\u6267\u884c\u5e76\u8fd4\u56de\u5f53\u524di\u7684\u503c2. line_no 7 next ( gen_func ) \u5f97\u5230\u51fd\u6570yield_func\u8fd0\u884c\u5230yield i\u8fd4\u56de\u7684\u503c2,\u8f93\u51fa\u7ed3\u679citer result: 2 line_no 8 \u6267\u884cgen_func.send ( 100 ); line_no 3 \u51fd\u6570yield_func\u7ee7\u7eed\u6267\u884c,\u5e76\u5c06\u8c03\u7528\u8005send\u7684\u503c100\u8d4b\u503c\u7ed9x ; line_no 4 \u8f93\u51fa\u8c03\u7528\u8005send\u63a5\u6536\u5230\u7684\u503c ; \u8f93\u51fa\u7ed3\u679cyield_func 100 line_no 3 \u6267\u884c\u5230yield i,\u51fd\u6570yield_func\u6682\u505c\u6267\u884c\u5e76\u8fd4\u56de\u5f53\u524di\u7684\u503c3. line_no 8 gen_func.send ( 100 ) \u5f97\u5230\u51fd\u6570yield_func\u8fd0\u884c\u5230yield i\u8fd4\u56de\u7684\u503c2,\u8f93\u51fa\u7ed3\u679citer result: 3 line_no 9 \u540c\u7406.\u7565. line_no 10 yield_func\u53ea\u4f1a\u4ea7\u751f4\u4e2ayield,yield\u53ea\u4f1a\u8fd4\u56de4\u4e2a\u8fed\u4ee3\u503c \u4f46\u662f\u6211\u4eec\u8fed\u4ee3\u8c03\u7528\u4e865\u6b21 ,\u4f1a\u629b\u51fa\u5f02\u5e38StopIteration yield\u8868\u8fbe\u5f0f!! \u00b6 \u9700\u8981\u9996\u5148\u8c03\u7528 next \u5c06\u51fd\u6570\u8fd0\u884c\u81f3 yield \u5904, \u624d\u80fd\u901a\u8fc7 generator.send \u7ed9 generator \u4f20\u9001\u5bf9\u8c61, \u9664\u975egenerator.send(None) \u5426\u5219\u62a5\u9519! \u5728\u8c03\u7528send\u65b9\u6cd5\u4e4b\u524d, \u8fd8\u662f\u5148\u8c03\u7528\u4e00\u6b21next\u65b9\u6cd5\u4e3a\u597d, \u8fd9\u6837\u8f83\u4e3a\u89c4\u8303.. In [ 1 ]: def eater (): ... : print ( \"Realy to eat.\" ) ... : food_list = [] ... : while True : ... : food = yield food_list ... : food_list . append ( food ) ... : In [ 2 ]: g = eater () In [ 3 ]: g . send ( '\u9e21' ) --------------------------------------------------------------------------- TypeError Traceback ( most recent call last ) < ipython - input - 9 - 47324 ef7a4ae > in < module > ----> 1 g . send ( '\u9e21' ) # -- \u65e0\u6cd5\u5c06\u975eNone\u503c\u53d1\u9001\u5230\u521a\u542f\u52a8\u7684\u751f\u6210\u5668 TypeError : can 't send non-None value to a just-started generator In [ 4 ]: next ( g ) Realy to eat . Out [ 4 ]: [] In [ 5 ]: g . send ( '\u9e21' ) Out [ 5 ]: [ '\u9e21' ] In [ 6 ]: g . send ( '\u9e2d' ) Out [ 6 ]: [ '\u9e21' , '\u9e2d' ] In [ 7 ]: next ( g ) Out [ 7 ]: [ '\u9e21' , '\u9e2d' , None ] In [ 7 ]: g . send ( '\u9c7c' ) Out [ 7 ]: [ '\u9e21' , '\u9e2d' , None , '\u9c7c' ] \u6269\u5c55: \u53ef\u4ee5\u7f16\u5199 \u88c5\u9970\u5668 \u6765\u63d0\u524d\u5c06\u51fd\u6570\u8fd0\u884c\u81f3 yield \u5904.. (\u8fd9\u6837\u7684\u8bdd\u751f\u6210\u5668\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528send) def dec ( fun ): def wrapper ( * args , ** kwargs ): g = fun () next ( g ) return g return wrapper @dec def eater (): print ( \"Realy to eat.\" ) food_list = [] while True : food = yield food_list food_list . append ( food ) g = eater () g . send ( '\u9e21' ) # -- \u4e0d\u9700\u8981\u5148\u4f7f\u7528next\u5566 \u51fd\u6570\u4e2d\u6709\u591a\u4e2ayield \u00b6 >>> def func (): ... a = yield 123 ... print ( \"a\u503c\u4e3a:\" , a ) ... yield 456 ... print ( 'end' ) ... >>> g = func () >>> next ( g ) 123 >>> next ( g ) a\u503c\u4e3a : None 456 >>> next ( g ) end Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > StopIteration \u5e94\u7528\u5b9e\u4f8b \u00b6 \u6590\u6ce2\u90a3\u5951\u6570\u5217 \u00b6 Fibonacci\u6570\u5217\u7684\u6570\u5b66\u8868\u8fbe\u5f0f a , b = b , a + b \"\"\" \u2605 --\u666e\u901a\u51fd\u6570 \"\"\" def func ( index ): a , b = 0 , 1 i = 0 print ( a ) while i < index : print ( b ) a , b = b , a + b i += 1 func ( 10 ) \"\"\" \u2605 --\u751f\u6210\u5668 \"\"\" def func ( index ): a , b = 0 , 1 i = 0 print ( a ) while i < index : yield b a , b = b , a + b i += 1 for i in func ( 10 ): print ( i ) # --- \u903b\u8f91\u7b49\u540c\u4e8e def fib (): a = b = 1 yield a yield b while 1 : a , b = b , a + b yield b g = fib () for num in fib (): if num > 10 : break print ( num ) \u6a21\u62dflinux\u76d1\u63a7\u6587\u4ef6 \u00b6 \u7528yield\u751f\u6210\u5668\u6a21\u62dfLinux\u4e2d\u547d\u4ee4: tail -f file | grep python \u52a8\u6001\u5b9e\u65f6\u68c0\u6d4bwarn.log\u4e2d\u662f\u5426\u65b0\u589e\u65b0\u7684\u884c, \u82e5\u65b0\u589e\u7684\u884c\u5305\u542bpython,\u5219\u4f1a\u6253\u5370\u8be5\u884c; \"\"\" \u6ce8\u610f\u7a0b\u5e8f\u53ea\u68c0\u6d4b\u65b0\u589e\u7684\u65e5\u5fd7\u4fe1\u606f! \u5f53\u7a0b\u5e8f\u8fd0\u884c\u65f6,\u82e5warn.log\u6587\u4ef6\u4e2d\u672b\u5c3e\u6709\u65b0\u589e\u4e00\u884c,\u4e14\u8be5\u884c\u5305\u542bpython,\u8be5\u884c\u5c31\u4f1a\u88ab\u6253\u5370\u51fa\u6765 \u82e5\u6253\u5f00warn.log\u65f6,\u672b\u5c3e\u5df2\u7ecf\u6709\u4e86\u4e00\u884c\u5305\u542bpython,\u8be5\u884c\u4e0d\u4f1a\u88ab\u6253\u5370,\u56e0\u4e3af.seek(0,2)\u79fb\u52a8\u5230\u4e86\u6587\u4ef6EOF\u5904 \"\"\" def tail ( f ): # -- \u79fb\u52a8\u5230\u6587\u4ef6\u7684EOF\u6700\u540e f . seek ( 0.2 ) while 1 : # -- \u8bfb\u53d6\u6587\u4ef6\u4e2d\u65b0\u7684\u6587\u672c\u884c line = f . readline () if not line : continue # -- \u4e00\u76f4\u5728\u7b49\u5f85\u6587\u672c\u8f93\u5165,\u6ca1\u6709\u5c31\u8df3\u8fc7 [step3] # -- yield \u51fa\u6bcf\u4e00\u884c\u7684\u6570\u636e yield line # -- \u82e5\u6709\u6587\u672c\u8f93\u5165,\u8fd4\u56de\u8fed\u4ee3\u503c [step4] \"\"\" >>> \"abc\" in \"afadabcfg\" True \"\"\" def grep ( lines , search_text ): for line in lines : # -- g_tail\u751f\u6210\u5668\u5f00\u59cb\u8fd0\u884c [step2] if search_text in line : yield line # -- \u82e5\u5176\u4e2d\u5305\u542bpython\u5b57\u7b26\u4e32,\u8fd4\u56de\u8be5\u884c [step5] if __name__ == '__main__' : g_tail = tail ( open ( 'warn.log' )) g_grep = grep ( g_tail , 'python' ) for line in g_grep : # -- g_grep\u751f\u6210\u5668\u5f00\u59cb\u8fd0\u884c [step1] print ( line ) \u5904\u7406\u5927\u6587\u4ef6 \u00b6 \u5927\u6587\u4ef6(\u6bd4\u5982\u8bf4 8G) , \u4f46\u7535\u8111\u5185\u5b58\u53ea\u67094G \"\"\" \u2605 --\u6587\u672c\u7c7b\u578b\u6587\u4ef6 \u6587\u672c\u672c\u8eab\u5c31\u662f\u8fed\u4ee3\u5668 \"\"\" with open ( 'your_big_file.txt' ) as f : for line in f : do_someting ( line ) \"\"\" \u2605 --\u5176\u4ed6\u7c7b\u578b\u6587\u4ef6 \"\"\" def read_by_chunks ( file , chunk_size = 1024 ): while True : data = file . read ( chunk_size ) if not data : break yield data f = open ( 'your_big_file.dat' ) for chunk in read_by_chunks ( f ): do_someting ( chunk ) \"\"\" \u2605 --\u8865\u5145:\u7edf\u8ba1a.txt\u6587\u672c\u6587\u4ef6\u4e2d\u6700\u957f\u7684\u884c\u7684\u957f\u5ea6 \u5217\u8868\u8868\u8fbe\u5f0f\u662f\u7ed9\u4f60\u4e00\u5927\u7b50\u9e21\u86cb,\u91cc\u9762\u7684\u9e21\u86cb\u6570\u662f\u6709\u9650\u7684,\u4e0d\u7136\u7b50(\u5185\u5b58)\u88c5\u4e0d\u4e0b; \u751f\u6210\u5668\u8868\u8fbe\u5f0f\u662f\u7ed9\u4f60\u4e00\u53ea\u9e21,\u6233\u4e00\u4e0b\u7ed9\u4f60\u4e00\u4e2a\u86cb,\u86cb\u7684\u6570\u91cf\u53ef\u4ee5\u65e0\u9650\u591a. \"\"\" # -- \u6587\u672c\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668,\u6240\u4ee5open\u6253\u5f00\u6587\u4ef6\u65f6,\u4e0d\u4f1a\u5c06\u5176\u5168\u90e8\u52a0\u8f7d\u8fdb\u5185\u5b58 # \u4f7f\u7528for\u5faa\u73af\u5bf9\u6587\u672c\u904d\u5386\u65f6,\u53d6\u51fa\u4e00\u884c\u884c\u7684\u6570\u636e # \u4e0b\u65b9\u4f7f\u7528\u5217\u8868\u751f\u6210\u5f0f\u548c\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u6700\u5927\u7684\u533a\u522b\u5728\u4e8e # \u7ed3\u5408max()\u51fd\u6570\u540e,\u4ea7\u751f\u7684\u5faa\u73af,\u524d\u8005\u67092\u6b21,\u540e\u8005\u53ea\u6709\u4e00\u6b21 \uff08\u524d\u8005\u5b58\u50a8\u5217\u8868\u6570\u636e\u8fd8\u591a\u5360\u7528\u4e00\u70b9\u5185\u5b58). # \u524d\u80052\u6b21: f\u6587\u4ef6\u7684\u5faa\u73af,data\u5217\u8868\u7684\u5faa\u73af \u540e\u80051\u6b21: f\u6587\u4ef6\u7684\u5faa\u73af with open ( 'a.txt' , 'rt' , encoding = 'utf-8' ) as f : # data = [len(line) for line in f] g = ( len ( line ) for line in f ) print ( max ( g )) # -- \u82e5\u653e\u5728\u8fd9,\u867d\u7136g\u662f\u5168\u5c40\u53d8\u91cf,\u4f46\u751f\u6210\u5668\u4ee3\u7801\u91cc\u9762\u6709\u5bf9f\u7684\u5faa\u73af,\u4e0a\u4e0b\u6587\u91cc\u7684f\u6587\u4ef6\u5df2\u7ecf\u5173\u95ed\u4e86.\u4f1a\u62a5\u9519 # -- (\u5982\u679c\u662f print(max(data)),\u653e\u5728\u8fd9\u5c31\u4e0d\u4f1a\u62a5\u9519,\u56e0\u4e3a\u5217\u8868\u6570\u636e\u90fd\u5728\u5185\u5b58\u91cc) print ( max ( g )) yield\u751f\u6210\u5668\u8fd8\u6709\u8bb8\u591a\u5e94\u7528\u573a\u666f: 1> \u7528\u4e8e\u7b80\u5355\u7684\u534f\u7a0b\u6848\u4f8b -- \u751f\u6210\u8005\u6d88\u8d39\u8005. 2> \u904d\u5386\u4e00\u4e2a\u6839\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\u5e76\u6839\u636e\u9700\u8981\u8fdb\u884c\u589e\u5220\u6539\u67e5. \u5206\u6790: \u9884\u5148\u904d\u5386\u4e14\u7f13\u5b58\u7ed3\u679c, \u4f46\u662f\u76ee\u5f55\u4e0b\u6587\u4ef6\u53ef\u80fd\u5f88\u591a, \u800c\u4e14\u4f1a\u52a8\u6001\u6539\u53d8; \u5982\u679c\u4e0d\u7f13\u5b58, \u591a\u4e2a\u5730\u65b9\u53ef\u80fd\u4f1a\u9891\u7e41\u7684\u9700\u8981\u8bbf\u95ee\u8fd9\u4e00\u7ed3\u679c\u5bfc\u81f4\u6548\u7387\u4f4e\u4e0b.. \u8fd9\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528yield\u5b9a\u4e49\u4e00\u4e2a\u751f\u6210\u5668\u51fd\u6570 \u9ad8\u9636\u51fd\u6570 \u00b6 \u51fd\u6570 \u529f\u80fd map \u52a0\u5de5 filter \u7b5b\u9009 reduce \u5bf9\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u5143\u7d20\u8fdb\u884c\u7d2f\u79ef zip \u4e00\u4e00\u5bf9\u5e94\u7684'tuple' enumerate \u4e0b\u6807\u548c\u5143\u7d20\u7ec4\u6210\u7684'tuple' map\u3001filter\u3001zip\u3001enumerate\u8fd4\u56de\u7684\u90fd\u662f\u8fed\u4ee3\u5668\u5bf9\u8c61. (\u6ce8\u610f, \u5b83\u4eec\u8fd4\u56de\u7684\u90fd\u4e0d\u662f\u751f\u6210\u5668\u5bf9\u8c61) map\u3001filter\u3001reduce\u4e00\u822c\u60c5\u51b5\u4e0b,\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u51fd\u6570,\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662fiterable. range(5)\u4ec5\u4ec5\u53ea\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61!!! map\u53d6\u53ef\u8fed\u4ee3\u5bf9\u8c61\u91cc\u7684\u5143\u7d20\u8fdb\u884c\u52a0\u5de5!\u4e0d\u4f1a\u5bf9\u53ef\u8fed\u4ee3\u5bf9\u8c61\u9020\u6210\u5f71\u54cd..\u5143\u7d20\u662f\u53ef\u53d8\u7c7b\u578b\u7684\u65f6\u5019\u8981\u601d\u8003\u4e0b! >>> a = [[ 1 , 2 , 3 ]] >>> list ( map ( lambda x : x . append ( 1 ), a )) [ None ] >>> a # -- \u4f9d\u65e7\u662f\u5f15\u7528\u8bed\u4e49! [[ 1 , 2 , 3 , 1 ]] >>> list ( map ( str , a )) [ '[1, 2, 3, 1]' ] >>> a [[ 1 , 2 , 3 , 1 ]] map list ( map ( str ,[ 1 , 2 , 3 ])) # -- ['1', '2', '3'] x , y , z = map ( str , range ( 3 )) # -- \"0\" \"1\" \"2\" list ( map ( list , zip ( * [[ 1 , 2 , 3 ],[ 4 , 5 , 6 ]]))) # -- [[1,4],[2,5],[3,6]] >>> a , b , c = map ( str , sorted ( x )) >>> a '1' >>> b '2' >>> c '3' filter \u5185\u7f6e\u7684filter()\u51fd\u6570\u6709\u4e24\u4e2a\u53c2\u6570 \u7b2c\u4e00\u4e2a\u53c2\u6570\u53ef\u4ee5\u662f\u4e00\u4e2a\u51fd\u6570\u4ea6\u53ef\u4ee5\u662fNone\u503c 1> \u82e5\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f \u51fd\u6570 , \u5219\u5c06\u7b2c\u4e8c\u4e2a\u53c2\u6570 \u53ef\u8fed\u4ee3\u6570\u636e \u91cc\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u51fd\u6570\u7684\u53c2\u6570\u8fdb\u884c\u8ba1\u7b97 \u628a\u8fd4\u56de\u4e3aTrue\u7684\u503c\u7b5b\u9009\u51fa\u6765; 2> \u82e5\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f None\u503c , \u5219\u76f4\u63a5\u5c06\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e2d\u4e3aTrue\u7684\u503c\u7b5b\u9009\u51fa\u6765. list ( filter ( None ,[ 0 , 1 , 2 , 3 , 0 , 0 , 0 ])) # -- [1, 2, 3] reduce reduce(function, iterable[, initializer]) function -- \u51fd\u6570,\u6709\u4e24\u4e2a\u53c2\u6570 iterable -- \u53ef\u8fed\u4ee3\u5bf9\u8c61 initializer -- \u53ef\u9009, \u521d\u59cb\u53c2\u6570 >>> from functools import reduce >>> reduce ( lambda x , y : x + y , [ 1 , 2 , 3 , 4 , 5 ], 10 ) 25 # -- reduce\u8ba1\u7b971\u523011\u7684\u9636\u4e58 # -- \u5176\u5b9e\u73b0\u8fc7\u7a0b\u5c31\u662f `a=1,b=2` \u2014> `return a*b=2` \u2014> `a = a*b = 2,b=3` \u4ee5\u6b64\u7c7b\u63a8 In [ 15 ]: reduce ( lambda a , b : a * b , range ( 1 , 11 )) Out [ 15 ]: 3628800 \u9012\u5f52 \u00b6 \u6982\u5ff5 \u00b6 \u9012\u5f52\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u5d4c\u5957\u8c03\u7528! \u5728\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u7684\u8fc7\u7a0b\u4e2d,\u53c8\u76f4\u63a5\u6216\u95f4\u63a5\u5730\u8c03\u7528\u4e86\u8be5\u51fd\u6570\u672c\u8eab. \u9012\u5f52\u6709\u4e24\u4e2a\u660e\u786e\u7684\u9636\u6bb5: \u9012\u63a8: \u4ece\u5916\u5411\u91cc\u4e00\u5c42\u4e00\u5c42\u9012\u5f52\u8c03\u7528\u4e0b\u53bb, \u6ce8\u610f\u6bcf\u8fdb\u5165\u4e0b\u4e00\u5c42\u9012\u5f52, \u9012\u5f52\u95ee\u9898\u7684\u89c4\u6a21\u5fc5\u987b\u6709\u6240\u51cf\u5c11 \u56de\u6eaf: \u4ece\u91cc\u5411\u5916\u5f00\u59cb\u4e00\u5c42\u4e00\u5c42\u56de\u6eaf. \u9012\u5f52\u5fc5\u987b\u8981\u6709\u4e00\u4e2a\u660e\u786e\u7684\u7ed3\u675f\u6761\u4ef6,\u5728\u6ee1\u8db3\u8be5\u6761\u4ef6\u7684\u65f6\u5019,\u7ed3\u675f\u9012\u63a8\u9636\u6bb5,\u5f00\u59cb\u56de\u6eaf.. \u9012\u5f52\u7684\u7cbe\u9ad3\u5728\u4e8e\u901a\u8fc7\u4e0d\u65ad\u5730 \u91cd\u590d \u903c\u8fd1\u4e00\u4e2a\u6700\u7ec8\u7684\u7ed3\u679c. \u91cd\u590d\u4e24\u5b57, \u8fd8\u4f1a\u60f3\u5230while\u5faa\u73af, \u9012\u5f52\u80fd\u5b9e\u73b0\u7684while\u5faa\u73af\u7406\u8bba\u4e0a\u90fd\u80fd\u5e72,\u4f46\u67d0\u4e9b\u573a\u666f\u4e0b\u9012\u5f52\u5b9e\u73b0\u4f1a\u7b80\u5355\u5f88\u591a. import sys print ( sys . getrecursionlimit ()) # -- \u9ed8\u8ba4\u5141\u8bb8\u7684\u9012\u5f52\u5c42\u65701000 sys . setrecursionlimit ( 3000 ) # -- \u53ef\u4ee5\u81ea\u5df1\u8bbe\u7f6e\u9012\u5f52\u5c42\u6570 \"\"\" \u2605 --\u76f4\u63a5\u8c03\u7528 \"\"\" def foo (): print ( 'from foo' ) foo () # -- \u65e0\u9650\u5957\u5a03 # -- \u8c03\u7528\u51fd\u6570,\u5c31\u5f00\u8f9f\u4e00\u5757\u547d\u540d\u7a7a\u95f4,\u7ed3\u675f\u624d\u4f1a\u56de\u6536\u7a7a\u95f4 # \u5728\u8fd8\u672a\u7ed3\u675f\u7684\u51fd\u6570\u91cc\u9762\u53c8\u8c03\u7528\u4e86\u8be5\u51fd\u6570,\u53c8\u5f00\u8f9f\u4e86\u4e00\u5757\u547d\u540d\u7a7a\u95f4..\u5982\u6b64\u5f80\u590d,\u76f4\u5230\u5185\u5b58\u88ab\u6491\u7206. # \u5b98\u65b9\u6587\u6863: \u6bcf\u6b21\u9012\u5f52\u8c03\u7528\u90fd\u4f1a\u6709\u81ea\u5df1\u7684\u672c\u5730\u547d\u540d\u7a7a\u95f4 foo () \"\"\" \u2605 --\u95f4\u63a5\u8c03\u7528 \"\"\" def bar (): foo () def foo (): bar () foo () \u5e94\u7528 \u00b6 \u7ecf\u5178\u6848\u4f8b:\u7b97\u5e74\u9f84 \u00b6 \u540e\u4e00\u4e2a\u4eba\u59cb\u7ec8\u6bd4\u524d\u4e00\u4e2a\u4eba\u59272\u5c81, \u5df2\u77e5\u7b2c\u4e00\u4e2a\u4eba26\u5c81, \u6c42\u7b2cn\u4e2a\u4eba\u7684\u5e74\u9f84 \"\"\" \u2605 --\u9012\u5f52\u7b97\u5e74\u9f84 \u4ece\u4e0a\u5230\u4e0b\u662f\u9012\u63a8\u8fc7\u7a0b \u4ece\u4e0b\u5230\u4e0a\u662f\u4f9d\u6b21return\u56de\u6eaf\u8fc7\u7a0b(26+2+2+2+2) age(5) -- return age(4) + 2 age(4) -- return age(3) + 2 age(3) -- return age(2) + 2 age(2) -- return age(1) + 2 age(1) -- return 26 \u6267\u884cage(5),\u60f3\u8981age(5)\u7684return\u8bed\u53e5\u5b8c\u6210\u6267\u884c,\u5f97\u5148\u77e5\u9053age(4)\u662f\u591a\u5c11\u4e0e2\u8fd0\u7b97\u540e\u624d\u80fdreturn\u5427?! \u4ee5\u6b64\u7c7b\u63a8,\u76f4\u5230\u5f97\u5230\u4e86age(1)\u7684\u503c. age(1)\u3001age(2)...age(5)\u4e2d\u7684return\u8bed\u53e5\u624d\u80fd\u4f9d\u6b21\u5b8c\u6210\u6267\u884c!! \"\"\" def age ( n ): if n == 1 : return 26 return age ( n - 1 ) + 2 # -- \u63a2\u8ba8 \u82e5\u5c06`return age(n-1) +2` \u6362\u6210 `print(age(n-1) +2)`, \u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f # \u56e0\u4e3a\u6ca1\u6709\u5199return\u8bed\u53e5,\u90a3\u4e48age(2)\u7684\u8fd4\u56de\u503c\u5c06\u662fNone # \u6253\u537028\u540e,\u4f1a\u62a5TypeError\u7684\u9519\u8bef:'NoneType' and 'int'\u4e0d\u80fd\u76f8\u52a0 # -- \u63a2\u8ba8: \u6539\u5199\u6210`age(n - 1)`\u8bed\u53e5,\u4f1a\u662f\u600e\u6837\u4e00\u4e2a\u8fc7\u7a0b? # age(5)\u8981\u7b49age(4)\u8fd0\u884c\u5b8c\u540e\u624d\u4f1a\u91ca\u653e\u7a7a\u95f4,age(4)\u8981\u5f97age(3)\u6267\u884c\u5b8c\u540e\u624d\u4f1a\u91ca\u653e\u7a7a\u95f4..\u4ee5\u6b64\u7c7b\u63a8 # \u6240\u4ee5\u54ea\u6015\u6ca1\u5199return\u8bed\u53e5,\u4e5f\u662f\u6709\u56de\u6eaf\u8fc7\u7a0b\u7684.. # \u53ea\u4e0d\u8fc7age(1)\u8fd4\u56de\u503c26\u88abage(2)\u63a5\u6536\u540e,age(2)\u8fd4\u56de\u7ed9age(3)\u7684\u503c\u4e3aNone. def age ( n ): if n == 1 : return 26 age ( n - 1 ) # -- return None \u8fd9\u662f\u4e00\u6761\u9690\u5f62\u7684\u8bed\u53e5 print ( age ( 5 )) # -- None # -- \u63a2\u8ba8: \u6539\u5199\u6210`return age(n - 1)`\u8bed\u53e5,\u4f1a\u662f\u600e\u6837\u4e00\u4e2a\u8fc7\u7a0b? # -- age(1)return 26\u7684\u8fd4\u56de\u503c\u7ed9\u4e86 age(2); age(3)\u518d\u7ed9age(4);\u6700\u540e26\u7ed9\u5230\u4e86age(5) def age ( n ): if n == 1 : return 26 return age ( n - 1 ) print ( age ( 5 )) # -- 26 \u53d6\u5d4c\u5957\u5217\u8868\u4e2d\u7684\u503c \u00b6 my_list = [ 1 , [ 2 , [ 3 , [ 4 , [ 5 , [ 6 ]]]]]] res = [] def tell ( data ): for item in data : if type ( item ) is list : # -- \u7a0b\u5e8f\u4e0d\u65ad\u8c03\u7528\u65b0\u7684tell()\u9012\u63a8\u4e0b\u53bb,\u76f4\u5230\u9012\u5f52\u5230tell([6])\u65f6,\u4f1a\u8fd4\u56deNone\u503c,\u5f00\u59cb\u56de\u6eaf # -- \u5199\u4e0d\u5199\u8fd9\u4e2areturn\u90fd\u4e0d\u5f71\u54cd\u6700\u540e\u7ed3\u679c return tell ( item ) else : res . append ( item ) tell ( my_list ) print ( res ) # -- [1, 2, 3, 4, 5, 6] # -- \u8bf7\u5206\u6790\u4e0b\u4e0b\u65b9\u4ee3\u7801\u7684\u5b9e\u73b0\u8fc7\u7a0b.(\u5f53\u65f6\u81ea\u4e2a\u513f\u662f\u60f3\u5982\u6b64\u89e3\u51b3,\u4f46\u611f\u89c9\u591a\u6b64\u4e00\u4e3e.) my_list = [ 1 , [ 2 , [ 3 , [ 4 , [ 5 , [ 6 ]]]]]] res = [] def tell ( data ): for item in data : if type ( item ) is list : for i in tell ( item ): res . append ( i ) else : yield item for i in tell ( my_list ): res . append ( i ) print ( res ) # -- [1, 2, 3, 4, 5, 6] \u4e8c\u5206\u6cd5 \u00b6 nums = [ 1 , 3 , 7 , 11 , 22 , 44 , 78 , 111 , 149 , 435 ] # -- \u7a0b\u5e8f\u4e2d\u5199\u4e0d\u5199return\u90fd\u4e0d\u4f1a\u5f71\u54cd\u7ed3\u679c. def num_find ( nums , search_num ): mid_index = len ( nums ) // 2 ''' if mid_index == 0: print('not exists.') return ''' # -- \u82e5\u9012\u63a8\u5230\u540e\u9762,nums\u4e2d\u53ea\u6709\u4e00\u4e2a\u5143\u7d20,\u5176nums[:0]\u3001nums[1:]\u7684\u503c\u90fd\u5c06\u4e3a[] # -- \u7a7a\u5217\u8868\u518d\u8fdb\u884c\u9012\u63a8,\u5bf9\u7a7a\u5217\u8868\u4e0b\u6807\u53d6\u503c\u4f1a\u62a5\u7d22\u5f15\u8d8a\u754c\u7684\u9519\u8bef!!! if mid_index != 0 : if nums [ mid_index ] > search_num : # search_num in the left return num_find ( nums [: mid_index ], search_num ) elif nums [ mid_index ] < search_num : # search_num in the right return num_find ( nums [ mid_index + 1 :], search_num ) else : # nums[mid_index] == search_num print ( 'find it.' ) else : print ( 'not exists.' ) num_find ( nums , 10 )","title":"\u51fd\u6570\u8fdb\u9636"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/06_%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/#_1","text":"","title":"\u8fed\u4ee3\u5668"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/06_%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/#_2","text":"\u6ce8\u610f: \u8fed\u4ee3 = \u91cd\u590d + \u6bcf\u4e00\u6b21\u91cd\u590d\u7684\u7ed3\u679c\u4f5c\u4e3a\u4e0b\u4e00\u6b21\u91cd\u590d\u7684\u521d\u59cb\u503c ( \u5355\u7eaf\u7684\u91cd\u590d\u4e0d\u662f\u8fed\u4ee3 ) \"\"\" \u2605 --\u5355\u7eaf\u7684\u91cd\u590d \"\"\" while True : msg = input ( \">>: \" ) . strip () \"\"\" \u2605 --\u8fed\u4ee3 \u8be5\u7a0b\u5e8f\u4e2d\u7684while\u5faa\u73af\u662f\u4e00\u4e2a\u8fed\u4ee3\u8fc7\u7a0b,\u4e0d\u4ec5\u6ee1\u8db3\u91cd\u590d,\u800c\u4e14\u6bcf\u6b21\u91cd\u65b0\u8d4b\u503c\u540e\u7684index\u503c\u4f1a\u4f5c\u4e3a\u4e0b\u4e00\u6b21\u5faa\u73af\u4e2d\u65b0\u7684\u7d22\u5f15\u8fdb\u884c\u53d6\u503c,\u53cd\u590d\u8fed\u4ee3,\u6700\u7ec8\u53ef\u4ee5\u53d6\u5c3d\u5217\u8868\u4e2d\u7684\u503c -- \u6839\u636e\u7d22\u5f15\u7684\u65b9\u5f0f\u8fed\u4ee3\u53d6\u503c \"\"\" my_list = [ \"a\" , \"b\" , \"c\" ] def iterator ( item ): index = 0 while i < len ( item ): print ( item [ index ]) index += 1 iterator ( my_list )","title":"\u8fed\u4ee3\u662f\u4ec0\u4e48"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/06_%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/#_3","text":"\u4e00\u65e6\u8fed\u4ee3\u5668\u53d6\u5e72\u51c0, \u518d\u7ee7\u7eed\u53d6\u5c31\u4f1a\u629b\u51faStopIteration\u5f02\u5e38","title":"\u8fed\u4ee3\u5668\u5bf9\u8c61"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/06_%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/#_4","text":"Q: \u4e3a\u4ec0\u4e48\u9700\u8981\u8fed\u4ee3\u5668? A: \u53ea\u6709 \u5e8f\u5217\u7c7b\u578b(\u5217\u8868\u3001\u5143\u7956\u3001\u5b57\u7b26\u4e32)\u53ef\u4ee5 \u4f9d\u8d56\u7d22\u5f15\u7684\u65b9\u5f0f \u8fed\u4ee3\u53d6\u51fa\u5176\u5305\u542b\u7684\u5143\u7d20. \u4f46\u5b57\u5178\u3001\u96c6\u5408\u3001\u6587\u4ef6\u7b49 \u975e\u5e8f\u5217\u7c7b\u578b\u662f\u6ca1\u6709\u7d22\u5f15\u7684 ,\u8fd9\u4e9b\u7c7b\u578b\u7684\u6570\u636e\u4e5f\u60f3\u8fed\u4ee3\u4e00\u4e2a\u4e2a\u7684\u53d6\u51fa\u5185\u90e8\u7684\u5143\u7d20. \u6240\u4ee5\u9700\u8981\u627e\u5230 \u4e00\u79cd\u4e0d\u4f9d\u8d56\u7d22\u5f15\u7684\u8fed\u4ee3\u53d6\u503c\u65b9\u5f0f -- \u8fed\u4ee3\u5668 \u522b\u95eeobj.next()\u548b\u5c31\u53d6\u5230\u8fed\u4ee3\u5668\u4e2d\u7684\u503c\u4e86\u5462\uff1f\u5e95\u5c42\u548b\u5b9e\u73b0\u7684\u4ffa\u4e5f\u6653\u4e0d\u5f97..\u8981\u7814\u7a76Cpython\u6e90\u7801..\u83ab\u7ea0\u7ed3","title":"\u4e3a\u4ec0\u4e48\u9700\u8981\u8fed\u4ee3\u5668?"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/06_%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/#iter","text":"\u53ef\u8fed\u4ee3\u5bf9\u8c61 iterable: \u5185\u7f6e\u6709 __iter__ \u65b9\u6cd5\u7684\u5bf9\u8c61 eg: \u5e38\u89c1\u7684\u5bb9\u5668(\u5217\u8868 \u5143\u7956 \u5b57\u5178 \u96c6\u5408) \u3001\u5b57\u7b26\u4e32\u3001\u6587\u4ef6 \u8fed\u4ee3\u5668\u5bf9\u8c61 iterator: \u5185\u7f6e\u6709 __iter__ \u548c __next__ \u65b9\u6cd5\u7684\u5bf9\u8c61 eg: \u6587\u4ef6 \u2605 iterator\u4e00\u5b9a\u662fiterable,\u53cd\u4e4b\u4e0d\u4e00\u5b9a. \u53ef\u8fed\u4ee3\u5bf9\u8c61\u6267\u884c obj.__iter__() \u8fd4\u56de\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\u5bf9\u8c61 \u8fed\u4ee3\u5668\u5bf9\u8c61\u6267\u884c obj.__iter__() \u5f97\u5230\u7684\u662f\u8fed\u4ee3\u5668\u672c\u8eab (\u4e3a\u4e86for\u5faa\u73af\u80fd\u5efa\u7acb\u4e00\u79cd\u7edf\u4e00\u7684\u6807\u51c6) \u8fed\u4ee3\u5668\u5bf9\u8c61\u6267\u884c obj.__next__() \u5f97\u5230\u7684\u662f\u8fed\u4ee3\u5668\u4e2d\u7684\u4e0b\u4e00\u4e2a\u503c \u6ce8\u610f\u54e6\uff01\u62ff\u5230\u4e86\u4e00\u4e2a\u8fd4\u56de\u503c\uff01 ps: \u50cf__\u5f00\u5934, __\u7ed3\u5c3e\u7684\u9b54\u6cd5\u65b9\u6cd5,\u6211\u4eec\u4e00\u822c\u4e0d\u4f1a\u76f4\u63a5\u4f7f\u7528\u7684,\u56e0\u4e3apython\u89e3\u91ca\u5668\u4f1a\u5728\u6ee1\u8db3\u67d0\u79cd\u6761\u4ef6\u4e0b \u81ea\u52a8\u8c03\u7528 \uff01 dic = { 'a' : 1 , 'b' : 2 , 'c' : 3 } # -- \u5b57\u5178,\u975e\u5e8f\u5217\u7c7b\u578b\u7684\u6570\u636e\u4e0d\u80fd\u4f7f\u7528\u7d22\u5f15/\u4e0b\u6807 iter_dic = dic . __iter__ () # -- dic.__iter__()\u7b49\u540c\u4e8eiter(dic) while True : try : k = iter_dic . __next__ () # -- iter_dic.__next__()\u7b49\u540c\u4e8enext(iter_dic) print ( dic [ k ]) except StopIteration : # -- \u4e00\u65e6\u8fed\u4ee3\u5668\u53d6\u5e72\u51c0,\u518d\u7ee7\u7eed\u53d6\u5c31\u4f1a\u629b\u51faStopIteration\u5f02\u5e38(\u4ee3\u8868\u65e0\u503c\u53ef\u53d6) break","title":"iter()"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/06_%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/#for","text":"\u53ef\u4ee5\u7528for..in.. \u7b80\u5316\u5b9e\u73b0\u8fed\u4ee3\u7684\u8fc7\u7a0b dic = { 'a' : 1 , 'b' : 2 , 'c' : 3 } for k in dic : print ( dic [ k ]) for\u5faa\u73af\u5de5\u4f5c\u8fc7\u7a0b\u5982\u4e0b: \u5927\u524d\u63d0 : in\u540e\u9762\u7684\u5bf9\u8c61\u4e00\u5b9a\u8981\u662f\u4e2a \u53ef\u8fed\u4ee3\u5bf9\u8c61 \u25cb \u6267\u884cin\u540e\u5bf9\u8c61\u7684dic.__iter__()\u65b9\u6cd5, \u5f97\u5230\u4e00\u4e2a\u8fed\u4ee3\u5668\u5bf9\u8c61iter_dic \u25cb \u6267\u884cnext(iter_dic),\u5c06\u5f97\u5230\u7684\u503c\u8d4b\u503c\u7ed9k,\u7136\u540e\u6267\u884c\u5faa\u73af\u4f53\u4ee3\u7801 \u25cb \u91cd\u590d\u8fc7\u7a0b2, \u5468\u800c\u590d\u59cb, \u76f4\u5230\u6355\u6349\u5230StopIteration\u5f02\u5e38,\u7ed3\u675f\u8fed\u4ee3 list('abc')\u3001tuple()\u3001set()\u3001sum() \u7b49\u9700\u8981\u904d\u5386\u7684\u5185\u7f6e\u65b9\u6cd5,\u5176\u5e95\u5c42\u539f\u7406\u8ddffor\u5faa\u73af\u7c7b\u4f3c \u8c03\u7528iterable\u7684iter()\u65b9\u6cd5...\u518dnext().. # -- range()\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61; # sum()\u5e95\u5c42\u662ffor\u5faa\u73af\u7684\u673a\u5236,\u4f1a\u5c06range()\u8fd9\u4e2aIterable\u53d8\u6210Iterator! # \u5185\u5b58\u91cc\u53ea\u4f1a\u6709\u4e00\u4e2a\u503c,\u5185\u5b58\u662f\u4e0d\u4f1a\u7206\u7684! \u5c31\u662f\u8981\u7b97\u5f88\u4e45..Hhhh sum ( range ( 1000000000 ))","title":"for\u5faa\u73af\u539f\u7406"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/06_%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/#_5","text":"\u6210\u4e5f\u60f0\u6027\u8ba1\u7b97,\u8d25\u4e5f\u60f0\u6027\u8ba1\u6570..Hhh.","title":"\u8fed\u4ee3\u5668\u4f18\u7f3a\u70b9"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/06_%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/#_6","text":"1> \u4e3a\u5e8f\u5217\u548c\u975e\u5e8f\u5217\u7c7b\u578b\u63d0\u4f9b\u4e86\u4e00\u79cd\u7edf\u4e00\u7684\u8fed\u4ee3\u53d6\u503c\u65b9\u5f0f(\u53ef\u4ee5\u4e0d\u4f9d\u8d56\u7d22\u5f15) \u200b 2> \u60f0\u6027\u8ba1\u7b97/\u6d41\u5f0f\u52a0\u8f7d : \u8fed\u4ee3\u5668\u5bf9\u8c61\u8868\u793a\u7684\u662f\u4e00\u4e2a\"\u6570\u636e\u6d41\", Iterator\u5bf9\u8c61\u53ef\u4ee5\u88abnext()\u65b9\u6cd5\u4e0d\u65ad\u8c03\u7528\u5e76\u8fd4\u56de\u4e0b\u4e00\u4e2a\u6570\u636e,\u76f4\u5230\u6ca1\u6709\u6570\u636e\u65f6,\u629b\u51faStopIteration\u7684\u9519\u8bef.. \u4f46Iterator\u8ba1\u7b97\u662f\u60f0\u6027\u7684, \u53ea\u6709\u5728\u9700\u8981\u8fd4\u56de\u4e0b\u4e00\u4e2a\u6570\u636e\u65f6,\u5b83\u624d\u4f1a\u8ba1\u7b97, \u8fd9\u610f\u5473\u7740, \u540c\u4e00\u65f6\u95f4\u8fed\u4ee3\u5668\u5bf9\u8c61\u5728\u5185\u5b58\u4e4b\u4e2d\u53ea\u5b58\u5728\u4e00\u4e2a\u503c, \u56e0\u800c\u53ef\u4ee5\u5b58\u653e\u65e0\u9650\u5927\u7684\u6570\u636e\u6d41 , eg \u5168\u4f53\u81ea\u7136\u6570. \u800c\u5bf9\u4e8e\u5176\u4ed6\u5bb9\u5668\u7c7b\u5982\u5217\u8868, \u9700\u8981\u628a\u6240\u6709\u7684\u5143\u7d20\u90fd\u5b58\u653e\u4e8e\u5185\u5b58\u4e2d, \u53d7\u5185\u5b58\u5927\u5c0f\u7684\u9650\u5236, \u53ef\u4ee5\u5b58\u653e\u7684\u503c\u7684\u4e2a\u6570\u662f\u6709\u9650\u7684...","title":"\u4f18\u70b9"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/06_%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/#_7","text":"1> \u9664\u975e\u53d6\u5c3d, \u5426\u5219\u65e0\u6cd5\u83b7\u53d6\u8fed\u4ee3\u5668\u7684\u957f\u5ea6. \u6362\u4e2a\u8bf4\u6cd5,\u53ef\u4ee5\u628a\u8fd9\u4e2aIterator\u6570\u636e\u6d41\u770b\u4f5c\u662f\u4e00\u4e2a\u6709\u5e8f\u5e8f\u5217,\u4f46\u6211\u4eec\u4e0d\u80fd\u63d0\u524d\u83b7\u53d6\u5e8f\u5217\u7684\u957f\u5ea6.. 2> \u8fed\u4ee3\u5668\u7684\u53d6\u503c\u4e0d\u5982\u6309\u7167\u7d22\u5f15\u7684\u65b9\u5f0f\u7075\u6d3b,\u53ea\u80fd\u5f80\u540e\u8d70\u4e0d\u80fd\u5f80\u524d\u9000, \u4e0d\u80fd\u7279\u5b9a\u53d6\u503c \u200b 3> \u5b83\u662f \u4e00\u6b21\u6027\u7684,\u8fed\u4ee3\u5b8c\u5c31\u6ca1\u4e86 , \u8fed\u4ee3\u5668\u4ea7\u751f\u540e\u7684\u552f\u4e00\u76ee\u6807\u5c31\u662f\u91cd\u590d\u6267\u884cnext\u65b9\u6cd5\u76f4\u5230\u503c\u53d6\u5c3d, \u5426\u5219\u5c31\u4f1a\u505c\u7559\u5728\u67d0\u4e2a\u4f4d\u7f6e\u7b49\u5f85\u4e0b\u4e00\u6b21\u8c03\u7528next ; \u82e5\u662f\u8981\u518d\u6b21\u8fed\u4ee3\u540c\u4e2a\u5bf9\u8c61, \u53ea\u80fd\u91cd\u65b0\u8c03\u7528iter\u65b9\u6cd5\u53bb\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8fed\u4ee3\u5668\u5bf9\u8c61; \u82e5\u6709\u4e24\u4e2a\u6216\u8005\u591a\u4e2a\u5faa\u73af\u4f7f\u7528\u540c\u4e00\u4e2a\u8fed\u4ee3\u5668, \u5fc5\u7136\u53ea\u4f1a\u6709\u4e00\u4e2a\u5faa\u73af\u80fd\u53d6\u5230\u503c... \"\"\"train.txt a b c d \"\"\" # -- \u9a8c\u8bc1\u8fed\u4ee3\u5668\u662f\u4e00\u6b21\u6027\u7684!! f = open ( 'train.txt' , 'r' , encoding = 'utf8' ) # -- \u54ea\u6015train.txt\u6587\u4ef6\u5927\u5c0f\u4e3a10T,\u8fd0\u884c\u6b64\u884c\u4ee3\u7801\u65f6\u90fd\u4e0d\u4f1a\u5361 # \u6587\u4ef6\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668,\u9ed8\u8ba4\u4f1a\u5c06\u6587\u4ef6\u6309\u884c\u5206\u5272\u4ee5\u60f0\u6027\u52a0\u8f7d print ( next ( f )) # a/n -- \u57fa\u4e8e\u8fed\u4ee3\u5668\u53d6\u503c,next(f)\u6bcf\u6b21\u53ea\u4f1a\u53d6\u6587\u4ef6\u7684\u4e00\u884c\u6570\u636e print ( f . __next__ ()) # b/n print ( list ( f )) # ['c\\n', 'd'] print ( list ( f )) # []","title":"\u7f3a\u70b9"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/06_%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/#_8","text":"\u53c2\u8003\u6587\u6863: https://www.qtmuniao.com/2019/11/03/python3-generator/ https://www.cnblogs.com/yssjun/p/10236126.html https://www.zhihu.com/column/c_1189883314197168128","title":"\u751f\u6210\u5668"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/06_%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/#_9","text":"","title":"\u6d45\u5c1d\u751f\u6210\u5668"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/06_%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/#_10","text":"\u82e5\u51fd\u6570\u4f53\u5305\u542byield\u5173\u952e\u5b57, \u5728\u8c03\u7528\u51fd\u6570\u65f6, \u5e76\u4e0d\u4f1a\u6267\u884c\u51fd\u6570\u4f53\u4ee3\u7801 , \u5c06\u4f1a\u8fd4\u56de\u4e00\u4e2a\u751f\u6210\u5668\u5bf9\u8c61. \u51c6\u786e\u6765\u8bf4 : \u6839\u636e\u4e0a\u4e0b\u6587\u4e0d\u540c,\u751f\u6210\u5668\u6709\u5bf9\u5e94\u7684\u5b98\u65b9\u4e13\u4e1a\u540d\u8bcd\u89e3\u91ca \u540d\u8bcd \u89e3\u91ca Generator Function \u542b\u6709 yield \u5173\u952e\u5b57\u7684 \u51fd\u6570 , \u4f1a\u8fd4\u56de\u4e00\u7cfb\u5217\u503c, \u53ef\u4ee5\u4f7f\u7528 next () \u5bf9\u5176\u8fd4\u56de\u503c\u8fdb\u884c\u8fed\u4ee3. Generator Iterator generator function \u8fd4\u56de\u7684 \u5bf9\u8c61 , \u53ef\u4ee5\u8fdb\u884c\u4e00\u6b21\u6027\u5730\u8fed\u4ee3. Generator Expression \u751f\u6210\u5668\u8868\u8fbe\u5f0f . \u901a\u5e38\u4f7f\u7528\u5c0f\u62ec\u53f7\u548c for \u6765\u5b9a\u4e49. \u4e25\u683c\u6765\u8bf4,\u4f7f\u7528\u4e86yield\u7684\u51fd\u6570\u4e25\u683c\u6765\u8bb2\u5df2\u7ecf\u4e0d\u662f\u4e00\u4e2a\u51fd\u6570, \u800c\u662f\u4e00\u4e2a\u751f\u6210\u5668. Generator Function\u53ea\u80fd\u901a\u8fc7yield\u5c06\u6bcf\u6b21\u8c03\u7528\u7684\u7ed3\u679c\u8fd4\u56de\u7ed9\u8c03\u7528\u8005!! \u751f\u6210\u5668\u5185\u7f6e\u6709 __iter__ \u548c __next__ \u65b9\u6cd5, \u6240\u4ee5 \u751f\u6210\u5668\u672c\u8eab\u5c31\u662f\u4e00\u79cd\u8fed\u4ee3\u5668,\u5b83\u5177\u5907\u8fed\u4ee3\u5668\u7684\u4e00\u5207\u7279\u6027","title":"\u4e13\u4e1a\u540d\u8bcd"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/06_%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/#_11","text":"def fun (): # -- fun\u51fd\u6570\u662fGenerator Function print ( \"I'm generator function.\" ) yield print ( \"Hello.\" ) g = fun () # -- g\u662fGenerator Iterator print ( g , type ( g )) # <generator object fun at 0x7fd4a8d1bac0> <class 'generator'> print ( \"__iter__\" in dir ( g ), \"__next__\" in dir ( g )) # True True -- \u751f\u6210\u5668\u662f\u8fed\u4ee3\u5668 next()\u65b9\u6cd5\u89e6\u53d1\u51fd\u6570\u4ece\u4e0a\u5f80\u4e0b\u5f00\u59cb\u6267\u884c, \u9047\u5230yield\u5173\u952e\u5b57\u6682\u505c, \u62ff\u5230\u4e00\u4e2a\u8fd4\u56de\u503c \u6b64\u5904,\u62ff\u5230\u7684\u8fd4\u56de\u503c\u4e3aNone. res1 = next ( g ) # \u4f1a\u5148\u6253\u5370\"I'm generator function.\" print ( res1 ) # None -- \u6b64\u5904yield\u7684\u8fd4\u56de\u503c\u4e3aNone \u518d\u6267\u884cnext()\u65b9\u6cd5, \u4f1a\u4ece\u4e0a\u4e00\u6b21\u7528next\u65b9\u6cd5\u6682\u505c/\u6302\u8d77\u7684\u5730\u65b9\u7ee7\u7eed\u6267\u884c \u6240\u4ee5\u63a5\u7740\u4f1a\u5148\u6253\u5370 \"Hello.\" \u518d\u5f80\u4e0b,\u53d1\u73b0\u9047\u4e0d\u5230yield\u5566,\u6b64\u6b21\u7684next()\u5c31\u62ff\u4e0d\u5230\u8fd4\u56de\u503c\u5566 , \u62a5\u9519StopIteration \u5373 \u89e6\u53d1\u51fd\u6570\u6267\u884c\u6ca1\u6709\u9047\u5230yield\u5219\u65e0\u503c\u8fd4\u56de, \u610f\u5473\u7740\u53d6\u503c\u5b8c\u6bd5 ,\u8fed\u4ee3\u5668\u65e0\u503c\u53ef\u53d6, next()\u8bed\u53e5\u5c06\u629b\u51fa\u5f02\u5e38\u7ed3\u675f\u8fed\u4ee3 \u6ce8\u610f!! \u662fnext(g)\u62a5\u9519,\u4e0d\u662f\u51fd\u6570\u4f53\u5185\u5bb9\u62a5\u9519!!So, try..except..\u5728\u51fd\u6570\u4f53\u91cc\u4f7f\u7528\u6ca1\u7528, \u5e94\u8be5\u5bf9next(g)\u4f7f\u7528 \"\"\" \u751f\u6210\u5668\u51fd\u6570\u6bcf\u6b21\u6267\u884c\u5230yield\u4fbf\u4f1a\u8fd4\u56de,\u4e0e\u666e\u901a\u51fd\u6570\u4e0d\u540c\u7684\u662fyield\u8fd4\u56de\u65f6\u4f1a\u4fdd\u7559\u5f53\u524d\u51fd\u6570\u7684\u6267\u884c\u72b6\u6001,\u518d\u6b21\u901a\u8fc7next()\u88ab\u8c03\u7528\u65f6\u53ef\u4ee5\u4ece\u4e2d\u65ad\u7684\u5730\u65b9\u7ee7\u7eed\u6267\u884c \"\"\" g . __next__ () # \u6253\u5370Hello.\u540e StopIteration\u62a5\u9519 \u5b9e\u9645\u4e0a, \u5728\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2agenerator\u540e, \u57fa\u672c\u4e0a\u6c38\u8fdc\u4e0d\u4f1a\u8c03\u7528next(), \u800c\u662f \u901a\u8fc7for\u5faa\u73af\u6765\u8fed\u4ee3\u53d6yield\u8fd4\u56de\u7684\u503c . \u5e76\u4e14\u4e0d\u9700\u8981\u5173\u5fc3StopIteration\u7684\u9519\u8bef, for\u5faa\u73af\u4f1a\u81ea\u52a8\u5904\u7406\u8be5\u5f02\u5e38. def fun (): print ( \"I'm generator function.\" ) yield print ( \"Hello.\" ) g = fun () for iter_value in g : print ( \"iter_value:\" , iter_value ) \"\"\" I'm generator function. iter_value: None Hello. \"\"\" \u751f\u6210\u5668\u8868\u8fbe\u5f0f: \u751f\u6210\u5668\u8868\u8fbe\u5f0f\u5c31\u662f\u5c06 \u5217\u8868\u63a8\u5bfc\u5f0f \u4e2d\u7684 [] \u6539\u6210 () \u5c31\u53ef\u4ee5\u4e86 >>> a = ( i * i for i in range ( 10 )) # -- a\u662fGenerator Expression >>> type ( a ) < class ' generator '> # -- a\u6bd4b\u8282\u7701\u4e86\u4e00\u6b21\u751f\u6210\u4ee5\u4e00\u4ebf\u4e2a\u5143\u7d20\u7684\u8fc7\u7a0b,\u6240\u4ee5\u8017\u65f6\u660e\u663e\u4f1a\u6bd4\u8fed\u4ee3\u5668\u77ed a = sum (( i for i in range ( 100000000 ))) b = sum ([ i for i in range ( 100000000 )])","title":"\u4e3e\u4f8b\u5256\u6790"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/06_%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/#yield-vs-return","text":"\u53ef\u4ee5\u5c06yield\u6d45\u770b\u6210return, \u4f1a\u8fd4\u56de\u503c, \u82e5\u4e0d\u8bbe\u7f6e, \u9ed8\u8ba4\u4e3aNone, \u4f46yield\u4e0d\u4f1a\u7ed3\u675f\u51fd\u6570 yield \u662f\u4e00\u4e2a\u795e\u5947\u7684\u5173\u952e\u5b57, \u9047\u5230yield, \u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u503c, \u5e76 \u4e34\u65f6\u6302\u8d77\u5f53\u524d\u51fd\u6570 , \u8bb0\u4e0b\u5176\u4e0a\u4e0b\u6587 ( \u5305\u62ec\u5c40\u90e8\u53d8\u91cf\u3001\u5f85\u51b3\u7684 try catch \u7b49 ), \u5c06\u63a7\u5236\u6743\u8fd4\u56de\u7ed9\u51fd\u6570\u8c03\u7528\u8005. \u5f53\u4e0b\u4e00\u6b21\u4f7f\u7528 next()\u65b9\u6cd5 \u53bb Generator Iterator\u4e2d\u53d6\u503c ( \u5373 \u8c03\u7528\u5176\u6240\u5728 generator function )\u65f6 , \u4f1a\u6062\u590d\u4fdd\u5b58\u7684\u4e0a\u4e0b\u6587, \u7ee7\u7eed\u6267\u884c\u5269\u4e0b\u7684\u8bed\u53e5, \u76f4\u5230\u518d\u9047\u5230 yield \u6216\u8005\u9000\u51fa\u4e3a\u6b62.. \u4ee5 yield \u8fdb\u884c\u6267\u884c\u6d41\u63a7\u5236\u7684\u51fd\u6570\u79f0\u4e3a generator function return \u4f1a\u7ed3\u675f\u51fd\u6570\u8c03\u7528, \u9500\u6bc1\u4e0a\u4e0b\u6587 (\u5f39\u51fa\u6808\u5e27/\u547d\u540d\u7a7a\u95f4) , \u5c06\u63a7\u5236\u6743\u8fd4\u56de\u7ed9\u8c03\u7528\u8005 \u4ee5return \u8fdb\u884c\u6267\u884c\u6d41\u63a7\u5236\u7684\u51fd\u6570 \u5c31\u662f\u666e\u901a\u7684 function # -- python3\u4e2dyield\u548creturn\u653e\u4e00\u8d77\u4e0d\u4f1a\u62a5\u9519,python2\u4e2d\u4f1a >>> def fun (): yield 123 return 666 >>> g = fun () >>> g . __next__ () 123","title":"yield VS return"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/06_%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/#next-send","text":"\u9996\u5148\u8c03\u7528 next \u5c06\u51fd\u6570\u8fd0\u884c\u81f3 yield\u540e, \u5f80\u540e\u4e0d\u8bba\u662fnext\u8fd8\u662fsend\u90fd\u4ece\u6302\u8d77\u7684yield\u5904\u5f00\u59cb,\u4ece\u4e0b\u4e00\u4e2ayield\u5904\u8fd4\u56de\u8fed\u4ee3\u503c.. \u901a\u8fc7send\u65b9\u6cd5\u53bb\u4e3a\u4e0a\u4e00\u6b21\u88ab\u6302\u8d77\u7684yield\u8bed\u53e5\u8d4b\u503c , next\u4e5f\u53ef\u4ee5,\u4e0d\u8fc7\u4f20\u7684\u662fNone\u503c!","title":"next &amp; send"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/06_%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/#_12","text":"next(g) \u7b49\u540c\u4e8e g.send(None) \u901a\u8fc7for\u548cnext\u53ef\u4ee5\u904d\u5386\u751f\u6210\u5668, \u800csend\u5219\u53ef\u4ee5\u7528\u4e8e\u5411\u751f\u6210\u5668\u51fd\u6570\u53d1\u9001\u6d88\u606f next\u548csend\u5747\u4f1a\u89e6\u53d1Generator function\u7684\u6267\u884c/\u5747\u4f1a\u53bbGenerator Iterator\u4e2d\u53d6\u503c yield\u6302\u8d77\u51fd\u6570\u8fd4\u56de\u8fed\u4ee3\u503c 1 def yield_func (): 2 for i in range ( 1 , 5 ): # -- \u6ce8\u610f\u70b9!!! \u521d\u6b21next(gen_func)\u65f6\u5019\u9047\u5230yield\u4e0d\u4f1a\u7ed9x\u8d4b\u503c,\u76f4\u63a5\u6302\u8d77\u51fd\u6570\u8fd4\u56de\u8fed\u4ee3\u503c\u4e86. # \u5f80\u540e\u7684next()\u4f1a\u4ece\u6b64\u5904\u5f00\u59cb\u6267\u884c,next(gen_func)\u76f8\u5f53\u4e8egen_func.send(None),\u4f1a\u7ed9x\u8d4b\u503cNone 3 x = yield i # -- i\u662fyield\u8fd4\u56de\u7684\u8fed\u4ee3\u503c; # yield\u63a5\u6536\u7684\u503c\u5bf9i\u662f\u6ca1\u6709\u5f71\u54cd\u7684,\u662fyield\u63a5\u6536,\u4e0d\u662fyield i\u63a5\u6536! 4 print ( 'yield_func' , x ) 5 gen_func = yield_func () # -- next\u548csend\u5747\u4f1a\u89e6\u53d1Generator function\u7684\u6267\u884c/\u5747\u4f1a\u53bbGenerator Iterator\u4e2d\u53d6\u503c # -- next(g) \u7b49\u540c\u4e8e g.send(None) 6 print ( 'iter result: %d ' % next ( gen_func )) # iter result: 1 7 print ( 'iter result: %d ' % next ( gen_func )) # yield_func None # iter result: 2 8 print ( 'iter result: %d ' % gen_func . send ( 100 )) # yield_func 100 # iter result: 3 9 print ( 'iter result: %d ' % next ( gen_func )) # yield_func None # iter result: 4 10 print ( 'iter result: %d ' % next ( gen_func )) # \u629b\u51fa\u5f02\u5e38 \u4ee3\u7801\u7ed3\u679c\u5206\u6790\u5982\u4e0b: line_no 5 \u8c03\u7528Generator function \"yield_func\" \u5f97\u5230 Generator Iterator \"gen_func\" line_no 6 \u4f7f\u7528next\u65b9\u6cd5\u53bbgen_func\u8fd9\u4e2a\u8fed\u4ee3\u5668\u4e2d\u53d6\u503c,\u6b64\u65f6\u624d\u771f\u6b63\u7684\u5f00\u59cb\u6267\u884cyield_func\u5b9a\u4e49\u7684\u4ee3\u7801 line_no 3 \u6267\u884c\u5230yield i,\u51fd\u6570yield_func\u6682\u505c\u6267\u884c\u5e76\u8fd4\u56de\u5f53\u524di\u7684\u503c1. line_no 6 next ( gen_func ) \u5f97\u5230\u51fd\u6570yield_func\u6267\u884c\u5230yield i\u8fd4\u56de\u7684\u503c1,\u8f93\u51fa\u7ed3\u679citer result: 1 line_no 7 \u518d\u6b21\u4f7f\u7528next\u65b9\u6cd5\u53bbgen_func\u8fd9\u4e2a\u8fed\u4ee3\u5668\u4e2d\u53d6\u503c,\u4f1a\u4eceyield\u6682\u505c\u6267\u884c\u7684\u5730\u65b9\u5f00\u59cb line_no 3 next ( gen_func ) \u7b49\u540c\u4e8e gen_func.send ( None ); \u51fd\u6570yield_func\u7ee7\u7eed\u6267\u884c ,\u6240\u4ee5x\u7684\u503c\u4e3aNone. line_no 4 \u8f93\u51fa\u7ed3\u679cyield_func None line_no 3 \u6267\u884c\u5230yield i,\u51fd\u6570yield_func\u6682\u505c\u6267\u884c\u5e76\u8fd4\u56de\u5f53\u524di\u7684\u503c2. line_no 7 next ( gen_func ) \u5f97\u5230\u51fd\u6570yield_func\u8fd0\u884c\u5230yield i\u8fd4\u56de\u7684\u503c2,\u8f93\u51fa\u7ed3\u679citer result: 2 line_no 8 \u6267\u884cgen_func.send ( 100 ); line_no 3 \u51fd\u6570yield_func\u7ee7\u7eed\u6267\u884c,\u5e76\u5c06\u8c03\u7528\u8005send\u7684\u503c100\u8d4b\u503c\u7ed9x ; line_no 4 \u8f93\u51fa\u8c03\u7528\u8005send\u63a5\u6536\u5230\u7684\u503c ; \u8f93\u51fa\u7ed3\u679cyield_func 100 line_no 3 \u6267\u884c\u5230yield i,\u51fd\u6570yield_func\u6682\u505c\u6267\u884c\u5e76\u8fd4\u56de\u5f53\u524di\u7684\u503c3. line_no 8 gen_func.send ( 100 ) \u5f97\u5230\u51fd\u6570yield_func\u8fd0\u884c\u5230yield i\u8fd4\u56de\u7684\u503c2,\u8f93\u51fa\u7ed3\u679citer result: 3 line_no 9 \u540c\u7406.\u7565. line_no 10 yield_func\u53ea\u4f1a\u4ea7\u751f4\u4e2ayield,yield\u53ea\u4f1a\u8fd4\u56de4\u4e2a\u8fed\u4ee3\u503c \u4f46\u662f\u6211\u4eec\u8fed\u4ee3\u8c03\u7528\u4e865\u6b21 ,\u4f1a\u629b\u51fa\u5f02\u5e38StopIteration","title":"\u6267\u884c\u8fc7\u7a0b"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/06_%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/#yield","text":"\u9700\u8981\u9996\u5148\u8c03\u7528 next \u5c06\u51fd\u6570\u8fd0\u884c\u81f3 yield \u5904, \u624d\u80fd\u901a\u8fc7 generator.send \u7ed9 generator \u4f20\u9001\u5bf9\u8c61, \u9664\u975egenerator.send(None) \u5426\u5219\u62a5\u9519! \u5728\u8c03\u7528send\u65b9\u6cd5\u4e4b\u524d, \u8fd8\u662f\u5148\u8c03\u7528\u4e00\u6b21next\u65b9\u6cd5\u4e3a\u597d, \u8fd9\u6837\u8f83\u4e3a\u89c4\u8303.. In [ 1 ]: def eater (): ... : print ( \"Realy to eat.\" ) ... : food_list = [] ... : while True : ... : food = yield food_list ... : food_list . append ( food ) ... : In [ 2 ]: g = eater () In [ 3 ]: g . send ( '\u9e21' ) --------------------------------------------------------------------------- TypeError Traceback ( most recent call last ) < ipython - input - 9 - 47324 ef7a4ae > in < module > ----> 1 g . send ( '\u9e21' ) # -- \u65e0\u6cd5\u5c06\u975eNone\u503c\u53d1\u9001\u5230\u521a\u542f\u52a8\u7684\u751f\u6210\u5668 TypeError : can 't send non-None value to a just-started generator In [ 4 ]: next ( g ) Realy to eat . Out [ 4 ]: [] In [ 5 ]: g . send ( '\u9e21' ) Out [ 5 ]: [ '\u9e21' ] In [ 6 ]: g . send ( '\u9e2d' ) Out [ 6 ]: [ '\u9e21' , '\u9e2d' ] In [ 7 ]: next ( g ) Out [ 7 ]: [ '\u9e21' , '\u9e2d' , None ] In [ 7 ]: g . send ( '\u9c7c' ) Out [ 7 ]: [ '\u9e21' , '\u9e2d' , None , '\u9c7c' ] \u6269\u5c55: \u53ef\u4ee5\u7f16\u5199 \u88c5\u9970\u5668 \u6765\u63d0\u524d\u5c06\u51fd\u6570\u8fd0\u884c\u81f3 yield \u5904.. (\u8fd9\u6837\u7684\u8bdd\u751f\u6210\u5668\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528send) def dec ( fun ): def wrapper ( * args , ** kwargs ): g = fun () next ( g ) return g return wrapper @dec def eater (): print ( \"Realy to eat.\" ) food_list = [] while True : food = yield food_list food_list . append ( food ) g = eater () g . send ( '\u9e21' ) # -- \u4e0d\u9700\u8981\u5148\u4f7f\u7528next\u5566","title":"yield\u8868\u8fbe\u5f0f!!"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/06_%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/#yield_1","text":">>> def func (): ... a = yield 123 ... print ( \"a\u503c\u4e3a:\" , a ) ... yield 456 ... print ( 'end' ) ... >>> g = func () >>> next ( g ) 123 >>> next ( g ) a\u503c\u4e3a : None 456 >>> next ( g ) end Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > StopIteration","title":"\u51fd\u6570\u4e2d\u6709\u591a\u4e2ayield"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/06_%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/#_13","text":"","title":"\u5e94\u7528\u5b9e\u4f8b"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/06_%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/#_14","text":"Fibonacci\u6570\u5217\u7684\u6570\u5b66\u8868\u8fbe\u5f0f a , b = b , a + b \"\"\" \u2605 --\u666e\u901a\u51fd\u6570 \"\"\" def func ( index ): a , b = 0 , 1 i = 0 print ( a ) while i < index : print ( b ) a , b = b , a + b i += 1 func ( 10 ) \"\"\" \u2605 --\u751f\u6210\u5668 \"\"\" def func ( index ): a , b = 0 , 1 i = 0 print ( a ) while i < index : yield b a , b = b , a + b i += 1 for i in func ( 10 ): print ( i ) # --- \u903b\u8f91\u7b49\u540c\u4e8e def fib (): a = b = 1 yield a yield b while 1 : a , b = b , a + b yield b g = fib () for num in fib (): if num > 10 : break print ( num )","title":"\u6590\u6ce2\u90a3\u5951\u6570\u5217"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/06_%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/#linux","text":"\u7528yield\u751f\u6210\u5668\u6a21\u62dfLinux\u4e2d\u547d\u4ee4: tail -f file | grep python \u52a8\u6001\u5b9e\u65f6\u68c0\u6d4bwarn.log\u4e2d\u662f\u5426\u65b0\u589e\u65b0\u7684\u884c, \u82e5\u65b0\u589e\u7684\u884c\u5305\u542bpython,\u5219\u4f1a\u6253\u5370\u8be5\u884c; \"\"\" \u6ce8\u610f\u7a0b\u5e8f\u53ea\u68c0\u6d4b\u65b0\u589e\u7684\u65e5\u5fd7\u4fe1\u606f! \u5f53\u7a0b\u5e8f\u8fd0\u884c\u65f6,\u82e5warn.log\u6587\u4ef6\u4e2d\u672b\u5c3e\u6709\u65b0\u589e\u4e00\u884c,\u4e14\u8be5\u884c\u5305\u542bpython,\u8be5\u884c\u5c31\u4f1a\u88ab\u6253\u5370\u51fa\u6765 \u82e5\u6253\u5f00warn.log\u65f6,\u672b\u5c3e\u5df2\u7ecf\u6709\u4e86\u4e00\u884c\u5305\u542bpython,\u8be5\u884c\u4e0d\u4f1a\u88ab\u6253\u5370,\u56e0\u4e3af.seek(0,2)\u79fb\u52a8\u5230\u4e86\u6587\u4ef6EOF\u5904 \"\"\" def tail ( f ): # -- \u79fb\u52a8\u5230\u6587\u4ef6\u7684EOF\u6700\u540e f . seek ( 0.2 ) while 1 : # -- \u8bfb\u53d6\u6587\u4ef6\u4e2d\u65b0\u7684\u6587\u672c\u884c line = f . readline () if not line : continue # -- \u4e00\u76f4\u5728\u7b49\u5f85\u6587\u672c\u8f93\u5165,\u6ca1\u6709\u5c31\u8df3\u8fc7 [step3] # -- yield \u51fa\u6bcf\u4e00\u884c\u7684\u6570\u636e yield line # -- \u82e5\u6709\u6587\u672c\u8f93\u5165,\u8fd4\u56de\u8fed\u4ee3\u503c [step4] \"\"\" >>> \"abc\" in \"afadabcfg\" True \"\"\" def grep ( lines , search_text ): for line in lines : # -- g_tail\u751f\u6210\u5668\u5f00\u59cb\u8fd0\u884c [step2] if search_text in line : yield line # -- \u82e5\u5176\u4e2d\u5305\u542bpython\u5b57\u7b26\u4e32,\u8fd4\u56de\u8be5\u884c [step5] if __name__ == '__main__' : g_tail = tail ( open ( 'warn.log' )) g_grep = grep ( g_tail , 'python' ) for line in g_grep : # -- g_grep\u751f\u6210\u5668\u5f00\u59cb\u8fd0\u884c [step1] print ( line )","title":"\u6a21\u62dflinux\u76d1\u63a7\u6587\u4ef6"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/06_%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/#_15","text":"\u5927\u6587\u4ef6(\u6bd4\u5982\u8bf4 8G) , \u4f46\u7535\u8111\u5185\u5b58\u53ea\u67094G \"\"\" \u2605 --\u6587\u672c\u7c7b\u578b\u6587\u4ef6 \u6587\u672c\u672c\u8eab\u5c31\u662f\u8fed\u4ee3\u5668 \"\"\" with open ( 'your_big_file.txt' ) as f : for line in f : do_someting ( line ) \"\"\" \u2605 --\u5176\u4ed6\u7c7b\u578b\u6587\u4ef6 \"\"\" def read_by_chunks ( file , chunk_size = 1024 ): while True : data = file . read ( chunk_size ) if not data : break yield data f = open ( 'your_big_file.dat' ) for chunk in read_by_chunks ( f ): do_someting ( chunk ) \"\"\" \u2605 --\u8865\u5145:\u7edf\u8ba1a.txt\u6587\u672c\u6587\u4ef6\u4e2d\u6700\u957f\u7684\u884c\u7684\u957f\u5ea6 \u5217\u8868\u8868\u8fbe\u5f0f\u662f\u7ed9\u4f60\u4e00\u5927\u7b50\u9e21\u86cb,\u91cc\u9762\u7684\u9e21\u86cb\u6570\u662f\u6709\u9650\u7684,\u4e0d\u7136\u7b50(\u5185\u5b58)\u88c5\u4e0d\u4e0b; \u751f\u6210\u5668\u8868\u8fbe\u5f0f\u662f\u7ed9\u4f60\u4e00\u53ea\u9e21,\u6233\u4e00\u4e0b\u7ed9\u4f60\u4e00\u4e2a\u86cb,\u86cb\u7684\u6570\u91cf\u53ef\u4ee5\u65e0\u9650\u591a. \"\"\" # -- \u6587\u672c\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668,\u6240\u4ee5open\u6253\u5f00\u6587\u4ef6\u65f6,\u4e0d\u4f1a\u5c06\u5176\u5168\u90e8\u52a0\u8f7d\u8fdb\u5185\u5b58 # \u4f7f\u7528for\u5faa\u73af\u5bf9\u6587\u672c\u904d\u5386\u65f6,\u53d6\u51fa\u4e00\u884c\u884c\u7684\u6570\u636e # \u4e0b\u65b9\u4f7f\u7528\u5217\u8868\u751f\u6210\u5f0f\u548c\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u6700\u5927\u7684\u533a\u522b\u5728\u4e8e # \u7ed3\u5408max()\u51fd\u6570\u540e,\u4ea7\u751f\u7684\u5faa\u73af,\u524d\u8005\u67092\u6b21,\u540e\u8005\u53ea\u6709\u4e00\u6b21 \uff08\u524d\u8005\u5b58\u50a8\u5217\u8868\u6570\u636e\u8fd8\u591a\u5360\u7528\u4e00\u70b9\u5185\u5b58). # \u524d\u80052\u6b21: f\u6587\u4ef6\u7684\u5faa\u73af,data\u5217\u8868\u7684\u5faa\u73af \u540e\u80051\u6b21: f\u6587\u4ef6\u7684\u5faa\u73af with open ( 'a.txt' , 'rt' , encoding = 'utf-8' ) as f : # data = [len(line) for line in f] g = ( len ( line ) for line in f ) print ( max ( g )) # -- \u82e5\u653e\u5728\u8fd9,\u867d\u7136g\u662f\u5168\u5c40\u53d8\u91cf,\u4f46\u751f\u6210\u5668\u4ee3\u7801\u91cc\u9762\u6709\u5bf9f\u7684\u5faa\u73af,\u4e0a\u4e0b\u6587\u91cc\u7684f\u6587\u4ef6\u5df2\u7ecf\u5173\u95ed\u4e86.\u4f1a\u62a5\u9519 # -- (\u5982\u679c\u662f print(max(data)),\u653e\u5728\u8fd9\u5c31\u4e0d\u4f1a\u62a5\u9519,\u56e0\u4e3a\u5217\u8868\u6570\u636e\u90fd\u5728\u5185\u5b58\u91cc) print ( max ( g )) yield\u751f\u6210\u5668\u8fd8\u6709\u8bb8\u591a\u5e94\u7528\u573a\u666f: 1> \u7528\u4e8e\u7b80\u5355\u7684\u534f\u7a0b\u6848\u4f8b -- \u751f\u6210\u8005\u6d88\u8d39\u8005. 2> \u904d\u5386\u4e00\u4e2a\u6839\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\u5e76\u6839\u636e\u9700\u8981\u8fdb\u884c\u589e\u5220\u6539\u67e5. \u5206\u6790: \u9884\u5148\u904d\u5386\u4e14\u7f13\u5b58\u7ed3\u679c, \u4f46\u662f\u76ee\u5f55\u4e0b\u6587\u4ef6\u53ef\u80fd\u5f88\u591a, \u800c\u4e14\u4f1a\u52a8\u6001\u6539\u53d8; \u5982\u679c\u4e0d\u7f13\u5b58, \u591a\u4e2a\u5730\u65b9\u53ef\u80fd\u4f1a\u9891\u7e41\u7684\u9700\u8981\u8bbf\u95ee\u8fd9\u4e00\u7ed3\u679c\u5bfc\u81f4\u6548\u7387\u4f4e\u4e0b.. \u8fd9\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528yield\u5b9a\u4e49\u4e00\u4e2a\u751f\u6210\u5668\u51fd\u6570","title":"\u5904\u7406\u5927\u6587\u4ef6"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/06_%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/#_16","text":"\u51fd\u6570 \u529f\u80fd map \u52a0\u5de5 filter \u7b5b\u9009 reduce \u5bf9\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u5143\u7d20\u8fdb\u884c\u7d2f\u79ef zip \u4e00\u4e00\u5bf9\u5e94\u7684'tuple' enumerate \u4e0b\u6807\u548c\u5143\u7d20\u7ec4\u6210\u7684'tuple' map\u3001filter\u3001zip\u3001enumerate\u8fd4\u56de\u7684\u90fd\u662f\u8fed\u4ee3\u5668\u5bf9\u8c61. (\u6ce8\u610f, \u5b83\u4eec\u8fd4\u56de\u7684\u90fd\u4e0d\u662f\u751f\u6210\u5668\u5bf9\u8c61) map\u3001filter\u3001reduce\u4e00\u822c\u60c5\u51b5\u4e0b,\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u51fd\u6570,\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662fiterable. range(5)\u4ec5\u4ec5\u53ea\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61!!! map\u53d6\u53ef\u8fed\u4ee3\u5bf9\u8c61\u91cc\u7684\u5143\u7d20\u8fdb\u884c\u52a0\u5de5!\u4e0d\u4f1a\u5bf9\u53ef\u8fed\u4ee3\u5bf9\u8c61\u9020\u6210\u5f71\u54cd..\u5143\u7d20\u662f\u53ef\u53d8\u7c7b\u578b\u7684\u65f6\u5019\u8981\u601d\u8003\u4e0b! >>> a = [[ 1 , 2 , 3 ]] >>> list ( map ( lambda x : x . append ( 1 ), a )) [ None ] >>> a # -- \u4f9d\u65e7\u662f\u5f15\u7528\u8bed\u4e49! [[ 1 , 2 , 3 , 1 ]] >>> list ( map ( str , a )) [ '[1, 2, 3, 1]' ] >>> a [[ 1 , 2 , 3 , 1 ]] map list ( map ( str ,[ 1 , 2 , 3 ])) # -- ['1', '2', '3'] x , y , z = map ( str , range ( 3 )) # -- \"0\" \"1\" \"2\" list ( map ( list , zip ( * [[ 1 , 2 , 3 ],[ 4 , 5 , 6 ]]))) # -- [[1,4],[2,5],[3,6]] >>> a , b , c = map ( str , sorted ( x )) >>> a '1' >>> b '2' >>> c '3' filter \u5185\u7f6e\u7684filter()\u51fd\u6570\u6709\u4e24\u4e2a\u53c2\u6570 \u7b2c\u4e00\u4e2a\u53c2\u6570\u53ef\u4ee5\u662f\u4e00\u4e2a\u51fd\u6570\u4ea6\u53ef\u4ee5\u662fNone\u503c 1> \u82e5\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f \u51fd\u6570 , \u5219\u5c06\u7b2c\u4e8c\u4e2a\u53c2\u6570 \u53ef\u8fed\u4ee3\u6570\u636e \u91cc\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u51fd\u6570\u7684\u53c2\u6570\u8fdb\u884c\u8ba1\u7b97 \u628a\u8fd4\u56de\u4e3aTrue\u7684\u503c\u7b5b\u9009\u51fa\u6765; 2> \u82e5\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f None\u503c , \u5219\u76f4\u63a5\u5c06\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e2d\u4e3aTrue\u7684\u503c\u7b5b\u9009\u51fa\u6765. list ( filter ( None ,[ 0 , 1 , 2 , 3 , 0 , 0 , 0 ])) # -- [1, 2, 3] reduce reduce(function, iterable[, initializer]) function -- \u51fd\u6570,\u6709\u4e24\u4e2a\u53c2\u6570 iterable -- \u53ef\u8fed\u4ee3\u5bf9\u8c61 initializer -- \u53ef\u9009, \u521d\u59cb\u53c2\u6570 >>> from functools import reduce >>> reduce ( lambda x , y : x + y , [ 1 , 2 , 3 , 4 , 5 ], 10 ) 25 # -- reduce\u8ba1\u7b971\u523011\u7684\u9636\u4e58 # -- \u5176\u5b9e\u73b0\u8fc7\u7a0b\u5c31\u662f `a=1,b=2` \u2014> `return a*b=2` \u2014> `a = a*b = 2,b=3` \u4ee5\u6b64\u7c7b\u63a8 In [ 15 ]: reduce ( lambda a , b : a * b , range ( 1 , 11 )) Out [ 15 ]: 3628800","title":"\u9ad8\u9636\u51fd\u6570"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/06_%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/#_17","text":"","title":"\u9012\u5f52"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/06_%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/#_18","text":"\u9012\u5f52\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u5d4c\u5957\u8c03\u7528! \u5728\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u7684\u8fc7\u7a0b\u4e2d,\u53c8\u76f4\u63a5\u6216\u95f4\u63a5\u5730\u8c03\u7528\u4e86\u8be5\u51fd\u6570\u672c\u8eab. \u9012\u5f52\u6709\u4e24\u4e2a\u660e\u786e\u7684\u9636\u6bb5: \u9012\u63a8: \u4ece\u5916\u5411\u91cc\u4e00\u5c42\u4e00\u5c42\u9012\u5f52\u8c03\u7528\u4e0b\u53bb, \u6ce8\u610f\u6bcf\u8fdb\u5165\u4e0b\u4e00\u5c42\u9012\u5f52, \u9012\u5f52\u95ee\u9898\u7684\u89c4\u6a21\u5fc5\u987b\u6709\u6240\u51cf\u5c11 \u56de\u6eaf: \u4ece\u91cc\u5411\u5916\u5f00\u59cb\u4e00\u5c42\u4e00\u5c42\u56de\u6eaf. \u9012\u5f52\u5fc5\u987b\u8981\u6709\u4e00\u4e2a\u660e\u786e\u7684\u7ed3\u675f\u6761\u4ef6,\u5728\u6ee1\u8db3\u8be5\u6761\u4ef6\u7684\u65f6\u5019,\u7ed3\u675f\u9012\u63a8\u9636\u6bb5,\u5f00\u59cb\u56de\u6eaf.. \u9012\u5f52\u7684\u7cbe\u9ad3\u5728\u4e8e\u901a\u8fc7\u4e0d\u65ad\u5730 \u91cd\u590d \u903c\u8fd1\u4e00\u4e2a\u6700\u7ec8\u7684\u7ed3\u679c. \u91cd\u590d\u4e24\u5b57, \u8fd8\u4f1a\u60f3\u5230while\u5faa\u73af, \u9012\u5f52\u80fd\u5b9e\u73b0\u7684while\u5faa\u73af\u7406\u8bba\u4e0a\u90fd\u80fd\u5e72,\u4f46\u67d0\u4e9b\u573a\u666f\u4e0b\u9012\u5f52\u5b9e\u73b0\u4f1a\u7b80\u5355\u5f88\u591a. import sys print ( sys . getrecursionlimit ()) # -- \u9ed8\u8ba4\u5141\u8bb8\u7684\u9012\u5f52\u5c42\u65701000 sys . setrecursionlimit ( 3000 ) # -- \u53ef\u4ee5\u81ea\u5df1\u8bbe\u7f6e\u9012\u5f52\u5c42\u6570 \"\"\" \u2605 --\u76f4\u63a5\u8c03\u7528 \"\"\" def foo (): print ( 'from foo' ) foo () # -- \u65e0\u9650\u5957\u5a03 # -- \u8c03\u7528\u51fd\u6570,\u5c31\u5f00\u8f9f\u4e00\u5757\u547d\u540d\u7a7a\u95f4,\u7ed3\u675f\u624d\u4f1a\u56de\u6536\u7a7a\u95f4 # \u5728\u8fd8\u672a\u7ed3\u675f\u7684\u51fd\u6570\u91cc\u9762\u53c8\u8c03\u7528\u4e86\u8be5\u51fd\u6570,\u53c8\u5f00\u8f9f\u4e86\u4e00\u5757\u547d\u540d\u7a7a\u95f4..\u5982\u6b64\u5f80\u590d,\u76f4\u5230\u5185\u5b58\u88ab\u6491\u7206. # \u5b98\u65b9\u6587\u6863: \u6bcf\u6b21\u9012\u5f52\u8c03\u7528\u90fd\u4f1a\u6709\u81ea\u5df1\u7684\u672c\u5730\u547d\u540d\u7a7a\u95f4 foo () \"\"\" \u2605 --\u95f4\u63a5\u8c03\u7528 \"\"\" def bar (): foo () def foo (): bar () foo ()","title":"\u6982\u5ff5"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/06_%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/#_19","text":"","title":"\u5e94\u7528"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/06_%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/#_20","text":"\u540e\u4e00\u4e2a\u4eba\u59cb\u7ec8\u6bd4\u524d\u4e00\u4e2a\u4eba\u59272\u5c81, \u5df2\u77e5\u7b2c\u4e00\u4e2a\u4eba26\u5c81, \u6c42\u7b2cn\u4e2a\u4eba\u7684\u5e74\u9f84 \"\"\" \u2605 --\u9012\u5f52\u7b97\u5e74\u9f84 \u4ece\u4e0a\u5230\u4e0b\u662f\u9012\u63a8\u8fc7\u7a0b \u4ece\u4e0b\u5230\u4e0a\u662f\u4f9d\u6b21return\u56de\u6eaf\u8fc7\u7a0b(26+2+2+2+2) age(5) -- return age(4) + 2 age(4) -- return age(3) + 2 age(3) -- return age(2) + 2 age(2) -- return age(1) + 2 age(1) -- return 26 \u6267\u884cage(5),\u60f3\u8981age(5)\u7684return\u8bed\u53e5\u5b8c\u6210\u6267\u884c,\u5f97\u5148\u77e5\u9053age(4)\u662f\u591a\u5c11\u4e0e2\u8fd0\u7b97\u540e\u624d\u80fdreturn\u5427?! \u4ee5\u6b64\u7c7b\u63a8,\u76f4\u5230\u5f97\u5230\u4e86age(1)\u7684\u503c. age(1)\u3001age(2)...age(5)\u4e2d\u7684return\u8bed\u53e5\u624d\u80fd\u4f9d\u6b21\u5b8c\u6210\u6267\u884c!! \"\"\" def age ( n ): if n == 1 : return 26 return age ( n - 1 ) + 2 # -- \u63a2\u8ba8 \u82e5\u5c06`return age(n-1) +2` \u6362\u6210 `print(age(n-1) +2)`, \u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f # \u56e0\u4e3a\u6ca1\u6709\u5199return\u8bed\u53e5,\u90a3\u4e48age(2)\u7684\u8fd4\u56de\u503c\u5c06\u662fNone # \u6253\u537028\u540e,\u4f1a\u62a5TypeError\u7684\u9519\u8bef:'NoneType' and 'int'\u4e0d\u80fd\u76f8\u52a0 # -- \u63a2\u8ba8: \u6539\u5199\u6210`age(n - 1)`\u8bed\u53e5,\u4f1a\u662f\u600e\u6837\u4e00\u4e2a\u8fc7\u7a0b? # age(5)\u8981\u7b49age(4)\u8fd0\u884c\u5b8c\u540e\u624d\u4f1a\u91ca\u653e\u7a7a\u95f4,age(4)\u8981\u5f97age(3)\u6267\u884c\u5b8c\u540e\u624d\u4f1a\u91ca\u653e\u7a7a\u95f4..\u4ee5\u6b64\u7c7b\u63a8 # \u6240\u4ee5\u54ea\u6015\u6ca1\u5199return\u8bed\u53e5,\u4e5f\u662f\u6709\u56de\u6eaf\u8fc7\u7a0b\u7684.. # \u53ea\u4e0d\u8fc7age(1)\u8fd4\u56de\u503c26\u88abage(2)\u63a5\u6536\u540e,age(2)\u8fd4\u56de\u7ed9age(3)\u7684\u503c\u4e3aNone. def age ( n ): if n == 1 : return 26 age ( n - 1 ) # -- return None \u8fd9\u662f\u4e00\u6761\u9690\u5f62\u7684\u8bed\u53e5 print ( age ( 5 )) # -- None # -- \u63a2\u8ba8: \u6539\u5199\u6210`return age(n - 1)`\u8bed\u53e5,\u4f1a\u662f\u600e\u6837\u4e00\u4e2a\u8fc7\u7a0b? # -- age(1)return 26\u7684\u8fd4\u56de\u503c\u7ed9\u4e86 age(2); age(3)\u518d\u7ed9age(4);\u6700\u540e26\u7ed9\u5230\u4e86age(5) def age ( n ): if n == 1 : return 26 return age ( n - 1 ) print ( age ( 5 )) # -- 26","title":"\u7ecf\u5178\u6848\u4f8b:\u7b97\u5e74\u9f84"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/06_%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/#_21","text":"my_list = [ 1 , [ 2 , [ 3 , [ 4 , [ 5 , [ 6 ]]]]]] res = [] def tell ( data ): for item in data : if type ( item ) is list : # -- \u7a0b\u5e8f\u4e0d\u65ad\u8c03\u7528\u65b0\u7684tell()\u9012\u63a8\u4e0b\u53bb,\u76f4\u5230\u9012\u5f52\u5230tell([6])\u65f6,\u4f1a\u8fd4\u56deNone\u503c,\u5f00\u59cb\u56de\u6eaf # -- \u5199\u4e0d\u5199\u8fd9\u4e2areturn\u90fd\u4e0d\u5f71\u54cd\u6700\u540e\u7ed3\u679c return tell ( item ) else : res . append ( item ) tell ( my_list ) print ( res ) # -- [1, 2, 3, 4, 5, 6] # -- \u8bf7\u5206\u6790\u4e0b\u4e0b\u65b9\u4ee3\u7801\u7684\u5b9e\u73b0\u8fc7\u7a0b.(\u5f53\u65f6\u81ea\u4e2a\u513f\u662f\u60f3\u5982\u6b64\u89e3\u51b3,\u4f46\u611f\u89c9\u591a\u6b64\u4e00\u4e3e.) my_list = [ 1 , [ 2 , [ 3 , [ 4 , [ 5 , [ 6 ]]]]]] res = [] def tell ( data ): for item in data : if type ( item ) is list : for i in tell ( item ): res . append ( i ) else : yield item for i in tell ( my_list ): res . append ( i ) print ( res ) # -- [1, 2, 3, 4, 5, 6]","title":"\u53d6\u5d4c\u5957\u5217\u8868\u4e2d\u7684\u503c"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/06_%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/#_22","text":"nums = [ 1 , 3 , 7 , 11 , 22 , 44 , 78 , 111 , 149 , 435 ] # -- \u7a0b\u5e8f\u4e2d\u5199\u4e0d\u5199return\u90fd\u4e0d\u4f1a\u5f71\u54cd\u7ed3\u679c. def num_find ( nums , search_num ): mid_index = len ( nums ) // 2 ''' if mid_index == 0: print('not exists.') return ''' # -- \u82e5\u9012\u63a8\u5230\u540e\u9762,nums\u4e2d\u53ea\u6709\u4e00\u4e2a\u5143\u7d20,\u5176nums[:0]\u3001nums[1:]\u7684\u503c\u90fd\u5c06\u4e3a[] # -- \u7a7a\u5217\u8868\u518d\u8fdb\u884c\u9012\u63a8,\u5bf9\u7a7a\u5217\u8868\u4e0b\u6807\u53d6\u503c\u4f1a\u62a5\u7d22\u5f15\u8d8a\u754c\u7684\u9519\u8bef!!! if mid_index != 0 : if nums [ mid_index ] > search_num : # search_num in the left return num_find ( nums [: mid_index ], search_num ) elif nums [ mid_index ] < search_num : # search_num in the right return num_find ( nums [ mid_index + 1 :], search_num ) else : # nums[mid_index] == search_num print ( 'find it.' ) else : print ( 'not exists.' ) num_find ( nums , 10 )","title":"\u4e8c\u5206\u6cd5"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/07_%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/","text":"\u7b80\u4ecb \u00b6 \u5185\u5b58\u65e0\u6cd5\u6c38\u4e45\u4fdd\u5b58\u6570\u636e, \u786c\u76d8\u53ef\u4ee5. \u7528\u6237\u5bf9\u6587\u4ef6\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c, \u5c31\u662f\u5728\u5411\u64cd\u4f5c\u7cfb\u7edf\u53d1\u8d77\u8c03\u7528\u8bf7\u6c42. \u64cd\u4f5c\u7cfb\u7edf\u5c06\u7528\u6237/\u5e94\u7528\u7a0b\u5e8f\u5bf9\u6587\u4ef6\u7684\u8bfb\u5199\u64cd\u4f5c\u8f6c\u6362\u6210\u5177\u4f53\u7684\u786c\u76d8\u6307\u4ee4 \u8fd9\u4e9b\u6307\u4ee4\u5c06\u63a7\u5236\u76d8\u7247\u8f6c\u52a8\u3001\u63a7\u5236\u673a\u68b0\u624b\u81c2\u79fb\u52a8\u6765\u8bfb\u5199\u6570\u636e \u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u5305\u542b\u4e24\u90e8\u5206\u8d44\u6e90: \u5e94\u7528\u7a0b\u5e8f\u7684\u53d8\u91cff\u548c\u64cd\u4f5c\u7cfb\u7edf\u6253\u5f00\u7684\u6587\u4ef6 # -- \u64cd\u4f5c\u7cfb\u7edf\u6253\u5f00\u6587\u4ef6,\u8fd4\u56de\u4e00\u4e2a\u6587\u4ef6\u5bf9\u8c61\u8d4b\u503c\u7ed9\u53d8\u91cff f = open ( 'a.txt' , 'r' , encoding = 'utf-8' , errors = 'ignore' ) # -- ignore\u8868\u793a\u5ffd\u7565\u7f16\u7801\u9519\u8bef # -- \u8c03\u7528\u6587\u4ef6\u5bf9\u8c61\u4e0b\u7684\u8bfb/\u5199\u65b9\u6cd5\uff0c\u4f1a\u88ab\u64cd\u4f5c\u7cfb\u7edf\u8f6c\u6362\u4e3a\u8bfb/\u5199\u786c\u76d8\u7684\u64cd\u4f5c data = f . read () # -- \u5411\u64cd\u4f5c\u7cfb\u7edf\u53d1\u8d77\u5173\u95ed\u6587\u4ef6\u7684\u8bf7\u6c42,\u56de\u6536\u7cfb\u7edf\u8d44\u6e90 # \u82e5\u4e0dclose\u5173\u95ed\u6587\u4ef6,\u53ef\u80fd\u4f1a\u9020\u6210\u8d44\u6e90\u6cc4\u9732!!! f . close () \u6ce8\u610f\u7f16\u7801\u95ee\u9898 : open () \u662f\u7531\u64cd\u4f5c\u7cfb\u7edf\u6253\u5f00\u6587\u4ef6 , \u82e5\u6253\u5f00\u7684\u662f \"\u6587\u672c\u6587\u4ef6\" , \u4f1a\u6d89\u53ca\u5230\u5b57\u7b26\u7f16\u7801\u95ee\u9898 . \u82e5open\u6ca1\u6709\u6307\u5b9a\u7f16\u7801 , \u90a3\u4e48\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u7528\u81ea\u5df1\u7684\u9ed8\u8ba4\u7f16\u7801\u53bb\u6253\u5f00\u6587\u4ef6 . windows\u662fgbk , linux\u662futf8 ! \u82e5\u8981\u4fdd\u8bc1\u4e0d\u4e71\u7801 , \u6587\u4ef6\u4ee5\u4ec0\u4e48\u65b9\u5f0f\u5b58\u5165\u786c\u76d8\u7684 , \u5c31\u8981\u4ee5\u4ec0\u4e48\u65b9\u5f0f\u6253\u5f00 ! \u8d44\u6e90\u6cc4\u6f0f \u662f\u6307\u8ba1\u7b97\u673a\u7a0b\u5e8f\u4e0d\u91ca\u653e\u81ea\u5df1\u5df2\u83b7\u5f97\u7684\u8d44\u6e90, \u5bfc\u81f4\u8d44\u6e90\u88ab\u767d\u767d\u6d6a\u8d39 f . close () # -- \u56de\u6536\u64cd\u4f5c\u7cfb\u7edf\u6253\u5f00\u7684\u6587\u4ef6\u8d44\u6e90 del f # -- \u56de\u6536\u5e94\u7528\u7a0b\u5e8f\u7ea7\u7684\u53d8\u91cf, \u5728\u7a0b\u5e8f\u7ed3\u675f\u7684\u65f6\u5019 Tips: close( )\u65b9\u6cd5\u7528\u4e8e\u5173\u95ed\u6587\u4ef6, Python\u7684\u5783\u573e\u56de\u6536\u673a\u5236, \u4f1a\u5728\u6587\u4ef6\u5bf9\u8c61f \u7684\u5f15\u7528\u8ba1\u6570\u964d\u81f3\u96f6\u7684\u65f6\u5019\u81ea\u52a8\u5173\u95ed\u6587\u4ef6; (\u4e5f\u5c31\u662f\u7a0b\u5e8f\u8fd0\u884c\u7ed3\u675f,\u547d\u540d\u7a7a\u95f4\u7684\u751f\u547d\u5468\u671f\u7ed3\u675f,\u5f15\u7528\u8ba1\u6570\u964d\u4e3a0) So, \u5728python\u7f16\u7a0b\u91cc, \u5982\u679c\u5fd8\u8bb0\u5173\u95ed\u6587\u4ef6\u67c4\u4e0d\u4f1a\u9020\u6210\u5185\u5b58\u6cc4\u9732\u90a3\u4e48\u5371\u9669\u7684\u7ed3\u679c; But, \u82e5\u5bf9\u6587\u4ef6\u8fdb\u884c\u4e86\u5199\u64cd\u4f5c, \u56e0\u4e3a\u7f13\u5b58\u673a\u5236, \u4e2d\u9014\u53d1\u751f\u65ad\u7535\u4e4b\u7c7b\u4e8b\u6545, \u90a3\u4e48\u7f13\u5b58\u7684\u6570\u636e\u5c06\u4f1a\u4e22\u5931.. \u56e0\u6b64, \u5b89\u5168\u8d77\u89c1, \u8981\u517b\u6210\u4f7f\u7528\u6587\u4ef6\u540e\u7acb\u523b\u5173\u95ed\u7684\u597d\u4e60\u60ef!!!\u6587\u4ef6\u5173\u95ed\u6216\u7f13\u51b2\u533a\u5df2\u6ee1,\u6570\u636e\u624d\u4f1a\u540c\u6b65\u5230\u78c1\u76d8. # -- with\u5173\u952e\u5b57\u5e2e\u6211\u4eec\u7ba1\u7406\u4e0a\u4e0b\u6587,\u5728\u6267\u884c\u5b8c\u5b50\u4ee3\u7801\u5757\u540e,with\u4f1a\u81ea\u52a8\u6267\u884cf.close() # -- \u53ef\u7528with\u540c\u65f6\u6253\u5f00\u591a\u4e2a\u6587\u4ef6,\u7528\u9017\u53f7\u5206\u9694\u5f00\u5373\u53ef with open ( 'a.txt' , 'r' ) as read_f , open ( 'b.txt' , 'w' ) as write_f : data = read_f . read () write_f . write ( data ) \u6587\u4ef6\u53e5\u67c4\u3001\u6587\u4ef6\u63cf\u8ff0\u7b26\u3001\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668 \u8fd9\u662f\u67e5\u9605\u535a\u5ba2\u65f6, \u7ecf\u5e38\u770b\u5230\u7684\u540d\u8bcd, linux\u7684\u5b66\u4e60\u4e2d\u63a5\u89e6\u8fc7\u6587\u4ef6\u63cf\u8ff0\u7b26(\u82e5\u8fdb\u7a0b\u62e5\u67091024\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26,\u8be5\u8fdb\u7a0b\u5c31\u80fd\u540c\u65f6\u6253\u5f001024\u4e2a\u6587\u4ef6), \u672c\u8d28\u5c31\u662f\u6570\u5b57, \u6587\u4ef6\u53e5\u67c4\u5e94\u8be5\u5dee\u4e0d\u591a, \u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u6682\u4e14\u653e\u4e00\u653e, \u6211\u4eec\u6682\u65f6\u53ea\u9700\u8981\u77e5\u9053, with\u4f1a\u81ea\u52a8\u5e2e\u6211\u4eec\u5173\u95ed\u6587\u4ef6, \u907f\u514d\u8d44\u6e90\u6cc4\u9732\u5373\u53ef.. \u5b66\u5b8c\u9762\u5411\u5bf9\u8c61\u540e\u518d\u6df1\u7a76!!! \u6587\u4ef6\u64cd\u4f5c\u6a21\u5f0f \u00b6 \u6a21\u5f0f \u542b\u4e49 r (\u9ed8\u8ba4) \u53ea\u8bfb w \u5199\u5165,\u4f1a\u8986\u76d6 a \u8ffd\u52a0 t (\u9ed8\u8ba4) \u6587\u672c\u6a21\u5f0f b \u4e8c\u8fdb\u5236 \u6587\u4ef6\u5185\u5bb9\u6a21\u5f0f r w a \u00b6 r (\u9ed8\u8ba4):\u53ea\u8bfb w :\u53ea\u5199 a :\u53ea\u8ffd\u52a0\u5199 r: \u53ea\u8bfb\u6a21\u5f0f \u53ea\u80fd\u8bfb,\u4e0d\u80fd\u5199 \u5728\u6587\u4ef6\u4e0d\u5b58\u5728\u65f6,\u4f1a\u62a5\u9519,\u5728\u6587\u4ef6\u5b58\u5728\u7684\u65f6\u5019\u4f1a\u5c06\u6587\u4ef6\u6307\u9488\u79fb\u52a8\u5230\u5f00\u5934 with open ( 'a.txt' , mode = 'r' , encoding = 'utf-8' ) as f : res = f . read () w: \u53ea\u5199\u6a21\u5f0f \u53ea\u80fd\u5199,\u4e0d\u80fd\u8bfb \u5728\u6587\u4ef6\u4e0d\u5b58\u5728\u65f6\u4f1a\u521b\u5efa\u7a7a\u6587\u4ef6,\u6587\u4ef6\u5b58\u5728\u4f1a\u6e05\u7a7a\u6587\u4ef6,\u6587\u4ef6\u6307\u9488\u8dd1\u5230\u6587\u4ef6\u5f00\u5934 with open ( 'b.txt' , mode = 'w' , encoding = 'utf-8' ) as f : f . write ( 'Hello \\n ' ) f . write ( 'World \\n ' ) a: \u53ea\u8ffd\u52a0\u5199\u6a21\u5f0f \u53ea\u80fd\u5199,\u4e0d\u80fd\u8bfb \u5728\u6587\u4ef6\u4e0d\u5b58\u5728\u65f6\u4f1a\u521b\u5efa\u7a7a\u6587\u4ef6,\u6587\u4ef6\u5b58\u5728\u4f1a\u5c06\u6587\u4ef6\u6307\u9488\u76f4\u63a5\u79fb\u52a8\u5230\u6587\u4ef6\u672b\u5c3e with open ( 'b.txt' , mode = 'a' , encoding = 'utf-8' ) as f : f . write ( 'egon \\n ' ) f . write ( 'yyds \\n ' ) \u5f3a\u8c03 w \u6a21\u5f0f\u4e0e a \u6a21\u5f0f\u7684\u5f02\u540c: 1> \u76f8\u540c\u70b9: \u5728\u6253\u5f00\u7684\u6587\u4ef6\u4e0d\u5173\u95ed\u7684\u60c5\u51b5\u4e0b, \u8fde\u7eed\u7684\u5199\u5165, \u65b0\u5199\u7684\u5185\u5bb9\u603b\u4f1a\u8ddf\u5728\u524d\u5199\u7684\u5185\u5bb9\u4e4b\u540e 2> \u4e0d\u540c\u70b9: \u91cd\u65b0\u6253\u5f00\u6587\u4ef6. a\u6a21\u5f0f\u4e0d\u4f1a\u6e05\u7a7a\u539f\u6587\u4ef6\u5185\u5bb9, w\u6a21\u5f0f\u4f1a\uff01 \u6211\u4eec\u901a\u5e38\u53ea\u4f7f\u7528r/w/a, \u8981\u4e48\u53ea\u8bfb, \u8981\u4e48\u53ea\u5199; \u4e00\u822c\u4e0d\u7528\u53ef\u8bfb\u53ef\u5199\u7684\u6a21\u5f0fr+/w+/a+ . \u9047\u5230\u4e86\u4e5f\u4e0d\u6015, \u73b0\u5b66\u5457! \u6587\u4ef6\u8bfb\u5199\u6a21\u5f0f t b \u00b6 \u5927\u524d\u63d0 : tb\u6a21\u5f0f\u5747\u4e0d\u80fd\u5355\u72ec\u4f7f\u7528, \u5fc5\u987b\u4e0er/w/a\u4e4b\u4e00\u7ed3\u5408\u4f7f\u7528 \u53ea\u6709 \u6587\u672c\u6587\u4ef6\u624d\u80fd\u7528t\u6a21\u5f0f, \u4e5f\u53ea\u6709 \u6587\u672c\u6587\u4ef6\u624d\u6709\u5b57\u7b26\u7f16\u7801\u7684\u6982\u5ff5 t (\u9ed8\u8ba4\u7684) : \u6587\u672c\u6a21\u5f0f \u25cb \u8bfb\u5199\u6587\u4ef6\u90fd\u662f\u4ee5 \u5b57\u7b26\u4e32 \u4e3a\u5355\u4f4d\u7684 \u25cb \u53ea\u80fd\u9488\u5bf9\u6587\u672c\u6587\u4ef6 \u25cb \u5fc5\u987b\u6307\u5b9a encoding\u53c2\u6570 # -- t\u6a21\u5f0f:\u5982\u679c\u6211\u4eec\u6307\u5b9a\u7684\u6587\u4ef6\u6253\u5f00\u6a21\u5f0f\u4e3ar/w/a, \u5176\u5b9e\u9ed8\u8ba4\u5c31\u662frt/wt/at with open ( 'a.txt' , mode = 'rt' , encoding = 'utf-8' ) as f : res = f . read () print ( type ( res )) # -- \u8f93\u51fa\u7ed3\u679c\u4e3a: <class 'str'> with open ( 'a.txt' , mode = 'wt' , encoding = 'utf-8' ) as f : s = 'abc' f . write ( s ) # -- \u5199\u5165\u7684\u4e5f\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u7c7b\u578b # -- \u5f3a\u8c03: t\u6a21\u5f0f\u53ea\u80fd\u7528\u4e8e\u64cd\u4f5c\u6587\u672c\u6587\u4ef6,\u65e0\u8bba\u8bfb\u5199,\u90fd\u5e94\u8be5\u4ee5\u5b57\u7b26\u4e32\u4e3a\u5355\u4f4d # \u800c\u5b58\u53d6\u786c\u76d8\u672c\u8d28\u90fd\u662f\u4e8c\u8fdb\u5236\u7684\u5f62\u5f0f,\u5f53\u6307\u5b9at\u6a21\u5f0f\u65f6,\u5185\u90e8\u5e2e\u6211\u4eec\u505a\u4e86\u7f16\u7801\u4e0e\u89e3\u7801 b : \u4e8c\u8fdb\u5236\u6a21\u5f0f \u4e00\u79cd\u901a\u7528\u7684\u6587\u4ef6\u8bfb\u53d6\u6a21\u5f0f, \u56e0\u4e3a\u6240\u6709\u7684\u6587\u4ef6\u5728\u786c\u76d8\u4e2d\u90fd\u662f\u4ee5\u4e8c\u8fdb\u5236\u5f62\u5f0f\u5b58\u653e\u7684 \u25cb \u8bfb\u5199\u6587\u4ef6\u90fd\u662f\u4ee5bytes/\u4e8c\u8fdb\u5236\u4e3a\u5355\u4f4d\u7684 \u25cb \u53ef\u4ee5\u9488\u5bf9\u6240\u6709\u6587\u4ef6 \u25cb \u4e00\u5b9a \u4e0d\u80fd\u6307\u5b9a encoding\u53c2\u6570 # -- b\u6a21\u5f0f:\u8bfb\u5199\u90fd\u662f\u4ee5\u4e8c\u8fdb\u5236\u4f4d\u5355\u4f4d with open ( '1.mp4' , mode = 'rb' ) as f : data = f . read () print ( type ( data )) # -- \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a<class 'bytes'> with open ( 'a.txt' , mode = 'wb' ) as f : msg = \"\u4f60\u597d\" res = msg . encode ( 'utf-8' ) # -- res\u4e3abytes\u7c7b\u578b f . write ( res ) # -- \u5728b\u6a21\u5f0f\u4e0b\u5199\u5165\u6587\u4ef6\u7684\u53ea\u80fd\u662fbytes\u7c7b\u578b \u5f3a\u8c03: b\u6a21\u5f0f\u5bf9\u6bd4t\u6a21\u5f0f 1> \u5728\u64cd\u4f5c\u7eaf\u6587\u672c\u6587\u4ef6\u65b9\u9762 t\u6a21\u5f0f\u5e2e\u6211\u4eec\u7701\u53bb\u4e86\u7f16\u7801\u4e0e\u89e3\u7801\u7684\u73af\u8282,b\u6a21\u5f0f\u5219\u9700\u8981\u624b\u52a8\u7f16\u7801\u4e0e\u89e3\u7801 2> \u9488\u5bf9\u975e\u6587\u672c\u6587\u4ef6( \u5982\u56fe\u7247\u3001\u89c6\u9891\u3001\u97f3\u9891\u7b49) \u53ea\u80fd\u4f7f\u7528b\u6a21\u5f0f \u7ec3\u4e60: \u62f7\u8d1d\u5de5\u5177 \u00b6 src_file = input ( '\u6e90\u6587\u4ef6\u8def\u5f84: ' ) . strip () dst_file = input ( '\u76ee\u6807\u6587\u4ef6\u8def\u5f84: ' ) . strip () with open ( r ' %s ' % src_file , mode = 'rb' ) as read_f , open ( r ' %s ' % dst_file , mode = 'wb' ) as write_f : for line in read_f : # print(line) write_f . write ( line ) \u64cd\u4f5c\u6587\u4ef6\u7684\u65b9\u6cd5 \u00b6 \u8bfb read \u00b6 \u25cb f.read([size=-1]) \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6size\u4e2a\u5b57\u7b26\u7684\u6570\u636e; \u82e5\u672a\u6307\u5b9asize\u6216\u7ed9\u5b9a\u4e3a\u8d1f\u503c\u65f6,\u8bfb\u53d6\u5269\u4f59\u7684\u6240\u6709\u5185\u5bb9,\u6267\u884c\u5b8c\u8be5\u64cd\u4f5c\u540e, \u6587\u4ef6\u6307\u9488\u4f1a\u79fb\u52a8\u5230\u6587\u4ef6\u672b\u5c3e; \u6ce8\u610f: \u6307\u5b9asize\u540e, \u82e5\u662f rt\u6a21\u5f0f \u8bfb\u53d6\u7684\u662f\u6307\u5b9a \u6570\u636e/\u5b57\u7b26\u7684\u957f\u5ea6 . \u82e5\u662f rb\u6a21\u5f0f \u8bfb\u53d6\u7684\u662f \u5b57\u8282\u6570 !! \u5728utf-8\u7f16\u7801\u4e0b, \u4e00\u4e2a\u6c49\u5b50\u5360\u7528\u4e09\u4e2a\u5b57\u8282, \u4e00\u4e2a\u5b57\u6bcd\u548c\u6570\u5b57\u5360\u7528\u4e00\u4e2a\u5b57\u8282!!! \u25cb f.readline([size=-1]) \u8bfb\u53d6\u4e00\u884c\u5185\u5bb9(\u5305\u62ec\u6362\u884c\u7b26), \u5149\u6807\u79fb\u52a8\u5230\u7b2c\u4e8c\u884c\u9996\u90e8; \u82e5\u6307\u5b9a\u4e86size, \u8fd4\u56desize\u4e2a\u5b57\u7b26 \u25cb f.readlines() \u8bfb\u53d6\u6bcf\u4e00\u884c\u5185\u5bb9, \u5b58\u653e\u4e8e\u5217\u8868\u4e2d \u25cb \u76f4\u63a5 list(f) \u3001\u76f4\u63a5\u8fed\u4ee3\u8bfb\u53d6. \u518d\u6b21\u5f3a\u8c03 : \u53ea\u6709\u5728t\u6a21\u5f0f\u4e0b\u7684read(n),n\u4ee3\u8868\u7684\u662f\u5b57\u7b26\u4e2a\u6570; \u9664\u6b64\u4e4b\u5916\u4f46\u51e1\u6d89\u53ca\u6587\u4ef6\u6307\u9488\u7684\u79fb\u52a8\u90fd\u662f\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d \"\"\"train.txt(utf-8\u7f16\u7801)\u7684\u5185\u5bb9\u5982\u4e0b: ab\u54c8\u54c8 b z \"\"\" with open ( 'train.txt' , 'rt' , encoding = 'utf-8' ) as f : res_len = f . read ( 5 ) # -- \u8bfb\u53d6\u7684\u662f\u6307\u5b9a\u957f\u5ea6\u7684\u6570\u636e/\u5b57\u7b26(/n\u6362\u884c\u7b26\u3001\u4e00\u4e2a\u5b57\u6bcd\u3001\u4e00\u4e2a\u6c49\u5b57\u90fd\u7b97\u4f5c\u4e00\u4e2a\u5b57\u7b26) print ( res_len , type ( res )) # -- ab\u54c8\u54c8/n <class 'str'> # --- --- --- with open ( 'train.txt' , 'rb' ) as f : res = f . read ( 9 ) # -- \u8bfb\u53d6\u7684\u662fBytes\u5b57\u8282\u6570 \u5206\u6790:ab\u54c8\u54c8\\n 1+1+3+3+1=9 # -- b'ab\\xe5\\x93\\x88\\xe5\\x93\\x88\\n' <class 'bytes'> ab\u54c8\u54c8\\n print ( res , type ( res ), res . decode ( 'utf-8' )) \u5f3a\u8c03: f.read() \u4e0e f.readlines() \u90fd\u662f\u5c06\u5185\u5bb9\u4e00\u6b21\u6027\u8bfb\u5165\u5185\u5bb9, \u5982\u679c\u5185\u5bb9\u8fc7\u5927\u4f1a\u5bfc\u81f4\u5185\u5b58\u6ea2\u51fa. \u82e5\u8fd8\u60f3\u5c06\u5185\u5bb9\u5168\u8bfb\u5165\u5185\u5b58\uff0c\u5219\u5fc5\u987b\u5206\u591a\u6b21\u8bfb\u5165 # -- \u65b9\u5f0f\u4e00 with open ( 'a.txt' , mode = 'rt' , encoding = 'utf-8' ) as f : for line in f : print ( line ) # -- \u540c\u4e00\u65f6\u523b\u53ea\u8bfb\u5165\u4e00\u884c\u5185\u5bb9\u5230\u5185\u5b58\u4e2d # -- \u65b9\u5f0f\u4e8c with open ( '1.mp4' , mode = 'rb' ) as f : while True : data = f . read ( 1024 ) # -- \u540c\u4e00\u65f6\u523b\u53ea\u8bfb\u51651024\u4e2aBytes\u5230\u5185\u5b58\u4e2d if len ( data ) == 0 : break print ( data ) # -- yield data \u5199 write \u00b6 f . write ( '1111 \\n 222 \\n ' ) # -- \u9488\u5bf9\u6587\u672c\u6a21\u5f0f\u7684\u5199,\u9700\u8981\u81ea\u5df1\u5199\u6362\u884c\u7b26 f . write ( '1111 \\n 222 \\n ' . encode ( 'utf-8' )) # -- \u9488\u5bf9b\u6a21\u5f0f\u7684\u5199,\u9700\u8981\u81ea\u5df1\u5199\u6362\u884c\u7b26 f . writelines ([ '333 \\n ' , '444 \\n ' ]) # -- \u6587\u4ef6\u6a21\u5f0f,\u5199\u5165\u591a\u884c\u6570\u636e f . writelines ([ bytes ( '333 \\n ' , encoding = 'utf-8' ), '444 \\n ' . encode ( 'utf-8' )]) # -- b\u6a21\u5f0f,\u5199\u5165\u591a\u884c \u5176\u4ed6(\u4e86\u89e3) \u00b6 f . readable () # -- \u6587\u4ef6\u662f\u5426\u53ef\u8bfb f . writable () # -- \u6587\u4ef6\u662f\u5426\u53ef\u8bfb f . closed # -- \u6587\u4ef6\u662f\u5426\u5173\u95ed f . encoding # -- \u6587\u4ef6\u7f16\u7801,\u5982\u679c\u6587\u4ef6\u6253\u5f00\u6a21\u5f0f\u4e3ab,\u5219\u6ca1\u6709\u8be5\u5c5e\u6027 f . flush () # -- \u7acb\u523b\u5c06\u6587\u4ef6\u5185\u5bb9\u4ece\u5185\u5b58\u5237\u5230\u786c\u76d8 f . name # -- \u6587\u4ef6\u540d\u5b57 \u63a7\u5236\u6587\u4ef6\u6307\u9488 \u00b6 \u4e0a\u8ff0\u6587\u4ef6\u5185\u6307\u9488\u7684\u79fb\u52a8\u90fd\u662f\u7531\u8bfb/\u5199\u64cd\u4f5c\u800c\u88ab\u52a8\u89e6\u53d1\u7684, \u82e5\u60f3\u8bfb\u53d6\u6587\u4ef6\u67d0\u4e00\u7279\u5b9a\u4f4d\u7f6e\u7684\u6570\u636e \u5219\u9700\u8981\u7528 f.seek \u65b9\u6cd5\u4e3b\u52a8\u63a7\u5236\u6587\u4ef6\u5185\u6307\u9488\u7684\u79fb\u52a8 f.seek(offset,whence) offset : \u6307\u9488\u79fb\u52a8\u7684\u5b57\u8282\u6570, \u6ce8\u610f\u5355\u4f4d\u662f\u5b57\u8282bytes whence : \u6a21\u5f0f\u63a7\u5236, \u6709\u4e09\u4e2a\u53d6\u503c 0 : \u9ed8\u8ba4\u7684\u6a21\u5f0f,\u8be5\u6a21\u5f0f\u4ee3\u8868\u6307\u9488\u79fb\u52a8\u7684\u5b57\u8282\u6570\u662f\u4ee5 \u6587\u4ef6\u5f00\u5934 \u4e3a\u53c2\u7167\u7684 1 : \u8be5\u6a21\u5f0f\u4ee3\u8868\u6307\u9488\u79fb\u52a8\u7684\u5b57\u8282\u6570\u662f\u4ee5 \u5f53\u524d\u6240\u5728\u7684\u4f4d\u7f6e \u4e3a\u53c2\u7167\u7684 2 : \u8be5\u6a21\u5f0f\u4ee3\u8868\u6307\u9488\u79fb\u52a8\u7684\u5b57\u8282\u6570\u662f\u4ee5 \u6587\u4ef6\u672b\u5c3e\u7684\u4f4d\u7f6e \u4e3a\u53c2\u7167\u7684 \u5176\u4e2d0\u6a21\u5f0f\u53ef\u4ee5\u5728t\u6216\u8005b\u6a21\u5f0f\u4f7f\u7528, \u800c1\u8ddf2\u6a21\u5f0f\u53ea\u80fd\u5728b\u6a21\u5f0f\u4e0b\u7528 # -- a.txt\u7528utf-8\u7f16\u7801,\u5185\u5bb9\u5982\u4e0b (abc\u5404\u53601\u4e2a\u5b57\u8282,\u4e2d\u6587\"\u4f60\"\u3001\"\u597d\"\u5404\u53603\u4e2a\u5b57\u8282) abc\u4f60\u597d 0\u6a21\u5f0f \u00b6 with open ( 'a.txt' , mode = 'rt' , encoding = 'utf-8' ) as f : f . seek ( 3 , 0 ) # -- \u53c2\u7167\u6587\u4ef6\u5f00\u5934\u79fb\u52a8\u4e863\u4e2a\u5b57\u8282 \u7b80\u5355\u7406\u89e3\u524d3\u4e2a\u5b57\u8282\u6570\u636e\u4e0d\u8003\u8651\u5566. print ( f . tell ()) # -- \u67e5\u770b\u5f53\u524d\u6587\u4ef6\u6307\u9488\u8ddd\u79bb\u6587\u4ef6\u5f00\u5934\u7684\u4f4d\u7f6e,\u8f93\u51fa\u7ed3\u679c\u4e3a3 print ( f . read ()) # -- \u4ece\u7b2c4\u4e2a\u5b57\u8282\u5f00\u59cb\u8bfb\u5230\u6587\u4ef6\u672b\u5c3e,\u8f93\u51fa\u7ed3\u679c\u4e3a: \u4f60\u597d # \u6ce8\u610f:\u7531\u4e8e\u5728t\u6a21\u5f0f\u4e0b,\u4f1a\u5c06\u8bfb\u53d6\u7684\u5185\u5bb9\u81ea\u52a8\u89e3\u7801,\u6240\u4ee5\u5fc5\u987b\u4fdd\u8bc1\u8bfb\u53d6\u7684\u5185\u5bb9\u662f\u4e00\u4e2a\u5b8c\u6574\u4e2d\u6587\u6570\u636e,\u5426\u5219\u89e3\u7801\u5931\u8d25 with open ( 'a.txt' , mode = 'rb' ) as f : f . seek ( 6 , 0 ) print ( f . read () . decode ( 'utf-8' )) # -- \u8f93\u51fa\u7ed3\u679c\u4e3a: \u597d 1\u6a21\u5f0f \u00b6 with open ( 'a.txt' , mode = 'rb' ) as f : f . seek ( 3 , 1 ) # -- \u4ece\u5f53\u524d\u4f4d\u7f6e\u5f80\u540e\u79fb\u52a83\u4e2a\u5b57\u8282,\u800c\u6b64\u65f6\u7684\u5f53\u524d\u4f4d\u7f6e\u5c31\u662f\u6587\u4ef6\u5f00\u5934 print ( f . tell ()) # -- \u8f93\u51fa\u7ed3\u679c\u4e3a:3 f . seek ( 4 , 1 ) # -- \u4ece\u5f53\u524d\u4f4d\u7f6e\u5f80\u540e\u79fb\u52a84\u4e2a\u5b57\u8282,\u800c\u6b64\u65f6\u7684\u5f53\u524d\u4f4d\u7f6e\u4e3a3 print ( f . tell ()) # -- \u8f93\u51fa\u7ed3\u679c\u4e3a:7 2\u6a21\u5f0f \u00b6 with open ( 'a.txt' , mode = 'rb' ) as f : f . seek ( 0 , 2 ) # -- \u53c2\u7167\u6587\u4ef6\u672b\u5c3e\u79fb\u52a80\u4e2a\u5b57\u8282,\u5373\u76f4\u63a5\u8df3\u5230\u6587\u4ef6\u672b\u5c3e print ( f . tell ()) # -- \u8f93\u51fa\u7ed3\u679c\u4e3a:9 f . seek ( - 3 , 2 ) # -- \u53c2\u7167\u6587\u4ef6\u672b\u5c3e\u5f80\u524d\u79fb\u52a8\u4e863\u4e2a\u5b57\u8282 print ( f . read () . decode ( 'utf-8' )) # -- \u8f93\u51fa\u7ed3\u679c\u4e3a:\u597d # -- \u5c0f\u7ec3\u4e60:\u5b9e\u73b0\u52a8\u6001\u67e5\u770b\u6700\u65b0\u4e00\u6761\u65e5\u5fd7\u7684\u6548\u679c import time with open ( 'access.log' , mode = 'rb' ) as f : f . seek ( 0 , 2 ) while True : line = f . readline () if len ( line ) == 0 : # -- \u82e5\u65e0\u65b0\u589e\u5185\u5bb9,\u77610.5\u79d2\u540e\u518d\u6b21\u8fdb\u5165\u5faa\u73af. time . sleep ( 0.5 ) else : print ( line . decode ( 'utf-8' ), end = '' ) \u4fee\u6539\u6587\u4ef6 \u00b6 \u786c\u76d8\u7a7a\u95f4\u662f\u65e0\u6cd5\u4fee\u6539\u7684,\u786c\u76d8\u4e2d\u6570\u636e\u7684\u66f4\u65b0\u90fd\u662f\u7528\u65b0\u5185\u5bb9\u8986\u76d6\u65e7\u5185\u5bb9! \u5185\u5b58\u4e2d\u7684\u6570\u636e\u662f\u53ef\u4ee5\u4fee\u6539\u7684! \u4fee\u6539\u65b9\u5f0f\u4e00 \u00b6 \u5b9e\u73b0\u601d\u8def : \u5c06\u6587\u4ef6\u5185\u5bb9\u53d1\u4e00\u6b21\u6027\u5168\u90e8\u8bfb\u5165\u5185\u5b58, \u7136\u540e\u5728\u5185\u5b58\u4e2d\u4fee\u6539\u5b8c\u6bd5\u540e\u518d\u8986\u76d6\u5199\u56de\u539f\u6587\u4ef6 \u4f18\u70b9 : \u5728\u6587\u4ef6\u4fee\u6539\u8fc7\u7a0b\u4e2d\u540c\u4e00\u4efd\u6570\u636e\u53ea\u6709\u4e00\u4efd \u7f3a\u70b9 : \u4f1a\u8fc7\u591a\u5730\u5360\u7528\u5185\u5b58 with open ( 'db.txt' , mode = 'rt' , encoding = 'utf-8' ) as f : data = f . read () with open ( 'db.txt' , mode = 'wt' , encoding = 'utf-8' ) as f : f . write ( data . replace ( 'kevin' , 'SB' )) \u4fee\u6539\u65b9\u5f0f\u4e8c \u00b6 \u5b9e\u73b0\u601d\u8def : \u4ee5\u8bfb\u7684\u65b9\u5f0f\u6253\u5f00\u539f\u6587\u4ef6,\u4ee5\u5199\u7684\u65b9\u5f0f\u6253\u5f00\u4e00\u4e2a\u4e34\u65f6\u7684\u65b0\u6587\u4ef6 \u4ece\u539f\u6587\u4ef6\u4e2d\u5faa\u73af\u8bfb\u53d6\u6bcf\u4e00\u884c\u5185\u5bb9,\u4fee\u6539\u5b8c\u540e\u5199\u5165\u4e34\u65f6\u6587\u4ef6 \u5220\u6389\u539f\u6587\u4ef6,\u5c06\u4e34\u65f6\u6587\u4ef6\u91cd\u547d\u540d\u4e3a\u539f\u6587\u4ef6\u540d\u7684\u540d\u5b57 \u4f18\u70b9 : \u4e0d\u4f1a\u5360\u7528\u8fc7\u591a\u7684\u5185\u5b58, \u540c\u4e00\u65f6\u523b\u53ea\u6709\u4e00\u884c\u5185\u5bb9\u5b58\u5728\u4e8e\u5185\u5b58\u4e2d \u7f3a\u70b9 : \u5728\u4fee\u6539\u671f\u95f4,\u6587\u4ef6\u5185\u5bb9\u59cb\u7ec8\u5b58\u5728\u4e24\u4efd,\u4f46\u4fee\u6539\u5b8c\u6bd5\u540e\u4f1a\u53ea\u7559\u4e00\u4efd import os with open ( 'db.txt' , mode = 'rt' , encoding = 'utf-8' ) as read_f , \\ open ( '.db.txt.swap' , mode = 'wt' , encoding = 'utf-8' ) as wrife_f : for line in read_f : wrife_f . write ( line . replace ( 'AB' , 'Hhh' )) os . remove ( 'db.txt' ) # -- \u5220\u9664\u539f\u6587\u4ef6 os . rename ( '.db.txt.swap' , 'db.txt' ) # -- \u4e34\u65f6\u6587\u4ef6\u91cd\u65b0\u547d\u540d\u4e3a\u539f\u6587\u4ef6\u7684\u540d\u5b57","title":"\u6587\u4ef6\u5904\u7406"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/07_%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/#_1","text":"\u5185\u5b58\u65e0\u6cd5\u6c38\u4e45\u4fdd\u5b58\u6570\u636e, \u786c\u76d8\u53ef\u4ee5. \u7528\u6237\u5bf9\u6587\u4ef6\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c, \u5c31\u662f\u5728\u5411\u64cd\u4f5c\u7cfb\u7edf\u53d1\u8d77\u8c03\u7528\u8bf7\u6c42. \u64cd\u4f5c\u7cfb\u7edf\u5c06\u7528\u6237/\u5e94\u7528\u7a0b\u5e8f\u5bf9\u6587\u4ef6\u7684\u8bfb\u5199\u64cd\u4f5c\u8f6c\u6362\u6210\u5177\u4f53\u7684\u786c\u76d8\u6307\u4ee4 \u8fd9\u4e9b\u6307\u4ee4\u5c06\u63a7\u5236\u76d8\u7247\u8f6c\u52a8\u3001\u63a7\u5236\u673a\u68b0\u624b\u81c2\u79fb\u52a8\u6765\u8bfb\u5199\u6570\u636e \u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u5305\u542b\u4e24\u90e8\u5206\u8d44\u6e90: \u5e94\u7528\u7a0b\u5e8f\u7684\u53d8\u91cff\u548c\u64cd\u4f5c\u7cfb\u7edf\u6253\u5f00\u7684\u6587\u4ef6 # -- \u64cd\u4f5c\u7cfb\u7edf\u6253\u5f00\u6587\u4ef6,\u8fd4\u56de\u4e00\u4e2a\u6587\u4ef6\u5bf9\u8c61\u8d4b\u503c\u7ed9\u53d8\u91cff f = open ( 'a.txt' , 'r' , encoding = 'utf-8' , errors = 'ignore' ) # -- ignore\u8868\u793a\u5ffd\u7565\u7f16\u7801\u9519\u8bef # -- \u8c03\u7528\u6587\u4ef6\u5bf9\u8c61\u4e0b\u7684\u8bfb/\u5199\u65b9\u6cd5\uff0c\u4f1a\u88ab\u64cd\u4f5c\u7cfb\u7edf\u8f6c\u6362\u4e3a\u8bfb/\u5199\u786c\u76d8\u7684\u64cd\u4f5c data = f . read () # -- \u5411\u64cd\u4f5c\u7cfb\u7edf\u53d1\u8d77\u5173\u95ed\u6587\u4ef6\u7684\u8bf7\u6c42,\u56de\u6536\u7cfb\u7edf\u8d44\u6e90 # \u82e5\u4e0dclose\u5173\u95ed\u6587\u4ef6,\u53ef\u80fd\u4f1a\u9020\u6210\u8d44\u6e90\u6cc4\u9732!!! f . close () \u6ce8\u610f\u7f16\u7801\u95ee\u9898 : open () \u662f\u7531\u64cd\u4f5c\u7cfb\u7edf\u6253\u5f00\u6587\u4ef6 , \u82e5\u6253\u5f00\u7684\u662f \"\u6587\u672c\u6587\u4ef6\" , \u4f1a\u6d89\u53ca\u5230\u5b57\u7b26\u7f16\u7801\u95ee\u9898 . \u82e5open\u6ca1\u6709\u6307\u5b9a\u7f16\u7801 , \u90a3\u4e48\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u7528\u81ea\u5df1\u7684\u9ed8\u8ba4\u7f16\u7801\u53bb\u6253\u5f00\u6587\u4ef6 . windows\u662fgbk , linux\u662futf8 ! \u82e5\u8981\u4fdd\u8bc1\u4e0d\u4e71\u7801 , \u6587\u4ef6\u4ee5\u4ec0\u4e48\u65b9\u5f0f\u5b58\u5165\u786c\u76d8\u7684 , \u5c31\u8981\u4ee5\u4ec0\u4e48\u65b9\u5f0f\u6253\u5f00 ! \u8d44\u6e90\u6cc4\u6f0f \u662f\u6307\u8ba1\u7b97\u673a\u7a0b\u5e8f\u4e0d\u91ca\u653e\u81ea\u5df1\u5df2\u83b7\u5f97\u7684\u8d44\u6e90, \u5bfc\u81f4\u8d44\u6e90\u88ab\u767d\u767d\u6d6a\u8d39 f . close () # -- \u56de\u6536\u64cd\u4f5c\u7cfb\u7edf\u6253\u5f00\u7684\u6587\u4ef6\u8d44\u6e90 del f # -- \u56de\u6536\u5e94\u7528\u7a0b\u5e8f\u7ea7\u7684\u53d8\u91cf, \u5728\u7a0b\u5e8f\u7ed3\u675f\u7684\u65f6\u5019 Tips: close( )\u65b9\u6cd5\u7528\u4e8e\u5173\u95ed\u6587\u4ef6, Python\u7684\u5783\u573e\u56de\u6536\u673a\u5236, \u4f1a\u5728\u6587\u4ef6\u5bf9\u8c61f \u7684\u5f15\u7528\u8ba1\u6570\u964d\u81f3\u96f6\u7684\u65f6\u5019\u81ea\u52a8\u5173\u95ed\u6587\u4ef6; (\u4e5f\u5c31\u662f\u7a0b\u5e8f\u8fd0\u884c\u7ed3\u675f,\u547d\u540d\u7a7a\u95f4\u7684\u751f\u547d\u5468\u671f\u7ed3\u675f,\u5f15\u7528\u8ba1\u6570\u964d\u4e3a0) So, \u5728python\u7f16\u7a0b\u91cc, \u5982\u679c\u5fd8\u8bb0\u5173\u95ed\u6587\u4ef6\u67c4\u4e0d\u4f1a\u9020\u6210\u5185\u5b58\u6cc4\u9732\u90a3\u4e48\u5371\u9669\u7684\u7ed3\u679c; But, \u82e5\u5bf9\u6587\u4ef6\u8fdb\u884c\u4e86\u5199\u64cd\u4f5c, \u56e0\u4e3a\u7f13\u5b58\u673a\u5236, \u4e2d\u9014\u53d1\u751f\u65ad\u7535\u4e4b\u7c7b\u4e8b\u6545, \u90a3\u4e48\u7f13\u5b58\u7684\u6570\u636e\u5c06\u4f1a\u4e22\u5931.. \u56e0\u6b64, \u5b89\u5168\u8d77\u89c1, \u8981\u517b\u6210\u4f7f\u7528\u6587\u4ef6\u540e\u7acb\u523b\u5173\u95ed\u7684\u597d\u4e60\u60ef!!!\u6587\u4ef6\u5173\u95ed\u6216\u7f13\u51b2\u533a\u5df2\u6ee1,\u6570\u636e\u624d\u4f1a\u540c\u6b65\u5230\u78c1\u76d8. # -- with\u5173\u952e\u5b57\u5e2e\u6211\u4eec\u7ba1\u7406\u4e0a\u4e0b\u6587,\u5728\u6267\u884c\u5b8c\u5b50\u4ee3\u7801\u5757\u540e,with\u4f1a\u81ea\u52a8\u6267\u884cf.close() # -- \u53ef\u7528with\u540c\u65f6\u6253\u5f00\u591a\u4e2a\u6587\u4ef6,\u7528\u9017\u53f7\u5206\u9694\u5f00\u5373\u53ef with open ( 'a.txt' , 'r' ) as read_f , open ( 'b.txt' , 'w' ) as write_f : data = read_f . read () write_f . write ( data ) \u6587\u4ef6\u53e5\u67c4\u3001\u6587\u4ef6\u63cf\u8ff0\u7b26\u3001\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668 \u8fd9\u662f\u67e5\u9605\u535a\u5ba2\u65f6, \u7ecf\u5e38\u770b\u5230\u7684\u540d\u8bcd, linux\u7684\u5b66\u4e60\u4e2d\u63a5\u89e6\u8fc7\u6587\u4ef6\u63cf\u8ff0\u7b26(\u82e5\u8fdb\u7a0b\u62e5\u67091024\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26,\u8be5\u8fdb\u7a0b\u5c31\u80fd\u540c\u65f6\u6253\u5f001024\u4e2a\u6587\u4ef6), \u672c\u8d28\u5c31\u662f\u6570\u5b57, \u6587\u4ef6\u53e5\u67c4\u5e94\u8be5\u5dee\u4e0d\u591a, \u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u6682\u4e14\u653e\u4e00\u653e, \u6211\u4eec\u6682\u65f6\u53ea\u9700\u8981\u77e5\u9053, with\u4f1a\u81ea\u52a8\u5e2e\u6211\u4eec\u5173\u95ed\u6587\u4ef6, \u907f\u514d\u8d44\u6e90\u6cc4\u9732\u5373\u53ef.. \u5b66\u5b8c\u9762\u5411\u5bf9\u8c61\u540e\u518d\u6df1\u7a76!!!","title":"\u7b80\u4ecb"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/07_%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/#_2","text":"\u6a21\u5f0f \u542b\u4e49 r (\u9ed8\u8ba4) \u53ea\u8bfb w \u5199\u5165,\u4f1a\u8986\u76d6 a \u8ffd\u52a0 t (\u9ed8\u8ba4) \u6587\u672c\u6a21\u5f0f b \u4e8c\u8fdb\u5236","title":"\u6587\u4ef6\u64cd\u4f5c\u6a21\u5f0f"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/07_%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/#r-w-a","text":"r (\u9ed8\u8ba4):\u53ea\u8bfb w :\u53ea\u5199 a :\u53ea\u8ffd\u52a0\u5199 r: \u53ea\u8bfb\u6a21\u5f0f \u53ea\u80fd\u8bfb,\u4e0d\u80fd\u5199 \u5728\u6587\u4ef6\u4e0d\u5b58\u5728\u65f6,\u4f1a\u62a5\u9519,\u5728\u6587\u4ef6\u5b58\u5728\u7684\u65f6\u5019\u4f1a\u5c06\u6587\u4ef6\u6307\u9488\u79fb\u52a8\u5230\u5f00\u5934 with open ( 'a.txt' , mode = 'r' , encoding = 'utf-8' ) as f : res = f . read () w: \u53ea\u5199\u6a21\u5f0f \u53ea\u80fd\u5199,\u4e0d\u80fd\u8bfb \u5728\u6587\u4ef6\u4e0d\u5b58\u5728\u65f6\u4f1a\u521b\u5efa\u7a7a\u6587\u4ef6,\u6587\u4ef6\u5b58\u5728\u4f1a\u6e05\u7a7a\u6587\u4ef6,\u6587\u4ef6\u6307\u9488\u8dd1\u5230\u6587\u4ef6\u5f00\u5934 with open ( 'b.txt' , mode = 'w' , encoding = 'utf-8' ) as f : f . write ( 'Hello \\n ' ) f . write ( 'World \\n ' ) a: \u53ea\u8ffd\u52a0\u5199\u6a21\u5f0f \u53ea\u80fd\u5199,\u4e0d\u80fd\u8bfb \u5728\u6587\u4ef6\u4e0d\u5b58\u5728\u65f6\u4f1a\u521b\u5efa\u7a7a\u6587\u4ef6,\u6587\u4ef6\u5b58\u5728\u4f1a\u5c06\u6587\u4ef6\u6307\u9488\u76f4\u63a5\u79fb\u52a8\u5230\u6587\u4ef6\u672b\u5c3e with open ( 'b.txt' , mode = 'a' , encoding = 'utf-8' ) as f : f . write ( 'egon \\n ' ) f . write ( 'yyds \\n ' ) \u5f3a\u8c03 w \u6a21\u5f0f\u4e0e a \u6a21\u5f0f\u7684\u5f02\u540c: 1> \u76f8\u540c\u70b9: \u5728\u6253\u5f00\u7684\u6587\u4ef6\u4e0d\u5173\u95ed\u7684\u60c5\u51b5\u4e0b, \u8fde\u7eed\u7684\u5199\u5165, \u65b0\u5199\u7684\u5185\u5bb9\u603b\u4f1a\u8ddf\u5728\u524d\u5199\u7684\u5185\u5bb9\u4e4b\u540e 2> \u4e0d\u540c\u70b9: \u91cd\u65b0\u6253\u5f00\u6587\u4ef6. a\u6a21\u5f0f\u4e0d\u4f1a\u6e05\u7a7a\u539f\u6587\u4ef6\u5185\u5bb9, w\u6a21\u5f0f\u4f1a\uff01 \u6211\u4eec\u901a\u5e38\u53ea\u4f7f\u7528r/w/a, \u8981\u4e48\u53ea\u8bfb, \u8981\u4e48\u53ea\u5199; \u4e00\u822c\u4e0d\u7528\u53ef\u8bfb\u53ef\u5199\u7684\u6a21\u5f0fr+/w+/a+ . \u9047\u5230\u4e86\u4e5f\u4e0d\u6015, \u73b0\u5b66\u5457!","title":"\u6587\u4ef6\u5185\u5bb9\u6a21\u5f0f r w a"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/07_%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/#t-b","text":"\u5927\u524d\u63d0 : tb\u6a21\u5f0f\u5747\u4e0d\u80fd\u5355\u72ec\u4f7f\u7528, \u5fc5\u987b\u4e0er/w/a\u4e4b\u4e00\u7ed3\u5408\u4f7f\u7528 \u53ea\u6709 \u6587\u672c\u6587\u4ef6\u624d\u80fd\u7528t\u6a21\u5f0f, \u4e5f\u53ea\u6709 \u6587\u672c\u6587\u4ef6\u624d\u6709\u5b57\u7b26\u7f16\u7801\u7684\u6982\u5ff5 t (\u9ed8\u8ba4\u7684) : \u6587\u672c\u6a21\u5f0f \u25cb \u8bfb\u5199\u6587\u4ef6\u90fd\u662f\u4ee5 \u5b57\u7b26\u4e32 \u4e3a\u5355\u4f4d\u7684 \u25cb \u53ea\u80fd\u9488\u5bf9\u6587\u672c\u6587\u4ef6 \u25cb \u5fc5\u987b\u6307\u5b9a encoding\u53c2\u6570 # -- t\u6a21\u5f0f:\u5982\u679c\u6211\u4eec\u6307\u5b9a\u7684\u6587\u4ef6\u6253\u5f00\u6a21\u5f0f\u4e3ar/w/a, \u5176\u5b9e\u9ed8\u8ba4\u5c31\u662frt/wt/at with open ( 'a.txt' , mode = 'rt' , encoding = 'utf-8' ) as f : res = f . read () print ( type ( res )) # -- \u8f93\u51fa\u7ed3\u679c\u4e3a: <class 'str'> with open ( 'a.txt' , mode = 'wt' , encoding = 'utf-8' ) as f : s = 'abc' f . write ( s ) # -- \u5199\u5165\u7684\u4e5f\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u7c7b\u578b # -- \u5f3a\u8c03: t\u6a21\u5f0f\u53ea\u80fd\u7528\u4e8e\u64cd\u4f5c\u6587\u672c\u6587\u4ef6,\u65e0\u8bba\u8bfb\u5199,\u90fd\u5e94\u8be5\u4ee5\u5b57\u7b26\u4e32\u4e3a\u5355\u4f4d # \u800c\u5b58\u53d6\u786c\u76d8\u672c\u8d28\u90fd\u662f\u4e8c\u8fdb\u5236\u7684\u5f62\u5f0f,\u5f53\u6307\u5b9at\u6a21\u5f0f\u65f6,\u5185\u90e8\u5e2e\u6211\u4eec\u505a\u4e86\u7f16\u7801\u4e0e\u89e3\u7801 b : \u4e8c\u8fdb\u5236\u6a21\u5f0f \u4e00\u79cd\u901a\u7528\u7684\u6587\u4ef6\u8bfb\u53d6\u6a21\u5f0f, \u56e0\u4e3a\u6240\u6709\u7684\u6587\u4ef6\u5728\u786c\u76d8\u4e2d\u90fd\u662f\u4ee5\u4e8c\u8fdb\u5236\u5f62\u5f0f\u5b58\u653e\u7684 \u25cb \u8bfb\u5199\u6587\u4ef6\u90fd\u662f\u4ee5bytes/\u4e8c\u8fdb\u5236\u4e3a\u5355\u4f4d\u7684 \u25cb \u53ef\u4ee5\u9488\u5bf9\u6240\u6709\u6587\u4ef6 \u25cb \u4e00\u5b9a \u4e0d\u80fd\u6307\u5b9a encoding\u53c2\u6570 # -- b\u6a21\u5f0f:\u8bfb\u5199\u90fd\u662f\u4ee5\u4e8c\u8fdb\u5236\u4f4d\u5355\u4f4d with open ( '1.mp4' , mode = 'rb' ) as f : data = f . read () print ( type ( data )) # -- \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a<class 'bytes'> with open ( 'a.txt' , mode = 'wb' ) as f : msg = \"\u4f60\u597d\" res = msg . encode ( 'utf-8' ) # -- res\u4e3abytes\u7c7b\u578b f . write ( res ) # -- \u5728b\u6a21\u5f0f\u4e0b\u5199\u5165\u6587\u4ef6\u7684\u53ea\u80fd\u662fbytes\u7c7b\u578b \u5f3a\u8c03: b\u6a21\u5f0f\u5bf9\u6bd4t\u6a21\u5f0f 1> \u5728\u64cd\u4f5c\u7eaf\u6587\u672c\u6587\u4ef6\u65b9\u9762 t\u6a21\u5f0f\u5e2e\u6211\u4eec\u7701\u53bb\u4e86\u7f16\u7801\u4e0e\u89e3\u7801\u7684\u73af\u8282,b\u6a21\u5f0f\u5219\u9700\u8981\u624b\u52a8\u7f16\u7801\u4e0e\u89e3\u7801 2> \u9488\u5bf9\u975e\u6587\u672c\u6587\u4ef6( \u5982\u56fe\u7247\u3001\u89c6\u9891\u3001\u97f3\u9891\u7b49) \u53ea\u80fd\u4f7f\u7528b\u6a21\u5f0f","title":"\u6587\u4ef6\u8bfb\u5199\u6a21\u5f0f t b"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/07_%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/#_3","text":"src_file = input ( '\u6e90\u6587\u4ef6\u8def\u5f84: ' ) . strip () dst_file = input ( '\u76ee\u6807\u6587\u4ef6\u8def\u5f84: ' ) . strip () with open ( r ' %s ' % src_file , mode = 'rb' ) as read_f , open ( r ' %s ' % dst_file , mode = 'wb' ) as write_f : for line in read_f : # print(line) write_f . write ( line )","title":"\u7ec3\u4e60: \u62f7\u8d1d\u5de5\u5177"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/07_%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/#_4","text":"","title":"\u64cd\u4f5c\u6587\u4ef6\u7684\u65b9\u6cd5"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/07_%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/#read","text":"\u25cb f.read([size=-1]) \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6size\u4e2a\u5b57\u7b26\u7684\u6570\u636e; \u82e5\u672a\u6307\u5b9asize\u6216\u7ed9\u5b9a\u4e3a\u8d1f\u503c\u65f6,\u8bfb\u53d6\u5269\u4f59\u7684\u6240\u6709\u5185\u5bb9,\u6267\u884c\u5b8c\u8be5\u64cd\u4f5c\u540e, \u6587\u4ef6\u6307\u9488\u4f1a\u79fb\u52a8\u5230\u6587\u4ef6\u672b\u5c3e; \u6ce8\u610f: \u6307\u5b9asize\u540e, \u82e5\u662f rt\u6a21\u5f0f \u8bfb\u53d6\u7684\u662f\u6307\u5b9a \u6570\u636e/\u5b57\u7b26\u7684\u957f\u5ea6 . \u82e5\u662f rb\u6a21\u5f0f \u8bfb\u53d6\u7684\u662f \u5b57\u8282\u6570 !! \u5728utf-8\u7f16\u7801\u4e0b, \u4e00\u4e2a\u6c49\u5b50\u5360\u7528\u4e09\u4e2a\u5b57\u8282, \u4e00\u4e2a\u5b57\u6bcd\u548c\u6570\u5b57\u5360\u7528\u4e00\u4e2a\u5b57\u8282!!! \u25cb f.readline([size=-1]) \u8bfb\u53d6\u4e00\u884c\u5185\u5bb9(\u5305\u62ec\u6362\u884c\u7b26), \u5149\u6807\u79fb\u52a8\u5230\u7b2c\u4e8c\u884c\u9996\u90e8; \u82e5\u6307\u5b9a\u4e86size, \u8fd4\u56desize\u4e2a\u5b57\u7b26 \u25cb f.readlines() \u8bfb\u53d6\u6bcf\u4e00\u884c\u5185\u5bb9, \u5b58\u653e\u4e8e\u5217\u8868\u4e2d \u25cb \u76f4\u63a5 list(f) \u3001\u76f4\u63a5\u8fed\u4ee3\u8bfb\u53d6. \u518d\u6b21\u5f3a\u8c03 : \u53ea\u6709\u5728t\u6a21\u5f0f\u4e0b\u7684read(n),n\u4ee3\u8868\u7684\u662f\u5b57\u7b26\u4e2a\u6570; \u9664\u6b64\u4e4b\u5916\u4f46\u51e1\u6d89\u53ca\u6587\u4ef6\u6307\u9488\u7684\u79fb\u52a8\u90fd\u662f\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d \"\"\"train.txt(utf-8\u7f16\u7801)\u7684\u5185\u5bb9\u5982\u4e0b: ab\u54c8\u54c8 b z \"\"\" with open ( 'train.txt' , 'rt' , encoding = 'utf-8' ) as f : res_len = f . read ( 5 ) # -- \u8bfb\u53d6\u7684\u662f\u6307\u5b9a\u957f\u5ea6\u7684\u6570\u636e/\u5b57\u7b26(/n\u6362\u884c\u7b26\u3001\u4e00\u4e2a\u5b57\u6bcd\u3001\u4e00\u4e2a\u6c49\u5b57\u90fd\u7b97\u4f5c\u4e00\u4e2a\u5b57\u7b26) print ( res_len , type ( res )) # -- ab\u54c8\u54c8/n <class 'str'> # --- --- --- with open ( 'train.txt' , 'rb' ) as f : res = f . read ( 9 ) # -- \u8bfb\u53d6\u7684\u662fBytes\u5b57\u8282\u6570 \u5206\u6790:ab\u54c8\u54c8\\n 1+1+3+3+1=9 # -- b'ab\\xe5\\x93\\x88\\xe5\\x93\\x88\\n' <class 'bytes'> ab\u54c8\u54c8\\n print ( res , type ( res ), res . decode ( 'utf-8' )) \u5f3a\u8c03: f.read() \u4e0e f.readlines() \u90fd\u662f\u5c06\u5185\u5bb9\u4e00\u6b21\u6027\u8bfb\u5165\u5185\u5bb9, \u5982\u679c\u5185\u5bb9\u8fc7\u5927\u4f1a\u5bfc\u81f4\u5185\u5b58\u6ea2\u51fa. \u82e5\u8fd8\u60f3\u5c06\u5185\u5bb9\u5168\u8bfb\u5165\u5185\u5b58\uff0c\u5219\u5fc5\u987b\u5206\u591a\u6b21\u8bfb\u5165 # -- \u65b9\u5f0f\u4e00 with open ( 'a.txt' , mode = 'rt' , encoding = 'utf-8' ) as f : for line in f : print ( line ) # -- \u540c\u4e00\u65f6\u523b\u53ea\u8bfb\u5165\u4e00\u884c\u5185\u5bb9\u5230\u5185\u5b58\u4e2d # -- \u65b9\u5f0f\u4e8c with open ( '1.mp4' , mode = 'rb' ) as f : while True : data = f . read ( 1024 ) # -- \u540c\u4e00\u65f6\u523b\u53ea\u8bfb\u51651024\u4e2aBytes\u5230\u5185\u5b58\u4e2d if len ( data ) == 0 : break print ( data ) # -- yield data","title":"\u8bfb read"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/07_%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/#write","text":"f . write ( '1111 \\n 222 \\n ' ) # -- \u9488\u5bf9\u6587\u672c\u6a21\u5f0f\u7684\u5199,\u9700\u8981\u81ea\u5df1\u5199\u6362\u884c\u7b26 f . write ( '1111 \\n 222 \\n ' . encode ( 'utf-8' )) # -- \u9488\u5bf9b\u6a21\u5f0f\u7684\u5199,\u9700\u8981\u81ea\u5df1\u5199\u6362\u884c\u7b26 f . writelines ([ '333 \\n ' , '444 \\n ' ]) # -- \u6587\u4ef6\u6a21\u5f0f,\u5199\u5165\u591a\u884c\u6570\u636e f . writelines ([ bytes ( '333 \\n ' , encoding = 'utf-8' ), '444 \\n ' . encode ( 'utf-8' )]) # -- b\u6a21\u5f0f,\u5199\u5165\u591a\u884c","title":"\u5199 write"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/07_%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/#_5","text":"f . readable () # -- \u6587\u4ef6\u662f\u5426\u53ef\u8bfb f . writable () # -- \u6587\u4ef6\u662f\u5426\u53ef\u8bfb f . closed # -- \u6587\u4ef6\u662f\u5426\u5173\u95ed f . encoding # -- \u6587\u4ef6\u7f16\u7801,\u5982\u679c\u6587\u4ef6\u6253\u5f00\u6a21\u5f0f\u4e3ab,\u5219\u6ca1\u6709\u8be5\u5c5e\u6027 f . flush () # -- \u7acb\u523b\u5c06\u6587\u4ef6\u5185\u5bb9\u4ece\u5185\u5b58\u5237\u5230\u786c\u76d8 f . name # -- \u6587\u4ef6\u540d\u5b57","title":"\u5176\u4ed6(\u4e86\u89e3)"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/07_%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/#_6","text":"\u4e0a\u8ff0\u6587\u4ef6\u5185\u6307\u9488\u7684\u79fb\u52a8\u90fd\u662f\u7531\u8bfb/\u5199\u64cd\u4f5c\u800c\u88ab\u52a8\u89e6\u53d1\u7684, \u82e5\u60f3\u8bfb\u53d6\u6587\u4ef6\u67d0\u4e00\u7279\u5b9a\u4f4d\u7f6e\u7684\u6570\u636e \u5219\u9700\u8981\u7528 f.seek \u65b9\u6cd5\u4e3b\u52a8\u63a7\u5236\u6587\u4ef6\u5185\u6307\u9488\u7684\u79fb\u52a8 f.seek(offset,whence) offset : \u6307\u9488\u79fb\u52a8\u7684\u5b57\u8282\u6570, \u6ce8\u610f\u5355\u4f4d\u662f\u5b57\u8282bytes whence : \u6a21\u5f0f\u63a7\u5236, \u6709\u4e09\u4e2a\u53d6\u503c 0 : \u9ed8\u8ba4\u7684\u6a21\u5f0f,\u8be5\u6a21\u5f0f\u4ee3\u8868\u6307\u9488\u79fb\u52a8\u7684\u5b57\u8282\u6570\u662f\u4ee5 \u6587\u4ef6\u5f00\u5934 \u4e3a\u53c2\u7167\u7684 1 : \u8be5\u6a21\u5f0f\u4ee3\u8868\u6307\u9488\u79fb\u52a8\u7684\u5b57\u8282\u6570\u662f\u4ee5 \u5f53\u524d\u6240\u5728\u7684\u4f4d\u7f6e \u4e3a\u53c2\u7167\u7684 2 : \u8be5\u6a21\u5f0f\u4ee3\u8868\u6307\u9488\u79fb\u52a8\u7684\u5b57\u8282\u6570\u662f\u4ee5 \u6587\u4ef6\u672b\u5c3e\u7684\u4f4d\u7f6e \u4e3a\u53c2\u7167\u7684 \u5176\u4e2d0\u6a21\u5f0f\u53ef\u4ee5\u5728t\u6216\u8005b\u6a21\u5f0f\u4f7f\u7528, \u800c1\u8ddf2\u6a21\u5f0f\u53ea\u80fd\u5728b\u6a21\u5f0f\u4e0b\u7528 # -- a.txt\u7528utf-8\u7f16\u7801,\u5185\u5bb9\u5982\u4e0b (abc\u5404\u53601\u4e2a\u5b57\u8282,\u4e2d\u6587\"\u4f60\"\u3001\"\u597d\"\u5404\u53603\u4e2a\u5b57\u8282) abc\u4f60\u597d","title":"\u63a7\u5236\u6587\u4ef6\u6307\u9488"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/07_%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/#0","text":"with open ( 'a.txt' , mode = 'rt' , encoding = 'utf-8' ) as f : f . seek ( 3 , 0 ) # -- \u53c2\u7167\u6587\u4ef6\u5f00\u5934\u79fb\u52a8\u4e863\u4e2a\u5b57\u8282 \u7b80\u5355\u7406\u89e3\u524d3\u4e2a\u5b57\u8282\u6570\u636e\u4e0d\u8003\u8651\u5566. print ( f . tell ()) # -- \u67e5\u770b\u5f53\u524d\u6587\u4ef6\u6307\u9488\u8ddd\u79bb\u6587\u4ef6\u5f00\u5934\u7684\u4f4d\u7f6e,\u8f93\u51fa\u7ed3\u679c\u4e3a3 print ( f . read ()) # -- \u4ece\u7b2c4\u4e2a\u5b57\u8282\u5f00\u59cb\u8bfb\u5230\u6587\u4ef6\u672b\u5c3e,\u8f93\u51fa\u7ed3\u679c\u4e3a: \u4f60\u597d # \u6ce8\u610f:\u7531\u4e8e\u5728t\u6a21\u5f0f\u4e0b,\u4f1a\u5c06\u8bfb\u53d6\u7684\u5185\u5bb9\u81ea\u52a8\u89e3\u7801,\u6240\u4ee5\u5fc5\u987b\u4fdd\u8bc1\u8bfb\u53d6\u7684\u5185\u5bb9\u662f\u4e00\u4e2a\u5b8c\u6574\u4e2d\u6587\u6570\u636e,\u5426\u5219\u89e3\u7801\u5931\u8d25 with open ( 'a.txt' , mode = 'rb' ) as f : f . seek ( 6 , 0 ) print ( f . read () . decode ( 'utf-8' )) # -- \u8f93\u51fa\u7ed3\u679c\u4e3a: \u597d","title":"0\u6a21\u5f0f"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/07_%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/#1","text":"with open ( 'a.txt' , mode = 'rb' ) as f : f . seek ( 3 , 1 ) # -- \u4ece\u5f53\u524d\u4f4d\u7f6e\u5f80\u540e\u79fb\u52a83\u4e2a\u5b57\u8282,\u800c\u6b64\u65f6\u7684\u5f53\u524d\u4f4d\u7f6e\u5c31\u662f\u6587\u4ef6\u5f00\u5934 print ( f . tell ()) # -- \u8f93\u51fa\u7ed3\u679c\u4e3a:3 f . seek ( 4 , 1 ) # -- \u4ece\u5f53\u524d\u4f4d\u7f6e\u5f80\u540e\u79fb\u52a84\u4e2a\u5b57\u8282,\u800c\u6b64\u65f6\u7684\u5f53\u524d\u4f4d\u7f6e\u4e3a3 print ( f . tell ()) # -- \u8f93\u51fa\u7ed3\u679c\u4e3a:7","title":"1\u6a21\u5f0f"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/07_%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/#2","text":"with open ( 'a.txt' , mode = 'rb' ) as f : f . seek ( 0 , 2 ) # -- \u53c2\u7167\u6587\u4ef6\u672b\u5c3e\u79fb\u52a80\u4e2a\u5b57\u8282,\u5373\u76f4\u63a5\u8df3\u5230\u6587\u4ef6\u672b\u5c3e print ( f . tell ()) # -- \u8f93\u51fa\u7ed3\u679c\u4e3a:9 f . seek ( - 3 , 2 ) # -- \u53c2\u7167\u6587\u4ef6\u672b\u5c3e\u5f80\u524d\u79fb\u52a8\u4e863\u4e2a\u5b57\u8282 print ( f . read () . decode ( 'utf-8' )) # -- \u8f93\u51fa\u7ed3\u679c\u4e3a:\u597d # -- \u5c0f\u7ec3\u4e60:\u5b9e\u73b0\u52a8\u6001\u67e5\u770b\u6700\u65b0\u4e00\u6761\u65e5\u5fd7\u7684\u6548\u679c import time with open ( 'access.log' , mode = 'rb' ) as f : f . seek ( 0 , 2 ) while True : line = f . readline () if len ( line ) == 0 : # -- \u82e5\u65e0\u65b0\u589e\u5185\u5bb9,\u77610.5\u79d2\u540e\u518d\u6b21\u8fdb\u5165\u5faa\u73af. time . sleep ( 0.5 ) else : print ( line . decode ( 'utf-8' ), end = '' )","title":"2\u6a21\u5f0f"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/07_%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/#_7","text":"\u786c\u76d8\u7a7a\u95f4\u662f\u65e0\u6cd5\u4fee\u6539\u7684,\u786c\u76d8\u4e2d\u6570\u636e\u7684\u66f4\u65b0\u90fd\u662f\u7528\u65b0\u5185\u5bb9\u8986\u76d6\u65e7\u5185\u5bb9! \u5185\u5b58\u4e2d\u7684\u6570\u636e\u662f\u53ef\u4ee5\u4fee\u6539\u7684!","title":"\u4fee\u6539\u6587\u4ef6"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/07_%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/#_8","text":"\u5b9e\u73b0\u601d\u8def : \u5c06\u6587\u4ef6\u5185\u5bb9\u53d1\u4e00\u6b21\u6027\u5168\u90e8\u8bfb\u5165\u5185\u5b58, \u7136\u540e\u5728\u5185\u5b58\u4e2d\u4fee\u6539\u5b8c\u6bd5\u540e\u518d\u8986\u76d6\u5199\u56de\u539f\u6587\u4ef6 \u4f18\u70b9 : \u5728\u6587\u4ef6\u4fee\u6539\u8fc7\u7a0b\u4e2d\u540c\u4e00\u4efd\u6570\u636e\u53ea\u6709\u4e00\u4efd \u7f3a\u70b9 : \u4f1a\u8fc7\u591a\u5730\u5360\u7528\u5185\u5b58 with open ( 'db.txt' , mode = 'rt' , encoding = 'utf-8' ) as f : data = f . read () with open ( 'db.txt' , mode = 'wt' , encoding = 'utf-8' ) as f : f . write ( data . replace ( 'kevin' , 'SB' ))","title":"\u4fee\u6539\u65b9\u5f0f\u4e00"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/07_%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/#_9","text":"\u5b9e\u73b0\u601d\u8def : \u4ee5\u8bfb\u7684\u65b9\u5f0f\u6253\u5f00\u539f\u6587\u4ef6,\u4ee5\u5199\u7684\u65b9\u5f0f\u6253\u5f00\u4e00\u4e2a\u4e34\u65f6\u7684\u65b0\u6587\u4ef6 \u4ece\u539f\u6587\u4ef6\u4e2d\u5faa\u73af\u8bfb\u53d6\u6bcf\u4e00\u884c\u5185\u5bb9,\u4fee\u6539\u5b8c\u540e\u5199\u5165\u4e34\u65f6\u6587\u4ef6 \u5220\u6389\u539f\u6587\u4ef6,\u5c06\u4e34\u65f6\u6587\u4ef6\u91cd\u547d\u540d\u4e3a\u539f\u6587\u4ef6\u540d\u7684\u540d\u5b57 \u4f18\u70b9 : \u4e0d\u4f1a\u5360\u7528\u8fc7\u591a\u7684\u5185\u5b58, \u540c\u4e00\u65f6\u523b\u53ea\u6709\u4e00\u884c\u5185\u5bb9\u5b58\u5728\u4e8e\u5185\u5b58\u4e2d \u7f3a\u70b9 : \u5728\u4fee\u6539\u671f\u95f4,\u6587\u4ef6\u5185\u5bb9\u59cb\u7ec8\u5b58\u5728\u4e24\u4efd,\u4f46\u4fee\u6539\u5b8c\u6bd5\u540e\u4f1a\u53ea\u7559\u4e00\u4efd import os with open ( 'db.txt' , mode = 'rt' , encoding = 'utf-8' ) as read_f , \\ open ( '.db.txt.swap' , mode = 'wt' , encoding = 'utf-8' ) as wrife_f : for line in read_f : wrife_f . write ( line . replace ( 'AB' , 'Hhh' )) os . remove ( 'db.txt' ) # -- \u5220\u9664\u539f\u6587\u4ef6 os . rename ( '.db.txt.swap' , 'db.txt' ) # -- \u4e34\u65f6\u6587\u4ef6\u91cd\u65b0\u547d\u540d\u4e3a\u539f\u6587\u4ef6\u7684\u540d\u5b57","title":"\u4fee\u6539\u65b9\u5f0f\u4e8c"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/","text":"re logging hashlib hmac subprocess sys json pickle re\u6a21\u5757 \u00b6 \u6b63\u5219\u5c31\u662f\u7528\u4e00\u7cfb\u5217\u5177\u6709\u7279\u6b8a\u542b\u4e49\u7684\u5b57\u7b26\u7ec4\u6210\u89c4\u5219,\u8be5\u89c4\u5219\u7528\u6765\u63cf\u8ff0\u5177\u6709\u67d0\u4e00\u7279\u5f81\u7684\u5b57\u7b26\u4e32 \u5e38\u7528\u6b63\u5219,\u53c2\u8003\u7f51\u5740: https://r2coding.com/#/README?id=\u6b63\u5219\u8868\u8fbe\u5f0f !! # -- 'a\\n'\u524d\u9762\u52a0r\u7b49\u540c\u4e8e'a\\\\c',\u544a\u77e5\u89e3\u91ca\u5668\u91cc\u9762\u7684\\\u4e0d\u662f\u8f6c\u4e49\u5b57\u7b26 >>> len ( 'a \\\\ n' ) 3 >>> len ( r 'a\\n' ) 3 \u8868\u8fbe\u5f0f/\u89c4\u5219 \u00b6 \u5355\u4e2a\u5b57\u7b26 \u00b6 \u4e0b\u65b9\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u4ee3\u8868 \u4e00\u4e2a \u5b57\u7b26/\u539f\u5b50. \u8868\u8fbe\u5f0f \u63cf\u8ff0 [abc] \u539f\u5b50\u8868\u91cc\u9762\u5305\u542b\u4e00\u7ec4\u5730\u4f4d\u5e73\u7b49\u7684\u539f\u5b50, \u53d6\u5176\u4e2d\u4efb\u610f\u4e00\u4e2a\u8fdb\u884c\u5339\u914d [^abc] \u9664\u4e86\u4e2d\u62ec\u53f7\u91cc\u9762\u7684\u539f\u5b50\u5747\u53ef\u4ee5\u5339\u914d. [a-z] \u5b57\u7b26\u8303\u56f4. \u5339\u914d\u6307\u5b9a\u8303\u56f4\u5185\u7684\u4efb\u610f\u5b57\u7b26 . \u5339\u914d\u9664\u6362\u884c\u7b26\u4ee5\u5916\u7684\u4efb\u4f55\u5355\u4e2a\u5b57\u7b26 \\ \u7528\u4e8e\u8f6c\u4e49. \\w \u5339\u914d\u4e00\u4e2a\u5b57\u6bcd\u6570\u5b57\u6216\u4e0b\u5212\u7ebf, \u7b49\u4ef7\u4e8e [A-Za-z0-9_] \\W \u5339\u914d\u4e00\u4e2a\u975e\u5b57\u6bcd\u6570\u5b57\u4e0b\u5212\u7ebf\u7684\u5b57\u7b26, \u7b49\u4ef7\u4e8e [^A-Za-z0-9_] \\d \u5339\u914d\u4e00\u4e2a\u6570\u5b57, \u7b49\u4ef7\u4e8e [0-9] \\D \u5339\u914d\u4e00\u4e2a\u975e\u6570\u5b57\u5b57\u7b26 \\s \u5339\u914d\u4e00\u4e2a\u7a7a\u767d\u5b57\u7b26, \u5305\u62ec\u7a7a\u683c\u3001\u5236\u8868\u7b26\u7b49.. \u7b49\u4ef7\u4e8e [\\t\\n\\r\\f] \\S \u5339\u914d\u4e00\u4e2a\u975e\u7a7a\u767d\u5b57\u7b26 \\t \u5339\u914d\u4e00\u4e2a\u5236\u8868\u7b26 \\n \u5339\u914d\u4e00\u4e2a\u6362\u884c\u7b26 >>> import re # -- findall(pattern, string) \u8fd4\u56destring\u4e2d\u6240\u6709\u4e0epattern\u5339\u914d\u7684\u5168\u90e8\u5b57\u7b26\u4e32,\u8fd4\u56de\u5f62\u5f0f\u4e3a\u6570\u7ec4 >>> re . findall ( '\\s' , 'hell \\n o 12 \\t 3_ */-=' ) [ ' \\n ' , ' ' , ' \\t ' , ' ' ] >>> re . findall ( 'dc' , 'dc is dc' ) [ 'dc' , 'dc' ] >>> re . findall ( '[ay3]' , '123apy' ) [ '3' , 'a' , 'y' ] >>> re . findall ( '[^y3]py' , '123apy' ) [ 'apy' ] # \\- \u8f6c\u4e49'\u4f7f\u5f97 - \u4e0d\u518d\u4ee3\u8868\u8303\u56f4' >>> re . findall ( 'a[a-zA-Z+\\-*/]c' , 'abc a2c aVc a+c a-c a/c aaa \\n c' ) [ 'abc' , 'aVc' , 'a+c' , 'a-c' , 'a/c' ] >>> re . findall ( 'a[a-z][A-Z]c' , 'abc abVc aaa1ac' ) [ 'abVc' ] >>> re . findall ( 'a.c' , 'abc a2c aer aaa \\n c aaa1ac' ) [ 'abc' , 'a2c' ] >>> re . findall ( 'a.c' , 'abc a2c aer aaa \\n c aaa1ac' , re . DOTALL ) # -- re.DOTALL \u4f7f . \u5305\u542b\u6362\u884c\u7b26\\n [ 'abc' , 'a2c' , 'a \\n c' ] \u7784\u70b9/\u8fb9\u754c \u00b6 \u8868\u8fbe\u5f0f \u63cf\u8ff0 ^ \u5339\u914d\u5b57\u7b26\u4e32\u6216\u884c\u5f00\u5934 $ \u5339\u914d\u5b57\u7b26\u4e32\u6216\u884c\u7ed3\u5c3e \\b \u5339\u914d\u5355\u8bcd\u8fb9\u754c\u3002\u6bd4\u5982 Sheep\\b \u53ef\u4ee5\u5339\u914d CodeSheep \u672b\u5c3e\u7684 Sheep \uff0c\u4e0d\u80fd\u5339\u914d CodeSheepCode \u4e2d\u7684 Sheep \\B \u5339\u914d\u975e\u5355\u8bcd\u8fb9\u754c\u3002\u6bd4\u5982 Code\\B \u53ef\u4ee5\u5339\u914d HelloCodeSheep \u4e2d\u7684 Code \uff0c\u4e0d\u80fd\u5339\u914d HelloCode \u4e2d\u7684 Code \u3002 >>> re . findall ( '^dc' , 'my name is dc' ) [] >>> re . findall ( '^dc' , 'dcdc is cool!' ) [ 'dc' ] \u6570\u91cf\u8868\u793a \u00b6 \u6ce8\u610f\u54e6! * \u3001 ? \u3001 + \u3001 {n,m} \u4e0d\u80fd\u5355\u72ec\u4f7f\u7528, \u642d\u914d\u5b57\u7b26\u4f7f\u7528. \u8868\u8fbe\u5f0f \u63cf\u8ff0 ? \u4ee3\u8868?\u5de6\u4fa7\u7684\u90a3\u4e2a\u5b57\u7b26\u53ef\u51fa\u73b00\u6b21\u62161\u6b21 {0,1} + \u4ee3\u8868?\u5de6\u4fa7\u7684\u90a3\u4e2a\u5b57\u7b26\u53ef\u51fa\u73b01\u6b21\u6216\u65e0\u7a77\u591a\u6b21 {1,} * \u4ee3\u8868*\u5de6\u4fa7\u7684\u90a3\u4e2a\u5b57\u7b26\u53ef\u51fa\u73b00\u6b21\u6216\u65e0\u7a77\u591a\u6b21 {0,} | \u6216\u8fd0\u7b97\u7b26. \u5e76\u96c6, \u53ef\u4ee5\u5339\u914d\u7b26\u53f7\u524d\u540e\u7684\u8868\u8fbe\u5f0f eg: a|b \u5339\u914da\u6216b {m} \u4ee3\u8868\u5de6\u4fa7\u7684\u90a3\u4e2a\u5b57\u7b26\u6070\u597d\u51fa\u73b0m\u6b21 {m,} \u4ee3\u8868\u5de6\u4fa7\u7684\u90a3\u4e2a\u5b57\u7b26\u81f3\u5c11\u51fa\u73b0m\u6b21 {m,n} \u4ee3\u8868\u5de6\u4fa7\u7684\u90a3\u4e2a\u5b57\u7b26\u81f3\u5c11\u51fa\u73b0m\u6b21,\u81f3\u591a\u51fa\u73b0n\u6b21 Ps: \u8868\u683c\u4e2d\u8bf4\u5de6\u4fa7\u7684\u5b57\u7b26, \u4e0d\u51c6\u786e, \u8981\u6ce8\u610f\u6b63\u5219\u8868\u8fbe\u5f0f\u4e2d\u5b58\u5728\u5206\u7ec4\u7684\u60c5\u51b5. >>> re . findall ( 'ac*12' , 'a012 a12 acc12 acd12 accc12' ) [ 'a12' , 'acc12' , 'accc12' ] >>> re . findall ( 'ac?' , 'a012 a12 acc12' ) [ 'a' , 'a' , 'ac' ] >>> re . findall ( 'ac?d' , 'ad012 ac acd accd12 acc12' ) [ 'ad' , 'acd' ] >>> re . findall ( 'cd{1,}' , 'abcdddcdcdcd' ) [ 'cddd' , 'cd' , 'cd' , 'cd' ] \u8d2a\u5a6a\u4e0e\u975e\u8d2a\u5a6a! \u00b6 .* : \u8d2a\u5a6a\u5339\u914d (\u4e0d\u591f\u7cbe\u51c6) .*? : \u975e\u8d2a\u5a6a\u5339\u914d # -- .* \u9664\u6362\u884c\u7b26\u7684\u4efb\u610f\u5b57\u7b26\u53ef\u4ee5\u51fa\u73b00\u6b21\u83b7\u65e0\u7a77\u6b21 \u6362\u8a00\u4e4b\u53ef\u4ee5\u5339\u914d\u9664\u6362\u884c\u7b26\u5916\u4efb\u610f\u591a\u4e2a\u4efb\u610f\u5b57\u7b26 # -- .*? \u53ef\u4ee5\u6ca1\u6709\u5b57\u7b26 (\uffe3\u25bd\uffe3) >>> re . findall ( 'a.*' , 'abs2131c12312kkjkasc23' ) [ 'abs2131c12312kkjkasc23' ] >>> re . findall ( 'a.*' , 'abs2131c1 \\n 2312kkjkasc23' ) # -- \u6ce8\u610f\u54e6,\u6709\u4e2a\\n [ 'abs2131c1' , 'asc23' ] >>> re . findall ( 'a.*' , 'abs2131c1 \\n 2312kkjkasc23' , re . DOTALL ) [ 'abs2131c1 \\n 2312kkjkasc23' ] >>> re . findall ( 'a.*?' , 'abs2131c12312kkjkasc23' ) [ 'a' , 'a' ] >>> re . findall ( 'a.*c' , 'abs2131c12312kkjkasc23' ) # -- \u8d2a\u5a6a,\u78b0\u5230c\u540e\u8fd8\u4e0d\u505c\u6b62 [ 'abs2131c12312kkjkasc' ] >>> re . findall ( 'a.*?c' , 'abs2131c12312kkjkasc23' ) # -- \u975e\u8d2a\u5a6a,\u78b0\u5230c\u5c31\u505c\u6b62 [ 'abs2131c' , 'asc' ] >>> re . findall ( 'a.*c?' , 'abs2131c12312kkjkasc23' ) # -- c\u53ef\u4ee5\u51fa\u73b00\u62161\u6b21,\u90a3\u4e0d\u5c31\u7b49\u540c\u4e8e 'a.*' \u561b [ 'abs2131c12312kkjkasc23' ] >>> re . findall ( 'a.*?c?' , 'abs2131c12312kkjkasc23' ) # -- \u7b49\u540c\u4e8e 'a.*?' [ 'a' , 'a' ] \u5206\u7ec4\u4e0e\u5f15\u7528 \u00b6 \u8868\u8fbe\u5f0f \u63cf\u8ff0 (expression) \u5206\u7ec4. \u5c0f\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u5b57\u7b26\u4f1a\u88ab\u5f53\u6210\u4e00\u4e2a\u6574\u4f53\u6765\u5339\u914d (?:expression) \u975e\u6355\u83b7\u5206\u7ec4. \u5339\u914d\u62ec\u53f7\u91cc\u7684\u6574\u4e2a\u5b57\u7b26\u4e32\u4f46\u4e0d\u83b7\u53d6\u5339\u914d\u7ed3\u679c, \u62ff\u4e0d\u5230\u5206\u7ec4\u5f15\u7528. \\num \u5bf9\u524d\u9762\u6240\u5339\u914d\u5206\u7ec4\u7684\u5f15\u7528. \u6bd4\u5982 (\\d)\\1 \u53ef\u4ee5\u5339\u914d\u4e24\u4e2a\u76f8\u540c\u7684\u6570\u5b57, (Code)(Sheep)\\1\\2 \u5219\u53ef\u4ee5\u5339\u914d CodeSheepCodeSheep \u3002 >>> re . findall ( 'c(d){1,}' , 'abcdddcdcdcd' ) [ 'd' , 'd' , 'd' , 'd' ] # -- \u5148\u5f97\u5230['cdr','cdcdcdr'],\u7136\u540e\u518d\u4ece\u7ed3\u679c\u4e2d\u53d6'cd' >>> re . findall ( '(cd){1,}r' , 'abcdrddcdcdcdr' ) [ 'cd' , 'cd' ] >>> re . findall ( '(?:cd){1,}r' , 'abcdrddcdcdcdr' ) [ 'cdr' , 'cdcdcdr' ] >>> re . findall ( 'compan(?:ies|y)' , 'too many companies hava ..., next company is ..' ) [ 'companies' , 'company' ] >>> re . findall ( 'compan(ies|y)' , 'too many companies hava ..., next company is ..' ) [ 'ies' , 'y' ] >>> re . findall ( 'exp=\".*\"' , 'exp=\"1+2+3/4*5\" egon=\"cool\"' ) [ 'exp=\"1+2+3/4*5\" egon=\"cool\"' ] >>> re . findall ( 'exp=\".*?\"' , 'exp=\"1+2+3/4*5\" egon=\"cool\"' ) [ 'exp=\"1+2+3/4*5\"' ] >>> re . findall ( 'exp=\"(.*?)\"' , 'exp=\"1+2+3/4*5\" egon=\"cool\"' ) [ '1+2+3/4*5' ] >>> re . findall ( '(exp)=\"(.*?)\"' , 'exp=\"1+2+3/4*5\" egon=\"cool\"' ) [( 'exp' , '1+2+3/4*5' )] # -- 'href=\"(.*?)\"' \u53d6\u7f51\u5740 \u9884\u67e5\u65ad\u8a00 \u00b6 \u8868\u8fbe\u5f0f \u63cf\u8ff0 (?=) \u6b63\u5411\u9884\u67e5. \u6bd4\u5982 Code(?=Sheep) \u80fd\u5339\u914d CodeSheep \u4e2d\u7684 Code , \u4f46\u4e0d\u80fd\u5339\u914d CodePig \u4e2d\u7684 Code (?!) \u6b63\u5411\u5426\u5b9a\u9884\u67e5. \u6bd4\u5982 Code(?!Sheep) \u4e0d\u80fd\u5339\u914d CodeSheep \u4e2d\u7684 Code , \u4f46\u80fd\u5339\u914d CodePig \u4e2d\u7684 Code (?<=) \u53cd\u5411\u9884\u67e5. \u6bd4\u5982 (?<=Code)Sheep \u80fd\u5339\u914d CodeSheep \u4e2d\u7684 Sheep \uff0c\u4f46\u4e0d\u80fd\u5339\u914d ReadSheep \u4e2d\u7684 Sheep (?<!) \u53cd\u5411\u5426\u5b9a\u9884\u67e5 \u6bd4\u5982 (?<!Code)Sheep \u4e0d\u80fd\u5339\u914d CodeSheep \u4e2d\u7684 Sheep \uff0c\u4f46\u80fd\u5339\u914d ReadSheep \u4e2d\u7684 Sheep \u5e38\u7528\u51fd\u6570 \u00b6 re.search() \u00b6 re.search(): \u4ece\u5de6\u5f80\u53f3\u5339\u914d,\u5339\u914d\u6210\u529f\u4e00\u4e2a\u5c31\u7ed3\u675f \u82e5\u5b58\u5728\u8fd4\u56de\u5bf9\u8c61,\u4e0d\u5b58\u5728\u8fd4\u56deNone \u6ce8\u610f,search\u65b9\u6cd5\u4e2d\u7684\u6b63\u5219\u52a0\u4e86\u62ec\u53f7\u8fdb\u884c\u5206\u7ec4,\u53d6\u7684\u4f9d\u65e7\u662f\u6574\u4f53 >>> re . search ( 'dc' , 'my name is dc, dc is cool.' ) # -- \u53ea\u4f1a\u627e\u5230\u4e00\u4e2a,\u8fd4\u56de\u7684\u662f\u5bf9\u8c61 < re . Match object ; span = ( 11 , 13 ), match = 'dc' > >>> re . search ( 'dc' , 'my name is dc, dc is cool.' ) . group () # -- \u5c06\u5bf9\u8c61\u7684\u7ed3\u679c\u62ff\u51fa\u6765 'dc' >>> re . search ( 'd(c)' , 'my name is dc, dc is cool.' ) # -- search\u52a0\u4e86\u62ec\u53f7\u53d6\u7684\u4e5f\u662f\u6574\u4f53 < re . Match object ; span = ( 11 , 13 ), match = 'dc' > >>> re . search ( 'abcd' , 'my' ) . group () # -- \u6ca1\u6709\u627e\u5230,\u8fd4\u56deNone. None\u5bf9\u8c61\u662f\u6ca1\u6709group()\u65b9\u6cd5\u7684,\u62a5\u9519. Traceback ( most recent call last ): File \"<pyshell#31>\" , line 1 , in < module > re . search ( 'abcd' , 'my' ) . group () AttributeError : 'NoneType' object has no attribute 'group' # -- \u76f8\u5f53\u4e8e,\u5728search\u65b9\u6cd5\u4e2d 'd(dc){2}'\u7b49\u540c\u4e8e'd(:?dc){2}' >>> re . search ( 'd(dc) {2} ' , 'my name is ddc, ddcdc is cool.' ) . group () 'ddcdc' >>> re . search ( 'd(:?dc) {2} ' , 'my name is ddc, ddcdc is cool.' ) . group () 'ddcdc' re.match() \u00b6 \u6709\u70b9\u7c7b\u4f3c\u4e8esearch, \u4e0d\u540c\u4e8e\u7684\u662f\u5b83\u662f\u4ece\u5934\u5f00\u59cb\u5339\u914d,\u5f00\u5934\u4e0d\u7b26\u5408\u5c31\u8fd4\u56deNone. >>> re . search ( 'my' , 'myismy' ) < re . Match object ; span = ( 0 , 2 ), match = 'my' > >>> re . match ( 'my' , 'myismy' ) < re . Match object ; span = ( 0 , 2 ), match = 'my' > >>> re . match ( 'my' , 'ismy' ) # - \u7b49\u540c\u4e8e re.search('^my','ismy') \u6b64\u5904\u8fd4\u56de\u7684\u662fNone >>> re.findall() \u00b6 \u4ece\u5934\u5230\u5c3e\u627e\u5230\u5168\u90e8 >>> re . findall ( 'dc' , 'my name is dc, dc is cool.' ) [ 'dc' , 'dc' ] >>> re . findall ( 'd(c)' , 'my name is dc, dc is cool.' ) [ 'c' , 'c' ] re.split() \u00b6 \u76f8\u6bd4\u4e8e\u5b57\u7b26\u4e32\u5185\u7f6e\u7684split\u51fd\u6570\u66f4\u5f3a\u5927!! >>> 'egon:18:male' . split ( ':' ) [ 'egon' , '18' , 'male' ] >>> re . split ( ':' , 'egon:18:male' ) [ 'egon' , '18' , 'male' ] >>> re . split ( '[o8a:e]' , 'egon:18:male' ) # -- []\u91cc\u7684\u5b57\u7b26\u90fd\u662f\u5206\u5272\u7b26 [ '' , 'g' , 'n' , '1' , '' , 'm' , 'l' , '' ] re.sub() \u00b6 re.sub('old','new','string','num') \u66ff\u6362 \u6ce8\u610f\u54e6! \u6ca1\u6709\u6539\u53d8\u539f\u5b57\u7b26\u4e32 , \u56e0\u4e3a\u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7684. >>> re . sub ( 'egon' , 'dc' , 'egon:18:male' ) 'dc:18:male' # -- 'sub aaxx' ' is wxx' ' is vxx' \u90fd\u88ab\u66ff\u6362\u6210\u4e86'dc' >>> re . sub ( '.*?xx' , 'dc' , 'sub aaxx is wxx is vxx is good' ) 'dcdcdc is good' >>> re . sub ( '[a-z]+xx' , 'dc' , 'sub aaxx is wxx is vxx is good' ) 'sub dc is dc is dc is good' re.compile() \u00b6 pattern = re.compile('\u6b63\u5219') \u53ef\u4ee5\u9884\u5b58\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f,\u53cd\u590d\u4f7f\u7528\uff01 >>> pattern = re . compile ( 'egon' ) >>> pattern . findall ( 'egon is cool.my name is egon\u3002' ) [ 'egon' , 'egon' ] >>> pattern . search ( 'egon is cool.my name is egon\u3002' ) < re . Match object ; span = ( 0 , 4 ), match = 'egon' > logging\u6a21\u5757 \u00b6 logging\u6a21\u5757\u5305\u542b\u56db\u79cd\u89d2\u8272: Logger\u3001Filter\u3001Formatter\u3001Handler Filter \u8fc7\u6ee4\u65e5\u5fd7 \u6682\u65f6\u4e0d\u4f1a\u7528. \u53c2\u8003\u94fe\u63a5: https://www.cnblogs.com/linhaifeng/articles/6384466.html#_label12 \"\"\" \u2605 --\u65e5\u5fd7\u683c\u5f0f \"\"\" % ( name ) s Logger\u7684\u540d\u5b57 % ( levelno ) s \u6570\u5b57\u5f62\u5f0f\u7684\u65e5\u5fd7\u7ea7\u522b % ( levelname ) s \u6587\u672c\u5f62\u5f0f\u7684\u65e5\u5fd7\u7ea7\u522b % ( pathname ) s \u8c03\u7528\u65e5\u5fd7\u8f93\u51fa\u51fd\u6570\u7684\u6a21\u5757\u7684\u5b8c\u6574\u8def\u5f84\u540d , \u53ef\u80fd\u6ca1\u6709 % ( filename ) s \u8c03\u7528\u65e5\u5fd7\u8f93\u51fa\u51fd\u6570\u7684\u6a21\u5757\u7684\u6587\u4ef6\u540d % ( module ) s \u8c03\u7528\u65e5\u5fd7\u8f93\u51fa\u51fd\u6570\u7684\u6a21\u5757\u540d % ( funcName ) s \u8c03\u7528\u65e5\u5fd7\u8f93\u51fa\u51fd\u6570\u7684\u51fd\u6570\u540d % ( lineno ) d \u8c03\u7528\u65e5\u5fd7\u8f93\u51fa\u51fd\u6570\u7684\u8bed\u53e5\u6240\u5728\u7684\u4ee3\u7801\u884c % ( created ) f \u5f53\u524d\u65f6\u95f4 , \u7528UNIX\u6807\u51c6\u8868\u793a\u65f6\u95f4 , \u6d6e\u70b9\u6570\u8868\u793a % ( relativeCreated ) d \u8f93\u51fa\u65e5\u5fd7\u4fe1\u606f\u65f6\u7684 , \u81eaLogger\u521b\u5efa\u4ee5\u6765\u7684\u6beb\u79d2\u6570 % ( asctime ) s \u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u5f53\u524d\u65f6\u95f4 . \u9ed8\u8ba4\u683c\u5f0f\u662f \"2003-07-08 16:49:45,896\" . \u9017\u53f7\u540e\u9762\u7684\u662f\u6beb\u79d2 % ( thread ) d \u7ebf\u7a0bID , \u53ef\u80fd\u6ca1\u6709 % ( threadName ) s \u7ebf\u7a0b\u540d , \u53ef\u80fd\u6ca1\u6709 % ( process ) d \u8fdb\u7a0bID , \u53ef\u80fd\u6ca1\u6709 % ( message ) s \u7528\u6237\u8f93\u51fa\u7684\u6d88\u606f \u7b2c\u4e00\u79cd\u65b9\u5f0f \u00b6 cmd\u63a7\u5236\u53f0\u5c4f\u5e55\u8f93\u51fa: 2022-09-26 14:45:01: \u5c0f\u660e\u7ed9\u4e86\u5c0f\u7ea2100 a1.log\u6587\u4ef6\u8f93\u51fa: 2022-09-26 14:45:01 PM - \u4ea4\u6613\u65e5\u5fd7 - INFO - 1: \u5c0f\u660e\u7ed9\u4e86\u5c0f\u7ea2100 a2.log\u6587\u4ef6\u8f93\u51fa: 2022-09-26 14:45:01: \u5c0f\u660e\u7ed9\u4e86\u5c0f\u7ea2100 # -- 1.py import logging \"\"\" \u2605 --Logger: \u8d1f\u8d23\u4ea7\u751f\u65e5\u5fd7\u4fe1\u606f \"\"\" # -- \u6b64\u5904'\u4ea4\u6613\u65e5\u5fd7'\u662fLogger\u65e5\u5fd7\u7684\u540d\u5b57 logger1 = logging . getLogger ( '\u4ea4\u6613\u65e5\u5fd7' ) \"\"\" \u2605 --Formatter: \u63a7\u5236\u65e5\u5fd7\u683c\u5f0f \"\"\" formatter1 = logging . Formatter ( fmt = ' %(asctime)s - %(name)s - %(levelname)s - %(module)s : %(message)s ' , datefmt = '%Y-%m- %d %H:%M:%S %p' , ) formatter2 = logging . Formatter ( fmt = ' %(asctime)s : %(message)s ' , datefmt = '%Y-%m- %d %X ' , ) \"\"\" \u2605 --Handler: \u8d1f\u8d23\u65e5\u5fd7\u8f93\u51fa\u7684\u76ee\u6807 \"\"\" h1 = logging . FileHandler ( filename = 'a1.log' , encoding = 'utf-8' ) h2 = logging . FileHandler ( filename = 'a2.log' , encoding = 'utf-8' ) sm = logging . StreamHandler () # -- \u5c4f\u5e55 \"\"\" \u2605 --\u25b2\u7ed1\u5b9alogger\u5bf9\u8c61\u4e0ehandler\u5bf9\u8c61 \"\"\" logger1 . addHandler ( h1 ) logger1 . addHandler ( h2 ) logger1 . addHandler ( sm ) \"\"\" \u2605 --\u25b2\u7ed1\u5b9ahandler\u5bf9\u8c61\u4e0eformatter\u5bf9\u8c61 \"\"\" h1 . setFormatter ( formatter1 ) h2 . setFormatter ( formatter2 ) sm . setFormatter ( formatter2 ) \"\"\" \u2605 --\u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b: \u53ef\u4ee5\u5728logger\u4e0ehandler\u8fd9\u4e24\u4e2a\u89d2\u8272\u5904\u8fdb\u884c\u8bbe\u7f6e \u65e5\u5fd7\u7ea7\u522b\u67095\u6863: debug -> info -> warning(\u9ed8\u8ba4) -> error -> critical \u5206\u522b\u5bf9\u5e94\u6570\u5b57: \u8c03\u8bd510 - \u6d88\u606f20 - \u8b66\u544a30 - \u9519\u8bef40 - \u4e25\u91cd50 1> \u82e5\u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b\u4e3aerror,\u90a3\u4e48\u4f1a\u8bb0\u5f55error\u548ccritical\u7684\u4fe1\u606f 2> \u82e5\u8bbe\u7f6e\u4e86`logger1.setLevel(30)`,\u90a3\u4e48`h1.setLevel(10)`\u662f\u4e0d\u751f\u6548\u7684. handler\u8bbe\u7f6e\u7684\u65e5\u5fd7\u7ea7\u522b\u5e94\u8be5\u5927\u4e8e\u7b49\u4e8elogger!! \"\"\" # -- logger1.setLevel(30) h1 . setLevel ( 10 ) logger1 . info ( '\u5c0f\u660e\u7ed9\u4e86\u5c0f\u7ea2100' ) \u7b2c\u4e8c\u79cd\u65b9\u5f0f \u00b6 \u6211\u4eec\u57fa\u672c\u4e0a\u90fd\u4f1a\u5728settings.py\u6587\u4ef6\u4e2d\u8fdb\u884c\u65e5\u5fd7\u7684\u914d\u7f6e \u5bf9\u8c61 \u542b\u4e49 logger \u4ea7\u751f\u65e5\u5fd7\u7684\u5bf9\u8c61 filter \u8fc7\u6ee4\u65e5\u5fd7\u7684\u5bf9\u8c61 handler \u63a5\u6536\u65e5\u5fd7\u7136\u540e\u63a7\u5236\u6253\u5370\u5230\u4e0d\u540c\u7684\u5730\u65b9 FileHandler\u7528\u6765\u6253\u5370\u5230\u6587\u4ef6\u4e2d,StreamHandler\u7528\u6765\u6253\u5370\u5230\u7ec8\u7aef formatter \u53ef\u4ee5\u5b9a\u5236\u4e0d\u540c\u7684\u65e5\u5fd7\u683c\u5f0f\u5bf9\u8c61,\u7136\u540e\u7ed1\u5b9a\u7ed9\u4e0d\u540c\u7684Handler\u5bf9\u8c61\u4f7f\u7528 \u4ee5\u6b64\u6765\u63a7\u5236\u4e0d\u540c\u7684Handler\u7684\u65e5\u5fd7\u683c\u5f0f # -- settings.py import os import logging.config \"\"\" \u2605 --\u81ea\u5b9a\u4e49\u65e5\u5fd7\u8f93\u51fa\u683c\u5f0f standard_format \u6807\u51c6\u683c\u5f0f simple_format \u7b80\u5355\u683c\u5f0f \"\"\" standard_format = '[ %(asctime)s ][ %(threadName)s : %(thread)d ][task_id: %(name)s ][ %(filename)s : %(lineno)d ]' \\ '[ %(levelname)s ][ %(message)s ]' simple_format = '[ %(levelname)s ][ %(asctime)s ][ %(filename)s : %(lineno)d ] %(message)s ' \"\"\" \u2605 --log\u6587\u4ef6\u7684\u8def\u5f84 \"\"\" logfile_dir = os . path . dirname ( os . path . abspath ( __file__ )) # -- log\u6587\u4ef6\u7684\u76ee\u5f55 logfile_name = 'all2.log' # -- log\u6587\u4ef6\u540d # \u5982\u679c\u4e0d\u5b58\u5728\u5b9a\u4e49\u7684\u65e5\u5fd7\u76ee\u5f55\u5c31\u521b\u5efa\u4e00\u4e2a # if not os.path.isdir(logfile_dir): # os.mkdir(logfile_dir) logfile_path = os . path . join ( logfile_dir , logfile_name ) # -- \u62fc\u63a5log\u6587\u4ef6\u8def\u5f84 \"\"\" \u2605 --logging\u914d\u7f6e\u5b57\u5178 \u25b2handler&formatter logger&handler \"\"\" LOGGING_DIC = { 'version' : 1 , # -- \u7248\u672c\u53f7 'disable_existing_loggers' : False , 'formatters' : { # -- \u6ce8\u610f:'standard'\u3001'simple'\u662f\u53ef\u81ea\u5df1\u5b9a\u4e49\u7684\u540d\u5b57 format\u662f\u56fa\u5b9a\u7684\u540d\u5b57\u4e0d\u80fd\u6539 'standard' : { 'format' : standard_format }, 'simple' : { 'format' : simple_format }, }, 'filters' : {}, # -- \u81ea\u5b9a\u4e49\u4e86\u4e24\u4e2ahandler\u5bf9\u8c61 console\u548cdefault 'handlers' : { # -- 1> \u6253\u5370\u5230\u7ec8\u7aef\u7684\u65e5\u5fd7 'console' : { 'level' : 'DEBUG' , 'class' : 'logging.StreamHandler' , # -- 'logging.StreamHandler'\u8868\u660e\u6253\u5370\u5230\u5c4f\u5e55 'formatter' : 'simple' # -- \u4e0eformatter\u8fdb\u884c\u7ed1\u5b9a }, # -- 2> \u6253\u5370\u5230\u6587\u4ef6\u7684\u65e5\u5fd7,\u6536\u96c6DEBUG\u53ca\u4ee5\u4e0a\u7684\u65e5\u5fd7 'default1' : { 'level' : 'DEBUG' , # -- \u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b(\u7b2c\u4e8c\u5c42\u7684\u5173\u5361) 'class' : 'logging.FileHandler' , # -- logging.FileHandler\u8868\u660e\u4fdd\u5b58\u5230\u6587\u4ef6 'formatter' : 'standard' , # -- formatter\u7684\u503c\u662f\u524d\u9762formatters\u90e8\u5206\u4e2d\u81ea\u5b9a\u4e49\u7684 'filename' : logfile_path , # -- \u65e5\u5fd7\u6587\u4ef6\u540d,\u51c6\u786e\u70b9\u8bf4\u662f\u65e5\u5fd7\u8f93\u51fa\u8def\u5f84 'encoding' : 'utf-8' , # -- \u65e5\u5fd7\u6587\u4ef6\u7684\u7f16\u7801,\u518d\u4e5f\u4e0d\u7528\u62c5\u5fc3\u4e2d\u6587log\u4e71\u7801\u4e86 }, }, 'loggers' : { # -- \u9ed8\u8ba4\u914d\u7f6e '' : { # -- \u8fd9\u91cc\u628a\u4e0a\u9762\u5b9a\u4e49\u7684\u4e24\u4e2ahandler\u90fd\u52a0\u4e0a,\u5373log\u6570\u636e\u65e2\u5199\u5165\u6587\u4ef6\u53c8\u6253\u5370\u5230\u5c4f\u5e55 'handlers' : [ 'console' , 'default1' ], 'level' : 'DEBUG' , # \u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b(\u7b2c\u4e00\u5c42\u5173\u5361) 'propagate' : False , # \u8fd9\u4e2a\u914d\u7f6e\u5173\u4e4elogger\u7684\u7ee7\u627f }, }, } def load_my_logging_cfg (): logging . config . dictConfig ( LOGGING_DIC ) # \u5bfc\u5165\u4e0a\u9762\u5b9a\u4e49\u7684logging\u5b57\u5178\u914d\u7f6e # -- logging.getLogger('\u53ef\u6307\u5b9a\u4efb\u610f\u7684\u65e5\u5fd7\u540d') # -- \u4f1a\u53bb\u5b57\u5178\u7684loggers\u5c5e\u6027\u91cc\u9762\u627e,\u6ca1\u627e\u5230\u5c31\u7528\" \"\u9ed8\u8ba4\u914d\u7f6e logger = logging . getLogger ( '\u4ea4\u6613\u65e5\u5fd7' ) # print(logger) # -- <Logger logger1 (DEBUG)> logger . debug ( 'It debug!' ) logger . info ( 'It works!' ) if __name__ == '__main__' : load_my_logging_cfg () \"\"\" cmd\u63a7\u5236\u53f0\u8f93\u51fa: [DEBUG][2022-09-26 15:57:30,103][settings.py:70]It debug! [INFO][2022-09-26 15:57:30,104][settings.py:71]It works! all2.log\u6587\u4ef6: [2022-09-26 15:57:30,103][MainThread:4670004736][task_id:\u4ea4\u6613\u65e5\u5fd7][settings.py:70][DEBUG][It debug!] [2022-09-26 15:57:30,104][MainThread:4670004736][task_id:\u4ea4\u6613\u65e5\u5fd7][settings.py:71][INFO][It works!] \"\"\" \u7eaf\u4eab\u7248 \u00b6 import logging.config import os base_dir = os . path . dirname ( os . path . dirname ( __file__ )) base_db = os . path . join ( base_dir , \"db\" ) base_log = os . path . join ( base_dir , \"log\" ) \"\"\" \u2605 --logging\u65e5\u5fd7\u914d\u7f6e \"\"\" standard_format = '[ %(asctime)s ][ %(threadName)s : %(thread)d ][task_id: %(name)s ][ %(filename)s : %(lineno)d ]' \\ '[ %(levelname)s ][ %(message)s ]' simple_format = '[ %(levelname)s ][ %(asctime)s ][ %(filename)s : %(lineno)d ] %(message)s ' logfile_name = 'ATM.log' if not os . path . isdir ( base_log ): os . mkdir ( base_log ) logfile_path = os . path . join ( base_log , logfile_name ) LOGGING_DIC = { 'version' : 1 , 'disable_existing_loggers' : False , 'formatters' : { 'standard' : { 'format' : standard_format }, 'simple' : { 'format' : simple_format }, }, 'filters' : {}, 'handlers' : { 'console' : { 'level' : 'DEBUG' , 'class' : 'logging.StreamHandler' , 'formatter' : 'simple' }, 'file' : { 'level' : 'DEBUG' , 'class' : 'logging.FileHandler' , 'formatter' : 'standard' , 'filename' : logfile_path , 'encoding' : 'utf-8' , }, }, 'loggers' : { '' : { 'handlers' : [ 'console' , 'file' ], 'level' : 'DEBUG' , 'propagate' : False , }, }, } if __name__ == '__main__' : def load_my_logging_cfg (): logging . config . dictConfig ( LOGGING_DIC ) logger = logging . getLogger ( '\u4ea4\u6613\u65e5\u5fd7' ) logger . debug ( 'It debug!' ) logger . info ( 'It works!' ) load_my_logging_cfg () hashlib\u6a21\u5757 \u00b6 hash\u662f\u4e00\u79cd\u7b97\u6cd5,\u8be5\u7b97\u6cd5\u63a5\u53d7\u4f20\u5165\u7684\u5185\u5bb9(\u6587\u672c\u6587\u4ef6--\u5b57\u7b26;\u89c6\u9891\u6587\u4ef6--\u4e8c\u8fdb\u5236),\u7ecf\u8fc7\u8fd0\u7b97\u5f97\u5230\u4e00\u4e32hash\u503c. \u4e3b\u8981\u63d0\u4f9bSHA1 SHA224 SHA256 SHA384 SHA512 MD5\u7b97\u6cd5 hash\u4e09\u5927\u7279\u6027 \u00b6 1> \u53ea\u8981\u4f20\u5165\u7684\u5185\u5bb9\u4e00\u6837, \u5f97\u5230\u7684hash\u503c\u5fc5\u7136\u4e00\u6837\uff01 \u5728\u6d4f\u89c8\u5668\u4e2d\u4e0b\u8f7d\u6587\u4ef6,\u6700\u540e\u4f1a\u505c\u987f\u4e0b,\u5c31\u662f\u5728\u505ahash\u6821\u9a8c,\u907f\u514d\u5728\u7f51\u7edc\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u6587\u4ef6\u51fa\u9519,\u4fdd\u8bc1\u6587\u4ef6\u5b8c\u6574. 2> \u53ea\u8981\u6211\u4eec\u4f7f\u7528\u7684hash\u7b97\u6cd5\u56fa\u5b9a,\u65e0\u8bba\u4f20\u5165\u7684\u5185\u5bb9\u6709\u591a\u5927,\u5f97\u5230\u7684hash\u503c\u7684\u957f\u5ea6\u662f\u56fa\u5b9a\u7684 \u4e0b\u8f7d\u7684\u6587\u4ef6\u5185\u5bb9\u662f1\u4e2aT\u5462?\u662f\u5426\u610f\u5473\u7740hash\u503c\u4e5f\u4f1a\u5360\u5f88\u5927\u7684\u5185\u5b58\uff1f\u6240\u4ee5hash\u503c\u957f\u5ea6\u9700\u8981\u56fa\u5b9a. 3> \u4e0d\u53ef\u4ee5\u7528hash\u503c\u9006\u63a8\u51fa\u539f\u6765\u7684\u5185\u5bb9,\u5355\u5411\u7684 \u5728\u7f51\u7edc\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u7684\u5305\u53ef\u80fd\u4f1a\u88ab\u622a\u83b7. \u82e5\u8d26\u53f7\u5bc6\u7801\u662f\u660e\u6587\u7684\u90a3\u5c31\u5b8c\u86cb\u4e86. \u57fa\u4e8e1\u548c2\u53ef\u4ee5\u5728\u4e0b\u8f7d\u6587\u4ef6\u65f6\u505a\u6587\u4ef6 \u4e00\u81f4\u6027\u6821\u9a8c \u57fa\u4e8e1\u548c3\u53ef\u4ee5\u5bf9\u5bc6\u7801\u8fdb\u884c \u52a0\u5bc6 import hashlib # -- 1> \u9020\u51fahash\u5de5\u5382 # \u8fd8\u53ef\u4ee5\u662f\u5176\u5b83\u7b97\u6cd5 m = hashlib.sha512() # m = hashlib.md5('python'.encode('utf8')) \u53ef\u4ee5\u5148\u4f20\u4e00\u6bb5\u6570\u636e. m = hashlib . md5 () # -- 2> \u8fd0\u9001\u539f\u6750\u6599 # update\u503c\u63a5\u6536bytes\u7c7b\u578b\u7684\u6570\u636e # -- \u6ce8\u610f:\u53ef\u4ee5\u5c06\u4e00\u6bb5\u5f88\u957f\u7684\u6570\u636eupdate\u591a\u6b21,\u4e0e\u4e00\u6b21update\u8fd9\u6bb5\u957f\u6570\u636e,\u5f97\u5230\u7684\u7ed3\u679c\u662f\u4e00\u6837\u7684. m . update ( 'hello' . encode ( 'utf8' )) m . update ( 'world' . encode ( 'utf8' )) # -- 3> \u4ea7\u51fahash\u503c \"\u4e00\u4e32\u7531\u5c0f\u5199\u5b57\u6bcd\u548c\u6570\u5b57\u6784\u6210\u7684\u5b57\u7b26\u4e32\" print ( m . hexdigest ()) # fc5e038d38a57032085441e7fe7010b0 \u6587\u4ef6\u4e00\u81f4\u6027\u6821\u9a8c \u00b6 \u539f\u7406 \u00b6 \u5ba2\u6237\u7aef\u4ece\u670d\u52a1\u7aef\u4e0b\u8f7d\u4e00\u4e2a\u6587\u4ef6, S\u4f20\u8f93\u6587\u4ef6\u7ed9C\u7684\u540c\u65f6,\u4f1a\u4f20\u7ed9C\u4e00\u4e2a\u52a0\u5bc6\u8be5\u6587\u4ef6\u540e\u5f97\u5230\u7684hash\u503c. \u4f20\u8f93\u5b8c\u6bd5,C\u540c\u6837\u5bf9\u6587\u4ef6\u8fdb\u884c\u52a0\u5bc6,\u6bd4\u5bf9hash\u503c\u662f\u5426\u76f8\u540c.. \u82e5\u76f8\u540c\u5219\u8bc1\u660e\u6587\u4ef6\u662f\u5b8c\u6574\u7684,\u6ca1\u6709\u88ab\u7be1\u6539\u8fc7. Q: \u4e2d\u95f4\u4eba\u9700\u8981\u5982\u4f55\u653b\u51fb\u5462\uff1f A: \u5b83\u9700\u8981\u5f97\u5230\u6240\u6709\u7684\u6570\u636e\u5305,(\u56e0\u4e3a\u6587\u4ef6\u662f\u4e00\u6bb5\u4e00\u6bb5\u4f20\u8f93\u7684),\u5e76\u4e14\u7be1\u6539\u52a0\u5165\u653b\u51fb\u4ee3\u7801,\u7ed9\u4e00\u4e2a\u65b0\u7684hash\u503c. \u8fd9\u6837\u5ba2\u6237\u7aef\u624d\u53d1\u89c9\u4e0d\u5230\u5f02\u5e38.. \u4f46\u51e1\u67d0\u4e00\u73af\u8282\u51fa\u73b0\u95ee\u9898,\u653b\u51fb\u90fd\u4f1a\u5931\u8d25.. \u5b9e\u73b0 \u00b6 Q: m.update(f.read()) \u6587\u4ef6\u8fc7\u5927\u53ef\u80fd\u5c31\u5361\u6b7b\u4e86\uff01 A: \u4e00\u884c\u4e00\u884c\u7684\u62ff\u51fa\u6765\u867d\u7136\u89e3\u51b3\u4e86\u5185\u5b58\u95ee\u9898,\u4f46\u82e5\u89c6\u9891\u6587\u4ef6\u67091\u4e2aT,\u8981\u5faa\u73af\u8bb8\u4e45\u8bb8\u4e45. \u6211\u4eec\u4e0d\u5e94\u8be5\u5c06\u6587\u4ef6\u771f\u7684\u5168\u8bfb\u5b8c,\u5e94\u91c7\u7528\u6bd4\u4f8b\u7684\u65b9\u5f0f\u7f29\u77ed\u7b97hash\u503c\u7684\u65f6\u95f4 c/s\u7aef\u90fd\u6309\u7167\u6211\u4eec\u81ea\u5b9a\u4e49\u7684\u65b9\u5f0f\u8fdb\u884chash\u6821\u9a8c!! import hashlib m = hashlib . md5 () with open ( '01.mp4' , 'rb' ) as f : for line in f : m . update ( line ) print ( m . hexdigest ()) \u660e\u6587\u5bc6\u7801\u52a0\u5bc6 \u00b6 (\u00b4\u25bd\uff40)\u6ca1\u6709\u7edd\u5bf9\u7684\u5b89\u5168\u54e6! \u6709\u7a0b\u5e8f\u5c31\u6709\u6f0f\u6d1e,\u53ea\u9700\u63d0\u5347\u5b89\u5168\u7b49\u7ea7,\u8ba9\u7834\u574f\u8005\u7684\u7834\u89e3\u6210\u672c\u8fdc\u8fdc\u5927\u4e8e\u5176\u6536\u76ca. \u539f\u7406 \u00b6 \u7528\u6237\u6ce8\u518c\u540e, \u670d\u52a1\u7aef\u662f\u6709\u4e00\u4efd\u6b63\u786e\u7684\u7528\u6237\u540d\u548c\u5bf9\u5e94\u7684\u7528\u54c8\u5e0c\u7b97\u6cd5(\u5047\u8bbe\u662fmd5)\u52a0\u5bc6\u540e\u7684\u5bc6\u7801\u7684; \u5ba2\u6237\u7aef\u7528\u6237\u5728\u767b\u5f55\u754c\u9762\u8f93\u5165\u5bc6\u7801\u540e,\u4f1a\u7528md5\u8fdb\u884c\u52a0\u5bc6,\u5e76\u5c06\u7528\u6237\u540d\u4e0e\u52a0\u5bc6\u540e\u7684\u5bc6\u7801\u4f20\u5230\u670d\u52a1\u7aef\u8fdb\u884c\u6bd4\u5bf9.. Q: \u4e2d\u95f4\u4eba\u9700\u8981\u5982\u4f55\u653b\u51fb\u5462\uff1f A: \u54ea\u6015\u4e2d\u95f4\u4eba\u622a\u83b7\u4e86C\u4f20\u7ed9S\u7684\u6570\u636e\u5305,\u62ff\u5230\u52a0\u5bc6\u540e\u7684hash\u503c\u4e5f\u53cd\u63a8\u4e0d\u4e86\u5bc6\u7801\u660e\u6587. \u4f46\u4e2d\u95f4\u4eba\u53ef\u4ee5\u8fdb\u884c \u649e\u5e93 ( \u6293\u5305 + \u731c\u5230\u7528\u7684hash\u7b97\u6cd5 + \u5e38\u7528\u7684\u5bc6\u7801\u5b57\u5178 ), \u8499\u4f60\u7684\u5bc6\u7801\u662f\u591a\u5c11.. \u4e00\u65e6\u5bc6\u7801\u5b57\u5178\u4e2d\u7684\u67d0\u4e2avalue\u901a\u8fc7\u76f8\u540c\u7684hash\u7b97\u6cd5\u7b97\u51fa\u7684hash\u503c\u4e0e\u6293\u5305\u622a\u83b7\u7684\u4e00\u81f4.. \u5bc6\u7801\u5c31\u88ab\u7834\u89e3\u4e86. \u5b9e\u73b0 \u00b6 import hashlib pwd = input ( '>>>:' ) m = hashlib . md5 () m . update ( pwd . encode ( 'utf-8' )) print ( m . hexdigest ()) \u89e3\u51b3'\u649e\u5e93', \u529e\u6cd5\u4e00:\u4f7f\u7528\u5f3a\u5bc6\u7801;\u529e\u6cd5\u4e8c: \u5bc6\u7801\u52a0\u76d0. m = hashlib . md5 () # -- \u4e0d\u52a0\u76d0 m . update ( pwd . encode ( 'utf-8' )) # -- C/S\u7aef\u662f\u77e5\u9053\u52a0\u7684\u8fd9\u4e2a'\u76d0'\u662f'\u5929\u738b\u76d6\u5730\u864e',\u4f46\u7834\u574f\u8005\u4e0d\u77e5\u9053\uff01 # -- \u66f4\u72e0\u4e00\u70b9,\u52a0\u76d0\u52a0\u5728\u5bc6\u7801\u7684\u67d0\u4e9b\u4f4d\u7f6e.. m = hashlib . md5 ( '\u5929\u738b\u76d6\u5730\u864e' . encode ( 'utf-8' )) # -- \u52a0\u76d0 m . update ( pwd . encode ( 'utf-8' )) \u8865\u5145: hmac\u6a21\u5757 \u00b6 python\u7684 hmac\u6a21\u5757 -- \u57fa\u4e8e\u5bc6\u94a5\u7684\u6d88\u606f\u9a8c\u8bc1. \u5b83\u5185\u90e8\u4f1a\u5bf9\u6211\u4eec\u521b\u5efakey\u548c\u5185\u5bb9\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u5904\u7406\u540e\u518d\u52a0\u5bc6\uff01 import hmac # -- key\u503c'\u5c0f\u9e21\u7096\u8611\u83c7',\u5c31\u662f\u6211\u4eec\u52a0\u7684\u76d0 \u76f8\u5f53\u4e8e\u5f3a\u5236\u52a0'\u76d0' m = hmac . new ( '\u5c0f\u9e21\u7096\u8611\u83c7' . encode ( 'utf8' ), digestmod = 'md5' ) m . update ( 'hello' . encode ( 'utf8' )) # -- value print ( m . hexdigest ()) subprocess\u6a21\u5757 \u00b6 \u6267\u884c\u7cfb\u7edf\u547d\u4ee4 ,\u62ff\u5230\u7ed3\u679c,\u60f3\u548b\u64cd\u4f5c\u5c31\u548b\u64cd\u4f5c,\u800c\u4e0d\u662f\u76f4\u63a5\u4e22\u5230\u63a7\u5236\u53f0\u6253\u5370 import os os . system ( 'ls' ) # -- \u53ef\u4ee5\u6267\u884c\u7cfb\u7edf\u547d\u4ee4,\u4f46\u6267\u884c\u7ed3\u679c\u76f4\u63a5\u6253\u5370\u5230\u63a7\u5236\u53f0\u4e0a\u4e86 \u6211\u4eec\u60f3\u8981\u62ff\u5230\u8be5\u6267\u884c\u7ed3\u679c , \u548b\u641e \uff1f subprocess.Popen() \u7b2c\u4e00\u4e2a\u53c2\u6570: \u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u547d\u4ee4 \u7b2c\u4e8c\u4e2a\u53c2\u6570: \u5fc5\u987b\u5199 shell=True \u7b80\u5355\u7406\u89e3\u8c03\u7528\u547d\u4ee4\u89e3\u91ca\u5668 eg:cmd\u7ec8\u7aef \u7b2c\u4e09\u4e2a\u53c2\u6570: stdout=subprocess.PIPE \u547d\u4ee4\u6b63\u786e\u8f93\u51fa PIPE \u7ba1\u9053\u7b80\u5355\u7406\u89e3\u6210\u5185\u5b58\u91cc\u7684\u4e00\u79cd\u6570\u636e\u7ed3\u6784 \u547d\u4ee4\u7ed3\u679c\u53ea\u6709\u4e00\u4efd, \u4e22\u5230\u7ba1\u9053\u91cc\u6682\u5b58\u5566, \u5c31\u4e0d\u4f1a\u76f4\u63a5\u5728\u7ec8\u7aef\u663e\u793a \u7b2c\u56db\u4e2a\u53c2\u6570: stderr=subprocess.PIPE \u547d\u4ee4\u9519\u8bef\u8f93\u51fa \u8fd9\u4e0e\u547d\u4ee4\u6b63\u786e\u8f93\u51fa\u7684\u7ba1\u9053\u662f\u4e24\u6839\u4e0d\u540c\u7684\u7ba1\u9053\u54e6 import subprocess from sys import stdout # -- py\u6587\u4ef6\u7684\u8fd0\u884c\u5f00\u542f\u4e86\u4e00\u4e2a\u7236\u8fdb\u7a0b,\u8fd0\u884c\u5230\u6b64\u884c\u4ee3\u7801\u5f00\u542f\u4e00\u4e2a\u5b50\u8fdb\u7a0b # \u4e24\u4e2a\u8fdb\u7a0b\u662f\u5b8c\u5168\u9694\u79bb\u72ec\u7acb\u7684,\u4e0d\u80fd\u5728\u5185\u5b58\u4e2d\u5171\u4eab\u6570\u636e # \u4f46\u6211\u4eec\u9700\u8981\u5c06\u5b50\u8fdb\u7a0b\u7684\u7cfb\u7edf\u547d\u4ee4\u8fd0\u884c\u7ed3\u679c\u7ed9\u7236\u8fdb\u7a0b,\u53ea\u80fd\u9020\u4e00\u4e2a\u4e24\u8005\u5171\u4eab\u7684\u5185\u5b58\u7a7a\u95f4 # \u7ba1\u9053(\u8fdb\u7a0b\u4e0e\u8fdb\u7a0b\u4e4b\u95f4\u5171\u4eab\u6570\u636e\u7528\u7684) obj = subprocess . Popen ( 'ls' , shell = True , # -- subprocess.PIPE\u6bcf\u8c03\u7528\u5c31\u4f1a\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u7ba1\u9053 # 'oop\u91cc\u9762\u7684property->\u770b\u4f3c\u8c03\u7528\u7684\u662f\u4e00\u5c5e\u6027\u5b9e\u5219\u662f\u4e00\u529f\u80fd\u7684\u6267\u884c' stdout = subprocess . PIPE , stderr = subprocess . PIPE , ) # -- \u7236\u8fdb\u7a0b\u51c6\u5907\u4ece\u6b63\u786e\u7ba1\u9053\u8bfb\u53d6\u7ed3\u679c,\u4f46\u5b50\u8fdb\u7a0b\u8fd0\u884c\u7cfb\u7edf\u547d\u4ee4\u7684\u7ed3\u679c\u53ef\u80fd\u8fd8\u6ca1\u4ea7\u751f\u5462. # \u56e0\u4e3a\u8fdb\u7a0b\u4e0e\u8fdb\u7a0b\u4e4b\u95f4\u662f\u76f8\u4e92\u9694\u79bb \u72ec\u7acb\u7684 # \u82e5\u7ba1\u9053\u91cc\u6ca1\u6709\u7ed3\u679c,\u7236\u8fdb\u7a0b\u5c31\u4f1a\u5728\u8fd9\u7b49\u7740\u5b50\u8fdb\u7a0b\u5c06\u7ed3\u679c\u4e22\u5230\u7ba1\u9053\u4e2d,\u76f8\u5f53\u4e8e\u53d6\u4ee3\u4e86time.sleep()\u64cd\u4f5c # \u6ce8\u610f\u54e6! \u4ece\u7ba1\u9053\u4e2d\u8bfb\u8d70\u8fd9\u4efd\u6570\u636e\u540e,\u518d\u8bfb\u6570\u636e\u7ed3\u679c\u4e3a\u7a7a.\u56e0\u4e3a\u53ea\u6709\u4e00\u4efd. stdout_res = obj . stdout . read () # -- \u7cfb\u7edf\u547d\u4ee4\u7684\u8fd0\u884c\u7ed3\u679c\u662fbytes\u7c7b\u578b,\u56fa\u5b9a\u4e86\u7684. \u60f3\u8981\u6253\u5370\u7ed3\u679c,\u9700\u8981\u89e3\u7801 windows-gbk;mac-utf8 print ( stdout_res . decode ( 'utf-8' )) stderr_res = obj . stderr . read () print ( stderr_res . decode ( 'utf-8' )) sys\u6a21\u5757 \u00b6 sys.path \u5904\u7406\u5bfc\u5165\u6a21\u5757\u65f6\u7684\u73af\u5883\u53d8\u91cf!!! sys.argv \u7528\u4e8e\u547d\u4ee4\u884c\u6267\u884cpy\u6587\u4ef6\u65f6, \u63a5\u6536\u540e\u9762\u8ddf\u7740\u7684\u53c2\u6570 # -- train.py import sys print ( sys . argv ) # -- ['train.py', '\u53c2\u65701', '\u53c2\u65702'] ( application ) One_Piece @DCdeMacBook - Air Desktop % python train . py \u53c2\u65701 \u53c2\u65702 [ 'train.py' , '\u53c2\u65701' , '\u53c2\u65702' ] \u5b9e\u73b0\u62f7\u8d1d\u6587\u4ef6\u7684\u529f\u80fd \u547d\u4ee4\u884c\u6267\u884c\u547d\u4ee4 python cp.py \u6e90\u6587\u4ef6\u8def\u5f84 \u76ee\u6807\u6587\u4ef6\u8def\u5f84 # -- cp.py src_file = sys . argv [ 1 ] dst_file = sys . argv [ 2 ] # -- rb\u6a21\u5f0f \u53ef\u4ee5\u6253\u5f00\u4efb\u4f55\u6587\u4ef6 # -- \u6ce8\u610f:\u4ee5w\u7684\u65b9\u5f0f\u6253\u5f00\u6587\u4ef6,\u672a\u5173\u95ed\u7684\u60c5\u51b5\u4e0b\u5f80\u6587\u4ef6\u91cc\u5199\u5185\u5bb9\u6307\u9488\u4e0d\u65ad\u540e\u79fb # \u4e2d\u9014\u5173\u6389,\u4e0b\u6b21\u518d\u4ee5w\u7684\u5f62\u5f0f\u6253\u5f00,\u5185\u5bb9\u5c06\u88ab\u6e05\u7a7a with open ( 'src_file' , 'rb' ) as read_f , \\ open ( 'dst_file' , 'wb' ) as write_f : for line in read_f : write_f . write ( line ) json&pickle\u6a21\u5757 \u00b6 \u5f02\u540c \u00b6 json\u683c\u5f0f \u00b6 json \u8ddf \u5b57\u5178 \u662f\u6709\u533a\u522b\u7684!! json\u5206\u4e3ajson\u5bf9\u8c61\u548cjson\u6570\u7ec4 json\u5bf9\u8c61\u5c31\u7c7b\u4f3c\u4e8e\u5b57\u5178. json\u6570\u7ec4\u662f\u7528 [] \u5305\u8d77\u6765\u7684\u591a\u4e2ajson\u5bf9\u8c61 json\u5bf9\u8c61\u53ef\u7531\u591a\u4e2a\u952e\u503c\u5bf9\u7ec4\u6210, \u952e\u5fc5\u987b\u7531 \"\" \u5305\u88f9!!!,\u503c\u53ef\u4ee5\u662fjson\u5bf9\u8c61\u6216\u8005\u662fjson\u6570\u7ec4. JSON\u7c7b\u578b Python\u7c7b\u578b {} dict [] list \"string\" str 1234.56 int\u6216float true/false True/False null None \u5e8f\u5217\u5316 \u00b6 \u53ef\u4ee5\u4fdd\u5b58\u7a0b\u5e8f\u7684\u8fd0\u884c\u72b6\u6001; \u5b9e\u73b0\u6570\u636e\u7684\u8de8\u5e73\u53f0\u7684\u4ea4\u4e92 json\u548cpickle\u90fd\u53ef\u7528\u4e8e\u5e8f\u5217\u5316, \u5e8f\u5217\u5316\u662f\u5c06\u5bf9\u8c61\u8f6c\u6362\u6210\u6613\u4e8e\u4f20\u8f93\u7684\u5f62\u5f0f\u7684\u8fc7\u7a0b. \u901a\u4fd7\u70b9\u5c31\u662f\u5c06\u5f53\u524d\u65f6\u523b\u5904\u4e8e\u5185\u5b58\u4e2d\u7684\u6570\u636e\u8f6c\u6362\u4e00\u79cd\u683c\u5f0f.. \u53cd\u5e8f\u5217\u5316\u5c31\u662f\u5c06\u6570\u636e\u8f6c\u6362\u6210\u5e8f\u5217\u5316\u4e4b\u524d\u7684\u6837\u5b50. json \u8de8\u5e73\u53f0\u6027\u5f3a;\u53ea\u80fd\u652f\u6301/\u5bf9\u5e94python\u90e8\u5206\u7684\u6570\u636e\u7c7b\u578b pickle \u53ef\u4ee5\u652f\u6301/\u5bf9\u5e94\u6240\u6709python\u7684\u6570\u636e\u7c7b\u578b;\u53ea\u80fd\u88abpython\u8bc6\u522b,\u4e0d\u80fd\u8de8\u5e73\u53f0 json\u6a21\u5757\u7684\u4f7f\u7528 \u00b6 json\u5e8f\u5217\u5316 \u00b6 dumps dump import json dic = { 'name' : 'egon' , 'age' : 18 , 'sex' : 'male' } json_str = json . dumps ( dic ) # -- \u5e8f\u5217\u5316\u540e,\u81ea\u52a8\u5c06\u5b57\u5178\u4e2d\u7684\u5355\u5f15\u53f7\u8f6c\u6362\u6210\u4e86\u53cc\u5f15\u53f7 # print(json_str) # -- {\"name\": \"egon\", \"age\": 18, \"sex\": \"male\"} # print(type(json_str)) # -- <class 'str'> with open ( 'db.json' , 'wt' , encoding = 'utf-8' ) as f : f . write ( json_str ) # !!-- \u5e8f\u5217\u5316\u5f97\u5230json_str\u3001\u628ajson_str\u5199\u5165db.json\u6587\u4ef6\u8fd9\u4e24\u6b65 \u7b49\u540c\u4e8e with open ( 'db.json' , 'wt' , encoding = 'utf-8' ) as f : json . dump ( dic , f ) json\u53cd\u5e8f\u5217\u5316 \u00b6 loads load import json with open ( 'db.json' , 'rt' , encoding = 'utf-8' ) as f : data = f . read () dic_res = json . loads ( data ) # print(type(data)) # -- <class 'str'> # print(dic_res) # -- {'name': 'egon', 'age': 18, 'sex': 'male'} # -- {'name': 'egon', 'age': 18, 'sex': 'male'} <class 'dict'> # print(eval(data), type(eval(data))) print ( dic_res [ 'sex' ]) # male # !!-- \u4ece\u786c\u76d8db.json\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5230data\u3001\u5c06data\u53cd\u5e8f\u5217\u5316\u5f97\u5230dic_res \u7b49\u540c\u4e8e with open ( 'db.json' , 'rt' , encoding = 'utf-8' ) as f : dic_res = json . load ( f ) \"\"\" \u63d0\u4e00\u53e5,\u5728\u4ee3\u7801\u4e2d\u6211\u4eec\u8bd5\u56fe\u7528eval\u5bf9json\u5bf9\u8c61\u8fdb\u884c\u4e86\u53cd\u5e8f\u5217\u5316,\u6210\u529f\u4e86. \u56e0\u4e3ajson\u683c\u5f0f\u7684\u6570\u636e\u5728\u5185\u5b58\u4e2d\u4e5f\u662fstr\u7684\u6570\u636e\u7c7b\u578b. eval\u53bb\u9664\u4e86\u6700\u5916\u5c42\u7684\u5f15\u53f7. \u4f46json\u683c\u5f0f\u7684\u6570\u636e\u957f\u8fd9\u6837\u5462\uff1f[1,true,null] \u7528eval\u6765\u53cd\u5e8f\u5217\u5316\u5c31\u4e0d\u884c! \u5efa\u8bae\u8fd8\u662f\u4f7f\u7528json\u6a21\u5757\u7684\u65b9\u6cd5,\u522b\u641e\u8fd9\u4e9b\u82b1\u91cc\u80e1\u54e8\u7684.(\u00b4\u25bd\uff40) \"\"\" pickle\u6a21\u5757\u7684\u4f7f\u7528 \u00b6 \u5fc5\u987b\u662f\u4e8c\u8fdb\u5236\u7684\u5f62\u5f0f\u8bfb\u5199. import pickle dic = { 'a' : 1 , 'b' : 2 , 'c' : 3 } \"\"\" \u2605 --\u5e8f\u5217\u5316 \"\"\" pkl = pickle . dumps ( dic ) # -- b'\\x80\\x04\\x95\\x17\\x00\\x00\\x00\\x00\\x00\\x00\\x00}\\x94(\\x8c\\x01a\\x94K\\x01\\x8c\\x01b\\x94K\\x02\\x8c\\x01c\\x94K\\x03u.' # print(pkl) # print(type(pkl)) # -- <class 'bytes'> with open ( 'db.kpl' , 'wb' ) as f : f . write ( pkl ) \"\"\" \u7b49\u540c\u4e8e with open('db.kpl', 'wb') as f: pickle.dump(pkl,f) \"\"\" \"\"\" \u2605 --\u53cd\u5e8f\u5217\u5316 \"\"\" with open ( 'db.kpl' , 'rb' ) as f : data = f . read () res = pickle . loads ( data ) print ( res [ 'a' ]) # 1 \"\"\" \u7b49\u540c\u4e8e with open('db.kpl', 'rb') as f: res = pickle.load(f) print(res['a']) \"\"\"","title":"\u5fc5\u7528\u6a21\u5757"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#re","text":"\u6b63\u5219\u5c31\u662f\u7528\u4e00\u7cfb\u5217\u5177\u6709\u7279\u6b8a\u542b\u4e49\u7684\u5b57\u7b26\u7ec4\u6210\u89c4\u5219,\u8be5\u89c4\u5219\u7528\u6765\u63cf\u8ff0\u5177\u6709\u67d0\u4e00\u7279\u5f81\u7684\u5b57\u7b26\u4e32 \u5e38\u7528\u6b63\u5219,\u53c2\u8003\u7f51\u5740: https://r2coding.com/#/README?id=\u6b63\u5219\u8868\u8fbe\u5f0f !! # -- 'a\\n'\u524d\u9762\u52a0r\u7b49\u540c\u4e8e'a\\\\c',\u544a\u77e5\u89e3\u91ca\u5668\u91cc\u9762\u7684\\\u4e0d\u662f\u8f6c\u4e49\u5b57\u7b26 >>> len ( 'a \\\\ n' ) 3 >>> len ( r 'a\\n' ) 3","title":"re\u6a21\u5757"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#_1","text":"","title":"\u8868\u8fbe\u5f0f/\u89c4\u5219"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#_2","text":"\u4e0b\u65b9\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u4ee3\u8868 \u4e00\u4e2a \u5b57\u7b26/\u539f\u5b50. \u8868\u8fbe\u5f0f \u63cf\u8ff0 [abc] \u539f\u5b50\u8868\u91cc\u9762\u5305\u542b\u4e00\u7ec4\u5730\u4f4d\u5e73\u7b49\u7684\u539f\u5b50, \u53d6\u5176\u4e2d\u4efb\u610f\u4e00\u4e2a\u8fdb\u884c\u5339\u914d [^abc] \u9664\u4e86\u4e2d\u62ec\u53f7\u91cc\u9762\u7684\u539f\u5b50\u5747\u53ef\u4ee5\u5339\u914d. [a-z] \u5b57\u7b26\u8303\u56f4. \u5339\u914d\u6307\u5b9a\u8303\u56f4\u5185\u7684\u4efb\u610f\u5b57\u7b26 . \u5339\u914d\u9664\u6362\u884c\u7b26\u4ee5\u5916\u7684\u4efb\u4f55\u5355\u4e2a\u5b57\u7b26 \\ \u7528\u4e8e\u8f6c\u4e49. \\w \u5339\u914d\u4e00\u4e2a\u5b57\u6bcd\u6570\u5b57\u6216\u4e0b\u5212\u7ebf, \u7b49\u4ef7\u4e8e [A-Za-z0-9_] \\W \u5339\u914d\u4e00\u4e2a\u975e\u5b57\u6bcd\u6570\u5b57\u4e0b\u5212\u7ebf\u7684\u5b57\u7b26, \u7b49\u4ef7\u4e8e [^A-Za-z0-9_] \\d \u5339\u914d\u4e00\u4e2a\u6570\u5b57, \u7b49\u4ef7\u4e8e [0-9] \\D \u5339\u914d\u4e00\u4e2a\u975e\u6570\u5b57\u5b57\u7b26 \\s \u5339\u914d\u4e00\u4e2a\u7a7a\u767d\u5b57\u7b26, \u5305\u62ec\u7a7a\u683c\u3001\u5236\u8868\u7b26\u7b49.. \u7b49\u4ef7\u4e8e [\\t\\n\\r\\f] \\S \u5339\u914d\u4e00\u4e2a\u975e\u7a7a\u767d\u5b57\u7b26 \\t \u5339\u914d\u4e00\u4e2a\u5236\u8868\u7b26 \\n \u5339\u914d\u4e00\u4e2a\u6362\u884c\u7b26 >>> import re # -- findall(pattern, string) \u8fd4\u56destring\u4e2d\u6240\u6709\u4e0epattern\u5339\u914d\u7684\u5168\u90e8\u5b57\u7b26\u4e32,\u8fd4\u56de\u5f62\u5f0f\u4e3a\u6570\u7ec4 >>> re . findall ( '\\s' , 'hell \\n o 12 \\t 3_ */-=' ) [ ' \\n ' , ' ' , ' \\t ' , ' ' ] >>> re . findall ( 'dc' , 'dc is dc' ) [ 'dc' , 'dc' ] >>> re . findall ( '[ay3]' , '123apy' ) [ '3' , 'a' , 'y' ] >>> re . findall ( '[^y3]py' , '123apy' ) [ 'apy' ] # \\- \u8f6c\u4e49'\u4f7f\u5f97 - \u4e0d\u518d\u4ee3\u8868\u8303\u56f4' >>> re . findall ( 'a[a-zA-Z+\\-*/]c' , 'abc a2c aVc a+c a-c a/c aaa \\n c' ) [ 'abc' , 'aVc' , 'a+c' , 'a-c' , 'a/c' ] >>> re . findall ( 'a[a-z][A-Z]c' , 'abc abVc aaa1ac' ) [ 'abVc' ] >>> re . findall ( 'a.c' , 'abc a2c aer aaa \\n c aaa1ac' ) [ 'abc' , 'a2c' ] >>> re . findall ( 'a.c' , 'abc a2c aer aaa \\n c aaa1ac' , re . DOTALL ) # -- re.DOTALL \u4f7f . \u5305\u542b\u6362\u884c\u7b26\\n [ 'abc' , 'a2c' , 'a \\n c' ]","title":"\u5355\u4e2a\u5b57\u7b26"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#_3","text":"\u8868\u8fbe\u5f0f \u63cf\u8ff0 ^ \u5339\u914d\u5b57\u7b26\u4e32\u6216\u884c\u5f00\u5934 $ \u5339\u914d\u5b57\u7b26\u4e32\u6216\u884c\u7ed3\u5c3e \\b \u5339\u914d\u5355\u8bcd\u8fb9\u754c\u3002\u6bd4\u5982 Sheep\\b \u53ef\u4ee5\u5339\u914d CodeSheep \u672b\u5c3e\u7684 Sheep \uff0c\u4e0d\u80fd\u5339\u914d CodeSheepCode \u4e2d\u7684 Sheep \\B \u5339\u914d\u975e\u5355\u8bcd\u8fb9\u754c\u3002\u6bd4\u5982 Code\\B \u53ef\u4ee5\u5339\u914d HelloCodeSheep \u4e2d\u7684 Code \uff0c\u4e0d\u80fd\u5339\u914d HelloCode \u4e2d\u7684 Code \u3002 >>> re . findall ( '^dc' , 'my name is dc' ) [] >>> re . findall ( '^dc' , 'dcdc is cool!' ) [ 'dc' ]","title":"\u7784\u70b9/\u8fb9\u754c"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#_4","text":"\u6ce8\u610f\u54e6! * \u3001 ? \u3001 + \u3001 {n,m} \u4e0d\u80fd\u5355\u72ec\u4f7f\u7528, \u642d\u914d\u5b57\u7b26\u4f7f\u7528. \u8868\u8fbe\u5f0f \u63cf\u8ff0 ? \u4ee3\u8868?\u5de6\u4fa7\u7684\u90a3\u4e2a\u5b57\u7b26\u53ef\u51fa\u73b00\u6b21\u62161\u6b21 {0,1} + \u4ee3\u8868?\u5de6\u4fa7\u7684\u90a3\u4e2a\u5b57\u7b26\u53ef\u51fa\u73b01\u6b21\u6216\u65e0\u7a77\u591a\u6b21 {1,} * \u4ee3\u8868*\u5de6\u4fa7\u7684\u90a3\u4e2a\u5b57\u7b26\u53ef\u51fa\u73b00\u6b21\u6216\u65e0\u7a77\u591a\u6b21 {0,} | \u6216\u8fd0\u7b97\u7b26. \u5e76\u96c6, \u53ef\u4ee5\u5339\u914d\u7b26\u53f7\u524d\u540e\u7684\u8868\u8fbe\u5f0f eg: a|b \u5339\u914da\u6216b {m} \u4ee3\u8868\u5de6\u4fa7\u7684\u90a3\u4e2a\u5b57\u7b26\u6070\u597d\u51fa\u73b0m\u6b21 {m,} \u4ee3\u8868\u5de6\u4fa7\u7684\u90a3\u4e2a\u5b57\u7b26\u81f3\u5c11\u51fa\u73b0m\u6b21 {m,n} \u4ee3\u8868\u5de6\u4fa7\u7684\u90a3\u4e2a\u5b57\u7b26\u81f3\u5c11\u51fa\u73b0m\u6b21,\u81f3\u591a\u51fa\u73b0n\u6b21 Ps: \u8868\u683c\u4e2d\u8bf4\u5de6\u4fa7\u7684\u5b57\u7b26, \u4e0d\u51c6\u786e, \u8981\u6ce8\u610f\u6b63\u5219\u8868\u8fbe\u5f0f\u4e2d\u5b58\u5728\u5206\u7ec4\u7684\u60c5\u51b5. >>> re . findall ( 'ac*12' , 'a012 a12 acc12 acd12 accc12' ) [ 'a12' , 'acc12' , 'accc12' ] >>> re . findall ( 'ac?' , 'a012 a12 acc12' ) [ 'a' , 'a' , 'ac' ] >>> re . findall ( 'ac?d' , 'ad012 ac acd accd12 acc12' ) [ 'ad' , 'acd' ] >>> re . findall ( 'cd{1,}' , 'abcdddcdcdcd' ) [ 'cddd' , 'cd' , 'cd' , 'cd' ]","title":"\u6570\u91cf\u8868\u793a"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#_5","text":".* : \u8d2a\u5a6a\u5339\u914d (\u4e0d\u591f\u7cbe\u51c6) .*? : \u975e\u8d2a\u5a6a\u5339\u914d # -- .* \u9664\u6362\u884c\u7b26\u7684\u4efb\u610f\u5b57\u7b26\u53ef\u4ee5\u51fa\u73b00\u6b21\u83b7\u65e0\u7a77\u6b21 \u6362\u8a00\u4e4b\u53ef\u4ee5\u5339\u914d\u9664\u6362\u884c\u7b26\u5916\u4efb\u610f\u591a\u4e2a\u4efb\u610f\u5b57\u7b26 # -- .*? \u53ef\u4ee5\u6ca1\u6709\u5b57\u7b26 (\uffe3\u25bd\uffe3) >>> re . findall ( 'a.*' , 'abs2131c12312kkjkasc23' ) [ 'abs2131c12312kkjkasc23' ] >>> re . findall ( 'a.*' , 'abs2131c1 \\n 2312kkjkasc23' ) # -- \u6ce8\u610f\u54e6,\u6709\u4e2a\\n [ 'abs2131c1' , 'asc23' ] >>> re . findall ( 'a.*' , 'abs2131c1 \\n 2312kkjkasc23' , re . DOTALL ) [ 'abs2131c1 \\n 2312kkjkasc23' ] >>> re . findall ( 'a.*?' , 'abs2131c12312kkjkasc23' ) [ 'a' , 'a' ] >>> re . findall ( 'a.*c' , 'abs2131c12312kkjkasc23' ) # -- \u8d2a\u5a6a,\u78b0\u5230c\u540e\u8fd8\u4e0d\u505c\u6b62 [ 'abs2131c12312kkjkasc' ] >>> re . findall ( 'a.*?c' , 'abs2131c12312kkjkasc23' ) # -- \u975e\u8d2a\u5a6a,\u78b0\u5230c\u5c31\u505c\u6b62 [ 'abs2131c' , 'asc' ] >>> re . findall ( 'a.*c?' , 'abs2131c12312kkjkasc23' ) # -- c\u53ef\u4ee5\u51fa\u73b00\u62161\u6b21,\u90a3\u4e0d\u5c31\u7b49\u540c\u4e8e 'a.*' \u561b [ 'abs2131c12312kkjkasc23' ] >>> re . findall ( 'a.*?c?' , 'abs2131c12312kkjkasc23' ) # -- \u7b49\u540c\u4e8e 'a.*?' [ 'a' , 'a' ]","title":"\u8d2a\u5a6a\u4e0e\u975e\u8d2a\u5a6a!"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#_6","text":"\u8868\u8fbe\u5f0f \u63cf\u8ff0 (expression) \u5206\u7ec4. \u5c0f\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u5b57\u7b26\u4f1a\u88ab\u5f53\u6210\u4e00\u4e2a\u6574\u4f53\u6765\u5339\u914d (?:expression) \u975e\u6355\u83b7\u5206\u7ec4. \u5339\u914d\u62ec\u53f7\u91cc\u7684\u6574\u4e2a\u5b57\u7b26\u4e32\u4f46\u4e0d\u83b7\u53d6\u5339\u914d\u7ed3\u679c, \u62ff\u4e0d\u5230\u5206\u7ec4\u5f15\u7528. \\num \u5bf9\u524d\u9762\u6240\u5339\u914d\u5206\u7ec4\u7684\u5f15\u7528. \u6bd4\u5982 (\\d)\\1 \u53ef\u4ee5\u5339\u914d\u4e24\u4e2a\u76f8\u540c\u7684\u6570\u5b57, (Code)(Sheep)\\1\\2 \u5219\u53ef\u4ee5\u5339\u914d CodeSheepCodeSheep \u3002 >>> re . findall ( 'c(d){1,}' , 'abcdddcdcdcd' ) [ 'd' , 'd' , 'd' , 'd' ] # -- \u5148\u5f97\u5230['cdr','cdcdcdr'],\u7136\u540e\u518d\u4ece\u7ed3\u679c\u4e2d\u53d6'cd' >>> re . findall ( '(cd){1,}r' , 'abcdrddcdcdcdr' ) [ 'cd' , 'cd' ] >>> re . findall ( '(?:cd){1,}r' , 'abcdrddcdcdcdr' ) [ 'cdr' , 'cdcdcdr' ] >>> re . findall ( 'compan(?:ies|y)' , 'too many companies hava ..., next company is ..' ) [ 'companies' , 'company' ] >>> re . findall ( 'compan(ies|y)' , 'too many companies hava ..., next company is ..' ) [ 'ies' , 'y' ] >>> re . findall ( 'exp=\".*\"' , 'exp=\"1+2+3/4*5\" egon=\"cool\"' ) [ 'exp=\"1+2+3/4*5\" egon=\"cool\"' ] >>> re . findall ( 'exp=\".*?\"' , 'exp=\"1+2+3/4*5\" egon=\"cool\"' ) [ 'exp=\"1+2+3/4*5\"' ] >>> re . findall ( 'exp=\"(.*?)\"' , 'exp=\"1+2+3/4*5\" egon=\"cool\"' ) [ '1+2+3/4*5' ] >>> re . findall ( '(exp)=\"(.*?)\"' , 'exp=\"1+2+3/4*5\" egon=\"cool\"' ) [( 'exp' , '1+2+3/4*5' )] # -- 'href=\"(.*?)\"' \u53d6\u7f51\u5740","title":"\u5206\u7ec4\u4e0e\u5f15\u7528"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#_7","text":"\u8868\u8fbe\u5f0f \u63cf\u8ff0 (?=) \u6b63\u5411\u9884\u67e5. \u6bd4\u5982 Code(?=Sheep) \u80fd\u5339\u914d CodeSheep \u4e2d\u7684 Code , \u4f46\u4e0d\u80fd\u5339\u914d CodePig \u4e2d\u7684 Code (?!) \u6b63\u5411\u5426\u5b9a\u9884\u67e5. \u6bd4\u5982 Code(?!Sheep) \u4e0d\u80fd\u5339\u914d CodeSheep \u4e2d\u7684 Code , \u4f46\u80fd\u5339\u914d CodePig \u4e2d\u7684 Code (?<=) \u53cd\u5411\u9884\u67e5. \u6bd4\u5982 (?<=Code)Sheep \u80fd\u5339\u914d CodeSheep \u4e2d\u7684 Sheep \uff0c\u4f46\u4e0d\u80fd\u5339\u914d ReadSheep \u4e2d\u7684 Sheep (?<!) \u53cd\u5411\u5426\u5b9a\u9884\u67e5 \u6bd4\u5982 (?<!Code)Sheep \u4e0d\u80fd\u5339\u914d CodeSheep \u4e2d\u7684 Sheep \uff0c\u4f46\u80fd\u5339\u914d ReadSheep \u4e2d\u7684 Sheep","title":"\u9884\u67e5\u65ad\u8a00"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#_8","text":"","title":"\u5e38\u7528\u51fd\u6570"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#research","text":"re.search(): \u4ece\u5de6\u5f80\u53f3\u5339\u914d,\u5339\u914d\u6210\u529f\u4e00\u4e2a\u5c31\u7ed3\u675f \u82e5\u5b58\u5728\u8fd4\u56de\u5bf9\u8c61,\u4e0d\u5b58\u5728\u8fd4\u56deNone \u6ce8\u610f,search\u65b9\u6cd5\u4e2d\u7684\u6b63\u5219\u52a0\u4e86\u62ec\u53f7\u8fdb\u884c\u5206\u7ec4,\u53d6\u7684\u4f9d\u65e7\u662f\u6574\u4f53 >>> re . search ( 'dc' , 'my name is dc, dc is cool.' ) # -- \u53ea\u4f1a\u627e\u5230\u4e00\u4e2a,\u8fd4\u56de\u7684\u662f\u5bf9\u8c61 < re . Match object ; span = ( 11 , 13 ), match = 'dc' > >>> re . search ( 'dc' , 'my name is dc, dc is cool.' ) . group () # -- \u5c06\u5bf9\u8c61\u7684\u7ed3\u679c\u62ff\u51fa\u6765 'dc' >>> re . search ( 'd(c)' , 'my name is dc, dc is cool.' ) # -- search\u52a0\u4e86\u62ec\u53f7\u53d6\u7684\u4e5f\u662f\u6574\u4f53 < re . Match object ; span = ( 11 , 13 ), match = 'dc' > >>> re . search ( 'abcd' , 'my' ) . group () # -- \u6ca1\u6709\u627e\u5230,\u8fd4\u56deNone. None\u5bf9\u8c61\u662f\u6ca1\u6709group()\u65b9\u6cd5\u7684,\u62a5\u9519. Traceback ( most recent call last ): File \"<pyshell#31>\" , line 1 , in < module > re . search ( 'abcd' , 'my' ) . group () AttributeError : 'NoneType' object has no attribute 'group' # -- \u76f8\u5f53\u4e8e,\u5728search\u65b9\u6cd5\u4e2d 'd(dc){2}'\u7b49\u540c\u4e8e'd(:?dc){2}' >>> re . search ( 'd(dc) {2} ' , 'my name is ddc, ddcdc is cool.' ) . group () 'ddcdc' >>> re . search ( 'd(:?dc) {2} ' , 'my name is ddc, ddcdc is cool.' ) . group () 'ddcdc'","title":"re.search()"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#rematch","text":"\u6709\u70b9\u7c7b\u4f3c\u4e8esearch, \u4e0d\u540c\u4e8e\u7684\u662f\u5b83\u662f\u4ece\u5934\u5f00\u59cb\u5339\u914d,\u5f00\u5934\u4e0d\u7b26\u5408\u5c31\u8fd4\u56deNone. >>> re . search ( 'my' , 'myismy' ) < re . Match object ; span = ( 0 , 2 ), match = 'my' > >>> re . match ( 'my' , 'myismy' ) < re . Match object ; span = ( 0 , 2 ), match = 'my' > >>> re . match ( 'my' , 'ismy' ) # - \u7b49\u540c\u4e8e re.search('^my','ismy') \u6b64\u5904\u8fd4\u56de\u7684\u662fNone >>>","title":"re.match()"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#refindall","text":"\u4ece\u5934\u5230\u5c3e\u627e\u5230\u5168\u90e8 >>> re . findall ( 'dc' , 'my name is dc, dc is cool.' ) [ 'dc' , 'dc' ] >>> re . findall ( 'd(c)' , 'my name is dc, dc is cool.' ) [ 'c' , 'c' ]","title":"re.findall()"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#resplit","text":"\u76f8\u6bd4\u4e8e\u5b57\u7b26\u4e32\u5185\u7f6e\u7684split\u51fd\u6570\u66f4\u5f3a\u5927!! >>> 'egon:18:male' . split ( ':' ) [ 'egon' , '18' , 'male' ] >>> re . split ( ':' , 'egon:18:male' ) [ 'egon' , '18' , 'male' ] >>> re . split ( '[o8a:e]' , 'egon:18:male' ) # -- []\u91cc\u7684\u5b57\u7b26\u90fd\u662f\u5206\u5272\u7b26 [ '' , 'g' , 'n' , '1' , '' , 'm' , 'l' , '' ]","title":"re.split()"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#resub","text":"re.sub('old','new','string','num') \u66ff\u6362 \u6ce8\u610f\u54e6! \u6ca1\u6709\u6539\u53d8\u539f\u5b57\u7b26\u4e32 , \u56e0\u4e3a\u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7684. >>> re . sub ( 'egon' , 'dc' , 'egon:18:male' ) 'dc:18:male' # -- 'sub aaxx' ' is wxx' ' is vxx' \u90fd\u88ab\u66ff\u6362\u6210\u4e86'dc' >>> re . sub ( '.*?xx' , 'dc' , 'sub aaxx is wxx is vxx is good' ) 'dcdcdc is good' >>> re . sub ( '[a-z]+xx' , 'dc' , 'sub aaxx is wxx is vxx is good' ) 'sub dc is dc is dc is good'","title":"re.sub()"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#recompile","text":"pattern = re.compile('\u6b63\u5219') \u53ef\u4ee5\u9884\u5b58\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f,\u53cd\u590d\u4f7f\u7528\uff01 >>> pattern = re . compile ( 'egon' ) >>> pattern . findall ( 'egon is cool.my name is egon\u3002' ) [ 'egon' , 'egon' ] >>> pattern . search ( 'egon is cool.my name is egon\u3002' ) < re . Match object ; span = ( 0 , 4 ), match = 'egon' >","title":"re.compile() "},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#logging","text":"logging\u6a21\u5757\u5305\u542b\u56db\u79cd\u89d2\u8272: Logger\u3001Filter\u3001Formatter\u3001Handler Filter \u8fc7\u6ee4\u65e5\u5fd7 \u6682\u65f6\u4e0d\u4f1a\u7528. \u53c2\u8003\u94fe\u63a5: https://www.cnblogs.com/linhaifeng/articles/6384466.html#_label12 \"\"\" \u2605 --\u65e5\u5fd7\u683c\u5f0f \"\"\" % ( name ) s Logger\u7684\u540d\u5b57 % ( levelno ) s \u6570\u5b57\u5f62\u5f0f\u7684\u65e5\u5fd7\u7ea7\u522b % ( levelname ) s \u6587\u672c\u5f62\u5f0f\u7684\u65e5\u5fd7\u7ea7\u522b % ( pathname ) s \u8c03\u7528\u65e5\u5fd7\u8f93\u51fa\u51fd\u6570\u7684\u6a21\u5757\u7684\u5b8c\u6574\u8def\u5f84\u540d , \u53ef\u80fd\u6ca1\u6709 % ( filename ) s \u8c03\u7528\u65e5\u5fd7\u8f93\u51fa\u51fd\u6570\u7684\u6a21\u5757\u7684\u6587\u4ef6\u540d % ( module ) s \u8c03\u7528\u65e5\u5fd7\u8f93\u51fa\u51fd\u6570\u7684\u6a21\u5757\u540d % ( funcName ) s \u8c03\u7528\u65e5\u5fd7\u8f93\u51fa\u51fd\u6570\u7684\u51fd\u6570\u540d % ( lineno ) d \u8c03\u7528\u65e5\u5fd7\u8f93\u51fa\u51fd\u6570\u7684\u8bed\u53e5\u6240\u5728\u7684\u4ee3\u7801\u884c % ( created ) f \u5f53\u524d\u65f6\u95f4 , \u7528UNIX\u6807\u51c6\u8868\u793a\u65f6\u95f4 , \u6d6e\u70b9\u6570\u8868\u793a % ( relativeCreated ) d \u8f93\u51fa\u65e5\u5fd7\u4fe1\u606f\u65f6\u7684 , \u81eaLogger\u521b\u5efa\u4ee5\u6765\u7684\u6beb\u79d2\u6570 % ( asctime ) s \u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u5f53\u524d\u65f6\u95f4 . \u9ed8\u8ba4\u683c\u5f0f\u662f \"2003-07-08 16:49:45,896\" . \u9017\u53f7\u540e\u9762\u7684\u662f\u6beb\u79d2 % ( thread ) d \u7ebf\u7a0bID , \u53ef\u80fd\u6ca1\u6709 % ( threadName ) s \u7ebf\u7a0b\u540d , \u53ef\u80fd\u6ca1\u6709 % ( process ) d \u8fdb\u7a0bID , \u53ef\u80fd\u6ca1\u6709 % ( message ) s \u7528\u6237\u8f93\u51fa\u7684\u6d88\u606f","title":"logging\u6a21\u5757"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#_9","text":"cmd\u63a7\u5236\u53f0\u5c4f\u5e55\u8f93\u51fa: 2022-09-26 14:45:01: \u5c0f\u660e\u7ed9\u4e86\u5c0f\u7ea2100 a1.log\u6587\u4ef6\u8f93\u51fa: 2022-09-26 14:45:01 PM - \u4ea4\u6613\u65e5\u5fd7 - INFO - 1: \u5c0f\u660e\u7ed9\u4e86\u5c0f\u7ea2100 a2.log\u6587\u4ef6\u8f93\u51fa: 2022-09-26 14:45:01: \u5c0f\u660e\u7ed9\u4e86\u5c0f\u7ea2100 # -- 1.py import logging \"\"\" \u2605 --Logger: \u8d1f\u8d23\u4ea7\u751f\u65e5\u5fd7\u4fe1\u606f \"\"\" # -- \u6b64\u5904'\u4ea4\u6613\u65e5\u5fd7'\u662fLogger\u65e5\u5fd7\u7684\u540d\u5b57 logger1 = logging . getLogger ( '\u4ea4\u6613\u65e5\u5fd7' ) \"\"\" \u2605 --Formatter: \u63a7\u5236\u65e5\u5fd7\u683c\u5f0f \"\"\" formatter1 = logging . Formatter ( fmt = ' %(asctime)s - %(name)s - %(levelname)s - %(module)s : %(message)s ' , datefmt = '%Y-%m- %d %H:%M:%S %p' , ) formatter2 = logging . Formatter ( fmt = ' %(asctime)s : %(message)s ' , datefmt = '%Y-%m- %d %X ' , ) \"\"\" \u2605 --Handler: \u8d1f\u8d23\u65e5\u5fd7\u8f93\u51fa\u7684\u76ee\u6807 \"\"\" h1 = logging . FileHandler ( filename = 'a1.log' , encoding = 'utf-8' ) h2 = logging . FileHandler ( filename = 'a2.log' , encoding = 'utf-8' ) sm = logging . StreamHandler () # -- \u5c4f\u5e55 \"\"\" \u2605 --\u25b2\u7ed1\u5b9alogger\u5bf9\u8c61\u4e0ehandler\u5bf9\u8c61 \"\"\" logger1 . addHandler ( h1 ) logger1 . addHandler ( h2 ) logger1 . addHandler ( sm ) \"\"\" \u2605 --\u25b2\u7ed1\u5b9ahandler\u5bf9\u8c61\u4e0eformatter\u5bf9\u8c61 \"\"\" h1 . setFormatter ( formatter1 ) h2 . setFormatter ( formatter2 ) sm . setFormatter ( formatter2 ) \"\"\" \u2605 --\u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b: \u53ef\u4ee5\u5728logger\u4e0ehandler\u8fd9\u4e24\u4e2a\u89d2\u8272\u5904\u8fdb\u884c\u8bbe\u7f6e \u65e5\u5fd7\u7ea7\u522b\u67095\u6863: debug -> info -> warning(\u9ed8\u8ba4) -> error -> critical \u5206\u522b\u5bf9\u5e94\u6570\u5b57: \u8c03\u8bd510 - \u6d88\u606f20 - \u8b66\u544a30 - \u9519\u8bef40 - \u4e25\u91cd50 1> \u82e5\u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b\u4e3aerror,\u90a3\u4e48\u4f1a\u8bb0\u5f55error\u548ccritical\u7684\u4fe1\u606f 2> \u82e5\u8bbe\u7f6e\u4e86`logger1.setLevel(30)`,\u90a3\u4e48`h1.setLevel(10)`\u662f\u4e0d\u751f\u6548\u7684. handler\u8bbe\u7f6e\u7684\u65e5\u5fd7\u7ea7\u522b\u5e94\u8be5\u5927\u4e8e\u7b49\u4e8elogger!! \"\"\" # -- logger1.setLevel(30) h1 . setLevel ( 10 ) logger1 . info ( '\u5c0f\u660e\u7ed9\u4e86\u5c0f\u7ea2100' )","title":"\u7b2c\u4e00\u79cd\u65b9\u5f0f"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#_10","text":"\u6211\u4eec\u57fa\u672c\u4e0a\u90fd\u4f1a\u5728settings.py\u6587\u4ef6\u4e2d\u8fdb\u884c\u65e5\u5fd7\u7684\u914d\u7f6e \u5bf9\u8c61 \u542b\u4e49 logger \u4ea7\u751f\u65e5\u5fd7\u7684\u5bf9\u8c61 filter \u8fc7\u6ee4\u65e5\u5fd7\u7684\u5bf9\u8c61 handler \u63a5\u6536\u65e5\u5fd7\u7136\u540e\u63a7\u5236\u6253\u5370\u5230\u4e0d\u540c\u7684\u5730\u65b9 FileHandler\u7528\u6765\u6253\u5370\u5230\u6587\u4ef6\u4e2d,StreamHandler\u7528\u6765\u6253\u5370\u5230\u7ec8\u7aef formatter \u53ef\u4ee5\u5b9a\u5236\u4e0d\u540c\u7684\u65e5\u5fd7\u683c\u5f0f\u5bf9\u8c61,\u7136\u540e\u7ed1\u5b9a\u7ed9\u4e0d\u540c\u7684Handler\u5bf9\u8c61\u4f7f\u7528 \u4ee5\u6b64\u6765\u63a7\u5236\u4e0d\u540c\u7684Handler\u7684\u65e5\u5fd7\u683c\u5f0f # -- settings.py import os import logging.config \"\"\" \u2605 --\u81ea\u5b9a\u4e49\u65e5\u5fd7\u8f93\u51fa\u683c\u5f0f standard_format \u6807\u51c6\u683c\u5f0f simple_format \u7b80\u5355\u683c\u5f0f \"\"\" standard_format = '[ %(asctime)s ][ %(threadName)s : %(thread)d ][task_id: %(name)s ][ %(filename)s : %(lineno)d ]' \\ '[ %(levelname)s ][ %(message)s ]' simple_format = '[ %(levelname)s ][ %(asctime)s ][ %(filename)s : %(lineno)d ] %(message)s ' \"\"\" \u2605 --log\u6587\u4ef6\u7684\u8def\u5f84 \"\"\" logfile_dir = os . path . dirname ( os . path . abspath ( __file__ )) # -- log\u6587\u4ef6\u7684\u76ee\u5f55 logfile_name = 'all2.log' # -- log\u6587\u4ef6\u540d # \u5982\u679c\u4e0d\u5b58\u5728\u5b9a\u4e49\u7684\u65e5\u5fd7\u76ee\u5f55\u5c31\u521b\u5efa\u4e00\u4e2a # if not os.path.isdir(logfile_dir): # os.mkdir(logfile_dir) logfile_path = os . path . join ( logfile_dir , logfile_name ) # -- \u62fc\u63a5log\u6587\u4ef6\u8def\u5f84 \"\"\" \u2605 --logging\u914d\u7f6e\u5b57\u5178 \u25b2handler&formatter logger&handler \"\"\" LOGGING_DIC = { 'version' : 1 , # -- \u7248\u672c\u53f7 'disable_existing_loggers' : False , 'formatters' : { # -- \u6ce8\u610f:'standard'\u3001'simple'\u662f\u53ef\u81ea\u5df1\u5b9a\u4e49\u7684\u540d\u5b57 format\u662f\u56fa\u5b9a\u7684\u540d\u5b57\u4e0d\u80fd\u6539 'standard' : { 'format' : standard_format }, 'simple' : { 'format' : simple_format }, }, 'filters' : {}, # -- \u81ea\u5b9a\u4e49\u4e86\u4e24\u4e2ahandler\u5bf9\u8c61 console\u548cdefault 'handlers' : { # -- 1> \u6253\u5370\u5230\u7ec8\u7aef\u7684\u65e5\u5fd7 'console' : { 'level' : 'DEBUG' , 'class' : 'logging.StreamHandler' , # -- 'logging.StreamHandler'\u8868\u660e\u6253\u5370\u5230\u5c4f\u5e55 'formatter' : 'simple' # -- \u4e0eformatter\u8fdb\u884c\u7ed1\u5b9a }, # -- 2> \u6253\u5370\u5230\u6587\u4ef6\u7684\u65e5\u5fd7,\u6536\u96c6DEBUG\u53ca\u4ee5\u4e0a\u7684\u65e5\u5fd7 'default1' : { 'level' : 'DEBUG' , # -- \u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b(\u7b2c\u4e8c\u5c42\u7684\u5173\u5361) 'class' : 'logging.FileHandler' , # -- logging.FileHandler\u8868\u660e\u4fdd\u5b58\u5230\u6587\u4ef6 'formatter' : 'standard' , # -- formatter\u7684\u503c\u662f\u524d\u9762formatters\u90e8\u5206\u4e2d\u81ea\u5b9a\u4e49\u7684 'filename' : logfile_path , # -- \u65e5\u5fd7\u6587\u4ef6\u540d,\u51c6\u786e\u70b9\u8bf4\u662f\u65e5\u5fd7\u8f93\u51fa\u8def\u5f84 'encoding' : 'utf-8' , # -- \u65e5\u5fd7\u6587\u4ef6\u7684\u7f16\u7801,\u518d\u4e5f\u4e0d\u7528\u62c5\u5fc3\u4e2d\u6587log\u4e71\u7801\u4e86 }, }, 'loggers' : { # -- \u9ed8\u8ba4\u914d\u7f6e '' : { # -- \u8fd9\u91cc\u628a\u4e0a\u9762\u5b9a\u4e49\u7684\u4e24\u4e2ahandler\u90fd\u52a0\u4e0a,\u5373log\u6570\u636e\u65e2\u5199\u5165\u6587\u4ef6\u53c8\u6253\u5370\u5230\u5c4f\u5e55 'handlers' : [ 'console' , 'default1' ], 'level' : 'DEBUG' , # \u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b(\u7b2c\u4e00\u5c42\u5173\u5361) 'propagate' : False , # \u8fd9\u4e2a\u914d\u7f6e\u5173\u4e4elogger\u7684\u7ee7\u627f }, }, } def load_my_logging_cfg (): logging . config . dictConfig ( LOGGING_DIC ) # \u5bfc\u5165\u4e0a\u9762\u5b9a\u4e49\u7684logging\u5b57\u5178\u914d\u7f6e # -- logging.getLogger('\u53ef\u6307\u5b9a\u4efb\u610f\u7684\u65e5\u5fd7\u540d') # -- \u4f1a\u53bb\u5b57\u5178\u7684loggers\u5c5e\u6027\u91cc\u9762\u627e,\u6ca1\u627e\u5230\u5c31\u7528\" \"\u9ed8\u8ba4\u914d\u7f6e logger = logging . getLogger ( '\u4ea4\u6613\u65e5\u5fd7' ) # print(logger) # -- <Logger logger1 (DEBUG)> logger . debug ( 'It debug!' ) logger . info ( 'It works!' ) if __name__ == '__main__' : load_my_logging_cfg () \"\"\" cmd\u63a7\u5236\u53f0\u8f93\u51fa: [DEBUG][2022-09-26 15:57:30,103][settings.py:70]It debug! [INFO][2022-09-26 15:57:30,104][settings.py:71]It works! all2.log\u6587\u4ef6: [2022-09-26 15:57:30,103][MainThread:4670004736][task_id:\u4ea4\u6613\u65e5\u5fd7][settings.py:70][DEBUG][It debug!] [2022-09-26 15:57:30,104][MainThread:4670004736][task_id:\u4ea4\u6613\u65e5\u5fd7][settings.py:71][INFO][It works!] \"\"\"","title":"\u7b2c\u4e8c\u79cd\u65b9\u5f0f"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#_11","text":"import logging.config import os base_dir = os . path . dirname ( os . path . dirname ( __file__ )) base_db = os . path . join ( base_dir , \"db\" ) base_log = os . path . join ( base_dir , \"log\" ) \"\"\" \u2605 --logging\u65e5\u5fd7\u914d\u7f6e \"\"\" standard_format = '[ %(asctime)s ][ %(threadName)s : %(thread)d ][task_id: %(name)s ][ %(filename)s : %(lineno)d ]' \\ '[ %(levelname)s ][ %(message)s ]' simple_format = '[ %(levelname)s ][ %(asctime)s ][ %(filename)s : %(lineno)d ] %(message)s ' logfile_name = 'ATM.log' if not os . path . isdir ( base_log ): os . mkdir ( base_log ) logfile_path = os . path . join ( base_log , logfile_name ) LOGGING_DIC = { 'version' : 1 , 'disable_existing_loggers' : False , 'formatters' : { 'standard' : { 'format' : standard_format }, 'simple' : { 'format' : simple_format }, }, 'filters' : {}, 'handlers' : { 'console' : { 'level' : 'DEBUG' , 'class' : 'logging.StreamHandler' , 'formatter' : 'simple' }, 'file' : { 'level' : 'DEBUG' , 'class' : 'logging.FileHandler' , 'formatter' : 'standard' , 'filename' : logfile_path , 'encoding' : 'utf-8' , }, }, 'loggers' : { '' : { 'handlers' : [ 'console' , 'file' ], 'level' : 'DEBUG' , 'propagate' : False , }, }, } if __name__ == '__main__' : def load_my_logging_cfg (): logging . config . dictConfig ( LOGGING_DIC ) logger = logging . getLogger ( '\u4ea4\u6613\u65e5\u5fd7' ) logger . debug ( 'It debug!' ) logger . info ( 'It works!' ) load_my_logging_cfg ()","title":"\u7eaf\u4eab\u7248"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#hashlib","text":"hash\u662f\u4e00\u79cd\u7b97\u6cd5,\u8be5\u7b97\u6cd5\u63a5\u53d7\u4f20\u5165\u7684\u5185\u5bb9(\u6587\u672c\u6587\u4ef6--\u5b57\u7b26;\u89c6\u9891\u6587\u4ef6--\u4e8c\u8fdb\u5236),\u7ecf\u8fc7\u8fd0\u7b97\u5f97\u5230\u4e00\u4e32hash\u503c. \u4e3b\u8981\u63d0\u4f9bSHA1 SHA224 SHA256 SHA384 SHA512 MD5\u7b97\u6cd5","title":"hashlib\u6a21\u5757"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#hash","text":"1> \u53ea\u8981\u4f20\u5165\u7684\u5185\u5bb9\u4e00\u6837, \u5f97\u5230\u7684hash\u503c\u5fc5\u7136\u4e00\u6837\uff01 \u5728\u6d4f\u89c8\u5668\u4e2d\u4e0b\u8f7d\u6587\u4ef6,\u6700\u540e\u4f1a\u505c\u987f\u4e0b,\u5c31\u662f\u5728\u505ahash\u6821\u9a8c,\u907f\u514d\u5728\u7f51\u7edc\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u6587\u4ef6\u51fa\u9519,\u4fdd\u8bc1\u6587\u4ef6\u5b8c\u6574. 2> \u53ea\u8981\u6211\u4eec\u4f7f\u7528\u7684hash\u7b97\u6cd5\u56fa\u5b9a,\u65e0\u8bba\u4f20\u5165\u7684\u5185\u5bb9\u6709\u591a\u5927,\u5f97\u5230\u7684hash\u503c\u7684\u957f\u5ea6\u662f\u56fa\u5b9a\u7684 \u4e0b\u8f7d\u7684\u6587\u4ef6\u5185\u5bb9\u662f1\u4e2aT\u5462?\u662f\u5426\u610f\u5473\u7740hash\u503c\u4e5f\u4f1a\u5360\u5f88\u5927\u7684\u5185\u5b58\uff1f\u6240\u4ee5hash\u503c\u957f\u5ea6\u9700\u8981\u56fa\u5b9a. 3> \u4e0d\u53ef\u4ee5\u7528hash\u503c\u9006\u63a8\u51fa\u539f\u6765\u7684\u5185\u5bb9,\u5355\u5411\u7684 \u5728\u7f51\u7edc\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u7684\u5305\u53ef\u80fd\u4f1a\u88ab\u622a\u83b7. \u82e5\u8d26\u53f7\u5bc6\u7801\u662f\u660e\u6587\u7684\u90a3\u5c31\u5b8c\u86cb\u4e86. \u57fa\u4e8e1\u548c2\u53ef\u4ee5\u5728\u4e0b\u8f7d\u6587\u4ef6\u65f6\u505a\u6587\u4ef6 \u4e00\u81f4\u6027\u6821\u9a8c \u57fa\u4e8e1\u548c3\u53ef\u4ee5\u5bf9\u5bc6\u7801\u8fdb\u884c \u52a0\u5bc6 import hashlib # -- 1> \u9020\u51fahash\u5de5\u5382 # \u8fd8\u53ef\u4ee5\u662f\u5176\u5b83\u7b97\u6cd5 m = hashlib.sha512() # m = hashlib.md5('python'.encode('utf8')) \u53ef\u4ee5\u5148\u4f20\u4e00\u6bb5\u6570\u636e. m = hashlib . md5 () # -- 2> \u8fd0\u9001\u539f\u6750\u6599 # update\u503c\u63a5\u6536bytes\u7c7b\u578b\u7684\u6570\u636e # -- \u6ce8\u610f:\u53ef\u4ee5\u5c06\u4e00\u6bb5\u5f88\u957f\u7684\u6570\u636eupdate\u591a\u6b21,\u4e0e\u4e00\u6b21update\u8fd9\u6bb5\u957f\u6570\u636e,\u5f97\u5230\u7684\u7ed3\u679c\u662f\u4e00\u6837\u7684. m . update ( 'hello' . encode ( 'utf8' )) m . update ( 'world' . encode ( 'utf8' )) # -- 3> \u4ea7\u51fahash\u503c \"\u4e00\u4e32\u7531\u5c0f\u5199\u5b57\u6bcd\u548c\u6570\u5b57\u6784\u6210\u7684\u5b57\u7b26\u4e32\" print ( m . hexdigest ()) # fc5e038d38a57032085441e7fe7010b0","title":"hash\u4e09\u5927\u7279\u6027"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#_12","text":"","title":"\u6587\u4ef6\u4e00\u81f4\u6027\u6821\u9a8c"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#_13","text":"\u5ba2\u6237\u7aef\u4ece\u670d\u52a1\u7aef\u4e0b\u8f7d\u4e00\u4e2a\u6587\u4ef6, S\u4f20\u8f93\u6587\u4ef6\u7ed9C\u7684\u540c\u65f6,\u4f1a\u4f20\u7ed9C\u4e00\u4e2a\u52a0\u5bc6\u8be5\u6587\u4ef6\u540e\u5f97\u5230\u7684hash\u503c. \u4f20\u8f93\u5b8c\u6bd5,C\u540c\u6837\u5bf9\u6587\u4ef6\u8fdb\u884c\u52a0\u5bc6,\u6bd4\u5bf9hash\u503c\u662f\u5426\u76f8\u540c.. \u82e5\u76f8\u540c\u5219\u8bc1\u660e\u6587\u4ef6\u662f\u5b8c\u6574\u7684,\u6ca1\u6709\u88ab\u7be1\u6539\u8fc7. Q: \u4e2d\u95f4\u4eba\u9700\u8981\u5982\u4f55\u653b\u51fb\u5462\uff1f A: \u5b83\u9700\u8981\u5f97\u5230\u6240\u6709\u7684\u6570\u636e\u5305,(\u56e0\u4e3a\u6587\u4ef6\u662f\u4e00\u6bb5\u4e00\u6bb5\u4f20\u8f93\u7684),\u5e76\u4e14\u7be1\u6539\u52a0\u5165\u653b\u51fb\u4ee3\u7801,\u7ed9\u4e00\u4e2a\u65b0\u7684hash\u503c. \u8fd9\u6837\u5ba2\u6237\u7aef\u624d\u53d1\u89c9\u4e0d\u5230\u5f02\u5e38.. \u4f46\u51e1\u67d0\u4e00\u73af\u8282\u51fa\u73b0\u95ee\u9898,\u653b\u51fb\u90fd\u4f1a\u5931\u8d25..","title":"\u539f\u7406"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#_14","text":"Q: m.update(f.read()) \u6587\u4ef6\u8fc7\u5927\u53ef\u80fd\u5c31\u5361\u6b7b\u4e86\uff01 A: \u4e00\u884c\u4e00\u884c\u7684\u62ff\u51fa\u6765\u867d\u7136\u89e3\u51b3\u4e86\u5185\u5b58\u95ee\u9898,\u4f46\u82e5\u89c6\u9891\u6587\u4ef6\u67091\u4e2aT,\u8981\u5faa\u73af\u8bb8\u4e45\u8bb8\u4e45. \u6211\u4eec\u4e0d\u5e94\u8be5\u5c06\u6587\u4ef6\u771f\u7684\u5168\u8bfb\u5b8c,\u5e94\u91c7\u7528\u6bd4\u4f8b\u7684\u65b9\u5f0f\u7f29\u77ed\u7b97hash\u503c\u7684\u65f6\u95f4 c/s\u7aef\u90fd\u6309\u7167\u6211\u4eec\u81ea\u5b9a\u4e49\u7684\u65b9\u5f0f\u8fdb\u884chash\u6821\u9a8c!! import hashlib m = hashlib . md5 () with open ( '01.mp4' , 'rb' ) as f : for line in f : m . update ( line ) print ( m . hexdigest ())","title":"\u5b9e\u73b0"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#_15","text":"(\u00b4\u25bd\uff40)\u6ca1\u6709\u7edd\u5bf9\u7684\u5b89\u5168\u54e6! \u6709\u7a0b\u5e8f\u5c31\u6709\u6f0f\u6d1e,\u53ea\u9700\u63d0\u5347\u5b89\u5168\u7b49\u7ea7,\u8ba9\u7834\u574f\u8005\u7684\u7834\u89e3\u6210\u672c\u8fdc\u8fdc\u5927\u4e8e\u5176\u6536\u76ca.","title":"\u660e\u6587\u5bc6\u7801\u52a0\u5bc6"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#_16","text":"\u7528\u6237\u6ce8\u518c\u540e, \u670d\u52a1\u7aef\u662f\u6709\u4e00\u4efd\u6b63\u786e\u7684\u7528\u6237\u540d\u548c\u5bf9\u5e94\u7684\u7528\u54c8\u5e0c\u7b97\u6cd5(\u5047\u8bbe\u662fmd5)\u52a0\u5bc6\u540e\u7684\u5bc6\u7801\u7684; \u5ba2\u6237\u7aef\u7528\u6237\u5728\u767b\u5f55\u754c\u9762\u8f93\u5165\u5bc6\u7801\u540e,\u4f1a\u7528md5\u8fdb\u884c\u52a0\u5bc6,\u5e76\u5c06\u7528\u6237\u540d\u4e0e\u52a0\u5bc6\u540e\u7684\u5bc6\u7801\u4f20\u5230\u670d\u52a1\u7aef\u8fdb\u884c\u6bd4\u5bf9.. Q: \u4e2d\u95f4\u4eba\u9700\u8981\u5982\u4f55\u653b\u51fb\u5462\uff1f A: \u54ea\u6015\u4e2d\u95f4\u4eba\u622a\u83b7\u4e86C\u4f20\u7ed9S\u7684\u6570\u636e\u5305,\u62ff\u5230\u52a0\u5bc6\u540e\u7684hash\u503c\u4e5f\u53cd\u63a8\u4e0d\u4e86\u5bc6\u7801\u660e\u6587. \u4f46\u4e2d\u95f4\u4eba\u53ef\u4ee5\u8fdb\u884c \u649e\u5e93 ( \u6293\u5305 + \u731c\u5230\u7528\u7684hash\u7b97\u6cd5 + \u5e38\u7528\u7684\u5bc6\u7801\u5b57\u5178 ), \u8499\u4f60\u7684\u5bc6\u7801\u662f\u591a\u5c11.. \u4e00\u65e6\u5bc6\u7801\u5b57\u5178\u4e2d\u7684\u67d0\u4e2avalue\u901a\u8fc7\u76f8\u540c\u7684hash\u7b97\u6cd5\u7b97\u51fa\u7684hash\u503c\u4e0e\u6293\u5305\u622a\u83b7\u7684\u4e00\u81f4.. \u5bc6\u7801\u5c31\u88ab\u7834\u89e3\u4e86.","title":"\u539f\u7406"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#_17","text":"import hashlib pwd = input ( '>>>:' ) m = hashlib . md5 () m . update ( pwd . encode ( 'utf-8' )) print ( m . hexdigest ()) \u89e3\u51b3'\u649e\u5e93', \u529e\u6cd5\u4e00:\u4f7f\u7528\u5f3a\u5bc6\u7801;\u529e\u6cd5\u4e8c: \u5bc6\u7801\u52a0\u76d0. m = hashlib . md5 () # -- \u4e0d\u52a0\u76d0 m . update ( pwd . encode ( 'utf-8' )) # -- C/S\u7aef\u662f\u77e5\u9053\u52a0\u7684\u8fd9\u4e2a'\u76d0'\u662f'\u5929\u738b\u76d6\u5730\u864e',\u4f46\u7834\u574f\u8005\u4e0d\u77e5\u9053\uff01 # -- \u66f4\u72e0\u4e00\u70b9,\u52a0\u76d0\u52a0\u5728\u5bc6\u7801\u7684\u67d0\u4e9b\u4f4d\u7f6e.. m = hashlib . md5 ( '\u5929\u738b\u76d6\u5730\u864e' . encode ( 'utf-8' )) # -- \u52a0\u76d0 m . update ( pwd . encode ( 'utf-8' ))","title":"\u5b9e\u73b0"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#hmac","text":"python\u7684 hmac\u6a21\u5757 -- \u57fa\u4e8e\u5bc6\u94a5\u7684\u6d88\u606f\u9a8c\u8bc1. \u5b83\u5185\u90e8\u4f1a\u5bf9\u6211\u4eec\u521b\u5efakey\u548c\u5185\u5bb9\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u5904\u7406\u540e\u518d\u52a0\u5bc6\uff01 import hmac # -- key\u503c'\u5c0f\u9e21\u7096\u8611\u83c7',\u5c31\u662f\u6211\u4eec\u52a0\u7684\u76d0 \u76f8\u5f53\u4e8e\u5f3a\u5236\u52a0'\u76d0' m = hmac . new ( '\u5c0f\u9e21\u7096\u8611\u83c7' . encode ( 'utf8' ), digestmod = 'md5' ) m . update ( 'hello' . encode ( 'utf8' )) # -- value print ( m . hexdigest ())","title":"\u8865\u5145: hmac\u6a21\u5757"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#subprocess","text":"\u6267\u884c\u7cfb\u7edf\u547d\u4ee4 ,\u62ff\u5230\u7ed3\u679c,\u60f3\u548b\u64cd\u4f5c\u5c31\u548b\u64cd\u4f5c,\u800c\u4e0d\u662f\u76f4\u63a5\u4e22\u5230\u63a7\u5236\u53f0\u6253\u5370 import os os . system ( 'ls' ) # -- \u53ef\u4ee5\u6267\u884c\u7cfb\u7edf\u547d\u4ee4,\u4f46\u6267\u884c\u7ed3\u679c\u76f4\u63a5\u6253\u5370\u5230\u63a7\u5236\u53f0\u4e0a\u4e86 \u6211\u4eec\u60f3\u8981\u62ff\u5230\u8be5\u6267\u884c\u7ed3\u679c , \u548b\u641e \uff1f subprocess.Popen() \u7b2c\u4e00\u4e2a\u53c2\u6570: \u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u547d\u4ee4 \u7b2c\u4e8c\u4e2a\u53c2\u6570: \u5fc5\u987b\u5199 shell=True \u7b80\u5355\u7406\u89e3\u8c03\u7528\u547d\u4ee4\u89e3\u91ca\u5668 eg:cmd\u7ec8\u7aef \u7b2c\u4e09\u4e2a\u53c2\u6570: stdout=subprocess.PIPE \u547d\u4ee4\u6b63\u786e\u8f93\u51fa PIPE \u7ba1\u9053\u7b80\u5355\u7406\u89e3\u6210\u5185\u5b58\u91cc\u7684\u4e00\u79cd\u6570\u636e\u7ed3\u6784 \u547d\u4ee4\u7ed3\u679c\u53ea\u6709\u4e00\u4efd, \u4e22\u5230\u7ba1\u9053\u91cc\u6682\u5b58\u5566, \u5c31\u4e0d\u4f1a\u76f4\u63a5\u5728\u7ec8\u7aef\u663e\u793a \u7b2c\u56db\u4e2a\u53c2\u6570: stderr=subprocess.PIPE \u547d\u4ee4\u9519\u8bef\u8f93\u51fa \u8fd9\u4e0e\u547d\u4ee4\u6b63\u786e\u8f93\u51fa\u7684\u7ba1\u9053\u662f\u4e24\u6839\u4e0d\u540c\u7684\u7ba1\u9053\u54e6 import subprocess from sys import stdout # -- py\u6587\u4ef6\u7684\u8fd0\u884c\u5f00\u542f\u4e86\u4e00\u4e2a\u7236\u8fdb\u7a0b,\u8fd0\u884c\u5230\u6b64\u884c\u4ee3\u7801\u5f00\u542f\u4e00\u4e2a\u5b50\u8fdb\u7a0b # \u4e24\u4e2a\u8fdb\u7a0b\u662f\u5b8c\u5168\u9694\u79bb\u72ec\u7acb\u7684,\u4e0d\u80fd\u5728\u5185\u5b58\u4e2d\u5171\u4eab\u6570\u636e # \u4f46\u6211\u4eec\u9700\u8981\u5c06\u5b50\u8fdb\u7a0b\u7684\u7cfb\u7edf\u547d\u4ee4\u8fd0\u884c\u7ed3\u679c\u7ed9\u7236\u8fdb\u7a0b,\u53ea\u80fd\u9020\u4e00\u4e2a\u4e24\u8005\u5171\u4eab\u7684\u5185\u5b58\u7a7a\u95f4 # \u7ba1\u9053(\u8fdb\u7a0b\u4e0e\u8fdb\u7a0b\u4e4b\u95f4\u5171\u4eab\u6570\u636e\u7528\u7684) obj = subprocess . Popen ( 'ls' , shell = True , # -- subprocess.PIPE\u6bcf\u8c03\u7528\u5c31\u4f1a\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u7ba1\u9053 # 'oop\u91cc\u9762\u7684property->\u770b\u4f3c\u8c03\u7528\u7684\u662f\u4e00\u5c5e\u6027\u5b9e\u5219\u662f\u4e00\u529f\u80fd\u7684\u6267\u884c' stdout = subprocess . PIPE , stderr = subprocess . PIPE , ) # -- \u7236\u8fdb\u7a0b\u51c6\u5907\u4ece\u6b63\u786e\u7ba1\u9053\u8bfb\u53d6\u7ed3\u679c,\u4f46\u5b50\u8fdb\u7a0b\u8fd0\u884c\u7cfb\u7edf\u547d\u4ee4\u7684\u7ed3\u679c\u53ef\u80fd\u8fd8\u6ca1\u4ea7\u751f\u5462. # \u56e0\u4e3a\u8fdb\u7a0b\u4e0e\u8fdb\u7a0b\u4e4b\u95f4\u662f\u76f8\u4e92\u9694\u79bb \u72ec\u7acb\u7684 # \u82e5\u7ba1\u9053\u91cc\u6ca1\u6709\u7ed3\u679c,\u7236\u8fdb\u7a0b\u5c31\u4f1a\u5728\u8fd9\u7b49\u7740\u5b50\u8fdb\u7a0b\u5c06\u7ed3\u679c\u4e22\u5230\u7ba1\u9053\u4e2d,\u76f8\u5f53\u4e8e\u53d6\u4ee3\u4e86time.sleep()\u64cd\u4f5c # \u6ce8\u610f\u54e6! \u4ece\u7ba1\u9053\u4e2d\u8bfb\u8d70\u8fd9\u4efd\u6570\u636e\u540e,\u518d\u8bfb\u6570\u636e\u7ed3\u679c\u4e3a\u7a7a.\u56e0\u4e3a\u53ea\u6709\u4e00\u4efd. stdout_res = obj . stdout . read () # -- \u7cfb\u7edf\u547d\u4ee4\u7684\u8fd0\u884c\u7ed3\u679c\u662fbytes\u7c7b\u578b,\u56fa\u5b9a\u4e86\u7684. \u60f3\u8981\u6253\u5370\u7ed3\u679c,\u9700\u8981\u89e3\u7801 windows-gbk;mac-utf8 print ( stdout_res . decode ( 'utf-8' )) stderr_res = obj . stderr . read () print ( stderr_res . decode ( 'utf-8' ))","title":"subprocess\u6a21\u5757"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#sys","text":"sys.path \u5904\u7406\u5bfc\u5165\u6a21\u5757\u65f6\u7684\u73af\u5883\u53d8\u91cf!!! sys.argv \u7528\u4e8e\u547d\u4ee4\u884c\u6267\u884cpy\u6587\u4ef6\u65f6, \u63a5\u6536\u540e\u9762\u8ddf\u7740\u7684\u53c2\u6570 # -- train.py import sys print ( sys . argv ) # -- ['train.py', '\u53c2\u65701', '\u53c2\u65702'] ( application ) One_Piece @DCdeMacBook - Air Desktop % python train . py \u53c2\u65701 \u53c2\u65702 [ 'train.py' , '\u53c2\u65701' , '\u53c2\u65702' ] \u5b9e\u73b0\u62f7\u8d1d\u6587\u4ef6\u7684\u529f\u80fd \u547d\u4ee4\u884c\u6267\u884c\u547d\u4ee4 python cp.py \u6e90\u6587\u4ef6\u8def\u5f84 \u76ee\u6807\u6587\u4ef6\u8def\u5f84 # -- cp.py src_file = sys . argv [ 1 ] dst_file = sys . argv [ 2 ] # -- rb\u6a21\u5f0f \u53ef\u4ee5\u6253\u5f00\u4efb\u4f55\u6587\u4ef6 # -- \u6ce8\u610f:\u4ee5w\u7684\u65b9\u5f0f\u6253\u5f00\u6587\u4ef6,\u672a\u5173\u95ed\u7684\u60c5\u51b5\u4e0b\u5f80\u6587\u4ef6\u91cc\u5199\u5185\u5bb9\u6307\u9488\u4e0d\u65ad\u540e\u79fb # \u4e2d\u9014\u5173\u6389,\u4e0b\u6b21\u518d\u4ee5w\u7684\u5f62\u5f0f\u6253\u5f00,\u5185\u5bb9\u5c06\u88ab\u6e05\u7a7a with open ( 'src_file' , 'rb' ) as read_f , \\ open ( 'dst_file' , 'wb' ) as write_f : for line in read_f : write_f . write ( line )","title":"sys\u6a21\u5757"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#jsonpickle","text":"","title":"json&amp;pickle\u6a21\u5757"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#_18","text":"","title":"\u5f02\u540c"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#json","text":"json \u8ddf \u5b57\u5178 \u662f\u6709\u533a\u522b\u7684!! json\u5206\u4e3ajson\u5bf9\u8c61\u548cjson\u6570\u7ec4 json\u5bf9\u8c61\u5c31\u7c7b\u4f3c\u4e8e\u5b57\u5178. json\u6570\u7ec4\u662f\u7528 [] \u5305\u8d77\u6765\u7684\u591a\u4e2ajson\u5bf9\u8c61 json\u5bf9\u8c61\u53ef\u7531\u591a\u4e2a\u952e\u503c\u5bf9\u7ec4\u6210, \u952e\u5fc5\u987b\u7531 \"\" \u5305\u88f9!!!,\u503c\u53ef\u4ee5\u662fjson\u5bf9\u8c61\u6216\u8005\u662fjson\u6570\u7ec4. JSON\u7c7b\u578b Python\u7c7b\u578b {} dict [] list \"string\" str 1234.56 int\u6216float true/false True/False null None","title":"json\u683c\u5f0f"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#_19","text":"\u53ef\u4ee5\u4fdd\u5b58\u7a0b\u5e8f\u7684\u8fd0\u884c\u72b6\u6001; \u5b9e\u73b0\u6570\u636e\u7684\u8de8\u5e73\u53f0\u7684\u4ea4\u4e92 json\u548cpickle\u90fd\u53ef\u7528\u4e8e\u5e8f\u5217\u5316, \u5e8f\u5217\u5316\u662f\u5c06\u5bf9\u8c61\u8f6c\u6362\u6210\u6613\u4e8e\u4f20\u8f93\u7684\u5f62\u5f0f\u7684\u8fc7\u7a0b. \u901a\u4fd7\u70b9\u5c31\u662f\u5c06\u5f53\u524d\u65f6\u523b\u5904\u4e8e\u5185\u5b58\u4e2d\u7684\u6570\u636e\u8f6c\u6362\u4e00\u79cd\u683c\u5f0f.. \u53cd\u5e8f\u5217\u5316\u5c31\u662f\u5c06\u6570\u636e\u8f6c\u6362\u6210\u5e8f\u5217\u5316\u4e4b\u524d\u7684\u6837\u5b50. json \u8de8\u5e73\u53f0\u6027\u5f3a;\u53ea\u80fd\u652f\u6301/\u5bf9\u5e94python\u90e8\u5206\u7684\u6570\u636e\u7c7b\u578b pickle \u53ef\u4ee5\u652f\u6301/\u5bf9\u5e94\u6240\u6709python\u7684\u6570\u636e\u7c7b\u578b;\u53ea\u80fd\u88abpython\u8bc6\u522b,\u4e0d\u80fd\u8de8\u5e73\u53f0","title":"\u5e8f\u5217\u5316"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#json_1","text":"","title":"json\u6a21\u5757\u7684\u4f7f\u7528"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#json_2","text":"dumps dump import json dic = { 'name' : 'egon' , 'age' : 18 , 'sex' : 'male' } json_str = json . dumps ( dic ) # -- \u5e8f\u5217\u5316\u540e,\u81ea\u52a8\u5c06\u5b57\u5178\u4e2d\u7684\u5355\u5f15\u53f7\u8f6c\u6362\u6210\u4e86\u53cc\u5f15\u53f7 # print(json_str) # -- {\"name\": \"egon\", \"age\": 18, \"sex\": \"male\"} # print(type(json_str)) # -- <class 'str'> with open ( 'db.json' , 'wt' , encoding = 'utf-8' ) as f : f . write ( json_str ) # !!-- \u5e8f\u5217\u5316\u5f97\u5230json_str\u3001\u628ajson_str\u5199\u5165db.json\u6587\u4ef6\u8fd9\u4e24\u6b65 \u7b49\u540c\u4e8e with open ( 'db.json' , 'wt' , encoding = 'utf-8' ) as f : json . dump ( dic , f )","title":"json\u5e8f\u5217\u5316"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#json_3","text":"loads load import json with open ( 'db.json' , 'rt' , encoding = 'utf-8' ) as f : data = f . read () dic_res = json . loads ( data ) # print(type(data)) # -- <class 'str'> # print(dic_res) # -- {'name': 'egon', 'age': 18, 'sex': 'male'} # -- {'name': 'egon', 'age': 18, 'sex': 'male'} <class 'dict'> # print(eval(data), type(eval(data))) print ( dic_res [ 'sex' ]) # male # !!-- \u4ece\u786c\u76d8db.json\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5230data\u3001\u5c06data\u53cd\u5e8f\u5217\u5316\u5f97\u5230dic_res \u7b49\u540c\u4e8e with open ( 'db.json' , 'rt' , encoding = 'utf-8' ) as f : dic_res = json . load ( f ) \"\"\" \u63d0\u4e00\u53e5,\u5728\u4ee3\u7801\u4e2d\u6211\u4eec\u8bd5\u56fe\u7528eval\u5bf9json\u5bf9\u8c61\u8fdb\u884c\u4e86\u53cd\u5e8f\u5217\u5316,\u6210\u529f\u4e86. \u56e0\u4e3ajson\u683c\u5f0f\u7684\u6570\u636e\u5728\u5185\u5b58\u4e2d\u4e5f\u662fstr\u7684\u6570\u636e\u7c7b\u578b. eval\u53bb\u9664\u4e86\u6700\u5916\u5c42\u7684\u5f15\u53f7. \u4f46json\u683c\u5f0f\u7684\u6570\u636e\u957f\u8fd9\u6837\u5462\uff1f[1,true,null] \u7528eval\u6765\u53cd\u5e8f\u5217\u5316\u5c31\u4e0d\u884c! \u5efa\u8bae\u8fd8\u662f\u4f7f\u7528json\u6a21\u5757\u7684\u65b9\u6cd5,\u522b\u641e\u8fd9\u4e9b\u82b1\u91cc\u80e1\u54e8\u7684.(\u00b4\u25bd\uff40) \"\"\"","title":"json\u53cd\u5e8f\u5217\u5316"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/08_%E5%BF%85%E7%94%A8%E6%A8%A1%E5%9D%97/#pickle","text":"\u5fc5\u987b\u662f\u4e8c\u8fdb\u5236\u7684\u5f62\u5f0f\u8bfb\u5199. import pickle dic = { 'a' : 1 , 'b' : 2 , 'c' : 3 } \"\"\" \u2605 --\u5e8f\u5217\u5316 \"\"\" pkl = pickle . dumps ( dic ) # -- b'\\x80\\x04\\x95\\x17\\x00\\x00\\x00\\x00\\x00\\x00\\x00}\\x94(\\x8c\\x01a\\x94K\\x01\\x8c\\x01b\\x94K\\x02\\x8c\\x01c\\x94K\\x03u.' # print(pkl) # print(type(pkl)) # -- <class 'bytes'> with open ( 'db.kpl' , 'wb' ) as f : f . write ( pkl ) \"\"\" \u7b49\u540c\u4e8e with open('db.kpl', 'wb') as f: pickle.dump(pkl,f) \"\"\" \"\"\" \u2605 --\u53cd\u5e8f\u5217\u5316 \"\"\" with open ( 'db.kpl' , 'rb' ) as f : data = f . read () res = pickle . loads ( data ) print ( res [ 'a' ]) # 1 \"\"\" \u7b49\u540c\u4e8e with open('db.kpl', 'rb') as f: res = pickle.load(f) print(res['a']) \"\"\"","title":"pickle\u6a21\u5757\u7684\u4f7f\u7528"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/09_%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/","text":"os random time datetime shutil shelve xml configparser OS\u6a21\u5757 \u00b6 os . environ \u83b7\u53d6\u7cfb\u7edf\u73af\u5883\u53d8\u91cf os . name \u8f93\u51fa\u5b57\u7b26\u4e32\u6307\u793a\u5f53\u524d\u4f7f\u7528\u5e73\u53f0 . win -> \"nt\" ; Linux -> \"posix\" os . sep \u8f93\u51fa\u64cd\u4f5c\u7cfb\u7edf\u7279\u5b9a\u7684\u8def\u5f84\u5206\u9694\u7b26 . win\u4e0b\u4e3a \" \\\\ \" , Linux\u4e0b\u4e3a \"/\" os . linesep \u8f93\u51fa\u5f53\u524d\u5e73\u53f0\u4f7f\u7528\u7684\u884c\u7ec8\u6b62\u7b26 . win\u4e0b\u4e3a \" \\t\\n \" , Linux\u4e0b\u4e3a \" \\n \" os . pathsep \u8f93\u51fa\u7528\u4e8e\u5206\u5272\u6587\u4ef6\u8def\u5f84\u7684\u5b57\u7b26\u4e32 win\u4e0b\u4e3a \";\" , Linux\u4e0b\u4e3a \":\" os . curdir \u8fd4\u56de\u5f53\u524d\u76ee\u5f55 : ( '.' ) os . pardir \u83b7\u53d6\u5f53\u524d\u76ee\u5f55\u7684\u7236\u76ee\u5f55\u5b57\u7b26\u4e32\u540d : ( '..' ) os . getcwd () \u83b7\u53d6\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55 , \u5373\u5f53\u524dpython\u811a\u672c\u5de5\u4f5c\u7684\u76ee\u5f55\u8def\u5f84 os . stat ( 'path/filename' ) \u83b7\u53d6\u6587\u4ef6 / \u76ee\u5f55\u4fe1\u606f os . chdir ( \"dirname\" ) \u6539\u53d8\u5f53\u524d\u811a\u672c\u5de5\u4f5c\u76ee\u5f55 ; \u76f8\u5f53\u4e8eshell\u4e0bcd os . mkdir ( 'dirname' ) \u751f\u6210\u5355\u7ea7\u76ee\u5f55 ; \u76f8\u5f53\u4e8eshell\u4e2dmkdir dirname os . makedirs ( 'dirname1/dirname2' ) \u53ef\u751f\u6210\u591a\u5c42\u9012\u5f52\u76ee\u5f55 os . remove ( \"filename\" ) \u5220\u9664\u4e00\u4e2a\u6587\u4ef6 os . rmdir ( 'dirname' ) \u5220\u9664\u5355\u7ea7\u7a7a\u76ee\u5f55 , \u82e5\u76ee\u5f55\u4e0d\u4e3a\u7a7a\u5219\u65e0\u6cd5\u5220\u9664 , \u62a5\u9519 ; \u76f8\u5f53\u4e8eshell\u4e2drmdir dirname os . removedirs ( 'dirname1' ) \u82e5\u76ee\u5f55\u4e3a\u7a7a , \u5219\u5220\u9664 , \u5e76\u9012\u5f52\u5230\u4e0a\u4e00\u7ea7\u76ee\u5f55 , \u82e5\u4e5f\u4e3a\u7a7a , \u5219\u5220\u9664 . \u4ee5\u6b64\u7c7b\u63a8 os . listdir ( 'dirname' ) \u4ee5\u5217\u8868\u65b9\u5f0f\u8fd4\u56de\u6307\u5b9a\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\u548c\u5b50\u76ee\u5f55 , \u5305\u62ec\u9690\u85cf\u6587\u4ef6 os . rename ( \"oldname\" , \"newname\" ) \u91cd\u547d\u540d\u6587\u4ef6 / \u76ee\u5f55 os . system ( \"bash command\" ) \u8fd0\u884cshell\u547d\u4ee4 , \u7ed3\u679c\u4f1a\u5728\u63a7\u5236\u53f0\u76f4\u63a5\u6253\u5370 os . path . join ( path1 [, path2 [, ... ]]) \u5c06\u591a\u4e2a\u8def\u5f84\u7ec4\u5408\u540e\u8fd4\u56de os . path . isfile ( path ) \u82e5path\u662f\u4e00\u4e2a\u5b58\u5728\u7684\u6587\u4ef6 , \u5219\u8fd4\u56deTrue ; \u5426\u5219\u8fd4\u56deFalse os . path . isdir ( path ) \u82e5path\u662f\u4e00\u4e2a\u5b58\u5728\u7684\u76ee\u5f55 , \u5219\u8fd4\u56deTrue ; \u5426\u5219\u8fd4\u56deFalse os . path . exists ( path ) \u5982\u679cpath\u5b58\u5728 , \u8fd4\u56deTrue ; \u5982\u679cpath\u4e0d\u5b58\u5728 , \u8fd4\u56deFalse os . path . isabs ( path ) \u5982\u679cpath\u662f\u7edd\u5bf9\u8def\u5f84 , \u8fd4\u56deTrue os . path . split ( path ) \u5c06path\u5206\u5272\u6210\u76ee\u5f55\u548c\u6587\u4ef6\u540d\u4e8c\u5143\u7ec4\u8fd4\u56de os . path . dirname ( path ) \u8fd4\u56depath\u7684\u76ee\u5f55 . \u5176\u5b9e\u5c31\u662fos . path . split ( path ) \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 os . path . basename ( path ) \u8fd4\u56depath\u7684\u6587\u4ef6\u540d . \u82e5path\u4ee5 \uff0f \u6216 \\ \u7ed3\u5c3e , \u5219\u4f1a\u8fd4\u56de\u7a7a\u503c . ( \u5b9e\u8d28\u5c31\u662f\u7edd\u5bf9\u8def\u5f84\u7684\u6700\u540e\u4e00\u4e2a a / b / c \u7ed3\u679c\u5c31\u4e3ac \u54ea\u6015c\u662f\u4e00\u4e2a\u76ee\u5f55 ) os . path . abspath ( path ) \u8fd4\u56depath\u89c4\u8303\u5316\u7684\u7edd\u5bf9\u8def\u5f84 os . path . getatime ( path ) \u8fd4\u56depath\u6240\u6307\u5411\u7684\u6587\u4ef6\u6216\u8005\u76ee\u5f55\u7684\u6700\u540e\u5b58\u53d6\u65f6\u95f4 os . path . getmtime ( path ) \u8fd4\u56depath\u6240\u6307\u5411\u7684\u6587\u4ef6\u6216\u8005\u76ee\u5f55\u7684\u6700\u540e\u4fee\u6539\u65f6\u95f4 os . path . getsize ( path ) \u8fd4\u56depath\u7684\u5927\u5c0f random\u6a21\u5757 \u00b6 import random print ( random . random ()) # -- (0,1) \u5927\u4e8e0\u4e14\u5c0f\u4e8e1\u4e4b\u95f4\u7684\u5c0f\u6570 print ( random . randint ( 1 , 3 )) # -- [1,3] \u5927\u4e8e\u7b49\u4e8e1\u4e14\u5c0f\u4e8e\u7b49\u4e8e3\u4e4b\u95f4\u7684\u6574\u6570 print ( random . randrange ( 1 , 3 )) # -- [1,3) \u5927\u4e8e\u7b49\u4e8e1\u4e14\u5c0f\u4e8e3\u4e4b\u95f4\u7684\u6574\u6570 print ( random . choice ([ 1 , '23' , [ 4 , 5 ]])) # -- 1\u6216\u800523\u6216\u8005[4,5] print ( random . sample ([ 1 , '23' , [ 4 , 5 ]], 2 )) # -- \u5217\u8868\u5143\u7d20\u4efb\u610f2\u4e2a\u7ec4\u5408 print ( random . uniform ( 1 , 3 )) # -- \u5927\u4e8e1\u5c0f\u4e8e3\u7684\u5c0f\u6570,\u59821.927109612082716 item = [ 1 , 3 , 5 , 7 , 9 ] random . shuffle ( item ) # -- \u6253\u4e71item\u7684\u987a\u5e8f,\u76f8\u5f53\u4e8e\"\u6d17\u724c\" print ( item ) \"\"\" 0.2236487025002597 3 2 1 [[4, 5], '23'] 2.904734587980278 [9, 3, 7, 1, 5] \"\"\" \u751f\u6210\u968f\u673a\u9a8c\u8bc1\u7801!!! import random def make_code ( n ): res = '' for _ in range ( n ): s1 = chr ( random . randint ( 65 , 90 )) s2 = str ( random . randint ( 0 , 9 )) res += random . choice ([ s1 , s2 ]) return res print ( make_code ( 9 )) # 42RIK6VTT time&datetime\u6a21\u5757 \u00b6 time \u00b6 \u65f6\u95f4\u5206\u4e3a\u4e09\u79cd\u683c\u5f0f \u65f6\u95f4\u6233 \u00b6 \u8ba1\u7b97\u65f6\u95f4\u95f4\u9694 \u65f6\u95f4\u6233. \u8868\u793a\u7684\u662f\u4ece1970\u5e741\u67081\u65e500:00:00\u5f00\u59cb\u6309\u79d2\u8ba1\u7b97\u7684\u504f\u79fb\u91cf import time start = time . time () time . sleep ( 3 ) end = time . time () print ( end - start ) # 3.0033159255981445 -- \u4e24\u4e2a\u65f6\u95f4\u6233\u76f8\u51cf \u683c\u5f0f\u5316\u65f6\u95f4 \u00b6 \u63a7\u5236\u663e\u793a\u7684 \u683c\u5f0f\u5316\u7684\u65f6\u95f4\u5b57\u7b26\u4e32 import time print ( time . strftime ( \"%Y-%m- %d %X \" )) # 2022-04-29 14:41:43 print ( time . strftime ( \"%Y-%m- %d %H:%M:%S %p\" )) # 2022-04-29 14:41:43 PM \u7ed3\u6784\u5316\u65f6\u95f4 \u00b6 \u4fbf\u4e8e\u53d6\u51fa\u65f6\u95f4\u7684\u5404\u4e2a\u90e8\u5206 \u65f6\u95f4\u5bf9\u8c61\uff5c\u7ed3\u6784\u5316\u7684\u65f6\u95f4 import time t = time . localtime () # -- \u672c\u5730\u65f6\u533a\u7684\u7ed3\u6784\u5316\u65f6\u95f4 # -- time.struct_time(tm_year=2022, tm_mon=9, tm_mday=26, tm_hour=20, tm_min=54, tm_sec=30, tm_wday=0, tm_yday=269, tm_isdst=0) print ( t ) print ( t . tm_hour ) # -- 14 \"\"\" \u8865\u5145:time.gmtime() UTC\u65f6\u533a\u7684\u7ed3\u6784\u5316\u65f6\u95f4 \"\"\" \u65f6\u95f4\u4e4b\u95f4\u76f8\u4e92\u8f6c\u6362 \u00b6 format_string \u683c\u5f0f\u5316\u65f6\u95f4 <===> struct_time \u7ed3\u6784\u5316\u65f6\u95f4 <===> timestamp\u65f6\u95f4\u6233 # -- \u5c06\u683c\u5f0f\u5316\u65f6\u95f4\u8f6c\u6362\u4e3a\u7ed3\u6784\u5316\u65f6\u95f4 time . strptime ( '2011-03-07' , '%Y- %d -%m' ) # -- \u5c06\u5f53\u524d\u7ed3\u6784\u5316\u65f6\u95f4\u8f6c\u6362\u4e3a\u683c\u5f0f\u5316\u65f6\u95f4 time . strftime ( '%Y' , time . localtime ()) # -- \u5c06\u5f53\u524d\u7684\u7ed3\u6784\u5316\u65f6\u95f4\u8f6c\u6362\u4e3a\u65f6\u95f4\u6233 time . mktime ( time . localtime ()) # -- \u5c06\u65f6\u95f4\u6233\u8f6c\u6362\u4e3a\u7ed3\u6784\u5316\u65f6\u95f4 time . localtime ( 123456789 ) time . gmtime ( 123456789 ) \"\"\" # -- \u83b7\u53d6\u65f6\u95f4 linux\u4e0a\u5c31\u662f\u8fd9\u6837\u7684 # \u5b83\u7b49\u540c\u4e8e time.strftime('%a %b %d %H:%M:%S %Y') time.asctime() # -- Sun Sep 11 00:43:43 2016 time.asctime(time.localtime()) time.ctime(123456789) \"\"\" time\u6a21\u5757\u7684\u5f0a\u7aef \u00b6 1> \u83b7\u53d6\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u65f6\u95f4\u9ebb\u70e6 \u200b2> \u65f6\u95f4\u6233\u4e0e\u683c\u5f0f\u5316\u65f6\u95f4\u4e4b\u95f4\u7684\u8f6c\u6362\u9ebb\u70e6 \u200b3> \u83b7\u53d6\u4e4b\u524d\u6216\u8005\u672a\u6765\u7684\u65f6\u95f4\u9ebb\u70e6 datetime \u00b6 import datetime # -- \u83b7\u53d6\u5f53\u524d\u683c\u5f0f\u5316\u65f6\u95f4 print ( datetime . datetime . now ()) # 2022-04-30 06:08:55.835488 # -- \u5c06\u65f6\u95f4\u6233\u8f6c\u6362\u4e3a\u683c\u5f0f\u5316\u65f6\u95f4 print ( datetime . datetime . fromtimestamp ( 123453567 )) # 1973-11-30 04:39:27 # -- \u83b7\u53d63\u5929\u540e\u7684\u65f6\u95f4 print ( datetime . datetime . now () + datetime . timedelta ( days = 3 )) # 2022-05-03 06:12:27.911605 # -- \u7075\u6d3b\u7684\u66ff\u6362\u65f6\u95f4\u7684\u4efb\u610f\u90e8\u5206 s = datetime . datetime . now () print ( s . replace ( year = 2020 )) shutil\u6a21\u5757!! \u00b6 \u9ad8\u7ea7\u7684 \u6587\u4ef6\u3001\u6587\u4ef6\u5939\u3001\u538b\u7f29\u5305 \u5904\u7406\u6a21\u5757 shutil.copyfileobj(fsrc, fdst[, length]) !!! \u5c06\u6587\u4ef6\u5185\u5bb9\u62f7\u8d1d\u5230\u53e6\u4e00\u4e2a\u6587\u4ef6\u4e2d import shutil # -- shutil.copyfileobj(open('old.xml', 'r'), open('new.xml', 'w')) \u4e0d\u59a5 # -- \u5b9e\u73b0\u81ea\u52a8close\u6587\u4ef6 with open ( 'old.xml' , 'r' ) as read_f , open ( 'new.xml' , 'w' ) as write_f : shutil . copyfileobj ( read_f , write_f ) shutil.copyfile(src, dst) !!! \u62f7\u8d1d\u6587\u4ef6 shutil . copyfile ( 'f1.log' , 'f2.log' ) # -- \u76ee\u6807\u6587\u4ef6\u4e0d\u9700\u4e8b\u5148\u5b58\u5728 shutil.copymode(src, dst) \u4ec5\u62f7\u8d1d\u6743\u9650. \u5185\u5bb9\u3001\u7ec4\u3001\u7528\u6237\u5747\u4e0d\u53d8 shutil . copymode ( 'f1.log' , 'f2.log' ) # -- \u76ee\u6807\u6587\u4ef6\u5fc5\u987b\u5b58\u5728,\u4ec5\u62f7\u8d1d\u6743\u9650 shutil.copystat(src, dst) \u4ec5\u62f7\u8d1d\u72b6\u6001\u7684\u4fe1\u606f, \u5305\u62ec: mode bits, atime, mtime, flags shutil . copystat ( 'f1.log' , 'f2.log' ) # -- \u76ee\u6807\u6587\u4ef6\u5fc5\u987b\u5b58\u5728 shutil.copytree(src, dst, symlinks=False, ignore=None) !!! \u9012\u5f52\u62f7\u8d1d\u6587\u4ef6\u5939 # dst\u76ee\u6807\u76ee\u5f55\u4e0d\u80fd\u5148\u5b58\u5728,\u6ce8\u610f\u5bf9folder2\u76ee\u5f55\u7236\u7ea7\u76ee\u5f55\u8981\u6709\u53ef\u5199\u6743\u9650; # ignore\u7684\u610f\u601d\u662f\u6392\u9664 '*.pyc', 'tmp*' \u6240\u6709.pyc\u7ed3\u5c3e\u7684,tmp\u5f00\u5934\u7684 # \u9ed8\u8ba4copy_function = shutil.copy2 shutil . copytree ( 'folder1' , 'folder2' , ignore = shutil . ignore_patterns ( '*.pyc' , 'tmp*' )) shutil.rmtree(path[, ignore_errors[, onerror]]) !!! \u9012\u5f52\u5220\u9664\u6587\u4ef6\u5939 shutil . rmtree ( 'folder1' ) shutil.move(src, dst) !!! \u9012\u5f52\u7684\u79fb\u52a8\u6587\u4ef6\u5939,\u5b83\u7c7b\u4f3cmv\u547d\u4ee4,\u526a\u5207\u64cd\u4f5c \u53ef\u4ee5\u79fb\u52a8\u6587\u4ef6!! shutil . move ( 'folder1' , 'folder3' ) # -- eg:\u628a1.txt\u6587\u4ef6\u79fb\u52a8\u5230new\u6587\u4ef6\u5939\u4e0b. shutil . move ( f \"a/b/c/1.txt\" , f \"/Users/One_Piece/Desktop/new/\" ) shutil.make_archive(base_name, format,...) !!! \u521b\u5efa\u538b\u7f29\u5305\u5e76\u8fd4\u56de\u6587\u4ef6\u8def\u5f84, \u4f8b\u5982: zip\u3001tar import shutil import tarfile \"\"\" base_name:\u538b\u7f29\u5305\u7684\u6587\u4ef6\u540d,\u4e5f\u53ef\u4ee5\u662f\u538b\u7f29\u5305\u7684\u8def\u5f84 \u82e5\u662f\u6587\u4ef6\u540d\u65f6,\u538b\u7f29\u5305\u4fdd\u5b58\u81f3\u5f53\u524d\u76ee\u5f55;\u82e5\u662f\u8def\u5f84,\u4fdd\u5b58\u81f3\u6307\u5b9a\u8def\u5f84 format:\u538b\u7f29\u5305\u79cd\u7c7b eg: gztar\u6253\u5305\u538b\u7f29 root_dir:\u8981\u538b\u7f29\u7684\u6587\u4ef6\u5939\u7684\u8def\u5f84(\u9ed8\u8ba4\u5f53\u524d\u76ee\u5f55) \"\"\" # -- \u5c06 /data \u4e0b\u7684\u6587\u4ef6\u6253\u5305\u653e\u7f6e\u5f53\u524d\u7a0b\u5e8f\u76ee\u5f55 shutil . make_archive ( \"data_bak\" , 'gztar' , root_dir = '/data' ) # -- \u89e3\u538b t = tarfile . open ( 'data_bak.tar.gz' , 'r' ) t . extractall ( '/dc' ) # -- \u89e3\u538b\u5230'/dc'\u6587\u4ef6\u5939\u4e0b t . close () shelve\u6a21\u5757 \u00b6 \u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316\u7684. \u5b83\u652f\u6301\u6240\u6709\u7684python\u7c7b\u578b,\u6240\u4ee5\u53ea\u80fd\u5728python\u91cc\u9762\u7528,\u4f46\u6bd4pickle\u6a21\u5757\u7b80\u5355. \u5b83\u53ea\u6709\u4e00\u4e2aopen\u53c2\u6570,\u8fd4\u56de\u7c7b\u4f3c\u5b57\u5178\u7684\u5bf9\u8c61,\u53ef\u8bfb\u53ef\u5199; key\u5fc5\u987b\u4e3a\u5b57\u7b26\u4e32,\u503c\u53ef\u4ee5\u662fpython\u652f\u6301\u7684\u6240\u6709\u6570\u636e\u7c7b\u578b import shelve # -- \u57fa\u672c\u4e0a\u4e0d\u4f1a\u7528\u7684(\uffe3\u25bd\uffe3),\u90a3\u5c31\u653e\u90fd\u5403\u7070\u5427!!! d = shelve . open ( 'db.txt' ) # -- \u4e0d\u7528\u4e8b\u5148\u5b58\u5728 dic_1 = { 'pwd' : 'admin123' , 'age' : 18 , 'sex' : 'male' } # -- \u5185\u5b58\u4e2d\u53ef\u80fd\u9700\u8981\u5e8f\u5217\u5316\u7684\u5b57\u5178 # -- \u5b58 d [ 'egon' ] = dic_1 d [ 'dc' ] = { 'pwd' : 'admin456' , 'age' : 20 , 'sex' : 'male' } # -- \u53d6 print ( d [ 'egon' ][ 'pwd' ]) # admin123 d . close () # -- \u4f1a\u65b0\u751f\u6210\u4e00\u4e2adb.txt.db\u6587\u4ef6,window\u548cmac\u53ef\u80fd\u4e0d\u4e00\u6837 # -- writeback\u9ed8\u8ba4\u4e3aFalse d2 = shelve . open ( 'db.txt' , writeback = True ) print ( d2 [ 'dc' ][ 'age' ]) # 20 # -- writeback\u4e3aTrue,\u4fee\u6539\u7684\u5185\u5bb9\u624d\u4f1a\u5199\u56de\u6587\u4ef6!!\u5426\u5219\u4e0d\u4f1a\u53d8\uff01 d2 [ 'dc' ][ 'age' ] = 18 d2 . close () xml\u6a21\u5757 \u00b6 xml\u662f\u5b9e\u73b0\u4e0d\u540c\u8bed\u8a00\u6216\u7a0b\u5e8f\u4e4b\u95f4\u8fdb\u884c\u6570\u636e\u4ea4\u6362\u7684\u534f\u8bae, \u8ddfjson\u5dee\u4e0d\u591a,\u4f46json\u4f7f\u7528\u8d77\u6765\u66f4\u7b80\u5355. \u4e0d\u8fc7\u5728json\u8fd8\u6ca1\u8bde\u751f\u7684\u9ed1\u6697\u5e74\u4ee3,\u5927\u5bb6\u53ea\u80fd\u9009\u62e9\u7528xml. \u81f3\u4eca\u5f88\u591a\u4f20\u7edf\u516c\u53f8\u5982\u91d1\u878d\u884c\u4e1a\u7684\u5f88\u591a\u7cfb\u7edf\u7684\u63a5\u53e3\u8fd8\u4e3b\u8981\u662fxml \u256e(\u256f\u25bd\u2570)\u256d \u8fd8\u662f\u8981\u4e86\u89e3\u54c8.. xml\u7684\u683c\u5f0f\u5982\u4e0b: \u901a\u8fc7<>\u8282\u70b9\u6765\u533a\u522b\u6570\u636e\u7ed3\u6784\u7684: (\u6807\u7b7e \u6807\u7b7e\u5c5e\u6027 \u6807\u7b7e\u5305\u542b\u7684\u6587\u672c\u5185\u5bb9\u6216\u5b50\u6807\u7b7e) <?xml version=\"1.0\"?> <data> <country name= \"Liechtenstein\" > <rank updated= \"yes\" > 2 </rank> <year> 2008 </year> <gdppc> 141100 </gdppc> <neighbor name= \"Austria\" direction= \"E\" /> <neighbor name= \"Switzerland\" direction= \"W\" /> </country> <country name= \"Singapore\" > <rank updated= \"yes\" > 5 </rank> <year> 2011 </year> <gdppc> 59900 </gdppc> <neighbor name= \"Malaysia\" direction= \"N\" /> </country> <country name= \"Panama\" > <rank updated= \"yes\" > 69 </rank> <year> 2011 </year> <gdppc> 13600 </gdppc> <neighbor name= \"Costa Rica\" direction= \"W\" /> <neighbor name= \"Colombia\" direction= \"E\" /> </country> </data> <!-- \u5c06xml\u6570\u636e\u7528json\u683c\u5f0f\u8868\u793a data = { \"Liechtenstein\": { \"rank\": { \"updated\": \"TRUE\", \"text\": 2 }, \"year\": { \"text\": 2008 } }, \"Singapore\": {}, \"Panama\": {} } --> xml\u6587\u6863\u7684\u589e\u5220\u6539\u67e5 from cgitb import text import xml.etree.ElementTree as ET tree = ET . parse ( 'xmltest.xml' ) root = tree . getroot () # \u4e00\u4e0a\u6765\u5c31\u62ff\u5230\u4e00\u4e2a\u6839\u8282\u70b9 # -- \u5bf9\u4e8e\u4efb\u4f55\u6807\u7b7e\u90fd\u6709\u4e09\u4e2a\u7279\u5f81: \u6807\u7b7e\u540d\u3001\u6807\u7b7e\u5c5e\u6027\u3001\u6807\u7b7e\u7684\u6587\u672c\u5185\u5bb9 print ( root . tag , root . attrib , root . text ) # data {} \"\"\" # --- >>>1.\u67e5<<< \"\"\" # -- \u67e5\u627e\u6807\u7b7e! \u4e09\u79cd\u60c5\u51b5 # - \u60c5\u51b5\u4e00:[\u5168\u6587\u641c\u7d22,\u627e\u5230\u6240\u6709] # <_elementtree._element_iterator object at 0x7fe54477f2c0> \u4e00\u4e2a\u8fed\u4ee3\u5668\u5bf9\u8c61 print ( root . iter ( 'year' )) # [<Element 'year' at 0x7ff22a097c70>, <Element 'year' at 0x7ff22a097e50>, <Element 'year' at 0x7ff22a09a040>] print ( list ( root . iter ( 'year' ))) # year {} 2008 # year {} 2011 # year {} 2011 for year in root . iter ( 'year' ): print ( year . tag , year . attrib , year . text ) # - \u60c5\u51b5\u4e8c:[\u5728root\u7684\u5b50\u8282\u70b9\u4e2d\u627e,\u53ea\u627e\u7b2c\u4e00\u4e2a] print ( root . find ( 'year' )) # None print ( root . find ( 'country' )) # <Element 'country' at 0x7f928576cbd0> print ( root . find ( 'country' ) . attrib ) # {'name': 'Liechtenstein'} # - \u60c5\u51b5\u4e09:[\u5728root\u7684\u5b50\u8282\u70b9\u4e2d\u627e,\u627e\u6240\u6709] # [<Element 'country' at 0x7fdf53798bd0>, <Element 'country' at 0x7fdf53798db0>, <Element 'country' at 0x7fdf53798f40>] print ( root . findall ( 'country' )) # [{'name': 'Liechtenstein'}, {'name': 'Singapore'}, {'name': 'Panama'}] print ([ country . attrib for country in root . findall ( 'country' )]) # -- \u904d\u5386\u6574\u4e2a\u6587\u6863 # \u6839\u636e\u5f53\u524dxml\u6587\u4ef6\u7684\u5e03\u5c40 \u6548\u679c\u7b49\u540c\u4e8eroot.iter('country') ; root.findall('country') ''' \u56fd\u5bb6{'name': 'Liechtenstein'} rank {'updated': 'yes'} 2 year {} 2008 gdppc {} 141100 neighbor {'name': 'Austria', 'direction': 'E'} None neighbor {'name': 'Switzerland', 'direction': 'W'} None \u56fd\u5bb6{'name': 'Singapore'} rank {'updated': 'yes'} 5 ... ... ... ''' for country in root : # \u5b83\u9ed8\u8ba4\u662f\u627eroot\u6240\u6709\u7684\u5b50\u8282\u70b9 print ( '\u56fd\u5bb6 %s ' % country . attrib ) for item in country : print ( item . tag , item . attrib , item . text ) \"\"\" # --- >>>2.\u6539<<< \"\"\" for year in root . iter ( 'year' ): print ( year . tag , year . attrib , year . text ) # \u6ce8\u610f\u54e6,\u8fd9\u91cc\u53ea\u662f\u5728\u5185\u5b58\u4e2d\u5b8c\u6210\u4e86\u4fee\u6539... year . attrib = { 'updated' : 'yes' } # \u4fee\u6539\u6587\u4ef6\u7684\u503c \u4e5f\u5fc5\u987b\u662fstr\u7c7b\u578b year . text = str ( int ( year . text ) + 1 ) # \u4ece\u6587\u4ef6\u91cc\u53d6\u51fa\u6765\u7684\u6570\u636e\u80af\u5b9a\u662fstr\u7c7b\u578b tree . write ( 'b.xml' ) # \u5199\u5230\u786c\u76d8\u91cc\u53bb \u5199\u5165\u4e86\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6b.xml,\u4e0d\u5fc5\u4e8b\u5148\u5b58\u5728 \"\"\" # --- >>>3.\u589e<<< \"\"\" # \u5728rank\u6807\u7b7e\u7684\u6587\u672c\u5185\u5bb9\u5927\u4e8e50\u7684country\u8282\u70b9\u4e0b\u52a0\u4e00\u4e2aegon\u6807\u7b7e # \u591a\u6b21\u91cd\u590d\u8fd0\u884c\u8fd9\u6bb5\u4ee3\u7801,\u53ea\u4f1a\u589e\u52a0\u4e00\u6b21 for country in root : rank = country . find ( 'rank' ) # \u627e\u5230\u7b26\u5408\u6761\u4ef6\u7684\u56fd\u5bb6 if int ( rank . text ) > 50 : tag = ET . Element ( 'egon' ) # \u9020\u4e00\u4e2aegon\u6807\u7b7e tag . attrib = { 'updated' : 'yes' } tag . text = 'yyds' country . append ( tag ) # \u6dfb\u52a0\u6807\u7b7e tree . write ( 'b.xml' ) # \u5c06\u5185\u5b58\u4e2d\u7684\u4fee\u6539\u5199\u5165\u786c\u76d8 \"\"\" # --- >>>4.\u5220<<< \"\"\" for country in root : tag = country . find ( 'egon' ) # print(tag, bool(tag)) # -- \u54ea\u6015tag\u6709\u503c,\u5176bool\u503c\u4e5f\u4e3aFalse \u5f88\u662f\u5947\u602a.. # \u6240\u4ee5\u4e0d\u80fd if tag \u76f4\u63a5\u5224\u65ad! if tag is not None : country . remove ( tag ) # \u79fb\u9664\u6807\u7b7e tree . write ( 'b.xml' ) csv\u6a21\u5757 \u00b6 \u8bfb\u53d6csv\u6587\u4ef6 \"\"\" \u4e66\u540d,\u4f5c\u8005,\u51fa\u7248\u793e,\u4ef7\u683c \u7cbe\u901ascrapy\u7f51\u7edc\u722c\u866b,\u5218\u7855,\u6e05\u534e\u5927\u5b66\u51fa\u7248\u793e,46.00 \u7b97\u6cd5\u5bfc\u8bba,Charles E.Leiserson,\u4eba\u6c11\u90ae\u7535\u51fa\u7248\u793e,85.00 Python\u7070\u5e3d\u5b50,Justin Seitz,\u7535\u5b50\u5de5\u4e1a\u51fa\u7248\u793e,39.00 ... ... \"\"\" import csv # -- \u9ed8\u8ba4\u53ea\u8bfb\u6a21\u5f0f\u6253\u5f00 rf = open ( 'books.csv' ) # -- \u9ed8\u8ba4\u5206\u9694\u7b26\u662f\u9017\u53f7 \u521b\u5efa\u4e00\u4e2areader\u5bf9\u8c61(\u662f\u53ef\u8fed\u4ee3\u7684) reader = csv . reader ( rf , delimiter = ';' ) # -- \u6bcf\u4e00\u884c\u7684\u6570\u636e\u90fd\u4f1a\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d for book in reader : print ( book ) \u5199\u5165csv\u6587\u4ef6 import csv wf = open ( 'demo.csv' , 'w' ) # -- \u8fd9\u91cc\u6211\u4eec\u7528\u7a7a\u683c\u4f5c\u4e3a\u5206\u9694\u7b26 writer = csv . writer ( wf , delimiter = ' ' ) # -- \u5199\u5165\u4e00\u884c\u6570\u636e writer . writerow ([ 'x' , 'y' , 'z' ]) writer . writerow ([ '1' , '2' , '3' ]) writer . writerow ([ '9' , '8' , '7' ]) # -- flush()\u65b9\u6cd5\u7528\u6765\u5237\u65b0\u7f13\u51b2\u533a\u7684,\u5373\u5c06\u7f13\u51b2\u533a\u4e2d\u7684\u6570\u636e\u7acb\u523b\u5199\u5165\u6587\u4ef6,\u540c\u65f6\u6e05\u7a7a\u7f13\u51b2\u533a. # \u4e00\u822c\u60c5\u51b5\u4e0b,\u6587\u4ef6\u5173\u95ed\u4f1a\u81ea\u52a8\u5237\u65b0\u7f13\u51b2\u533a wf . flush () \u6848\u4f8b: \u5c06\u4ef7\u683c\u9ad8\u4e8e80.00\u7684\u4e66\u8bb0\u5f55\u5b58\u50a8\u5230\u53e6\u4e00\u4e2acsv\u6587\u4ef6\u4e2d import csv with open ( 'books.csv' ) as rf : reader = csv . reader ( rf ) # -- \u5148\u8bfb\u53d6\u5934\u90e8\u4fe1\u606f headers = next ( reader ) with open ( 'books_out.csv' , 'w' ) as wf : writer = csv . writer ( wf ) writer . writerow ( headers ) for book in reader : price = book [ - 2 ] # -- \u722c\u53d6\u7684\u4e66\u7c4d\u4ef7\u683c\u4fe1\u606f\u5b57\u6bb5\u53ef\u80fd\u4e3a\u7a7a if price and float ( price ) >= 80.00 : writer . writerow ( book ) configparser\u6a21\u5757 \u00b6 \u4e13\u95e8\u7528\u4e8e\u89e3\u6790\u914d\u7f6e\u6587\u4ef6\u7684. eg: a.ini \u3001a.cfg\u3001a.cnf \u6ce8\u610f\u914d\u7f6e\u6587\u4ef6 config.ini \u5185\u5bb9\u7684\u683c\u5f0f: # \u6ce8\u91ca1 ; \u6ce8\u91ca2 [section1] # section\u6807\u9898 # options\u914d\u7f6e\u9879 k=v k1 = v1 user = egon age = 18 is_admin = true salary = 31 [section2] k1 = v1 configparser\u6a21\u5757\u5bf9\u914d\u7f6e\u6587\u4ef6 config.ini \u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c import configparser config = configparser . ConfigParser () config . read ( 'config.ini' ) # -- \u67e5\u770b\u6240\u6709\u7684\u6807\u9898 print ( config . sections ()) #['section1', 'section2'] # -- \u67e5\u770b\u67d0\u4e2a\u6807\u9898\u4e0b\u9762\u6240\u6709\u7684\u914d\u7f6e\u9879 # \u53ea\u53d6\u4e86key\u503c print ( config . options ( 'section1' )) # ['k1', 'user', 'age', 'is_admin', 'salary'] # \u53d6key\u548cvalue print ( config . items ( 'section1' )) # [('k1', 'v1'), ('user', 'egon'), ('age', '18'), ('is_admin', 'true'), ('salary', '31')] # -- \u67e5\u770b\u6807\u9898section1\u4e0buser\u7684\u503c # \u7c7b\u578b\u662fstr\u7c7b\u578b res_str = config . get ( 'section1' , 'age' ) print ( res_str , type ( res_str )) # 18 <class 'str'> # \u7c7b\u578b\u662fint\u7c7b\u578b res_int = config . getint ( 'section1' , 'age' ) print ( res_int , type ( res_int )) # 18 <class 'int'> # \u7c7b\u578b\u662ffloat\u7c7b\u578b res_float = config . getfloat ( 'section1' , 'age' ) print ( res_float , type ( res_float )) # 18.0 <class 'float'> # \u7c7b\u578b\u662fbool\u7c7b\u578b res_bool = config . getboolean ( 'section1' , 'is_admin' ) print ( res_bool , type ( res_bool )) # True <class 'bool'> # -- \u5220\u9664\u64cd\u4f5c \u7565..(\u61d2\u5f97\u5f04\u4e86 \u9047\u5230\u4e86\u770begon\u7684\u535a\u5ba2\u5427 (\u00b4\u25bd\uff40)) # https://www.cnblogs.com/linhaifeng/articles/6384466.html#_label9","title":"\u5e38\u7528\u6a21\u5757"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/09_%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/#os","text":"os . environ \u83b7\u53d6\u7cfb\u7edf\u73af\u5883\u53d8\u91cf os . name \u8f93\u51fa\u5b57\u7b26\u4e32\u6307\u793a\u5f53\u524d\u4f7f\u7528\u5e73\u53f0 . win -> \"nt\" ; Linux -> \"posix\" os . sep \u8f93\u51fa\u64cd\u4f5c\u7cfb\u7edf\u7279\u5b9a\u7684\u8def\u5f84\u5206\u9694\u7b26 . win\u4e0b\u4e3a \" \\\\ \" , Linux\u4e0b\u4e3a \"/\" os . linesep \u8f93\u51fa\u5f53\u524d\u5e73\u53f0\u4f7f\u7528\u7684\u884c\u7ec8\u6b62\u7b26 . win\u4e0b\u4e3a \" \\t\\n \" , Linux\u4e0b\u4e3a \" \\n \" os . pathsep \u8f93\u51fa\u7528\u4e8e\u5206\u5272\u6587\u4ef6\u8def\u5f84\u7684\u5b57\u7b26\u4e32 win\u4e0b\u4e3a \";\" , Linux\u4e0b\u4e3a \":\" os . curdir \u8fd4\u56de\u5f53\u524d\u76ee\u5f55 : ( '.' ) os . pardir \u83b7\u53d6\u5f53\u524d\u76ee\u5f55\u7684\u7236\u76ee\u5f55\u5b57\u7b26\u4e32\u540d : ( '..' ) os . getcwd () \u83b7\u53d6\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55 , \u5373\u5f53\u524dpython\u811a\u672c\u5de5\u4f5c\u7684\u76ee\u5f55\u8def\u5f84 os . stat ( 'path/filename' ) \u83b7\u53d6\u6587\u4ef6 / \u76ee\u5f55\u4fe1\u606f os . chdir ( \"dirname\" ) \u6539\u53d8\u5f53\u524d\u811a\u672c\u5de5\u4f5c\u76ee\u5f55 ; \u76f8\u5f53\u4e8eshell\u4e0bcd os . mkdir ( 'dirname' ) \u751f\u6210\u5355\u7ea7\u76ee\u5f55 ; \u76f8\u5f53\u4e8eshell\u4e2dmkdir dirname os . makedirs ( 'dirname1/dirname2' ) \u53ef\u751f\u6210\u591a\u5c42\u9012\u5f52\u76ee\u5f55 os . remove ( \"filename\" ) \u5220\u9664\u4e00\u4e2a\u6587\u4ef6 os . rmdir ( 'dirname' ) \u5220\u9664\u5355\u7ea7\u7a7a\u76ee\u5f55 , \u82e5\u76ee\u5f55\u4e0d\u4e3a\u7a7a\u5219\u65e0\u6cd5\u5220\u9664 , \u62a5\u9519 ; \u76f8\u5f53\u4e8eshell\u4e2drmdir dirname os . removedirs ( 'dirname1' ) \u82e5\u76ee\u5f55\u4e3a\u7a7a , \u5219\u5220\u9664 , \u5e76\u9012\u5f52\u5230\u4e0a\u4e00\u7ea7\u76ee\u5f55 , \u82e5\u4e5f\u4e3a\u7a7a , \u5219\u5220\u9664 . \u4ee5\u6b64\u7c7b\u63a8 os . listdir ( 'dirname' ) \u4ee5\u5217\u8868\u65b9\u5f0f\u8fd4\u56de\u6307\u5b9a\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\u548c\u5b50\u76ee\u5f55 , \u5305\u62ec\u9690\u85cf\u6587\u4ef6 os . rename ( \"oldname\" , \"newname\" ) \u91cd\u547d\u540d\u6587\u4ef6 / \u76ee\u5f55 os . system ( \"bash command\" ) \u8fd0\u884cshell\u547d\u4ee4 , \u7ed3\u679c\u4f1a\u5728\u63a7\u5236\u53f0\u76f4\u63a5\u6253\u5370 os . path . join ( path1 [, path2 [, ... ]]) \u5c06\u591a\u4e2a\u8def\u5f84\u7ec4\u5408\u540e\u8fd4\u56de os . path . isfile ( path ) \u82e5path\u662f\u4e00\u4e2a\u5b58\u5728\u7684\u6587\u4ef6 , \u5219\u8fd4\u56deTrue ; \u5426\u5219\u8fd4\u56deFalse os . path . isdir ( path ) \u82e5path\u662f\u4e00\u4e2a\u5b58\u5728\u7684\u76ee\u5f55 , \u5219\u8fd4\u56deTrue ; \u5426\u5219\u8fd4\u56deFalse os . path . exists ( path ) \u5982\u679cpath\u5b58\u5728 , \u8fd4\u56deTrue ; \u5982\u679cpath\u4e0d\u5b58\u5728 , \u8fd4\u56deFalse os . path . isabs ( path ) \u5982\u679cpath\u662f\u7edd\u5bf9\u8def\u5f84 , \u8fd4\u56deTrue os . path . split ( path ) \u5c06path\u5206\u5272\u6210\u76ee\u5f55\u548c\u6587\u4ef6\u540d\u4e8c\u5143\u7ec4\u8fd4\u56de os . path . dirname ( path ) \u8fd4\u56depath\u7684\u76ee\u5f55 . \u5176\u5b9e\u5c31\u662fos . path . split ( path ) \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 os . path . basename ( path ) \u8fd4\u56depath\u7684\u6587\u4ef6\u540d . \u82e5path\u4ee5 \uff0f \u6216 \\ \u7ed3\u5c3e , \u5219\u4f1a\u8fd4\u56de\u7a7a\u503c . ( \u5b9e\u8d28\u5c31\u662f\u7edd\u5bf9\u8def\u5f84\u7684\u6700\u540e\u4e00\u4e2a a / b / c \u7ed3\u679c\u5c31\u4e3ac \u54ea\u6015c\u662f\u4e00\u4e2a\u76ee\u5f55 ) os . path . abspath ( path ) \u8fd4\u56depath\u89c4\u8303\u5316\u7684\u7edd\u5bf9\u8def\u5f84 os . path . getatime ( path ) \u8fd4\u56depath\u6240\u6307\u5411\u7684\u6587\u4ef6\u6216\u8005\u76ee\u5f55\u7684\u6700\u540e\u5b58\u53d6\u65f6\u95f4 os . path . getmtime ( path ) \u8fd4\u56depath\u6240\u6307\u5411\u7684\u6587\u4ef6\u6216\u8005\u76ee\u5f55\u7684\u6700\u540e\u4fee\u6539\u65f6\u95f4 os . path . getsize ( path ) \u8fd4\u56depath\u7684\u5927\u5c0f","title":"OS\u6a21\u5757"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/09_%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/#random","text":"import random print ( random . random ()) # -- (0,1) \u5927\u4e8e0\u4e14\u5c0f\u4e8e1\u4e4b\u95f4\u7684\u5c0f\u6570 print ( random . randint ( 1 , 3 )) # -- [1,3] \u5927\u4e8e\u7b49\u4e8e1\u4e14\u5c0f\u4e8e\u7b49\u4e8e3\u4e4b\u95f4\u7684\u6574\u6570 print ( random . randrange ( 1 , 3 )) # -- [1,3) \u5927\u4e8e\u7b49\u4e8e1\u4e14\u5c0f\u4e8e3\u4e4b\u95f4\u7684\u6574\u6570 print ( random . choice ([ 1 , '23' , [ 4 , 5 ]])) # -- 1\u6216\u800523\u6216\u8005[4,5] print ( random . sample ([ 1 , '23' , [ 4 , 5 ]], 2 )) # -- \u5217\u8868\u5143\u7d20\u4efb\u610f2\u4e2a\u7ec4\u5408 print ( random . uniform ( 1 , 3 )) # -- \u5927\u4e8e1\u5c0f\u4e8e3\u7684\u5c0f\u6570,\u59821.927109612082716 item = [ 1 , 3 , 5 , 7 , 9 ] random . shuffle ( item ) # -- \u6253\u4e71item\u7684\u987a\u5e8f,\u76f8\u5f53\u4e8e\"\u6d17\u724c\" print ( item ) \"\"\" 0.2236487025002597 3 2 1 [[4, 5], '23'] 2.904734587980278 [9, 3, 7, 1, 5] \"\"\" \u751f\u6210\u968f\u673a\u9a8c\u8bc1\u7801!!! import random def make_code ( n ): res = '' for _ in range ( n ): s1 = chr ( random . randint ( 65 , 90 )) s2 = str ( random . randint ( 0 , 9 )) res += random . choice ([ s1 , s2 ]) return res print ( make_code ( 9 )) # 42RIK6VTT","title":"random\u6a21\u5757"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/09_%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/#timedatetime","text":"","title":"time&amp;datetime\u6a21\u5757"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/09_%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/#time","text":"\u65f6\u95f4\u5206\u4e3a\u4e09\u79cd\u683c\u5f0f","title":"time"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/09_%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/#_1","text":"\u8ba1\u7b97\u65f6\u95f4\u95f4\u9694 \u65f6\u95f4\u6233. \u8868\u793a\u7684\u662f\u4ece1970\u5e741\u67081\u65e500:00:00\u5f00\u59cb\u6309\u79d2\u8ba1\u7b97\u7684\u504f\u79fb\u91cf import time start = time . time () time . sleep ( 3 ) end = time . time () print ( end - start ) # 3.0033159255981445 -- \u4e24\u4e2a\u65f6\u95f4\u6233\u76f8\u51cf","title":"\u65f6\u95f4\u6233"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/09_%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/#_2","text":"\u63a7\u5236\u663e\u793a\u7684 \u683c\u5f0f\u5316\u7684\u65f6\u95f4\u5b57\u7b26\u4e32 import time print ( time . strftime ( \"%Y-%m- %d %X \" )) # 2022-04-29 14:41:43 print ( time . strftime ( \"%Y-%m- %d %H:%M:%S %p\" )) # 2022-04-29 14:41:43 PM","title":"\u683c\u5f0f\u5316\u65f6\u95f4"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/09_%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/#_3","text":"\u4fbf\u4e8e\u53d6\u51fa\u65f6\u95f4\u7684\u5404\u4e2a\u90e8\u5206 \u65f6\u95f4\u5bf9\u8c61\uff5c\u7ed3\u6784\u5316\u7684\u65f6\u95f4 import time t = time . localtime () # -- \u672c\u5730\u65f6\u533a\u7684\u7ed3\u6784\u5316\u65f6\u95f4 # -- time.struct_time(tm_year=2022, tm_mon=9, tm_mday=26, tm_hour=20, tm_min=54, tm_sec=30, tm_wday=0, tm_yday=269, tm_isdst=0) print ( t ) print ( t . tm_hour ) # -- 14 \"\"\" \u8865\u5145:time.gmtime() UTC\u65f6\u533a\u7684\u7ed3\u6784\u5316\u65f6\u95f4 \"\"\"","title":"\u7ed3\u6784\u5316\u65f6\u95f4"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/09_%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/#_4","text":"format_string \u683c\u5f0f\u5316\u65f6\u95f4 <===> struct_time \u7ed3\u6784\u5316\u65f6\u95f4 <===> timestamp\u65f6\u95f4\u6233 # -- \u5c06\u683c\u5f0f\u5316\u65f6\u95f4\u8f6c\u6362\u4e3a\u7ed3\u6784\u5316\u65f6\u95f4 time . strptime ( '2011-03-07' , '%Y- %d -%m' ) # -- \u5c06\u5f53\u524d\u7ed3\u6784\u5316\u65f6\u95f4\u8f6c\u6362\u4e3a\u683c\u5f0f\u5316\u65f6\u95f4 time . strftime ( '%Y' , time . localtime ()) # -- \u5c06\u5f53\u524d\u7684\u7ed3\u6784\u5316\u65f6\u95f4\u8f6c\u6362\u4e3a\u65f6\u95f4\u6233 time . mktime ( time . localtime ()) # -- \u5c06\u65f6\u95f4\u6233\u8f6c\u6362\u4e3a\u7ed3\u6784\u5316\u65f6\u95f4 time . localtime ( 123456789 ) time . gmtime ( 123456789 ) \"\"\" # -- \u83b7\u53d6\u65f6\u95f4 linux\u4e0a\u5c31\u662f\u8fd9\u6837\u7684 # \u5b83\u7b49\u540c\u4e8e time.strftime('%a %b %d %H:%M:%S %Y') time.asctime() # -- Sun Sep 11 00:43:43 2016 time.asctime(time.localtime()) time.ctime(123456789) \"\"\"","title":"\u65f6\u95f4\u4e4b\u95f4\u76f8\u4e92\u8f6c\u6362"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/09_%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/#time_1","text":"1> \u83b7\u53d6\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u65f6\u95f4\u9ebb\u70e6 \u200b2> \u65f6\u95f4\u6233\u4e0e\u683c\u5f0f\u5316\u65f6\u95f4\u4e4b\u95f4\u7684\u8f6c\u6362\u9ebb\u70e6 \u200b3> \u83b7\u53d6\u4e4b\u524d\u6216\u8005\u672a\u6765\u7684\u65f6\u95f4\u9ebb\u70e6","title":"time\u6a21\u5757\u7684\u5f0a\u7aef"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/09_%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/#datetime","text":"import datetime # -- \u83b7\u53d6\u5f53\u524d\u683c\u5f0f\u5316\u65f6\u95f4 print ( datetime . datetime . now ()) # 2022-04-30 06:08:55.835488 # -- \u5c06\u65f6\u95f4\u6233\u8f6c\u6362\u4e3a\u683c\u5f0f\u5316\u65f6\u95f4 print ( datetime . datetime . fromtimestamp ( 123453567 )) # 1973-11-30 04:39:27 # -- \u83b7\u53d63\u5929\u540e\u7684\u65f6\u95f4 print ( datetime . datetime . now () + datetime . timedelta ( days = 3 )) # 2022-05-03 06:12:27.911605 # -- \u7075\u6d3b\u7684\u66ff\u6362\u65f6\u95f4\u7684\u4efb\u610f\u90e8\u5206 s = datetime . datetime . now () print ( s . replace ( year = 2020 ))","title":"datetime"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/09_%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/#shutil","text":"\u9ad8\u7ea7\u7684 \u6587\u4ef6\u3001\u6587\u4ef6\u5939\u3001\u538b\u7f29\u5305 \u5904\u7406\u6a21\u5757 shutil.copyfileobj(fsrc, fdst[, length]) !!! \u5c06\u6587\u4ef6\u5185\u5bb9\u62f7\u8d1d\u5230\u53e6\u4e00\u4e2a\u6587\u4ef6\u4e2d import shutil # -- shutil.copyfileobj(open('old.xml', 'r'), open('new.xml', 'w')) \u4e0d\u59a5 # -- \u5b9e\u73b0\u81ea\u52a8close\u6587\u4ef6 with open ( 'old.xml' , 'r' ) as read_f , open ( 'new.xml' , 'w' ) as write_f : shutil . copyfileobj ( read_f , write_f ) shutil.copyfile(src, dst) !!! \u62f7\u8d1d\u6587\u4ef6 shutil . copyfile ( 'f1.log' , 'f2.log' ) # -- \u76ee\u6807\u6587\u4ef6\u4e0d\u9700\u4e8b\u5148\u5b58\u5728 shutil.copymode(src, dst) \u4ec5\u62f7\u8d1d\u6743\u9650. \u5185\u5bb9\u3001\u7ec4\u3001\u7528\u6237\u5747\u4e0d\u53d8 shutil . copymode ( 'f1.log' , 'f2.log' ) # -- \u76ee\u6807\u6587\u4ef6\u5fc5\u987b\u5b58\u5728,\u4ec5\u62f7\u8d1d\u6743\u9650 shutil.copystat(src, dst) \u4ec5\u62f7\u8d1d\u72b6\u6001\u7684\u4fe1\u606f, \u5305\u62ec: mode bits, atime, mtime, flags shutil . copystat ( 'f1.log' , 'f2.log' ) # -- \u76ee\u6807\u6587\u4ef6\u5fc5\u987b\u5b58\u5728 shutil.copytree(src, dst, symlinks=False, ignore=None) !!! \u9012\u5f52\u62f7\u8d1d\u6587\u4ef6\u5939 # dst\u76ee\u6807\u76ee\u5f55\u4e0d\u80fd\u5148\u5b58\u5728,\u6ce8\u610f\u5bf9folder2\u76ee\u5f55\u7236\u7ea7\u76ee\u5f55\u8981\u6709\u53ef\u5199\u6743\u9650; # ignore\u7684\u610f\u601d\u662f\u6392\u9664 '*.pyc', 'tmp*' \u6240\u6709.pyc\u7ed3\u5c3e\u7684,tmp\u5f00\u5934\u7684 # \u9ed8\u8ba4copy_function = shutil.copy2 shutil . copytree ( 'folder1' , 'folder2' , ignore = shutil . ignore_patterns ( '*.pyc' , 'tmp*' )) shutil.rmtree(path[, ignore_errors[, onerror]]) !!! \u9012\u5f52\u5220\u9664\u6587\u4ef6\u5939 shutil . rmtree ( 'folder1' ) shutil.move(src, dst) !!! \u9012\u5f52\u7684\u79fb\u52a8\u6587\u4ef6\u5939,\u5b83\u7c7b\u4f3cmv\u547d\u4ee4,\u526a\u5207\u64cd\u4f5c \u53ef\u4ee5\u79fb\u52a8\u6587\u4ef6!! shutil . move ( 'folder1' , 'folder3' ) # -- eg:\u628a1.txt\u6587\u4ef6\u79fb\u52a8\u5230new\u6587\u4ef6\u5939\u4e0b. shutil . move ( f \"a/b/c/1.txt\" , f \"/Users/One_Piece/Desktop/new/\" ) shutil.make_archive(base_name, format,...) !!! \u521b\u5efa\u538b\u7f29\u5305\u5e76\u8fd4\u56de\u6587\u4ef6\u8def\u5f84, \u4f8b\u5982: zip\u3001tar import shutil import tarfile \"\"\" base_name:\u538b\u7f29\u5305\u7684\u6587\u4ef6\u540d,\u4e5f\u53ef\u4ee5\u662f\u538b\u7f29\u5305\u7684\u8def\u5f84 \u82e5\u662f\u6587\u4ef6\u540d\u65f6,\u538b\u7f29\u5305\u4fdd\u5b58\u81f3\u5f53\u524d\u76ee\u5f55;\u82e5\u662f\u8def\u5f84,\u4fdd\u5b58\u81f3\u6307\u5b9a\u8def\u5f84 format:\u538b\u7f29\u5305\u79cd\u7c7b eg: gztar\u6253\u5305\u538b\u7f29 root_dir:\u8981\u538b\u7f29\u7684\u6587\u4ef6\u5939\u7684\u8def\u5f84(\u9ed8\u8ba4\u5f53\u524d\u76ee\u5f55) \"\"\" # -- \u5c06 /data \u4e0b\u7684\u6587\u4ef6\u6253\u5305\u653e\u7f6e\u5f53\u524d\u7a0b\u5e8f\u76ee\u5f55 shutil . make_archive ( \"data_bak\" , 'gztar' , root_dir = '/data' ) # -- \u89e3\u538b t = tarfile . open ( 'data_bak.tar.gz' , 'r' ) t . extractall ( '/dc' ) # -- \u89e3\u538b\u5230'/dc'\u6587\u4ef6\u5939\u4e0b t . close ()","title":"shutil\u6a21\u5757!!"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/09_%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/#shelve","text":"\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316\u7684. \u5b83\u652f\u6301\u6240\u6709\u7684python\u7c7b\u578b,\u6240\u4ee5\u53ea\u80fd\u5728python\u91cc\u9762\u7528,\u4f46\u6bd4pickle\u6a21\u5757\u7b80\u5355. \u5b83\u53ea\u6709\u4e00\u4e2aopen\u53c2\u6570,\u8fd4\u56de\u7c7b\u4f3c\u5b57\u5178\u7684\u5bf9\u8c61,\u53ef\u8bfb\u53ef\u5199; key\u5fc5\u987b\u4e3a\u5b57\u7b26\u4e32,\u503c\u53ef\u4ee5\u662fpython\u652f\u6301\u7684\u6240\u6709\u6570\u636e\u7c7b\u578b import shelve # -- \u57fa\u672c\u4e0a\u4e0d\u4f1a\u7528\u7684(\uffe3\u25bd\uffe3),\u90a3\u5c31\u653e\u90fd\u5403\u7070\u5427!!! d = shelve . open ( 'db.txt' ) # -- \u4e0d\u7528\u4e8b\u5148\u5b58\u5728 dic_1 = { 'pwd' : 'admin123' , 'age' : 18 , 'sex' : 'male' } # -- \u5185\u5b58\u4e2d\u53ef\u80fd\u9700\u8981\u5e8f\u5217\u5316\u7684\u5b57\u5178 # -- \u5b58 d [ 'egon' ] = dic_1 d [ 'dc' ] = { 'pwd' : 'admin456' , 'age' : 20 , 'sex' : 'male' } # -- \u53d6 print ( d [ 'egon' ][ 'pwd' ]) # admin123 d . close () # -- \u4f1a\u65b0\u751f\u6210\u4e00\u4e2adb.txt.db\u6587\u4ef6,window\u548cmac\u53ef\u80fd\u4e0d\u4e00\u6837 # -- writeback\u9ed8\u8ba4\u4e3aFalse d2 = shelve . open ( 'db.txt' , writeback = True ) print ( d2 [ 'dc' ][ 'age' ]) # 20 # -- writeback\u4e3aTrue,\u4fee\u6539\u7684\u5185\u5bb9\u624d\u4f1a\u5199\u56de\u6587\u4ef6!!\u5426\u5219\u4e0d\u4f1a\u53d8\uff01 d2 [ 'dc' ][ 'age' ] = 18 d2 . close ()","title":"shelve\u6a21\u5757"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/09_%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/#xml","text":"xml\u662f\u5b9e\u73b0\u4e0d\u540c\u8bed\u8a00\u6216\u7a0b\u5e8f\u4e4b\u95f4\u8fdb\u884c\u6570\u636e\u4ea4\u6362\u7684\u534f\u8bae, \u8ddfjson\u5dee\u4e0d\u591a,\u4f46json\u4f7f\u7528\u8d77\u6765\u66f4\u7b80\u5355. \u4e0d\u8fc7\u5728json\u8fd8\u6ca1\u8bde\u751f\u7684\u9ed1\u6697\u5e74\u4ee3,\u5927\u5bb6\u53ea\u80fd\u9009\u62e9\u7528xml. \u81f3\u4eca\u5f88\u591a\u4f20\u7edf\u516c\u53f8\u5982\u91d1\u878d\u884c\u4e1a\u7684\u5f88\u591a\u7cfb\u7edf\u7684\u63a5\u53e3\u8fd8\u4e3b\u8981\u662fxml \u256e(\u256f\u25bd\u2570)\u256d \u8fd8\u662f\u8981\u4e86\u89e3\u54c8.. xml\u7684\u683c\u5f0f\u5982\u4e0b: \u901a\u8fc7<>\u8282\u70b9\u6765\u533a\u522b\u6570\u636e\u7ed3\u6784\u7684: (\u6807\u7b7e \u6807\u7b7e\u5c5e\u6027 \u6807\u7b7e\u5305\u542b\u7684\u6587\u672c\u5185\u5bb9\u6216\u5b50\u6807\u7b7e) <?xml version=\"1.0\"?> <data> <country name= \"Liechtenstein\" > <rank updated= \"yes\" > 2 </rank> <year> 2008 </year> <gdppc> 141100 </gdppc> <neighbor name= \"Austria\" direction= \"E\" /> <neighbor name= \"Switzerland\" direction= \"W\" /> </country> <country name= \"Singapore\" > <rank updated= \"yes\" > 5 </rank> <year> 2011 </year> <gdppc> 59900 </gdppc> <neighbor name= \"Malaysia\" direction= \"N\" /> </country> <country name= \"Panama\" > <rank updated= \"yes\" > 69 </rank> <year> 2011 </year> <gdppc> 13600 </gdppc> <neighbor name= \"Costa Rica\" direction= \"W\" /> <neighbor name= \"Colombia\" direction= \"E\" /> </country> </data> <!-- \u5c06xml\u6570\u636e\u7528json\u683c\u5f0f\u8868\u793a data = { \"Liechtenstein\": { \"rank\": { \"updated\": \"TRUE\", \"text\": 2 }, \"year\": { \"text\": 2008 } }, \"Singapore\": {}, \"Panama\": {} } --> xml\u6587\u6863\u7684\u589e\u5220\u6539\u67e5 from cgitb import text import xml.etree.ElementTree as ET tree = ET . parse ( 'xmltest.xml' ) root = tree . getroot () # \u4e00\u4e0a\u6765\u5c31\u62ff\u5230\u4e00\u4e2a\u6839\u8282\u70b9 # -- \u5bf9\u4e8e\u4efb\u4f55\u6807\u7b7e\u90fd\u6709\u4e09\u4e2a\u7279\u5f81: \u6807\u7b7e\u540d\u3001\u6807\u7b7e\u5c5e\u6027\u3001\u6807\u7b7e\u7684\u6587\u672c\u5185\u5bb9 print ( root . tag , root . attrib , root . text ) # data {} \"\"\" # --- >>>1.\u67e5<<< \"\"\" # -- \u67e5\u627e\u6807\u7b7e! \u4e09\u79cd\u60c5\u51b5 # - \u60c5\u51b5\u4e00:[\u5168\u6587\u641c\u7d22,\u627e\u5230\u6240\u6709] # <_elementtree._element_iterator object at 0x7fe54477f2c0> \u4e00\u4e2a\u8fed\u4ee3\u5668\u5bf9\u8c61 print ( root . iter ( 'year' )) # [<Element 'year' at 0x7ff22a097c70>, <Element 'year' at 0x7ff22a097e50>, <Element 'year' at 0x7ff22a09a040>] print ( list ( root . iter ( 'year' ))) # year {} 2008 # year {} 2011 # year {} 2011 for year in root . iter ( 'year' ): print ( year . tag , year . attrib , year . text ) # - \u60c5\u51b5\u4e8c:[\u5728root\u7684\u5b50\u8282\u70b9\u4e2d\u627e,\u53ea\u627e\u7b2c\u4e00\u4e2a] print ( root . find ( 'year' )) # None print ( root . find ( 'country' )) # <Element 'country' at 0x7f928576cbd0> print ( root . find ( 'country' ) . attrib ) # {'name': 'Liechtenstein'} # - \u60c5\u51b5\u4e09:[\u5728root\u7684\u5b50\u8282\u70b9\u4e2d\u627e,\u627e\u6240\u6709] # [<Element 'country' at 0x7fdf53798bd0>, <Element 'country' at 0x7fdf53798db0>, <Element 'country' at 0x7fdf53798f40>] print ( root . findall ( 'country' )) # [{'name': 'Liechtenstein'}, {'name': 'Singapore'}, {'name': 'Panama'}] print ([ country . attrib for country in root . findall ( 'country' )]) # -- \u904d\u5386\u6574\u4e2a\u6587\u6863 # \u6839\u636e\u5f53\u524dxml\u6587\u4ef6\u7684\u5e03\u5c40 \u6548\u679c\u7b49\u540c\u4e8eroot.iter('country') ; root.findall('country') ''' \u56fd\u5bb6{'name': 'Liechtenstein'} rank {'updated': 'yes'} 2 year {} 2008 gdppc {} 141100 neighbor {'name': 'Austria', 'direction': 'E'} None neighbor {'name': 'Switzerland', 'direction': 'W'} None \u56fd\u5bb6{'name': 'Singapore'} rank {'updated': 'yes'} 5 ... ... ... ''' for country in root : # \u5b83\u9ed8\u8ba4\u662f\u627eroot\u6240\u6709\u7684\u5b50\u8282\u70b9 print ( '\u56fd\u5bb6 %s ' % country . attrib ) for item in country : print ( item . tag , item . attrib , item . text ) \"\"\" # --- >>>2.\u6539<<< \"\"\" for year in root . iter ( 'year' ): print ( year . tag , year . attrib , year . text ) # \u6ce8\u610f\u54e6,\u8fd9\u91cc\u53ea\u662f\u5728\u5185\u5b58\u4e2d\u5b8c\u6210\u4e86\u4fee\u6539... year . attrib = { 'updated' : 'yes' } # \u4fee\u6539\u6587\u4ef6\u7684\u503c \u4e5f\u5fc5\u987b\u662fstr\u7c7b\u578b year . text = str ( int ( year . text ) + 1 ) # \u4ece\u6587\u4ef6\u91cc\u53d6\u51fa\u6765\u7684\u6570\u636e\u80af\u5b9a\u662fstr\u7c7b\u578b tree . write ( 'b.xml' ) # \u5199\u5230\u786c\u76d8\u91cc\u53bb \u5199\u5165\u4e86\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6b.xml,\u4e0d\u5fc5\u4e8b\u5148\u5b58\u5728 \"\"\" # --- >>>3.\u589e<<< \"\"\" # \u5728rank\u6807\u7b7e\u7684\u6587\u672c\u5185\u5bb9\u5927\u4e8e50\u7684country\u8282\u70b9\u4e0b\u52a0\u4e00\u4e2aegon\u6807\u7b7e # \u591a\u6b21\u91cd\u590d\u8fd0\u884c\u8fd9\u6bb5\u4ee3\u7801,\u53ea\u4f1a\u589e\u52a0\u4e00\u6b21 for country in root : rank = country . find ( 'rank' ) # \u627e\u5230\u7b26\u5408\u6761\u4ef6\u7684\u56fd\u5bb6 if int ( rank . text ) > 50 : tag = ET . Element ( 'egon' ) # \u9020\u4e00\u4e2aegon\u6807\u7b7e tag . attrib = { 'updated' : 'yes' } tag . text = 'yyds' country . append ( tag ) # \u6dfb\u52a0\u6807\u7b7e tree . write ( 'b.xml' ) # \u5c06\u5185\u5b58\u4e2d\u7684\u4fee\u6539\u5199\u5165\u786c\u76d8 \"\"\" # --- >>>4.\u5220<<< \"\"\" for country in root : tag = country . find ( 'egon' ) # print(tag, bool(tag)) # -- \u54ea\u6015tag\u6709\u503c,\u5176bool\u503c\u4e5f\u4e3aFalse \u5f88\u662f\u5947\u602a.. # \u6240\u4ee5\u4e0d\u80fd if tag \u76f4\u63a5\u5224\u65ad! if tag is not None : country . remove ( tag ) # \u79fb\u9664\u6807\u7b7e tree . write ( 'b.xml' )","title":"xml\u6a21\u5757"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/09_%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/#csv","text":"\u8bfb\u53d6csv\u6587\u4ef6 \"\"\" \u4e66\u540d,\u4f5c\u8005,\u51fa\u7248\u793e,\u4ef7\u683c \u7cbe\u901ascrapy\u7f51\u7edc\u722c\u866b,\u5218\u7855,\u6e05\u534e\u5927\u5b66\u51fa\u7248\u793e,46.00 \u7b97\u6cd5\u5bfc\u8bba,Charles E.Leiserson,\u4eba\u6c11\u90ae\u7535\u51fa\u7248\u793e,85.00 Python\u7070\u5e3d\u5b50,Justin Seitz,\u7535\u5b50\u5de5\u4e1a\u51fa\u7248\u793e,39.00 ... ... \"\"\" import csv # -- \u9ed8\u8ba4\u53ea\u8bfb\u6a21\u5f0f\u6253\u5f00 rf = open ( 'books.csv' ) # -- \u9ed8\u8ba4\u5206\u9694\u7b26\u662f\u9017\u53f7 \u521b\u5efa\u4e00\u4e2areader\u5bf9\u8c61(\u662f\u53ef\u8fed\u4ee3\u7684) reader = csv . reader ( rf , delimiter = ';' ) # -- \u6bcf\u4e00\u884c\u7684\u6570\u636e\u90fd\u4f1a\u653e\u5230\u4e00\u4e2a\u5217\u8868\u4e2d for book in reader : print ( book ) \u5199\u5165csv\u6587\u4ef6 import csv wf = open ( 'demo.csv' , 'w' ) # -- \u8fd9\u91cc\u6211\u4eec\u7528\u7a7a\u683c\u4f5c\u4e3a\u5206\u9694\u7b26 writer = csv . writer ( wf , delimiter = ' ' ) # -- \u5199\u5165\u4e00\u884c\u6570\u636e writer . writerow ([ 'x' , 'y' , 'z' ]) writer . writerow ([ '1' , '2' , '3' ]) writer . writerow ([ '9' , '8' , '7' ]) # -- flush()\u65b9\u6cd5\u7528\u6765\u5237\u65b0\u7f13\u51b2\u533a\u7684,\u5373\u5c06\u7f13\u51b2\u533a\u4e2d\u7684\u6570\u636e\u7acb\u523b\u5199\u5165\u6587\u4ef6,\u540c\u65f6\u6e05\u7a7a\u7f13\u51b2\u533a. # \u4e00\u822c\u60c5\u51b5\u4e0b,\u6587\u4ef6\u5173\u95ed\u4f1a\u81ea\u52a8\u5237\u65b0\u7f13\u51b2\u533a wf . flush () \u6848\u4f8b: \u5c06\u4ef7\u683c\u9ad8\u4e8e80.00\u7684\u4e66\u8bb0\u5f55\u5b58\u50a8\u5230\u53e6\u4e00\u4e2acsv\u6587\u4ef6\u4e2d import csv with open ( 'books.csv' ) as rf : reader = csv . reader ( rf ) # -- \u5148\u8bfb\u53d6\u5934\u90e8\u4fe1\u606f headers = next ( reader ) with open ( 'books_out.csv' , 'w' ) as wf : writer = csv . writer ( wf ) writer . writerow ( headers ) for book in reader : price = book [ - 2 ] # -- \u722c\u53d6\u7684\u4e66\u7c4d\u4ef7\u683c\u4fe1\u606f\u5b57\u6bb5\u53ef\u80fd\u4e3a\u7a7a if price and float ( price ) >= 80.00 : writer . writerow ( book )","title":"csv\u6a21\u5757"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/09_%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/#configparser","text":"\u4e13\u95e8\u7528\u4e8e\u89e3\u6790\u914d\u7f6e\u6587\u4ef6\u7684. eg: a.ini \u3001a.cfg\u3001a.cnf \u6ce8\u610f\u914d\u7f6e\u6587\u4ef6 config.ini \u5185\u5bb9\u7684\u683c\u5f0f: # \u6ce8\u91ca1 ; \u6ce8\u91ca2 [section1] # section\u6807\u9898 # options\u914d\u7f6e\u9879 k=v k1 = v1 user = egon age = 18 is_admin = true salary = 31 [section2] k1 = v1 configparser\u6a21\u5757\u5bf9\u914d\u7f6e\u6587\u4ef6 config.ini \u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c import configparser config = configparser . ConfigParser () config . read ( 'config.ini' ) # -- \u67e5\u770b\u6240\u6709\u7684\u6807\u9898 print ( config . sections ()) #['section1', 'section2'] # -- \u67e5\u770b\u67d0\u4e2a\u6807\u9898\u4e0b\u9762\u6240\u6709\u7684\u914d\u7f6e\u9879 # \u53ea\u53d6\u4e86key\u503c print ( config . options ( 'section1' )) # ['k1', 'user', 'age', 'is_admin', 'salary'] # \u53d6key\u548cvalue print ( config . items ( 'section1' )) # [('k1', 'v1'), ('user', 'egon'), ('age', '18'), ('is_admin', 'true'), ('salary', '31')] # -- \u67e5\u770b\u6807\u9898section1\u4e0buser\u7684\u503c # \u7c7b\u578b\u662fstr\u7c7b\u578b res_str = config . get ( 'section1' , 'age' ) print ( res_str , type ( res_str )) # 18 <class 'str'> # \u7c7b\u578b\u662fint\u7c7b\u578b res_int = config . getint ( 'section1' , 'age' ) print ( res_int , type ( res_int )) # 18 <class 'int'> # \u7c7b\u578b\u662ffloat\u7c7b\u578b res_float = config . getfloat ( 'section1' , 'age' ) print ( res_float , type ( res_float )) # 18.0 <class 'float'> # \u7c7b\u578b\u662fbool\u7c7b\u578b res_bool = config . getboolean ( 'section1' , 'is_admin' ) print ( res_bool , type ( res_bool )) # True <class 'bool'> # -- \u5220\u9664\u64cd\u4f5c \u7565..(\u61d2\u5f97\u5f04\u4e86 \u9047\u5230\u4e86\u770begon\u7684\u535a\u5ba2\u5427 (\u00b4\u25bd\uff40)) # https://www.cnblogs.com/linhaifeng/articles/6384466.html#_label9","title":"configparser\u6a21\u5757"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/10_%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%8C%85/","text":"\u6a21\u5757 \u00b6 \u53c2\u8003\u94fe\u63a5: https://zhuanlan.zhihu.com/p/109127048 \u6a21\u5757\u5bfc\u5165 \u00b6 \u5bfc\u5165\u6a21\u5757\u7684\u89c4\u8303 \u00b6 # -- 1. python\u5185\u7f6e\u6a21\u5757 # -- 2. \u7b2c\u4e09\u65b9\u6a21\u5757 # -- 3. \u7a0b\u5e8f\u5458\u81ea\u5b9a\u4e49\u6a21\u5757 Ps: \u5728\u6587\u4ef6\u5f00\u5934\u5bfc\u5165\u6a21\u5757\u5c5e\u4e8e\u5168\u5c40\u4f5c\u7528\u57df, \u5728\u51fd\u6570\u5185\u5bfc\u5165\u7684\u6a21\u5757\u5219\u5c5e\u4e8e\u5c40\u90e8\u7684\u4f5c\u7528\u57df import\u8bed\u53e5 \u00b6 # -- \u6587\u4ef6\u540d:foo.py __all__ = [ 'x' , 'get' ] # -- \u8be5\u5217\u8868\u4e2d\u6240\u6709\u7684\u5143\u7d20\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u7c7b\u578b,\u6bcf\u4e2a\u5143\u7d20\u5bf9\u5e94foo.py\u4e2d\u7684\u4e00\u4e2a\u540d\u5b57 # __all__ \u7528\u4e8e\u63a7\u5236 `from foo import *` \u8bed\u53e5\u4e2d * \u4ee3\u8868\u7684\u610f\u601d x = 1 def get (): print ( x ) def change (): global x x = 0 class Foo : def func ( self ): print ( 'from the func' ) \u60f3\u5728run.py\u6587\u4ef6\u4e2d\u5f15\u7528foo.py\u4e2d\u7684\u529f\u80fd, \u9700\u8981\u4f7f\u7528 import foo , \u9996\u6b21\u5bfc\u5165\u6a21\u5757\u4f1a\u505a\u4e09\u4ef6\u4e8b : 1> \u6267\u884c\u6e90\u6587\u4ef6foo.py\u4ee3\u7801 2> \u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u540d\u79f0\u7a7a\u95f4\u7528\u4e8e\u5b58\u653e\u6e90\u6587\u4ef6\u6267\u884c\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u540d\u5b57 3> \u5728\u5f53\u524d\u6267\u884c\u6587\u4ef6run.py\u6240\u5728\u7684\u5168\u5c40\u540d\u79f0\u7a7a\u95f4\u4e2d\u5f97\u5230\u4e00\u4e2a\u540d\u5b57foo, \u8be5\u540d\u5b57\u6307\u5411\u65b0\u521b\u5efa\u7684\u6a21\u5757\u540d\u79f0\u7a7a\u95f4 \u82e5\u8981\u5f15\u7528\u6a21\u5757\u540d\u79f0\u7a7a\u95f4\u4e2d\u7684\u540d\u5b57,\u9700\u8981\u52a0\u4e0a\u8be5\u524d\u7f00 # -- \u6587\u4ef6\u540d:run.py import foo x = 5 a = foo . x # -- \u5f15\u7528\u6a21\u5757foo\u4e2d\u53d8\u91cfx\u7684\u503c\u8d4b\u503c\u7ed9\u5f53\u524d\u540d\u79f0\u7a7a\u95f4\u4e2d\u7684\u540d\u5b57a foo . get () # -- \u8c03\u7528\u6a21\u5757foo\u7684get\u51fd\u6570 foo . change () # -- \u8c03\u7528\u6a21\u5757foo\u4e2d\u7684change\u51fd\u6570 obj = foo . Foo () # -- \u4f7f\u7528\u6a21\u5757foo\u7684\u7c7bFoo\u6765\u5b9e\u4f8b\u5316\uff0c\u8fdb\u4e00\u6b65\u53ef\u4ee5\u6267\u884cobj.func() \u6ce8\u610f: \u52a0\u4e0a foo. \u4f5c\u4e3a\u524d\u7f00\u5c31\u76f8\u5f53\u4e8e\u6307\u540d\u9053\u59d3\u5730\u8bf4\u660e\u8981\u5f15\u7528foo\u540d\u79f0\u7a7a\u95f4\u4e2d\u7684\u540d\u5b57, \u6240\u4ee5 \u80af\u5b9a\u4e0d\u4f1a\u4e0e\u5f53\u524d\u6267\u884c\u6587\u4ef6\u6240\u5728\u540d\u79f0\u7a7a\u95f4\u4e2d\u7684\u540d\u5b57\u76f8\u51b2\u7a81 , \u5e76\u4e14\u82e5\u5f53\u524d\u6267\u884c\u6587\u4ef6\u7684\u540d\u79f0\u7a7a\u95f4\u4e2d\u5b58\u5728x, \u6267\u884c foo.get() \u6216 foo.change() \u64cd\u4f5c\u7684\u90fd\u662f \u6e90\u6587\u4ef6\u4e2d\u7684 \u5168\u5c40\u53d8\u91cfx from-import\u8bed\u53e5 \u00b6 from..import..\u4e0eimport\u8bed\u53e5\u57fa\u672c\u4e00\u81f4, \u4e5f\u4f1a\u6709\u90a3\u4e09\u4e2a\u6b65\u9aa4 \u552f\u4e00\u4e0d\u540c\u7684\u662f: \u4f7f\u7528 import foo \u5bfc\u5165\u6a21\u5757\u540e, \u5f15\u7528\u6a21\u5757\u4e2d\u7684\u540d\u5b57\u90fd\u9700\u8981\u52a0\u4e0afoo.\u4f5c\u4e3a\u524d\u7f00; \u800c\u4f7f\u7528 from foo import x,get,change,Foo \u5219\u53ef\u4ee5\u5728\u5f53\u524d\u6267\u884c\u6587\u4ef6\u4e2d\u76f4\u63a5\u5f15\u7528\u6a21\u5757foo\u4e2d\u7684\u540d\u5b57. # -- \u6587\u4ef6\u540d:run.py from foo import x , get , change # -- \u5c06\u6a21\u5757foo\u4e2d\u7684x\u548cget\u5bfc\u5165\u5230\u5f53\u524d\u6267\u884c\u6587\u4ef6run.py\u7684\u5168\u5c40\u540d\u79f0\u7a7a\u95f4 a = x # -- \u76f4\u63a5\u4f7f\u7528\u6a21\u5757foo\u4e2d\u7684x\u8d4b\u503c\u7ed9a get () # -- \u76f4\u63a5\u6267\u884cfoo\u4e2d\u7684get\u51fd\u6570 change () # -- \u5373\u4fbf\u662f\u5f53\u524d\u6709\u91cd\u540d\u7684x,\u4fee\u6539\u7684\u4ecd\u7136\u662f\u6e90\u6587\u4ef6foo.py\u4e2d\u7684x \"\"\" \u601d\u8003\u4e86\u4e0b,change()\u540e,run.py\u4e2da\u53d8\u91cf\u7684\u503c\u662f\u5426\u4e00\u540c\u6539\u53d8,\u53d6\u51b3\u4e8efoo.py\u4e2d\u7684x\u53d8\u91cf\u662f\u53ef\u53d8\u7c7b\u578b,\u8fd8\u662f\u4e0d\u53ef\u53d8\u7c7b\u578b. \u4e0b\u9762 \"\u91cd\u590d\u5bfc\u5165\" \u7684\u90e8\u5206\u4f1a\u5305\u542b\u8fd9\u90e8\u5206\u601d\u8003\u7684\u5206\u6790. \"\"\" from foo import * # -- \u628afoo\u4e2d\u6240\u6709\u7684\u540d\u5b57\u90fd\u5bfc\u5165\u5230\u5f53\u524d\u6267\u884c\u6587\u4ef6\u7684\u540d\u79f0\u7a7a\u95f4\u4e2d \u82e5\u6211\u4eec\u9700\u8981\u5f15\u7528\u6a21\u5757\u4e2d\u7684\u540d\u5b57\u8fc7\u591a\u7684\u8bdd , \u53ef\u4ee5\u91c7\u7528\u4e0a\u8ff0\u7684\u5bfc\u5165\u5f62\u5f0f\u6765\u8fbe\u5230\u8282\u7701\u4ee3\u7801\u91cf\u7684\u6548\u679c . \u8fd9\u4f1a\u5bfc\u81f4\u6211\u4eec\u65e0\u6cd5\u641e\u6e05\u695a\u7a76\u7adf\u4ece\u6e90\u6587\u4ef6\u4e2d\u5bfc\u5165\u4e86\u54ea\u4e9b\u540d\u5b57\u5230\u5f53\u524d\u4f4d\u7f6e , \u8fd9\u6781\u6709\u53ef\u80fd\u4e0e\u5f53\u524d\u4f4d\u7f6e\u7684\u540d\u5b57\u4ea7\u751f\u51b2\u7a81 \u9700\u8981\u5f3a\u8c03\u7684\u662f : \u53ea\u80fd\u5728\u6a21\u5757\u6700\u9876\u5c42\u4f7f\u7528\u7684\u65b9\u5f0f\u5bfc\u5165 , \u5728\u51fd\u6570\u5185\u5219\u975e\u6cd5 .. \u6a21\u5757\u7684\u7f16\u5199\u8005\u53ef\u4ee5\u5728\u81ea\u5df1\u7684\u6587\u4ef6\u4e2d\u5b9a\u4e49__all__\u53d8\u91cf\u7528\u6765\u63a7\u5236 * \u4ee3\u8868\u7684\u610f\u601d \u65e0\u9700\u52a0\u524d\u7f00\u7684\u597d\u5904\u662f\u4f7f\u5f97\u6211\u4eec\u7684\u4ee3\u7801\u66f4\u52a0\u7b80\u6d01, \u574f\u5904\u5219\u662f\u5bb9\u6613\u4e0e\u5f53\u524d\u540d\u79f0\u7a7a\u95f4\u4e2d\u7684\u540d\u5b57\u51b2\u7a81. \u5982\u679c\u5f53\u524d\u540d\u79f0\u7a7a\u95f4\u5b58\u5728\u76f8\u540c\u7684\u540d\u5b57, \u5219\u540e\u5b9a\u4e49\u7684\u540d\u5b57\u4f1a\u8986\u76d6\u4e4b\u524d\u5b9a\u4e49\u7684\u540d\u5b57. \u91cd\u590d\u5bfc\u5165 \u00b6 \u5f3a\u8c03: \u7b2c\u4e00\u6b21\u5bfc\u5165\u6a21\u5757\u5df2\u7ecf\u5c06\u5176\u52a0\u8f7d\u5230\u5185\u5b58\u7a7a\u95f4\u4e86,\u4e4b\u540e\u7684\u91cd\u590d\u5bfc\u5165( \u4e0d\u7ba1\u662f\u5f53\u524d\u53ef\u6267\u884c\u6587\u4ef6\u7684\u91cd\u590d\u5bfc\u5165,\u8fd8\u662f\u591a\u4e2a\u6587\u4ef6\u5bfc\u5165\u540c\u4e00\u4e2a\u6a21\u5757 )\u4f1a\u76f4\u63a5\u5f15\u7528\u5185\u5b58\u4e2d\u5df2\u5b58\u5728\u7684\u6a21\u5757(\u5df2\u7ecf\u5b58\u5728\u7684\u547d\u540d\u7a7a\u95f4),\u4e0d\u4f1a\u91cd\u590d\u6267\u884c\u5bfc\u5165\u7684\u6a21\u5757 \"\"\"\u6267\u884crun.py \u7ed3\u679c\u5982\u4e0b: 10 [] 12 [1] 10 [1] \u8fd9\u6837\u5206\u6790: scope(run.py) scope(a.py) scope(b.py) heap\u5806\u533a x:Ox101 x:Ox101 --> x:Ox301 a Ox101 10 y:Ox201 y:Ox201 Ox201 [] --> [1] change_x Ox301 12 change_y id(change_x) id(change_y) \u8bb0\u4f4f\u4e00\u4e2a\u539f\u5219\u5373\u53ef: `from a import x,y` \u65b9\u5f0f\u5bfc\u5165\u8fdbscope(run.py)\u7684x,y x\u662f\u4e0d\u53ef\u53d8\u53d8\u91cf,\u6e90\u6587\u4ef6a.py\u4e2d\u7684x\u6539\u53d8\u4e86,run.py\u4e2d\u7684x\u4e0d\u4f1a\u6539\u53d8,\u56e0\u4e3a\u5f15\u7528\u8ba1\u6570\u4e0d\u4e3a0 y\u662f\u53ef\u53d8\u53d8\u91cf,\u5176\u503c\u53ef\u4ee5\u539f\u5730\u6539\u53d8.\u9700\u8981\u6ce8\u610f\u54c8! `import a` \u65b9\u5f0f\u5bfc\u5165,\u8981\u8bbf\u95eescope(a.py)\u4e2d\u7684\u540d\u5b57 \u662f\u9700\u8981\u52a0\u524d\u7f00\u7684! scope(a.py)\u4e2d\u7684x\u503c\u53d8\u4e86,a.x\u65b9\u5f0f\u8bbf\u95ee,\u7ed3\u679c\u80af\u5b9a\u4e5f\u4f1a\u53d8\u5566. \"\"\" # -- a.py x = 10 y = [] def change_x (): global x x = 12 def change_y (): y . append ( 1 ) # -- run.py from a import x , y print ( x ) # 10 print ( y ) # [] import b print ( x ) # 10 print ( y ) # [1] # -- b.py import a a . change_x () a . change_y () print ( a . x ) # 12 print ( a . y ) # [1] \u5176\u5b83\u5bfc\u5165\u8bed\u6cd5(as) \u00b6 import foo as f # -- \u4e3a\u5bfc\u5165\u7684\u6a21\u5757foo\u5728\u5f53\u524d\u4f4d\u7f6e\u8d77\u522b\u540df from foo import get as get_x # -- \u8fd8\u53ef\u4ee5\u4e3a\u5bfc\u5165\u7684\u67d0\u4e2a\u540d\u5b57\u8d77\u522b\u540d \u4e3a\u5173\u952e\u5b57import\u540e\u5bfc\u5165\u7684\u540d\u5b57\u8d77\u522b\u540d,\u6709\u4e09\u5927\u597d\u5904 1> \u88ab\u5bfc\u5165\u7684\u540d\u5b57\u8fc7\u957f\u65f6\u91c7\u7528\u8d77\u522b\u540d\u7684\u65b9\u5f0f\u6765\u7cbe\u7b80\u4ee3\u7801; 2> \u4e3a\u88ab\u5bfc\u5165\u7684\u540d\u5b57\u8d77\u522b\u540d\u53ef\u4ee5\u5f88\u597d\u5730\u907f\u514d\u4e0e\u5f53\u524d\u540d\u5b57\u53d1\u751f\u51b2\u7a81; 3> \u8fd8\u53ef\u4ee5\u4fdd\u6301\u8c03\u7528\u65b9\u5f0f\u7684\u4e00\u81f4\u6027 \"\"\" \u6211\u4eec\u6709\u4e24\u4e2a\u6a21\u5757json\u548cpickle\u540c\u65f6\u5b9e\u73b0\u4e86load\u65b9\u6cd5,\u4f5c\u7528\u662f\u4ece\u4e00\u4e2a\u6253\u5f00\u7684\u6587\u4ef6\u4e2d\u89e3\u6790\u51fa\u7ed3\u6784\u5316\u7684\u6570\u636e. \u4f46\u89e3\u6790\u7684\u683c\u5f0f\u4e0d\u540c\u53ef\u4ee5\u7528\u4e0b\u8ff0\u4ee3\u7801\u6709\u9009\u62e9\u6027\u5730\u52a0\u8f7d\u4e0d\u540c\u7684\u6a21\u5757 \"\"\" if data_format == 'json' : import json as serialize # -- \u5982\u679c\u6570\u636e\u683c\u5f0f\u662fjson,\u90a3\u4e48\u5bfc\u5165json\u6a21\u5757\u5e76\u8d77\u522b\u540d/\u547d\u540d\u4e3aserialize elif data_format == 'pickle' : import pickle as serialize # -- \u5982\u679c\u6570\u636e\u683c\u5f0f\u662fpickle,\u90a3\u4e48\u5bfc\u5165pickle\u6a21\u5757\u5e76\u547d\u540d\u4e3aserialize data = serialize . load ( fn ) # -- \u6700\u7ec8\u8c03\u7528\u7684\u65b9\u5f0f\u662f\u4e00\u81f4\u7684 \u5faa\u73af\u5bfc\u5165\u95ee\u9898 \u00b6 \u5faa\u73af\u5bfc\u5165\u95ee\u9898\u6307\u7684\u662f\u5728\u4e00\u4e2a\u6a21\u5757\u52a0\u8f7d/\u5bfc\u5165\u7684\u8fc7\u7a0b\u4e2d\u5bfc\u5165\u53e6\u5916\u4e00\u4e2a\u6a21\u5757, \u800c\u5728\u53e6\u5916\u4e00\u4e2a\u6a21\u5757\u4e2d\u53c8\u8fd4\u56de\u6765\u5bfc\u5165\u7b2c\u4e00\u4e2a\u6a21\u5757\u4e2d\u7684\u540d\u5b57, \u7531\u4e8e\u7b2c\u4e00\u4e2a\u6a21\u5757\u5c1a\u672a\u52a0\u8f7d\u5b8c\u6bd5 , \u6240\u4ee5\u5f15\u7528\u5931\u8d25\u3001\u629b\u51fa\u5f02\u5e38. \u7a76\u5176\u6839\u6e90 \u5c31\u662f\u5728python\u4e2d, \u540c\u4e00\u4e2a\u6a21\u5757\u53ea\u4f1a\u5728\u7b2c\u4e00\u6b21\u5bfc\u5165\u65f6\u6267\u884c\u5176\u5185\u90e8\u4ee3\u7801, \u518d\u6b21\u5bfc\u5165\u8be5\u6a21\u5757\u65f6, \u5373\u4fbf\u662f\u8be5\u6a21\u5757\u5c1a\u672a\u5b8c\u5168\u52a0\u8f7d\u5b8c\u6bd5\u4e5f\u4e0d\u4f1a\u53bb\u91cd\u590d\u6267\u884c\u5185\u90e8\u4ee3\u7801.. # -- m1.py print ( '\u6b63\u5728\u6267\u884cm1.py\u6587\u4ef6' ) from m2 import y x = 'm1' # -- m2.py print ( '\u6b63\u5728\u6267\u884cm2.py\u6587\u4ef6' ) from m1 import x y = 'm2' # -- run.py import m1 \u6d4b\u8bd5\u4e00 \u00b6 \u2605 \u8fd0\u884crun . py 1 > ` import m1 ` run . py\u5bfc\u5165\u6a21\u5757m1 , \u5f00\u59cb\u6267\u884cm1 . py\u4e2d\u7684\u5185\u90e8\u4ee3\u7801 2 > ` from m2 import y ` m1\u6a21\u5757\u4e2d\u5bfc\u5165\u4e86m2\u6a21\u5757 , \u5f00\u59cb\u6267\u884cm2 . py\u4e2d\u7684\u5185\u90e8\u4ee3\u7801 3 > ` from m1 import x ` m2\u6a21\u5757\u4e2d\u53c8\u5bfc\u5165\u4e86\u8fd8\u672a\u6765\u5f97\u53ca\u52a0\u8f7d\u5b8c\u7684m1\u6a21\u5757 ( \u6ce8\u610f : \u6b64\u5904m1\u6a21\u5757\u88ab\u91cd\u590d\u5bfc\u5165\u4e86 , \u4e0d\u4f1a\u91cd\u65b0\u6267\u884cm1 . py\u5185\u90e8\u4ee3\u7801 ) \u5e76\u5f15\u7528scope ( m1 . py ) \u8fd8\u6ca1\u6765\u5f97\u53ca\u52a0\u8f7d\u7684x\u540d\u5b57 , \u62a5\u9519 . \u6d4b\u8bd5\u4e8c \u00b6 \u5f3a\u8c03: \u6267\u884c\u6587\u4ef6\u4e0d\u7b49\u4e8e\u5bfc\u5165\u6587\u4ef6 , \u6bd4\u5982\u6267\u884cm1.py\u4e0d\u7b49\u4e8e\u5bfc\u5165\u4e86m1 \u5373 \u6267\u884c\u6587\u4ef6\u5f00\u8f9f\u7684\u7a7a\u95f4\u8ddf\u9996\u6b21\u5bfc\u5165\u8be5\u6a21\u5757\u5f00\u8f9f\u7684\u7a7a\u95f4\u4e0d\u662f\u540c\u4e00\u4e2a\u7a7a\u95f4! \u2605 \u8fd0\u884cm1 . py 1 > ` from m2 import y ` m1\u6a21\u5757\u4e2d\u5bfc\u5165\u4e86m2\u6a21\u5757 , \u5f00\u59cb\u6267\u884cm2 . py\u4e2d\u7684\u5185\u90e8\u4ee3\u7801 2 > ` from m1 import x ` m2\u6a21\u5757\u4e2d\u5bfc\u5165\u4e86m1\u6a21\u5757 , \u5f00\u59cb\u6267\u884cm1 . py\u4e2d\u7684\u5185\u90e8\u4ee3\u7801 3 > ` from m2 import y ` ( \u6ce8\u610f : \u6b64\u5904m2\u6a21\u5757\u88ab\u91cd\u590d\u5bfc\u5165\u4e86 , \u4e0d\u4f1a\u91cd\u65b0\u6267\u884cm2 . py\u5185\u90e8\u4ee3\u7801 ) So , m1\u6a21\u5757\u4e2d\u53c8\u5bfc\u5165\u4e86\u8fd8\u672a\u6765\u5f97\u53ca\u52a0\u8f7d\u5b8c\u7684m2\u6a21\u5757 \u5e76\u5f15\u7528scope ( m2 . py ) \u8fd8\u6ca1\u6765\u5f97\u53ca\u52a0\u8f7d\u7684y\u540d\u5b57 , \u62a5\u9519 . \"\"\" \u6b63\u5728\u6267\u884cm1.py\u6587\u4ef6 \u6b63\u5728\u6267\u884cm2.py\u6587\u4ef6 \u6b63\u5728\u6267\u884cm1.py\u6587\u4ef6 cannot import name 'y' from 'm2' \"\"\" \u89e3\u51b3\u65b9\u6848 \u00b6 \u65b9\u6848\u4e00: \u5bfc\u5165\u8bed\u53e5\u653e\u5230\u6700\u540e, \u4fdd\u8bc1\u5728\u5bfc\u5165\u65f6, \u6240\u6709\u540d\u5b57\u90fd\u5df2\u7ecf\u52a0\u8f7d\u8fc7 \u65b9\u6848\u4e8c: \u5bfc\u5165\u8bed\u53e5\u653e\u5230\u51fd\u6570\u4e2d, \u53ea\u6709\u5728\u8c03\u7528\u51fd\u6570\u65f6\u624d\u4f1a\u6267\u884c\u5176\u5185\u90e8\u4ee3\u7801 \u5faa\u73af\u5bfc\u5165\u95ee\u9898\u5927\u591a\u6570\u60c5\u51b5\u662f\u56e0\u4e3a\u7a0b\u5e8f\u8bbe\u8ba1\u5931\u8bef\u5bfc\u81f4, \u4e0a\u8ff0\u89e3\u51b3\u65b9\u6848\u4e5f\u53ea\u662f\u5728\u70c2\u8bbe\u8ba1\u4e4b\u4e0a\u7684\u65e0\u5948\u4e4b\u4e3e,\u5728\u6211\u4eec\u7684\u7a0b\u5e8f\u4e2d\u5e94\u8be5\u5c3d\u91cf\u907f\u514d\u51fa\u73b0\u5faa\u73af/\u5d4c\u5957\u5bfc\u5165!! \u5982\u679c\u591a\u4e2a\u6a21\u5757\u786e\u5b9e\u90fd\u9700\u8981\u5171\u4eab\u67d0\u4e9b\u6570\u636e, \u53ef\u4ee5\u5c06\u5171\u4eab\u7684\u6570\u636e\u96c6\u4e2d\u5b58\u653e\u5230\u67d0\u4e00\u4e2a\u5730\u65b9,\u7136\u540e\u8fdb\u884c\u5bfc\u5165 \u6a21\u5757\u7684\u67e5\u627e\u987a\u5e8f \u00b6 \u6a21\u5757\u5206\u4e3a\u56db\u4e2a\u901a\u7528\u7c7b\u522b: 1> \u4f7f\u7528\u7eafPython\u4ee3\u7801\u7f16\u5199\u7684py\u6587\u4ef6 2> \u5305\u542b\u4e00\u7cfb\u5217\u6a21\u5757\u7684\u5305 3> \u4f7f\u7528C\u7f16\u5199\u5e76\u94fe\u63a5\u5230Python\u89e3\u91ca\u5668\u4e2d\u7684\u5185\u7f6e\u6a21\u5757 4> \u4f7f\u7528C\u6216C++\u7f16\u8bd1\u7684\u6269\u5c55\u6a21\u5757 \u641c\u7d22\u6a21\u5757\u7684\u8def\u5f84\u4e0e\u4f18\u5148\u7ea7: \u25cb \u5728\u5bfc\u5165\u4e00\u4e2a\u6a21\u5757\u65f6, \u82e5\u8be5\u6a21\u5757\u5df2\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d, \u5219\u76f4\u63a5\u5f15\u7528; \u25cb \u5426\u5219\u4f1a\u4f18\u5148\u67e5\u627e\u5185\u7f6e\u6a21\u5757; \u25cb \u7136\u540e\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u4f9d\u6b21\u68c0\u7d22sys.path\u4e2d\u5b9a\u4e49\u7684\u8def\u5f84, \u76f4\u5230\u627e\u6a21\u5757\u5bf9\u5e94\u7684\u6587\u4ef6\u4e3a\u6b62, \u5426\u5219\u629b\u51fa\u5f02\u5e38. sys.path \u4e5f\u88ab\u79f0\u4e3a \u6a21\u5757\u7684\u641c\u7d22\u8def\u5f84 , \u5b83\u662f\u4e00\u4e2a\u5217\u8868\u7c7b\u578b \"\"\" sys.path\u4e2d\u7684\u7b2c\u4e00\u4e2a\u8def\u5f84\u901a\u5e38\u4e3a\u7a7a,\u4ee3\u8868\u6267\u884c\u6587\u4ef6\u6240\u5728\u7684\u8def\u5f84 \u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u53ef\u4ee5\u5f53\u4f5c\u4e00\u4e2a\u76ee\u5f55\u6765\u770b: \u5728\u5217\u8868\u4e2d\u4f1a\u53d1\u73b0\u6709.zip\u6216.egg\u7ed3\u5c3e\u7684\u6587\u4ef6,\u4e8c\u8005\u662f\u4e0d\u540c\u5f62\u5f0f\u7684\u538b\u7f29\u6587\u4ef6 Python\u652f\u6301\u4ece\u4e00\u4e2a\u538b\u7f29\u6587\u4ef6\u4e2d\u5bfc\u5165\u6a21\u5757 \"\"\" >>> import sys >>> sys . path [ '' , '/Users/One_Piece/Documents' , '/Library/Frameworks/Python.framework/Versions/3.8/lib/python38.zip' , '/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8' , '/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/lib-dynload' , '/Users/One_Piece/Library/Python/3.8/lib/python/site-packages' , '/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages' ] sys.path\u4e2d\u7684\u7b2c\u4e00\u4e2a\u8def\u5f84\u901a\u5e38\u4e3a\u7a7a, \u4ee3\u8868\u6267\u884c\u6587\u4ef6\u6240\u5728\u7684\u8def\u5f84. 1> \u5728\u88ab\u5bfc\u5165\u6a21\u5757\u4e0e\u6267\u884c\u6587\u4ef6\u5728\u540c\u4e00\u76ee\u5f55\u4e0b\u65f6\u80af\u5b9a\u662f\u53ef\u4ee5\u6b63\u5e38\u5bfc\u5165\u7684; 2> \u9488\u5bf9\u88ab\u5bfc\u5165\u7684\u6a21\u5757\u4e0e\u6267\u884c\u6587\u4ef6\u5728\u4e0d\u540c\u8def\u5f84\u4e0b\u7684\u60c5\u51b5, \u4e3a\u4e86\u786e\u4fdd\u6a21\u5757\u5bf9\u5e94\u7684\u6e90\u6587\u4ef6\u4ecd\u53ef\u4ee5\u88ab\u627e\u5230. \u9700\u8981\u5c06\u6e90\u6587\u4ef6foo.py\u6240\u5728\u7684\u8def\u5f84\u6dfb\u52a0\u5230sys.path\u4e2d, \u5047\u8bbefoo.py\u6240\u5728\u7684\u8def\u5f84\u4e3a/pythoner/projects/ import sys # -- \u4e5f\u53ef\u4ee5\u4f7f\u7528sys.path.insert() sys . path . append ( r '/pythoner/projects/' ) import foo PY\u6587\u4ef6\u7684\u7528\u9014 \u00b6 1> \u88ab\u5f53\u4e3b\u7a0b\u5e8f/\u811a\u672c\u6267\u884c __name__ \u88ab\u8d4b\u503c\u4e3a __main__ 2> \u88ab\u5f53\u6a21\u5757\u5bfc\u5165 __name__ \u88ab\u8d4b\u503c\u4e3a\u6a21\u5757\u540d # -- foo.py # \u7565 \u7565 \u7565 # -- foo.py\u88ab\u5f53\u505a\u6a21\u5757\u5bfc\u5165\u65f6\u8fd0\u884c\u7684\u4ee3\u7801,\u4e0d\u4f1a\u6267\u884c\u6d4b\u8bd5\u4ee3\u7801 if __name__ == '__main__' : # -- foo.py\u88ab\u5f53\u505a\u811a\u672c\u6267\u884c\u65f6\u8fd0\u884c\u7684\u6d4b\u8bd5\u4ee3\u7801 \u5305 \u00b6 \u53c2\u8003\u94fe\u63a5: https://zhuanlan.zhihu.com/p/109221768 \u5305\u662f\u4ec0\u4e48? \u00b6 \u968f\u7740\u6a21\u5757\u6570\u76ee\u7684\u589e\u591a, \u628a\u6240\u6709\u6a21\u5757\u4e0d\u52a0\u533a\u5206\u5730\u653e\u5230\u4e00\u8d77\u4e5f\u662f\u6781\u4e0d\u5408\u7406\u7684.\u521b\u5efa\u4e00\u4e2a\u5305\u53ef\u4ee5\u628a\u6a21\u5757\u7ec4\u7ec7\u5230\u4e00\u8d77. \u5305\u5c31\u662f\u4e00\u4e2a\u542b\u6709 __init__.py \u6587\u4ef6\u7684\u6587\u4ef6\u5939, \u6587\u4ef6\u5939\u5185\u53ef\u4ee5\u7ec4\u7ec7 \u5b50\u6a21\u5757 \u6216 \u5b50\u5305 ! - aaa # -- \u9876\u7ea7\u5305 - __init__ . py - m1 . py # -- \u5b50\u6a21\u5757 - m2 . py - bbb # -- \u5b50\u5305 - __init__ . py - m3 . py - run . py \u5f3a\u8c03: 1> py3\u4e2d, \u5373\u4f7f\u5305\u4e0b\u6ca1\u6709 __init__.py \u6587\u4ef6, import \u5305 \u4e5f\u4e0d\u4f1a\u62a5\u9519; \u800c\u5728py2\u4e2d, \u5305\u4e0b \u4e00\u5b9a \u8981\u6709\u8be5\u6587\u4ef6, \u5426\u5219import\u5305\u62a5\u9519!! 2> \u8bb0\u4f4f, \u5305\u5c5e\u4e8e\u6a21\u5757\u7684\u4e00\u79cd , \u56e0\u800c\u5305\u4ee5\u53ca\u5305\u5185\u7684\u6a21\u5757\u5747\u662f\u7528\u6765\u88ab\u5bfc\u5165\u4f7f\u7528\u7684, \u800c\u7edd\u975e\u88ab\u76f4\u63a5\u6267\u884c!! \u5305\u7684\u4f7f\u7528 \u00b6 \u9996\u6b21\u5bfc\u5165\u5305 \u5982 import pool \u540c\u6837\u4f1a\u505a\u4e09\u4ef6\u4e8b: 1> \u6267\u884c\u5305\u4e0b\u7684 __init__.py \u6587\u4ef6 2> \u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u540d\u79f0\u7a7a\u95f4\u7528\u4e8e\u5b58\u653e __init__.py \u6267\u884c\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u540d\u5b57 3> \u5728\u5f53\u524d\u6267\u884c\u6587\u4ef6\u6240\u5728\u7684\u540d\u79f0\u7a7a\u95f4\u4e2d\u5f97\u5230\u4e00\u4e2a\u540d\u5b57pool, \u8be5\u540d\u5b57\u6307\u5411 __init__.py \u7684\u540d\u79f0\u7a7a\u95f4 \u5bfc\u5305\u5c31\u662f\u5728\u5bfc\u5165\u5305\u4e0b\u7684 __init__.py \u6587\u4ef6 \u2605 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5305\u5c06aaa.py\u6587\u4ef6\u4e2d\u7684\u4e09\u4e2a\u51fd\u6570\u653e\u5230\u4e0d\u540c\u7684\u6587\u4ef6\u4e2d.\u800c\u4e14\u4e0d\u5f71\u54cd\u51fd\u6570\u539f\u672c\u7684\u8c03\u7528\u65b9\u5f0f. \"\"\" # -- aaa.py def func1():pass def func2():pass def func3():pass \"\"\" - aaa # -- \u9876\u7ea7\u5305 - __init__ . py - m1 . py # -- \u5b50\u6a21\u5757 - m2 . py - bbb # -- \u5b50\u5305 - __init__ . py - m3 . py - run . py \u7edd\u5bf9\u5bfc\u5165: \u4e00\u822c\u4ee5\u9876\u7ea7\u5305\u4e3a\u8d77\u59cb (\u5f80\u5f80\u4f1a\u5c06\u9876\u7ea7\u5305\u52a0\u5165sys.path\u8def\u5f84\u4e2d) \u76f8\u5bf9\u5bfc\u5165: \u5f00\u59cb\u4f4d\u7f6e\u7684 . \u4ee3\u8868\u5f53\u524d\u6587\u4ef6\u6240\u5728\u7684\u76ee\u5f55, .. \u4ee3\u8868\u5f53\u524d\u76ee\u5f55\u7684\u4e0a\u4e00\u7ea7\u76ee\u5f55, \u4ee5\u6b64\u7c7b\u63a8! \u9488\u5bf9\u5305\u5185\u90e8\u6a21\u5757\u4e4b\u95f4\u7684\u76f8\u4e92\u5bfc\u5165\u63a8\u8350\u4f7f\u7528\u76f8\u5bf9\u5bfc\u5165,\u9700\u8981\u7279\u522b\u5f3a\u8c03 1> \u76f8\u5bf9\u5bfc\u5165\u53ea\u80fd\u5728\u5305\u5185\u90e8\u4f7f\u7528, \u7528\u76f8\u5bf9\u5bfc\u5165\u4e0d\u540c\u76ee\u5f55\u4e0b\u7684\u6a21\u5757\u662f\u975e\u6cd5\u7684,\u4e0d\u80fd\u51fa\u5305! 2> \u65e0\u8bba\u662fimport\u8fd8\u662ffrom-import. \u9664\u76f8\u5bf9\u5bfc\u5165\u5f00\u59cb\u4f4d\u7f6e\u7684\u70b9,\u5bfc\u5165\u8bed\u53e5\u4e2d\u5176\u5b83\u4f4d\u7f6e\u7684\u70b9\u4ee3\u8868\u7684\u662f\u8def\u5f84\u5206\u9694\u7b26,\u5e76\u4e14 . \u5de6\u4fa7\u5fc5\u987b\u662f\u4e00\u4e2a\u5305 ! 3> \u4f7f\u7528\u76f8\u5bf9\u5bfc\u5165\u7684python\u6587\u4ef6\u4e0d\u80fd\u4f5c\u4e3a\u76f4\u63a5\u6267\u884c\u7684\u6587\u4ef6!! \u2605 \u5305\u91cc\u5404\u4e2a\u6587\u4ef6\u7684\u4ee3\u7801\u5982\u4e0b \u628a\u5305\u5185\u90e8\u5f88\u6df1\u7684\u4e00\u4e9b\u7c7b\u3001\u51fd\u6570,\u7ed9\u5916\u90e8\u4f7f\u7528,\u53ea\u9700\u5728 __init__.py \u91cc \u6ce8\u518c/\u5bfc\u5165 \u4e00\u4e0b!! \u4e0d\u5728 __init__.py \u91cc\u6ce8\u518c\u7684,\u672c\u610f\u662f\u7ed9\u5305\u5185\u90e8\u7528,\u5982\u679c\u5916\u90e8\u60f3\u7528,\u4f7f\u7528\u5b8c\u6574\u8def\u5f84\u5bfc\u5165\u4f7f\u7528! # -- m1.py def func1 (): pass # -- m2.py def func2 (): pass # -- m3.py def func3 (): pass # -- m4.py def func4 (): pass # -- aaa/__init__.py # -- \u628a\u5305\u5185\u90e8\u5f88\u6df1\u7684\u4e00\u4e9b\u7c7b\u3001\u51fd\u6570,\u7ed9\u5916\u90e8\u4f7f\u7528,\u53ea\u9700\u5728__init__.py\u91cc \u6ce8\u518c/\u5bfc\u5165 \u4e00\u4e0b!! # -- \u4e0d\u5728__init__.py\u91cc\u6ce8\u518c\u7684,\u672c\u610f\u662f\u7ed9\u5305\u5185\u90e8\u7528,\u5982\u679c\u5916\u90e8\u60f3\u7528,\u4f7f\u7528\u5b8c\u6574\u8def\u5f84\u5bfc\u5165\u4f7f\u7528! __all__ = [ 'func1' , 'func2' , 'func3' , 'bbb' ] # -- \u7528\u4e8e\u9650\u5236`from aaa import *`\u4e2d\u7684*\u53f7 from aaa.m1 import func1 # -- \u7edd\u5bf9\u5bfc\u5165 \u7b49\u540c\u4e8efrom .m1 import func1 from .m2 import func2 # -- \u76f8\u5bf9\u5bfc\u5165 from .bbb.m3 import func3 # -- \u7b49\u540c\u4e8e from aaa.bbb.m3 import func3 from . import bbb # -- \u62ff\u5230aaa.bbb # bbb/__init__.py x = 1 # -- run.py # -- \u4e0d\u7ba1\u662f`import ..`,\u8fd8\u662f`from .. import ..`\u5bfc\u5165\u8fc7\u7a0b\u4e2d\u90fd\u4f1a\u4f9d\u6b21\u6267\u884c\u5305\u4e0b\u7684__init__.py import aaa aaa . func1 () # -- \u6765\u81eaaaa.__init__ aaa . func2 () # -- \u6765\u81eaaaa.__init__ aaa . func3 () # -- \u6765\u81eaaaa.__init__ print ( aaa . bbb ) # -- \u6765\u81eaaaa.__init__ print ( aaa . bbb . x ) # -- \u6765\u81eabbb.__init__ # -- \u5206\u6790\u4e0b\u8be5\u5bfc\u5165\u8fc7\u7a0b,\u6267\u884c\u5305aaa\u7684__init__.py,\u7528\u5230\u4e86bbb # \u518d\u6267\u884c\u5305bbb\u4e0b\u7684__init__.py,\u91cc\u9762\u5e76\u6ca1\u6709m3,\u6240\u4ee5\u5c31\u4f1a\u53bbsys.path\u8def\u5f84\u91cc\u9762\u627e # \u6ce8\u610f:\u5305\u662f\u6a21\u5757\u7684\u4e00\u79cd,\u6240\u4ee5\u4e5f\u662f\u8981\u9075\u5faa\u6a21\u5757\u67e5\u627e\u987a\u5e8f\u7684!!! from aaa.bbb.m3 import func3 func3 () \"\"\" scope(\u5305aaa) scope(\u5305bbb) scope(run.py) func1 func4 aaa func2 x func3 func3 bbb \"\"\" \u8f6f\u4ef6\u5f00\u53d1\u76ee\u5f55\u89c4\u8303 \u00b6 - conf # -- \u5b58\u653e\u914d\u7f6e\u6587\u4ef6 - settings . py - lib # -- \u5e93(\u6a21\u5757) \u5b58\u653e\u7a0b\u5e8f\u4e2d\u5e38\u7528\u7684\u81ea\u5b9a\u4e49\u6a21\u5757,\u91cc\u9762\u901a\u5e38\u662f\u4e00\u4e9b\u5171\u4eab\u7684\u529f\u80fd - common . py - core # -- \u5b58\u653e\u6838\u5fc3\u4e1a\u52a1\u903b\u8f91(\u5c55\u793a\u7ed9\u7528\u6237\u770b\u7684\u4e1c\u897f) - src . py - api # -- \u5b58\u653e\u63a5\u53e3\u6587\u4ef6,\u63a5\u53e3\u4e3b\u8981\u7528\u4e8e\u4e3a\u4e1a\u52a1\u903b\u8f91\u63d0\u4f9b\u6570\u636e\u64cd\u4f5c - api . py - db # -- \u5b58\u653e\u64cd\u4f5c\u6570\u636e\u5e93\u76f8\u5173\u6587\u4ef6,\u4e3b\u8981\u7528\u4e8e\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92 - db . txt - log # -- \u5b58\u653e\u7a0b\u5e8f\u7684\u65e5\u5fd7\u4fe1\u606f - access . log - run . py # -- \u7a0b\u5e8f\u7684\u542f\u52a8\u6587\u4ef6,\u4e00\u822c\u653e\u5728\u9879\u76ee\u7684\u6839\u76ee\u5f55\u4e0b # \u56e0\u4e3a\u5728\u8fd0\u884c\u65f6\u4f1a\u9ed8\u8ba4\u5c06\u8fd0\u884c\u6587\u4ef6\u6240\u5728\u7684\u6587\u4ef6\u5939\u4f5c\u4e3asys.path\u7684\u7b2c\u4e00\u4e2a\u8def\u5f84 # \u8fd9\u6837\u5c31\u7701\u53bb\u4e86\u5904\u7406\u73af\u5883\u53d8\u91cf\u7684\u6b65\u9aa4 - setup . py # -- \u5b89\u88c5\u3001\u90e8\u7f72\u3001\u6253\u5305\u7684\u811a\u672c - README # -- \u9879\u76ee\u8bf4\u660e\u6587\u4ef6 - requirements . txt # -- \u5b58\u653e\u8f6f\u4ef6\u4f9d\u8d56\u7684\u5916\u90e8Python\u5305\u5217\u8868 \"\"\" - bin # -- \u5b58\u653e\u53ef\u6267\u884c\u6587\u4ef6 - run.py # -- \u6574\u4e2a\u7a0b\u5e8f\u7684\u5165\u53e3\u6587\u4ef6 \"\"\" setup.py \u4e00\u822c\u6765\u8bf4,\u7528setup.py\u6765\u7ba1\u7406\u4ee3\u7801\u7684\u6253\u5305\u3001\u5b89\u88c5\u3001\u90e8\u7f72\u95ee\u9898. \u4e1a\u754c\u6807\u51c6\u7684\u5199\u6cd5\u662f\u7528Python\u6d41\u884c\u7684\u6253\u5305\u5de5\u5177setuptools\u6765\u7ba1\u7406\u8fd9\u4e9b\u4e8b\u60c5,\u8fd9\u79cd\u65b9\u5f0f\u666e\u904d\u5e94\u7528\u4e8e\u5f00\u6e90\u9879\u76ee\u4e2d. \u4e0d\u8fc7\u8fd9\u91cc\u7684\u6838\u5fc3\u601d\u60f3\u4e0d\u662f\u7528\u6807\u51c6\u5316\u7684\u5de5\u5177\u6765\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898,\u800c\u662f\u8bf4,\u4e00\u4e2a\u9879\u76ee\u4e00\u5b9a\u8981\u6709\u4e00\u4e2a\u5b89\u88c5\u90e8\u7f72\u5de5\u5177. \u80fd\u5feb\u901f\u4fbf\u6377\u7684\u5728\u4e00\u53f0\u65b0\u673a\u5668\u4e0a\u5c06\u73af\u5883\u88c5\u597d\u3001\u4ee3\u7801\u90e8\u7f72\u597d\u548c\u5c06\u7a0b\u5e8f\u8fd0\u884c\u8d77\u6765. requirements.txt requirements.txt\u6587\u4ef6\u7684\u5b58\u5728\u662f\u4e3a\u4e86\u65b9\u4fbf\u5f00\u53d1\u8005\u7ef4\u62a4\u8f6f\u4ef6\u7684\u4f9d\u8d56\u5e93. \u6211\u4eec\u9700\u8981\u5c06\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u4f9d\u8d56\u5e93\u7684\u4fe1\u606f\u6dfb\u52a0\u8fdb\u8be5\u6587\u4ef6\u4e2d,\u907f\u514d\u5728 setup.py\u5b89\u88c5\u4f9d\u8d56\u65f6\u6f0f\u6389\u8f6f\u4ef6\u5305. \u540c\u65f6\u4e5f\u65b9\u4fbf\u4e86\u4f7f\u7528\u8005\u660e\u786e\u9879\u76ee\u5f15\u7528\u4e86\u54ea\u4e9bPython\u5305. \u8fd9\u4e2a\u6587\u4ef6\u7684\u683c\u5f0f\u662f\u6bcf\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u5305\u4f9d\u8d56\u7684\u8bf4\u660e,\u901a\u5e38\u662fflask>=0.10\u8fd9\u79cd\u683c\u5f0f,\u8981\u6c42\u662f\u8fd9\u4e2a\u683c\u5f0f\u80fd\u88abpip\u8bc6\u522b. \u8fd9\u6837\u5c31\u53ef\u4ee5\u7b80\u5355\u7684\u901a\u8fc7 pip install -r requirements.txt \u6765\u628a\u6240\u6709Python\u4f9d\u8d56\u5e93\u90fd\u88c5\u597d\u4e86! # -- run.py import sys , os BASE_DIR = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ))) sys . path . append ( BASE_DIR ) from core import src if __name__ == '__main__' : src . run () \"\"\" __file__ \u5f53\u524d\u6587\u4ef6\u6240\u5728\u8def\u5f84 os.path.abspath(__file__) \u5f53\u524d\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84 os.path.dirname() \u83b7\u53d6\u5f53\u524d\u6587\u4ef6\u6240\u5728\u7684\u6587\u4ef6\u5939\u8def\u5f84 \"\"\" # settings.py import os BASE_DIR = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ))) DB_PATH = os . path . join ( BASE_DIR , 'db' , 'db.json' ) LOG_PATH = os . path . join ( BASE_DIR , 'log' , 'access.log' ) LOGIN_TIMEOUT = 5","title":"\u6a21\u5757\u5bfc\u5165\u4e0e\u5305"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/10_%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%8C%85/#_1","text":"\u53c2\u8003\u94fe\u63a5: https://zhuanlan.zhihu.com/p/109127048","title":"\u6a21\u5757"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/10_%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%8C%85/#_2","text":"","title":"\u6a21\u5757\u5bfc\u5165"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/10_%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%8C%85/#_3","text":"# -- 1. python\u5185\u7f6e\u6a21\u5757 # -- 2. \u7b2c\u4e09\u65b9\u6a21\u5757 # -- 3. \u7a0b\u5e8f\u5458\u81ea\u5b9a\u4e49\u6a21\u5757 Ps: \u5728\u6587\u4ef6\u5f00\u5934\u5bfc\u5165\u6a21\u5757\u5c5e\u4e8e\u5168\u5c40\u4f5c\u7528\u57df, \u5728\u51fd\u6570\u5185\u5bfc\u5165\u7684\u6a21\u5757\u5219\u5c5e\u4e8e\u5c40\u90e8\u7684\u4f5c\u7528\u57df","title":"\u5bfc\u5165\u6a21\u5757\u7684\u89c4\u8303"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/10_%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%8C%85/#import","text":"# -- \u6587\u4ef6\u540d:foo.py __all__ = [ 'x' , 'get' ] # -- \u8be5\u5217\u8868\u4e2d\u6240\u6709\u7684\u5143\u7d20\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u7c7b\u578b,\u6bcf\u4e2a\u5143\u7d20\u5bf9\u5e94foo.py\u4e2d\u7684\u4e00\u4e2a\u540d\u5b57 # __all__ \u7528\u4e8e\u63a7\u5236 `from foo import *` \u8bed\u53e5\u4e2d * \u4ee3\u8868\u7684\u610f\u601d x = 1 def get (): print ( x ) def change (): global x x = 0 class Foo : def func ( self ): print ( 'from the func' ) \u60f3\u5728run.py\u6587\u4ef6\u4e2d\u5f15\u7528foo.py\u4e2d\u7684\u529f\u80fd, \u9700\u8981\u4f7f\u7528 import foo , \u9996\u6b21\u5bfc\u5165\u6a21\u5757\u4f1a\u505a\u4e09\u4ef6\u4e8b : 1> \u6267\u884c\u6e90\u6587\u4ef6foo.py\u4ee3\u7801 2> \u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u540d\u79f0\u7a7a\u95f4\u7528\u4e8e\u5b58\u653e\u6e90\u6587\u4ef6\u6267\u884c\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u540d\u5b57 3> \u5728\u5f53\u524d\u6267\u884c\u6587\u4ef6run.py\u6240\u5728\u7684\u5168\u5c40\u540d\u79f0\u7a7a\u95f4\u4e2d\u5f97\u5230\u4e00\u4e2a\u540d\u5b57foo, \u8be5\u540d\u5b57\u6307\u5411\u65b0\u521b\u5efa\u7684\u6a21\u5757\u540d\u79f0\u7a7a\u95f4 \u82e5\u8981\u5f15\u7528\u6a21\u5757\u540d\u79f0\u7a7a\u95f4\u4e2d\u7684\u540d\u5b57,\u9700\u8981\u52a0\u4e0a\u8be5\u524d\u7f00 # -- \u6587\u4ef6\u540d:run.py import foo x = 5 a = foo . x # -- \u5f15\u7528\u6a21\u5757foo\u4e2d\u53d8\u91cfx\u7684\u503c\u8d4b\u503c\u7ed9\u5f53\u524d\u540d\u79f0\u7a7a\u95f4\u4e2d\u7684\u540d\u5b57a foo . get () # -- \u8c03\u7528\u6a21\u5757foo\u7684get\u51fd\u6570 foo . change () # -- \u8c03\u7528\u6a21\u5757foo\u4e2d\u7684change\u51fd\u6570 obj = foo . Foo () # -- \u4f7f\u7528\u6a21\u5757foo\u7684\u7c7bFoo\u6765\u5b9e\u4f8b\u5316\uff0c\u8fdb\u4e00\u6b65\u53ef\u4ee5\u6267\u884cobj.func() \u6ce8\u610f: \u52a0\u4e0a foo. \u4f5c\u4e3a\u524d\u7f00\u5c31\u76f8\u5f53\u4e8e\u6307\u540d\u9053\u59d3\u5730\u8bf4\u660e\u8981\u5f15\u7528foo\u540d\u79f0\u7a7a\u95f4\u4e2d\u7684\u540d\u5b57, \u6240\u4ee5 \u80af\u5b9a\u4e0d\u4f1a\u4e0e\u5f53\u524d\u6267\u884c\u6587\u4ef6\u6240\u5728\u540d\u79f0\u7a7a\u95f4\u4e2d\u7684\u540d\u5b57\u76f8\u51b2\u7a81 , \u5e76\u4e14\u82e5\u5f53\u524d\u6267\u884c\u6587\u4ef6\u7684\u540d\u79f0\u7a7a\u95f4\u4e2d\u5b58\u5728x, \u6267\u884c foo.get() \u6216 foo.change() \u64cd\u4f5c\u7684\u90fd\u662f \u6e90\u6587\u4ef6\u4e2d\u7684 \u5168\u5c40\u53d8\u91cfx","title":"import\u8bed\u53e5"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/10_%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%8C%85/#from-import","text":"from..import..\u4e0eimport\u8bed\u53e5\u57fa\u672c\u4e00\u81f4, \u4e5f\u4f1a\u6709\u90a3\u4e09\u4e2a\u6b65\u9aa4 \u552f\u4e00\u4e0d\u540c\u7684\u662f: \u4f7f\u7528 import foo \u5bfc\u5165\u6a21\u5757\u540e, \u5f15\u7528\u6a21\u5757\u4e2d\u7684\u540d\u5b57\u90fd\u9700\u8981\u52a0\u4e0afoo.\u4f5c\u4e3a\u524d\u7f00; \u800c\u4f7f\u7528 from foo import x,get,change,Foo \u5219\u53ef\u4ee5\u5728\u5f53\u524d\u6267\u884c\u6587\u4ef6\u4e2d\u76f4\u63a5\u5f15\u7528\u6a21\u5757foo\u4e2d\u7684\u540d\u5b57. # -- \u6587\u4ef6\u540d:run.py from foo import x , get , change # -- \u5c06\u6a21\u5757foo\u4e2d\u7684x\u548cget\u5bfc\u5165\u5230\u5f53\u524d\u6267\u884c\u6587\u4ef6run.py\u7684\u5168\u5c40\u540d\u79f0\u7a7a\u95f4 a = x # -- \u76f4\u63a5\u4f7f\u7528\u6a21\u5757foo\u4e2d\u7684x\u8d4b\u503c\u7ed9a get () # -- \u76f4\u63a5\u6267\u884cfoo\u4e2d\u7684get\u51fd\u6570 change () # -- \u5373\u4fbf\u662f\u5f53\u524d\u6709\u91cd\u540d\u7684x,\u4fee\u6539\u7684\u4ecd\u7136\u662f\u6e90\u6587\u4ef6foo.py\u4e2d\u7684x \"\"\" \u601d\u8003\u4e86\u4e0b,change()\u540e,run.py\u4e2da\u53d8\u91cf\u7684\u503c\u662f\u5426\u4e00\u540c\u6539\u53d8,\u53d6\u51b3\u4e8efoo.py\u4e2d\u7684x\u53d8\u91cf\u662f\u53ef\u53d8\u7c7b\u578b,\u8fd8\u662f\u4e0d\u53ef\u53d8\u7c7b\u578b. \u4e0b\u9762 \"\u91cd\u590d\u5bfc\u5165\" \u7684\u90e8\u5206\u4f1a\u5305\u542b\u8fd9\u90e8\u5206\u601d\u8003\u7684\u5206\u6790. \"\"\" from foo import * # -- \u628afoo\u4e2d\u6240\u6709\u7684\u540d\u5b57\u90fd\u5bfc\u5165\u5230\u5f53\u524d\u6267\u884c\u6587\u4ef6\u7684\u540d\u79f0\u7a7a\u95f4\u4e2d \u82e5\u6211\u4eec\u9700\u8981\u5f15\u7528\u6a21\u5757\u4e2d\u7684\u540d\u5b57\u8fc7\u591a\u7684\u8bdd , \u53ef\u4ee5\u91c7\u7528\u4e0a\u8ff0\u7684\u5bfc\u5165\u5f62\u5f0f\u6765\u8fbe\u5230\u8282\u7701\u4ee3\u7801\u91cf\u7684\u6548\u679c . \u8fd9\u4f1a\u5bfc\u81f4\u6211\u4eec\u65e0\u6cd5\u641e\u6e05\u695a\u7a76\u7adf\u4ece\u6e90\u6587\u4ef6\u4e2d\u5bfc\u5165\u4e86\u54ea\u4e9b\u540d\u5b57\u5230\u5f53\u524d\u4f4d\u7f6e , \u8fd9\u6781\u6709\u53ef\u80fd\u4e0e\u5f53\u524d\u4f4d\u7f6e\u7684\u540d\u5b57\u4ea7\u751f\u51b2\u7a81 \u9700\u8981\u5f3a\u8c03\u7684\u662f : \u53ea\u80fd\u5728\u6a21\u5757\u6700\u9876\u5c42\u4f7f\u7528\u7684\u65b9\u5f0f\u5bfc\u5165 , \u5728\u51fd\u6570\u5185\u5219\u975e\u6cd5 .. \u6a21\u5757\u7684\u7f16\u5199\u8005\u53ef\u4ee5\u5728\u81ea\u5df1\u7684\u6587\u4ef6\u4e2d\u5b9a\u4e49__all__\u53d8\u91cf\u7528\u6765\u63a7\u5236 * \u4ee3\u8868\u7684\u610f\u601d \u65e0\u9700\u52a0\u524d\u7f00\u7684\u597d\u5904\u662f\u4f7f\u5f97\u6211\u4eec\u7684\u4ee3\u7801\u66f4\u52a0\u7b80\u6d01, \u574f\u5904\u5219\u662f\u5bb9\u6613\u4e0e\u5f53\u524d\u540d\u79f0\u7a7a\u95f4\u4e2d\u7684\u540d\u5b57\u51b2\u7a81. \u5982\u679c\u5f53\u524d\u540d\u79f0\u7a7a\u95f4\u5b58\u5728\u76f8\u540c\u7684\u540d\u5b57, \u5219\u540e\u5b9a\u4e49\u7684\u540d\u5b57\u4f1a\u8986\u76d6\u4e4b\u524d\u5b9a\u4e49\u7684\u540d\u5b57.","title":"from-import\u8bed\u53e5"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/10_%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%8C%85/#_4","text":"\u5f3a\u8c03: \u7b2c\u4e00\u6b21\u5bfc\u5165\u6a21\u5757\u5df2\u7ecf\u5c06\u5176\u52a0\u8f7d\u5230\u5185\u5b58\u7a7a\u95f4\u4e86,\u4e4b\u540e\u7684\u91cd\u590d\u5bfc\u5165( \u4e0d\u7ba1\u662f\u5f53\u524d\u53ef\u6267\u884c\u6587\u4ef6\u7684\u91cd\u590d\u5bfc\u5165,\u8fd8\u662f\u591a\u4e2a\u6587\u4ef6\u5bfc\u5165\u540c\u4e00\u4e2a\u6a21\u5757 )\u4f1a\u76f4\u63a5\u5f15\u7528\u5185\u5b58\u4e2d\u5df2\u5b58\u5728\u7684\u6a21\u5757(\u5df2\u7ecf\u5b58\u5728\u7684\u547d\u540d\u7a7a\u95f4),\u4e0d\u4f1a\u91cd\u590d\u6267\u884c\u5bfc\u5165\u7684\u6a21\u5757 \"\"\"\u6267\u884crun.py \u7ed3\u679c\u5982\u4e0b: 10 [] 12 [1] 10 [1] \u8fd9\u6837\u5206\u6790: scope(run.py) scope(a.py) scope(b.py) heap\u5806\u533a x:Ox101 x:Ox101 --> x:Ox301 a Ox101 10 y:Ox201 y:Ox201 Ox201 [] --> [1] change_x Ox301 12 change_y id(change_x) id(change_y) \u8bb0\u4f4f\u4e00\u4e2a\u539f\u5219\u5373\u53ef: `from a import x,y` \u65b9\u5f0f\u5bfc\u5165\u8fdbscope(run.py)\u7684x,y x\u662f\u4e0d\u53ef\u53d8\u53d8\u91cf,\u6e90\u6587\u4ef6a.py\u4e2d\u7684x\u6539\u53d8\u4e86,run.py\u4e2d\u7684x\u4e0d\u4f1a\u6539\u53d8,\u56e0\u4e3a\u5f15\u7528\u8ba1\u6570\u4e0d\u4e3a0 y\u662f\u53ef\u53d8\u53d8\u91cf,\u5176\u503c\u53ef\u4ee5\u539f\u5730\u6539\u53d8.\u9700\u8981\u6ce8\u610f\u54c8! `import a` \u65b9\u5f0f\u5bfc\u5165,\u8981\u8bbf\u95eescope(a.py)\u4e2d\u7684\u540d\u5b57 \u662f\u9700\u8981\u52a0\u524d\u7f00\u7684! scope(a.py)\u4e2d\u7684x\u503c\u53d8\u4e86,a.x\u65b9\u5f0f\u8bbf\u95ee,\u7ed3\u679c\u80af\u5b9a\u4e5f\u4f1a\u53d8\u5566. \"\"\" # -- a.py x = 10 y = [] def change_x (): global x x = 12 def change_y (): y . append ( 1 ) # -- run.py from a import x , y print ( x ) # 10 print ( y ) # [] import b print ( x ) # 10 print ( y ) # [1] # -- b.py import a a . change_x () a . change_y () print ( a . x ) # 12 print ( a . y ) # [1]","title":"\u91cd\u590d\u5bfc\u5165"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/10_%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%8C%85/#as","text":"import foo as f # -- \u4e3a\u5bfc\u5165\u7684\u6a21\u5757foo\u5728\u5f53\u524d\u4f4d\u7f6e\u8d77\u522b\u540df from foo import get as get_x # -- \u8fd8\u53ef\u4ee5\u4e3a\u5bfc\u5165\u7684\u67d0\u4e2a\u540d\u5b57\u8d77\u522b\u540d \u4e3a\u5173\u952e\u5b57import\u540e\u5bfc\u5165\u7684\u540d\u5b57\u8d77\u522b\u540d,\u6709\u4e09\u5927\u597d\u5904 1> \u88ab\u5bfc\u5165\u7684\u540d\u5b57\u8fc7\u957f\u65f6\u91c7\u7528\u8d77\u522b\u540d\u7684\u65b9\u5f0f\u6765\u7cbe\u7b80\u4ee3\u7801; 2> \u4e3a\u88ab\u5bfc\u5165\u7684\u540d\u5b57\u8d77\u522b\u540d\u53ef\u4ee5\u5f88\u597d\u5730\u907f\u514d\u4e0e\u5f53\u524d\u540d\u5b57\u53d1\u751f\u51b2\u7a81; 3> \u8fd8\u53ef\u4ee5\u4fdd\u6301\u8c03\u7528\u65b9\u5f0f\u7684\u4e00\u81f4\u6027 \"\"\" \u6211\u4eec\u6709\u4e24\u4e2a\u6a21\u5757json\u548cpickle\u540c\u65f6\u5b9e\u73b0\u4e86load\u65b9\u6cd5,\u4f5c\u7528\u662f\u4ece\u4e00\u4e2a\u6253\u5f00\u7684\u6587\u4ef6\u4e2d\u89e3\u6790\u51fa\u7ed3\u6784\u5316\u7684\u6570\u636e. \u4f46\u89e3\u6790\u7684\u683c\u5f0f\u4e0d\u540c\u53ef\u4ee5\u7528\u4e0b\u8ff0\u4ee3\u7801\u6709\u9009\u62e9\u6027\u5730\u52a0\u8f7d\u4e0d\u540c\u7684\u6a21\u5757 \"\"\" if data_format == 'json' : import json as serialize # -- \u5982\u679c\u6570\u636e\u683c\u5f0f\u662fjson,\u90a3\u4e48\u5bfc\u5165json\u6a21\u5757\u5e76\u8d77\u522b\u540d/\u547d\u540d\u4e3aserialize elif data_format == 'pickle' : import pickle as serialize # -- \u5982\u679c\u6570\u636e\u683c\u5f0f\u662fpickle,\u90a3\u4e48\u5bfc\u5165pickle\u6a21\u5757\u5e76\u547d\u540d\u4e3aserialize data = serialize . load ( fn ) # -- \u6700\u7ec8\u8c03\u7528\u7684\u65b9\u5f0f\u662f\u4e00\u81f4\u7684","title":"\u5176\u5b83\u5bfc\u5165\u8bed\u6cd5(as)"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/10_%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%8C%85/#_5","text":"\u5faa\u73af\u5bfc\u5165\u95ee\u9898\u6307\u7684\u662f\u5728\u4e00\u4e2a\u6a21\u5757\u52a0\u8f7d/\u5bfc\u5165\u7684\u8fc7\u7a0b\u4e2d\u5bfc\u5165\u53e6\u5916\u4e00\u4e2a\u6a21\u5757, \u800c\u5728\u53e6\u5916\u4e00\u4e2a\u6a21\u5757\u4e2d\u53c8\u8fd4\u56de\u6765\u5bfc\u5165\u7b2c\u4e00\u4e2a\u6a21\u5757\u4e2d\u7684\u540d\u5b57, \u7531\u4e8e\u7b2c\u4e00\u4e2a\u6a21\u5757\u5c1a\u672a\u52a0\u8f7d\u5b8c\u6bd5 , \u6240\u4ee5\u5f15\u7528\u5931\u8d25\u3001\u629b\u51fa\u5f02\u5e38. \u7a76\u5176\u6839\u6e90 \u5c31\u662f\u5728python\u4e2d, \u540c\u4e00\u4e2a\u6a21\u5757\u53ea\u4f1a\u5728\u7b2c\u4e00\u6b21\u5bfc\u5165\u65f6\u6267\u884c\u5176\u5185\u90e8\u4ee3\u7801, \u518d\u6b21\u5bfc\u5165\u8be5\u6a21\u5757\u65f6, \u5373\u4fbf\u662f\u8be5\u6a21\u5757\u5c1a\u672a\u5b8c\u5168\u52a0\u8f7d\u5b8c\u6bd5\u4e5f\u4e0d\u4f1a\u53bb\u91cd\u590d\u6267\u884c\u5185\u90e8\u4ee3\u7801.. # -- m1.py print ( '\u6b63\u5728\u6267\u884cm1.py\u6587\u4ef6' ) from m2 import y x = 'm1' # -- m2.py print ( '\u6b63\u5728\u6267\u884cm2.py\u6587\u4ef6' ) from m1 import x y = 'm2' # -- run.py import m1","title":"\u5faa\u73af\u5bfc\u5165\u95ee\u9898"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/10_%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%8C%85/#_6","text":"\u2605 \u8fd0\u884crun . py 1 > ` import m1 ` run . py\u5bfc\u5165\u6a21\u5757m1 , \u5f00\u59cb\u6267\u884cm1 . py\u4e2d\u7684\u5185\u90e8\u4ee3\u7801 2 > ` from m2 import y ` m1\u6a21\u5757\u4e2d\u5bfc\u5165\u4e86m2\u6a21\u5757 , \u5f00\u59cb\u6267\u884cm2 . py\u4e2d\u7684\u5185\u90e8\u4ee3\u7801 3 > ` from m1 import x ` m2\u6a21\u5757\u4e2d\u53c8\u5bfc\u5165\u4e86\u8fd8\u672a\u6765\u5f97\u53ca\u52a0\u8f7d\u5b8c\u7684m1\u6a21\u5757 ( \u6ce8\u610f : \u6b64\u5904m1\u6a21\u5757\u88ab\u91cd\u590d\u5bfc\u5165\u4e86 , \u4e0d\u4f1a\u91cd\u65b0\u6267\u884cm1 . py\u5185\u90e8\u4ee3\u7801 ) \u5e76\u5f15\u7528scope ( m1 . py ) \u8fd8\u6ca1\u6765\u5f97\u53ca\u52a0\u8f7d\u7684x\u540d\u5b57 , \u62a5\u9519 .","title":"\u6d4b\u8bd5\u4e00"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/10_%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%8C%85/#_7","text":"\u5f3a\u8c03: \u6267\u884c\u6587\u4ef6\u4e0d\u7b49\u4e8e\u5bfc\u5165\u6587\u4ef6 , \u6bd4\u5982\u6267\u884cm1.py\u4e0d\u7b49\u4e8e\u5bfc\u5165\u4e86m1 \u5373 \u6267\u884c\u6587\u4ef6\u5f00\u8f9f\u7684\u7a7a\u95f4\u8ddf\u9996\u6b21\u5bfc\u5165\u8be5\u6a21\u5757\u5f00\u8f9f\u7684\u7a7a\u95f4\u4e0d\u662f\u540c\u4e00\u4e2a\u7a7a\u95f4! \u2605 \u8fd0\u884cm1 . py 1 > ` from m2 import y ` m1\u6a21\u5757\u4e2d\u5bfc\u5165\u4e86m2\u6a21\u5757 , \u5f00\u59cb\u6267\u884cm2 . py\u4e2d\u7684\u5185\u90e8\u4ee3\u7801 2 > ` from m1 import x ` m2\u6a21\u5757\u4e2d\u5bfc\u5165\u4e86m1\u6a21\u5757 , \u5f00\u59cb\u6267\u884cm1 . py\u4e2d\u7684\u5185\u90e8\u4ee3\u7801 3 > ` from m2 import y ` ( \u6ce8\u610f : \u6b64\u5904m2\u6a21\u5757\u88ab\u91cd\u590d\u5bfc\u5165\u4e86 , \u4e0d\u4f1a\u91cd\u65b0\u6267\u884cm2 . py\u5185\u90e8\u4ee3\u7801 ) So , m1\u6a21\u5757\u4e2d\u53c8\u5bfc\u5165\u4e86\u8fd8\u672a\u6765\u5f97\u53ca\u52a0\u8f7d\u5b8c\u7684m2\u6a21\u5757 \u5e76\u5f15\u7528scope ( m2 . py ) \u8fd8\u6ca1\u6765\u5f97\u53ca\u52a0\u8f7d\u7684y\u540d\u5b57 , \u62a5\u9519 . \"\"\" \u6b63\u5728\u6267\u884cm1.py\u6587\u4ef6 \u6b63\u5728\u6267\u884cm2.py\u6587\u4ef6 \u6b63\u5728\u6267\u884cm1.py\u6587\u4ef6 cannot import name 'y' from 'm2' \"\"\"","title":"\u6d4b\u8bd5\u4e8c"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/10_%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%8C%85/#_8","text":"\u65b9\u6848\u4e00: \u5bfc\u5165\u8bed\u53e5\u653e\u5230\u6700\u540e, \u4fdd\u8bc1\u5728\u5bfc\u5165\u65f6, \u6240\u6709\u540d\u5b57\u90fd\u5df2\u7ecf\u52a0\u8f7d\u8fc7 \u65b9\u6848\u4e8c: \u5bfc\u5165\u8bed\u53e5\u653e\u5230\u51fd\u6570\u4e2d, \u53ea\u6709\u5728\u8c03\u7528\u51fd\u6570\u65f6\u624d\u4f1a\u6267\u884c\u5176\u5185\u90e8\u4ee3\u7801 \u5faa\u73af\u5bfc\u5165\u95ee\u9898\u5927\u591a\u6570\u60c5\u51b5\u662f\u56e0\u4e3a\u7a0b\u5e8f\u8bbe\u8ba1\u5931\u8bef\u5bfc\u81f4, \u4e0a\u8ff0\u89e3\u51b3\u65b9\u6848\u4e5f\u53ea\u662f\u5728\u70c2\u8bbe\u8ba1\u4e4b\u4e0a\u7684\u65e0\u5948\u4e4b\u4e3e,\u5728\u6211\u4eec\u7684\u7a0b\u5e8f\u4e2d\u5e94\u8be5\u5c3d\u91cf\u907f\u514d\u51fa\u73b0\u5faa\u73af/\u5d4c\u5957\u5bfc\u5165!! \u5982\u679c\u591a\u4e2a\u6a21\u5757\u786e\u5b9e\u90fd\u9700\u8981\u5171\u4eab\u67d0\u4e9b\u6570\u636e, \u53ef\u4ee5\u5c06\u5171\u4eab\u7684\u6570\u636e\u96c6\u4e2d\u5b58\u653e\u5230\u67d0\u4e00\u4e2a\u5730\u65b9,\u7136\u540e\u8fdb\u884c\u5bfc\u5165","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/10_%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%8C%85/#_9","text":"\u6a21\u5757\u5206\u4e3a\u56db\u4e2a\u901a\u7528\u7c7b\u522b: 1> \u4f7f\u7528\u7eafPython\u4ee3\u7801\u7f16\u5199\u7684py\u6587\u4ef6 2> \u5305\u542b\u4e00\u7cfb\u5217\u6a21\u5757\u7684\u5305 3> \u4f7f\u7528C\u7f16\u5199\u5e76\u94fe\u63a5\u5230Python\u89e3\u91ca\u5668\u4e2d\u7684\u5185\u7f6e\u6a21\u5757 4> \u4f7f\u7528C\u6216C++\u7f16\u8bd1\u7684\u6269\u5c55\u6a21\u5757 \u641c\u7d22\u6a21\u5757\u7684\u8def\u5f84\u4e0e\u4f18\u5148\u7ea7: \u25cb \u5728\u5bfc\u5165\u4e00\u4e2a\u6a21\u5757\u65f6, \u82e5\u8be5\u6a21\u5757\u5df2\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d, \u5219\u76f4\u63a5\u5f15\u7528; \u25cb \u5426\u5219\u4f1a\u4f18\u5148\u67e5\u627e\u5185\u7f6e\u6a21\u5757; \u25cb \u7136\u540e\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u4f9d\u6b21\u68c0\u7d22sys.path\u4e2d\u5b9a\u4e49\u7684\u8def\u5f84, \u76f4\u5230\u627e\u6a21\u5757\u5bf9\u5e94\u7684\u6587\u4ef6\u4e3a\u6b62, \u5426\u5219\u629b\u51fa\u5f02\u5e38. sys.path \u4e5f\u88ab\u79f0\u4e3a \u6a21\u5757\u7684\u641c\u7d22\u8def\u5f84 , \u5b83\u662f\u4e00\u4e2a\u5217\u8868\u7c7b\u578b \"\"\" sys.path\u4e2d\u7684\u7b2c\u4e00\u4e2a\u8def\u5f84\u901a\u5e38\u4e3a\u7a7a,\u4ee3\u8868\u6267\u884c\u6587\u4ef6\u6240\u5728\u7684\u8def\u5f84 \u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u53ef\u4ee5\u5f53\u4f5c\u4e00\u4e2a\u76ee\u5f55\u6765\u770b: \u5728\u5217\u8868\u4e2d\u4f1a\u53d1\u73b0\u6709.zip\u6216.egg\u7ed3\u5c3e\u7684\u6587\u4ef6,\u4e8c\u8005\u662f\u4e0d\u540c\u5f62\u5f0f\u7684\u538b\u7f29\u6587\u4ef6 Python\u652f\u6301\u4ece\u4e00\u4e2a\u538b\u7f29\u6587\u4ef6\u4e2d\u5bfc\u5165\u6a21\u5757 \"\"\" >>> import sys >>> sys . path [ '' , '/Users/One_Piece/Documents' , '/Library/Frameworks/Python.framework/Versions/3.8/lib/python38.zip' , '/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8' , '/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/lib-dynload' , '/Users/One_Piece/Library/Python/3.8/lib/python/site-packages' , '/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages' ] sys.path\u4e2d\u7684\u7b2c\u4e00\u4e2a\u8def\u5f84\u901a\u5e38\u4e3a\u7a7a, \u4ee3\u8868\u6267\u884c\u6587\u4ef6\u6240\u5728\u7684\u8def\u5f84. 1> \u5728\u88ab\u5bfc\u5165\u6a21\u5757\u4e0e\u6267\u884c\u6587\u4ef6\u5728\u540c\u4e00\u76ee\u5f55\u4e0b\u65f6\u80af\u5b9a\u662f\u53ef\u4ee5\u6b63\u5e38\u5bfc\u5165\u7684; 2> \u9488\u5bf9\u88ab\u5bfc\u5165\u7684\u6a21\u5757\u4e0e\u6267\u884c\u6587\u4ef6\u5728\u4e0d\u540c\u8def\u5f84\u4e0b\u7684\u60c5\u51b5, \u4e3a\u4e86\u786e\u4fdd\u6a21\u5757\u5bf9\u5e94\u7684\u6e90\u6587\u4ef6\u4ecd\u53ef\u4ee5\u88ab\u627e\u5230. \u9700\u8981\u5c06\u6e90\u6587\u4ef6foo.py\u6240\u5728\u7684\u8def\u5f84\u6dfb\u52a0\u5230sys.path\u4e2d, \u5047\u8bbefoo.py\u6240\u5728\u7684\u8def\u5f84\u4e3a/pythoner/projects/ import sys # -- \u4e5f\u53ef\u4ee5\u4f7f\u7528sys.path.insert() sys . path . append ( r '/pythoner/projects/' ) import foo","title":"\u6a21\u5757\u7684\u67e5\u627e\u987a\u5e8f"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/10_%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%8C%85/#py","text":"1> \u88ab\u5f53\u4e3b\u7a0b\u5e8f/\u811a\u672c\u6267\u884c __name__ \u88ab\u8d4b\u503c\u4e3a __main__ 2> \u88ab\u5f53\u6a21\u5757\u5bfc\u5165 __name__ \u88ab\u8d4b\u503c\u4e3a\u6a21\u5757\u540d # -- foo.py # \u7565 \u7565 \u7565 # -- foo.py\u88ab\u5f53\u505a\u6a21\u5757\u5bfc\u5165\u65f6\u8fd0\u884c\u7684\u4ee3\u7801,\u4e0d\u4f1a\u6267\u884c\u6d4b\u8bd5\u4ee3\u7801 if __name__ == '__main__' : # -- foo.py\u88ab\u5f53\u505a\u811a\u672c\u6267\u884c\u65f6\u8fd0\u884c\u7684\u6d4b\u8bd5\u4ee3\u7801","title":"PY\u6587\u4ef6\u7684\u7528\u9014"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/10_%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%8C%85/#_10","text":"\u53c2\u8003\u94fe\u63a5: https://zhuanlan.zhihu.com/p/109221768","title":"\u5305"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/10_%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%8C%85/#_11","text":"\u968f\u7740\u6a21\u5757\u6570\u76ee\u7684\u589e\u591a, \u628a\u6240\u6709\u6a21\u5757\u4e0d\u52a0\u533a\u5206\u5730\u653e\u5230\u4e00\u8d77\u4e5f\u662f\u6781\u4e0d\u5408\u7406\u7684.\u521b\u5efa\u4e00\u4e2a\u5305\u53ef\u4ee5\u628a\u6a21\u5757\u7ec4\u7ec7\u5230\u4e00\u8d77. \u5305\u5c31\u662f\u4e00\u4e2a\u542b\u6709 __init__.py \u6587\u4ef6\u7684\u6587\u4ef6\u5939, \u6587\u4ef6\u5939\u5185\u53ef\u4ee5\u7ec4\u7ec7 \u5b50\u6a21\u5757 \u6216 \u5b50\u5305 ! - aaa # -- \u9876\u7ea7\u5305 - __init__ . py - m1 . py # -- \u5b50\u6a21\u5757 - m2 . py - bbb # -- \u5b50\u5305 - __init__ . py - m3 . py - run . py \u5f3a\u8c03: 1> py3\u4e2d, \u5373\u4f7f\u5305\u4e0b\u6ca1\u6709 __init__.py \u6587\u4ef6, import \u5305 \u4e5f\u4e0d\u4f1a\u62a5\u9519; \u800c\u5728py2\u4e2d, \u5305\u4e0b \u4e00\u5b9a \u8981\u6709\u8be5\u6587\u4ef6, \u5426\u5219import\u5305\u62a5\u9519!! 2> \u8bb0\u4f4f, \u5305\u5c5e\u4e8e\u6a21\u5757\u7684\u4e00\u79cd , \u56e0\u800c\u5305\u4ee5\u53ca\u5305\u5185\u7684\u6a21\u5757\u5747\u662f\u7528\u6765\u88ab\u5bfc\u5165\u4f7f\u7528\u7684, \u800c\u7edd\u975e\u88ab\u76f4\u63a5\u6267\u884c!!","title":"\u5305\u662f\u4ec0\u4e48?"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/10_%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%8C%85/#_12","text":"\u9996\u6b21\u5bfc\u5165\u5305 \u5982 import pool \u540c\u6837\u4f1a\u505a\u4e09\u4ef6\u4e8b: 1> \u6267\u884c\u5305\u4e0b\u7684 __init__.py \u6587\u4ef6 2> \u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u540d\u79f0\u7a7a\u95f4\u7528\u4e8e\u5b58\u653e __init__.py \u6267\u884c\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u540d\u5b57 3> \u5728\u5f53\u524d\u6267\u884c\u6587\u4ef6\u6240\u5728\u7684\u540d\u79f0\u7a7a\u95f4\u4e2d\u5f97\u5230\u4e00\u4e2a\u540d\u5b57pool, \u8be5\u540d\u5b57\u6307\u5411 __init__.py \u7684\u540d\u79f0\u7a7a\u95f4 \u5bfc\u5305\u5c31\u662f\u5728\u5bfc\u5165\u5305\u4e0b\u7684 __init__.py \u6587\u4ef6 \u2605 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5305\u5c06aaa.py\u6587\u4ef6\u4e2d\u7684\u4e09\u4e2a\u51fd\u6570\u653e\u5230\u4e0d\u540c\u7684\u6587\u4ef6\u4e2d.\u800c\u4e14\u4e0d\u5f71\u54cd\u51fd\u6570\u539f\u672c\u7684\u8c03\u7528\u65b9\u5f0f. \"\"\" # -- aaa.py def func1():pass def func2():pass def func3():pass \"\"\" - aaa # -- \u9876\u7ea7\u5305 - __init__ . py - m1 . py # -- \u5b50\u6a21\u5757 - m2 . py - bbb # -- \u5b50\u5305 - __init__ . py - m3 . py - run . py \u7edd\u5bf9\u5bfc\u5165: \u4e00\u822c\u4ee5\u9876\u7ea7\u5305\u4e3a\u8d77\u59cb (\u5f80\u5f80\u4f1a\u5c06\u9876\u7ea7\u5305\u52a0\u5165sys.path\u8def\u5f84\u4e2d) \u76f8\u5bf9\u5bfc\u5165: \u5f00\u59cb\u4f4d\u7f6e\u7684 . \u4ee3\u8868\u5f53\u524d\u6587\u4ef6\u6240\u5728\u7684\u76ee\u5f55, .. \u4ee3\u8868\u5f53\u524d\u76ee\u5f55\u7684\u4e0a\u4e00\u7ea7\u76ee\u5f55, \u4ee5\u6b64\u7c7b\u63a8! \u9488\u5bf9\u5305\u5185\u90e8\u6a21\u5757\u4e4b\u95f4\u7684\u76f8\u4e92\u5bfc\u5165\u63a8\u8350\u4f7f\u7528\u76f8\u5bf9\u5bfc\u5165,\u9700\u8981\u7279\u522b\u5f3a\u8c03 1> \u76f8\u5bf9\u5bfc\u5165\u53ea\u80fd\u5728\u5305\u5185\u90e8\u4f7f\u7528, \u7528\u76f8\u5bf9\u5bfc\u5165\u4e0d\u540c\u76ee\u5f55\u4e0b\u7684\u6a21\u5757\u662f\u975e\u6cd5\u7684,\u4e0d\u80fd\u51fa\u5305! 2> \u65e0\u8bba\u662fimport\u8fd8\u662ffrom-import. \u9664\u76f8\u5bf9\u5bfc\u5165\u5f00\u59cb\u4f4d\u7f6e\u7684\u70b9,\u5bfc\u5165\u8bed\u53e5\u4e2d\u5176\u5b83\u4f4d\u7f6e\u7684\u70b9\u4ee3\u8868\u7684\u662f\u8def\u5f84\u5206\u9694\u7b26,\u5e76\u4e14 . \u5de6\u4fa7\u5fc5\u987b\u662f\u4e00\u4e2a\u5305 ! 3> \u4f7f\u7528\u76f8\u5bf9\u5bfc\u5165\u7684python\u6587\u4ef6\u4e0d\u80fd\u4f5c\u4e3a\u76f4\u63a5\u6267\u884c\u7684\u6587\u4ef6!! \u2605 \u5305\u91cc\u5404\u4e2a\u6587\u4ef6\u7684\u4ee3\u7801\u5982\u4e0b \u628a\u5305\u5185\u90e8\u5f88\u6df1\u7684\u4e00\u4e9b\u7c7b\u3001\u51fd\u6570,\u7ed9\u5916\u90e8\u4f7f\u7528,\u53ea\u9700\u5728 __init__.py \u91cc \u6ce8\u518c/\u5bfc\u5165 \u4e00\u4e0b!! \u4e0d\u5728 __init__.py \u91cc\u6ce8\u518c\u7684,\u672c\u610f\u662f\u7ed9\u5305\u5185\u90e8\u7528,\u5982\u679c\u5916\u90e8\u60f3\u7528,\u4f7f\u7528\u5b8c\u6574\u8def\u5f84\u5bfc\u5165\u4f7f\u7528! # -- m1.py def func1 (): pass # -- m2.py def func2 (): pass # -- m3.py def func3 (): pass # -- m4.py def func4 (): pass # -- aaa/__init__.py # -- \u628a\u5305\u5185\u90e8\u5f88\u6df1\u7684\u4e00\u4e9b\u7c7b\u3001\u51fd\u6570,\u7ed9\u5916\u90e8\u4f7f\u7528,\u53ea\u9700\u5728__init__.py\u91cc \u6ce8\u518c/\u5bfc\u5165 \u4e00\u4e0b!! # -- \u4e0d\u5728__init__.py\u91cc\u6ce8\u518c\u7684,\u672c\u610f\u662f\u7ed9\u5305\u5185\u90e8\u7528,\u5982\u679c\u5916\u90e8\u60f3\u7528,\u4f7f\u7528\u5b8c\u6574\u8def\u5f84\u5bfc\u5165\u4f7f\u7528! __all__ = [ 'func1' , 'func2' , 'func3' , 'bbb' ] # -- \u7528\u4e8e\u9650\u5236`from aaa import *`\u4e2d\u7684*\u53f7 from aaa.m1 import func1 # -- \u7edd\u5bf9\u5bfc\u5165 \u7b49\u540c\u4e8efrom .m1 import func1 from .m2 import func2 # -- \u76f8\u5bf9\u5bfc\u5165 from .bbb.m3 import func3 # -- \u7b49\u540c\u4e8e from aaa.bbb.m3 import func3 from . import bbb # -- \u62ff\u5230aaa.bbb # bbb/__init__.py x = 1 # -- run.py # -- \u4e0d\u7ba1\u662f`import ..`,\u8fd8\u662f`from .. import ..`\u5bfc\u5165\u8fc7\u7a0b\u4e2d\u90fd\u4f1a\u4f9d\u6b21\u6267\u884c\u5305\u4e0b\u7684__init__.py import aaa aaa . func1 () # -- \u6765\u81eaaaa.__init__ aaa . func2 () # -- \u6765\u81eaaaa.__init__ aaa . func3 () # -- \u6765\u81eaaaa.__init__ print ( aaa . bbb ) # -- \u6765\u81eaaaa.__init__ print ( aaa . bbb . x ) # -- \u6765\u81eabbb.__init__ # -- \u5206\u6790\u4e0b\u8be5\u5bfc\u5165\u8fc7\u7a0b,\u6267\u884c\u5305aaa\u7684__init__.py,\u7528\u5230\u4e86bbb # \u518d\u6267\u884c\u5305bbb\u4e0b\u7684__init__.py,\u91cc\u9762\u5e76\u6ca1\u6709m3,\u6240\u4ee5\u5c31\u4f1a\u53bbsys.path\u8def\u5f84\u91cc\u9762\u627e # \u6ce8\u610f:\u5305\u662f\u6a21\u5757\u7684\u4e00\u79cd,\u6240\u4ee5\u4e5f\u662f\u8981\u9075\u5faa\u6a21\u5757\u67e5\u627e\u987a\u5e8f\u7684!!! from aaa.bbb.m3 import func3 func3 () \"\"\" scope(\u5305aaa) scope(\u5305bbb) scope(run.py) func1 func4 aaa func2 x func3 func3 bbb \"\"\"","title":"\u5305\u7684\u4f7f\u7528"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/10_%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%8C%85/#_13","text":"- conf # -- \u5b58\u653e\u914d\u7f6e\u6587\u4ef6 - settings . py - lib # -- \u5e93(\u6a21\u5757) \u5b58\u653e\u7a0b\u5e8f\u4e2d\u5e38\u7528\u7684\u81ea\u5b9a\u4e49\u6a21\u5757,\u91cc\u9762\u901a\u5e38\u662f\u4e00\u4e9b\u5171\u4eab\u7684\u529f\u80fd - common . py - core # -- \u5b58\u653e\u6838\u5fc3\u4e1a\u52a1\u903b\u8f91(\u5c55\u793a\u7ed9\u7528\u6237\u770b\u7684\u4e1c\u897f) - src . py - api # -- \u5b58\u653e\u63a5\u53e3\u6587\u4ef6,\u63a5\u53e3\u4e3b\u8981\u7528\u4e8e\u4e3a\u4e1a\u52a1\u903b\u8f91\u63d0\u4f9b\u6570\u636e\u64cd\u4f5c - api . py - db # -- \u5b58\u653e\u64cd\u4f5c\u6570\u636e\u5e93\u76f8\u5173\u6587\u4ef6,\u4e3b\u8981\u7528\u4e8e\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92 - db . txt - log # -- \u5b58\u653e\u7a0b\u5e8f\u7684\u65e5\u5fd7\u4fe1\u606f - access . log - run . py # -- \u7a0b\u5e8f\u7684\u542f\u52a8\u6587\u4ef6,\u4e00\u822c\u653e\u5728\u9879\u76ee\u7684\u6839\u76ee\u5f55\u4e0b # \u56e0\u4e3a\u5728\u8fd0\u884c\u65f6\u4f1a\u9ed8\u8ba4\u5c06\u8fd0\u884c\u6587\u4ef6\u6240\u5728\u7684\u6587\u4ef6\u5939\u4f5c\u4e3asys.path\u7684\u7b2c\u4e00\u4e2a\u8def\u5f84 # \u8fd9\u6837\u5c31\u7701\u53bb\u4e86\u5904\u7406\u73af\u5883\u53d8\u91cf\u7684\u6b65\u9aa4 - setup . py # -- \u5b89\u88c5\u3001\u90e8\u7f72\u3001\u6253\u5305\u7684\u811a\u672c - README # -- \u9879\u76ee\u8bf4\u660e\u6587\u4ef6 - requirements . txt # -- \u5b58\u653e\u8f6f\u4ef6\u4f9d\u8d56\u7684\u5916\u90e8Python\u5305\u5217\u8868 \"\"\" - bin # -- \u5b58\u653e\u53ef\u6267\u884c\u6587\u4ef6 - run.py # -- \u6574\u4e2a\u7a0b\u5e8f\u7684\u5165\u53e3\u6587\u4ef6 \"\"\" setup.py \u4e00\u822c\u6765\u8bf4,\u7528setup.py\u6765\u7ba1\u7406\u4ee3\u7801\u7684\u6253\u5305\u3001\u5b89\u88c5\u3001\u90e8\u7f72\u95ee\u9898. \u4e1a\u754c\u6807\u51c6\u7684\u5199\u6cd5\u662f\u7528Python\u6d41\u884c\u7684\u6253\u5305\u5de5\u5177setuptools\u6765\u7ba1\u7406\u8fd9\u4e9b\u4e8b\u60c5,\u8fd9\u79cd\u65b9\u5f0f\u666e\u904d\u5e94\u7528\u4e8e\u5f00\u6e90\u9879\u76ee\u4e2d. \u4e0d\u8fc7\u8fd9\u91cc\u7684\u6838\u5fc3\u601d\u60f3\u4e0d\u662f\u7528\u6807\u51c6\u5316\u7684\u5de5\u5177\u6765\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898,\u800c\u662f\u8bf4,\u4e00\u4e2a\u9879\u76ee\u4e00\u5b9a\u8981\u6709\u4e00\u4e2a\u5b89\u88c5\u90e8\u7f72\u5de5\u5177. \u80fd\u5feb\u901f\u4fbf\u6377\u7684\u5728\u4e00\u53f0\u65b0\u673a\u5668\u4e0a\u5c06\u73af\u5883\u88c5\u597d\u3001\u4ee3\u7801\u90e8\u7f72\u597d\u548c\u5c06\u7a0b\u5e8f\u8fd0\u884c\u8d77\u6765. requirements.txt requirements.txt\u6587\u4ef6\u7684\u5b58\u5728\u662f\u4e3a\u4e86\u65b9\u4fbf\u5f00\u53d1\u8005\u7ef4\u62a4\u8f6f\u4ef6\u7684\u4f9d\u8d56\u5e93. \u6211\u4eec\u9700\u8981\u5c06\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u4f9d\u8d56\u5e93\u7684\u4fe1\u606f\u6dfb\u52a0\u8fdb\u8be5\u6587\u4ef6\u4e2d,\u907f\u514d\u5728 setup.py\u5b89\u88c5\u4f9d\u8d56\u65f6\u6f0f\u6389\u8f6f\u4ef6\u5305. \u540c\u65f6\u4e5f\u65b9\u4fbf\u4e86\u4f7f\u7528\u8005\u660e\u786e\u9879\u76ee\u5f15\u7528\u4e86\u54ea\u4e9bPython\u5305. \u8fd9\u4e2a\u6587\u4ef6\u7684\u683c\u5f0f\u662f\u6bcf\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u5305\u4f9d\u8d56\u7684\u8bf4\u660e,\u901a\u5e38\u662fflask>=0.10\u8fd9\u79cd\u683c\u5f0f,\u8981\u6c42\u662f\u8fd9\u4e2a\u683c\u5f0f\u80fd\u88abpip\u8bc6\u522b. \u8fd9\u6837\u5c31\u53ef\u4ee5\u7b80\u5355\u7684\u901a\u8fc7 pip install -r requirements.txt \u6765\u628a\u6240\u6709Python\u4f9d\u8d56\u5e93\u90fd\u88c5\u597d\u4e86! # -- run.py import sys , os BASE_DIR = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ))) sys . path . append ( BASE_DIR ) from core import src if __name__ == '__main__' : src . run () \"\"\" __file__ \u5f53\u524d\u6587\u4ef6\u6240\u5728\u8def\u5f84 os.path.abspath(__file__) \u5f53\u524d\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84 os.path.dirname() \u83b7\u53d6\u5f53\u524d\u6587\u4ef6\u6240\u5728\u7684\u6587\u4ef6\u5939\u8def\u5f84 \"\"\" # settings.py import os BASE_DIR = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ))) DB_PATH = os . path . join ( BASE_DIR , 'db' , 'db.json' ) LOG_PATH = os . path . join ( BASE_DIR , 'log' , 'access.log' ) LOGIN_TIMEOUT = 5","title":"\u8f6f\u4ef6\u5f00\u53d1\u76ee\u5f55\u89c4\u8303"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/11_%E5%BC%80%E8%83%83%E5%B0%8F%E8%8F%9C/","text":"\u6d41\u7a0b\u63a7\u5236 \u00b6 \u8f93\u51fa\u6570\u5b571\u523010 \u00b6 i = 1 while i <= 10 : if i != 7 : print ( i , end = ' ' ) i += 1 i = 1 while i <= 10 : if i == 7 : i += 1 continue print ( i , end = ' ' ) i += 1 \u4e5d\u4e5d\u4e58\u6cd5\u8868 \u00b6 for i in range ( 1 , 10 ): for j in range ( 1 , i + 1 ): print ( f ' { i } * { j } == { i * j } ' , end = ' \\t ' ) print () # -- \u9012\u5f52. <\u8584\u5f31\u70b9+1> def f ( i ): if i >= 1 : f ( i - 1 ) item = [ ' %d * %d = %d ' % ( j , i , i * j ) for j in range ( 1 , i + 1 )] print ( ' \\t ' . join ( item )) f ( 9 ) \u6253\u5370\u91d1\u5b57\u5854 \u00b6 num = 6 for i in range ( 1 , num ): print ( ' ' * ( num - i ) + \"*\" * ( i * 2 - 1 )) # \u91cd\u70b9\u5728\u4e8e\u601d\u8003 \u5f53\u524d\u5c42\u6570\u4e0e\u5f53\u524d\u5c42\u661f\u661f\u6570\u4ee5\u53ca\u524d\u7a7a\u683c\u6570\u7684\u5173\u7cfb \u7b80\u5355\u7684\u767b\u9646\u7a0b\u5e8f \u00b6 password = 123 can_error = 3 def user_login ( pwd ): global can_error if eval ( pwd ) != password : can_error -= 1 if can_error == 0 : return 0 return 1 else : return 2 while True : pwd = input ( 'pwd ===>:' ) res = user_login ( pwd ) if res == 0 : print ( '\u9501\u5b9a' ) break elif res == 2 : print ( '\u6210\u529f\u767b\u9646\uff01' ) break elif res == 1 : print ( f '\u8f93\u5165\u9519\u8bef,\u60a8\u8fd8\u6709 { can_error } \u6b21\u673a\u4f1a...' ) \u5b57\u7b26\u4e32 \u00b6 \u8fdb\u5236\u8f6c\u6362 \u00b6 # -- \u4e8c\u8fdb\u5236\u8f6c\u5341\u8fdb\u5236 def text ( b ): b_list = b . split () new_str = [] for i in b_list : new_str . append ( str ( int ( i , 2 ))) return '.' . join ( new_str ) # -- \u5341\u8fdb\u5236\u8f6c\u4e8c\u8fdb\u5236 b = ' ' . join ([ str ( bin ( int ( i ))) for i in '10.3.9.12' . split ( '.' )]) print ( text ( b )) \u6620\u5c04\u66ff\u6362 \u00b6 # -- maketrans translate txt = \"Google Runoob Taobao!\" x = \"mSa\" y = \"eJo\" z = \"odnght\" # -- \u8bbe\u7f6e\u5220\u9664\u7684\u5b57\u7b26 mytable = '' . maketrans ( x , y , z ) # {109: 101, 83: 74, 97: 111, 111: None, 100: None, 110: None, 103: None, 104: None, 116: None} print ( mytable ) # \u8fd9\u91cc\u4e00\u5171\u670912\u4e2a\u952e\u503c\u5bf9 # \u5c3d\u7ba1o\u662f\u9700\u8981\u5220\u9664\u7684\u5b57\u7b26,\u4f46\u901a\u8fc7\u66ff\u6362\u5f97\u5230\u7684o\u662f\u4e0d\u4f1a\u5220\u9664\u7684 print ( txt . translate ( mytable )) # Gle Rub Tobo! 'k:1|k1:2|k2:3' \u00b6 \u5c06'k:1|k1:2|k2:3|k3:4'\u8f6c\u6362\u4e3a\u5b57\u5178 my_str = 'k:1|k1:2|k2:3|k3:4' my_dict = {} for item in my_str . split ( '|' ): k , v = item . split ( ':' ) my_dict [ k ] = eval ( v ) print ( my_dict ) \u5b57\u7b26\u4e32\u538b\u7f29 \u00b6 'aaabbcccd' -> 'a3b2c3d1' my_str2 = 'aaabbcccd' def str_reduce ( count_set ): res = '' for item in count_set : num = my_str2 . count ( item ) res += item + str ( num ) return res print ( str_reduce ( 'abcd' )) my_str3 = 'aaabbcccd' my_dict3 = {} res = '' for i in my_str3 : my_dict3 [ i ] = my_dict3 . get ( i , 0 ) + 1 for k , v in my_dict3 . items (): res += k res += str ( v ) print ( res ) \u6d6e\u70b9\u6570\u5224\u65ad \u00b6 def is_float ( data : str ) -> bool : print ( type ( data ), type ( eval ( data ))) return isinstance ( eval ( data ), float ) print ( is_float ( '3.12' )) ''' <class 'str'> <class 'float'> True ''' \u6253\u5370\u8fdb\u5ea6\u6761 \u00b6 ''' # -- \u95ee\u98981:\u63a7\u5236\u6253\u5370\u8fdb\u5ea6\u6761\u7684\u5bbd\u5ea6 print('%-50s'%'#') # `-`\u4ee3\u8868\u5de6\u5bf9\u9f50,\u603b\u957f\u5ea6\u4e3a50,\u4e0d\u591f\u9ed8\u8ba4\u7528\u7a7a\u767d\u586b\u8865 print('%s%%'% 50) # 50% %\u5728''\u4e2d\u5b58\u5728\u7279\u6b8a\u7684\u610f\u4e49,\u9700\u8981\u7528%\u5bf9%\u8fdb\u884c\u8f6c\u4e49 print('%%-%ds' % 50) # %-50s \u4f1a\u5c0650\u5148\u4f20\u7ed9%d res = '[%%-%ds]' % 10 print(res, type(res)) # [%-10s] <class 'str'> print(res % '##') # [## ] print(('[%%-%ds]' % 10) % '##') # -- \u95ee\u98982:\u7528\u65b0\u7684\u8fdb\u5ea6\u66ff\u6362\u65e7\u7684 \u4e0d\u6362\u884c+\u8df3\u56de\u884c\u9996\u6253\u5370 # \u6362\u884c\u7684\u6982\u5ff5:\u8df3\u5230\u4e0b\u4e00\u884c\u4ee5\u53ca\u5149\u6807\u56de\u5230\u884c\u9996 # \\n\u6362\u884c; \\r\u8df3\u5230\u884c\u9996; print(('[%%-%ds]' % 10) % '#', end='\\r') print(('\\r[%%-%ds]' % 10) % '#', end='') print(('\\r[%%-%ds]' % 10) % '##', end='') ''' import time def make_progress ( percent , width = 50 ): # -- \u89e3\u51b3\u767e\u5206\u6bd4\u5927\u4e8e1\u7684\u95ee\u9898 if percent > 1 : percent = 1 # int(percent * width) # -- \u6839\u636e\u767e\u5206\u6bd4\u62ff\u5230\u8981\u663e\u793a\u591a\u5c11\u4e2a\u4e95\u53f7(\u82e5width\u5bbd\u5ea6\u4e3a50,\u4e0b\u8f7d\u5b8c\u5c31\u4f1a\u670950\u4e2a#) show_str = ( '[ %% - %d s]' % width ) % ( int ( percent * width ) * '#' ) # print('\\r%s'% show_str,end='') # print('\\r%s %s%%' % (show_str, int(percent * 100)), end='') print ( f ' \\r { show_str } { int ( percent * 100 ) } %' , end = '' ) total_size = 10214 # -- \u6570\u636e\u603b\u5927\u5c0f recv_size = 0 # -- \u6536\u5230\u6570\u636e\u603b\u5927\u5c0f while recv_size < total_size : time . sleep ( 0.1 ) # -- \u6a21\u62df\u7f51\u7edc\u5ef6\u8fdf recv_size += 1024 # -- \u6bcf\u6b21\u4e0b\u8f7d1024\u4e2a\u5b57\u8282 # -- \u6253\u5370\u8fdb\u5ea6\u6761 # -- \u6ce8\u610f\u54e6,\u82e5total_size\u4e3a1025,\u90a3\u4e48\u7ecf\u8fc7\u4e24\u6b21 recv_size\u4e3a2048 \u767e\u5206\u6bd4\u5927\u4e8e1 percent = recv_size / total_size # -- \u4e0b\u8f7d\u7684\u767e\u5206\u6bd4 make_progress ( percent ) print () \u5217\u8868 \u00b6 \u5192\u6ce1\u6392\u5e8f \u00b6 arr = [ 2 , 19 , 16 , 7 , 3 , 8 ] # -- \u5185\u5c42\u5faa\u73af\u8fdb\u884c\u7684\u6392\u5e8f \u800c\u5916\u5c42\u5faa\u73af\u8868\u660e\u8fd9\u6837\u7684\u6392\u5e8f\u4ece\u5934\u8981\u6765\u597d\u591a\u6b21.. # -- flag\u662f\u7075\u9b42\u8bbe\u7f6e\uff01 def bubbling ( arr ): for _ in range ( len ( arr ) - 1 ): flag = False for j in range ( len ( arr ) - 1 ): if arr [ j ] > arr [ j + 1 ]: arr [ j ], arr [ j + 1 ] = arr [ j + 1 ], arr [ j ] flag = True if not flag : break return arr print ( bubbling ( arr )) \u5217\u8868\u5408\u5e76 \u00b6 \u4e24\u4e2a\u6709\u5e8f\u5217\u8868arr1,arr2,\u5199\u4e2a\u7b97\u6cd5\u5bf9\u8fd9\u4e24\u4e2a\u5217\u8868\u8fdb\u884c\u5408\u5e76.(\u4e0d\u53ef\u76f4\u63a5extend,\u7136\u540e\u8c03\u7528sort) # \u6ce8\u610f\u5ba1\u9898 \u662f\u4e24\u4e2a\u6709\u5e8f\u5217\u8868\uff01\uff01\uff01 def loop_merge_sort ( arr1 , arr2 ): temp = [] while len ( arr1 ) > 0 and len ( arr2 ) > 0 : if arr1 [ 0 ] < arr2 [ 0 ]: temp . append ( arr1 [ 0 ]) del arr1 [ 0 ] else : temp . append ( arr2 [ 0 ]) del arr2 [ 0 ] return temp arr1 = [ 1 , 2 , 3 , 67 , 88 , 99 ] arr2 = [ 23 , 44 , 66 , 67 , 77 , 90 ] print ( loop_merge_sort ( arr1 , arr2 )) \u5b57\u5178 \u00b6 \u76f8\u540c\u952e\u7684\u503c\u7684\u548c \u00b6 \u7edf\u8ba1\u4e24\u4e2a\u5b57\u5178\u76f8\u540c\u952e\u7684\u503c\u7684\u548c def func_1 ( dict_1 , dict_2 ): union_set = set ( dict_1 ) | set ( dict_2 ) v = dict () for i in union_set : v [ i ] = dict_1 . get ( i , 0 ) + dict_2 . get ( i , 0 ) return v def func_2 ( dic_1 , dic_2 ): for k in dic_2 : if k not in dic_1 : dic_1 . update ({ k : dic_2 [ k ]}) else : dic_1 [ k ] += dic_2 [ k ] return dic_1 dict_1 = { 'eyes' : 8 , 'the' : 5 , 'my' : 3 } dict_2 = { 'eyes' : 2 , 'looking' : 1 , 'my' : 5 } print ( func_1 ( dict_1 , dict_2 )) print ( func_2 ( dict_1 , dict_2 )) ''' {'the': 5, 'looking': 1, 'eyes': 10, 'my': 8} {'eyes': 10, 'the': 5, 'my': 8, 'looking': 1} ''' \u5b57\u5178\u6392\u5e8f \u00b6 # -- name\u4f18\u5148\u7ea7\u6700\u9ad8,age\u5176\u6b21 \u7528\u5143\u7956!! alist = [{ 'name' : 'a' , 'age' : 20 }, { 'name' : 'a' , 'age' : 10 }, { 'name' : 'b' , 'age' : 25 }] res = sorted ( alist , key = lambda x : ( x [ 'name' ], x [ 'age' ])) print ( res ) \u96c6\u5408 \u00b6 \u5220\u9664\u4e00\u4e2alist\u91cc\u91cd\u590d\u5143\u7d20\u5e76\u4fdd\u6301\u5b83\u4eec\u539f\u6765\u7684\u6392\u5e8f key=l1.index # -- dir\u8f93\u51fa\u7684\u662f\u6570\u636e\u7c7b\u578b\u7684\u5185\u5efa\u65b9\u6cd5 >>> 'index' in dir ( set ) False >>> 'index' in dir ( dict ) False >>> 'index' in dir ( list ) True >>> 'index' in dir ( str ) True >>> 'index' in dir ( tuple ) True >>> a = [] >>> type ( a . index ) < class ' builtin_function_or_method '> >>> help ( a . index ) Help on built - in function index : index ( value , start = 0 , stop = 9223372036854775807 , / ) method of builtins . list instance Return first index of value . Raises ValueError if the value is not present . >>> l1 = [ 'b' , 'c' , 'd' , 'b' , 'c' , 'a' , 'a' ] >>> sorted ( set ( l1 )) [ 'a' , 'b' , 'c' , 'd' ] >>> sorted ( l1 , key = l1 . index ) [ 'b' , 'b' , 'c' , 'c' , 'd' , 'a' , 'a' ] >>> sorted ( set ( l1 ), key = l1 . index ) [ 'b' , 'c' , 'd' , 'a' ] \u9012\u5f52 \u00b6 \u5220\u9664\u6587\u4ef6\u5939 \u00b6 \u9012\u5f52\u5220\u9664\u67d0\u4e00\u6587\u4ef6(\u5305\u542b\u5b50\u6587\u4ef6\u548c\u5b50\u6587\u4ef6\u5939) import os def del_files ( path ): for i in os . listdir ( path ): if '.py' in i : continue is_dir = os . path . join ( path , i ) if os . path . isdir ( is_dir ): del_files ( is_dir ) os . remove ( is_dir ) \"\"\" os.listdir() \u65b9\u6cd5\u7528\u4e8e\u8fd4\u56de\u6307\u5b9a\u7684\u6587\u4ef6\u5939\u5305\u542b\u7684\u6587\u4ef6\u6216\u6587\u4ef6\u5939\u7684\u540d\u5b57\u7684\u5217\u8868\u3002 \u5b83\u4e0d\u5305\u62ec . \u548c .. \u5373\u4f7f\u5b83\u5728\u6587\u4ef6\u5939\u4e2d os.isdir() \u5224\u65ad\u67d0\u4e00\u8def\u5f84\u662f\u5426\u4e3a\u76ee\u5f55 \u8fd4\u56debool\u503c os.join() \u5c06\u76ee\u5f55\u548c\u6587\u4ef6\u540d\u5408\u6210\u4e00\u4e2a\u8def\u5f84 \"\"\" \u5feb\u901f\u6392\u5e8f \u00b6 data = [ 20 , 30 , 9 , 54 , 12 , 24 , 11 ] # data = [9, 10, 11, 12] def quick_sort ( data , head , tail ): # -- \u82e5\u5df2\u7ecf\u6392\u5e8f\u597d\u4e86 \u79fb\u52a8\u540ehead\u4e0etail\u7684\u503c\u90fd\u4e3a0 \u8fdb\u5165\u9012\u5f52 '0 > -1' if head >= tail : return # -- low\u548cheight\u662f\u4e3a\u4e86\u8bb0\u5f55\u8fdb\u5165\u9012\u5f52\u540e\u6bcf\u6b21\u5b50\u5e8f\u5217\u7684\u9ad8\u4f4e\u754c\u9650 low = head height = tail pivot = data [ head ] while head < tail : while head < tail and data [ tail ] >= pivot : tail -= 1 data [ head ] = data [ tail ] while head < tail and data [ head ] <= pivot : head += 1 data [ tail ] = data [ head ] data [ head ] = pivot quick_sort ( data , low , head - 1 ) # 0 # -- quick_sort(data, head + 1, tail) \u4e0d\u884c # \u56e0\u4e3a\u6267\u884c\u5b8c\u2018#0\u2019\u540e(\u91cc\u9762\u4f1a\u518d\u5d4c\u5957\u6267\u884c#0 #1 \u76f4\u5230\u4f9d\u6b21return) # \u518d\u6267\u884c'#1' \u8fd9\u91cc\u7684\u53c2\u6570\u503c\u4f1a\u4fdd\u7559#0\u8fd0\u884c\u524d\u4f5c\u7528\u57df\u91cc\u7684\u503c data 4 3 tail\u503c\u662f\u4e3a3\u7684\u800c\u4e0d\u662f6 quick_sort ( data , head + 1 , height ) # 1 quick_sort ( data , 0 , len ( data ) - 1 ) print ( data ) \u67e5\u627e\u6307\u5b9a\u5b57\u6bb5 \u00b6 \u67e5\u627e\u5d4c\u5957\u5b57\u5178\u4e2d\u6307\u5b9a\u5b57\u6bb5\u7684\u503c data = { 'time' : '2022-2-22' , 'grp1' : { 'fld1' : 1 , 'fld2' : 2 }, 'fld6' : 11 , 'fld7' : 7 , 'fld46' : 8 , } fields = 'fld2|fld3|fld7|fld19' # -- \u8fd9\u91cc\u5f88\u6709\u610f\u601d\u54e6!!! res={} def select ( data , fields , res = {}): # res = {} fields_list = fields . split ( '|' ) for field in fields_list : for key in data : if field == key : res [ key ] = data [ key ] elif type ( data [ key ]) == dict : select ( data [ key ], fields ) # res.update(select(data[key], fields)) return res print ( select ( data , fields )) \u76ee\u5f55\u64cd\u4f5c \u00b6 \u9012\u5f52\u590d\u5236\u76ee\u5f55\u5e76\u6e05\u7a7a\u6307\u5b9a\u6587\u4ef6\u7684\u5185\u5bb9 import shutil import os src_file = 'python\u540e\u7aef\u4e4b\u65c5/0_python\u9762\u5411\u8fc7\u7a0b/ATM_shopping' target_path = 'D:/desktop/111' # -- shutil.copytree\u4e2d\u7684target_path\u53c2\u6570\u8def\u5f84\u4e0d\u80fd\u4e8b\u5148\u5b58\u5728 if os . path . exists ( target_path ): # -- \u9012\u5f52\u5220\u9664\u6587\u4ef6\u5939 shutil . rmtree ( target_path ) # -- \u9012\u5f52\u590d\u5236\u6e90\u8def\u5f84\u91cc\u7684\u6587\u4ef6,\u53ef\u4ee5\u6307\u5b9a\u5ffd\u7565\u7684\u6587\u4ef6 shutil . copytree ( 'python\u540e\u7aef\u4e4b\u65c5/0_python\u9762\u5411\u8fc7\u7a0b/ATM_shopping' , target_path , \\ ignore = shutil . ignore_patterns ( '__pycache__' , '.idea' , '*.json' , '*.log' \\ , '*.pic' ), copy_function = shutil . copy2 ) # -- \u9012\u5f52\u6587\u4ef6\u5939,\u6e05\u9664.py\u548c.md\u6587\u4ef6\u7684\u5185\u5bb9 def truncate_file ( path ): for i in os . listdir ( path ): # -- \u83b7\u53d6\u8be5\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\u548c\u5b50\u76ee\u5f55 if '.py' in i or '.md' in i : file_path = os . path . join ( path , i ) with open ( file_path , 'r+' , encoding = 'utf8' ) as f : f . truncate () continue is_dir = os . path . join ( path , i ) if os . path . isdir ( is_dir ): truncate_file ( is_dir ) truncate_file ( target_path ) \u5176\u5b83 \u00b6 yml\u76ee\u5f55\u7684\u5236\u4f5c \u00b6 import os # -- \u5c06path\u8def\u5f84\u4e0b\u7684md\u6587\u4ef6\u7ec4\u7ec7\u6210\u8fd9\u4e2a\u683c\u5f0f\uff01\u201c- \u8ba1\u7b97\u673a\u7f51\u7edc\u50a8\u5907: 4_\u7f51\u7edc\u5e76\u53d1\u7f16\u7a0b/0_\u8ba1\u7b97\u673a\u7f51\u7edc\u50a8\u5907.md\u201d def change_to_yml ( path ): res = os . listdir ( path ) # -- \u5f97\u5230\u7684\u76ee\u5f55\u6587\u4ef6\u5148\u540e\u987a\u5e8f\u662f\u4e71\u7684 res . remove ( \"assets\" ) # -- \u52a0eval\u662f\u4e3a\u4e86\u6309\u7167\u6570\u5b57\u6392\u5e8f [\"1\",\"10\",\"2\"] [1,2,10] res = sorted ( res , key = lambda item : eval ( item . split ( \"_\" )[ 0 ])) for item in res : if item . endswith ( \"md\" ): temp = item . split ( \".\" ) k = temp [ 0 ] . split ( \"_\" )[ 1 ] v = os . path . basename ( path ) + \"/\" + item print ( f \"- { k } : { v } \" ) if __name__ == \"__main__\" : path = \"/Users/One_Piece/Desktop/Dc_IT/docs/4_\u7f51\u7edc\u5e76\u53d1\u7f16\u7a0b\" change_to_yml ( path ) \u53d6md\u6587\u6863\u4e2d\u7684\u56fe\u7247 \u00b6 # -- \u60f3\u8981\u53d6\u5230md\u6587\u4ef6\u4e2d\u6240\u6709\u56fe\u7247\u7684\u540d\u5b57 \u6bd4\u5982: ![](./assets/1.png)\u91cc\u76841.png import re path = \"/Users/One_Piece/Desktop/Dc_IT/docs/5_db/0_\u57fa\u7840/0_install_db.md\" with open ( path , \"r\" , encoding = \"utf-8\" ) as f : a = f . read () # -- \\\u5c06[]()\u8fd9\u4e9b\u62ec\u53f7\u7ed9\u8f6c\u4e49 ()\u53d6\u51fa\u6211\u4eec\u60f3\u8981\u7684\u5185\u5bb9!! want_move_pic_list = re . findall ( \"!\\[.*\\]\\(.*/(.*)\\)\" , a ) # -- Ps: \u53d6\u4e24\u4e2a\u5217\u8868\u7684\u4ea4\u96c6 set(list_1)&set(list_2)","title":"\u5f00\u80c3\u5c0f\u83dc"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/11_%E5%BC%80%E8%83%83%E5%B0%8F%E8%8F%9C/#_1","text":"","title":"\u6d41\u7a0b\u63a7\u5236"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/11_%E5%BC%80%E8%83%83%E5%B0%8F%E8%8F%9C/#110","text":"i = 1 while i <= 10 : if i != 7 : print ( i , end = ' ' ) i += 1 i = 1 while i <= 10 : if i == 7 : i += 1 continue print ( i , end = ' ' ) i += 1","title":"\u8f93\u51fa\u6570\u5b571\u523010"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/11_%E5%BC%80%E8%83%83%E5%B0%8F%E8%8F%9C/#_2","text":"for i in range ( 1 , 10 ): for j in range ( 1 , i + 1 ): print ( f ' { i } * { j } == { i * j } ' , end = ' \\t ' ) print () # -- \u9012\u5f52. <\u8584\u5f31\u70b9+1> def f ( i ): if i >= 1 : f ( i - 1 ) item = [ ' %d * %d = %d ' % ( j , i , i * j ) for j in range ( 1 , i + 1 )] print ( ' \\t ' . join ( item )) f ( 9 )","title":"\u4e5d\u4e5d\u4e58\u6cd5\u8868"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/11_%E5%BC%80%E8%83%83%E5%B0%8F%E8%8F%9C/#_3","text":"num = 6 for i in range ( 1 , num ): print ( ' ' * ( num - i ) + \"*\" * ( i * 2 - 1 )) # \u91cd\u70b9\u5728\u4e8e\u601d\u8003 \u5f53\u524d\u5c42\u6570\u4e0e\u5f53\u524d\u5c42\u661f\u661f\u6570\u4ee5\u53ca\u524d\u7a7a\u683c\u6570\u7684\u5173\u7cfb","title":"\u6253\u5370\u91d1\u5b57\u5854"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/11_%E5%BC%80%E8%83%83%E5%B0%8F%E8%8F%9C/#_4","text":"password = 123 can_error = 3 def user_login ( pwd ): global can_error if eval ( pwd ) != password : can_error -= 1 if can_error == 0 : return 0 return 1 else : return 2 while True : pwd = input ( 'pwd ===>:' ) res = user_login ( pwd ) if res == 0 : print ( '\u9501\u5b9a' ) break elif res == 2 : print ( '\u6210\u529f\u767b\u9646\uff01' ) break elif res == 1 : print ( f '\u8f93\u5165\u9519\u8bef,\u60a8\u8fd8\u6709 { can_error } \u6b21\u673a\u4f1a...' )","title":"\u7b80\u5355\u7684\u767b\u9646\u7a0b\u5e8f"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/11_%E5%BC%80%E8%83%83%E5%B0%8F%E8%8F%9C/#_5","text":"","title":"\u5b57\u7b26\u4e32"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/11_%E5%BC%80%E8%83%83%E5%B0%8F%E8%8F%9C/#_6","text":"# -- \u4e8c\u8fdb\u5236\u8f6c\u5341\u8fdb\u5236 def text ( b ): b_list = b . split () new_str = [] for i in b_list : new_str . append ( str ( int ( i , 2 ))) return '.' . join ( new_str ) # -- \u5341\u8fdb\u5236\u8f6c\u4e8c\u8fdb\u5236 b = ' ' . join ([ str ( bin ( int ( i ))) for i in '10.3.9.12' . split ( '.' )]) print ( text ( b ))","title":"\u8fdb\u5236\u8f6c\u6362"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/11_%E5%BC%80%E8%83%83%E5%B0%8F%E8%8F%9C/#_7","text":"# -- maketrans translate txt = \"Google Runoob Taobao!\" x = \"mSa\" y = \"eJo\" z = \"odnght\" # -- \u8bbe\u7f6e\u5220\u9664\u7684\u5b57\u7b26 mytable = '' . maketrans ( x , y , z ) # {109: 101, 83: 74, 97: 111, 111: None, 100: None, 110: None, 103: None, 104: None, 116: None} print ( mytable ) # \u8fd9\u91cc\u4e00\u5171\u670912\u4e2a\u952e\u503c\u5bf9 # \u5c3d\u7ba1o\u662f\u9700\u8981\u5220\u9664\u7684\u5b57\u7b26,\u4f46\u901a\u8fc7\u66ff\u6362\u5f97\u5230\u7684o\u662f\u4e0d\u4f1a\u5220\u9664\u7684 print ( txt . translate ( mytable )) # Gle Rub Tobo!","title":"\u6620\u5c04\u66ff\u6362"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/11_%E5%BC%80%E8%83%83%E5%B0%8F%E8%8F%9C/#k1k12k23","text":"\u5c06'k:1|k1:2|k2:3|k3:4'\u8f6c\u6362\u4e3a\u5b57\u5178 my_str = 'k:1|k1:2|k2:3|k3:4' my_dict = {} for item in my_str . split ( '|' ): k , v = item . split ( ':' ) my_dict [ k ] = eval ( v ) print ( my_dict )","title":"'k:1|k1:2|k2:3'"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/11_%E5%BC%80%E8%83%83%E5%B0%8F%E8%8F%9C/#_8","text":"'aaabbcccd' -> 'a3b2c3d1' my_str2 = 'aaabbcccd' def str_reduce ( count_set ): res = '' for item in count_set : num = my_str2 . count ( item ) res += item + str ( num ) return res print ( str_reduce ( 'abcd' )) my_str3 = 'aaabbcccd' my_dict3 = {} res = '' for i in my_str3 : my_dict3 [ i ] = my_dict3 . get ( i , 0 ) + 1 for k , v in my_dict3 . items (): res += k res += str ( v ) print ( res )","title":"\u5b57\u7b26\u4e32\u538b\u7f29"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/11_%E5%BC%80%E8%83%83%E5%B0%8F%E8%8F%9C/#_9","text":"def is_float ( data : str ) -> bool : print ( type ( data ), type ( eval ( data ))) return isinstance ( eval ( data ), float ) print ( is_float ( '3.12' )) ''' <class 'str'> <class 'float'> True '''","title":"\u6d6e\u70b9\u6570\u5224\u65ad"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/11_%E5%BC%80%E8%83%83%E5%B0%8F%E8%8F%9C/#_10","text":"''' # -- \u95ee\u98981:\u63a7\u5236\u6253\u5370\u8fdb\u5ea6\u6761\u7684\u5bbd\u5ea6 print('%-50s'%'#') # `-`\u4ee3\u8868\u5de6\u5bf9\u9f50,\u603b\u957f\u5ea6\u4e3a50,\u4e0d\u591f\u9ed8\u8ba4\u7528\u7a7a\u767d\u586b\u8865 print('%s%%'% 50) # 50% %\u5728''\u4e2d\u5b58\u5728\u7279\u6b8a\u7684\u610f\u4e49,\u9700\u8981\u7528%\u5bf9%\u8fdb\u884c\u8f6c\u4e49 print('%%-%ds' % 50) # %-50s \u4f1a\u5c0650\u5148\u4f20\u7ed9%d res = '[%%-%ds]' % 10 print(res, type(res)) # [%-10s] <class 'str'> print(res % '##') # [## ] print(('[%%-%ds]' % 10) % '##') # -- \u95ee\u98982:\u7528\u65b0\u7684\u8fdb\u5ea6\u66ff\u6362\u65e7\u7684 \u4e0d\u6362\u884c+\u8df3\u56de\u884c\u9996\u6253\u5370 # \u6362\u884c\u7684\u6982\u5ff5:\u8df3\u5230\u4e0b\u4e00\u884c\u4ee5\u53ca\u5149\u6807\u56de\u5230\u884c\u9996 # \\n\u6362\u884c; \\r\u8df3\u5230\u884c\u9996; print(('[%%-%ds]' % 10) % '#', end='\\r') print(('\\r[%%-%ds]' % 10) % '#', end='') print(('\\r[%%-%ds]' % 10) % '##', end='') ''' import time def make_progress ( percent , width = 50 ): # -- \u89e3\u51b3\u767e\u5206\u6bd4\u5927\u4e8e1\u7684\u95ee\u9898 if percent > 1 : percent = 1 # int(percent * width) # -- \u6839\u636e\u767e\u5206\u6bd4\u62ff\u5230\u8981\u663e\u793a\u591a\u5c11\u4e2a\u4e95\u53f7(\u82e5width\u5bbd\u5ea6\u4e3a50,\u4e0b\u8f7d\u5b8c\u5c31\u4f1a\u670950\u4e2a#) show_str = ( '[ %% - %d s]' % width ) % ( int ( percent * width ) * '#' ) # print('\\r%s'% show_str,end='') # print('\\r%s %s%%' % (show_str, int(percent * 100)), end='') print ( f ' \\r { show_str } { int ( percent * 100 ) } %' , end = '' ) total_size = 10214 # -- \u6570\u636e\u603b\u5927\u5c0f recv_size = 0 # -- \u6536\u5230\u6570\u636e\u603b\u5927\u5c0f while recv_size < total_size : time . sleep ( 0.1 ) # -- \u6a21\u62df\u7f51\u7edc\u5ef6\u8fdf recv_size += 1024 # -- \u6bcf\u6b21\u4e0b\u8f7d1024\u4e2a\u5b57\u8282 # -- \u6253\u5370\u8fdb\u5ea6\u6761 # -- \u6ce8\u610f\u54e6,\u82e5total_size\u4e3a1025,\u90a3\u4e48\u7ecf\u8fc7\u4e24\u6b21 recv_size\u4e3a2048 \u767e\u5206\u6bd4\u5927\u4e8e1 percent = recv_size / total_size # -- \u4e0b\u8f7d\u7684\u767e\u5206\u6bd4 make_progress ( percent ) print ()","title":"\u6253\u5370\u8fdb\u5ea6\u6761"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/11_%E5%BC%80%E8%83%83%E5%B0%8F%E8%8F%9C/#_11","text":"","title":"\u5217\u8868"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/11_%E5%BC%80%E8%83%83%E5%B0%8F%E8%8F%9C/#_12","text":"arr = [ 2 , 19 , 16 , 7 , 3 , 8 ] # -- \u5185\u5c42\u5faa\u73af\u8fdb\u884c\u7684\u6392\u5e8f \u800c\u5916\u5c42\u5faa\u73af\u8868\u660e\u8fd9\u6837\u7684\u6392\u5e8f\u4ece\u5934\u8981\u6765\u597d\u591a\u6b21.. # -- flag\u662f\u7075\u9b42\u8bbe\u7f6e\uff01 def bubbling ( arr ): for _ in range ( len ( arr ) - 1 ): flag = False for j in range ( len ( arr ) - 1 ): if arr [ j ] > arr [ j + 1 ]: arr [ j ], arr [ j + 1 ] = arr [ j + 1 ], arr [ j ] flag = True if not flag : break return arr print ( bubbling ( arr ))","title":"\u5192\u6ce1\u6392\u5e8f"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/11_%E5%BC%80%E8%83%83%E5%B0%8F%E8%8F%9C/#_13","text":"\u4e24\u4e2a\u6709\u5e8f\u5217\u8868arr1,arr2,\u5199\u4e2a\u7b97\u6cd5\u5bf9\u8fd9\u4e24\u4e2a\u5217\u8868\u8fdb\u884c\u5408\u5e76.(\u4e0d\u53ef\u76f4\u63a5extend,\u7136\u540e\u8c03\u7528sort) # \u6ce8\u610f\u5ba1\u9898 \u662f\u4e24\u4e2a\u6709\u5e8f\u5217\u8868\uff01\uff01\uff01 def loop_merge_sort ( arr1 , arr2 ): temp = [] while len ( arr1 ) > 0 and len ( arr2 ) > 0 : if arr1 [ 0 ] < arr2 [ 0 ]: temp . append ( arr1 [ 0 ]) del arr1 [ 0 ] else : temp . append ( arr2 [ 0 ]) del arr2 [ 0 ] return temp arr1 = [ 1 , 2 , 3 , 67 , 88 , 99 ] arr2 = [ 23 , 44 , 66 , 67 , 77 , 90 ] print ( loop_merge_sort ( arr1 , arr2 ))","title":"\u5217\u8868\u5408\u5e76"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/11_%E5%BC%80%E8%83%83%E5%B0%8F%E8%8F%9C/#_14","text":"","title":"\u5b57\u5178"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/11_%E5%BC%80%E8%83%83%E5%B0%8F%E8%8F%9C/#_15","text":"\u7edf\u8ba1\u4e24\u4e2a\u5b57\u5178\u76f8\u540c\u952e\u7684\u503c\u7684\u548c def func_1 ( dict_1 , dict_2 ): union_set = set ( dict_1 ) | set ( dict_2 ) v = dict () for i in union_set : v [ i ] = dict_1 . get ( i , 0 ) + dict_2 . get ( i , 0 ) return v def func_2 ( dic_1 , dic_2 ): for k in dic_2 : if k not in dic_1 : dic_1 . update ({ k : dic_2 [ k ]}) else : dic_1 [ k ] += dic_2 [ k ] return dic_1 dict_1 = { 'eyes' : 8 , 'the' : 5 , 'my' : 3 } dict_2 = { 'eyes' : 2 , 'looking' : 1 , 'my' : 5 } print ( func_1 ( dict_1 , dict_2 )) print ( func_2 ( dict_1 , dict_2 )) ''' {'the': 5, 'looking': 1, 'eyes': 10, 'my': 8} {'eyes': 10, 'the': 5, 'my': 8, 'looking': 1} '''","title":"\u76f8\u540c\u952e\u7684\u503c\u7684\u548c"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/11_%E5%BC%80%E8%83%83%E5%B0%8F%E8%8F%9C/#_16","text":"# -- name\u4f18\u5148\u7ea7\u6700\u9ad8,age\u5176\u6b21 \u7528\u5143\u7956!! alist = [{ 'name' : 'a' , 'age' : 20 }, { 'name' : 'a' , 'age' : 10 }, { 'name' : 'b' , 'age' : 25 }] res = sorted ( alist , key = lambda x : ( x [ 'name' ], x [ 'age' ])) print ( res )","title":"\u5b57\u5178\u6392\u5e8f"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/11_%E5%BC%80%E8%83%83%E5%B0%8F%E8%8F%9C/#_17","text":"\u5220\u9664\u4e00\u4e2alist\u91cc\u91cd\u590d\u5143\u7d20\u5e76\u4fdd\u6301\u5b83\u4eec\u539f\u6765\u7684\u6392\u5e8f key=l1.index # -- dir\u8f93\u51fa\u7684\u662f\u6570\u636e\u7c7b\u578b\u7684\u5185\u5efa\u65b9\u6cd5 >>> 'index' in dir ( set ) False >>> 'index' in dir ( dict ) False >>> 'index' in dir ( list ) True >>> 'index' in dir ( str ) True >>> 'index' in dir ( tuple ) True >>> a = [] >>> type ( a . index ) < class ' builtin_function_or_method '> >>> help ( a . index ) Help on built - in function index : index ( value , start = 0 , stop = 9223372036854775807 , / ) method of builtins . list instance Return first index of value . Raises ValueError if the value is not present . >>> l1 = [ 'b' , 'c' , 'd' , 'b' , 'c' , 'a' , 'a' ] >>> sorted ( set ( l1 )) [ 'a' , 'b' , 'c' , 'd' ] >>> sorted ( l1 , key = l1 . index ) [ 'b' , 'b' , 'c' , 'c' , 'd' , 'a' , 'a' ] >>> sorted ( set ( l1 ), key = l1 . index ) [ 'b' , 'c' , 'd' , 'a' ]","title":"\u96c6\u5408"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/11_%E5%BC%80%E8%83%83%E5%B0%8F%E8%8F%9C/#_18","text":"","title":"\u9012\u5f52"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/11_%E5%BC%80%E8%83%83%E5%B0%8F%E8%8F%9C/#_19","text":"\u9012\u5f52\u5220\u9664\u67d0\u4e00\u6587\u4ef6(\u5305\u542b\u5b50\u6587\u4ef6\u548c\u5b50\u6587\u4ef6\u5939) import os def del_files ( path ): for i in os . listdir ( path ): if '.py' in i : continue is_dir = os . path . join ( path , i ) if os . path . isdir ( is_dir ): del_files ( is_dir ) os . remove ( is_dir ) \"\"\" os.listdir() \u65b9\u6cd5\u7528\u4e8e\u8fd4\u56de\u6307\u5b9a\u7684\u6587\u4ef6\u5939\u5305\u542b\u7684\u6587\u4ef6\u6216\u6587\u4ef6\u5939\u7684\u540d\u5b57\u7684\u5217\u8868\u3002 \u5b83\u4e0d\u5305\u62ec . \u548c .. \u5373\u4f7f\u5b83\u5728\u6587\u4ef6\u5939\u4e2d os.isdir() \u5224\u65ad\u67d0\u4e00\u8def\u5f84\u662f\u5426\u4e3a\u76ee\u5f55 \u8fd4\u56debool\u503c os.join() \u5c06\u76ee\u5f55\u548c\u6587\u4ef6\u540d\u5408\u6210\u4e00\u4e2a\u8def\u5f84 \"\"\"","title":"\u5220\u9664\u6587\u4ef6\u5939"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/11_%E5%BC%80%E8%83%83%E5%B0%8F%E8%8F%9C/#_20","text":"data = [ 20 , 30 , 9 , 54 , 12 , 24 , 11 ] # data = [9, 10, 11, 12] def quick_sort ( data , head , tail ): # -- \u82e5\u5df2\u7ecf\u6392\u5e8f\u597d\u4e86 \u79fb\u52a8\u540ehead\u4e0etail\u7684\u503c\u90fd\u4e3a0 \u8fdb\u5165\u9012\u5f52 '0 > -1' if head >= tail : return # -- low\u548cheight\u662f\u4e3a\u4e86\u8bb0\u5f55\u8fdb\u5165\u9012\u5f52\u540e\u6bcf\u6b21\u5b50\u5e8f\u5217\u7684\u9ad8\u4f4e\u754c\u9650 low = head height = tail pivot = data [ head ] while head < tail : while head < tail and data [ tail ] >= pivot : tail -= 1 data [ head ] = data [ tail ] while head < tail and data [ head ] <= pivot : head += 1 data [ tail ] = data [ head ] data [ head ] = pivot quick_sort ( data , low , head - 1 ) # 0 # -- quick_sort(data, head + 1, tail) \u4e0d\u884c # \u56e0\u4e3a\u6267\u884c\u5b8c\u2018#0\u2019\u540e(\u91cc\u9762\u4f1a\u518d\u5d4c\u5957\u6267\u884c#0 #1 \u76f4\u5230\u4f9d\u6b21return) # \u518d\u6267\u884c'#1' \u8fd9\u91cc\u7684\u53c2\u6570\u503c\u4f1a\u4fdd\u7559#0\u8fd0\u884c\u524d\u4f5c\u7528\u57df\u91cc\u7684\u503c data 4 3 tail\u503c\u662f\u4e3a3\u7684\u800c\u4e0d\u662f6 quick_sort ( data , head + 1 , height ) # 1 quick_sort ( data , 0 , len ( data ) - 1 ) print ( data )","title":"\u5feb\u901f\u6392\u5e8f"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/11_%E5%BC%80%E8%83%83%E5%B0%8F%E8%8F%9C/#_21","text":"\u67e5\u627e\u5d4c\u5957\u5b57\u5178\u4e2d\u6307\u5b9a\u5b57\u6bb5\u7684\u503c data = { 'time' : '2022-2-22' , 'grp1' : { 'fld1' : 1 , 'fld2' : 2 }, 'fld6' : 11 , 'fld7' : 7 , 'fld46' : 8 , } fields = 'fld2|fld3|fld7|fld19' # -- \u8fd9\u91cc\u5f88\u6709\u610f\u601d\u54e6!!! res={} def select ( data , fields , res = {}): # res = {} fields_list = fields . split ( '|' ) for field in fields_list : for key in data : if field == key : res [ key ] = data [ key ] elif type ( data [ key ]) == dict : select ( data [ key ], fields ) # res.update(select(data[key], fields)) return res print ( select ( data , fields ))","title":"\u67e5\u627e\u6307\u5b9a\u5b57\u6bb5"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/11_%E5%BC%80%E8%83%83%E5%B0%8F%E8%8F%9C/#_22","text":"\u9012\u5f52\u590d\u5236\u76ee\u5f55\u5e76\u6e05\u7a7a\u6307\u5b9a\u6587\u4ef6\u7684\u5185\u5bb9 import shutil import os src_file = 'python\u540e\u7aef\u4e4b\u65c5/0_python\u9762\u5411\u8fc7\u7a0b/ATM_shopping' target_path = 'D:/desktop/111' # -- shutil.copytree\u4e2d\u7684target_path\u53c2\u6570\u8def\u5f84\u4e0d\u80fd\u4e8b\u5148\u5b58\u5728 if os . path . exists ( target_path ): # -- \u9012\u5f52\u5220\u9664\u6587\u4ef6\u5939 shutil . rmtree ( target_path ) # -- \u9012\u5f52\u590d\u5236\u6e90\u8def\u5f84\u91cc\u7684\u6587\u4ef6,\u53ef\u4ee5\u6307\u5b9a\u5ffd\u7565\u7684\u6587\u4ef6 shutil . copytree ( 'python\u540e\u7aef\u4e4b\u65c5/0_python\u9762\u5411\u8fc7\u7a0b/ATM_shopping' , target_path , \\ ignore = shutil . ignore_patterns ( '__pycache__' , '.idea' , '*.json' , '*.log' \\ , '*.pic' ), copy_function = shutil . copy2 ) # -- \u9012\u5f52\u6587\u4ef6\u5939,\u6e05\u9664.py\u548c.md\u6587\u4ef6\u7684\u5185\u5bb9 def truncate_file ( path ): for i in os . listdir ( path ): # -- \u83b7\u53d6\u8be5\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\u548c\u5b50\u76ee\u5f55 if '.py' in i or '.md' in i : file_path = os . path . join ( path , i ) with open ( file_path , 'r+' , encoding = 'utf8' ) as f : f . truncate () continue is_dir = os . path . join ( path , i ) if os . path . isdir ( is_dir ): truncate_file ( is_dir ) truncate_file ( target_path )","title":"\u76ee\u5f55\u64cd\u4f5c"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/11_%E5%BC%80%E8%83%83%E5%B0%8F%E8%8F%9C/#_23","text":"","title":"\u5176\u5b83"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/11_%E5%BC%80%E8%83%83%E5%B0%8F%E8%8F%9C/#yml","text":"import os # -- \u5c06path\u8def\u5f84\u4e0b\u7684md\u6587\u4ef6\u7ec4\u7ec7\u6210\u8fd9\u4e2a\u683c\u5f0f\uff01\u201c- \u8ba1\u7b97\u673a\u7f51\u7edc\u50a8\u5907: 4_\u7f51\u7edc\u5e76\u53d1\u7f16\u7a0b/0_\u8ba1\u7b97\u673a\u7f51\u7edc\u50a8\u5907.md\u201d def change_to_yml ( path ): res = os . listdir ( path ) # -- \u5f97\u5230\u7684\u76ee\u5f55\u6587\u4ef6\u5148\u540e\u987a\u5e8f\u662f\u4e71\u7684 res . remove ( \"assets\" ) # -- \u52a0eval\u662f\u4e3a\u4e86\u6309\u7167\u6570\u5b57\u6392\u5e8f [\"1\",\"10\",\"2\"] [1,2,10] res = sorted ( res , key = lambda item : eval ( item . split ( \"_\" )[ 0 ])) for item in res : if item . endswith ( \"md\" ): temp = item . split ( \".\" ) k = temp [ 0 ] . split ( \"_\" )[ 1 ] v = os . path . basename ( path ) + \"/\" + item print ( f \"- { k } : { v } \" ) if __name__ == \"__main__\" : path = \"/Users/One_Piece/Desktop/Dc_IT/docs/4_\u7f51\u7edc\u5e76\u53d1\u7f16\u7a0b\" change_to_yml ( path )","title":"yml\u76ee\u5f55\u7684\u5236\u4f5c"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/11_%E5%BC%80%E8%83%83%E5%B0%8F%E8%8F%9C/#md","text":"# -- \u60f3\u8981\u53d6\u5230md\u6587\u4ef6\u4e2d\u6240\u6709\u56fe\u7247\u7684\u540d\u5b57 \u6bd4\u5982: ![](./assets/1.png)\u91cc\u76841.png import re path = \"/Users/One_Piece/Desktop/Dc_IT/docs/5_db/0_\u57fa\u7840/0_install_db.md\" with open ( path , \"r\" , encoding = \"utf-8\" ) as f : a = f . read () # -- \\\u5c06[]()\u8fd9\u4e9b\u62ec\u53f7\u7ed9\u8f6c\u4e49 ()\u53d6\u51fa\u6211\u4eec\u60f3\u8981\u7684\u5185\u5bb9!! want_move_pic_list = re . findall ( \"!\\[.*\\]\\(.*/(.*)\\)\" , a ) # -- Ps: \u53d6\u4e24\u4e2a\u5217\u8868\u7684\u4ea4\u96c6 set(list_1)&set(list_2)","title":"\u53d6md\u6587\u6863\u4e2d\u7684\u56fe\u7247"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/12_%E9%A5%B6%E5%A4%B4%E8%AE%AD%E7%BB%83/","text":"\u5217\u8868\u3001\u5b57\u5178\u3001\u96c6\u5408\u89e3\u6790 sorted\u7684key\u53c2\u6570 from itertools import islice from collections import namedtuple from collections import Counter from collections import OrderedDict from collections import deque from collections import Iterable, Iterator ,Generator from functools import reduce re.split() re.sub() my_str.join() my_str.maketrans() my_str.translate() \u53cd\u8fed\u4ee3\u534f\u8bae __reversed__ from decimal import Decimal from itertools import chain \u6570\u636e\u6784\u5efa\u4e0e\u89e3\u6790 \u00b6 \u7b5b\u9009\u6570\u636e \u00b6 \u5217\u8868\u3001\u5b57\u5178\u3001\u96c6\u5408\u751f\u6210\u5f0f \u8fc7\u6ee4\u5217\u8868\u4e2d\u7684\u8d1f\u6570 \u53d6\u51fa\u5b57\u5178\u4e2d\u7684\u503c\u5927\u4e8e90\u7684\u952e\u503c\u5bf9 \u53d6\u51fa\u96c6\u5408\u4e2d\u80fd\u88ab3\u6574\u9664\u7684\u6570 \u25b3\u65b9\u6848\u4e00: \u5217\u8868\u89e3\u6790\u3001\u5b57\u5178\u89e3\u6790\u3001\u96c6\u5408\u89e3\u6790 \u25b3\u65b9\u6848\u4e8c: filter from random import randint data_list = [ randint ( - 10 , 10 ) for _ in range ( 10 )] data_dict = { f 'student { i } ' : randint ( 60 , 100 ) for i in range ( 1 , 20 )} data_set = { randint ( 0 , 20 ) for _ in range ( 20 )} # -- \u5217\u8868 [ x for x in data_list if x >= 0 ] filter ( lambda x : x >= 0 , data_list ) # -- \u5b57\u5178 { k : v for k , v in data_dict . items () if v > 90 } filter ( lambda x : x [ 1 ] > 90 , data_dict . items ()) # -- \u96c6\u5408 { x for x in data_set if x % 3 == 0 } filter ( lambda x : x % 3 == 0 , data_set ) \u5143\u7ec4\u5143\u7d20\u547d\u540d \u00b6 \u5982\u4f55 \u4e3a\u5143\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u547d\u540d ,\u63d0\u9ad8\u7a0b\u5e8f\u7684\u53ef\u8bfb\u6027\uff1f \u5bf9\u4e8e\u683c\u5f0f\u56fa\u5b9a\u7684\u6570\u636e, \u6211\u4eec\u901a\u5e38\u53ef\u4ee5\u4f7f\u7528\u5143\u7956\u6765\u5b58\u50a8 \u6bd4\u5982\u67d0\u4e2a\u5b66\u751f\u4fe1\u606f\u7cfb\u7edf, \u5176\u4e2d\u6bcf\u4e2a\u5b66\u751f\u7684\u683c\u5f0f\u90fd\u662f\u786e\u5b9a\u7684(\u540d\u5b57\u3001\u5e74\u9f84\u3001\u6027\u522b\u3001\u90ae\u7bb1) ('Jim',16,'male', jim8721@gmail.com ) 1> \u4f7f\u7528\u5143\u7956\u7684 \u4f18\u70b9 : \u8282\u7701\u7a7a\u95f4!!! \u5b58\u50a8\u76f8\u540c\u7684\u6570\u636e, \u4f7f\u7528\u5143\u7956\u6bd4\u4f7f\u7528\u5b57\u5178\u5f00\u9500\u4f1a\u5c0f\u5f88\u591a\uff01 2> \u4f7f\u7528\u5143\u7956\u7684 \u7f3a\u70b9 : \u8bbf\u95ee\u7684\u65f6\u5019, \u6211\u4eec\u9700\u8981\u4f7f\u7528\u7d22\u5f15(index)\u8bbf\u95ee, \u5927\u91cf\u7d22\u5f15\u964d\u4f4e\u7a0b\u5e8f\u53ef\u8bfb\u6027. \u56e0\u4e3a\u5b83\u4e0d\u77e5\u9053\u5143\u7ec4\u4e2d\u6bcf\u4e2a\u5b57\u6bb5\u7684\u542b\u4e49. \u4f7f\u7528 collections.namedtuple \u66ff\u4ee3\u5185\u7f6etuple (\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u4e00\u7cfb\u5217\u6570\u503c\u5e38\u91cf\u6216\u679a\u4e3e\u7c7b\u578b\u6765\u89e3\u51b3..\u4f46\u4e0d\u63a8\u8350 \u7565) \u4f7f\u7528\u6807\u51c6\u5e93collections\u4e0b\u7684\u4e00\u4e2a\u547d\u540d\u5143\u7956namedtuple: \u5373\u4e3a\u5143\u7956\u7684\u6bcf\u4e2a\u5b57\u6bb5\u8d77\u540d\u5b57 \u5b83\u662f\u4e00\u4e2a\u7c7b\u7684\u5de5\u5382, \u53ef\u4ee5\u521b\u5efa\u51fa\u4e00\u79cd\u5143\u7956\u7684\u5b50\u7c7b, \u5b83\u5176\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bb5\u662f\u6709\u540d\u5b57\u7684 \u7b2c\u4e00\u4e2a\u53c2\u6570: \u4e3a\u547d\u540d\u5143\u7956\u8d77\u4e2a\u540d\u5b57 \u7b2c\u4e8c\u4e2a\u53c2\u6570: \u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u5217\u8868, \u5305\u542b\u4e86\u547d\u540d\u5143\u7956\u4e2d\u6bcf\u4e2a\u5b57\u6bb5\u7684\u540d\u5b57 return: \u8fd4\u56de\u4e00\u4e2a\u7c7b, \u5143\u7956\u7684\u5b50\u7c7b In [ 27 ]: from collections import namedtuple # -- namedtuple()\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u4e2a\u7c7b; student0\u662fnamedtuple()()\u7684\u5b9e\u4f8b\u5316, In [ 28 ]: student0 = namedtuple ( 'Stu0' ,[ 'name' , 'age' , 'sex' , 'email' ])( 'xiaoming' , ... : 16 , 'man' , '123456@qq.com' ) In [ 29 ]: student0 Out [ 29 ]: Stu0 ( name = 'xiaoming' , age = 16 , sex = 'man' , email = '123456@qq.com' ) In [ 30 ]: student0 [ 0 ] Out [ 30 ]: 'xiaoming' In [ 38 ]: student0 . name Out [ 38 ]: 'xiaoming' \u5b57\u5178\u6392\u5e8f \u00b6 \u6839\u636e\u5b57\u5178\u4e2d\u503c\u7684\u5927\u5c0f\u5bf9\u5b57\u5178\u4e2d\u7684\u9879\u8fdb\u884c\u6392\u5e8f,\u5e76\u52a0\u4e0a\u6392\u540d \u4f20\u9012sorted\u51fd\u6570\u7684 key \u53c2\u6570. from random import randint data = { i : randint ( 60 , 100 ) for i in 'abcdefg' } temp = sorted ( data . items (), key = lambda item : item [ 1 ], reverse = True ) # -- \u7b49\u540c\u4e8e {items[0]: (index, items[1]) for index, items in enumerate(temp, 1)} res = { k : ( index , v ) for index , ( k , v ) in enumerate ( temp , 1 )} print ( res ) # -- \u5728\u539f\u5b57\u5178\u4e0a,\u52a0\u4e0a\u6392\u540d for index , ( k , v ) in enumerate ( temp , 1 ): data [ k ] = ( index , v ) \"\"\" Ps: sorted(zip(data.values(), data.keys())) \"\"\" \u5143\u7d20\u9891\u5ea6 \u00b6 \u7edf\u8ba1\u5e8f\u5217\u4e2d\u5143\u7d20\u7684\u9891\u5ea6\u5e76\u6392\u5e8f 1.\u67d0\u968f\u673a\u5e8f\u5217[12,5,6,4,6,5,5,7]\u4e2d, \u627e\u5230\u51fa\u73b0\u6b21\u6570\u6700\u9ad8\u76843\u4e2a\u5143\u7d20, \u5b83\u4eec\u51fa\u73b0\u7684\u6b21\u6570\u662f\u591a\u5c11\uff1f 2.\u5bf9\u4e8e\u67d0\u82f1\u6587\u6587\u7ae0\u7684\u5355\u8bcd, \u8fdb\u884c\u8bcd\u9891\u7edf\u8ba1, \u627e\u5230\u51fa\u73b0\u6b21\u6570\u6700\u9ad8\u768410\u4e2a\u5355\u8bcd, \u5b83\u4eec\u51fa\u73b0\u6b21\u6570\u662f\u591a\u5c11\uff1f \u25b3\u65b9\u6848\u4e00: \u5c06\u5e8f\u5217\u8f6c\u6362\u4e3a\u5b57\u5178 {\u5143\u7d20:\u9891\u5ea6} ,\u6839\u636e\u5b57\u5178\u4e2d\u7684\u503c\u6392\u5e8f \u25b3\u65b9\u6848\u4e8c: \u4f7f\u7528\u6807\u51c6\u5e93 collections \u4e2d\u7684 Counter\u5bf9\u8c61 Ps: \u65b9\u6848\u4e00,\u82e5\u5217\u8868\u5f88\u5927\u53ea\u627e\u524d\u4e09\u4e2a,\u5bf9\u6574\u4e2a\u5217\u8868\u6392\u5e8f\u5f88\u6d6a\u8d39, \u8fd9\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528\u5806 import heapq \"\"\" \u2605 --\u65b9\u6848\u4e00 \"\"\" from random import randint data = [ randint ( 0 , 20 ) for _ in range ( 30 )] # -- \u5bf9data\u6570\u636e\u53bb\u91cd\u540e\u4f5c\u4e3a\u5b57\u5178\u7684\u952e,\u6bcf\u4e2a\u952e\u7684\u503c\u90fd\u9ed8\u8ba4\u4e3a0 d = dict . fromkeys ( data , 0 ) # -- \u6ce8\u610f\u4e00\u70b9 \u5b57\u5178\u7684\u952e\u662f\u552f\u4e00\u7684 \u6240\u4ee5\u8981\u8fbe\u5230\u9884\u5b9a\u6548\u679c\u5c31\u4e0d\u80fd\u5bf9d\u8fdb\u884c\u5faa\u73af. for i in data : d [ i ] += 1 sorted ( d . items (), key = lambda item : item [ 1 ], reverse = True )[: 3 ] # -- \u6539\u53d8\u952e\u503c\u987a\u5e8f,\u901a\u8fc7\u5143\u7956\u8fdb\u884c\u6bd4\u8f83 \u597d\u522b\u626d # sorted([(v, k) for k, v in d.items()], reverse=True)[:3] sorted ((( v , k ) for k , v in d . items ()), reverse = True )[: 3 ] \"\"\" \u2605 --\u65b9\u6848\u4e8c \"\"\" from collections import Counter from random import randint data = [ randint ( 0 , 20 ) for _ in range ( 30 )] # -- Counter\u5c31\u76f8\u5f53\u4e8e\u4e00\u4e2a\u9891\u5ea6\u5b57\u5178 # -- \u7c7b\u4f3c\u4e8e\u8fd9\u6837 => Counter({7: 2,0: 1,10: 1,4: 1,16: 2,...,9: 2} c = Counter ( data ) # -- \u53d6\u51fa\u9891\u5ea6\u6700\u9ad8\u7684\u524d3\u4e2a\u6570\u5b57 res = c . most_common ( 3 ) print ( res ) # -- [(0, 6), (20, 3), (4, 3)] \"\"\" \u2605 --\u6587\u672c\u8bcd\u9891\u7edf\u8ba1 \"\"\" import re from collections import Counter # -- \u8bfb\u53d6\u6587\u4ef6 txt = open ( 'example.txt' ) . read () # -- \u4f7f\u7528\u6b63\u5219\u5c06\u8bcd\u5168\u90e8\u5207\u5206\u51fa\u6765,\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u8bcd\u7684\u5217\u8868 word_list = re . split ( '\\W+' , txt ) c2 = Counter ( word_list ) # -- \u53d6\u51fa\u6587\u672c\u4e2d\u51fa\u73b0\u9891\u5ea6\u524d10\u7684\u5355\u8bcd c2 . most_common ( 10 ) \u5b57\u5178\u516c\u5171\u952e \u00b6 \u5feb\u901f\u627e\u5230\u591a\u4e2a\u5b57\u5178\u4e2d\u7684\u516c\u5171\u952e \u5b9e\u9645\u6848\u4f8b: \u897f\u73ed\u7259\u8db3\u7403\u7532\u7ea7\u8054\u8d5b, \u6bcf\u8f6e\u7403\u5458\u8fdb\u7403\u7edf\u8ba1: \u7b2c\u4e00\u8f6e: {'\u82cf\u4e9a\u96f7\u65af': 1, '\u6885\u897f': 2, '\u672c\u6cfd\u9a6c'\uff1a1,...} \u7b2c\u4e8c\u8f6e: {'\u82cf\u4e9a\u96f7\u65af': 2, 'C\u7f57': 2, '\u683c\u91cc\u5179\u66fc': 2,\u2026} \u7b2c\u4e09\u8f6e: {'\u82cf\u4e9a\u96f7\u65af': 1, '\u6258\u96f7\u65af': 2, '\u8d1d\u5c14': 1,\u2026} \u2026\u2026 .... .... \u7edf\u8ba1\u51fa\u524dN\u8f6e, \u6bcf\u573a\u6bd4\u8d5b\u90fd\u6709\u8fdb\u7403\u7684\u7403\u5458 \u25b3\u65b9\u6848\u4e00: \u53ef\u4ee5\u4f7f\u7528\u5faa\u73af \u25b3\u65b9\u6848\u4e8c: map (\u5f97\u5230T or F)+ all + \u5217\u8868\u63a8\u5bfc\u5f0f \u25b3\u65b9\u6848\u4e09: \u5bf9\u4e8e\u5927\u91cf\u7684\u5b57\u5178, \u6211\u4eec\u901a\u5e38\u5229\u7528\u96c6\u5408\u7684 \u4ea4\u96c6 \u64cd\u4f5c\u83b7\u53d6\u5b57\u5178\u7684\u516c\u5171\u952e from random import randint , sample # -- \u5047\u8bbe\u6bcf\u8f6e\u67093~6\u4eba\u8fdb\u7403,\u6bcf\u4e2a\u4eba\u8fdb\u7403\u7684\u6570\u76ee1~4\u4e2a d1 = { k : randint ( 1 , 4 ) for k in sample ( 'abcdefgh' , randint ( 3 , 6 ))} d2 = { k : randint ( 1 , 4 ) for k in sample ( 'abcdefgh' , randint ( 3 , 6 ))} d3 = { k : randint ( 1 , 4 ) for k in sample ( 'abcdefgh' , randint ( 3 , 6 ))} \"\"\" \u2605 --\u65b9\u6cd5\u4e00:\u7528for\u5faa\u73af \u770bd1\u5b57\u5178\u4e2d\u7684\u9879\u662f\u5426\u5728\u5176\u4f59\u4e24\u4e2a\u5b57\u5178\u4e2d \u7f3a\u70b9: \u9762\u5bf9\u5b9e\u9645\u95ee\u9898,\u6211\u4eec\u5e76\u4e0d\u77e5\u9053\u4e00\u5171\u4f1a\u6709\u591a\u5c11\u8f6e \"\"\" [ k for k in d1 if k in d2 and k in d3 ] \"\"\" \u2605 --\u65b9\u6cd5\u4e8c:map+all \u76f4\u63a5\u5bf9\u5b57\u5178\u5faa\u73af,\u5faa\u73af\u6253\u5370\u51fa\u7684\u662f\u5b57\u5178\u7684\u952e \u53ef\u4ee5\u901a\u8fc7 'd' in {'d': 2, 'a': 2} \u8fd9\u79cd\u65b9\u5f0f\u5224\u65ad\u5b57\u5178\u4e2d\u662f\u5426\u6709\u8fd9\u4e2a\u952e `all([True,1]) => True`; `all([True,0]) => False` \"\"\" # -- [k for k in d_list[0] if all(map(lambda item:k in item,d_list[1:]))] d_list = [ d1 , d2 , d3 ] my_list = [] for k in d_list [ 0 ]: # -- all()\u51fd\u6570\u7528\u6765\u5224\u65ad\u53ef\u8fed\u4ee3\u53c2\u6570iterable\u4e2d\u7684\u6240\u6709\u5143\u7d20\u662f\u5426\u90fd\u4e3aTRUE,\u5982\u679c\u662f\u8fd4\u56deTRUE,\u5426\u5219\u8fd4\u56deFalse if all ( map ( lambda item : k in item , d_list [ 1 :])): my_list . append ( k ) print ( my_list ) # -- ['e', 'h', 'g'] \"\"\" \u2605 --\u65b9\u6cd5\u4e09:map+reduce Step1:\u4f7f\u7528\u5b57\u5178\u7684keys()\u65b9\u6cd5,\u5f97\u5230\u4e00\u4e2a\u5b57\u5178keys\u7684\u96c6\u5408 Step2:\u4f7f\u7528map\u51fd\u6570,\u5f97\u5230\u6bcf\u4e2a\u5b57\u5178keys\u7684\u96c6\u5408 Step3:\u4f7f\u7528reduce\u51fd\u6570,\u53d6\u6240\u6709\u5b57\u5178\u7684keys\u96c6\u5408\u7684\u4ea4\u96c6 Ps: `d1.keys()` \u7b49\u540c\u4e8e `dict.keys(d1)` In [16]: list(map(dict.keys,d_list)) Out[16]: [dict_keys(['f', 'b', 'h', 'g', 'a', 'c']), dict_keys(['g', 'f', 'a']), dict_keys(['f', 'h', 'g', 'c', 'a', 'e'])] \"\"\" from functools import reduce d_list = [ d1 , d2 , d3 ] res = reduce ( lambda a , b : a & b , map ( dict . keys , d_list )) print ( res ) # -- {'h', 'g', 'e'} \u5b57\u5178\u65e0\u5e8f \u00b6 \u89e3\u51b3python3.6\u4ee5\u524d\u5b57\u5178\u65e0\u5e8f\u7684\u95ee\u9898 \u4f7f\u7528\u6807\u51c6\u5e93 collections \u4e2d\u7684 OrderedDict . \u4ee5OrderedDict\u66ff\u4ee3\u5185\u7f6e\u5b57\u5178Dict. \u7528\u6cd5\u4e0e\u5b57\u5178\u4e00\u6837!! from collections import OrderedDict from random import shuffle players = list ( 'abcdefgh' ) shuffle ( players ) # \u6253\u4e71players -- ['f', 'e', 'g', 'd', 'b', 'c', 'h', 'a'] od = OrderedDict () for i , p in enumerate ( players , 1 ): od [ p ] = i # -- \u5199\u4e00\u4e2a\u63a5\u53e3,\u6839\u636e\u540d\u5b57\u67e5\u8be2\u6392\u540d def query_by_name ( d , name ): return d [ name ] query_by_name ( od , 'c' ) # 6 \u53ef\u8fed\u4ee3\u5bf9\u8c61\u5207\u7247 \u00b6 \u63d0\u4e00\u5634, \u5207\u7247\u7684\u5b9e\u8d28\u662f\u91cd\u8f7d\u4e86 __getitem__ \u65b9\u6cd5 \u4f7f\u7528\u6807\u51c6\u5e93 itertools \u4e2d\u7684 islice . \u6ce8\u610f\u54e6, \u4f7f\u7528islice\u5bf9\u5b57\u5178\u5207\u7247,\u5207\u7684\u662fkey\u503c.. islice\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668 from itertools import islice from collections import Iterable , Iterator , Generator # -- islice(iterable,start,stop[,step]) \"\"\" \u2605 --islice\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668 \"\"\" print ( list ( range ( 10 )[ 3 : 6 ])) # [3, 4, 5] train = islice ( range ( 10 ), 3 , 6 ) # -- <class 'itertools.islice'> [3, 4, 5] print ( type ( train ), list ( train )) # -- False True True print ( isinstance ( train , Generator ), isinstance ( train , Iterable ), isinstance ( train , Iterator )) \"\"\" \u2605 --\u4f7f\u7528islice\u5bf9\u5b57\u5178\u5207\u7247,\u5207\u7684\u662fkey\u503c \"\"\" my_dict = dict . fromkeys ([ i for i in 'abcde' ], 0 ) print ( my_dict ) # -- {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0} print ( list ( islice ( my_dict , 3 ))) # -- ['a', 'b', 'c'] print ( list ( islice ( my_dict , 1 , 3 ))) # -- ['b', 'c'] \"\"\" \u2605 --\u4f7f\u7528islice\u5bf9\u6587\u4ef6\u5207\u7247 \"\"\" # -- \u8fd9\u4e2a\u65e5\u5fd7\u6587\u4ef6\u4e00\u5171\u670970\u884c f = open ( '/var/log/wifi.log' ) # -- \u82e5\u901a\u8fc7`f.readlines()[10:20]`\u83b7\u53d6\u5230\u884c\u7684\u5217\u8868,\u518d\u5bf9\u6b64\u8fdb\u884c\u5207\u7247,\u53ef\u884c # \u4f46readlines()\u4f1a\u5148\u5c06\u6587\u4ef6\u6240\u6709\u5185\u5bb9\u8bfb\u53d6\u5230\u5185\u5b58\u4e2d,\u5982\u679c\u65e5\u5fd7\u6587\u4ef6\u5f88\u5927,\u5c31\u5f88\u4e0d\u53cb\u597d. f . readlines ()[ 10 : 20 ] # -- islice\u5728\u8fd9\u91cc\u5b9e\u9645\u4e0a\u8bfb\u4e8620\u884c \u524d10\u884c\u6254\u6389 for line in islice ( f , 10 , 20 ): print ( line ) \u5386\u53f2\u8bb0\u5f55\u529f\u80fd \u00b6 \u9700\u6c42: \u5236\u4f5c\u4e00\u4e2a\u7b80\u5355\u7684\u731c\u6570\u5b57\u7684\u5c0f\u6e38\u620f, \u6dfb\u52a0\u5386\u53f2\u8bb0\u5f55\u529f\u80fd, \u663e\u793a\u7528\u6237\u731c\u8fc7\u7684\u6570\u5b57.. 1> \u4f7f\u7528\u6807\u51c6\u5e93 collections \u4e2d\u7684 deque ,\u5b83\u662f\u4e00\u4e2a\u53cc\u7aef\u961f\u5217. \u53cc\u7aef\u961f\u5217, \u5de6\u53f3\u4e24\u7aef\u90fd\u53ef\u4ee5\u8fdb\u884c\u51fa\u961f\u548c\u5165\u961f\u64cd\u4f5c\u7684\u961f\u5217; (\u901a\u5e38\u5386\u53f2\u8bb0\u5f55\u662f\u6709\u9650\u5ea6\u7684,\u4e0d\u80fd\u65e0\u9650\u5b58\u50a8),\u4f7f\u7528\u5bb9\u91cf\u4e3an\u7684\u961f\u5217\u5b58\u50a8\u5386\u53f2\u8bb0\u5f55 2> \u4f7f\u7528 pickle \u6a21\u5757\u5c06\u5386\u53f2\u8bb0\u5f55\u5b58\u5230\u786c\u76d8,\u4ee5\u4fbf\u4e0b\u6b21\u542f\u52a8\u4f7f\u7528 \u56e0\u4e3a\u8fd9\u4e2a\u961f\u5217\u662f\u5728\u5185\u5b58\u5f53\u4e2d\u7684,\u7a0b\u5e8f\u9000\u51fa\u540e,\u5386\u53f2\u8bb0\u5f55\u5c31\u6d88\u5931\u4e86. from collections import deque # -- \u7b2c\u4e00\u4e2a\u53c2\u6570: \u5bf9\u961f\u5217\u8fdb\u884c\u521d\u59cb\u5316 # \u7b2c\u4e8c\u4e2a\u53c2\u6570: \u961f\u5217\u7684\u5bb9\u91cf,\u4e0d\u4f20\u9ed8\u8ba4\u961f\u5217\u65e0\u9650\u5927 q = deque ([], 5 ) # -- \u5165\u961f\u64cd\u4f5c\u6709\u4e24\u4e2a\u65b9\u6cd5 q.append\u53f3\u7aef\u5165\u961f;q.appendleft\u5de6\u7aef\u5165\u961f # -- \u51fa\u961f\u64cd\u4f5c\u6709\u4e24\u4e2a\u65b9\u6cd5 q.pop\u53f3\u7aef\u51fa\u961f;q.popleft\u5de6\u7aef\u51fa\u961f q . append ( 1 ) q . append ( 2 ) q . append ( 3 ) q . append ( 4 ) q . append ( 5 ) print ( q ) # deque([1, 2, 3, 4, 5], maxlen=5) q . append ( 6 ) # -- \u5bb9\u91cf\u6ee1\u4e86,\u4f1a\u5c061\u81ea\u52a8\u5f39\u51fa\u53bb print ( q ) # deque([2, 3, 4, 5, 6], maxlen=5) \u731c\u6570\u5b57\u5b9e\u73b0: from random import randint from collections import deque def guess ( n , k ): # n\u662f\u7cfb\u7edf\u968f\u673a\u6570,k\u662f\u7528\u6237\u731c\u7684\u6570\u5b57 if n == k : print ( '\u731c\u5bf9\u4e86,\u8fd9\u4e2a\u6570\u5b57\u662f %d .' % k ) return True if n < k : print ( '\u731c\u5927\u4e86,\u6bd4 %d \u5c0f.' % k ) elif n > k : print ( '\u731c\u5c0f\u4e86,\u6bd4 %d \u5927.' % k ) return False def main (): n = randint ( 1 , 100 ) i = 1 hq = deque ([], 5 ) while True : line = input ( '[ %d ] \u8bf7\u8f93\u5165\u4e00\u4e2a\u6570\u5b57\uff1a' % i ) # -- isdigit()\u5224\u65ad\u8f93\u5165\u7684\u662f\u5426\u662f\u6570\u5b57 if line . isdigit (): k = int ( line ) hq . append ( k ) i += 1 # -- \u731c\u5bf9\u4e86guess()\u8fd4\u56deTrue,\u7a0b\u5e8f\u9000\u51fa;\u731c\u9519\u4e86,\u7ee7\u7eed\u731c. if guess ( n , k ): break elif line == 'quit' : break # -- \u6dfb\u52a0\u4e00\u4e2a\u67e5\u8be2\u5386\u53f2\u8bb0\u5f55\u7684\u63a5\u53e3 elif line == 'h?' : print ( list ( hq )) if __name__ == '__main__' : main () \u6c38\u4e45\u5b58\u50a8 # -- \u4f7f\u7528pickle\u6a21\u5757\u5c06\u5386\u53f2\u8bb0\u5f55\u5b58\u5230\u786c\u76d8,\u4ee5\u4fbf\u4e0b\u6b21\u542f\u52a8\u4f7f\u7528 import pickle # -- dump()\u53ef\u4ee5\u5c06\u4e00\u4e2apython\u5bf9\u8c61\u5bfc\u5165\u5230\u6587\u4ef6\u4e2d\u53bb # \u7b2c\u4e00\u4e2a\u53c2\u6570:python\u5bf9\u8c61 # \u7b2c\u4e8c\u4e2a\u53c2\u6570:\u6587\u4ef6\u5bf9\u8c61 # \u6ce8\u610f\u5b58\u53d6\u64cd\u4f5c\u90fd\u5fc5\u987b\u662f\u4e8c\u8fdb\u5236 pickle . dump ( q , open ( 'save.pkl' , 'wb' )) # -- \u53d6\u51fa q2 = pickle . load ( open ( 'save.pkl' , 'rb' )) print ( q ) # -- q: deque([2, 3, 4, 5, 6], maxlen=5) print ( q2 ) # -- q2: deque([2, 3, 4, 5, 6], maxlen=5) \u5b57\u7b26\u4e32\u5904\u7406 \u00b6 \u62c6\u5206\u5b57\u7b26\u4e32 \u00b6 \u6709\u8fd9\u6837\u4e00\u5b57\u7b26\u4e32, 'ab;cd|efg|hi,jkl|mn\\topq;rst,uvw\\txyz', \u5982\u4f55\u6839\u636e\u5206\u9694\u7b26 ; , | \\t \u8fdb\u884c\u62c6\u5206\uff1f \u25b3\u65b9\u6848\u4e00: \u8fde\u7eed\u4f7f\u7528 str.split() \u65b9\u6cd5,\u6bcf\u6b21\u53ea\u80fd\u5904\u7406\u4e00\u79cd\u5206\u9694\u53f7, \u9700\u964d\u7ef4\u5904\u7406 map()+str.split() sum()+str.split() reduce()+map()+sum()+str.split() \u25b3\u65b9\u6848\u4e8c: \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u7684 re.split() \u65b9\u6cd5 PS: \u5904\u7406\u4e00\u4e2a\u5206\u9694\u7b26\u7684\u65f6\u5019\u4f7f\u7528\u65b9\u6cd5\u4e00(\u4e00\u4e2a\u7684\u65f6\u5019,\u65b9\u6cd5\u4e8c\u4f1a\u6bd4\u4e00\u6162);\u591a\u4e2a\u5206\u9694\u7b26\u7684\u65f6\u5019\u4f7f\u7528\u65b9\u6cd5\u4e8c \"\"\" \u2605 --\u65b9\u6848\u4e00 \u8bf4\u5b9e\u8bdd,\u6709\u70b9\u590d\u6742\u5566,\u4f46\u63a8\u5bfc\u540e\u52a0\u6df1\u4e86\u6211\u5bf9map\u3001reduce\u3001sum\u8fd9\u4e9b\u9ad8\u9636\u51fd\u6570\u7684\u7406\u89e3!!!\u8fd91\u4e2a\u534a\u5c0f\u65f6\u6ca1\u767d\u82b1! \"\"\" \u25b2 \u7406\u8bba\u9a8c\u8bc1 map () + str . split () sum () + str . split () >>> s = 'ab;cd|efg|hi,jkl|mn \\t opq;rst,uvw \\t xyz' # -- [['ab'], ['cd', 'efg', 'hi,jkl', 'mn\\topq'], ['rst,uvw\\txyz']] >>> temp = [ i . split ( '|' ) for i in s . split ( ';' )] >>> t = [] # -- list(map(lambda x: t.extend(x),temp)) >>> list ( map ( t . extend , temp )) [ None , None , None ] # -- \u6ce8\u610f,t.extend\u7684\u8fd4\u56de\u503c\u4e3aNone >>> t [ 'ab' , 'cd' , 'efg' , 'hi,jkl' , 'mn \\t opq' , 'rst,uvw \\t xyz' ] >>> sum ( temp ,[]) # -- \u76f8\u5f53\u4e8e []+['ab', 'cd']+['efg'] ==> ['ab', 'cd', 'efg'] [ 'ab' , 'cd' , 'efg' , 'hi,jkl' , 'mn \\t opq' , 'rst,uvw \\t xyz' ] # -- \u8bf4\u5b9e\u8bdd,\u6548\u7387\u6218\u4e14\u4e0d\u8c08,\u633a\u96be\u4e00\u773c\u770b\u51fa\u903b\u8f91\u7684 # -- \u8fd9\u91cc\u6ce8\u610f\u4e2a\u7ec6\u8282,`res = [s]`,\u9996\u5148\u5c06\u5b57\u7b26\u4e32\u653e\u8fdb\u4e86\u4e00\u4e2a\u5217\u8868\u91cc # \u662f\u4e3a\u4e86\u540e\u9762map()\u6620\u5c04\u51fd\u6570,\u4f5c\u7528\u7684\u662f\u5217\u8868\u91cc\u7684\u6574\u4e2a\u5b57\u7b26\u4e32,\u800c\u4e0d\u662f\u5b57\u7b26\u4e32\u91cc\u7684\u6bcf\u4e00\u4e2a\u5b57\u7b26 s = 'ab;cd|efg|hi,jkl|mn \\t opq;rst,uvw \\t xyz' def my_split ( s , seps ): res = [ s ] \"\"\" for\u5faa\u73af\u53ef\u4ee5\u6539\u5199\u4e3a: for sep in seps: res = sum(map(lambda ss: ss.split(sep), res), []) \"\"\" for sep in seps : t = [] # \u4e3e\u4e2a\u4f8b\u5b50: res=['ab,cd;efg'] map\u53d6\u5230\u91cc\u9762\u7684\u5143\u7d20'ab,cd;efg'\u8d4b\u503c\u7ed9ss # 'ab,cd;efg'.split(',')\u5f97\u5230\u7ed3\u679c['ab','cd;efg'] # t.extend(['ab','cd;efg']) \u5e76\u5c06t\u8d4b\u503c\u7ed9res # \u540c\u7406,['ab','cd;efg']\u7ecf\u8fc7map\u52a0\u5de5,\u4f1a\u4f9d\u6b21\u6267\u884c # t.extend('ab'.split(';')) t.extend('cd;efg'.split(';')) # \u518d\u5c06t\u8d4b\u503c\u7ed9res,\u4ee5\u6b64\u7c7b\u63a8 list ( map ( lambda ss : t . extend ( ss . split ( sep )), res )) res = t return res print ( my_split ( s , ',;| \\t ' )) \u25b2 \u7406\u8bba\u9a8c\u8bc1 reduce () + map () + sum () + str . split () \u7eaf\u7cb9\u590d\u6742\u5316\u4e86 ! \u4e00\u70b9\u90fd\u4e0dEffective \u256e ( \uffe3\u25bd\uffe3 \"\" ) \u256d \u5ba2\u5b98 , \u56fe\u4e2a\u4e50\u5427 # -- reduce\u51fd\u6570, \u5c06\u5b57\u7b26\u4e32\u653e\u8fdb\u5217\u8868\u4f5c\u4e3a\u5176\u533f\u540dfunc\u7684data\u53c2\u6570\u7684\u521d\u59cb\u503c, sep\u53c2\u6570\u5148\u5f97\u5230\u503c',' # -- [\u4f7f\u7528map\u51fd\u6570\u53d6\u5143\u7d20\u8fdb\u884c\u5206\u5272,\u5206\u5272\u4f1a\u751f\u6210\u5217\u8868,\u518d\u4f7f\u7528sum\u51fd\u6570\u53d6\u5217\u8868\u5143\u7d20\u64cd\u4f5c..] # <\u4fdd\u8bc1\u662f\u5728\u5bf9\u5143\u7d20\u7ea7\u522b\u8fdb\u884c\u64cd\u4f5c> \u56e0\u4e3amap\u662f\u8fed\u4ee3\u5668,\u6240\u4ee5\u4f1a\u4e00\u8fb9map\u4e00\u8fb9sum # -- \u5c06\u5f97\u5230\u7684\u7ed3\u679c\u518d\u7ed9\u533f\u540dfunc\u7684\u53c2\u6570data, sep\u53c2\u6570\u83b7\u5f97\u65b0\u7684\u503c';' from functools import reduce # \u4e3e\u4e2a\u4f8b\u5b50:data\u7684\u521d\u59cb\u503c\u4e3a['ab,cd;efg'] \u5c06\u5176\u7528map\u8fdb\u884c\u52a0\u5de5 # map\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668,\u53d6data\u4e2d\u7684\u5143\u7d20'ab,cd;efg'\u5f00\u59cb\u5206\u5272, # \u6ce8\u610f\u6b64\u5143\u7d20\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61,\u5bf9\u5176\u52a0\u5de5\u4e0d\u4f1a\u5bf9\u539fdata\u9020\u6210\u4efb\u4f55\u5f71\u54cd!!!! # split\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u5217\u8868['ab','cd;efg'],sum\u51fd\u6570\u5bf9\u5176\u8fdb\u884c\u64cd\u4f5c []+['ab','cd;efg'] # \u5c06\u7ed3\u679c\u6254/\u8d4b\u503c\u7ed9reduce\u7684data,\u6b64\u65f6data\u4e3a['ab','cd;efg'] # \u540c\u6837\u7684\u7528map\u5bf9\u5176\u8fdb\u884c\u52a0\u5de5,\u4e00\u8fb9\u52a0\u5de5\u4e00\u8fb9sum,\u5373\u4f9d\u6b21\u6267\u884c # []+['ab'] ['ab']+['cd','efg'] \u5c06\u6700\u540e\u7ed3\u679c['ab','cd',efg']\u6254\u7ed9reduce\u7684data reduce ( lambda data , sep : sum ( map ( lambda ss : ss . split ( sep ), data ), []), ',;| \\t ' ,[ s ]) \"\"\" \u2605 --\u65b9\u6848\u4e8c \"\"\" import re s = 'ab;cd|efg|hi,jkl|mn \\t opq;rst,uvw \\t xyz' # + \u4ee3\u8868\u4e00\u4e2a\u6216\u8005\u591a\u4e2a res = re . split ( '[;,| \\t ]+' , s ) # ['ab', 'cd', 'efg', 'hi', 'jkl', 'mn', 'opq', 'rst', 'uvw', 'xyz'] print ( res ) \u8c03\u6574\u6587\u672c\u683c\u5f0f \u00b6 \u67d0log\u65e5\u5fd7\u6587\u4ef6. \u5176\u4e2d\u7684\u65e5\u671f\u683c\u5f0f\u4e3a'yyyy-mm-dd' \u6211\u4eec\u60f3\u628a\u5176\u4e2d\u7684\u65e5\u671f\u6539\u4e3a\u7f8e\u56fd\u65e5\u671f\u7684\u683c\u5f0f 'mm/dd/yyyy' \u6bd4\u5982: '2016-05-23' ---> '05/23/2016', \u5e94\u5982\u4f55\u5904\u7406\uff1f \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f re.sub() \u65b9\u6cd5\u505a\u5b57\u7b26\u4e32\u66ff\u6362,\u5229\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u6355\u83b7\u7ec4,\u6355\u83b7\u6bcf\u4e2a\u90e8\u5206\u5185\u5bb9, \u518d\u66ff\u6362\u5b57\u7b26\u4e32\u4e2d\u8c03\u6574\u5404\u4e2a\u6355\u83b7\u7ec4\u7684\u987a\u5e8f # -- 1.txt 2021 - 10 - 14 17 : 56 : 11 good good study 2021 - 09 - 09 day day up 2021 - 10 - 14 17 : 56 : 11 believe yourself import re with open ( '1.txt' ) as f : log = f . read () # -- \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u7ec4()\u62ec\u8d77\u6211\u4eec\u8981\u63d0\u53d6\u7684\u4e09\u4e2a\u90e8\u5206 # \u6355\u83b7\u7ec4\\2 \\3 \\1 \u9700\u8981\u8f6c\u8bd1 print ( re . sub ( '(\\d {4} )-(\\d {2} )-(\\d {2} )' , r '\\2/\\3/\\1' , log )) # -- \u53ef\u4ee5\u7ed9\u7ec4\u547d\u540d re . sub ( '(?P<y>\\d {4} )-(?P<m>\\d {2} )-(?P<d>\\d {2} )' , r '\\g<m>/\\g<d>/\\g<y>' , log ) \"\"\"\u7ed3\u679c\u5982\u4e0b: 10/14/2021 17:56:11 good good study 09/09/2021 day day up 10/14/2021 17:56:11 believe yourself \"\"\" \u62fc\u63a5\u5b57\u7b26\u4e32 \u00b6 \u5728\u7a0b\u5e8f\u4e2d\u6211\u4eec\u5c06\u5404\u4e2a\u53c2\u6570\u6309\u6b21\u5e8f\u6536\u96c6\u5230\u5217\u8868\u4e2d: ['<0112>','<32>','<1024x768>','<60>','<1>','<100.0>','<500.0>'] \u6700\u7ec8\u6211\u4eec\u8981\u628a\u5404\u4e2a\u53c2\u6570\u62fc\u63a5\u6210\u4e00\u4e2a\u6570\u636e\u62a5\u8fdb\u884c\u53d1\u9001. \"<0112><32><1024x768><60><1><100.0><500.0>\" \u25b3\u65b9\u6848\u4e00: \u8fed\u4ee3\u5217\u8868,\u8fde\u7eed\u4f7f\u7528'+'\u64cd\u4f5c\u4f9d\u6b21\u62fc\u63a5\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32 reduce\u4e5f\u80fd\u529e\u5230 \u7f3a\u70b9: \u8fc7\u7a0b\u4e2d\u521b\u5efa\u4e86\u5927\u91cf\u7684\u5b57\u7b26\u4e32,\u7a7a\u95f4\u65f6\u95f4\u4e0a\u6709\u5f88\u5927\u6d6a\u8d39 \u25b3\u65b9\u6848\u4e8c: \u4f7f\u7528 str.join() \u65b9\u6cd5 , \u66f4\u52a0\u5feb\u901f\u7684\u62fc\u63a5\u5217\u8868\u4e2d\u6240\u6709\u7684\u5b57\u7b26\u4e32 \u2714!!! \u5b83\u4f1a\u4e00\u6b21\u6027\u7684\u521b\u5efa\u5185\u5b58,\u4e00\u6b21\u6027\u7684\u62f7\u8d1d \"\"\" \u2605 --\u65b9\u6848\u4e00 \u7f3a\u70b9:\u8fc7\u7a0b\u4e2d\u521b\u5efa\u4e86\u5927\u91cf\u7684\u5b57\u7b26\u4e32,\u7a7a\u95f4\u65f6\u95f4\u4e0a\u6709\u5f88\u5927\u6d6a\u8d39 \"\"\" \u25b2 \u7406\u8bba\u9a8c\u8bc1 >>> s1 = 'abcdef' >>> s2 = '12345' >>> s1 + s2 'abcdef12345' >>> str . __add__ < slot wrapper '__add__' of 'str' objects > >>> s1 . __add__ ( s2 ) 'abcdef12345' >>> str . __add__ ( s1 , s2 ) 'abcdef12345' my_list = [ '<0112>' , '<32>' , '<1024x768>' , '<60>' , '<1>' , '<100.0>' , '<500.0>' ] result = \"\" for item in my_list : result += item # <0112><32><1024x768><60><1><100.0><500.0> print ( result ) # -- \u7b80\u5199 from functools import reduce # <0112><32><1024x768><60><1><100.0><500.0> print ( reduce ( str . __add__ , my_list )) \"\"\" \u2605 --\u65b9\u6848\u4e8c \"\"\" >>> '' . join ([ '<0112>' , '<32>' , '<1024x768>' , '<60>' , '<1>' , '<100.0>' , '<500.0>' ]) '<0112><32><1024x768><60><1><100.0><500.0>' \u5b57\u7b26\u4e32\u5bf9\u9f50 \u00b6 \u67d0\u4e2a\u5b57\u5178\u5b58\u50a8\u4e86\u4e00\u7cfb\u5217\u5c5e\u6027\u503c { \"lodDist\":100.0, \"SmallCull\":0.04, \"DistCull\":500.0, \"trilinear\":40, \"farclip\":477, } \u5728\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u60f3\u4ee5\u5de5\u6574\u7684\u683c\u5f0f\u5c06\u5176\u5185\u5bb9\u8f93\u51fa, \u5982\u4f55\u5904\u7406\uff1f SmallCull:0.04, farclip :477, lodDist :100.0, DistCull :500.0, trilinear:40, \u9996\u5148 max + map \u7b97\u51falen(key)\u7684\u6700\u5927\u503c \u4fbf\u4e8e\u5bf9\u9f50. \u25b3\u65b9\u6848\u4e00: \u4f7f\u7528\u5b57\u7b26\u4e32\u7684 str.ljust() , str.rjust() , str.center() \u8fdb\u884c\u5de6,\u53f3,\u5c45\u4e2d\u5bf9\u9f50 \u25b3\u65b9\u6848\u4e8c: \u4f7f\u7528 format() \u65b9\u6cd5,\u4f20\u9012\u7c7b\u4f3c'<20','>20','^20'\u53c2\u6570\u5b8c\u6210\u540c\u6837\u4efb\u52a1 d = { \"lodDist\" : 100.0 , \"SmallCull\" : 0.04 , \"DistCull\" : 500.0 , \"trilinear\" : 40 , \"farclip\" : 477 , } w = max ( map ( len , d . keys ())) for k , v in d . items (): print ( k . ljust ( w ), ':' , v ) ''' lodDist : 100.0 SmallCull : 0.04 DistCull : 500.0 trilinear : 40 farclip : 477 ''' \u53bb\u9664\u5b57\u7b26 \u00b6 1.\u8fc7\u6ee4\u6389\u7528\u6237\u8f93\u5165\u4e2d\u524d\u540e\u591a\u4f59\u7684\u7a7a\u767d\u5b57\u7b26 2.\u8fc7\u6ee4\u67d0windows\u4e0b\u7f16\u8f91\u6587\u672c\u4e2d\u7684'\\r'(window\u4e0b\u7684\u6362\u884c\u7b26\u662f\\r\\n;linux\u4e0b\u53ea\u9700\u8981\u4e00\u4e2a\\n) 'hello world\\r\\n' \u25b3\u65b9\u6cd5\u4e00: \u5b57\u7b26\u4e32 strip() , lstrip() , rstrip() \u65b9\u6cd5\u53bb\u6389\u5b57\u7b26\u4e32\u4e24\u7aef\u591a\u79cd\u5b57\u7b26 \u25b3\u65b9\u6cd5\u4e8c: \u5220\u9664\u5355\u4e2a\u56fa\u5b9a\u4f4d\u7f6e\u7684\u5b57\u7b26,\u53ef\u4ee5\u4f7f\u7528\u5207\u7247\u7136\u540e\u62fc\u63a5\u7684\u65b9\u5f0f \u25b3\u65b9\u6cd5\u4e09: \u5b57\u7b26\u4e32\u4e2d\u7684\u66ff\u6362\u65b9\u6cd5replace()\u65b9\u6cd5\u6216\u6b63\u5219\u8868\u8fbe\u5f0f\u7684re.sub()\u66ff\u6362\u65b9\u6cd5,\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32 \u25b3\u65b9\u6cd5\u56db: \u5b57\u7b26\u4e32\u7684 translate() \u65b9\u6cd5-\u5b83\u53ef\u4ee5\u5c06\u4e00\u79cd\u5b57\u7b26\u6620\u5c04\u5230\u53e6\u5916\u4e00\u79cd\u5b57\u7b26\u4e0a,\u8fbe\u5230\u540c\u65f6\u5220\u9664\u591a\u79cd\u4e0d\u540c\u5b57\u7b26 >>> s3 = ' abc xyz ' >>> s3 . replace ( ' ' , '' ) 'abcxyz' >>> s3 = ' \\t abc \\t xyz \\n ' >>> s3 . replace ( ' ' , '' ) . replace ( ' \\t ' , '' ) . replace ( ' \\n ' , '' ) 'abcxyz' >>> import re >>> re . sub ( '[ \\t\\n ]+' , '' , s3 ) 'abcxyz' >>> re . sub ( '\\s+' , '' , s3 ) 'abcxyz' \"\"\" \u2605 -- translate() \u5141\u8bb8\u4f20\u5165\u4e00\u4e2a\u6620\u5c04\u8868,\u6839\u636e\u6620\u5c04\u8868\u505a\u66ff\u6362 \u6620\u5c04\u8868\u7684\u5f62\u5f0f\u53ef\u4ee5\u662f\u4e00\u4e2a\u5b57\u5178 {unicode\u503c:unicode\u503c\u6216\u5b57\u7b26\u4e32} maketrans() \u65b9\u4fbf\u6211\u4eec\u505a\u6620\u5c04\u8868 \"\"\" >>> s = 'abc1234xyz' >>> s . translate ({ ord ( 'a' ): 'X' }) 'Xbc1234xyz' >>> s . translate ({ ord ( 'a' ): 'X' , ord ( 'b' ): 'Y' }) 'XYc1234xyz' >>> s . maketrans ( 'abcxyz' , 'XYZABC' ) { 97 : 88 , 98 : 89 , 99 : 90 , 120 : 65 , 121 : 66 , 122 : 67 } >>> s . translate ( s . maketrans ( 'abcxyz' , 'XYZABC' )) 'XYZ1234ABC' # -- \u53ea\u8981\u952e\u503c\u5bf9\u7684\u503c\u4e3anone\u5c31\u53ef\u4ee5\u5220\u9664\u6389\u5b83!!! >>> s . translate ({ ord ( 'a' ): None }) 'bc1234xyz' \u8fed\u4ee3\u4e0e\u53cd\u8fed\u4ee3 \u00b6 \u6293\u53d6\u57ce\u5e02\u6c14\u6e29 \u00b6 \u67d0\u8f6f\u4ef6\u8981\u6c42, \u4ece\u7f51\u7edc\u6293\u53d6\u5404\u4e2a\u57ce\u5e02\u6c14\u6e29\u4fe1\u606f, \u5e76\u4f9d\u6b21\u663e\u793a: \u5317\u4eac: 15~20 \u5929\u6d25: 17~22 \u957f\u6625: 12~18 ... ... ... \u5982\u679c\u4f9d\u6b21\u6293\u53d6\u6240\u6709\u57ce\u5e02\u6c14\u6e29\u518d\u663e\u793a, \u663e\u793a\u7b2c\u4e00\u4e2a\u57ce\u5e02\u6c14\u6e29\u65f6, \u6709\u5f88\u9ad8\u7684\u5ef6\u65f6, \u5e76\u4e14\u6d6a\u8d39\u5b58\u50a8\u7a7a\u95f4. \u6211\u4eec\u671f\u671b\u4ee5\"\u7528\u65f6\u8bbf\u95ee\"\u7684\u7b56\u7565, \u80fd\u628a\u6240\u6709\u57ce\u5e02\u6c14\u6e29\u5c01\u88c5\u5230\u4e00\u4e2a\u5bf9\u8c61\u91cc, \u53ef\u7528for\u8bed\u53e5\u8fdb\u884c\u8fed\u4ee3. \u25b3\u65b9\u6848\u4e00: \u5b9e\u73b0\u4e00\u4e2a\u8fed\u4ee3\u5668\u5bf9\u8c61 , __next__ \u65b9\u6cd5\u6bcf\u6b21\u8fd4\u56de\u4e00\u4e2a\u57ce\u5e02\u7684\u4fe1\u606f \u25b3\u65b9\u6848\u4e8c: \u5b9e\u73b0\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61 , __iter__ \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u751f\u6210\u5668\u5bf9\u8c61 # -- \u53ef\u8fed\u4ee3\u5bf9\u8c61\u548c\u8fed\u4ee3\u5668\u5bf9\u8c61\u7684\u57fa\u7c7b. \u6211\u4eec\u53ef\u4ee5\u4e0d\u7528\u7ee7\u627f\u5b83\u4eec.\u81ea\u5df1\u7528\u9b54\u6cd5\u65b9\u6cd5\u6784\u5efa. from collections import Iterable , Iterator \"\"\" \u2605 --\u65b9\u6848\u4e00 \"\"\" import requests class WeaterIterator (): def __init__ ( self , citys ): self . citys = citys # \u7528\u4e8e\u624b\u5de5\u7ef4\u62a4\u6574\u4e2a\u8fed\u4ee3\u5668\u7684\u72b6\u6001 self . index = 0 def __iter__ ( self ): return self def __next__ ( self ): if self . index == len ( self . citys ): raise StopIteration city = self . citys [ self . index ] self . index += 1 return self . get_weather ( city ) def get_weather ( self , city ): url = \"http://www.jcznedu.com:5000/weather/now/?city=\" + city r = requests . get ( url ) # -- r.json()\u8fd4\u56de\u7ed3\u679c\u7684json\u5bf9\u8c61 data = r . json ()[ \"data\" ][ \"now\" ] # -- \u57ce\u5e02\u3001\u6e29\u5ea6\u3001\u6e7f\u5ea6 return city , data [ 'temperature' ], data [ 'humidity' ] def show ( w ): for x in w : print ( x ) if __name__ == \"__main__\" : w = WeaterIterator ([ '\u5317\u4eac' , '\u4e0a\u6d77' , '\u5e7f\u5dde' ]) print ( w . __next__ ()) print ( w . __iter__ ()) show ( w ) # ('\u5317\u4eac', 28.3, 39.0) # <__main__.WeaterIterator object at 0x7f9e9ce8eaf0> # ('\u4e0a\u6d77', 20.2, 99.0) # ('\u5e7f\u5dde', 33.0, 53.0) \"\"\" \u2605 --\u65b9\u6848\u4e8c \"\"\" import requests class Weater (): def __init__ ( self , citys ): self . citys = citys def __iter__ ( self ): for city in self . citys : yield self . get_weather ( city ) def get_weather ( self , city ): url = \"http://www.jcznedu.com:5000/weather/now/?city=\" + city r = requests . get ( url ) data = r . json ()[ \"data\" ][ \"now\" ] return city , data [ 'temperature' ], data [ 'humidity' ] if __name__ == \"__main__\" : w = Weater ([ '\u5317\u4eac' , '\u4e0a\u6d77' , '\u5e7f\u5dde' ]) # -- for\u5faa\u73af\u7684\u65f6\u5019,\u4f1a\u8c03\u7528w\u5bf9\u8c61\u91cd\u5199\u7684__iter__\u65b9\u6cd5,\u91cc\u9762\u6709yield\u5173\u952e\u5b57 # w.__iter__()\u5f97\u5230\u4e00\u4e2a\u8fed\u4ee3\u5668 for\u5faa\u73af\u518d\u4e0d\u65ad__next__\u53d6\u503c # print(w.__iter__().__next__()) # print(type(w.__iter__())) # <class 'generator'> for x in w : print ( x ) # ('\u5317\u4eac', 28.5, 39.0) # ('\u4e0a\u6d77', 20.2, 100.0) # ('\u5e7f\u5dde', 33.1, 51.0) \u67e5\u627e\u7d20\u6570 \u00b6 \u5b9e\u73b0\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u7c7b,\u5b83\u80fd\u8fed\u4ee3\u51fa\u7ed9\u5b9a\u8303\u56f4\u5185\u6240\u6709\u7d20\u6570: \u8d28\u6570\u5373\u7d20\u6570.\u6307\u5728\u5927\u4e8e1\u7684\u81ea\u7136\u6570\u4e2d,\u53ea\u80fd\u88ab1\u548c\u81ea\u8eab\u6574\u9664\u7684\u81ea\u7136\u6570 pn = PrimeNumbers(1,30) print([k for k in pn]) \u8f93\u51fa\u7ed3\u679c: [2,3,5,7,11,13,17,19,23,29] \u25b3\u65b9\u6848\u4e00: for\u5faa\u73af\u5f97\u5230\u8fed\u4ee3\u5668\u5bf9\u8c61 \u25b3\u65b9\u6848\u4e8c: for\u5faa\u73af\u5f97\u5230\u751f\u6210\u5668\u5bf9\u8c61 \"\"\" \u2605 --\u65b9\u6848\u4e00 \"\"\" class PrimeNumbers : def __init__ ( self , a , b ): self . a = a self . b = b def __iter__ ( self ): return self def __next__ ( self ): if self . a < self . b + 1 : if self . is_prime ( self . a ): index = self . a self . a += 1 return index self . a += 1 else : raise StopIteration def is_prime ( self , k ): # -- 5%2 5%3 5%4 \u90fd\u6709\u4f59\u6570,\u8bc1\u660e5\u5c31\u662f\u8d28\u6570 return False if k < 2 else all ( map ( lambda x : k % x , range ( 2 , k - 1 ))) pn = PrimeNumbers ( 1 , 30 ) for n in pn : if n != None : print ( n , end = ' ' ) \"\"\" \u2605 --\u65b9\u6848\u4e8c \"\"\" from inspect import isgenerator class PrimeNumbers : def __init__ ( self , a , b ): self . a = a self . b = b def __iter__ ( self ): for k in range ( self . a , self . b + 1 ): if self . is_prime ( k ): yield k def is_prime ( self , k ): # -- \u4e0d\u4f1a\u6709\u6d6a\u8d39, all\u78b0\u5230\u4e00\u4e2a\u5047\u5c31\u4f1a\u8fd4\u56deFalse return False if k < 2 else all ( map ( lambda x : k % x , range ( 2 , k - 1 ))) pn = PrimeNumbers ( 1 , 30 ) # -- \u8fd9\u91cc\u5b83\u53d8\u6210\u4e86\u751f\u6210\u5668 `yield k` k\u662fnext()\u51fd\u6570\u7684\u8fd4\u56de\u503c. print ( isgenerator ( iter ( pn ))) # True for n in pn : print ( n , end = ' ' ) # -- 2 3 5 7 11 13 17 19 23 29 \u6d6e\u70b9\u6570\u53d1\u751f\u5668 \u00b6 \u5b9e\u73b0\u4e00\u4e2a\u8fde\u7eed\u6d6e\u70b9\u6570\u53d1\u751f\u5668FloatRange(\u548crange\u7c7b\u4f3c), \u6839\u636e\u7ed9\u5b9a\u7684\u8303\u56f4(start,end)\u548c\u6b65\u8fdb\u503c(step)\u4ea7\u751f\u4e00\u7cfb\u5217\u8fde\u7eed\u6d6e\u70b9\u6570, \u5982\u8fed\u4ee3FloatRange(3.0,4.0,0.2) \u53ef\u4ea7\u751f\u5e8f\u5217: \u6b63\u5411: 3.0 -> 3.2 -> 3.4 -> 3.6 -> 3.8 -> 4.0 \u53cd\u5411: 4.0 -> 3.8 -> 3.6 -> 3.4 -> 3.2 -> 3.0 \u89e3\u51b3\u65b9\u6848: \u5b9e\u73b0\u53cd\u5411\u8fed\u4ee3\u534f\u8bae\u7684 __reversed__ \u65b9\u6cd5 ,\u5b83\u8fd4\u56de\u4e00\u4e2a\u53cd\u5411\u8fed\u4ee3\u5668. reversed()\u65b9\u6cd5\u7684\u672c\u8d28\u662f\u5e8f\u5217\u7684\u5e95\u5c42\u5b9e\u73b0\u4e86 __reversed__ \u65b9\u6cd5 >>> a = [ 1 , 2 , 3 ] >>> reversed ( a ) < list_reverseiterator object at 0x7ff5b973f2b0 > # -- \u5f97\u5230\u4e00\u4e2a\u53cd\u5411\u8fed\u4ee3\u5668 >>> reversed ( a ) . __next__ () 3 >>> iter ( a ) < list_iterator object at 0x7ff5b97a4700 > # -- \u5f97\u5230\u4e00\u4e2a\u6b63\u5411\u8fed\u4ee3\u5668 \u6d6e\u70b9\u6570\u7684\u8bef\u5dee >>> from decimal import Decimal >>> Decimal ( '0.1' ) * 3 Decimal ( '0.3' ) >>> 0.1 * 3 0.30000000000000004 >>> Decimal ( '0.2' ) + Decimal ( '0.3' ) # -- \u6709\u4e9b\u6d6e\u70b9\u6570\u5b58\u5728\u8bef\u5dee,\u4e3a\u4e86\u907f\u514d,\u5148\u628a\u6d6e\u70b9\u6570\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32 Decimal ( '0.5' ) >>> float ( Decimal ( '0.2' ) + Decimal ( '0.3' )) 0.5 # -- 2.675\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570\u56db\u820d\u4e94\u5165\u7ed3\u679c\u662f2.67\u800c\u4e0d\u662f2.68,\u56e0\u4e3a2.675\u5728\u5185\u90e8\u7684\u5b58\u50a8\u503c\u662f2.647999999.. >>> round ( 2.675 , 2 ) 2.67 \u8fde\u7eed\u6d6e\u70b9\u6570\u53d1\u751f\u5668\u4ee3\u7801\u5982\u4e0b: from decimal import Decimal # -- py\u6807\u51c6\u5e93\u4e2d\u4e13\u95e8\u5904\u7406\u5341\u8fdb\u5236\u6d6e\u70b9\u6570\u7684\u5e93 class FloatRange : def __init__ ( self , a , b , step ): # -- \u4f7f\u7528\u5b9e\u4f8b\u5c5e\u6027\u7ef4\u62a4\u4f20\u5165\u7684\u8fd9\u51e0\u4e2a\u53c2\u6570 self . a = Decimal ( str ( a )) self . b = Decimal ( str ( b )) self . step = Decimal ( str ( step )) def __iter__ ( self ): t = self . a while t <= self . b : yield float ( t ) t += self . step def __reversed__ ( self ): t = self . b while t >= self . a : yield float ( t ) t -= self . step fr = FloatRange ( 3.0 , 4.0 , 0.2 ) for x in fr : print ( x ) print ( '-' * 10 ) for x in reversed ( fr ): print ( x ) \"\"\" 3.0 3.2 3.4 3.6 3.8 4.0 ---------- 4.0 3.8 3.6 3.4 3.2 3.0 \"\"\" \u5e76\u884c\u4e0e\u4e32\u884c \u00b6 \u5728for\u8bed\u53e5\u4e2d\u8fed\u4ee3\u591a\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61 (\u5e76\u884c) \u67d0\u73ed\u5b66\u751f\u671f\u672b\u8003\u8bd5\u6210\u7ee9,\u8bed\u6587\u3001\u6570\u5b66\u3001\u82f1\u8bed\u5206\u522b\u5b58\u50a8\u5728\u4e09\u4e2a\u5217\u8868\u4e2d \u540c\u65f6\u8fed\u4ee3\u4e09\u4e2a\u5217\u8868,\u8ba1\u7b97\u6bcf\u4e2a\u5b66\u751f\u7684\u603b\u5206. (\u4e32\u884c) \u67d0\u5e74\u7ea7\u67094\u4e2a\u73ed,\u67d0\u6b21\u8003\u8bd5\u6bcf\u73ed\u82f1\u8bed\u6210\u7ee9\u5206\u522b\u5b58\u50a8\u57284\u4e2a\u5217\u8868\u4e2d \u4f9d\u6b21\u8fed\u4ee3\u6bcf\u4e2a\u5217\u8868\u7edf\u8ba1\u5168\u5b66\u5e74\u6210\u7ee9\u9ad8\u4e8e90\u5206\u4eba\u6570. \u5e76\u884c: \u4f7f\u7528\u5185\u7f6e\u51fd\u6570zip,\u5b83\u80fd\u5c06\u591a\u4e2a\u8fed\u4ee3\u5bf9\u8c61\u5408\u5e76,\u6bcf\u6b21\u8fed\u4ee3\u8fd4\u56de\u4e00\u4e2a\u5143\u7956. \u4e32\u884c: \u4f7f\u7528\u6807\u51c6\u5e93\u4e2d\u7684 itertools.chain ,\u5b83\u80fd\u5c06\u591a\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u8fde\u63a5. \"\"\" \u2605 --\u5e76\u884c \"\"\" \u25b2 \u6570\u636e\u51c6\u5907 from random import randint chinese = [ randint ( 60 , 100 ) for _ in range ( 20 )] math = [ randint ( 60 , 100 ) for _ in range ( 20 )] english = [ randint ( 60 , 100 ) for _ in range ( 20 )] \u25b2 \u56db\u79cd\u65b9\u5f0f\u7686\u53ef t1 = [] for s1 , s2 , s3 in zip ( chinese , math , english ): t1 . append ( s1 + s2 + s3 ) t2 = [ sum ( s ) for s in zip ( chinese , math , english )] t3 = list ( map ( sum , zip ( chinese , math , english ))) t4 = list ( map ( lambda s1 , s2 , s3 : s1 + s2 + s3 , chinese , math , english )) # -- Ps: map\u5b9e\u73b0zip\u51fd\u6570\u7684\u6548\u679c # list(map(lambda *args: args, chinese, math, english)) # list(zip(chinese, math, english)) \"\"\" \u2605 --\u4e32\u884c \"\"\" from itertools import chain from random import randint for x in chain ([ 1 , 2 , 3 ], [ 4 , 5 ], [ 6 , 7 ]): print ( x , end = \" \" ) # -- 1 2 3 4 5 6 7 c1 = [ randint ( 60 , 100 ) for _ in range ( 20 )] c2 = [ randint ( 60 , 100 ) for _ in range ( 22 )] c3 = [ randint ( 60 , 100 ) for _ in range ( 25 )] len ([ x for x in chain ( c1 , c2 , c3 ) if x > 90 ]) \"\"\" \u2605 --\u4f53\u9a8c\u4e0b*\u62c6\u5305\u4e0echain\u7684\u4f5c\u7528 OS:\u8bf4\u5b9e\u8bdd,\u8fd9\u79cd\u6280\u5de7.. -_- \u65e0\u8bed\u5b50. \"\"\" >>> from itertools import chain >>> from functools import reduce >>> s = 'abc;123|xyz;678|fweuow \\t jzka' >>> s . split ( ';' ) [ 'abc' , '123|xyz' , '678|fweuow \\t jzka' ] >>> list ( map ( lambda ss : ss . split ( '|' ), s . split ( ';' ))) [[ 'abc' ], [ '123' , 'xyz' ], [ '678' , 'fweuow \\t jzka' ]] >>> list ( chain ( * [[ 'abc' ], [ '123' , 'xyz' ], [ '678' , 'fweuow \\t jzka' ]])) [ 'abc' , '123' , 'xyz' , '678' , 'fweuow \\t jzka' ] # -- reduce(lambda data, sep: sum(map(lambda ss: ss.split(sep), data), []), ',;|\\t',[s]) >>> list ( reduce ( lambda it_s , sep : chain ( * map ( lambda ss : ss . split ( sep ), it_s )), ';| \\t ' ,[ s ])) [ 'abc' , '123' , 'xyz' , '678' , 'fweuow' , 'jzka' ]","title":"\u9976\u5934\u8bad\u7ec3"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/12_%E9%A5%B6%E5%A4%B4%E8%AE%AD%E7%BB%83/#_1","text":"","title":"\u6570\u636e\u6784\u5efa\u4e0e\u89e3\u6790"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/12_%E9%A5%B6%E5%A4%B4%E8%AE%AD%E7%BB%83/#_2","text":"\u5217\u8868\u3001\u5b57\u5178\u3001\u96c6\u5408\u751f\u6210\u5f0f \u8fc7\u6ee4\u5217\u8868\u4e2d\u7684\u8d1f\u6570 \u53d6\u51fa\u5b57\u5178\u4e2d\u7684\u503c\u5927\u4e8e90\u7684\u952e\u503c\u5bf9 \u53d6\u51fa\u96c6\u5408\u4e2d\u80fd\u88ab3\u6574\u9664\u7684\u6570 \u25b3\u65b9\u6848\u4e00: \u5217\u8868\u89e3\u6790\u3001\u5b57\u5178\u89e3\u6790\u3001\u96c6\u5408\u89e3\u6790 \u25b3\u65b9\u6848\u4e8c: filter from random import randint data_list = [ randint ( - 10 , 10 ) for _ in range ( 10 )] data_dict = { f 'student { i } ' : randint ( 60 , 100 ) for i in range ( 1 , 20 )} data_set = { randint ( 0 , 20 ) for _ in range ( 20 )} # -- \u5217\u8868 [ x for x in data_list if x >= 0 ] filter ( lambda x : x >= 0 , data_list ) # -- \u5b57\u5178 { k : v for k , v in data_dict . items () if v > 90 } filter ( lambda x : x [ 1 ] > 90 , data_dict . items ()) # -- \u96c6\u5408 { x for x in data_set if x % 3 == 0 } filter ( lambda x : x % 3 == 0 , data_set )","title":"\u7b5b\u9009\u6570\u636e"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/12_%E9%A5%B6%E5%A4%B4%E8%AE%AD%E7%BB%83/#_3","text":"\u5982\u4f55 \u4e3a\u5143\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u547d\u540d ,\u63d0\u9ad8\u7a0b\u5e8f\u7684\u53ef\u8bfb\u6027\uff1f \u5bf9\u4e8e\u683c\u5f0f\u56fa\u5b9a\u7684\u6570\u636e, \u6211\u4eec\u901a\u5e38\u53ef\u4ee5\u4f7f\u7528\u5143\u7956\u6765\u5b58\u50a8 \u6bd4\u5982\u67d0\u4e2a\u5b66\u751f\u4fe1\u606f\u7cfb\u7edf, \u5176\u4e2d\u6bcf\u4e2a\u5b66\u751f\u7684\u683c\u5f0f\u90fd\u662f\u786e\u5b9a\u7684(\u540d\u5b57\u3001\u5e74\u9f84\u3001\u6027\u522b\u3001\u90ae\u7bb1) ('Jim',16,'male', jim8721@gmail.com ) 1> \u4f7f\u7528\u5143\u7956\u7684 \u4f18\u70b9 : \u8282\u7701\u7a7a\u95f4!!! \u5b58\u50a8\u76f8\u540c\u7684\u6570\u636e, \u4f7f\u7528\u5143\u7956\u6bd4\u4f7f\u7528\u5b57\u5178\u5f00\u9500\u4f1a\u5c0f\u5f88\u591a\uff01 2> \u4f7f\u7528\u5143\u7956\u7684 \u7f3a\u70b9 : \u8bbf\u95ee\u7684\u65f6\u5019, \u6211\u4eec\u9700\u8981\u4f7f\u7528\u7d22\u5f15(index)\u8bbf\u95ee, \u5927\u91cf\u7d22\u5f15\u964d\u4f4e\u7a0b\u5e8f\u53ef\u8bfb\u6027. \u56e0\u4e3a\u5b83\u4e0d\u77e5\u9053\u5143\u7ec4\u4e2d\u6bcf\u4e2a\u5b57\u6bb5\u7684\u542b\u4e49. \u4f7f\u7528 collections.namedtuple \u66ff\u4ee3\u5185\u7f6etuple (\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u4e00\u7cfb\u5217\u6570\u503c\u5e38\u91cf\u6216\u679a\u4e3e\u7c7b\u578b\u6765\u89e3\u51b3..\u4f46\u4e0d\u63a8\u8350 \u7565) \u4f7f\u7528\u6807\u51c6\u5e93collections\u4e0b\u7684\u4e00\u4e2a\u547d\u540d\u5143\u7956namedtuple: \u5373\u4e3a\u5143\u7956\u7684\u6bcf\u4e2a\u5b57\u6bb5\u8d77\u540d\u5b57 \u5b83\u662f\u4e00\u4e2a\u7c7b\u7684\u5de5\u5382, \u53ef\u4ee5\u521b\u5efa\u51fa\u4e00\u79cd\u5143\u7956\u7684\u5b50\u7c7b, \u5b83\u5176\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bb5\u662f\u6709\u540d\u5b57\u7684 \u7b2c\u4e00\u4e2a\u53c2\u6570: \u4e3a\u547d\u540d\u5143\u7956\u8d77\u4e2a\u540d\u5b57 \u7b2c\u4e8c\u4e2a\u53c2\u6570: \u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u5217\u8868, \u5305\u542b\u4e86\u547d\u540d\u5143\u7956\u4e2d\u6bcf\u4e2a\u5b57\u6bb5\u7684\u540d\u5b57 return: \u8fd4\u56de\u4e00\u4e2a\u7c7b, \u5143\u7956\u7684\u5b50\u7c7b In [ 27 ]: from collections import namedtuple # -- namedtuple()\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u4e2a\u7c7b; student0\u662fnamedtuple()()\u7684\u5b9e\u4f8b\u5316, In [ 28 ]: student0 = namedtuple ( 'Stu0' ,[ 'name' , 'age' , 'sex' , 'email' ])( 'xiaoming' , ... : 16 , 'man' , '123456@qq.com' ) In [ 29 ]: student0 Out [ 29 ]: Stu0 ( name = 'xiaoming' , age = 16 , sex = 'man' , email = '123456@qq.com' ) In [ 30 ]: student0 [ 0 ] Out [ 30 ]: 'xiaoming' In [ 38 ]: student0 . name Out [ 38 ]: 'xiaoming'","title":"\u5143\u7ec4\u5143\u7d20\u547d\u540d"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/12_%E9%A5%B6%E5%A4%B4%E8%AE%AD%E7%BB%83/#_4","text":"\u6839\u636e\u5b57\u5178\u4e2d\u503c\u7684\u5927\u5c0f\u5bf9\u5b57\u5178\u4e2d\u7684\u9879\u8fdb\u884c\u6392\u5e8f,\u5e76\u52a0\u4e0a\u6392\u540d \u4f20\u9012sorted\u51fd\u6570\u7684 key \u53c2\u6570. from random import randint data = { i : randint ( 60 , 100 ) for i in 'abcdefg' } temp = sorted ( data . items (), key = lambda item : item [ 1 ], reverse = True ) # -- \u7b49\u540c\u4e8e {items[0]: (index, items[1]) for index, items in enumerate(temp, 1)} res = { k : ( index , v ) for index , ( k , v ) in enumerate ( temp , 1 )} print ( res ) # -- \u5728\u539f\u5b57\u5178\u4e0a,\u52a0\u4e0a\u6392\u540d for index , ( k , v ) in enumerate ( temp , 1 ): data [ k ] = ( index , v ) \"\"\" Ps: sorted(zip(data.values(), data.keys())) \"\"\"","title":"\u5b57\u5178\u6392\u5e8f"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/12_%E9%A5%B6%E5%A4%B4%E8%AE%AD%E7%BB%83/#_5","text":"\u7edf\u8ba1\u5e8f\u5217\u4e2d\u5143\u7d20\u7684\u9891\u5ea6\u5e76\u6392\u5e8f 1.\u67d0\u968f\u673a\u5e8f\u5217[12,5,6,4,6,5,5,7]\u4e2d, \u627e\u5230\u51fa\u73b0\u6b21\u6570\u6700\u9ad8\u76843\u4e2a\u5143\u7d20, \u5b83\u4eec\u51fa\u73b0\u7684\u6b21\u6570\u662f\u591a\u5c11\uff1f 2.\u5bf9\u4e8e\u67d0\u82f1\u6587\u6587\u7ae0\u7684\u5355\u8bcd, \u8fdb\u884c\u8bcd\u9891\u7edf\u8ba1, \u627e\u5230\u51fa\u73b0\u6b21\u6570\u6700\u9ad8\u768410\u4e2a\u5355\u8bcd, \u5b83\u4eec\u51fa\u73b0\u6b21\u6570\u662f\u591a\u5c11\uff1f \u25b3\u65b9\u6848\u4e00: \u5c06\u5e8f\u5217\u8f6c\u6362\u4e3a\u5b57\u5178 {\u5143\u7d20:\u9891\u5ea6} ,\u6839\u636e\u5b57\u5178\u4e2d\u7684\u503c\u6392\u5e8f \u25b3\u65b9\u6848\u4e8c: \u4f7f\u7528\u6807\u51c6\u5e93 collections \u4e2d\u7684 Counter\u5bf9\u8c61 Ps: \u65b9\u6848\u4e00,\u82e5\u5217\u8868\u5f88\u5927\u53ea\u627e\u524d\u4e09\u4e2a,\u5bf9\u6574\u4e2a\u5217\u8868\u6392\u5e8f\u5f88\u6d6a\u8d39, \u8fd9\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528\u5806 import heapq \"\"\" \u2605 --\u65b9\u6848\u4e00 \"\"\" from random import randint data = [ randint ( 0 , 20 ) for _ in range ( 30 )] # -- \u5bf9data\u6570\u636e\u53bb\u91cd\u540e\u4f5c\u4e3a\u5b57\u5178\u7684\u952e,\u6bcf\u4e2a\u952e\u7684\u503c\u90fd\u9ed8\u8ba4\u4e3a0 d = dict . fromkeys ( data , 0 ) # -- \u6ce8\u610f\u4e00\u70b9 \u5b57\u5178\u7684\u952e\u662f\u552f\u4e00\u7684 \u6240\u4ee5\u8981\u8fbe\u5230\u9884\u5b9a\u6548\u679c\u5c31\u4e0d\u80fd\u5bf9d\u8fdb\u884c\u5faa\u73af. for i in data : d [ i ] += 1 sorted ( d . items (), key = lambda item : item [ 1 ], reverse = True )[: 3 ] # -- \u6539\u53d8\u952e\u503c\u987a\u5e8f,\u901a\u8fc7\u5143\u7956\u8fdb\u884c\u6bd4\u8f83 \u597d\u522b\u626d # sorted([(v, k) for k, v in d.items()], reverse=True)[:3] sorted ((( v , k ) for k , v in d . items ()), reverse = True )[: 3 ] \"\"\" \u2605 --\u65b9\u6848\u4e8c \"\"\" from collections import Counter from random import randint data = [ randint ( 0 , 20 ) for _ in range ( 30 )] # -- Counter\u5c31\u76f8\u5f53\u4e8e\u4e00\u4e2a\u9891\u5ea6\u5b57\u5178 # -- \u7c7b\u4f3c\u4e8e\u8fd9\u6837 => Counter({7: 2,0: 1,10: 1,4: 1,16: 2,...,9: 2} c = Counter ( data ) # -- \u53d6\u51fa\u9891\u5ea6\u6700\u9ad8\u7684\u524d3\u4e2a\u6570\u5b57 res = c . most_common ( 3 ) print ( res ) # -- [(0, 6), (20, 3), (4, 3)] \"\"\" \u2605 --\u6587\u672c\u8bcd\u9891\u7edf\u8ba1 \"\"\" import re from collections import Counter # -- \u8bfb\u53d6\u6587\u4ef6 txt = open ( 'example.txt' ) . read () # -- \u4f7f\u7528\u6b63\u5219\u5c06\u8bcd\u5168\u90e8\u5207\u5206\u51fa\u6765,\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u8bcd\u7684\u5217\u8868 word_list = re . split ( '\\W+' , txt ) c2 = Counter ( word_list ) # -- \u53d6\u51fa\u6587\u672c\u4e2d\u51fa\u73b0\u9891\u5ea6\u524d10\u7684\u5355\u8bcd c2 . most_common ( 10 )","title":"\u5143\u7d20\u9891\u5ea6"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/12_%E9%A5%B6%E5%A4%B4%E8%AE%AD%E7%BB%83/#_6","text":"\u5feb\u901f\u627e\u5230\u591a\u4e2a\u5b57\u5178\u4e2d\u7684\u516c\u5171\u952e \u5b9e\u9645\u6848\u4f8b: \u897f\u73ed\u7259\u8db3\u7403\u7532\u7ea7\u8054\u8d5b, \u6bcf\u8f6e\u7403\u5458\u8fdb\u7403\u7edf\u8ba1: \u7b2c\u4e00\u8f6e: {'\u82cf\u4e9a\u96f7\u65af': 1, '\u6885\u897f': 2, '\u672c\u6cfd\u9a6c'\uff1a1,...} \u7b2c\u4e8c\u8f6e: {'\u82cf\u4e9a\u96f7\u65af': 2, 'C\u7f57': 2, '\u683c\u91cc\u5179\u66fc': 2,\u2026} \u7b2c\u4e09\u8f6e: {'\u82cf\u4e9a\u96f7\u65af': 1, '\u6258\u96f7\u65af': 2, '\u8d1d\u5c14': 1,\u2026} \u2026\u2026 .... .... \u7edf\u8ba1\u51fa\u524dN\u8f6e, \u6bcf\u573a\u6bd4\u8d5b\u90fd\u6709\u8fdb\u7403\u7684\u7403\u5458 \u25b3\u65b9\u6848\u4e00: \u53ef\u4ee5\u4f7f\u7528\u5faa\u73af \u25b3\u65b9\u6848\u4e8c: map (\u5f97\u5230T or F)+ all + \u5217\u8868\u63a8\u5bfc\u5f0f \u25b3\u65b9\u6848\u4e09: \u5bf9\u4e8e\u5927\u91cf\u7684\u5b57\u5178, \u6211\u4eec\u901a\u5e38\u5229\u7528\u96c6\u5408\u7684 \u4ea4\u96c6 \u64cd\u4f5c\u83b7\u53d6\u5b57\u5178\u7684\u516c\u5171\u952e from random import randint , sample # -- \u5047\u8bbe\u6bcf\u8f6e\u67093~6\u4eba\u8fdb\u7403,\u6bcf\u4e2a\u4eba\u8fdb\u7403\u7684\u6570\u76ee1~4\u4e2a d1 = { k : randint ( 1 , 4 ) for k in sample ( 'abcdefgh' , randint ( 3 , 6 ))} d2 = { k : randint ( 1 , 4 ) for k in sample ( 'abcdefgh' , randint ( 3 , 6 ))} d3 = { k : randint ( 1 , 4 ) for k in sample ( 'abcdefgh' , randint ( 3 , 6 ))} \"\"\" \u2605 --\u65b9\u6cd5\u4e00:\u7528for\u5faa\u73af \u770bd1\u5b57\u5178\u4e2d\u7684\u9879\u662f\u5426\u5728\u5176\u4f59\u4e24\u4e2a\u5b57\u5178\u4e2d \u7f3a\u70b9: \u9762\u5bf9\u5b9e\u9645\u95ee\u9898,\u6211\u4eec\u5e76\u4e0d\u77e5\u9053\u4e00\u5171\u4f1a\u6709\u591a\u5c11\u8f6e \"\"\" [ k for k in d1 if k in d2 and k in d3 ] \"\"\" \u2605 --\u65b9\u6cd5\u4e8c:map+all \u76f4\u63a5\u5bf9\u5b57\u5178\u5faa\u73af,\u5faa\u73af\u6253\u5370\u51fa\u7684\u662f\u5b57\u5178\u7684\u952e \u53ef\u4ee5\u901a\u8fc7 'd' in {'d': 2, 'a': 2} \u8fd9\u79cd\u65b9\u5f0f\u5224\u65ad\u5b57\u5178\u4e2d\u662f\u5426\u6709\u8fd9\u4e2a\u952e `all([True,1]) => True`; `all([True,0]) => False` \"\"\" # -- [k for k in d_list[0] if all(map(lambda item:k in item,d_list[1:]))] d_list = [ d1 , d2 , d3 ] my_list = [] for k in d_list [ 0 ]: # -- all()\u51fd\u6570\u7528\u6765\u5224\u65ad\u53ef\u8fed\u4ee3\u53c2\u6570iterable\u4e2d\u7684\u6240\u6709\u5143\u7d20\u662f\u5426\u90fd\u4e3aTRUE,\u5982\u679c\u662f\u8fd4\u56deTRUE,\u5426\u5219\u8fd4\u56deFalse if all ( map ( lambda item : k in item , d_list [ 1 :])): my_list . append ( k ) print ( my_list ) # -- ['e', 'h', 'g'] \"\"\" \u2605 --\u65b9\u6cd5\u4e09:map+reduce Step1:\u4f7f\u7528\u5b57\u5178\u7684keys()\u65b9\u6cd5,\u5f97\u5230\u4e00\u4e2a\u5b57\u5178keys\u7684\u96c6\u5408 Step2:\u4f7f\u7528map\u51fd\u6570,\u5f97\u5230\u6bcf\u4e2a\u5b57\u5178keys\u7684\u96c6\u5408 Step3:\u4f7f\u7528reduce\u51fd\u6570,\u53d6\u6240\u6709\u5b57\u5178\u7684keys\u96c6\u5408\u7684\u4ea4\u96c6 Ps: `d1.keys()` \u7b49\u540c\u4e8e `dict.keys(d1)` In [16]: list(map(dict.keys,d_list)) Out[16]: [dict_keys(['f', 'b', 'h', 'g', 'a', 'c']), dict_keys(['g', 'f', 'a']), dict_keys(['f', 'h', 'g', 'c', 'a', 'e'])] \"\"\" from functools import reduce d_list = [ d1 , d2 , d3 ] res = reduce ( lambda a , b : a & b , map ( dict . keys , d_list )) print ( res ) # -- {'h', 'g', 'e'}","title":"\u5b57\u5178\u516c\u5171\u952e"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/12_%E9%A5%B6%E5%A4%B4%E8%AE%AD%E7%BB%83/#_7","text":"\u89e3\u51b3python3.6\u4ee5\u524d\u5b57\u5178\u65e0\u5e8f\u7684\u95ee\u9898 \u4f7f\u7528\u6807\u51c6\u5e93 collections \u4e2d\u7684 OrderedDict . \u4ee5OrderedDict\u66ff\u4ee3\u5185\u7f6e\u5b57\u5178Dict. \u7528\u6cd5\u4e0e\u5b57\u5178\u4e00\u6837!! from collections import OrderedDict from random import shuffle players = list ( 'abcdefgh' ) shuffle ( players ) # \u6253\u4e71players -- ['f', 'e', 'g', 'd', 'b', 'c', 'h', 'a'] od = OrderedDict () for i , p in enumerate ( players , 1 ): od [ p ] = i # -- \u5199\u4e00\u4e2a\u63a5\u53e3,\u6839\u636e\u540d\u5b57\u67e5\u8be2\u6392\u540d def query_by_name ( d , name ): return d [ name ] query_by_name ( od , 'c' ) # 6","title":"\u5b57\u5178\u65e0\u5e8f"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/12_%E9%A5%B6%E5%A4%B4%E8%AE%AD%E7%BB%83/#_8","text":"\u63d0\u4e00\u5634, \u5207\u7247\u7684\u5b9e\u8d28\u662f\u91cd\u8f7d\u4e86 __getitem__ \u65b9\u6cd5 \u4f7f\u7528\u6807\u51c6\u5e93 itertools \u4e2d\u7684 islice . \u6ce8\u610f\u54e6, \u4f7f\u7528islice\u5bf9\u5b57\u5178\u5207\u7247,\u5207\u7684\u662fkey\u503c.. islice\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668 from itertools import islice from collections import Iterable , Iterator , Generator # -- islice(iterable,start,stop[,step]) \"\"\" \u2605 --islice\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668 \"\"\" print ( list ( range ( 10 )[ 3 : 6 ])) # [3, 4, 5] train = islice ( range ( 10 ), 3 , 6 ) # -- <class 'itertools.islice'> [3, 4, 5] print ( type ( train ), list ( train )) # -- False True True print ( isinstance ( train , Generator ), isinstance ( train , Iterable ), isinstance ( train , Iterator )) \"\"\" \u2605 --\u4f7f\u7528islice\u5bf9\u5b57\u5178\u5207\u7247,\u5207\u7684\u662fkey\u503c \"\"\" my_dict = dict . fromkeys ([ i for i in 'abcde' ], 0 ) print ( my_dict ) # -- {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0} print ( list ( islice ( my_dict , 3 ))) # -- ['a', 'b', 'c'] print ( list ( islice ( my_dict , 1 , 3 ))) # -- ['b', 'c'] \"\"\" \u2605 --\u4f7f\u7528islice\u5bf9\u6587\u4ef6\u5207\u7247 \"\"\" # -- \u8fd9\u4e2a\u65e5\u5fd7\u6587\u4ef6\u4e00\u5171\u670970\u884c f = open ( '/var/log/wifi.log' ) # -- \u82e5\u901a\u8fc7`f.readlines()[10:20]`\u83b7\u53d6\u5230\u884c\u7684\u5217\u8868,\u518d\u5bf9\u6b64\u8fdb\u884c\u5207\u7247,\u53ef\u884c # \u4f46readlines()\u4f1a\u5148\u5c06\u6587\u4ef6\u6240\u6709\u5185\u5bb9\u8bfb\u53d6\u5230\u5185\u5b58\u4e2d,\u5982\u679c\u65e5\u5fd7\u6587\u4ef6\u5f88\u5927,\u5c31\u5f88\u4e0d\u53cb\u597d. f . readlines ()[ 10 : 20 ] # -- islice\u5728\u8fd9\u91cc\u5b9e\u9645\u4e0a\u8bfb\u4e8620\u884c \u524d10\u884c\u6254\u6389 for line in islice ( f , 10 , 20 ): print ( line )","title":"\u53ef\u8fed\u4ee3\u5bf9\u8c61\u5207\u7247"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/12_%E9%A5%B6%E5%A4%B4%E8%AE%AD%E7%BB%83/#_9","text":"\u9700\u6c42: \u5236\u4f5c\u4e00\u4e2a\u7b80\u5355\u7684\u731c\u6570\u5b57\u7684\u5c0f\u6e38\u620f, \u6dfb\u52a0\u5386\u53f2\u8bb0\u5f55\u529f\u80fd, \u663e\u793a\u7528\u6237\u731c\u8fc7\u7684\u6570\u5b57.. 1> \u4f7f\u7528\u6807\u51c6\u5e93 collections \u4e2d\u7684 deque ,\u5b83\u662f\u4e00\u4e2a\u53cc\u7aef\u961f\u5217. \u53cc\u7aef\u961f\u5217, \u5de6\u53f3\u4e24\u7aef\u90fd\u53ef\u4ee5\u8fdb\u884c\u51fa\u961f\u548c\u5165\u961f\u64cd\u4f5c\u7684\u961f\u5217; (\u901a\u5e38\u5386\u53f2\u8bb0\u5f55\u662f\u6709\u9650\u5ea6\u7684,\u4e0d\u80fd\u65e0\u9650\u5b58\u50a8),\u4f7f\u7528\u5bb9\u91cf\u4e3an\u7684\u961f\u5217\u5b58\u50a8\u5386\u53f2\u8bb0\u5f55 2> \u4f7f\u7528 pickle \u6a21\u5757\u5c06\u5386\u53f2\u8bb0\u5f55\u5b58\u5230\u786c\u76d8,\u4ee5\u4fbf\u4e0b\u6b21\u542f\u52a8\u4f7f\u7528 \u56e0\u4e3a\u8fd9\u4e2a\u961f\u5217\u662f\u5728\u5185\u5b58\u5f53\u4e2d\u7684,\u7a0b\u5e8f\u9000\u51fa\u540e,\u5386\u53f2\u8bb0\u5f55\u5c31\u6d88\u5931\u4e86. from collections import deque # -- \u7b2c\u4e00\u4e2a\u53c2\u6570: \u5bf9\u961f\u5217\u8fdb\u884c\u521d\u59cb\u5316 # \u7b2c\u4e8c\u4e2a\u53c2\u6570: \u961f\u5217\u7684\u5bb9\u91cf,\u4e0d\u4f20\u9ed8\u8ba4\u961f\u5217\u65e0\u9650\u5927 q = deque ([], 5 ) # -- \u5165\u961f\u64cd\u4f5c\u6709\u4e24\u4e2a\u65b9\u6cd5 q.append\u53f3\u7aef\u5165\u961f;q.appendleft\u5de6\u7aef\u5165\u961f # -- \u51fa\u961f\u64cd\u4f5c\u6709\u4e24\u4e2a\u65b9\u6cd5 q.pop\u53f3\u7aef\u51fa\u961f;q.popleft\u5de6\u7aef\u51fa\u961f q . append ( 1 ) q . append ( 2 ) q . append ( 3 ) q . append ( 4 ) q . append ( 5 ) print ( q ) # deque([1, 2, 3, 4, 5], maxlen=5) q . append ( 6 ) # -- \u5bb9\u91cf\u6ee1\u4e86,\u4f1a\u5c061\u81ea\u52a8\u5f39\u51fa\u53bb print ( q ) # deque([2, 3, 4, 5, 6], maxlen=5) \u731c\u6570\u5b57\u5b9e\u73b0: from random import randint from collections import deque def guess ( n , k ): # n\u662f\u7cfb\u7edf\u968f\u673a\u6570,k\u662f\u7528\u6237\u731c\u7684\u6570\u5b57 if n == k : print ( '\u731c\u5bf9\u4e86,\u8fd9\u4e2a\u6570\u5b57\u662f %d .' % k ) return True if n < k : print ( '\u731c\u5927\u4e86,\u6bd4 %d \u5c0f.' % k ) elif n > k : print ( '\u731c\u5c0f\u4e86,\u6bd4 %d \u5927.' % k ) return False def main (): n = randint ( 1 , 100 ) i = 1 hq = deque ([], 5 ) while True : line = input ( '[ %d ] \u8bf7\u8f93\u5165\u4e00\u4e2a\u6570\u5b57\uff1a' % i ) # -- isdigit()\u5224\u65ad\u8f93\u5165\u7684\u662f\u5426\u662f\u6570\u5b57 if line . isdigit (): k = int ( line ) hq . append ( k ) i += 1 # -- \u731c\u5bf9\u4e86guess()\u8fd4\u56deTrue,\u7a0b\u5e8f\u9000\u51fa;\u731c\u9519\u4e86,\u7ee7\u7eed\u731c. if guess ( n , k ): break elif line == 'quit' : break # -- \u6dfb\u52a0\u4e00\u4e2a\u67e5\u8be2\u5386\u53f2\u8bb0\u5f55\u7684\u63a5\u53e3 elif line == 'h?' : print ( list ( hq )) if __name__ == '__main__' : main () \u6c38\u4e45\u5b58\u50a8 # -- \u4f7f\u7528pickle\u6a21\u5757\u5c06\u5386\u53f2\u8bb0\u5f55\u5b58\u5230\u786c\u76d8,\u4ee5\u4fbf\u4e0b\u6b21\u542f\u52a8\u4f7f\u7528 import pickle # -- dump()\u53ef\u4ee5\u5c06\u4e00\u4e2apython\u5bf9\u8c61\u5bfc\u5165\u5230\u6587\u4ef6\u4e2d\u53bb # \u7b2c\u4e00\u4e2a\u53c2\u6570:python\u5bf9\u8c61 # \u7b2c\u4e8c\u4e2a\u53c2\u6570:\u6587\u4ef6\u5bf9\u8c61 # \u6ce8\u610f\u5b58\u53d6\u64cd\u4f5c\u90fd\u5fc5\u987b\u662f\u4e8c\u8fdb\u5236 pickle . dump ( q , open ( 'save.pkl' , 'wb' )) # -- \u53d6\u51fa q2 = pickle . load ( open ( 'save.pkl' , 'rb' )) print ( q ) # -- q: deque([2, 3, 4, 5, 6], maxlen=5) print ( q2 ) # -- q2: deque([2, 3, 4, 5, 6], maxlen=5)","title":"\u5386\u53f2\u8bb0\u5f55\u529f\u80fd"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/12_%E9%A5%B6%E5%A4%B4%E8%AE%AD%E7%BB%83/#_10","text":"","title":"\u5b57\u7b26\u4e32\u5904\u7406"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/12_%E9%A5%B6%E5%A4%B4%E8%AE%AD%E7%BB%83/#_11","text":"\u6709\u8fd9\u6837\u4e00\u5b57\u7b26\u4e32, 'ab;cd|efg|hi,jkl|mn\\topq;rst,uvw\\txyz', \u5982\u4f55\u6839\u636e\u5206\u9694\u7b26 ; , | \\t \u8fdb\u884c\u62c6\u5206\uff1f \u25b3\u65b9\u6848\u4e00: \u8fde\u7eed\u4f7f\u7528 str.split() \u65b9\u6cd5,\u6bcf\u6b21\u53ea\u80fd\u5904\u7406\u4e00\u79cd\u5206\u9694\u53f7, \u9700\u964d\u7ef4\u5904\u7406 map()+str.split() sum()+str.split() reduce()+map()+sum()+str.split() \u25b3\u65b9\u6848\u4e8c: \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u7684 re.split() \u65b9\u6cd5 PS: \u5904\u7406\u4e00\u4e2a\u5206\u9694\u7b26\u7684\u65f6\u5019\u4f7f\u7528\u65b9\u6cd5\u4e00(\u4e00\u4e2a\u7684\u65f6\u5019,\u65b9\u6cd5\u4e8c\u4f1a\u6bd4\u4e00\u6162);\u591a\u4e2a\u5206\u9694\u7b26\u7684\u65f6\u5019\u4f7f\u7528\u65b9\u6cd5\u4e8c \"\"\" \u2605 --\u65b9\u6848\u4e00 \u8bf4\u5b9e\u8bdd,\u6709\u70b9\u590d\u6742\u5566,\u4f46\u63a8\u5bfc\u540e\u52a0\u6df1\u4e86\u6211\u5bf9map\u3001reduce\u3001sum\u8fd9\u4e9b\u9ad8\u9636\u51fd\u6570\u7684\u7406\u89e3!!!\u8fd91\u4e2a\u534a\u5c0f\u65f6\u6ca1\u767d\u82b1! \"\"\" \u25b2 \u7406\u8bba\u9a8c\u8bc1 map () + str . split () sum () + str . split () >>> s = 'ab;cd|efg|hi,jkl|mn \\t opq;rst,uvw \\t xyz' # -- [['ab'], ['cd', 'efg', 'hi,jkl', 'mn\\topq'], ['rst,uvw\\txyz']] >>> temp = [ i . split ( '|' ) for i in s . split ( ';' )] >>> t = [] # -- list(map(lambda x: t.extend(x),temp)) >>> list ( map ( t . extend , temp )) [ None , None , None ] # -- \u6ce8\u610f,t.extend\u7684\u8fd4\u56de\u503c\u4e3aNone >>> t [ 'ab' , 'cd' , 'efg' , 'hi,jkl' , 'mn \\t opq' , 'rst,uvw \\t xyz' ] >>> sum ( temp ,[]) # -- \u76f8\u5f53\u4e8e []+['ab', 'cd']+['efg'] ==> ['ab', 'cd', 'efg'] [ 'ab' , 'cd' , 'efg' , 'hi,jkl' , 'mn \\t opq' , 'rst,uvw \\t xyz' ] # -- \u8bf4\u5b9e\u8bdd,\u6548\u7387\u6218\u4e14\u4e0d\u8c08,\u633a\u96be\u4e00\u773c\u770b\u51fa\u903b\u8f91\u7684 # -- \u8fd9\u91cc\u6ce8\u610f\u4e2a\u7ec6\u8282,`res = [s]`,\u9996\u5148\u5c06\u5b57\u7b26\u4e32\u653e\u8fdb\u4e86\u4e00\u4e2a\u5217\u8868\u91cc # \u662f\u4e3a\u4e86\u540e\u9762map()\u6620\u5c04\u51fd\u6570,\u4f5c\u7528\u7684\u662f\u5217\u8868\u91cc\u7684\u6574\u4e2a\u5b57\u7b26\u4e32,\u800c\u4e0d\u662f\u5b57\u7b26\u4e32\u91cc\u7684\u6bcf\u4e00\u4e2a\u5b57\u7b26 s = 'ab;cd|efg|hi,jkl|mn \\t opq;rst,uvw \\t xyz' def my_split ( s , seps ): res = [ s ] \"\"\" for\u5faa\u73af\u53ef\u4ee5\u6539\u5199\u4e3a: for sep in seps: res = sum(map(lambda ss: ss.split(sep), res), []) \"\"\" for sep in seps : t = [] # \u4e3e\u4e2a\u4f8b\u5b50: res=['ab,cd;efg'] map\u53d6\u5230\u91cc\u9762\u7684\u5143\u7d20'ab,cd;efg'\u8d4b\u503c\u7ed9ss # 'ab,cd;efg'.split(',')\u5f97\u5230\u7ed3\u679c['ab','cd;efg'] # t.extend(['ab','cd;efg']) \u5e76\u5c06t\u8d4b\u503c\u7ed9res # \u540c\u7406,['ab','cd;efg']\u7ecf\u8fc7map\u52a0\u5de5,\u4f1a\u4f9d\u6b21\u6267\u884c # t.extend('ab'.split(';')) t.extend('cd;efg'.split(';')) # \u518d\u5c06t\u8d4b\u503c\u7ed9res,\u4ee5\u6b64\u7c7b\u63a8 list ( map ( lambda ss : t . extend ( ss . split ( sep )), res )) res = t return res print ( my_split ( s , ',;| \\t ' )) \u25b2 \u7406\u8bba\u9a8c\u8bc1 reduce () + map () + sum () + str . split () \u7eaf\u7cb9\u590d\u6742\u5316\u4e86 ! \u4e00\u70b9\u90fd\u4e0dEffective \u256e ( \uffe3\u25bd\uffe3 \"\" ) \u256d \u5ba2\u5b98 , \u56fe\u4e2a\u4e50\u5427 # -- reduce\u51fd\u6570, \u5c06\u5b57\u7b26\u4e32\u653e\u8fdb\u5217\u8868\u4f5c\u4e3a\u5176\u533f\u540dfunc\u7684data\u53c2\u6570\u7684\u521d\u59cb\u503c, sep\u53c2\u6570\u5148\u5f97\u5230\u503c',' # -- [\u4f7f\u7528map\u51fd\u6570\u53d6\u5143\u7d20\u8fdb\u884c\u5206\u5272,\u5206\u5272\u4f1a\u751f\u6210\u5217\u8868,\u518d\u4f7f\u7528sum\u51fd\u6570\u53d6\u5217\u8868\u5143\u7d20\u64cd\u4f5c..] # <\u4fdd\u8bc1\u662f\u5728\u5bf9\u5143\u7d20\u7ea7\u522b\u8fdb\u884c\u64cd\u4f5c> \u56e0\u4e3amap\u662f\u8fed\u4ee3\u5668,\u6240\u4ee5\u4f1a\u4e00\u8fb9map\u4e00\u8fb9sum # -- \u5c06\u5f97\u5230\u7684\u7ed3\u679c\u518d\u7ed9\u533f\u540dfunc\u7684\u53c2\u6570data, sep\u53c2\u6570\u83b7\u5f97\u65b0\u7684\u503c';' from functools import reduce # \u4e3e\u4e2a\u4f8b\u5b50:data\u7684\u521d\u59cb\u503c\u4e3a['ab,cd;efg'] \u5c06\u5176\u7528map\u8fdb\u884c\u52a0\u5de5 # map\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668,\u53d6data\u4e2d\u7684\u5143\u7d20'ab,cd;efg'\u5f00\u59cb\u5206\u5272, # \u6ce8\u610f\u6b64\u5143\u7d20\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61,\u5bf9\u5176\u52a0\u5de5\u4e0d\u4f1a\u5bf9\u539fdata\u9020\u6210\u4efb\u4f55\u5f71\u54cd!!!! # split\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u5217\u8868['ab','cd;efg'],sum\u51fd\u6570\u5bf9\u5176\u8fdb\u884c\u64cd\u4f5c []+['ab','cd;efg'] # \u5c06\u7ed3\u679c\u6254/\u8d4b\u503c\u7ed9reduce\u7684data,\u6b64\u65f6data\u4e3a['ab','cd;efg'] # \u540c\u6837\u7684\u7528map\u5bf9\u5176\u8fdb\u884c\u52a0\u5de5,\u4e00\u8fb9\u52a0\u5de5\u4e00\u8fb9sum,\u5373\u4f9d\u6b21\u6267\u884c # []+['ab'] ['ab']+['cd','efg'] \u5c06\u6700\u540e\u7ed3\u679c['ab','cd',efg']\u6254\u7ed9reduce\u7684data reduce ( lambda data , sep : sum ( map ( lambda ss : ss . split ( sep ), data ), []), ',;| \\t ' ,[ s ]) \"\"\" \u2605 --\u65b9\u6848\u4e8c \"\"\" import re s = 'ab;cd|efg|hi,jkl|mn \\t opq;rst,uvw \\t xyz' # + \u4ee3\u8868\u4e00\u4e2a\u6216\u8005\u591a\u4e2a res = re . split ( '[;,| \\t ]+' , s ) # ['ab', 'cd', 'efg', 'hi', 'jkl', 'mn', 'opq', 'rst', 'uvw', 'xyz'] print ( res )","title":"\u62c6\u5206\u5b57\u7b26\u4e32"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/12_%E9%A5%B6%E5%A4%B4%E8%AE%AD%E7%BB%83/#_12","text":"\u67d0log\u65e5\u5fd7\u6587\u4ef6. \u5176\u4e2d\u7684\u65e5\u671f\u683c\u5f0f\u4e3a'yyyy-mm-dd' \u6211\u4eec\u60f3\u628a\u5176\u4e2d\u7684\u65e5\u671f\u6539\u4e3a\u7f8e\u56fd\u65e5\u671f\u7684\u683c\u5f0f 'mm/dd/yyyy' \u6bd4\u5982: '2016-05-23' ---> '05/23/2016', \u5e94\u5982\u4f55\u5904\u7406\uff1f \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f re.sub() \u65b9\u6cd5\u505a\u5b57\u7b26\u4e32\u66ff\u6362,\u5229\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u6355\u83b7\u7ec4,\u6355\u83b7\u6bcf\u4e2a\u90e8\u5206\u5185\u5bb9, \u518d\u66ff\u6362\u5b57\u7b26\u4e32\u4e2d\u8c03\u6574\u5404\u4e2a\u6355\u83b7\u7ec4\u7684\u987a\u5e8f # -- 1.txt 2021 - 10 - 14 17 : 56 : 11 good good study 2021 - 09 - 09 day day up 2021 - 10 - 14 17 : 56 : 11 believe yourself import re with open ( '1.txt' ) as f : log = f . read () # -- \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u7ec4()\u62ec\u8d77\u6211\u4eec\u8981\u63d0\u53d6\u7684\u4e09\u4e2a\u90e8\u5206 # \u6355\u83b7\u7ec4\\2 \\3 \\1 \u9700\u8981\u8f6c\u8bd1 print ( re . sub ( '(\\d {4} )-(\\d {2} )-(\\d {2} )' , r '\\2/\\3/\\1' , log )) # -- \u53ef\u4ee5\u7ed9\u7ec4\u547d\u540d re . sub ( '(?P<y>\\d {4} )-(?P<m>\\d {2} )-(?P<d>\\d {2} )' , r '\\g<m>/\\g<d>/\\g<y>' , log ) \"\"\"\u7ed3\u679c\u5982\u4e0b: 10/14/2021 17:56:11 good good study 09/09/2021 day day up 10/14/2021 17:56:11 believe yourself \"\"\"","title":"\u8c03\u6574\u6587\u672c\u683c\u5f0f"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/12_%E9%A5%B6%E5%A4%B4%E8%AE%AD%E7%BB%83/#_13","text":"\u5728\u7a0b\u5e8f\u4e2d\u6211\u4eec\u5c06\u5404\u4e2a\u53c2\u6570\u6309\u6b21\u5e8f\u6536\u96c6\u5230\u5217\u8868\u4e2d: ['<0112>','<32>','<1024x768>','<60>','<1>','<100.0>','<500.0>'] \u6700\u7ec8\u6211\u4eec\u8981\u628a\u5404\u4e2a\u53c2\u6570\u62fc\u63a5\u6210\u4e00\u4e2a\u6570\u636e\u62a5\u8fdb\u884c\u53d1\u9001. \"<0112><32><1024x768><60><1><100.0><500.0>\" \u25b3\u65b9\u6848\u4e00: \u8fed\u4ee3\u5217\u8868,\u8fde\u7eed\u4f7f\u7528'+'\u64cd\u4f5c\u4f9d\u6b21\u62fc\u63a5\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32 reduce\u4e5f\u80fd\u529e\u5230 \u7f3a\u70b9: \u8fc7\u7a0b\u4e2d\u521b\u5efa\u4e86\u5927\u91cf\u7684\u5b57\u7b26\u4e32,\u7a7a\u95f4\u65f6\u95f4\u4e0a\u6709\u5f88\u5927\u6d6a\u8d39 \u25b3\u65b9\u6848\u4e8c: \u4f7f\u7528 str.join() \u65b9\u6cd5 , \u66f4\u52a0\u5feb\u901f\u7684\u62fc\u63a5\u5217\u8868\u4e2d\u6240\u6709\u7684\u5b57\u7b26\u4e32 \u2714!!! \u5b83\u4f1a\u4e00\u6b21\u6027\u7684\u521b\u5efa\u5185\u5b58,\u4e00\u6b21\u6027\u7684\u62f7\u8d1d \"\"\" \u2605 --\u65b9\u6848\u4e00 \u7f3a\u70b9:\u8fc7\u7a0b\u4e2d\u521b\u5efa\u4e86\u5927\u91cf\u7684\u5b57\u7b26\u4e32,\u7a7a\u95f4\u65f6\u95f4\u4e0a\u6709\u5f88\u5927\u6d6a\u8d39 \"\"\" \u25b2 \u7406\u8bba\u9a8c\u8bc1 >>> s1 = 'abcdef' >>> s2 = '12345' >>> s1 + s2 'abcdef12345' >>> str . __add__ < slot wrapper '__add__' of 'str' objects > >>> s1 . __add__ ( s2 ) 'abcdef12345' >>> str . __add__ ( s1 , s2 ) 'abcdef12345' my_list = [ '<0112>' , '<32>' , '<1024x768>' , '<60>' , '<1>' , '<100.0>' , '<500.0>' ] result = \"\" for item in my_list : result += item # <0112><32><1024x768><60><1><100.0><500.0> print ( result ) # -- \u7b80\u5199 from functools import reduce # <0112><32><1024x768><60><1><100.0><500.0> print ( reduce ( str . __add__ , my_list )) \"\"\" \u2605 --\u65b9\u6848\u4e8c \"\"\" >>> '' . join ([ '<0112>' , '<32>' , '<1024x768>' , '<60>' , '<1>' , '<100.0>' , '<500.0>' ]) '<0112><32><1024x768><60><1><100.0><500.0>'","title":"\u62fc\u63a5\u5b57\u7b26\u4e32"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/12_%E9%A5%B6%E5%A4%B4%E8%AE%AD%E7%BB%83/#_14","text":"\u67d0\u4e2a\u5b57\u5178\u5b58\u50a8\u4e86\u4e00\u7cfb\u5217\u5c5e\u6027\u503c { \"lodDist\":100.0, \"SmallCull\":0.04, \"DistCull\":500.0, \"trilinear\":40, \"farclip\":477, } \u5728\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u60f3\u4ee5\u5de5\u6574\u7684\u683c\u5f0f\u5c06\u5176\u5185\u5bb9\u8f93\u51fa, \u5982\u4f55\u5904\u7406\uff1f SmallCull:0.04, farclip :477, lodDist :100.0, DistCull :500.0, trilinear:40, \u9996\u5148 max + map \u7b97\u51falen(key)\u7684\u6700\u5927\u503c \u4fbf\u4e8e\u5bf9\u9f50. \u25b3\u65b9\u6848\u4e00: \u4f7f\u7528\u5b57\u7b26\u4e32\u7684 str.ljust() , str.rjust() , str.center() \u8fdb\u884c\u5de6,\u53f3,\u5c45\u4e2d\u5bf9\u9f50 \u25b3\u65b9\u6848\u4e8c: \u4f7f\u7528 format() \u65b9\u6cd5,\u4f20\u9012\u7c7b\u4f3c'<20','>20','^20'\u53c2\u6570\u5b8c\u6210\u540c\u6837\u4efb\u52a1 d = { \"lodDist\" : 100.0 , \"SmallCull\" : 0.04 , \"DistCull\" : 500.0 , \"trilinear\" : 40 , \"farclip\" : 477 , } w = max ( map ( len , d . keys ())) for k , v in d . items (): print ( k . ljust ( w ), ':' , v ) ''' lodDist : 100.0 SmallCull : 0.04 DistCull : 500.0 trilinear : 40 farclip : 477 '''","title":"\u5b57\u7b26\u4e32\u5bf9\u9f50"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/12_%E9%A5%B6%E5%A4%B4%E8%AE%AD%E7%BB%83/#_15","text":"1.\u8fc7\u6ee4\u6389\u7528\u6237\u8f93\u5165\u4e2d\u524d\u540e\u591a\u4f59\u7684\u7a7a\u767d\u5b57\u7b26 2.\u8fc7\u6ee4\u67d0windows\u4e0b\u7f16\u8f91\u6587\u672c\u4e2d\u7684'\\r'(window\u4e0b\u7684\u6362\u884c\u7b26\u662f\\r\\n;linux\u4e0b\u53ea\u9700\u8981\u4e00\u4e2a\\n) 'hello world\\r\\n' \u25b3\u65b9\u6cd5\u4e00: \u5b57\u7b26\u4e32 strip() , lstrip() , rstrip() \u65b9\u6cd5\u53bb\u6389\u5b57\u7b26\u4e32\u4e24\u7aef\u591a\u79cd\u5b57\u7b26 \u25b3\u65b9\u6cd5\u4e8c: \u5220\u9664\u5355\u4e2a\u56fa\u5b9a\u4f4d\u7f6e\u7684\u5b57\u7b26,\u53ef\u4ee5\u4f7f\u7528\u5207\u7247\u7136\u540e\u62fc\u63a5\u7684\u65b9\u5f0f \u25b3\u65b9\u6cd5\u4e09: \u5b57\u7b26\u4e32\u4e2d\u7684\u66ff\u6362\u65b9\u6cd5replace()\u65b9\u6cd5\u6216\u6b63\u5219\u8868\u8fbe\u5f0f\u7684re.sub()\u66ff\u6362\u65b9\u6cd5,\u66ff\u6362\u6210\u7a7a\u5b57\u7b26\u4e32 \u25b3\u65b9\u6cd5\u56db: \u5b57\u7b26\u4e32\u7684 translate() \u65b9\u6cd5-\u5b83\u53ef\u4ee5\u5c06\u4e00\u79cd\u5b57\u7b26\u6620\u5c04\u5230\u53e6\u5916\u4e00\u79cd\u5b57\u7b26\u4e0a,\u8fbe\u5230\u540c\u65f6\u5220\u9664\u591a\u79cd\u4e0d\u540c\u5b57\u7b26 >>> s3 = ' abc xyz ' >>> s3 . replace ( ' ' , '' ) 'abcxyz' >>> s3 = ' \\t abc \\t xyz \\n ' >>> s3 . replace ( ' ' , '' ) . replace ( ' \\t ' , '' ) . replace ( ' \\n ' , '' ) 'abcxyz' >>> import re >>> re . sub ( '[ \\t\\n ]+' , '' , s3 ) 'abcxyz' >>> re . sub ( '\\s+' , '' , s3 ) 'abcxyz' \"\"\" \u2605 -- translate() \u5141\u8bb8\u4f20\u5165\u4e00\u4e2a\u6620\u5c04\u8868,\u6839\u636e\u6620\u5c04\u8868\u505a\u66ff\u6362 \u6620\u5c04\u8868\u7684\u5f62\u5f0f\u53ef\u4ee5\u662f\u4e00\u4e2a\u5b57\u5178 {unicode\u503c:unicode\u503c\u6216\u5b57\u7b26\u4e32} maketrans() \u65b9\u4fbf\u6211\u4eec\u505a\u6620\u5c04\u8868 \"\"\" >>> s = 'abc1234xyz' >>> s . translate ({ ord ( 'a' ): 'X' }) 'Xbc1234xyz' >>> s . translate ({ ord ( 'a' ): 'X' , ord ( 'b' ): 'Y' }) 'XYc1234xyz' >>> s . maketrans ( 'abcxyz' , 'XYZABC' ) { 97 : 88 , 98 : 89 , 99 : 90 , 120 : 65 , 121 : 66 , 122 : 67 } >>> s . translate ( s . maketrans ( 'abcxyz' , 'XYZABC' )) 'XYZ1234ABC' # -- \u53ea\u8981\u952e\u503c\u5bf9\u7684\u503c\u4e3anone\u5c31\u53ef\u4ee5\u5220\u9664\u6389\u5b83!!! >>> s . translate ({ ord ( 'a' ): None }) 'bc1234xyz'","title":"\u53bb\u9664\u5b57\u7b26"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/12_%E9%A5%B6%E5%A4%B4%E8%AE%AD%E7%BB%83/#_16","text":"","title":"\u8fed\u4ee3\u4e0e\u53cd\u8fed\u4ee3"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/12_%E9%A5%B6%E5%A4%B4%E8%AE%AD%E7%BB%83/#_17","text":"\u67d0\u8f6f\u4ef6\u8981\u6c42, \u4ece\u7f51\u7edc\u6293\u53d6\u5404\u4e2a\u57ce\u5e02\u6c14\u6e29\u4fe1\u606f, \u5e76\u4f9d\u6b21\u663e\u793a: \u5317\u4eac: 15~20 \u5929\u6d25: 17~22 \u957f\u6625: 12~18 ... ... ... \u5982\u679c\u4f9d\u6b21\u6293\u53d6\u6240\u6709\u57ce\u5e02\u6c14\u6e29\u518d\u663e\u793a, \u663e\u793a\u7b2c\u4e00\u4e2a\u57ce\u5e02\u6c14\u6e29\u65f6, \u6709\u5f88\u9ad8\u7684\u5ef6\u65f6, \u5e76\u4e14\u6d6a\u8d39\u5b58\u50a8\u7a7a\u95f4. \u6211\u4eec\u671f\u671b\u4ee5\"\u7528\u65f6\u8bbf\u95ee\"\u7684\u7b56\u7565, \u80fd\u628a\u6240\u6709\u57ce\u5e02\u6c14\u6e29\u5c01\u88c5\u5230\u4e00\u4e2a\u5bf9\u8c61\u91cc, \u53ef\u7528for\u8bed\u53e5\u8fdb\u884c\u8fed\u4ee3. \u25b3\u65b9\u6848\u4e00: \u5b9e\u73b0\u4e00\u4e2a\u8fed\u4ee3\u5668\u5bf9\u8c61 , __next__ \u65b9\u6cd5\u6bcf\u6b21\u8fd4\u56de\u4e00\u4e2a\u57ce\u5e02\u7684\u4fe1\u606f \u25b3\u65b9\u6848\u4e8c: \u5b9e\u73b0\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61 , __iter__ \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u751f\u6210\u5668\u5bf9\u8c61 # -- \u53ef\u8fed\u4ee3\u5bf9\u8c61\u548c\u8fed\u4ee3\u5668\u5bf9\u8c61\u7684\u57fa\u7c7b. \u6211\u4eec\u53ef\u4ee5\u4e0d\u7528\u7ee7\u627f\u5b83\u4eec.\u81ea\u5df1\u7528\u9b54\u6cd5\u65b9\u6cd5\u6784\u5efa. from collections import Iterable , Iterator \"\"\" \u2605 --\u65b9\u6848\u4e00 \"\"\" import requests class WeaterIterator (): def __init__ ( self , citys ): self . citys = citys # \u7528\u4e8e\u624b\u5de5\u7ef4\u62a4\u6574\u4e2a\u8fed\u4ee3\u5668\u7684\u72b6\u6001 self . index = 0 def __iter__ ( self ): return self def __next__ ( self ): if self . index == len ( self . citys ): raise StopIteration city = self . citys [ self . index ] self . index += 1 return self . get_weather ( city ) def get_weather ( self , city ): url = \"http://www.jcznedu.com:5000/weather/now/?city=\" + city r = requests . get ( url ) # -- r.json()\u8fd4\u56de\u7ed3\u679c\u7684json\u5bf9\u8c61 data = r . json ()[ \"data\" ][ \"now\" ] # -- \u57ce\u5e02\u3001\u6e29\u5ea6\u3001\u6e7f\u5ea6 return city , data [ 'temperature' ], data [ 'humidity' ] def show ( w ): for x in w : print ( x ) if __name__ == \"__main__\" : w = WeaterIterator ([ '\u5317\u4eac' , '\u4e0a\u6d77' , '\u5e7f\u5dde' ]) print ( w . __next__ ()) print ( w . __iter__ ()) show ( w ) # ('\u5317\u4eac', 28.3, 39.0) # <__main__.WeaterIterator object at 0x7f9e9ce8eaf0> # ('\u4e0a\u6d77', 20.2, 99.0) # ('\u5e7f\u5dde', 33.0, 53.0) \"\"\" \u2605 --\u65b9\u6848\u4e8c \"\"\" import requests class Weater (): def __init__ ( self , citys ): self . citys = citys def __iter__ ( self ): for city in self . citys : yield self . get_weather ( city ) def get_weather ( self , city ): url = \"http://www.jcznedu.com:5000/weather/now/?city=\" + city r = requests . get ( url ) data = r . json ()[ \"data\" ][ \"now\" ] return city , data [ 'temperature' ], data [ 'humidity' ] if __name__ == \"__main__\" : w = Weater ([ '\u5317\u4eac' , '\u4e0a\u6d77' , '\u5e7f\u5dde' ]) # -- for\u5faa\u73af\u7684\u65f6\u5019,\u4f1a\u8c03\u7528w\u5bf9\u8c61\u91cd\u5199\u7684__iter__\u65b9\u6cd5,\u91cc\u9762\u6709yield\u5173\u952e\u5b57 # w.__iter__()\u5f97\u5230\u4e00\u4e2a\u8fed\u4ee3\u5668 for\u5faa\u73af\u518d\u4e0d\u65ad__next__\u53d6\u503c # print(w.__iter__().__next__()) # print(type(w.__iter__())) # <class 'generator'> for x in w : print ( x ) # ('\u5317\u4eac', 28.5, 39.0) # ('\u4e0a\u6d77', 20.2, 100.0) # ('\u5e7f\u5dde', 33.1, 51.0)","title":"\u6293\u53d6\u57ce\u5e02\u6c14\u6e29"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/12_%E9%A5%B6%E5%A4%B4%E8%AE%AD%E7%BB%83/#_18","text":"\u5b9e\u73b0\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u7c7b,\u5b83\u80fd\u8fed\u4ee3\u51fa\u7ed9\u5b9a\u8303\u56f4\u5185\u6240\u6709\u7d20\u6570: \u8d28\u6570\u5373\u7d20\u6570.\u6307\u5728\u5927\u4e8e1\u7684\u81ea\u7136\u6570\u4e2d,\u53ea\u80fd\u88ab1\u548c\u81ea\u8eab\u6574\u9664\u7684\u81ea\u7136\u6570 pn = PrimeNumbers(1,30) print([k for k in pn]) \u8f93\u51fa\u7ed3\u679c: [2,3,5,7,11,13,17,19,23,29] \u25b3\u65b9\u6848\u4e00: for\u5faa\u73af\u5f97\u5230\u8fed\u4ee3\u5668\u5bf9\u8c61 \u25b3\u65b9\u6848\u4e8c: for\u5faa\u73af\u5f97\u5230\u751f\u6210\u5668\u5bf9\u8c61 \"\"\" \u2605 --\u65b9\u6848\u4e00 \"\"\" class PrimeNumbers : def __init__ ( self , a , b ): self . a = a self . b = b def __iter__ ( self ): return self def __next__ ( self ): if self . a < self . b + 1 : if self . is_prime ( self . a ): index = self . a self . a += 1 return index self . a += 1 else : raise StopIteration def is_prime ( self , k ): # -- 5%2 5%3 5%4 \u90fd\u6709\u4f59\u6570,\u8bc1\u660e5\u5c31\u662f\u8d28\u6570 return False if k < 2 else all ( map ( lambda x : k % x , range ( 2 , k - 1 ))) pn = PrimeNumbers ( 1 , 30 ) for n in pn : if n != None : print ( n , end = ' ' ) \"\"\" \u2605 --\u65b9\u6848\u4e8c \"\"\" from inspect import isgenerator class PrimeNumbers : def __init__ ( self , a , b ): self . a = a self . b = b def __iter__ ( self ): for k in range ( self . a , self . b + 1 ): if self . is_prime ( k ): yield k def is_prime ( self , k ): # -- \u4e0d\u4f1a\u6709\u6d6a\u8d39, all\u78b0\u5230\u4e00\u4e2a\u5047\u5c31\u4f1a\u8fd4\u56deFalse return False if k < 2 else all ( map ( lambda x : k % x , range ( 2 , k - 1 ))) pn = PrimeNumbers ( 1 , 30 ) # -- \u8fd9\u91cc\u5b83\u53d8\u6210\u4e86\u751f\u6210\u5668 `yield k` k\u662fnext()\u51fd\u6570\u7684\u8fd4\u56de\u503c. print ( isgenerator ( iter ( pn ))) # True for n in pn : print ( n , end = ' ' ) # -- 2 3 5 7 11 13 17 19 23 29","title":"\u67e5\u627e\u7d20\u6570"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/12_%E9%A5%B6%E5%A4%B4%E8%AE%AD%E7%BB%83/#_19","text":"\u5b9e\u73b0\u4e00\u4e2a\u8fde\u7eed\u6d6e\u70b9\u6570\u53d1\u751f\u5668FloatRange(\u548crange\u7c7b\u4f3c), \u6839\u636e\u7ed9\u5b9a\u7684\u8303\u56f4(start,end)\u548c\u6b65\u8fdb\u503c(step)\u4ea7\u751f\u4e00\u7cfb\u5217\u8fde\u7eed\u6d6e\u70b9\u6570, \u5982\u8fed\u4ee3FloatRange(3.0,4.0,0.2) \u53ef\u4ea7\u751f\u5e8f\u5217: \u6b63\u5411: 3.0 -> 3.2 -> 3.4 -> 3.6 -> 3.8 -> 4.0 \u53cd\u5411: 4.0 -> 3.8 -> 3.6 -> 3.4 -> 3.2 -> 3.0 \u89e3\u51b3\u65b9\u6848: \u5b9e\u73b0\u53cd\u5411\u8fed\u4ee3\u534f\u8bae\u7684 __reversed__ \u65b9\u6cd5 ,\u5b83\u8fd4\u56de\u4e00\u4e2a\u53cd\u5411\u8fed\u4ee3\u5668. reversed()\u65b9\u6cd5\u7684\u672c\u8d28\u662f\u5e8f\u5217\u7684\u5e95\u5c42\u5b9e\u73b0\u4e86 __reversed__ \u65b9\u6cd5 >>> a = [ 1 , 2 , 3 ] >>> reversed ( a ) < list_reverseiterator object at 0x7ff5b973f2b0 > # -- \u5f97\u5230\u4e00\u4e2a\u53cd\u5411\u8fed\u4ee3\u5668 >>> reversed ( a ) . __next__ () 3 >>> iter ( a ) < list_iterator object at 0x7ff5b97a4700 > # -- \u5f97\u5230\u4e00\u4e2a\u6b63\u5411\u8fed\u4ee3\u5668 \u6d6e\u70b9\u6570\u7684\u8bef\u5dee >>> from decimal import Decimal >>> Decimal ( '0.1' ) * 3 Decimal ( '0.3' ) >>> 0.1 * 3 0.30000000000000004 >>> Decimal ( '0.2' ) + Decimal ( '0.3' ) # -- \u6709\u4e9b\u6d6e\u70b9\u6570\u5b58\u5728\u8bef\u5dee,\u4e3a\u4e86\u907f\u514d,\u5148\u628a\u6d6e\u70b9\u6570\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32 Decimal ( '0.5' ) >>> float ( Decimal ( '0.2' ) + Decimal ( '0.3' )) 0.5 # -- 2.675\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570\u56db\u820d\u4e94\u5165\u7ed3\u679c\u662f2.67\u800c\u4e0d\u662f2.68,\u56e0\u4e3a2.675\u5728\u5185\u90e8\u7684\u5b58\u50a8\u503c\u662f2.647999999.. >>> round ( 2.675 , 2 ) 2.67 \u8fde\u7eed\u6d6e\u70b9\u6570\u53d1\u751f\u5668\u4ee3\u7801\u5982\u4e0b: from decimal import Decimal # -- py\u6807\u51c6\u5e93\u4e2d\u4e13\u95e8\u5904\u7406\u5341\u8fdb\u5236\u6d6e\u70b9\u6570\u7684\u5e93 class FloatRange : def __init__ ( self , a , b , step ): # -- \u4f7f\u7528\u5b9e\u4f8b\u5c5e\u6027\u7ef4\u62a4\u4f20\u5165\u7684\u8fd9\u51e0\u4e2a\u53c2\u6570 self . a = Decimal ( str ( a )) self . b = Decimal ( str ( b )) self . step = Decimal ( str ( step )) def __iter__ ( self ): t = self . a while t <= self . b : yield float ( t ) t += self . step def __reversed__ ( self ): t = self . b while t >= self . a : yield float ( t ) t -= self . step fr = FloatRange ( 3.0 , 4.0 , 0.2 ) for x in fr : print ( x ) print ( '-' * 10 ) for x in reversed ( fr ): print ( x ) \"\"\" 3.0 3.2 3.4 3.6 3.8 4.0 ---------- 4.0 3.8 3.6 3.4 3.2 3.0 \"\"\"","title":"\u6d6e\u70b9\u6570\u53d1\u751f\u5668"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/12_%E9%A5%B6%E5%A4%B4%E8%AE%AD%E7%BB%83/#_20","text":"\u5728for\u8bed\u53e5\u4e2d\u8fed\u4ee3\u591a\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61 (\u5e76\u884c) \u67d0\u73ed\u5b66\u751f\u671f\u672b\u8003\u8bd5\u6210\u7ee9,\u8bed\u6587\u3001\u6570\u5b66\u3001\u82f1\u8bed\u5206\u522b\u5b58\u50a8\u5728\u4e09\u4e2a\u5217\u8868\u4e2d \u540c\u65f6\u8fed\u4ee3\u4e09\u4e2a\u5217\u8868,\u8ba1\u7b97\u6bcf\u4e2a\u5b66\u751f\u7684\u603b\u5206. (\u4e32\u884c) \u67d0\u5e74\u7ea7\u67094\u4e2a\u73ed,\u67d0\u6b21\u8003\u8bd5\u6bcf\u73ed\u82f1\u8bed\u6210\u7ee9\u5206\u522b\u5b58\u50a8\u57284\u4e2a\u5217\u8868\u4e2d \u4f9d\u6b21\u8fed\u4ee3\u6bcf\u4e2a\u5217\u8868\u7edf\u8ba1\u5168\u5b66\u5e74\u6210\u7ee9\u9ad8\u4e8e90\u5206\u4eba\u6570. \u5e76\u884c: \u4f7f\u7528\u5185\u7f6e\u51fd\u6570zip,\u5b83\u80fd\u5c06\u591a\u4e2a\u8fed\u4ee3\u5bf9\u8c61\u5408\u5e76,\u6bcf\u6b21\u8fed\u4ee3\u8fd4\u56de\u4e00\u4e2a\u5143\u7956. \u4e32\u884c: \u4f7f\u7528\u6807\u51c6\u5e93\u4e2d\u7684 itertools.chain ,\u5b83\u80fd\u5c06\u591a\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u8fde\u63a5. \"\"\" \u2605 --\u5e76\u884c \"\"\" \u25b2 \u6570\u636e\u51c6\u5907 from random import randint chinese = [ randint ( 60 , 100 ) for _ in range ( 20 )] math = [ randint ( 60 , 100 ) for _ in range ( 20 )] english = [ randint ( 60 , 100 ) for _ in range ( 20 )] \u25b2 \u56db\u79cd\u65b9\u5f0f\u7686\u53ef t1 = [] for s1 , s2 , s3 in zip ( chinese , math , english ): t1 . append ( s1 + s2 + s3 ) t2 = [ sum ( s ) for s in zip ( chinese , math , english )] t3 = list ( map ( sum , zip ( chinese , math , english ))) t4 = list ( map ( lambda s1 , s2 , s3 : s1 + s2 + s3 , chinese , math , english )) # -- Ps: map\u5b9e\u73b0zip\u51fd\u6570\u7684\u6548\u679c # list(map(lambda *args: args, chinese, math, english)) # list(zip(chinese, math, english)) \"\"\" \u2605 --\u4e32\u884c \"\"\" from itertools import chain from random import randint for x in chain ([ 1 , 2 , 3 ], [ 4 , 5 ], [ 6 , 7 ]): print ( x , end = \" \" ) # -- 1 2 3 4 5 6 7 c1 = [ randint ( 60 , 100 ) for _ in range ( 20 )] c2 = [ randint ( 60 , 100 ) for _ in range ( 22 )] c3 = [ randint ( 60 , 100 ) for _ in range ( 25 )] len ([ x for x in chain ( c1 , c2 , c3 ) if x > 90 ]) \"\"\" \u2605 --\u4f53\u9a8c\u4e0b*\u62c6\u5305\u4e0echain\u7684\u4f5c\u7528 OS:\u8bf4\u5b9e\u8bdd,\u8fd9\u79cd\u6280\u5de7.. -_- \u65e0\u8bed\u5b50. \"\"\" >>> from itertools import chain >>> from functools import reduce >>> s = 'abc;123|xyz;678|fweuow \\t jzka' >>> s . split ( ';' ) [ 'abc' , '123|xyz' , '678|fweuow \\t jzka' ] >>> list ( map ( lambda ss : ss . split ( '|' ), s . split ( ';' ))) [[ 'abc' ], [ '123' , 'xyz' ], [ '678' , 'fweuow \\t jzka' ]] >>> list ( chain ( * [[ 'abc' ], [ '123' , 'xyz' ], [ '678' , 'fweuow \\t jzka' ]])) [ 'abc' , '123' , 'xyz' , '678' , 'fweuow \\t jzka' ] # -- reduce(lambda data, sep: sum(map(lambda ss: ss.split(sep), data), []), ',;|\\t',[s]) >>> list ( reduce ( lambda it_s , sep : chain ( * map ( lambda ss : ss . split ( sep ), it_s )), ';| \\t ' ,[ s ])) [ 'abc' , '123' , 'xyz' , '678' , 'fweuow' , 'jzka' ]","title":"\u5e76\u884c\u4e0e\u4e32\u884c"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/13_ATM_shopping/","text":"\u9879\u76ee\u4ece\u65e0\u5230\u6709\u4f1a\u7ecf\u5386\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4: 1. \u9700\u6c42\u5206\u6790 2. \u8bbe\u8ba1\u7a0b\u5e8f\u4ee5\u53ca\u7a0b\u5e8f\u7684\u67b6\u6784 3. \u5206\u4efb\u52a1\u5f00\u53d1\u7a0b\u5e8f 4. \u6d4b\u8bd5 5. \u4e0a\u7ebf\u8fd0\u884c \u5f00\u53d1 ATM+\u8d2d\u7269\u8f66\u7cfb\u7edf , ATM\u7684\u5b9e\u73b0\u7c7b\u4f3c\u4e8e\u94f6\u884c\u81ea\u52a9\u63d0\u6b3e\u673a\u6838\u5fc3\u4e1a\u52a1, \u8d2d\u7269\u8f66\u7684\u5b9e\u73b0\u7c7b\u4f3c\u4e8e\u6dd8\u5b9d\u5546\u57ce\u8d2d\u7269\u7cfb\u7edf. \u9700\u6c42\u5206\u6790 \u00b6 [\u9700\u6c42] \u989d\u5ea615000\u6216\u81ea\u5b9a\u4e49 ---> \u6ce8\u518c(\u4fe1\u7528\u5361) \u652f\u6301\u591a\u8d26\u6237\u767b\u5f55 ---> \u767b\u5f55 \u5b9e\u73b0\u8d2d\u7269\u5546\u57ce, \u4e70\u4e1c\u897f\u52a0\u5165\u8d2d\u7269\u8f66, \u8c03\u7528\u4fe1\u7528\u5361\u63a5\u53e3\u7ed3\u8d26. ---> \u8d2d\u7269 \u53ef\u4ee5\u63d0\u73b0, \u624b\u7eed\u8d395% ---> \u63d0\u73b0 \u652f\u6301\u8d26\u6237\u95f4\u8f6c\u8d26 ---> \u8f6c\u8d26 \u8bb0\u5f55\u65e5\u5e38\u6d88\u8d39\u6d41\u6c34 ---> \u8bb0\u5f55\u6d41\u6c34 \u6d88\u8d39\u7684\u6bcf\u4e00\u7b14\u4f1a\u6709\u4e2a\u8bb0\u5f55 \u63d0\u4f9b\u8fd8\u6b3e\u63a5\u53e3 ---> \u8fd8\u6b3e\u63a5\u53e3 ATM\u8bb0\u5f55\u64cd\u4f5c\u65e5\u5fd7 ---> \u65e5\u5fd7 \u63d0\u4f9b\u7ba1\u7406\u63a5\u53e3,\u5305\u62ec\u6dfb\u52a0\u7528\u6237\u3001\u51bb\u7ed3\u8d26\u6237\u7b49.. ---> \u6dfb\u52a0,\u51bb\u7ed3\u8d26\u6237 \u7528\u6237\u8ba4\u8bc1\u7528\u88c5\u9970\u5668 ---> \u88c5\u9970\u5668 [\u5206\u6790] 9\u4e2a\u529f\u80fd \u6ce8\u518c\u3001\u767b\u5f55\u3001\u67e5\u770b\u4f59\u989d\u3001\u8f6c\u8d26\u3001\u53d6\u6b3e\u3001\u8fd8\u6b3e\u3001\u67e5\u770b\u6d41\u6c34\u3001\u8d2d\u7269\u3001\u67e5\u770b\u8d2d\u4e70\u5546\u54c1 \u8bbe\u8ba1\u7a0b\u5e8f\u67b6\u6784\uff01\uff01\uff01 \u00b6 core\u7528\u6237\u529f\u80fd\u5c42 interface\u63a5\u53e3\u5c42 db\u6570\u636e\u5904\u7406\u5c42 log\u65e5\u5fd7\u5c42 conf\u914d\u7f6e\u6587\u4ef6 lib\u516c\u5171\u65b9\u6cd5\u6587\u4ef6 \u5df4\u62c9\u5df4\u62c9.\u4e00\u987f\u64cd\u4f5c\u5199\u5728\u4e00\u8d77..\u6269\u5c55\u6027\u5f88\u5dee\uff01(\uffe3\u25bd\uffe3) \u4f1a\u88ab\u9a82\u5c0f\u83dc\u9e21\u7684. \u7528\u6237\u529f\u80fd\u5c42\u5b9e\u73b09\u5927\u529f\u80fd. \u4e00\u822c\u5199\u7684\u90fd\u662f\u7528\u6237\u64cd\u4f5c\u7684\u4ee3\u7801... \u63a5\u53e3\u5c42\u91cc\u9762\u5c06\u7528\u6237\u529f\u80fd\u5c429\u5927\u529f\u80fd\u7684\u63a5\u53e3\u8bbe\u8ba1\u5206\u4e3a\u4e86\u4e09\u4e2a\u6a21\u5757.(\u53ef\u4ee5\u4e0d\u5206,\u5206\u4e86\u903b\u8f91\u66f4\u6e05\u6670.) \u6570\u636e\u5904\u7406\u5c42\u8bbe\u8ba1\u4e86\u4e24\u4e2a\u65b9\u6cd5, \u4e00\u4e2a\u67e5,\u4e00\u4e2a\u5b58. \u516c\u5171\u65b9\u6cd5\u5c42\u6bcf\u4e00\u5c42\u90fd\u53ef\u4ee5\u8c03\u7528. eg: \u65f6\u95f4\u683c\u5f0f\u8f6c\u6210\u5b57\u7b26\u4e32 \u6bcf\u4e00\u5c42\u90fd\u53ef\u80fd\u4f1a\u7528\u7684. \u65e5\u5fd7\u5c42 \u56e0\u4e3a\u63a5\u53e3\u5c42\u4e3b\u8981\u662f\u5199\u903b\u8f91\u7684,\u6240\u4ee5\u5728\u63a5\u53e3\u5c42\u52a0\u65e5\u5fd7 \u6570\u636e\u6d41\u5411 \u4ee5\u6ce8\u518c\u529f\u80fd\u4e3a\u4f8b,\u7528\u6237\u8f93\u5165\u4e86\u7528\u6237\u540d\u548c\u5bc6\u7801,\u6570\u636e\u6d41\u5411\u4e86\u63a5\u53e3\u5c42user\u6a21\u5757,\u63a5\u53e3\u5c42\u4f1a\u8fde\u901a\u6570\u636e\u5904\u7406\u5c42,\u5148\u901a\u8fc7select\u5224\u65ad\u7528\u6237\u662f\u5426\u5b58\u5728,\u82e5\u4e0d\u5b58\u5728,\u518d\u8fde\u901a\u6570\u636e\u5904\u7406\u5c42,\u5c06\u51c6\u5907\u597d\u7684\u7528\u6237\u4fe1\u606f\u8c03\u7528save\u65b9\u6cd5\u4fdd\u5b58\u5230\u6587\u4ef6\u4e2d. \u4e0d\u7ba1\u600e\u6837,\u90fd\u4f1a\u53cd\u9988\u4fe1\u606f\u7ed9\u7528\u6237\uff01\uff01 \u6ce8\u610f\u54e6\uff01\u7528\u6237\u529f\u80fd\u5c42\u4e0d\u80fd\u76f4\u63a5\u8c03\u7528\u6570\u636e\u5904\u7406\u5c42, \u5728\u67b6\u6784\u8bbe\u8ba1\u7684\u65f6\u5019\u505a\u4e86\u4e00\u4e2a\u9694\u79bb \u4ee5\u767b\u9646\u529f\u80fd\u4e3a\u4f8b,\u7528\u6237\u8f93\u5165\u4e86\u7528\u6237\u540d\u548c\u5bc6\u7801,\u8c03\u7528\u767b\u5f55\u7684\u63a5\u53e3,\u767b\u5f55\u7684\u63a5\u53e3\u518d\u8c03\u7528select\u67e5\u8be2\u65b9\u6cd5\u5c06\u67e5\u8be2\u7ed3\u679c\u8fd4\u56de\u7ed9\u63a5\u53e3\u5c42,\u63a5\u53e3\u5c42\u8fdb\u884c\u4e00\u4e9b\u5224\u65ad,\u82e5\u6210\u529f,\u5c06\u8fd4\u56deTrue\u7ed9\u7528\u6237\u529f\u80fd\u5c42. \u5c06\u4e00\u4e2a\u529f\u80fd\u62c6\u6210\u4e86\u4e09\u4e2a\u90e8\u5206 \u4ee5\u5206\u5c42\u7684\u5f62\u5f0f\u6765\u5b9e\u73b0 \u725bB\u4e4b\u5904 \u5f3a\u884c\u5206\u4e3a\u51e0\u5c42,\u6bcf\u4e00\u5c42\u4ee3\u7801\u91cf\u51cf\u5c11. \u903b\u8f91\u53d8\u6e05\u6670\u4e86. \u7a0b\u5e8f\u89e3\u85d5, \u53ef\u6269\u5c55\u6027\u63d0\u9ad8\u4e86 . \u9ad8\u5185\u805a\u4f4e\u8026\u5408 \u8981\u5b9e\u73b0\u7f51\u9875\u7248\u79fb\u52a8\u7248,\u53ea\u9700\u8981\u6539\u52a8\u7528\u6237\u529f\u80fd\u5c42\u5c31\u884c\uff01\u5176\u4f59\u67b6\u6784\u5c42\u4e0d\u7528\u52a8\uff01 eg: \u7528\u6237\u63a5\u53e3\u5c42 --- cmd\u7248\uff5c\u7f51\u9875\u7248\uff5c\u79fb\u52a8\u7248. \u8981\u7528\u6570\u636e\u5e93\u4ee3\u66ff\u6587\u4ef6,\u53ea\u9700\u8981\u6539\u52a8\u6570\u636e\u5904\u7406\u5c42\u5373\u53ef \u5206\u4efb\u52a1\u5f00\u53d1\u7a0b\u5e8f \u00b6 \u767b\u5f55 - \u6ce8\u518c - \u88c5\u9970\u5668(\u67d0\u4e9b\u529f\u80fd\u9700\u8981\u767b\u5f55\u540e\u624d\u80fd\u4f7f\u7528) - \u67e5\u770b\u4f59\u989d - \u8f6c\u8d26 - \u8fd8\u6b3e - \u53d6\u6b3e - \u67e5\u770b\u6d41\u6c34 - \u8d2d\u7269 - \u67e5\u770b\u8d2d\u4e70\u5546\u54c1 - \u5199\u4e00\u4e2a\u83b7\u53d6\u65e5\u5fd7\u7684\u516c\u5171\u65b9\u6cd5 \u65ad\u70b9\u8c03\u8bd5\uff01\uff01 \u8ddf\u7740\u89c6\u9891\u6572\u4e86\u4e00\u904d,\u81ea\u5df1\u518d\u72ec\u81ea\u6572\u4e00\u904d. \u4e3a\u4e86\u5077\u61d2 ,\u4e0d\u60f3\u65b0\u5efa\u5de5\u7a0b\u76ee\u5f55.\u5c31\u5229\u7528os\u6a21\u5757\u548cshutil\u6a21\u5757\u5199\u4e86\u5341\u51e0\u884c\u4ee3\u7801\u5b8c\u6210\u4e86\u6587\u4ef6\u5939\u7684\u8fed\u4ee3\u590d\u5236,\u4ee5\u53ca.py\u6587\u4ef6\u7684\u6e05\u7a7a\u5904\u7406... (\u8be6\u89c1,\u5f00\u80c3\u5c0f\u83dc.md\u91cc\u7684\u9012\u5f52,\u76ee\u5f55\u64cd\u4f5c) \u7b2c\u4e8c\u904d\u4e00\u5f00\u59cb\u7684\u65f6\u5019,\u5f04\u5de7\u6210\u62d9\u5199\u4e86\u4e2a\u6587\u4ef6\u6a21\u5757\u7684\u76f8\u4e92\u8c03\u7528...\u5f3a\u884c\u590d\u4e60\u4e86\u4e00\u904d\u6a21\u5757\u7684\u5bfc\u5165\u4e0e\u5305..Hhhh... \u5728\u7b2c\u4e8c\u904d\u6572\u7684\u8fc7\u7a0b\u4e2d, \u4e3a\u4e86\u5077\u61d2, \u60f3\u81ea\u52a8\u6dfb\u52a0\u51fd\u6570\u5230\u51fd\u6570\u5b57\u5178\u4e2d,\u5c31\u5199\u4e86\u4e00\u4e2a\u6ca1\u6709wrapper\u7684\u88c5\u9970\u5668,\u4e0e\u88c5\u9970\u5668 auth_login\u767b\u5f55\u9a8c\u8bc1\u4e00\u8d77\u4f5c\u7528\u65f6,\u51fa\u73b0\u4e86\u4e00\u70b9bug.. \u5728\u4e0d\u65ad\u7684\u6478\u7d22\u8fc7\u7a0b\u4e2d\u77e5\u9053\u4e86\u591a\u4e2a\u88c5\u9970\u5668\u7684\u5de5\u4f5c\u539f\u7406.. (\u8fc7\u7a0b\u5e76\u4e0d\u662f\u90a3\u4e48\u7684\u6109\u5feb... \u5f88\u5934\u75bc \u4f46\u7a81\u7136\u6293\u4f4f\u67d0\u4e00\u4e2a\u70b9\u5c31\u89e3\u91ca\u901a\u4e86) \u5728\u7b2c\u4e8c\u904d\u6572\u7684\u8fc7\u7a0b\u4e2d,\u63a5\u53e3\u5c42\u7684\u903b\u8f91\u6ca1\u6709\u6309\u90e8\u5c31\u73ed\u7684\u6309\u7167\u89c6\u9891\u4ee3\u7801\u7684\u601d\u8def.. \u611f\u89c9\u81ea\u5df1\u7684\u903b\u8f91\u5224\u65ad\u601d\u8def\u66f4\u6e05\u6670\u660e\u4e86.. Hhh\u4e9b\u8bb8\u81ea\u604b(\u00b4\u25bd\uff40) \u5f53\u7136\u5b9e\u73b0\u7684\u6548\u679c\u662f\u4e00\u6837\u7684. \u5148\u5224\u65ad\u5565\u540e\u5224\u65ad\u5565 \u4e2a\u4eba\u4e60\u60ef \u56e0\u4eba\u800c\u5f02\u5427. \u786e\u5b9e\u8fd9\u4e2a\u67b6\u6784\u633a\u725b\u6279\u7684,\u53ef\u4ee5\u66f4\u597d\u7684\u7406\u6e05\u601d\u8def... \u660e\u5929\u5f00\u59cb\u9762\u5411\u5bf9\u8c61\u4e4b\u65c5\u5427, Good night! world. \u7406\u6e05\u903b\u8f91 \u00b6 \u5b66\u5b8c\u9762\u5411\u5bf9\u8c61\u6211\u53c8\u56de\u6765\u5566.. \u7b2c\u4e09\u904d, \u518d\u6572\u4e00\u904d\u8be5\u9879\u76ee.. \u5148\u662f\u5fd9\u6572,\u7ed3\u679c\u4e8b\u500d\u529f\u534a... \u6df1\u523b\u4f53\u4f1a\u5230\u4e86\u4e00\u70b9: \u5728\u5199\u4e4b\u524d\u8981\u7406\u6e05\u903b\u8f91\u518d\u641e!!! orz (\u6d41\u4e0b\u6094\u6068\u7684\u773c\u6cea) \"\"\" \u51c6\u5907\u9636\u6bb5\uff01 \"\"\" \u25a0 start . py \u914d\u7f6esys . path \u3001 src . run () \u25a0 setting . py \u57fa\u672c\u7684\u521d\u59cb\u914d\u7f6e ( logging\u914d\u7f6e ) \u25a0 src . py \u7528\u6237\u64cd\u4f5c \u5148\u5efa\u597d\u6240\u6709\u7684\u529f\u80fd\u51fd\u6570 -- \u4e3b\u8981\u5c31\u662f\u547d\u540d \u5b8c\u6210run\u51fd\u6570 . -- \u7528\u6237\u901a\u8fc7\u6570\u5b57\u9009\u62e9\u529f\u80fd \u5b9e\u73b0 : \u6709\u53c2\u88c5\u9970\u5668\u6784\u5efa\u529f\u80fd\u5b57\u5178 ` @func_to_dic ( '1' ) ` ; ` func_dic [ choice ]() ` \u8fdb\u884c\u8c03\u7528 # func_dic\u3001func_to_dic \u5199\u5728 common.py\u516c\u5171\u6587\u4ef6\u91cc Ps : -- \u4f53\u4f1a\u4e0bwhile True\u5faa\u73af\u4e2dcontinue\u66ff\u4ee3if - else\u4e2delse\u7684\u903b\u8f91 . login_user = { 'name' : '' } \"\"\" register\u6ce8\u518c\u529f\u80fd\uff01 \u7528\u6237\u5c42 -- \u903b\u8f91\u5c42 -- \u6570\u636e\u5e93\u5c42 \uff08\u7528\u6237\u5c42\u4e0e\u6570\u636e\u5e93\u5c42\u4f5c\u4e86\u4e2a\u201c\u9694\u65ad\u201d!\uff09 \"\"\" 1. \u5df2\u7ecf\u767b\u5f55 , \u4e0d\u80fd\u6ce8\u518c 2. \u8f93\u5165\u8d26\u53f7\u540d\u548c\u5bc6\u7801 , \u4e24\u6b21\u5bc6\u7801\u4e0d\u4e00\u81f4\u91cd\u65b0\u8f93\u5165 3. \u8c03\u7528register_interface ( name , pwd ) \u63a5\u53e3 # \u6ce8\u518c\u9700\u8981\u5199\u5165\u6587\u4ef6,so\u8981\u4f20\u9012\u7528\u6237\u540d\u548c\u5bc6\u7801 register_interface\u7684\u903b\u8f91 : 1 > \u67e5\u8be2\u8be5\u7528\u6237\u662f\u5426\u5df2\u7ecf\u88ab\u6ce8\u518c \uff1f # \u5df2\u6ce8\u518c\u7528\u6237\u662f\u4ee5json\u6587\u4ef6\u7684\u5f62\u5f0f\u5728db\u76ee\u5f55\u4e2d\u5b58\u5728 ` db_handler . select ( name ) ` \u8fd9\u91cc\u7b80\u5355\u7c97\u66b4\u7684\u67e5\u770bname\u5bf9\u5e94\u7684json\u6587\u4ef6\u662f\u5426\u5b58\u5728 , \u5b58\u5728\u8fd4\u56dejson\u6587\u4ef6\u53cd\u5e8f\u5217\u5316\u540e\u7684user_dic . ` db_handler . save ( user_dic ) ` \u82e5\u4e0d\u5b58\u5728 , \u5219\u53ef\u4ee5\u5f00\u59cb\u6ce8\u518c , \u5373\u6784\u5efa\u5b57\u5178\u5c06\u7528\u6237\u4fe1\u606f ( name \u3001 pwd \u3001 lock\u7b49 ) \u4ee5json\u6587\u4ef6\u7684\u683c\u5f0f\u8fdb\u884c\u4fdd\u5b58 . 2 > \u6ce8\u610f , \u8fd4\u8fd8\u7ed9 \u7528\u6237\u5c42 / \u524d\u7aef \u7684\u6570\u636e\u683c\u5f0f\u662f \uff08 flag , msg \uff09 \u4f53\u4f1a\u4e0bflag\u5728while\u5faa\u73af\u4e2d\u7684\u5999\u7528 !! \"\"\" login\u767b\u5f55\u529f\u80fd\uff01 \"\"\" 1. \u5df2\u7ecf\u767b\u5f55 , \u4e0d\u80fd\u767b\u5f55 2. \u8f93\u5165\u8d26\u53f7\u540d\u548c\u5bc6\u7801 , \u8c03\u7528login_interface ( name , pwd ) \u63a5\u53e3 login_interface\u7684\u903b\u8f91 : \u67e5\u627e\u8be5\u7528\u6237\u662f\u5426\u5b58\u5728 , \u82e5\u5b58\u5728\u6bd4\u5bf9\u5bc6\u7801\u662f\u5426\u4e00\u81f4 . \u82e5\u5bc6\u7801\u4e00\u81f4\u4e14\u8be5\u7528\u6237\u672a\u88ab\u9501\u5b9a , \u767b\u5f55\u6210\u529f . 3. \u767b\u5f55\u6210\u529f , \u5199\u5165\u5168\u5c40\u7684login_user\u5b57\u5178\u4e2d ! \"\"\" log_out\u9000\u51fa\u767b\u5f55\u529f\u80fd\uff01 \"\"\" Ps : \u5199\u7684\u4ee3\u7801\u6709bug , \u82e5\u4e00\u5f00\u59cb\u6ca1\u4efb\u4f55\u4eba\u6ce8\u518c , \u9009\u62e9log_out\u529f\u80fd\u65f6 , \u4f1a\u8ba9\u4f60\u5148\u767b\u5f55 .. \u53ef\u662f\u6ca1\u4eba\u6ce8\u518c , \u767b\u5f55\u4e0d\u4e86\u554a . \u54c8\u54c8\u54c8\u54c8 . 1. \u5df2\u7ecf\u767b\u5f55 , \u624d\u80fd\u9000\u51fa\u767b\u5f55 . @auth_login \u88c5\u9970\u5668\u5b9e\u73b0 @auth_login \u88c5\u9970\u5668\u7684\u903b\u8f91 : \u5bfc\u5165src . py\u6a21\u5757 , \u5728\u771f\u6b63\u6267\u884c\u9000\u51fa\u767b\u5f55\u529f\u80fd\u4e4b\u524d\u5148\u5224\u65adlogin_user [ 'name' ] \u662f\u5426\u4e3a\u7a7a . \u82e5\u4e3a\u7a7a , \u9700\u5148\u8c03\u7528src . login () \u767b\u5f55\u540e , \u518d\u8df3\u8f6c\u5230\u9000\u51fa\u767b\u5f55\u529f\u80fd\u754c\u9762 ! Ps : \u56de\u987e\u4e24\u4e2a\u77e5\u8bc6\u70b9 , \u591a\u88c5\u9970\u5668\u6267\u884c\u987a\u5e8f -- !! \u5176\u5b9e\u5c31\u662f { '10' : id ( wrapper )} { '10' : id ( log_out )} \u7684\u533a\u522b\u7f62\u4e86 . \u5faa\u73af\u5bfc\u5165\u95ee\u9898 -- !! \u540c\u4e00\u4e2a\u6a21\u5757\u53ea\u4f1a\u5728\u7b2c\u4e00\u6b21\u5bfc\u5165\u65f6\u6267\u884c\u5176\u5185\u90e8\u4ee3\u7801 , \u518d\u6b21\u5bfc\u5165\u8be5\u6a21\u5757\u65f6 , \u5373\u4fbf\u662f\u8be5\u6a21\u5757\u5c1a\u672a\u5b8c\u5168\u52a0\u8f7d\u5b8c\u6bd5\u4e5f\u4e0d\u4f1a\u53bb\u91cd\u590d\u6267\u884c\u5185\u90e8\u4ee3\u7801 .. 2. \u786e\u8ba4\u9000\u51fa\u767b\u5f55\u540e , \u8c03\u7528login_out_interface ( login_user ) \u63a5\u53e3 . \u6ce8\u610f , python\u662f\u5f15\u7528\u4f20\u9012 , login_user\u662f\u53ef\u53d8\u7c7b\u578b , \u4f20\u9012\u7684\u662f\u8be5\u5b57\u5178\u7684\u5185\u5b58\u5730\u5740 . login_out_interface\u7684\u903b\u8f91 : \u76f4\u63a5\u5c06name\u952e\u5bf9\u5e94\u7684\u503c\u8d4b\u503c\u4e3a\u7a7a\u5b57\u7b26\u4e32\u5373\u53ef . \u5176\u4f59\u529f\u80fd .. \u5c31\u662f\u601d\u7ef4\u903b\u8f91\u6d41\u7a0b\u56fe\u7684\u95ee\u9898\u5566 . Hhh\u96be\u5f97\u641e\u4e86 . ( \u204e\u204d\u0334\u031b \u1d17 \u204d\u0334\u031b\u204e ) \u7b2c\u4e09\u904d\u52a0\u6df1\u4e86\u8fd9\u4e9b\u7684\u7406\u89e3 \u5faa\u73af\u5f15\u7528\u3001\u591a\u88c5\u9970\u5668\u3001json\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316\u3001python\u5f15\u7528\u8bed\u4e49\u3001\u6d41\u7a0b\u5224\u65adcontinue\u3001break\u7684\u5999\u7528\u3001\u63a5\u53e3\u903b\u8f91\u5c42\u8fd4\u56de\u524d\u7aef/\u7528\u6237\u5c42 (flag,msg)\u7684\u5f62\u5f0f... \u8fd95\u30016\u4e2a\u5c0f\u65f6\u8840\u8d5a\uff01\u771f\u7684,\u6211\u54ed\u6b7b...(/\u03c9\uff3c)","title":"\u9879\u76ee"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/13_ATM_shopping/#_1","text":"[\u9700\u6c42] \u989d\u5ea615000\u6216\u81ea\u5b9a\u4e49 ---> \u6ce8\u518c(\u4fe1\u7528\u5361) \u652f\u6301\u591a\u8d26\u6237\u767b\u5f55 ---> \u767b\u5f55 \u5b9e\u73b0\u8d2d\u7269\u5546\u57ce, \u4e70\u4e1c\u897f\u52a0\u5165\u8d2d\u7269\u8f66, \u8c03\u7528\u4fe1\u7528\u5361\u63a5\u53e3\u7ed3\u8d26. ---> \u8d2d\u7269 \u53ef\u4ee5\u63d0\u73b0, \u624b\u7eed\u8d395% ---> \u63d0\u73b0 \u652f\u6301\u8d26\u6237\u95f4\u8f6c\u8d26 ---> \u8f6c\u8d26 \u8bb0\u5f55\u65e5\u5e38\u6d88\u8d39\u6d41\u6c34 ---> \u8bb0\u5f55\u6d41\u6c34 \u6d88\u8d39\u7684\u6bcf\u4e00\u7b14\u4f1a\u6709\u4e2a\u8bb0\u5f55 \u63d0\u4f9b\u8fd8\u6b3e\u63a5\u53e3 ---> \u8fd8\u6b3e\u63a5\u53e3 ATM\u8bb0\u5f55\u64cd\u4f5c\u65e5\u5fd7 ---> \u65e5\u5fd7 \u63d0\u4f9b\u7ba1\u7406\u63a5\u53e3,\u5305\u62ec\u6dfb\u52a0\u7528\u6237\u3001\u51bb\u7ed3\u8d26\u6237\u7b49.. ---> \u6dfb\u52a0,\u51bb\u7ed3\u8d26\u6237 \u7528\u6237\u8ba4\u8bc1\u7528\u88c5\u9970\u5668 ---> \u88c5\u9970\u5668 [\u5206\u6790] 9\u4e2a\u529f\u80fd \u6ce8\u518c\u3001\u767b\u5f55\u3001\u67e5\u770b\u4f59\u989d\u3001\u8f6c\u8d26\u3001\u53d6\u6b3e\u3001\u8fd8\u6b3e\u3001\u67e5\u770b\u6d41\u6c34\u3001\u8d2d\u7269\u3001\u67e5\u770b\u8d2d\u4e70\u5546\u54c1","title":"\u9700\u6c42\u5206\u6790"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/13_ATM_shopping/#_2","text":"core\u7528\u6237\u529f\u80fd\u5c42 interface\u63a5\u53e3\u5c42 db\u6570\u636e\u5904\u7406\u5c42 log\u65e5\u5fd7\u5c42 conf\u914d\u7f6e\u6587\u4ef6 lib\u516c\u5171\u65b9\u6cd5\u6587\u4ef6 \u5df4\u62c9\u5df4\u62c9.\u4e00\u987f\u64cd\u4f5c\u5199\u5728\u4e00\u8d77..\u6269\u5c55\u6027\u5f88\u5dee\uff01(\uffe3\u25bd\uffe3) \u4f1a\u88ab\u9a82\u5c0f\u83dc\u9e21\u7684. \u7528\u6237\u529f\u80fd\u5c42\u5b9e\u73b09\u5927\u529f\u80fd. \u4e00\u822c\u5199\u7684\u90fd\u662f\u7528\u6237\u64cd\u4f5c\u7684\u4ee3\u7801... \u63a5\u53e3\u5c42\u91cc\u9762\u5c06\u7528\u6237\u529f\u80fd\u5c429\u5927\u529f\u80fd\u7684\u63a5\u53e3\u8bbe\u8ba1\u5206\u4e3a\u4e86\u4e09\u4e2a\u6a21\u5757.(\u53ef\u4ee5\u4e0d\u5206,\u5206\u4e86\u903b\u8f91\u66f4\u6e05\u6670.) \u6570\u636e\u5904\u7406\u5c42\u8bbe\u8ba1\u4e86\u4e24\u4e2a\u65b9\u6cd5, \u4e00\u4e2a\u67e5,\u4e00\u4e2a\u5b58. \u516c\u5171\u65b9\u6cd5\u5c42\u6bcf\u4e00\u5c42\u90fd\u53ef\u4ee5\u8c03\u7528. eg: \u65f6\u95f4\u683c\u5f0f\u8f6c\u6210\u5b57\u7b26\u4e32 \u6bcf\u4e00\u5c42\u90fd\u53ef\u80fd\u4f1a\u7528\u7684. \u65e5\u5fd7\u5c42 \u56e0\u4e3a\u63a5\u53e3\u5c42\u4e3b\u8981\u662f\u5199\u903b\u8f91\u7684,\u6240\u4ee5\u5728\u63a5\u53e3\u5c42\u52a0\u65e5\u5fd7 \u6570\u636e\u6d41\u5411 \u4ee5\u6ce8\u518c\u529f\u80fd\u4e3a\u4f8b,\u7528\u6237\u8f93\u5165\u4e86\u7528\u6237\u540d\u548c\u5bc6\u7801,\u6570\u636e\u6d41\u5411\u4e86\u63a5\u53e3\u5c42user\u6a21\u5757,\u63a5\u53e3\u5c42\u4f1a\u8fde\u901a\u6570\u636e\u5904\u7406\u5c42,\u5148\u901a\u8fc7select\u5224\u65ad\u7528\u6237\u662f\u5426\u5b58\u5728,\u82e5\u4e0d\u5b58\u5728,\u518d\u8fde\u901a\u6570\u636e\u5904\u7406\u5c42,\u5c06\u51c6\u5907\u597d\u7684\u7528\u6237\u4fe1\u606f\u8c03\u7528save\u65b9\u6cd5\u4fdd\u5b58\u5230\u6587\u4ef6\u4e2d. \u4e0d\u7ba1\u600e\u6837,\u90fd\u4f1a\u53cd\u9988\u4fe1\u606f\u7ed9\u7528\u6237\uff01\uff01 \u6ce8\u610f\u54e6\uff01\u7528\u6237\u529f\u80fd\u5c42\u4e0d\u80fd\u76f4\u63a5\u8c03\u7528\u6570\u636e\u5904\u7406\u5c42, \u5728\u67b6\u6784\u8bbe\u8ba1\u7684\u65f6\u5019\u505a\u4e86\u4e00\u4e2a\u9694\u79bb \u4ee5\u767b\u9646\u529f\u80fd\u4e3a\u4f8b,\u7528\u6237\u8f93\u5165\u4e86\u7528\u6237\u540d\u548c\u5bc6\u7801,\u8c03\u7528\u767b\u5f55\u7684\u63a5\u53e3,\u767b\u5f55\u7684\u63a5\u53e3\u518d\u8c03\u7528select\u67e5\u8be2\u65b9\u6cd5\u5c06\u67e5\u8be2\u7ed3\u679c\u8fd4\u56de\u7ed9\u63a5\u53e3\u5c42,\u63a5\u53e3\u5c42\u8fdb\u884c\u4e00\u4e9b\u5224\u65ad,\u82e5\u6210\u529f,\u5c06\u8fd4\u56deTrue\u7ed9\u7528\u6237\u529f\u80fd\u5c42. \u5c06\u4e00\u4e2a\u529f\u80fd\u62c6\u6210\u4e86\u4e09\u4e2a\u90e8\u5206 \u4ee5\u5206\u5c42\u7684\u5f62\u5f0f\u6765\u5b9e\u73b0 \u725bB\u4e4b\u5904 \u5f3a\u884c\u5206\u4e3a\u51e0\u5c42,\u6bcf\u4e00\u5c42\u4ee3\u7801\u91cf\u51cf\u5c11. \u903b\u8f91\u53d8\u6e05\u6670\u4e86. \u7a0b\u5e8f\u89e3\u85d5, \u53ef\u6269\u5c55\u6027\u63d0\u9ad8\u4e86 . \u9ad8\u5185\u805a\u4f4e\u8026\u5408 \u8981\u5b9e\u73b0\u7f51\u9875\u7248\u79fb\u52a8\u7248,\u53ea\u9700\u8981\u6539\u52a8\u7528\u6237\u529f\u80fd\u5c42\u5c31\u884c\uff01\u5176\u4f59\u67b6\u6784\u5c42\u4e0d\u7528\u52a8\uff01 eg: \u7528\u6237\u63a5\u53e3\u5c42 --- cmd\u7248\uff5c\u7f51\u9875\u7248\uff5c\u79fb\u52a8\u7248. \u8981\u7528\u6570\u636e\u5e93\u4ee3\u66ff\u6587\u4ef6,\u53ea\u9700\u8981\u6539\u52a8\u6570\u636e\u5904\u7406\u5c42\u5373\u53ef","title":"\u8bbe\u8ba1\u7a0b\u5e8f\u67b6\u6784\uff01\uff01\uff01"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/13_ATM_shopping/#_3","text":"\u767b\u5f55 - \u6ce8\u518c - \u88c5\u9970\u5668(\u67d0\u4e9b\u529f\u80fd\u9700\u8981\u767b\u5f55\u540e\u624d\u80fd\u4f7f\u7528) - \u67e5\u770b\u4f59\u989d - \u8f6c\u8d26 - \u8fd8\u6b3e - \u53d6\u6b3e - \u67e5\u770b\u6d41\u6c34 - \u8d2d\u7269 - \u67e5\u770b\u8d2d\u4e70\u5546\u54c1 - \u5199\u4e00\u4e2a\u83b7\u53d6\u65e5\u5fd7\u7684\u516c\u5171\u65b9\u6cd5 \u65ad\u70b9\u8c03\u8bd5\uff01\uff01 \u8ddf\u7740\u89c6\u9891\u6572\u4e86\u4e00\u904d,\u81ea\u5df1\u518d\u72ec\u81ea\u6572\u4e00\u904d. \u4e3a\u4e86\u5077\u61d2 ,\u4e0d\u60f3\u65b0\u5efa\u5de5\u7a0b\u76ee\u5f55.\u5c31\u5229\u7528os\u6a21\u5757\u548cshutil\u6a21\u5757\u5199\u4e86\u5341\u51e0\u884c\u4ee3\u7801\u5b8c\u6210\u4e86\u6587\u4ef6\u5939\u7684\u8fed\u4ee3\u590d\u5236,\u4ee5\u53ca.py\u6587\u4ef6\u7684\u6e05\u7a7a\u5904\u7406... (\u8be6\u89c1,\u5f00\u80c3\u5c0f\u83dc.md\u91cc\u7684\u9012\u5f52,\u76ee\u5f55\u64cd\u4f5c) \u7b2c\u4e8c\u904d\u4e00\u5f00\u59cb\u7684\u65f6\u5019,\u5f04\u5de7\u6210\u62d9\u5199\u4e86\u4e2a\u6587\u4ef6\u6a21\u5757\u7684\u76f8\u4e92\u8c03\u7528...\u5f3a\u884c\u590d\u4e60\u4e86\u4e00\u904d\u6a21\u5757\u7684\u5bfc\u5165\u4e0e\u5305..Hhhh... \u5728\u7b2c\u4e8c\u904d\u6572\u7684\u8fc7\u7a0b\u4e2d, \u4e3a\u4e86\u5077\u61d2, \u60f3\u81ea\u52a8\u6dfb\u52a0\u51fd\u6570\u5230\u51fd\u6570\u5b57\u5178\u4e2d,\u5c31\u5199\u4e86\u4e00\u4e2a\u6ca1\u6709wrapper\u7684\u88c5\u9970\u5668,\u4e0e\u88c5\u9970\u5668 auth_login\u767b\u5f55\u9a8c\u8bc1\u4e00\u8d77\u4f5c\u7528\u65f6,\u51fa\u73b0\u4e86\u4e00\u70b9bug.. \u5728\u4e0d\u65ad\u7684\u6478\u7d22\u8fc7\u7a0b\u4e2d\u77e5\u9053\u4e86\u591a\u4e2a\u88c5\u9970\u5668\u7684\u5de5\u4f5c\u539f\u7406.. (\u8fc7\u7a0b\u5e76\u4e0d\u662f\u90a3\u4e48\u7684\u6109\u5feb... \u5f88\u5934\u75bc \u4f46\u7a81\u7136\u6293\u4f4f\u67d0\u4e00\u4e2a\u70b9\u5c31\u89e3\u91ca\u901a\u4e86) \u5728\u7b2c\u4e8c\u904d\u6572\u7684\u8fc7\u7a0b\u4e2d,\u63a5\u53e3\u5c42\u7684\u903b\u8f91\u6ca1\u6709\u6309\u90e8\u5c31\u73ed\u7684\u6309\u7167\u89c6\u9891\u4ee3\u7801\u7684\u601d\u8def.. \u611f\u89c9\u81ea\u5df1\u7684\u903b\u8f91\u5224\u65ad\u601d\u8def\u66f4\u6e05\u6670\u660e\u4e86.. Hhh\u4e9b\u8bb8\u81ea\u604b(\u00b4\u25bd\uff40) \u5f53\u7136\u5b9e\u73b0\u7684\u6548\u679c\u662f\u4e00\u6837\u7684. \u5148\u5224\u65ad\u5565\u540e\u5224\u65ad\u5565 \u4e2a\u4eba\u4e60\u60ef \u56e0\u4eba\u800c\u5f02\u5427. \u786e\u5b9e\u8fd9\u4e2a\u67b6\u6784\u633a\u725b\u6279\u7684,\u53ef\u4ee5\u66f4\u597d\u7684\u7406\u6e05\u601d\u8def... \u660e\u5929\u5f00\u59cb\u9762\u5411\u5bf9\u8c61\u4e4b\u65c5\u5427, Good night! world.","title":"\u5206\u4efb\u52a1\u5f00\u53d1\u7a0b\u5e8f"},{"location":"2_python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/13_ATM_shopping/#_4","text":"\u5b66\u5b8c\u9762\u5411\u5bf9\u8c61\u6211\u53c8\u56de\u6765\u5566.. \u7b2c\u4e09\u904d, \u518d\u6572\u4e00\u904d\u8be5\u9879\u76ee.. \u5148\u662f\u5fd9\u6572,\u7ed3\u679c\u4e8b\u500d\u529f\u534a... \u6df1\u523b\u4f53\u4f1a\u5230\u4e86\u4e00\u70b9: \u5728\u5199\u4e4b\u524d\u8981\u7406\u6e05\u903b\u8f91\u518d\u641e!!! orz (\u6d41\u4e0b\u6094\u6068\u7684\u773c\u6cea) \"\"\" \u51c6\u5907\u9636\u6bb5\uff01 \"\"\" \u25a0 start . py \u914d\u7f6esys . path \u3001 src . run () \u25a0 setting . py \u57fa\u672c\u7684\u521d\u59cb\u914d\u7f6e ( logging\u914d\u7f6e ) \u25a0 src . py \u7528\u6237\u64cd\u4f5c \u5148\u5efa\u597d\u6240\u6709\u7684\u529f\u80fd\u51fd\u6570 -- \u4e3b\u8981\u5c31\u662f\u547d\u540d \u5b8c\u6210run\u51fd\u6570 . -- \u7528\u6237\u901a\u8fc7\u6570\u5b57\u9009\u62e9\u529f\u80fd \u5b9e\u73b0 : \u6709\u53c2\u88c5\u9970\u5668\u6784\u5efa\u529f\u80fd\u5b57\u5178 ` @func_to_dic ( '1' ) ` ; ` func_dic [ choice ]() ` \u8fdb\u884c\u8c03\u7528 # func_dic\u3001func_to_dic \u5199\u5728 common.py\u516c\u5171\u6587\u4ef6\u91cc Ps : -- \u4f53\u4f1a\u4e0bwhile True\u5faa\u73af\u4e2dcontinue\u66ff\u4ee3if - else\u4e2delse\u7684\u903b\u8f91 . login_user = { 'name' : '' } \"\"\" register\u6ce8\u518c\u529f\u80fd\uff01 \u7528\u6237\u5c42 -- \u903b\u8f91\u5c42 -- \u6570\u636e\u5e93\u5c42 \uff08\u7528\u6237\u5c42\u4e0e\u6570\u636e\u5e93\u5c42\u4f5c\u4e86\u4e2a\u201c\u9694\u65ad\u201d!\uff09 \"\"\" 1. \u5df2\u7ecf\u767b\u5f55 , \u4e0d\u80fd\u6ce8\u518c 2. \u8f93\u5165\u8d26\u53f7\u540d\u548c\u5bc6\u7801 , \u4e24\u6b21\u5bc6\u7801\u4e0d\u4e00\u81f4\u91cd\u65b0\u8f93\u5165 3. \u8c03\u7528register_interface ( name , pwd ) \u63a5\u53e3 # \u6ce8\u518c\u9700\u8981\u5199\u5165\u6587\u4ef6,so\u8981\u4f20\u9012\u7528\u6237\u540d\u548c\u5bc6\u7801 register_interface\u7684\u903b\u8f91 : 1 > \u67e5\u8be2\u8be5\u7528\u6237\u662f\u5426\u5df2\u7ecf\u88ab\u6ce8\u518c \uff1f # \u5df2\u6ce8\u518c\u7528\u6237\u662f\u4ee5json\u6587\u4ef6\u7684\u5f62\u5f0f\u5728db\u76ee\u5f55\u4e2d\u5b58\u5728 ` db_handler . select ( name ) ` \u8fd9\u91cc\u7b80\u5355\u7c97\u66b4\u7684\u67e5\u770bname\u5bf9\u5e94\u7684json\u6587\u4ef6\u662f\u5426\u5b58\u5728 , \u5b58\u5728\u8fd4\u56dejson\u6587\u4ef6\u53cd\u5e8f\u5217\u5316\u540e\u7684user_dic . ` db_handler . save ( user_dic ) ` \u82e5\u4e0d\u5b58\u5728 , \u5219\u53ef\u4ee5\u5f00\u59cb\u6ce8\u518c , \u5373\u6784\u5efa\u5b57\u5178\u5c06\u7528\u6237\u4fe1\u606f ( name \u3001 pwd \u3001 lock\u7b49 ) \u4ee5json\u6587\u4ef6\u7684\u683c\u5f0f\u8fdb\u884c\u4fdd\u5b58 . 2 > \u6ce8\u610f , \u8fd4\u8fd8\u7ed9 \u7528\u6237\u5c42 / \u524d\u7aef \u7684\u6570\u636e\u683c\u5f0f\u662f \uff08 flag , msg \uff09 \u4f53\u4f1a\u4e0bflag\u5728while\u5faa\u73af\u4e2d\u7684\u5999\u7528 !! \"\"\" login\u767b\u5f55\u529f\u80fd\uff01 \"\"\" 1. \u5df2\u7ecf\u767b\u5f55 , \u4e0d\u80fd\u767b\u5f55 2. \u8f93\u5165\u8d26\u53f7\u540d\u548c\u5bc6\u7801 , \u8c03\u7528login_interface ( name , pwd ) \u63a5\u53e3 login_interface\u7684\u903b\u8f91 : \u67e5\u627e\u8be5\u7528\u6237\u662f\u5426\u5b58\u5728 , \u82e5\u5b58\u5728\u6bd4\u5bf9\u5bc6\u7801\u662f\u5426\u4e00\u81f4 . \u82e5\u5bc6\u7801\u4e00\u81f4\u4e14\u8be5\u7528\u6237\u672a\u88ab\u9501\u5b9a , \u767b\u5f55\u6210\u529f . 3. \u767b\u5f55\u6210\u529f , \u5199\u5165\u5168\u5c40\u7684login_user\u5b57\u5178\u4e2d ! \"\"\" log_out\u9000\u51fa\u767b\u5f55\u529f\u80fd\uff01 \"\"\" Ps : \u5199\u7684\u4ee3\u7801\u6709bug , \u82e5\u4e00\u5f00\u59cb\u6ca1\u4efb\u4f55\u4eba\u6ce8\u518c , \u9009\u62e9log_out\u529f\u80fd\u65f6 , \u4f1a\u8ba9\u4f60\u5148\u767b\u5f55 .. \u53ef\u662f\u6ca1\u4eba\u6ce8\u518c , \u767b\u5f55\u4e0d\u4e86\u554a . \u54c8\u54c8\u54c8\u54c8 . 1. \u5df2\u7ecf\u767b\u5f55 , \u624d\u80fd\u9000\u51fa\u767b\u5f55 . @auth_login \u88c5\u9970\u5668\u5b9e\u73b0 @auth_login \u88c5\u9970\u5668\u7684\u903b\u8f91 : \u5bfc\u5165src . py\u6a21\u5757 , \u5728\u771f\u6b63\u6267\u884c\u9000\u51fa\u767b\u5f55\u529f\u80fd\u4e4b\u524d\u5148\u5224\u65adlogin_user [ 'name' ] \u662f\u5426\u4e3a\u7a7a . \u82e5\u4e3a\u7a7a , \u9700\u5148\u8c03\u7528src . login () \u767b\u5f55\u540e , \u518d\u8df3\u8f6c\u5230\u9000\u51fa\u767b\u5f55\u529f\u80fd\u754c\u9762 ! Ps : \u56de\u987e\u4e24\u4e2a\u77e5\u8bc6\u70b9 , \u591a\u88c5\u9970\u5668\u6267\u884c\u987a\u5e8f -- !! \u5176\u5b9e\u5c31\u662f { '10' : id ( wrapper )} { '10' : id ( log_out )} \u7684\u533a\u522b\u7f62\u4e86 . \u5faa\u73af\u5bfc\u5165\u95ee\u9898 -- !! \u540c\u4e00\u4e2a\u6a21\u5757\u53ea\u4f1a\u5728\u7b2c\u4e00\u6b21\u5bfc\u5165\u65f6\u6267\u884c\u5176\u5185\u90e8\u4ee3\u7801 , \u518d\u6b21\u5bfc\u5165\u8be5\u6a21\u5757\u65f6 , \u5373\u4fbf\u662f\u8be5\u6a21\u5757\u5c1a\u672a\u5b8c\u5168\u52a0\u8f7d\u5b8c\u6bd5\u4e5f\u4e0d\u4f1a\u53bb\u91cd\u590d\u6267\u884c\u5185\u90e8\u4ee3\u7801 .. 2. \u786e\u8ba4\u9000\u51fa\u767b\u5f55\u540e , \u8c03\u7528login_out_interface ( login_user ) \u63a5\u53e3 . \u6ce8\u610f , python\u662f\u5f15\u7528\u4f20\u9012 , login_user\u662f\u53ef\u53d8\u7c7b\u578b , \u4f20\u9012\u7684\u662f\u8be5\u5b57\u5178\u7684\u5185\u5b58\u5730\u5740 . login_out_interface\u7684\u903b\u8f91 : \u76f4\u63a5\u5c06name\u952e\u5bf9\u5e94\u7684\u503c\u8d4b\u503c\u4e3a\u7a7a\u5b57\u7b26\u4e32\u5373\u53ef . \u5176\u4f59\u529f\u80fd .. \u5c31\u662f\u601d\u7ef4\u903b\u8f91\u6d41\u7a0b\u56fe\u7684\u95ee\u9898\u5566 . Hhh\u96be\u5f97\u641e\u4e86 . ( \u204e\u204d\u0334\u031b \u1d17 \u204d\u0334\u031b\u204e ) \u7b2c\u4e09\u904d\u52a0\u6df1\u4e86\u8fd9\u4e9b\u7684\u7406\u89e3 \u5faa\u73af\u5f15\u7528\u3001\u591a\u88c5\u9970\u5668\u3001json\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316\u3001python\u5f15\u7528\u8bed\u4e49\u3001\u6d41\u7a0b\u5224\u65adcontinue\u3001break\u7684\u5999\u7528\u3001\u63a5\u53e3\u903b\u8f91\u5c42\u8fd4\u56de\u524d\u7aef/\u7528\u6237\u5c42 (flag,msg)\u7684\u5f62\u5f0f... \u8fd95\u30016\u4e2a\u5c0f\u65f6\u8840\u8d5a\uff01\u771f\u7684,\u6211\u54ed\u6b7b...(/\u03c9\uff3c)","title":"\u7406\u6e05\u903b\u8f91"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/0_OOP%E5%9F%BA%E6%9C%AC/","text":"\u5b98\u65b9\u6587\u6863(\u5f88\u6709\u5fc5\u8981\u901a\u8bfb\u4e00\u904d \u53d7\u76ca\u532a\u6d45): https://docs.python.org/zh-cn/3/tutorial/classes.html#a-first-look-at-classes https://docs.python.org/zh-cn/3/reference/executionmodel.html#naming-and-binding \u9762\u5411\u8fc7\u7a0b\u4e0e\u9762\u5411\u5bf9\u8c61\u533a\u522b \u00b6 \u4e24\u5927\u7f16\u7a0b\u8303\u5f0f \u9762\u5411\u8fc7\u7a0b \u9762\u5411\u5bf9\u8c61 \u2606\u9762\u5411\u8fc7\u7a0b\u7f16\u7a0b \u00b6 \u6838\u5fc3\u662f \u8fc7\u7a0b \u4e8c\u5b57,\u8fc7\u7a0b\u6307\u7684\u662f\u89e3\u51b3\u95ee\u9898\u7684\u6b65\u9aa4,\u5373\u5148\u5e72\u4ec0\u4e48\u540e\u5e72\u4ec0\u4e48.. \u200b \u57fa\u4e8e\u8be5\u601d\u60f3\u7f16\u5199\u7a0b\u5e8f\u597d\u6bd4\u5728\u8bbe\u8ba1\u4e00\u6761\u6d41\u6c34\u7ebf,\u662f\u4e00\u79cd\u673a\u68b0\u5f0f\u7684\u601d\u7ef4\u65b9\u5f0f.. \u4f18\u70b9: \u590d\u6742\u7684\u95ee\u9898\u6d41\u7a0b\u5316\u3001\u8fdb\u800c\u7b80\u5355\u5316. \u53ef\u4ee5\u7cbe\u51c6\u7684\u9884\u6d4b\u95ee\u9898\u7684\u5904\u7406\u6d41\u7a0b\u548c\u7ed3\u679c. \u200b \u7f3a\u70b9: \u6269\u5c55\u6027\u5dee \u2606\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b \u00b6 \u6838\u5fc3\u662f \u5bf9\u8c61 \u4e8c\u5b57, \u5bf9\u8c61\u662f\u7279\u5f81\u4e0e\u6280\u80fd\u7684\u7ed3\u5408\u4f53 . \u200b \u57fa\u4e8e\u8be5\u601d\u60f3\u7f16\u7a0b\u7684\u7a0b\u5e8f\u5c31\u597d\u6bd4\u662f\u5728\u521b\u9020\u4e00\u4e2a\u4e16\u754c,\u4e16\u754c\u4e07\u7269\u90fd\u662f\u5bf9\u8c61,\u4f60\u5c31\u662f\u8fd9\u4e2a\u4e16\u754c\u7684\u4e0a\u5e1d \u200b \u8981\u601d\u8003\u4ec0\u4e48\u4eba\u80fd\u5e72\u4ec0\u4e48\u4e8b\u60c5,\u89e3\u51b3\u8fd9\u4ef6\u4e8b\u7684\u8fd9\u4e2a\u4eba\u9700\u8981\u5177\u5907\u4ec0\u4e48\u6837\u7684\u7279\u5f81\u548c\u6280\u80fd \u4f18\u70b9: \u53ef\u6269\u5c55\u6027\u5f3a \u5bf9\u4e8e\u4e00\u4e2a\u8f6f\u4ef6\u8d28\u91cf(\u6210\u672c\u3001\u6027\u80fd\u3001\u53ef\u9760\u6027...)\u800c\u8a00,\u9762\u5411\u5bf9\u8c61\u7684\u7a0b\u5e8f\u8bbe\u8ba1\u53ea\u662f\u7528\u6765\u89e3\u51b3\u6269\u5c55\u6027\u7684. \u200b \u7f3a\u70b9: \u200b 1>\u7f16\u7a0b\u7684\u590d\u6742\u5ea6\u8981\u9ad8\u4e8e\u9762\u5411\u8fc7\u7a0b \u200b 2>\u9762\u5411\u5bf9\u8c61\u7684\u7a0b\u5e8f\u4e00\u65e6\u5f00\u59cb\u5c31\u7531\u5bf9\u8c61\u4e4b\u95f4\u7684\u4ea4\u4e92\u89e3\u51b3\u95ee\u9898,\u5373\u4fbf\u662f\u4e0a\u5e1d\u4e5f\u65e0\u6cd5\u51c6\u786e\u7684\u9884\u6d4b\u7ed3\u679c. eg: \u6e38\u620f\u5bf9\u8c61\u5bf9\u6218\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u7684\u9634\u9738\u6280\u80fd... \u200b \u5e94\u7528\u573a\u666f: \u9700\u6c42\u7ecf\u5e38\u53d8\u5316\u7684\u8f6f\u4ef6,\u4e00\u822c\u9700\u6c42\u7684\u53d8\u5316\u90fd\u96c6\u4e2d\u5728\u7528\u6237\u5c42, eg: \u4f01\u4e1a\u5185\u90e8\u8f6f\u4ef6, \u6e38\u620f\u7b49. \u7c7b \u00b6 \u7c7b: \u79cd\u7c7b\u3001\u5206\u7c7b\u3001\u7c7b\u522b \u5bf9\u8c61\u662f\u7279\u5f81\u4e0e\u6280\u80fd\u7684\u7ed3\u5408\u4f53,\u7c7b\u662f \u4e00\u7cfb\u5217(\u591a\u4e2a) \u5bf9\u8c61\u76f8\u4f3c\u7684\u7279\u5f81\u4e0e\u6280\u80fd\u7684\u7ed3\u5408\u4f53. \u5f3a\u8c03: \u7ad9\u7684\u89d2\u5ea6\u4e0d\u540c,\u603b\u7ed3\u51fa\u7684\u7c7b\u662f\u622a\u7136\u4e0d\u540c\u7684.. \u7c7b\u4e0e\u5bf9\u8c61\u8c01\u5148\u51fa\u73b0\u5462\uff1f \u5728 \u73b0\u5b9e \u751f\u6d3b\u4e2d: \u5148\u6709\u4e00\u4e2a\u4e2a\u5177\u4f53\u5b58\u5728\u7684\u5bf9\u8c61,\u7136\u540e\u968f\u7740\u4eba\u7c7b\u6587\u660e\u7684\u53d1\u5c55\u624d\u6709\u4e86\u5206\u7c7b\u7684\u6982\u5ff5... \u5728 \u7a0b\u5e8f \u4e2d: \u5fc5\u987b\u5148\u5b9a\u4e49\u7c7b,\u540e\u8c03\u7528\u7c7b\u6765\u4ea7\u751f\u5bf9\u8c61... \u2606\u5f00\u8f9f\u7c7b\u7684\u547d\u4ee4\u7a7a\u95f4 \u00b6 \u7c7b\u7684\u672c\u8eab\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u5bb9\u5668/\u540d\u79f0\u7a7a\u95f4 , \u7528\u6765\u5b58\u653e\u540d\u5b57\u7684 \u53ef\u4ee5\u4ece\u7c7b\u7684\u540d\u79f0\u7a7a\u95f4\u4e2d\u589e/\u5220/\u6539/\u67e5\u540d\u5b57 ps: \u56de\u987e -- \u5728\u524d\u9762\u51fd\u6570\u5bfc\u5165\u6a21\u5757\u90a3\u4e00\u5c0f\u8282,\u5bfc\u4e00\u4e2a\u6a21\u5757\u5c31\u4f1a\u9020\u4e00\u4e2a\u540d\u79f0\u7a7a\u95f4( \u6a21\u5757\u540d\u6307\u5411\u540d\u79f0\u7a7a\u95f4 ) \u4ece\u540d\u79f0\u7a7a\u95f4\u91cc\u5f80\u5916\u62fd\u540d\u5b57,\u5c31\u662f . \u8fd9\u79cd\u8bed\u6cd5\u6765\u641e\u5b9a\u7684\uff01 . \u540e\u9762\u7684\u7edf\u79f0\u4e3a\u5c5e\u6027 \u5373python\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e13\u95e8\u8bbf\u95ee\u5c5e\u6027(\u540d\u79f0\u7a7a\u95f4\u4e2d\u7684\u540d\u5b57)\u7684\u8bed\u6cd5,\u70b9\u540e\u9762\u5c31\u662f\u5c5e\u6027 school\u548cchoose_course\u90fd\u662fOldboyStudent\u7684\u5c5e\u6027,\u4e3a\u4e86\u4fbf\u4e8e\u9610\u8ff0,\u5f80\u540e\u6211\u4eec \u79c1\u4e0b\u7ea6\u5b9a school\u662f\u6570\u636e\u5c5e\u6027,choose_course\u662f\u51fd\u6570\u5c5e\u6027... (python\u662f\u6ca1\u6709\u6570\u636e\u5c5e\u6027\u51fd\u6570\u5c5e\u6027\u6982\u5ff5\u7684 \u6211\u4eec\u79c1\u4e0b\u7ea6\u5b9a\u7684!\uff01) # -- \u7c7b\u7684\u5b9a\u4e49 class OldboyStudent (): school = 'oldboy' # \u53d8\u91cf -- \u6570\u636e \u7279\u5f81 def choose_course ( self ): # \u65b9\u6cd5 -- \u529f\u80fd \u6280\u80fd print ( 'is choosing course..' ) print ( '>>>>' ) # \u7c7b\u4e2d\u53ef\u4ee5\u6709\u4efb\u610f\u53ef\u6267\u884c\u4ee3\u7801 # -- `.`\u8868\u660e\u4ece\u540d\u79f0\u7a7a\u95f4\u4e2d\u8bbf\u95ee\u5c5e\u6027\uff01 [\u672c\u8d28]\u64cd\u4f5c\u7684\u5c31\u662f__dict__!! print ( OldboyStudent . __dict__ ) # \u67e5\u770b\u7c7b\u7684\u540d\u79f0\u7a7a\u95f4 \u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u5b57\u5178\uff01 print ( OldboyStudent . __dict__ [ 'school' ]) # oldboy # <function OldboyStudent.choose_course at 0x7fb28af1c790> print ( OldboyStudent . __dict__ [ 'choose_course' ]) print ( OldboyStudent . school ) # !!\u7c7b\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u662f\u7c7b\u7684\u51fd\u6570\u5c5e\u6027,\u7c7b\u53ef\u4ee5\u4f7f\u7528,\u4f46\u4f7f\u7528\u7684\u5c31\u662f\u4e00\u4e2a\u666e\u901a\u7684\u51fd\u6570\u800c\u5df2. # \u610f\u5473\u7740\u9700\u8981\u5b8c\u5168\u9075\u5faa\u51fd\u6570\u53c2\u6570\u89c4\u5219.\u8be5\u4f20\u51e0\u4e2a\u503c\u5c31\u4f20\u51e0\u4e2a\u503c.. print ( OldboyStudent . choose_course ( 123 )) # -- \u5bf9\u7c7b\u7684\u540d\u79f0\u7a7a\u95f4\u8fdb\u884c\u589e\u6539\u5220 \u672c\u8d28\u5c31\u662f\u64cd\u4f5c\u5b57\u5178.. # \u50cf\u8fd9\u79cd__dict__\u5f00\u5934\u548c\u7ed3\u5c3e\u90fd\u662f\u53cc\u4e0b\u5212\u7ebf\u7684 \u6211\u4eec\u901a\u5e38\u4e0d\u4f1a\u76f4\u63a5\u64cd\u4f5c \u800c\u662f\u6ee1\u8db3\u6761\u4ef6\u4e0b\u81ea\u52a8\u89e6\u53d1 # Ps:\u5728\u8fed\u4ee3\u5668\u90a3\u91cc\u4e5f\u63d0\u5230\u4e86\u53cc\u4e0b\u5212\u7ebf.. OldboyStudent . country = 'China' # OldboyStudent.__dict__['country'] = 'China' OldboyStudent . country = 'CHINA' # OldboyStudent.__dict__['country'] = 'CHINA' del OldboyStudent . school \"\"\"OldboyStudent.__dict__\u7684\u7ed3\u679c {'__module__': '__main__', 'school': 'oldboy', 'choose_course': <function OldboyStudent.choose_course at 0x7fc4a171e790>, '__dict__': <attribute '__dict__' of 'OldboyStudent' objects>, '__weakref__': <attribute '__weakref__' of 'OldboyStudent' objects>, '__doc__': None} \"\"\" \u53d8\u91cf\u540d\u4e0d\u5efa\u8bae\u4f7f\u7528\u9a7c\u5cf0\u4f53,\u7c7b\u540d\u53ef\u4ee5.. \u4ece\u4e0a\u5230\u4e0b\u8fd0\u884c\u4ee3\u7801, \u9047\u5230\u7c7b\u5b9a\u4e49\u9636\u6bb5\u7684\u4ee3\u7801,\u4f1a\u7acb\u523b\u6267\u884c. \u6267\u884c\u4f1a\u53d1\u751f\u4ec0\u4e48\u4e8b\uff1f \u5c31\u4e0a\u65b9\u51e0\u884c\u4ee3\u7801\u7684\u8fd0\u884c\u800c\u8a00,\u4f1a \u5f00\u8f9f\u4e00\u4e2a\u7c7b\u7684\u540d\u79f0\u7a7a\u95f4 ,\u5c06school\u548cchoose_course\u8fd9\u4e24\u4e2a\u540d\u5b57\u653e\u5230\u91cc\u9762. \u51fd\u6570\u4e0d\u540c,\u51fd\u6570\u5728\u8c03\u7528\u540e,\u624d\u4f1a\u5f00\u8f9f\u540d\u79f0\u7a7a\u95f4__\u4f46\u51e1\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u4e86\u53d8\u91cf\u540d\u5b57,\u8981\u5173\u8054\u60f3\u5230\u5f00\u8f9f\u540d\u79f0\u7a7a\u95f4 \u540d\u79f0\u7a7a\u95f4 -- school:id('oldboy') choose_course:id(choose_course\u51fd\u6570) ; \u5185\u5b58 --- \u5b58\u653e\u771f\u5b9e\u7684\u6570\u636e eg: 'oldboy'\u8fd9\u4e00\u5b57\u7b26\u4e32. \u2606\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61 \u00b6 \u8c03\u7528\u7c7b\u4ea7\u751f\u5bf9\u8c61 ,\u8c03\u7528\u7c7b\u7684\u8fc7\u7a0b\u53c8\u79f0\u4e3a\u7c7b\u7684 \u5b9e\u4f8b\u5316 . \u5b9e\u4f8b\u5316\u7684\u7ed3\u679c\u79f0\u4e3a\u7c7b\u7684\u5bf9\u8c61/\u5b9e\u4f8b. \u8c03\u7528\u7c7b\u4f1a\u5f97\u5230\u4e00\u4e2a\u8fd4\u56de\u503c,\u8be5\u8fd4\u56de\u503c\u5c31\u662f\u7c7b\u7684\u4e00\u4e2a\u5177\u4f53\u5b58\u5728\u7684\u5bf9\u8c61/\u5b9e\u4f8b # \u5c06\u7c7b\u6bd4\u55bb\u6210\u4e00\u4e2a\u5de5\u5382,\u8c03\u7528\u4e00\u6b21\u7c7b\u5c31\u4e0b\u53d1\u4e00\u4e2a\u751f\u4ea7\u6307\u4ee4,\u4ea7\u751f\u4e00\u4e2a\u5bf9\u8c61 # stu1 stu2 stu3\u662f\u4e09\u4e2a\u5bf9\u8c61 id\u4e0d\u4e00\u6837 stu1 = OldboyStudent () # <__main__.OldboyStudent object at 0x7fd993f1da90> stu2 = OldboyStudent () # <__main__.OldboyStudent object at 0x7fd993f1daf0> stu3 = OldboyStudent () # <__main__.OldboyStudent object at 0x7fd993f1dac0> \u7075\u9b42\u4e09\u95ee: 1> \u7c7b\u7684\u5b9e\u4f8b\u5316\u8fc7\u7a0b\u4e2d\u53d1\u751f\u4e86\u54ea\u4e9b\u4e8b? 2> \u901a\u8fc7\u5b9e\u4f8b\u5316\u9020\u7684stu1\u3001stu2\u3001stu3\u4e09\u4e2a\u5bf9\u8c61\u5168\u90fd\u4e00\u6837,\u5bf9\u8c61\u662f\u9664\u4e86\u6709\u76f8\u4f3c\u7684\u7279\u5f81\u4e0e\u6280\u80fd\u4ee5\u5916,\u8fd8\u5e94\u8be5\u6709\u81ea\u5df1\u72ec\u6709\u7684\u7279\u5f81,\u90a3\u5982\u4f55\u5728\u5b9e\u4f8b\u5316\u7684\u8fc7\u7a0b\u4e2d\u4e3a\u5bf9\u8c61\u5b9a\u5236\u81ea\u5df1\u72ec\u6709\u7684\u7279\u5f81\uff1f 3> \u7a0b\u5e8f\u4e2d\u7684\u5bf9\u8c61\u5230\u5e95\u662f\u4ec0\u4e48,\u5982\u4f55\u4f7f\u7528\uff1f Q:OldboyStudent() \u7c7b\u52a0\u62ec\u53f7\u662f\u8fd0\u884c\u7c7b\u4e2d\u7684\u4ee3\u7801\uff1f A: \u9519\uff01\uff01 \u7c7b\u4e2d\u7684\u4ee3\u7801\u5728\u5b9a\u4e49\u9636\u6bb5\u5c31\u6267\u884c\u5566.. \u5b9e\u4f8b\u5316\u5bf9\u8c61 \u00b6 \u5b9e\u4f8b\u5316\u7684\u4e00\u4e2a\u4e2a\u5bf9\u8c61\u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u4e2a\u4e2a\u540d\u79f0\u7a7a\u95f4(\u653e\u540d\u5b57\u7684!)... \u5bf9\u8c61\u7684\u540d\u79f0\u7a7a\u95f4 \u662f\u7528\u6765\u5b58\u653e\u5bf9\u8c61\u81ea\u5df1 \u72ec\u6709\u7684 \u540d\u5b57\\\u5c5e\u6027 \u7c7b\u4e2d\u5b58\u653e\u7684\u662f\u5bf9\u8c61\u4eec\u5171\u6709\u7684\u5c5e\u6027,\u5176\u4e2d\u5305\u542b\u6570\u636e\u5c5e\u6027\u548c\u51fd\u6570\u5c5e\u6027. __init__ \u4e0d\u662f\u7528\u6765\u9020\u5bf9\u8c61\u7684,\u662f\u7528\u6765\u521d\u59cb\u5316\u5bf9\u8c61\u7684. \u662f\u5728\u7c7b\u9020\u5b8c\u7a7a\u5bf9\u8c61\u540e\u624d\u89e6\u53d1\u7684. \u2606__init__ \u00b6 1> \u521b\u5efa\u5b9e\u4f8b\u5316\u5bf9\u8c61 \u540e ,\u4e3a\u5b83\u5b9a\u5236\u72ec\u6709\u7684\u7279\u5f81.. class OldboyStudent (): school = 'oldboy' # -- \u6570\u636e\u5c5e\u6027 def choose_course ( self ): # -- \u51fd\u6570\u5c5e\u6027 print ( 'is choosing course..' ) # -- \u5f00\u8f9f\u51fa\u4e24\u4e2a\u72ec\u7acb\u7684\u540d\u79f0\u7a7a\u95f4 stu1 stu2 stu1 = OldboyStudent () stu2 = OldboyStudent () # -- \u4e3a\u5b9e\u4f8b\u5316\u5bf9\u8c61\u5b9a\u5236\u72ec\u6709\u7684\u7279\u5f81 stu1 . name = '\u5c0f\u660e' stu1 . age = 18 stu2 . name = '\u5c0f\u7ea2' stu2 . age = 19 \"\"\" def init(obj,x,y): obj.name = x obj.age = y init(stu1,'\u5c0f\u660e',18) init(stu2,'\u5c0f\u7ea2',19) \"\"\" # -- \u67e5\u770bstu1\u548cstu2\u540d\u79f0\u7a7a\u95f4\u91cc\u7684\u540d\u5b57 print ( stu1 . __dict__ ) # {'name': '\u5c0f\u660e', 'age': 18} print ( stu2 . __dict__ ) # {'name': '\u5c0f\u7ea2', 'age': 19} # -- \u7c7b\u7684\u540d\u79f0\u7a7a\u95f4\u4e2d\u5b58\u653e\u7684\u662f\u5bf9\u8c61\u4eec\u5171\u6709\u7684\u5c5e\u6027 print ( OldboyStudent . school ) # oldboy print ( stu1 . school ) # oldboy print ( stu2 . school ) # oldboy 2> \u5b9e\u4f8b\u5316\u7684 \u8fc7\u7a0b\u4e2d ,\u5b9a\u5236\u5bf9\u8c61\u72ec\u6709\u7684\u7279\u5f81. \u8c03\u7528\u7c7b OldboyStudent() \u4ea7\u751f\u5bf9\u8c61\u8fc7\u7a0b\u4e2d\u53d1\u751f\u4e86\u4e24\u4ef6\u4e8b : step1 :\u8c03\u7528\u7c7b\u521b\u5efa\u4e86\u4e00\u4e2a\u7a7a\u5bf9\u8c61 '\u7a7a\u7684\u540d\u79f0\u7a7a\u95f4' {} \u200b step2 :\u81ea\u52a8\u89e6\u53d1\u7c7b\u4e2d__init__\u529f\u80fd\u7684\u6267\u884c, \u5c06\u7a7a\u5bf9\u8c61\u4f20\u7ed9self\u53c2\u6570 \u200b \u56e0\u800c\u8c03\u7528\u7c7b\u65f6\u4ec5\u9700\u4f20\u5165x,y\u4e24\u4e2a\u53c2\u6570 self\u53c2\u6570\u4e0d\u7528\u4f20,python\u81ea\u52a8\u5e2e\u6211\u4eec\u4f20\u5566. \u6ce8\u610f\u54e6, __init__ \u65b9\u6cd5\u5185\u53ef\u4ee5\u6709\u4efb\u610f\u7684python\u4ee3\u7801,\u4f46\u4e00\u5b9a\u4e0d\u80fd\u6709\u975eNone\u7684\u8fd4\u56de\u503c\uff01\uff01 class OldboyStudent (): school = 'oldboy' # -- \u4f1a\u5728\u8c03\u7528\u7c7b\u65f6\u81ea\u52a8\u89e6\u53d1 \u521d\u59cb\u5316\u65b9\u6cd5__init__ def __init__ ( self , x , y ): self . name = x # stu1.name = '\u5c0f\u660e' self . age = y # stu1.age = 18 def choose_course ( self ): print ( 'is choosing course..' ) stu1 = OldboyStudent ( '\u5c0f\u660e' , 18 ) # OldboyStudent('stu1','\u5c0f\u660e',18) print ( stu1 . __dict__ ) # {'name': '\u5c0f\u660e', 'age': 18} \u2606\u5c5e\u6027\u67e5\u627e \u00b6 \u5148\u4ece\u5bf9\u8c61\u81ea\u5df1\u7684\u540d\u79f0\u7a7a\u95f4\u627e, \u6ca1\u6709\u5219\u53bb\u7c7b\u4e2d\u627e, \u82e5\u7c7b\u4e2d\u4e5f\u6ca1\u6709, \u5219\u62a5\u9519 x = 1 class A : print ( '...' ) a = A () print ( a . x ) # \u62a5\u9519:'A' object has no attribute 'x' \uff08\u6700\u540e\u662f\u5728\u7c7b\u4e2d\u627e\u7684\uff09 [ \u5c0f\u63d2\u66f2 ] \u7528\u4ee3\u7801\u5b9e\u73b0\u8bb0\u5f55\u4e00\u5171\u5b9e\u4f8b\u5316\u7684\u6b21\u6570. \u5206\u6790: \u8fd9\u6837\u601d\u8003 \u6240\u6709\u7684\u5bf9\u8c61\u90fd\u770b\u5f97\u5230\u7684\u4e14\u503c\u90fd\u662f\u4e00\u6837\u7684,\u8fd9\u5f97\u662f\u4e2a\u7c7b\u5c5e\u6027. class OldboyStudent (): school = 'oldboy' count = 0 def __init__ ( self , x , y ): self . name = x self . age = y OldboyStudent . count += 1 # !!!(\u00b4\u25bd\uff40) stu1 = OldboyStudent ( '\u5c0f\u660e' , 18 ) stu2 = OldboyStudent ( '\u5c0f\u7ea2' , 19 ) print ( stu1 . count ) # 2 assert stu1 . count is stu2 . count is OldboyStudent . count OldboyStudent . count = 11 # -- \u7c7b\u7684\u6570\u636e\u5c5e\u6027\u88ab\u4fee\u6539\u4e86.. stu3 = OldboyStudent ( '\u5c0f\u5ddd' , 20 ) print ( stu1 . count , stu2 . count , stu3 . count , OldboyStudent . count ) # 12 12 12 12 \u2606\u7ed1\u5b9a\u65b9\u6cd5 \u00b6 \u7c7b\u540d\u79f0\u4e2d\u5b9a\u4e49\u7684\u6570\u636e\u5c5e\u6027\u548c\u51fd\u6570\u5c5e\u6027\u90fd\u662f\u5171\u4eab\u7ed9\u6240\u6709\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7528\u7684 \u5bf9\u8c61\u540d\u79f0\u7a7a\u95f4\u4e2d\u5b9a\u4e49\u7684 [\u53ea\u6709] \u6570\u636e\u5c5e\u6027 ,\u800c\u4e14\u662f\u5bf9\u8c61\u72ec\u6709\u7684\u6570\u636e\u5c5e\u6027,\u53ea\u6709\u5b9e\u4f8b\u5316\u5bf9\u8c61\u81ea\u5df1\u53ef\u4ee5\u770b\u89c1. \u7c7b\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u662f\u7c7b\u7684\u51fd\u6570\u5c5e\u6027,\u7c7b\u53ef\u4ee5\u4f7f\u7528,\u4f46\u4f7f\u7528\u7684\u5c31\u662f\u4e00\u4e2a\u666e\u901a\u7684\u51fd\u6570\u800c\u5df2. \u610f\u5473\u7740\u9700\u8981\u5b8c\u5168\u9075\u5faa\u51fd\u6570\u53c2\u6570\u89c4\u5219.\u8be5\u4f20\u51e0\u4e2a\u53c2\u6570\u5c31\u4f20\u51e0\u4e2a\u53c2\u6570. \u7c7b\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u662f\u53ef\u5171\u4eab\u7ed9\u6240\u6709\u5bf9\u8c61\u7684. \u5b9e\u4f8b\u5316\u5bf9\u8c61\u4e5f\u53ef\u4ee5\u4f7f\u7528,\u800c\u4e14\u662f\u4ee5\u7ed1\u5b9a\u7684\u65b9\u5f0f\u7ed9\u5bf9\u8c61\u7528 [ \u7ed1\u5b9a\u7684\u6548\u679c ] eg: \u7ed1\u5b9a\u7ed9stu1,\u5c31\u7531stu1\u6765\u8c03\u7528,\u8c03\u7528\u65f6\u4f1a\u5c06stu1\u5f53\u4f5c\u7b2c\u4e00\u4e2a\u53c2\u6570\u81ea\u52a8\u4f20\u5165 Ps: __init__ \u662f\u5728\u8c03\u7528\u7c7b\u65f6\u81ea\u52a8\u89e6\u53d1,\u5b9e\u5219\u4e5f\u662f\u89e6\u53d1\u4e86\u4e00\u4e2a\u7ed1\u5b9a\u65b9\u6cd5\u6267\u884c,self\u624d\u4f1a\u81ea\u52a8\u4f20\u5165. class OldboyStudent (): school = 'oldboy' def __init__ ( self , x , y ): self . name = x self . age = y def choose_course ( self , x ): print ( ' %s \u6b63\u5728\u9009\u8bfe' % self ) stu1 = OldboyStudent ( '\u5c0f\u660e' , 18 ) stu2 = OldboyStudent ( '\u5c0f\u7ea2' , 19 ) stu3 = OldboyStudent ( '\u5c0f\u5ddd' , 20 ) # \u7c7b\u8bbf\u95ee -- function\u65b9\u6cd5 # <function OldboyStudent.choose_course at 0x7fcac28599d0> print ( OldboyStudent . __dict__ [ 'choose_course' ]) # <function OldboyStudent.choose_course at 0x7fcac28599d0> print ( OldboyStudent . choose_course ) # \u5bf9\u8c61\u8bbf\u95ee -- bound method\u7ed1\u5b9a\u65b9\u6cd5 # <__main__.OldboyStudent object at 0x7fcac285aa90> !!! print ( stu1 ) # <bound method OldboyStudent.choose_course of <__main__.OldboyStudent object at 0x7fcac285aa90>> !!! \u6307\u660e\u4e86\u7ed1\u5b9a\u5230\u54ea\u4e2a\u65b9\u6cd5,\u4ee5\u53ca\u54ea\u4e2a\u5bf9\u8c61\u53bb\u7ed1\u5b9a.. print ( stu1 . choose_course ) # <class '__main__.OldboyStudent'> print ( OldboyStudent ) print ( hex ( id ( OldboyStudent ))) # 0x7fcac28599d0 # 7fcac286b0f0 print ( ' %x ' % id ( OldboyStudent . school )) print ( ' %x ' % id ( stu1 . school )) print ( ' %x ' % id ( stu2 . school )) \"\"\" \u5148\u660e\u767d\u4e00\u70b9 `\u5bf9\u8c61.\u65b9\u6cd5`\u8bbf\u95ee\u5230\u7684\u662f\u65b9\u6cd5\u7684\u5185\u5b58\u5730\u5740 `\u5bf9\u8c61.\u65b9\u6cd5()`\u65b9\u6cd5\u8fd0\u884c \u5f88\u795e\u5947\u554a,`\u5b9e\u4f8b\u5316\u65b9\u6cd5.\u7c7b\u4e2d\u7684\u65b9\u6cd5`\u7684id\u5c45\u7136\u8ddf`\u7c7b.\u540c\u4e00\u65b9\u6cd5`\u7684id\u4e0d\u4e00\u6837.. \u6709\u4e00\u79cd\u89e3\u91ca\u662f\u8fd9\u6837\u7684: \u5b9e\u4f8b\u5316\u5bf9\u8c61\u540e,Python\u7f16\u8f91\u5668\u4f1a\u5c06\u7c7b\u65b9\u6cd5\u7684\u5bf9\u8c61\u91cd\u65b0\u4f7f\u7528\u63cf\u8ff0\u5668\u5305\u88c5\u4e00\u4e0b,\u7136\u540e\u5b58\u50a8\u5230\u4e00\u4e2a\u65b0\u7684\u5185\u5b58\u7a7a\u95f4,\u5728\u8c03\u7528\u7684\u8fc7\u7a0b\u4e2d,Python\u5185\u90e8\u4f1a\u5bf9Person.__dict__['choose_course']\u505a\u4e00\u6b21\u62f7\u8d1d,\u6240\u4ee5\u6211\u4eec\u76f8\u5f53\u4e8e\u8c03\u7528\u7684\u53ea\u662f\u65b9\u6cd5\u7684\u526f\u672c. Python\u91c7\u7528\u7684\u662f\u5783\u573e\u56de\u6536\u7684\u673a\u5236,\u5f53\u4e00\u4e2a\u5185\u5b58,\u6ca1\u6709\u5bf9\u8c61\u5bf9\u5176\u5f15\u7528\u7684\u8bdd,\u5c31\u4f1a\u7acb\u523b\u9500\u6bc1\u8fd9\u5757\u5185\u5b58\u7136\u540e\u5bf9\u5176\u590d\u7528. obj = stu2.choose_course \u662f\u4e3a\u4e86\u9632\u6b62\u7f16\u8bd1\u5668\u5bf9choose_course\u7acb\u523b\u9500\u6bc1 \"\"\" print ( hex ( id ( OldboyStudent . choose_course ))) # 0x7fcac28599d0 print ( hex ( id ( stu1 . choose_course ))) # 0x7fcabf65dc80 print ( hex ( id ( stu2 . choose_course ))) # 0x7fcabf65dc80 obj = stu2 . choose_course print ( hex ( id ( obj ))) # 0x7fcabf65dc80 print ( hex ( id ( stu3 . choose_course ))) # 0x7fc654f1bf80 \u4e0d\u4e00\u6837\u5566\uff01 \"\"\" \u4e0d\u60f3\u7ea0\u7ed3\u4e86(\uffe3O\uffe3;)..\u7c97\u7565\u7684\u5c31\u4e0d\u770bid.\u7b80\u5355\u7684\u7406\u89e3\u5c31\u662f\u6307\u5411\u540c\u4e00\u4e2a\u5bf9\u8c61,\u53ea\u4e0d\u8fc7\u5e95\u5c42\u5185\u90e8\u7684\u8fc7\u7a0b\u6709\u70b9\u66f2\u6298.. \"\"\" # \u5c06stu1\u5bf9\u8c61\u4f20\u7ed9\u4e86choose_course\u7684self\u53c2\u6570 # \u4e0b\u9762\u4e24\u4e2a\u5199\u6cd5\u6548\u679c\u4e00\u81f4.. stu1 . choose_course ( 123 ) OldboyStudent . choose_course ( stu1 , 123 ) \u7ed1\u5b9a\u65b9\u6cd5\u4e0e\u51fd\u6570\u7684\u533a\u522b : \u7b80\u5355\u6765\u8bf4, \u51fd\u6570\u6b63\u513f\u516b\u7ecf\u7684\u8be5\u4f20\u51e0\u4e2a\u503c\u4f20\u51e0\u4e2a\u503c;\u7ed1\u5b9a\u65b9\u6cd5\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e0d\u7528\u4f20,\u4f1a\u5c06\u7ed1\u5b9a\u8005\u81ea\u52a8\u4f20\u8fdb\u53bb... \u7c7b\u6765\u8c03\u7528\u5c31\u662f\u666e\u901a\u51fd\u6570, \u5b9e\u4f8b\u5316\u5bf9\u8c61\u6765\u8c03\u7528\u5c31\u662f\u7ed1\u5b9a\u65b9\u6cd5. \u5c0f\u7ed3 \u00b6 \u7c7b\u5bf9\u8c61\u3001\u5b9e\u4f8b\u5316\u5bf9\u8c61\u5c31\u662f\u4e00\u4e2a\u5b58\u6570\u636e/\u5c5e\u6027\u7684\u5bb9\u5668\uff01 \u5bf9\u8c61 -- \u540d\u79f0\u7a7a\u95f4 -- \u653e\u540d\u5b57 -- \u540d\u5b57:id(\u6570\u636e) -- \u6570\u636e'\u4e5f\u79f0x\u4f5c\u5c5e\u6027' \u5bf9\u4e8e\u7c7b\u5bf9\u8c61\u800c\u8a00, \u5c5e\u6027 = \u6570\u636e\u5c5e\u6027 '\u5373\u7279\u5f81' + \u51fd\u6570\u5c5e\u6027 '\u5373\u529f\u80fd' \u8fd9\u4e9b\u5c5e\u6027\u662f\u5b9e\u4f8b\u5316\u5bf9\u8c61\u5171\u4eab\u7684. \u5bf9\u4e8e\u5b9e\u4f8b\u5316\u5bf9\u8c61\u800c\u8a00, \u5c5e\u6027\u5c31\u662f\u81ea\u5df1\u72ec\u6709\u7684\u7279\u5f81. \u5b9e\u4f8b\u5316\u5bf9\u8c61\u53ef\u4ee5\u8c03\u7528\u7c7b\u5bf9\u8c61\u4e2d\u7684\u5c5e\u6027. \u6269\u5c55\u5f00\u6765\u8bb2,\u5f97\u5230\u4e00\u4e2a\u5b9e\u4f8b\u5316\u5bf9\u8c61,\u4e0d\u4ec5\u5f97\u5230\u4e00\u5806\u6570\u636e\u5c5e\u6027(\u81ea\u5df1\u72ec\u6709\u7684+\u7c7b\u5bf9\u8c61\u91cc\u7684),\u8fd8\u80fd\u5f97\u5230\u4e13\u95e8\u5904\u7406\u8fd9\u4e9b\u6570\u636e\u5c5e\u6027\u7684\u65b9\u6cd5(\u7c7b\u5bf9\u8c61\u91cc\u7684\u51fd\u6570\u5c5e\u6027)\uff01 \u6ce8\u610f\u54e6,\u5230\u76ee\u524d\u4e3a\u6b62,\u7c7b\u91cc\u9762\u7684\u51fd\u6570\u5c5e\u6027\u53ea\u6d89\u53ca\u5230\u4e86\u5e26\u6709self\u53c2\u6570\u7684\u65b9\u6cd5. \u6240\u4ee5,\u6211\u4eec\u5728\u8fd9\u91cc\u53ef\u4ee5\u8bf4(\u4e25\u8c28\u4e00\u70b9),\u7c7b\u5bf9\u8c61\u91cc\u7684\u51fd\u6570\u5c5e\u6027\u5c31\u662f\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684 \u7ed1\u5b9a\u65b9\u6cd5 . \u5b9e\u4f8b\u5316\u5bf9\u8c61\u8c03\u7528\u7ed1\u5b9a\u65b9\u6cd5\u4f1a\u5c06\u5b9e\u4f8b\u5316\u5bf9\u8c61\u81ea\u52a8\u4f20\u5165,\u4f5c\u4e3aself\u53c2\u6570\u7684\u503c \u2606\u7c7b\u5c31\u662f\u7c7b\u578b \u00b6 \u4e3e\u4e2a\u6817\u5b50: \u5728python3\u4e2d\u7edf\u4e00\u4e86\u7c7b\u4e0e\u7c7b\u578b\u7684\u6982\u5ff5, \u7c7b\u5c31\u662f\u7c7b\u578b \u5e38\u89c1\u7684\u7c7b\u578b: \u5b57\u7b26\u4e32 \u5143\u7956 \u5217\u8868... \u5185\u7f6e\u51fd\u6570 type(obj) \u53ef\u4ee5\u67e5\u770b\u8be5\u5bf9\u8c61\u5c5e\u4e8e\u54ea\u79cd\u7c7b\u578b. class Foo : # \u81ea\u5b9a\u4e49\u7684\u7c7b \u6216\u8bf4\u662f \u81ea\u5b9a\u4e49\u7684\u6570\u636e\u7c7b\u578b def func1 ( self , x ): print ( '\u7ed1\u5b9a\u65b9\u6cd5..' ) f = Foo () print ( f ) # <__main__.Foo object at 0x7f98df9c7ee0> print ( type ( f )) # <class '__main__.Foo'> f . func1 ( 123 ) # \u7ed1\u5b9a\u65b9\u6cd5.. -- \u53ef\u4ee5\u5199\u6210 Foo.func1(f,123) Foo . func1 ( f , 123 ) # \u7ed1\u5b9a\u65b9\u6cd5.. >>> list # -- \u7c7b\u578blist\u5c31\u662f\u7c7blist < class ' list '> # -- \u53ef\u4ee5\u5199\u6210my_list = list([1,2,3]) # \u5373\u7c7blist\u5b9e\u4f8b\u5316\u4e86\u4e00\u4e2a\u540d\u4e3amy_list\u7684\u5bf9\u8c61 >>> my_list = [ 1 , 2 , 3 ] >>> type ( my_list ) < class ' list '> >>> other_list = [ 4 , 5 , 6 ] \"\"\" \u5b9e\u4f8b\u5316\u5bf9\u8c61my_list\u8fd8\u6709\u4e13\u95e8\u64cd\u4f5c\u5217\u8868\u6570\u636e\u7c7b\u578b\u7684\u4e00\u7cfb\u5217\u65b9\u6cd5 eg:\u5f80my_list\u5217\u8868\u91cc\u52a0\u4e00\u4e2a\u503c`4`,\u8be5\u503c\u52a0\u5230\u7684\u662fmy_list\u8fd9\u4e00\u5217\u8868\u4e2d,\u800c\u4e0d\u662fother_list\u5217\u8868 \u518d\u6b21\u9a8c\u8bc1\u8bf4\u660e,[\u7ed1\u5b9a\u65b9\u6cd5\u7ed1\u5b9a\u7ed9\u8c01,\u5c31\u5e94\u8be5\u7531\u8c01\u6765\u8c03\u7528,\u8c01\u6765\u8c03\u7528\u5c31\u64cd\u4f5c\u7684\u662f\u8c01.] \"\"\" >>> my_list . append # -- my_list\u7684\u7ed1\u5b9a\u65b9\u6cd5append \u4f1a\u81ea\u52a8\u4f20\u503c < built - in method append of list object at 0x7fd8aaf7d8c0 > >>> my_list . append ( 4 ) # -- \u53ef\u4ee5\u5199\u6210list.append(my_list,4) \u4e13\u95e8\u7528\u4e8e\u68c0\u67e5\u6570\u636e\u7c7b\u578b\u7684\u65b9\u6cd5: isinstance , \u5145\u5206\u4f53\u73b0\u4e86python\u5904\u5904\u7686\u5bf9\u8c61! # -- isinstance(obj,cls) \u68c0\u67e5obj\u662f\u5426\u662f\u7c7b cls \u7684\u4e00\u4e2a\u5b9e\u4f8b # -- issubclass(sub, super) \u68c0\u67e5sub\u7c7b\u662f\u5426\u662f super \u7c7b\u7684\u6d3e\u751f\u7c7b/\u5b50\u7c7b class Foo : pass class Sub ( Foo ): pass obj = Foo () print ( isinstance ( obj , Foo )) # True print ( issubclass ( Sub , Foo )) # True print ( issubclass ( Foo , object )) # True print ( issubclass ( Sub , object )) # True # -- python3\u4e2d\u7edf\u4e00\u4e86\u7c7b\u4e0e\u7c7b\u578b\u7684\u6982\u5ff5 d = { 'x' : 1 } # -- \u672c\u8d28\u4e0a\u662f d = dict({'x':1}) print ( isinstance ( d , dict )) # -- \u4e0d\u5efa\u8bae\u7528`type(d) is dict`\u6765\u5224\u65ad \u2606\u6570\u636e\u4e0e\u529f\u80fd\u7684\u6574\u5408 \u00b6 \u7a0b\u5e8f = \u6570\u636e + \u5904\u7406\u6570\u636e\u7684\u529f\u80fd ; \u7a0b\u5e8f\u4f7f\u7528\u529f\u80fd\u8fd0\u4f5c\u8d77\u6765,\u5c31\u662f\u4e00\u7cfb\u5217\u7684\u6570\u636e\u5728\u53d1\u751f\u53d8\u5316. \u9762\u5411\u8fc7\u7a0b\u4e2d\u7684\u51fd\u6570 \u5c06\u7a0b\u5e8f\u7684\u529f\u80fd\u8fdb\u884c\u4e86\u6574\u5408 .. (\u6570\u636e\u6ca1\u6709\u6574\u5408) \u9762\u5411\u5bf9\u8c61\u4e2d\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61 \u5c06\u6570\u636e\u4ee5\u53ca\u4e13\u95e8\u5904\u7406\u8fd9\u5806\u6570\u636e\u7684\u529f\u80fd\u4f5c\u4e86\u6574\u5408 .. (\u6574\u5408\u7a0b\u5ea6\u8fdb\u4e00\u6b65\u5347\u7ea7) \u6bd4\u5982: \u7ed9\u4e00\u4e2a\u5217\u8868,\u5f97\u5230\u7684\u4e0d\u4ec5\u4ec5\u662f\u5217\u8868\u6570\u636e, \u8fd8\u6709append insert\u7b49\u7b49\u7ed1\u5b9a\u65b9\u6cd5. \u5f3a\u8c03!!! \u5b9e\u4f8b\u5316\u5bf9\u8c61\u662f\u4e00\u4e2a\u9ad8\u5ea6\u6574\u5408\u7684\u4ea7\u7269,\u6574\u5408\u6570\u636e( \u81ea\u5df1\u72ec\u6709\u7684+\u4e0e\u5176\u5b83\u5b9e\u4f8b\u5316\u5bf9\u8c61\u5171\u6709\u7684 )\u4e0e\u4e13\u95e8\u64cd\u4f5c\u8be5\u6570\u636e\u7684\u65b9\u6cd5[ \u8be5\u65b9\u6cd5\u79f0\u4e3a\u7ed1\u5b9a\u65b9\u6cd5 ]\uff01 \u5177\u4f53\u6f14\u53d8\u5982\u4e0b: # --- 1.\u5728\u9762\u5411\u8fc7\u7a0b\u4e2d,\u6570\u636e\u4e0e\u529f\u80fd\u662f\u5206\u79bb\u7684\uff01 # fun1\u548cfunc2\u90fd\u4f1a\u7528\u5230a,b,c\u53d8\u91cf\u7684\u503c def func1 ( a , b , c , sql ): print ( a , b , c , sql ) def func2 ( a , b , c , host ): print ( a , b , c , host ) \"\"\" \u6bcf\u6b21\u8c03\u7528\u90fd\u8981\u91cd\u590d\u4f20\u5165\u4e00\u4e9b\u53c2\u6570.. \u7528\u9ed8\u8ba4\u53c2\u6570\u89e3\u51b3??\u4e00\u4e2a\u51fd\u6570\u7684\u53c2\u6570\u7ecf\u5e38\u4f1a\u7528\u5230\u67d0\u4e00\u53c2\u6570\u503c\u65f6\u624d\u4f1a\u4e3a\u8be5\u53c2\u6570\u8bbe\u7f6e\u4e3a\u9ed8\u8ba4\u53c2\u6570 \u4e3a\u4e24\u51fd\u6570\u90fd\u8bbe\u7f6e\u9ed8\u8ba4\u53c2\u6570\uff1f\uff1f\u4e0d\u59a5 \u8fd9\u4e0d\u8fd8\u662f\u5728\u505a\u91cd\u590d\u64cd\u4f5c\u561b\uff01 \u6b63\u786e\u6253\u5f00\u65b9\u5f0f:\u5b9a\u4e49\u5168\u5c40\u53d8\u91cf func1,func2\u5c31\u53ef\u4ee5\u5171\u7528a,b,c\u5566 \"\"\" func1 ( 1 , 2 , 3 , 'select * from tb3;' ) func2 ( 1 , 2 , 3 , '192.168.0.1' ) # -- 2.\u5b9a\u4e49\u5168\u5c40\u53d8\u91cf # fun1\u548cfunc2\u90fd\u4f1a\u7528\u5230a,b,c\u53d8\u91cf\u7684\u503c # fun3\u548cfun4\u90fd\u4f1a\u7528\u5230d,e\u53d8\u91cf\u7684\u503c a , b , c = 1 , 2 , 3 d , e = 44 , 55 def func1 ( sql ): pass def func2 ( host ): pass def func3 ( xxx ): pass def func4 ( yyy ): pass \"\"\" a,b,c\u7684\u672c\u610f\u662f\u53ea\u7ed9func1\u548cfunc2\u7528,\u4f46fun3,fun4\u4e5f\u80fd\u8bbf\u95ee\u7684\u5230 \u540c\u7406d,e\u7684\u672c\u610f\u662f\u53ea\u7ed9func3\u548cfunc4\u7528,\u4f46fun1,fun2\u4e5f\u80fd\u8bbf\u95ee\u7684\u5230 \u56e0\u4e3a\u8fd9\u4e9b\u5168\u5c40\u53d8\u91cf,\u5e76\u4e0d\u96b6\u5c5e\u4e8e\u67d0\u51e0\u4e2a\u529f\u80fd,\u80fd\u88ab\u6240\u6709\u529f\u80fd\u4f7f\u7528 \u6240\u4ee5\u8fd9\u4e9b\u5168\u5c40\u53d8\u91cf\u5168\u90e8\u8026\u5408\u5728\u4e00\u8d77,\u6ca1\u6709\u505a\u533a\u5206.\u6574\u5408\u7a0b\u5ea6\u4ecd\u7136\u4e0d\u9ad8,\u89e3\u8026\u5408\u7a0b\u5ea6\u4e0d\u9ad8, \"\"\" func1 ( 'select * from tb3;' ) func2 ( '192.168.0.1' ) # -- 3.\u7c7b # \u5b9e\u4f8b\u5316\u5bf9\u8c61\u662f\u4e00\u4e2a\u9ad8\u5ea6\u6574\u5408\u7684\u4ea7\u7269,\u6574\u5408\u6570\u636e\u4e0e\u4e13\u95e8\u64cd\u4f5c\u8be5\u6570\u636e\u7684\u65b9\u6cd5\uff01 class Foo : def __init__ ( self , a , b , c ): self . a = a self . b = b self . c = c def func1 ( self , sql ): print ( self . a , self . b , self . c , sql ) def func2 ( self , host ): print ( self . a , self . b , self . c , host ) class Bar : def __init__ ( self , d , e ): self . d = d self . e = e def func3 ( self , xxx ): print ( self . d , self . e , xxx ) def func4 ( self , yyy ): print ( self . d , self . e , yyy ) foo = Foo ( 1 , 2 , 3 ) foo . func1 ( 'select * from tb3;' ) foo . func2 ( '192.168.0.1' ) bar = Bar ( 44 , 55 ) bar . func3 ( '(\u00b4\u25bd\uff40)' ) bar . func4 ( '(\uffe3\u25bd\uffe3)' )","title":"OOP\u57fa\u672c"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/0_OOP%E5%9F%BA%E6%9C%AC/#_1","text":"\u4e24\u5927\u7f16\u7a0b\u8303\u5f0f \u9762\u5411\u8fc7\u7a0b \u9762\u5411\u5bf9\u8c61","title":"\u9762\u5411\u8fc7\u7a0b\u4e0e\u9762\u5411\u5bf9\u8c61\u533a\u522b"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/0_OOP%E5%9F%BA%E6%9C%AC/#_2","text":"\u6838\u5fc3\u662f \u8fc7\u7a0b \u4e8c\u5b57,\u8fc7\u7a0b\u6307\u7684\u662f\u89e3\u51b3\u95ee\u9898\u7684\u6b65\u9aa4,\u5373\u5148\u5e72\u4ec0\u4e48\u540e\u5e72\u4ec0\u4e48.. \u200b \u57fa\u4e8e\u8be5\u601d\u60f3\u7f16\u5199\u7a0b\u5e8f\u597d\u6bd4\u5728\u8bbe\u8ba1\u4e00\u6761\u6d41\u6c34\u7ebf,\u662f\u4e00\u79cd\u673a\u68b0\u5f0f\u7684\u601d\u7ef4\u65b9\u5f0f.. \u4f18\u70b9: \u590d\u6742\u7684\u95ee\u9898\u6d41\u7a0b\u5316\u3001\u8fdb\u800c\u7b80\u5355\u5316. \u53ef\u4ee5\u7cbe\u51c6\u7684\u9884\u6d4b\u95ee\u9898\u7684\u5904\u7406\u6d41\u7a0b\u548c\u7ed3\u679c. \u200b \u7f3a\u70b9: \u6269\u5c55\u6027\u5dee","title":"\u2606\u9762\u5411\u8fc7\u7a0b\u7f16\u7a0b"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/0_OOP%E5%9F%BA%E6%9C%AC/#_3","text":"\u6838\u5fc3\u662f \u5bf9\u8c61 \u4e8c\u5b57, \u5bf9\u8c61\u662f\u7279\u5f81\u4e0e\u6280\u80fd\u7684\u7ed3\u5408\u4f53 . \u200b \u57fa\u4e8e\u8be5\u601d\u60f3\u7f16\u7a0b\u7684\u7a0b\u5e8f\u5c31\u597d\u6bd4\u662f\u5728\u521b\u9020\u4e00\u4e2a\u4e16\u754c,\u4e16\u754c\u4e07\u7269\u90fd\u662f\u5bf9\u8c61,\u4f60\u5c31\u662f\u8fd9\u4e2a\u4e16\u754c\u7684\u4e0a\u5e1d \u200b \u8981\u601d\u8003\u4ec0\u4e48\u4eba\u80fd\u5e72\u4ec0\u4e48\u4e8b\u60c5,\u89e3\u51b3\u8fd9\u4ef6\u4e8b\u7684\u8fd9\u4e2a\u4eba\u9700\u8981\u5177\u5907\u4ec0\u4e48\u6837\u7684\u7279\u5f81\u548c\u6280\u80fd \u4f18\u70b9: \u53ef\u6269\u5c55\u6027\u5f3a \u5bf9\u4e8e\u4e00\u4e2a\u8f6f\u4ef6\u8d28\u91cf(\u6210\u672c\u3001\u6027\u80fd\u3001\u53ef\u9760\u6027...)\u800c\u8a00,\u9762\u5411\u5bf9\u8c61\u7684\u7a0b\u5e8f\u8bbe\u8ba1\u53ea\u662f\u7528\u6765\u89e3\u51b3\u6269\u5c55\u6027\u7684. \u200b \u7f3a\u70b9: \u200b 1>\u7f16\u7a0b\u7684\u590d\u6742\u5ea6\u8981\u9ad8\u4e8e\u9762\u5411\u8fc7\u7a0b \u200b 2>\u9762\u5411\u5bf9\u8c61\u7684\u7a0b\u5e8f\u4e00\u65e6\u5f00\u59cb\u5c31\u7531\u5bf9\u8c61\u4e4b\u95f4\u7684\u4ea4\u4e92\u89e3\u51b3\u95ee\u9898,\u5373\u4fbf\u662f\u4e0a\u5e1d\u4e5f\u65e0\u6cd5\u51c6\u786e\u7684\u9884\u6d4b\u7ed3\u679c. eg: \u6e38\u620f\u5bf9\u8c61\u5bf9\u6218\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u7684\u9634\u9738\u6280\u80fd... \u200b \u5e94\u7528\u573a\u666f: \u9700\u6c42\u7ecf\u5e38\u53d8\u5316\u7684\u8f6f\u4ef6,\u4e00\u822c\u9700\u6c42\u7684\u53d8\u5316\u90fd\u96c6\u4e2d\u5728\u7528\u6237\u5c42, eg: \u4f01\u4e1a\u5185\u90e8\u8f6f\u4ef6, \u6e38\u620f\u7b49.","title":"\u2606\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/0_OOP%E5%9F%BA%E6%9C%AC/#_4","text":"\u7c7b: \u79cd\u7c7b\u3001\u5206\u7c7b\u3001\u7c7b\u522b \u5bf9\u8c61\u662f\u7279\u5f81\u4e0e\u6280\u80fd\u7684\u7ed3\u5408\u4f53,\u7c7b\u662f \u4e00\u7cfb\u5217(\u591a\u4e2a) \u5bf9\u8c61\u76f8\u4f3c\u7684\u7279\u5f81\u4e0e\u6280\u80fd\u7684\u7ed3\u5408\u4f53. \u5f3a\u8c03: \u7ad9\u7684\u89d2\u5ea6\u4e0d\u540c,\u603b\u7ed3\u51fa\u7684\u7c7b\u662f\u622a\u7136\u4e0d\u540c\u7684.. \u7c7b\u4e0e\u5bf9\u8c61\u8c01\u5148\u51fa\u73b0\u5462\uff1f \u5728 \u73b0\u5b9e \u751f\u6d3b\u4e2d: \u5148\u6709\u4e00\u4e2a\u4e2a\u5177\u4f53\u5b58\u5728\u7684\u5bf9\u8c61,\u7136\u540e\u968f\u7740\u4eba\u7c7b\u6587\u660e\u7684\u53d1\u5c55\u624d\u6709\u4e86\u5206\u7c7b\u7684\u6982\u5ff5... \u5728 \u7a0b\u5e8f \u4e2d: \u5fc5\u987b\u5148\u5b9a\u4e49\u7c7b,\u540e\u8c03\u7528\u7c7b\u6765\u4ea7\u751f\u5bf9\u8c61...","title":"\u7c7b"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/0_OOP%E5%9F%BA%E6%9C%AC/#_5","text":"\u7c7b\u7684\u672c\u8eab\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u5bb9\u5668/\u540d\u79f0\u7a7a\u95f4 , \u7528\u6765\u5b58\u653e\u540d\u5b57\u7684 \u53ef\u4ee5\u4ece\u7c7b\u7684\u540d\u79f0\u7a7a\u95f4\u4e2d\u589e/\u5220/\u6539/\u67e5\u540d\u5b57 ps: \u56de\u987e -- \u5728\u524d\u9762\u51fd\u6570\u5bfc\u5165\u6a21\u5757\u90a3\u4e00\u5c0f\u8282,\u5bfc\u4e00\u4e2a\u6a21\u5757\u5c31\u4f1a\u9020\u4e00\u4e2a\u540d\u79f0\u7a7a\u95f4( \u6a21\u5757\u540d\u6307\u5411\u540d\u79f0\u7a7a\u95f4 ) \u4ece\u540d\u79f0\u7a7a\u95f4\u91cc\u5f80\u5916\u62fd\u540d\u5b57,\u5c31\u662f . \u8fd9\u79cd\u8bed\u6cd5\u6765\u641e\u5b9a\u7684\uff01 . \u540e\u9762\u7684\u7edf\u79f0\u4e3a\u5c5e\u6027 \u5373python\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e13\u95e8\u8bbf\u95ee\u5c5e\u6027(\u540d\u79f0\u7a7a\u95f4\u4e2d\u7684\u540d\u5b57)\u7684\u8bed\u6cd5,\u70b9\u540e\u9762\u5c31\u662f\u5c5e\u6027 school\u548cchoose_course\u90fd\u662fOldboyStudent\u7684\u5c5e\u6027,\u4e3a\u4e86\u4fbf\u4e8e\u9610\u8ff0,\u5f80\u540e\u6211\u4eec \u79c1\u4e0b\u7ea6\u5b9a school\u662f\u6570\u636e\u5c5e\u6027,choose_course\u662f\u51fd\u6570\u5c5e\u6027... (python\u662f\u6ca1\u6709\u6570\u636e\u5c5e\u6027\u51fd\u6570\u5c5e\u6027\u6982\u5ff5\u7684 \u6211\u4eec\u79c1\u4e0b\u7ea6\u5b9a\u7684!\uff01) # -- \u7c7b\u7684\u5b9a\u4e49 class OldboyStudent (): school = 'oldboy' # \u53d8\u91cf -- \u6570\u636e \u7279\u5f81 def choose_course ( self ): # \u65b9\u6cd5 -- \u529f\u80fd \u6280\u80fd print ( 'is choosing course..' ) print ( '>>>>' ) # \u7c7b\u4e2d\u53ef\u4ee5\u6709\u4efb\u610f\u53ef\u6267\u884c\u4ee3\u7801 # -- `.`\u8868\u660e\u4ece\u540d\u79f0\u7a7a\u95f4\u4e2d\u8bbf\u95ee\u5c5e\u6027\uff01 [\u672c\u8d28]\u64cd\u4f5c\u7684\u5c31\u662f__dict__!! print ( OldboyStudent . __dict__ ) # \u67e5\u770b\u7c7b\u7684\u540d\u79f0\u7a7a\u95f4 \u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u5b57\u5178\uff01 print ( OldboyStudent . __dict__ [ 'school' ]) # oldboy # <function OldboyStudent.choose_course at 0x7fb28af1c790> print ( OldboyStudent . __dict__ [ 'choose_course' ]) print ( OldboyStudent . school ) # !!\u7c7b\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u662f\u7c7b\u7684\u51fd\u6570\u5c5e\u6027,\u7c7b\u53ef\u4ee5\u4f7f\u7528,\u4f46\u4f7f\u7528\u7684\u5c31\u662f\u4e00\u4e2a\u666e\u901a\u7684\u51fd\u6570\u800c\u5df2. # \u610f\u5473\u7740\u9700\u8981\u5b8c\u5168\u9075\u5faa\u51fd\u6570\u53c2\u6570\u89c4\u5219.\u8be5\u4f20\u51e0\u4e2a\u503c\u5c31\u4f20\u51e0\u4e2a\u503c.. print ( OldboyStudent . choose_course ( 123 )) # -- \u5bf9\u7c7b\u7684\u540d\u79f0\u7a7a\u95f4\u8fdb\u884c\u589e\u6539\u5220 \u672c\u8d28\u5c31\u662f\u64cd\u4f5c\u5b57\u5178.. # \u50cf\u8fd9\u79cd__dict__\u5f00\u5934\u548c\u7ed3\u5c3e\u90fd\u662f\u53cc\u4e0b\u5212\u7ebf\u7684 \u6211\u4eec\u901a\u5e38\u4e0d\u4f1a\u76f4\u63a5\u64cd\u4f5c \u800c\u662f\u6ee1\u8db3\u6761\u4ef6\u4e0b\u81ea\u52a8\u89e6\u53d1 # Ps:\u5728\u8fed\u4ee3\u5668\u90a3\u91cc\u4e5f\u63d0\u5230\u4e86\u53cc\u4e0b\u5212\u7ebf.. OldboyStudent . country = 'China' # OldboyStudent.__dict__['country'] = 'China' OldboyStudent . country = 'CHINA' # OldboyStudent.__dict__['country'] = 'CHINA' del OldboyStudent . school \"\"\"OldboyStudent.__dict__\u7684\u7ed3\u679c {'__module__': '__main__', 'school': 'oldboy', 'choose_course': <function OldboyStudent.choose_course at 0x7fc4a171e790>, '__dict__': <attribute '__dict__' of 'OldboyStudent' objects>, '__weakref__': <attribute '__weakref__' of 'OldboyStudent' objects>, '__doc__': None} \"\"\" \u53d8\u91cf\u540d\u4e0d\u5efa\u8bae\u4f7f\u7528\u9a7c\u5cf0\u4f53,\u7c7b\u540d\u53ef\u4ee5.. \u4ece\u4e0a\u5230\u4e0b\u8fd0\u884c\u4ee3\u7801, \u9047\u5230\u7c7b\u5b9a\u4e49\u9636\u6bb5\u7684\u4ee3\u7801,\u4f1a\u7acb\u523b\u6267\u884c. \u6267\u884c\u4f1a\u53d1\u751f\u4ec0\u4e48\u4e8b\uff1f \u5c31\u4e0a\u65b9\u51e0\u884c\u4ee3\u7801\u7684\u8fd0\u884c\u800c\u8a00,\u4f1a \u5f00\u8f9f\u4e00\u4e2a\u7c7b\u7684\u540d\u79f0\u7a7a\u95f4 ,\u5c06school\u548cchoose_course\u8fd9\u4e24\u4e2a\u540d\u5b57\u653e\u5230\u91cc\u9762. \u51fd\u6570\u4e0d\u540c,\u51fd\u6570\u5728\u8c03\u7528\u540e,\u624d\u4f1a\u5f00\u8f9f\u540d\u79f0\u7a7a\u95f4__\u4f46\u51e1\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u4e86\u53d8\u91cf\u540d\u5b57,\u8981\u5173\u8054\u60f3\u5230\u5f00\u8f9f\u540d\u79f0\u7a7a\u95f4 \u540d\u79f0\u7a7a\u95f4 -- school:id('oldboy') choose_course:id(choose_course\u51fd\u6570) ; \u5185\u5b58 --- \u5b58\u653e\u771f\u5b9e\u7684\u6570\u636e eg: 'oldboy'\u8fd9\u4e00\u5b57\u7b26\u4e32.","title":"\u2606\u5f00\u8f9f\u7c7b\u7684\u547d\u4ee4\u7a7a\u95f4"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/0_OOP%E5%9F%BA%E6%9C%AC/#_6","text":"\u8c03\u7528\u7c7b\u4ea7\u751f\u5bf9\u8c61 ,\u8c03\u7528\u7c7b\u7684\u8fc7\u7a0b\u53c8\u79f0\u4e3a\u7c7b\u7684 \u5b9e\u4f8b\u5316 . \u5b9e\u4f8b\u5316\u7684\u7ed3\u679c\u79f0\u4e3a\u7c7b\u7684\u5bf9\u8c61/\u5b9e\u4f8b. \u8c03\u7528\u7c7b\u4f1a\u5f97\u5230\u4e00\u4e2a\u8fd4\u56de\u503c,\u8be5\u8fd4\u56de\u503c\u5c31\u662f\u7c7b\u7684\u4e00\u4e2a\u5177\u4f53\u5b58\u5728\u7684\u5bf9\u8c61/\u5b9e\u4f8b # \u5c06\u7c7b\u6bd4\u55bb\u6210\u4e00\u4e2a\u5de5\u5382,\u8c03\u7528\u4e00\u6b21\u7c7b\u5c31\u4e0b\u53d1\u4e00\u4e2a\u751f\u4ea7\u6307\u4ee4,\u4ea7\u751f\u4e00\u4e2a\u5bf9\u8c61 # stu1 stu2 stu3\u662f\u4e09\u4e2a\u5bf9\u8c61 id\u4e0d\u4e00\u6837 stu1 = OldboyStudent () # <__main__.OldboyStudent object at 0x7fd993f1da90> stu2 = OldboyStudent () # <__main__.OldboyStudent object at 0x7fd993f1daf0> stu3 = OldboyStudent () # <__main__.OldboyStudent object at 0x7fd993f1dac0> \u7075\u9b42\u4e09\u95ee: 1> \u7c7b\u7684\u5b9e\u4f8b\u5316\u8fc7\u7a0b\u4e2d\u53d1\u751f\u4e86\u54ea\u4e9b\u4e8b? 2> \u901a\u8fc7\u5b9e\u4f8b\u5316\u9020\u7684stu1\u3001stu2\u3001stu3\u4e09\u4e2a\u5bf9\u8c61\u5168\u90fd\u4e00\u6837,\u5bf9\u8c61\u662f\u9664\u4e86\u6709\u76f8\u4f3c\u7684\u7279\u5f81\u4e0e\u6280\u80fd\u4ee5\u5916,\u8fd8\u5e94\u8be5\u6709\u81ea\u5df1\u72ec\u6709\u7684\u7279\u5f81,\u90a3\u5982\u4f55\u5728\u5b9e\u4f8b\u5316\u7684\u8fc7\u7a0b\u4e2d\u4e3a\u5bf9\u8c61\u5b9a\u5236\u81ea\u5df1\u72ec\u6709\u7684\u7279\u5f81\uff1f 3> \u7a0b\u5e8f\u4e2d\u7684\u5bf9\u8c61\u5230\u5e95\u662f\u4ec0\u4e48,\u5982\u4f55\u4f7f\u7528\uff1f Q:OldboyStudent() \u7c7b\u52a0\u62ec\u53f7\u662f\u8fd0\u884c\u7c7b\u4e2d\u7684\u4ee3\u7801\uff1f A: \u9519\uff01\uff01 \u7c7b\u4e2d\u7684\u4ee3\u7801\u5728\u5b9a\u4e49\u9636\u6bb5\u5c31\u6267\u884c\u5566..","title":"\u2606\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/0_OOP%E5%9F%BA%E6%9C%AC/#_7","text":"\u5b9e\u4f8b\u5316\u7684\u4e00\u4e2a\u4e2a\u5bf9\u8c61\u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u4e2a\u4e2a\u540d\u79f0\u7a7a\u95f4(\u653e\u540d\u5b57\u7684!)... \u5bf9\u8c61\u7684\u540d\u79f0\u7a7a\u95f4 \u662f\u7528\u6765\u5b58\u653e\u5bf9\u8c61\u81ea\u5df1 \u72ec\u6709\u7684 \u540d\u5b57\\\u5c5e\u6027 \u7c7b\u4e2d\u5b58\u653e\u7684\u662f\u5bf9\u8c61\u4eec\u5171\u6709\u7684\u5c5e\u6027,\u5176\u4e2d\u5305\u542b\u6570\u636e\u5c5e\u6027\u548c\u51fd\u6570\u5c5e\u6027. __init__ \u4e0d\u662f\u7528\u6765\u9020\u5bf9\u8c61\u7684,\u662f\u7528\u6765\u521d\u59cb\u5316\u5bf9\u8c61\u7684. \u662f\u5728\u7c7b\u9020\u5b8c\u7a7a\u5bf9\u8c61\u540e\u624d\u89e6\u53d1\u7684.","title":"\u5b9e\u4f8b\u5316\u5bf9\u8c61"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/0_OOP%E5%9F%BA%E6%9C%AC/#__init__","text":"1> \u521b\u5efa\u5b9e\u4f8b\u5316\u5bf9\u8c61 \u540e ,\u4e3a\u5b83\u5b9a\u5236\u72ec\u6709\u7684\u7279\u5f81.. class OldboyStudent (): school = 'oldboy' # -- \u6570\u636e\u5c5e\u6027 def choose_course ( self ): # -- \u51fd\u6570\u5c5e\u6027 print ( 'is choosing course..' ) # -- \u5f00\u8f9f\u51fa\u4e24\u4e2a\u72ec\u7acb\u7684\u540d\u79f0\u7a7a\u95f4 stu1 stu2 stu1 = OldboyStudent () stu2 = OldboyStudent () # -- \u4e3a\u5b9e\u4f8b\u5316\u5bf9\u8c61\u5b9a\u5236\u72ec\u6709\u7684\u7279\u5f81 stu1 . name = '\u5c0f\u660e' stu1 . age = 18 stu2 . name = '\u5c0f\u7ea2' stu2 . age = 19 \"\"\" def init(obj,x,y): obj.name = x obj.age = y init(stu1,'\u5c0f\u660e',18) init(stu2,'\u5c0f\u7ea2',19) \"\"\" # -- \u67e5\u770bstu1\u548cstu2\u540d\u79f0\u7a7a\u95f4\u91cc\u7684\u540d\u5b57 print ( stu1 . __dict__ ) # {'name': '\u5c0f\u660e', 'age': 18} print ( stu2 . __dict__ ) # {'name': '\u5c0f\u7ea2', 'age': 19} # -- \u7c7b\u7684\u540d\u79f0\u7a7a\u95f4\u4e2d\u5b58\u653e\u7684\u662f\u5bf9\u8c61\u4eec\u5171\u6709\u7684\u5c5e\u6027 print ( OldboyStudent . school ) # oldboy print ( stu1 . school ) # oldboy print ( stu2 . school ) # oldboy 2> \u5b9e\u4f8b\u5316\u7684 \u8fc7\u7a0b\u4e2d ,\u5b9a\u5236\u5bf9\u8c61\u72ec\u6709\u7684\u7279\u5f81. \u8c03\u7528\u7c7b OldboyStudent() \u4ea7\u751f\u5bf9\u8c61\u8fc7\u7a0b\u4e2d\u53d1\u751f\u4e86\u4e24\u4ef6\u4e8b : step1 :\u8c03\u7528\u7c7b\u521b\u5efa\u4e86\u4e00\u4e2a\u7a7a\u5bf9\u8c61 '\u7a7a\u7684\u540d\u79f0\u7a7a\u95f4' {} \u200b step2 :\u81ea\u52a8\u89e6\u53d1\u7c7b\u4e2d__init__\u529f\u80fd\u7684\u6267\u884c, \u5c06\u7a7a\u5bf9\u8c61\u4f20\u7ed9self\u53c2\u6570 \u200b \u56e0\u800c\u8c03\u7528\u7c7b\u65f6\u4ec5\u9700\u4f20\u5165x,y\u4e24\u4e2a\u53c2\u6570 self\u53c2\u6570\u4e0d\u7528\u4f20,python\u81ea\u52a8\u5e2e\u6211\u4eec\u4f20\u5566. \u6ce8\u610f\u54e6, __init__ \u65b9\u6cd5\u5185\u53ef\u4ee5\u6709\u4efb\u610f\u7684python\u4ee3\u7801,\u4f46\u4e00\u5b9a\u4e0d\u80fd\u6709\u975eNone\u7684\u8fd4\u56de\u503c\uff01\uff01 class OldboyStudent (): school = 'oldboy' # -- \u4f1a\u5728\u8c03\u7528\u7c7b\u65f6\u81ea\u52a8\u89e6\u53d1 \u521d\u59cb\u5316\u65b9\u6cd5__init__ def __init__ ( self , x , y ): self . name = x # stu1.name = '\u5c0f\u660e' self . age = y # stu1.age = 18 def choose_course ( self ): print ( 'is choosing course..' ) stu1 = OldboyStudent ( '\u5c0f\u660e' , 18 ) # OldboyStudent('stu1','\u5c0f\u660e',18) print ( stu1 . __dict__ ) # {'name': '\u5c0f\u660e', 'age': 18}","title":"\u2606__init__"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/0_OOP%E5%9F%BA%E6%9C%AC/#_8","text":"\u5148\u4ece\u5bf9\u8c61\u81ea\u5df1\u7684\u540d\u79f0\u7a7a\u95f4\u627e, \u6ca1\u6709\u5219\u53bb\u7c7b\u4e2d\u627e, \u82e5\u7c7b\u4e2d\u4e5f\u6ca1\u6709, \u5219\u62a5\u9519 x = 1 class A : print ( '...' ) a = A () print ( a . x ) # \u62a5\u9519:'A' object has no attribute 'x' \uff08\u6700\u540e\u662f\u5728\u7c7b\u4e2d\u627e\u7684\uff09 [ \u5c0f\u63d2\u66f2 ] \u7528\u4ee3\u7801\u5b9e\u73b0\u8bb0\u5f55\u4e00\u5171\u5b9e\u4f8b\u5316\u7684\u6b21\u6570. \u5206\u6790: \u8fd9\u6837\u601d\u8003 \u6240\u6709\u7684\u5bf9\u8c61\u90fd\u770b\u5f97\u5230\u7684\u4e14\u503c\u90fd\u662f\u4e00\u6837\u7684,\u8fd9\u5f97\u662f\u4e2a\u7c7b\u5c5e\u6027. class OldboyStudent (): school = 'oldboy' count = 0 def __init__ ( self , x , y ): self . name = x self . age = y OldboyStudent . count += 1 # !!!(\u00b4\u25bd\uff40) stu1 = OldboyStudent ( '\u5c0f\u660e' , 18 ) stu2 = OldboyStudent ( '\u5c0f\u7ea2' , 19 ) print ( stu1 . count ) # 2 assert stu1 . count is stu2 . count is OldboyStudent . count OldboyStudent . count = 11 # -- \u7c7b\u7684\u6570\u636e\u5c5e\u6027\u88ab\u4fee\u6539\u4e86.. stu3 = OldboyStudent ( '\u5c0f\u5ddd' , 20 ) print ( stu1 . count , stu2 . count , stu3 . count , OldboyStudent . count ) # 12 12 12 12","title":"\u2606\u5c5e\u6027\u67e5\u627e"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/0_OOP%E5%9F%BA%E6%9C%AC/#_9","text":"\u7c7b\u540d\u79f0\u4e2d\u5b9a\u4e49\u7684\u6570\u636e\u5c5e\u6027\u548c\u51fd\u6570\u5c5e\u6027\u90fd\u662f\u5171\u4eab\u7ed9\u6240\u6709\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7528\u7684 \u5bf9\u8c61\u540d\u79f0\u7a7a\u95f4\u4e2d\u5b9a\u4e49\u7684 [\u53ea\u6709] \u6570\u636e\u5c5e\u6027 ,\u800c\u4e14\u662f\u5bf9\u8c61\u72ec\u6709\u7684\u6570\u636e\u5c5e\u6027,\u53ea\u6709\u5b9e\u4f8b\u5316\u5bf9\u8c61\u81ea\u5df1\u53ef\u4ee5\u770b\u89c1. \u7c7b\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u662f\u7c7b\u7684\u51fd\u6570\u5c5e\u6027,\u7c7b\u53ef\u4ee5\u4f7f\u7528,\u4f46\u4f7f\u7528\u7684\u5c31\u662f\u4e00\u4e2a\u666e\u901a\u7684\u51fd\u6570\u800c\u5df2. \u610f\u5473\u7740\u9700\u8981\u5b8c\u5168\u9075\u5faa\u51fd\u6570\u53c2\u6570\u89c4\u5219.\u8be5\u4f20\u51e0\u4e2a\u53c2\u6570\u5c31\u4f20\u51e0\u4e2a\u53c2\u6570. \u7c7b\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u662f\u53ef\u5171\u4eab\u7ed9\u6240\u6709\u5bf9\u8c61\u7684. \u5b9e\u4f8b\u5316\u5bf9\u8c61\u4e5f\u53ef\u4ee5\u4f7f\u7528,\u800c\u4e14\u662f\u4ee5\u7ed1\u5b9a\u7684\u65b9\u5f0f\u7ed9\u5bf9\u8c61\u7528 [ \u7ed1\u5b9a\u7684\u6548\u679c ] eg: \u7ed1\u5b9a\u7ed9stu1,\u5c31\u7531stu1\u6765\u8c03\u7528,\u8c03\u7528\u65f6\u4f1a\u5c06stu1\u5f53\u4f5c\u7b2c\u4e00\u4e2a\u53c2\u6570\u81ea\u52a8\u4f20\u5165 Ps: __init__ \u662f\u5728\u8c03\u7528\u7c7b\u65f6\u81ea\u52a8\u89e6\u53d1,\u5b9e\u5219\u4e5f\u662f\u89e6\u53d1\u4e86\u4e00\u4e2a\u7ed1\u5b9a\u65b9\u6cd5\u6267\u884c,self\u624d\u4f1a\u81ea\u52a8\u4f20\u5165. class OldboyStudent (): school = 'oldboy' def __init__ ( self , x , y ): self . name = x self . age = y def choose_course ( self , x ): print ( ' %s \u6b63\u5728\u9009\u8bfe' % self ) stu1 = OldboyStudent ( '\u5c0f\u660e' , 18 ) stu2 = OldboyStudent ( '\u5c0f\u7ea2' , 19 ) stu3 = OldboyStudent ( '\u5c0f\u5ddd' , 20 ) # \u7c7b\u8bbf\u95ee -- function\u65b9\u6cd5 # <function OldboyStudent.choose_course at 0x7fcac28599d0> print ( OldboyStudent . __dict__ [ 'choose_course' ]) # <function OldboyStudent.choose_course at 0x7fcac28599d0> print ( OldboyStudent . choose_course ) # \u5bf9\u8c61\u8bbf\u95ee -- bound method\u7ed1\u5b9a\u65b9\u6cd5 # <__main__.OldboyStudent object at 0x7fcac285aa90> !!! print ( stu1 ) # <bound method OldboyStudent.choose_course of <__main__.OldboyStudent object at 0x7fcac285aa90>> !!! \u6307\u660e\u4e86\u7ed1\u5b9a\u5230\u54ea\u4e2a\u65b9\u6cd5,\u4ee5\u53ca\u54ea\u4e2a\u5bf9\u8c61\u53bb\u7ed1\u5b9a.. print ( stu1 . choose_course ) # <class '__main__.OldboyStudent'> print ( OldboyStudent ) print ( hex ( id ( OldboyStudent ))) # 0x7fcac28599d0 # 7fcac286b0f0 print ( ' %x ' % id ( OldboyStudent . school )) print ( ' %x ' % id ( stu1 . school )) print ( ' %x ' % id ( stu2 . school )) \"\"\" \u5148\u660e\u767d\u4e00\u70b9 `\u5bf9\u8c61.\u65b9\u6cd5`\u8bbf\u95ee\u5230\u7684\u662f\u65b9\u6cd5\u7684\u5185\u5b58\u5730\u5740 `\u5bf9\u8c61.\u65b9\u6cd5()`\u65b9\u6cd5\u8fd0\u884c \u5f88\u795e\u5947\u554a,`\u5b9e\u4f8b\u5316\u65b9\u6cd5.\u7c7b\u4e2d\u7684\u65b9\u6cd5`\u7684id\u5c45\u7136\u8ddf`\u7c7b.\u540c\u4e00\u65b9\u6cd5`\u7684id\u4e0d\u4e00\u6837.. \u6709\u4e00\u79cd\u89e3\u91ca\u662f\u8fd9\u6837\u7684: \u5b9e\u4f8b\u5316\u5bf9\u8c61\u540e,Python\u7f16\u8f91\u5668\u4f1a\u5c06\u7c7b\u65b9\u6cd5\u7684\u5bf9\u8c61\u91cd\u65b0\u4f7f\u7528\u63cf\u8ff0\u5668\u5305\u88c5\u4e00\u4e0b,\u7136\u540e\u5b58\u50a8\u5230\u4e00\u4e2a\u65b0\u7684\u5185\u5b58\u7a7a\u95f4,\u5728\u8c03\u7528\u7684\u8fc7\u7a0b\u4e2d,Python\u5185\u90e8\u4f1a\u5bf9Person.__dict__['choose_course']\u505a\u4e00\u6b21\u62f7\u8d1d,\u6240\u4ee5\u6211\u4eec\u76f8\u5f53\u4e8e\u8c03\u7528\u7684\u53ea\u662f\u65b9\u6cd5\u7684\u526f\u672c. Python\u91c7\u7528\u7684\u662f\u5783\u573e\u56de\u6536\u7684\u673a\u5236,\u5f53\u4e00\u4e2a\u5185\u5b58,\u6ca1\u6709\u5bf9\u8c61\u5bf9\u5176\u5f15\u7528\u7684\u8bdd,\u5c31\u4f1a\u7acb\u523b\u9500\u6bc1\u8fd9\u5757\u5185\u5b58\u7136\u540e\u5bf9\u5176\u590d\u7528. obj = stu2.choose_course \u662f\u4e3a\u4e86\u9632\u6b62\u7f16\u8bd1\u5668\u5bf9choose_course\u7acb\u523b\u9500\u6bc1 \"\"\" print ( hex ( id ( OldboyStudent . choose_course ))) # 0x7fcac28599d0 print ( hex ( id ( stu1 . choose_course ))) # 0x7fcabf65dc80 print ( hex ( id ( stu2 . choose_course ))) # 0x7fcabf65dc80 obj = stu2 . choose_course print ( hex ( id ( obj ))) # 0x7fcabf65dc80 print ( hex ( id ( stu3 . choose_course ))) # 0x7fc654f1bf80 \u4e0d\u4e00\u6837\u5566\uff01 \"\"\" \u4e0d\u60f3\u7ea0\u7ed3\u4e86(\uffe3O\uffe3;)..\u7c97\u7565\u7684\u5c31\u4e0d\u770bid.\u7b80\u5355\u7684\u7406\u89e3\u5c31\u662f\u6307\u5411\u540c\u4e00\u4e2a\u5bf9\u8c61,\u53ea\u4e0d\u8fc7\u5e95\u5c42\u5185\u90e8\u7684\u8fc7\u7a0b\u6709\u70b9\u66f2\u6298.. \"\"\" # \u5c06stu1\u5bf9\u8c61\u4f20\u7ed9\u4e86choose_course\u7684self\u53c2\u6570 # \u4e0b\u9762\u4e24\u4e2a\u5199\u6cd5\u6548\u679c\u4e00\u81f4.. stu1 . choose_course ( 123 ) OldboyStudent . choose_course ( stu1 , 123 ) \u7ed1\u5b9a\u65b9\u6cd5\u4e0e\u51fd\u6570\u7684\u533a\u522b : \u7b80\u5355\u6765\u8bf4, \u51fd\u6570\u6b63\u513f\u516b\u7ecf\u7684\u8be5\u4f20\u51e0\u4e2a\u503c\u4f20\u51e0\u4e2a\u503c;\u7ed1\u5b9a\u65b9\u6cd5\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e0d\u7528\u4f20,\u4f1a\u5c06\u7ed1\u5b9a\u8005\u81ea\u52a8\u4f20\u8fdb\u53bb... \u7c7b\u6765\u8c03\u7528\u5c31\u662f\u666e\u901a\u51fd\u6570, \u5b9e\u4f8b\u5316\u5bf9\u8c61\u6765\u8c03\u7528\u5c31\u662f\u7ed1\u5b9a\u65b9\u6cd5.","title":"\u2606\u7ed1\u5b9a\u65b9\u6cd5"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/0_OOP%E5%9F%BA%E6%9C%AC/#_10","text":"\u7c7b\u5bf9\u8c61\u3001\u5b9e\u4f8b\u5316\u5bf9\u8c61\u5c31\u662f\u4e00\u4e2a\u5b58\u6570\u636e/\u5c5e\u6027\u7684\u5bb9\u5668\uff01 \u5bf9\u8c61 -- \u540d\u79f0\u7a7a\u95f4 -- \u653e\u540d\u5b57 -- \u540d\u5b57:id(\u6570\u636e) -- \u6570\u636e'\u4e5f\u79f0x\u4f5c\u5c5e\u6027' \u5bf9\u4e8e\u7c7b\u5bf9\u8c61\u800c\u8a00, \u5c5e\u6027 = \u6570\u636e\u5c5e\u6027 '\u5373\u7279\u5f81' + \u51fd\u6570\u5c5e\u6027 '\u5373\u529f\u80fd' \u8fd9\u4e9b\u5c5e\u6027\u662f\u5b9e\u4f8b\u5316\u5bf9\u8c61\u5171\u4eab\u7684. \u5bf9\u4e8e\u5b9e\u4f8b\u5316\u5bf9\u8c61\u800c\u8a00, \u5c5e\u6027\u5c31\u662f\u81ea\u5df1\u72ec\u6709\u7684\u7279\u5f81. \u5b9e\u4f8b\u5316\u5bf9\u8c61\u53ef\u4ee5\u8c03\u7528\u7c7b\u5bf9\u8c61\u4e2d\u7684\u5c5e\u6027. \u6269\u5c55\u5f00\u6765\u8bb2,\u5f97\u5230\u4e00\u4e2a\u5b9e\u4f8b\u5316\u5bf9\u8c61,\u4e0d\u4ec5\u5f97\u5230\u4e00\u5806\u6570\u636e\u5c5e\u6027(\u81ea\u5df1\u72ec\u6709\u7684+\u7c7b\u5bf9\u8c61\u91cc\u7684),\u8fd8\u80fd\u5f97\u5230\u4e13\u95e8\u5904\u7406\u8fd9\u4e9b\u6570\u636e\u5c5e\u6027\u7684\u65b9\u6cd5(\u7c7b\u5bf9\u8c61\u91cc\u7684\u51fd\u6570\u5c5e\u6027)\uff01 \u6ce8\u610f\u54e6,\u5230\u76ee\u524d\u4e3a\u6b62,\u7c7b\u91cc\u9762\u7684\u51fd\u6570\u5c5e\u6027\u53ea\u6d89\u53ca\u5230\u4e86\u5e26\u6709self\u53c2\u6570\u7684\u65b9\u6cd5. \u6240\u4ee5,\u6211\u4eec\u5728\u8fd9\u91cc\u53ef\u4ee5\u8bf4(\u4e25\u8c28\u4e00\u70b9),\u7c7b\u5bf9\u8c61\u91cc\u7684\u51fd\u6570\u5c5e\u6027\u5c31\u662f\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684 \u7ed1\u5b9a\u65b9\u6cd5 . \u5b9e\u4f8b\u5316\u5bf9\u8c61\u8c03\u7528\u7ed1\u5b9a\u65b9\u6cd5\u4f1a\u5c06\u5b9e\u4f8b\u5316\u5bf9\u8c61\u81ea\u52a8\u4f20\u5165,\u4f5c\u4e3aself\u53c2\u6570\u7684\u503c","title":"\u5c0f\u7ed3"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/0_OOP%E5%9F%BA%E6%9C%AC/#_11","text":"\u4e3e\u4e2a\u6817\u5b50: \u5728python3\u4e2d\u7edf\u4e00\u4e86\u7c7b\u4e0e\u7c7b\u578b\u7684\u6982\u5ff5, \u7c7b\u5c31\u662f\u7c7b\u578b \u5e38\u89c1\u7684\u7c7b\u578b: \u5b57\u7b26\u4e32 \u5143\u7956 \u5217\u8868... \u5185\u7f6e\u51fd\u6570 type(obj) \u53ef\u4ee5\u67e5\u770b\u8be5\u5bf9\u8c61\u5c5e\u4e8e\u54ea\u79cd\u7c7b\u578b. class Foo : # \u81ea\u5b9a\u4e49\u7684\u7c7b \u6216\u8bf4\u662f \u81ea\u5b9a\u4e49\u7684\u6570\u636e\u7c7b\u578b def func1 ( self , x ): print ( '\u7ed1\u5b9a\u65b9\u6cd5..' ) f = Foo () print ( f ) # <__main__.Foo object at 0x7f98df9c7ee0> print ( type ( f )) # <class '__main__.Foo'> f . func1 ( 123 ) # \u7ed1\u5b9a\u65b9\u6cd5.. -- \u53ef\u4ee5\u5199\u6210 Foo.func1(f,123) Foo . func1 ( f , 123 ) # \u7ed1\u5b9a\u65b9\u6cd5.. >>> list # -- \u7c7b\u578blist\u5c31\u662f\u7c7blist < class ' list '> # -- \u53ef\u4ee5\u5199\u6210my_list = list([1,2,3]) # \u5373\u7c7blist\u5b9e\u4f8b\u5316\u4e86\u4e00\u4e2a\u540d\u4e3amy_list\u7684\u5bf9\u8c61 >>> my_list = [ 1 , 2 , 3 ] >>> type ( my_list ) < class ' list '> >>> other_list = [ 4 , 5 , 6 ] \"\"\" \u5b9e\u4f8b\u5316\u5bf9\u8c61my_list\u8fd8\u6709\u4e13\u95e8\u64cd\u4f5c\u5217\u8868\u6570\u636e\u7c7b\u578b\u7684\u4e00\u7cfb\u5217\u65b9\u6cd5 eg:\u5f80my_list\u5217\u8868\u91cc\u52a0\u4e00\u4e2a\u503c`4`,\u8be5\u503c\u52a0\u5230\u7684\u662fmy_list\u8fd9\u4e00\u5217\u8868\u4e2d,\u800c\u4e0d\u662fother_list\u5217\u8868 \u518d\u6b21\u9a8c\u8bc1\u8bf4\u660e,[\u7ed1\u5b9a\u65b9\u6cd5\u7ed1\u5b9a\u7ed9\u8c01,\u5c31\u5e94\u8be5\u7531\u8c01\u6765\u8c03\u7528,\u8c01\u6765\u8c03\u7528\u5c31\u64cd\u4f5c\u7684\u662f\u8c01.] \"\"\" >>> my_list . append # -- my_list\u7684\u7ed1\u5b9a\u65b9\u6cd5append \u4f1a\u81ea\u52a8\u4f20\u503c < built - in method append of list object at 0x7fd8aaf7d8c0 > >>> my_list . append ( 4 ) # -- \u53ef\u4ee5\u5199\u6210list.append(my_list,4) \u4e13\u95e8\u7528\u4e8e\u68c0\u67e5\u6570\u636e\u7c7b\u578b\u7684\u65b9\u6cd5: isinstance , \u5145\u5206\u4f53\u73b0\u4e86python\u5904\u5904\u7686\u5bf9\u8c61! # -- isinstance(obj,cls) \u68c0\u67e5obj\u662f\u5426\u662f\u7c7b cls \u7684\u4e00\u4e2a\u5b9e\u4f8b # -- issubclass(sub, super) \u68c0\u67e5sub\u7c7b\u662f\u5426\u662f super \u7c7b\u7684\u6d3e\u751f\u7c7b/\u5b50\u7c7b class Foo : pass class Sub ( Foo ): pass obj = Foo () print ( isinstance ( obj , Foo )) # True print ( issubclass ( Sub , Foo )) # True print ( issubclass ( Foo , object )) # True print ( issubclass ( Sub , object )) # True # -- python3\u4e2d\u7edf\u4e00\u4e86\u7c7b\u4e0e\u7c7b\u578b\u7684\u6982\u5ff5 d = { 'x' : 1 } # -- \u672c\u8d28\u4e0a\u662f d = dict({'x':1}) print ( isinstance ( d , dict )) # -- \u4e0d\u5efa\u8bae\u7528`type(d) is dict`\u6765\u5224\u65ad","title":"\u2606\u7c7b\u5c31\u662f\u7c7b\u578b"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/0_OOP%E5%9F%BA%E6%9C%AC/#_12","text":"\u7a0b\u5e8f = \u6570\u636e + \u5904\u7406\u6570\u636e\u7684\u529f\u80fd ; \u7a0b\u5e8f\u4f7f\u7528\u529f\u80fd\u8fd0\u4f5c\u8d77\u6765,\u5c31\u662f\u4e00\u7cfb\u5217\u7684\u6570\u636e\u5728\u53d1\u751f\u53d8\u5316. \u9762\u5411\u8fc7\u7a0b\u4e2d\u7684\u51fd\u6570 \u5c06\u7a0b\u5e8f\u7684\u529f\u80fd\u8fdb\u884c\u4e86\u6574\u5408 .. (\u6570\u636e\u6ca1\u6709\u6574\u5408) \u9762\u5411\u5bf9\u8c61\u4e2d\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61 \u5c06\u6570\u636e\u4ee5\u53ca\u4e13\u95e8\u5904\u7406\u8fd9\u5806\u6570\u636e\u7684\u529f\u80fd\u4f5c\u4e86\u6574\u5408 .. (\u6574\u5408\u7a0b\u5ea6\u8fdb\u4e00\u6b65\u5347\u7ea7) \u6bd4\u5982: \u7ed9\u4e00\u4e2a\u5217\u8868,\u5f97\u5230\u7684\u4e0d\u4ec5\u4ec5\u662f\u5217\u8868\u6570\u636e, \u8fd8\u6709append insert\u7b49\u7b49\u7ed1\u5b9a\u65b9\u6cd5. \u5f3a\u8c03!!! \u5b9e\u4f8b\u5316\u5bf9\u8c61\u662f\u4e00\u4e2a\u9ad8\u5ea6\u6574\u5408\u7684\u4ea7\u7269,\u6574\u5408\u6570\u636e( \u81ea\u5df1\u72ec\u6709\u7684+\u4e0e\u5176\u5b83\u5b9e\u4f8b\u5316\u5bf9\u8c61\u5171\u6709\u7684 )\u4e0e\u4e13\u95e8\u64cd\u4f5c\u8be5\u6570\u636e\u7684\u65b9\u6cd5[ \u8be5\u65b9\u6cd5\u79f0\u4e3a\u7ed1\u5b9a\u65b9\u6cd5 ]\uff01 \u5177\u4f53\u6f14\u53d8\u5982\u4e0b: # --- 1.\u5728\u9762\u5411\u8fc7\u7a0b\u4e2d,\u6570\u636e\u4e0e\u529f\u80fd\u662f\u5206\u79bb\u7684\uff01 # fun1\u548cfunc2\u90fd\u4f1a\u7528\u5230a,b,c\u53d8\u91cf\u7684\u503c def func1 ( a , b , c , sql ): print ( a , b , c , sql ) def func2 ( a , b , c , host ): print ( a , b , c , host ) \"\"\" \u6bcf\u6b21\u8c03\u7528\u90fd\u8981\u91cd\u590d\u4f20\u5165\u4e00\u4e9b\u53c2\u6570.. \u7528\u9ed8\u8ba4\u53c2\u6570\u89e3\u51b3??\u4e00\u4e2a\u51fd\u6570\u7684\u53c2\u6570\u7ecf\u5e38\u4f1a\u7528\u5230\u67d0\u4e00\u53c2\u6570\u503c\u65f6\u624d\u4f1a\u4e3a\u8be5\u53c2\u6570\u8bbe\u7f6e\u4e3a\u9ed8\u8ba4\u53c2\u6570 \u4e3a\u4e24\u51fd\u6570\u90fd\u8bbe\u7f6e\u9ed8\u8ba4\u53c2\u6570\uff1f\uff1f\u4e0d\u59a5 \u8fd9\u4e0d\u8fd8\u662f\u5728\u505a\u91cd\u590d\u64cd\u4f5c\u561b\uff01 \u6b63\u786e\u6253\u5f00\u65b9\u5f0f:\u5b9a\u4e49\u5168\u5c40\u53d8\u91cf func1,func2\u5c31\u53ef\u4ee5\u5171\u7528a,b,c\u5566 \"\"\" func1 ( 1 , 2 , 3 , 'select * from tb3;' ) func2 ( 1 , 2 , 3 , '192.168.0.1' ) # -- 2.\u5b9a\u4e49\u5168\u5c40\u53d8\u91cf # fun1\u548cfunc2\u90fd\u4f1a\u7528\u5230a,b,c\u53d8\u91cf\u7684\u503c # fun3\u548cfun4\u90fd\u4f1a\u7528\u5230d,e\u53d8\u91cf\u7684\u503c a , b , c = 1 , 2 , 3 d , e = 44 , 55 def func1 ( sql ): pass def func2 ( host ): pass def func3 ( xxx ): pass def func4 ( yyy ): pass \"\"\" a,b,c\u7684\u672c\u610f\u662f\u53ea\u7ed9func1\u548cfunc2\u7528,\u4f46fun3,fun4\u4e5f\u80fd\u8bbf\u95ee\u7684\u5230 \u540c\u7406d,e\u7684\u672c\u610f\u662f\u53ea\u7ed9func3\u548cfunc4\u7528,\u4f46fun1,fun2\u4e5f\u80fd\u8bbf\u95ee\u7684\u5230 \u56e0\u4e3a\u8fd9\u4e9b\u5168\u5c40\u53d8\u91cf,\u5e76\u4e0d\u96b6\u5c5e\u4e8e\u67d0\u51e0\u4e2a\u529f\u80fd,\u80fd\u88ab\u6240\u6709\u529f\u80fd\u4f7f\u7528 \u6240\u4ee5\u8fd9\u4e9b\u5168\u5c40\u53d8\u91cf\u5168\u90e8\u8026\u5408\u5728\u4e00\u8d77,\u6ca1\u6709\u505a\u533a\u5206.\u6574\u5408\u7a0b\u5ea6\u4ecd\u7136\u4e0d\u9ad8,\u89e3\u8026\u5408\u7a0b\u5ea6\u4e0d\u9ad8, \"\"\" func1 ( 'select * from tb3;' ) func2 ( '192.168.0.1' ) # -- 3.\u7c7b # \u5b9e\u4f8b\u5316\u5bf9\u8c61\u662f\u4e00\u4e2a\u9ad8\u5ea6\u6574\u5408\u7684\u4ea7\u7269,\u6574\u5408\u6570\u636e\u4e0e\u4e13\u95e8\u64cd\u4f5c\u8be5\u6570\u636e\u7684\u65b9\u6cd5\uff01 class Foo : def __init__ ( self , a , b , c ): self . a = a self . b = b self . c = c def func1 ( self , sql ): print ( self . a , self . b , self . c , sql ) def func2 ( self , host ): print ( self . a , self . b , self . c , host ) class Bar : def __init__ ( self , d , e ): self . d = d self . e = e def func3 ( self , xxx ): print ( self . d , self . e , xxx ) def func4 ( self , yyy ): print ( self . d , self . e , yyy ) foo = Foo ( 1 , 2 , 3 ) foo . func1 ( 'select * from tb3;' ) foo . func2 ( '192.168.0.1' ) bar = Bar ( 44 , 55 ) bar . func3 ( '(\u00b4\u25bd\uff40)' ) bar . func4 ( '(\uffe3\u25bd\uffe3)' )","title":"\u2606\u6570\u636e\u4e0e\u529f\u80fd\u7684\u6574\u5408"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/10_%E5%A4%8D%E4%B9%A0/","text":"\u53ea\u6709\u6211\u770b\u5f97\u61c2\u7684\u590d\u4e60\u7b14\u8bb0.Hhh \u7c7b\u7684\u5b9a\u4e49 \u00b6 \u5b9a\u4e49\u7c7b \u7c7b\u4f3c\u4e8e ` import \u6a21\u5757\u540d ` \u5bfc\u5165\u6a21\u5757\u4f1a\u521b\u5efa\u4e00\u4e2anamescope. \u901a\u8fc7 \u6a21\u5757\u540d.\u5c5e\u6027\u540d \u4ecenamescope\u4e2d\u53d6\u5c5e\u6027/\u53d8\u91cf. \u540c\u7406! \u4ece\u4e0a\u5f80\u4e0b\u8fd0\u884c\u5230class\u5b9a\u4e49\u7684\u7c7b\u4ee3\u7801,\u4f1a\u5f00\u8f9f\u4e00\u4e2a\u7c7b\u7684namescope,\u5c06\u7c7b\u4e2d\u7684\u53d8\u91cf\u548c\u65b9\u6cd5/\u51fd\u6570\u5f80namescope\u4e2d\u4e22. \u2605 ( \u7c7b\u4e2d\u7684\u4ee3\u7801/\u7c7b\u4f53\u4ee3\u7801 \u5728\u5b9a\u4e49\u9636\u6bb5\u5c31\u6267\u884c\u5566!! ) \u2605 \u8bb0\u4f4f: \u6267\u884cpy\u6587\u4ef6\u3001\u6267\u884c\u5bfc\u5165\u6a21\u5757\u3001\u7c7b\u5b9a\u4e49\u3001\u7c7b\u7684\u5b9e\u4f8b\u5316/\u7c7b\u7684\u8c03\u7528\u3001\u51fd\u6570\u8c03\u7528\u7684\u4ee3\u7801\u65f6,\u4f1a\u5f00\u8f9fnamescope. \u7279\u522b\u6ce8\u610f,\u7c7b\u4e2d\u51fd\u6570\u4f53\u7684\u4ee3\u7801\u8981\u5728\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u624d\u4f1a\u6267\u884c! --------- | \u6570\u636e\u5c5e\u6027 \uff5c \u7c7b\u540d --> | \uff5c | \u51fd\u6570\u5c5e\u6027 \uff5c --------- \u7c7b\u540d\u6307\u5411\u7c7b\u7684namescope \u67e5\u770b\u7c7b\u7684namescope: \u7c7b\u540d.__dict__ \u7c7b\u540d.\u5c5e\u6027\u540d \u7b49\u540c\u4e8e \u7c7b\u540d.__dict__ [ \"\u5c5e\u6027\u540d\" ] \u2605 So,\u5bf9namescope\u7684CURD\u7684\u672c\u8d28\u5c31\u662f\u5728\u64cd\u4f5c\u5b57\u5178!! \u2605 ( \u7c7b\u7684\u5b9e\u4f8b\u662f\u4e00\u6837\u7684! \u67e5\u770b\u5b9e\u4f8b\u7684namescope: \u5b9e\u4f8b\u540d.__dict__ ) \u7c7b\u7684\u8c03\u7528/\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61 \u00b6 ` \u7c7b\u540d ([ __init__\u7684\u5f62\u53c2 ]) ` step 1 > \u9020\u5b9e\u4f8b -- \u8c03\u7528\u7c7b\u521b\u5efa\u4e00\u4e2a\u7a7a\u5bf9\u8c61/\u5b9e\u4f8b,\u4f1a\u4e3a\u8be5\u5b9e\u4f8b\u5f00\u8f9f\u4e00\u4e2a\u65b0\u7684namescope step 2 > \u521d\u59cb\u5316\u5b9e\u4f8b -- \u521b\u5efa\u5b8c\u5b9e\u4f8b\u540e,\u8be5\u5b9e\u4f8b\u4f1a\u81ea\u52a8\u8c03\u7528\u7c7b\u4e2d\u7684__init__\u529f\u80fd\u7684\u6267\u884c,\u5e76\u5c06\u81ea\u5df1\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570self\u7684\u5b9e\u53c2\u4f20\u5165 \u5f3a\u8c03: __init__\u662f\u7528\u6765\u521d\u59cb\u5316\u5b9e\u4f8b\u7684 ( \u4e3a\u5b9e\u4f8b\u5b9a\u5236\u72ec\u6709\u5c5e\u6027\u7684 ) ,\u4e0d\u662f\u9020\u5b9e\u4f8b\u7684 __init__\u7684\u51fd\u6570\u4f53\u4e2d\u53ef\u4ee5\u6709\u4efb\u610f\u4ee3\u7801,\u4f46\u552f\u72ec\u4e0d\u80fdreturn\u975eNone\u7684\u8fd4\u56de\u503c \u2605 \u7c7b\u7684namescope\u662f\u5b9e\u4f8b\u4eec\u5171\u4eab\u7684!! \u5b9e\u4f8b\u7684namescope\u4e2d\u53ea\u6709\u81ea\u4e2a\u513f\u72ec\u6709\u7684\u5c5e\u6027,\u53ea\u6709\u81ea\u5df1\u770b\u5f97\u89c1 \u2605 \u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u662f\u6570\u636e\u4e0e\u65b9\u6cd5\u9ad8\u5ea6\u6574\u5408\u7684\u4ea7\u7269! \u5c5e\u6027\u7684\u67e5\u627e/\u5c5e\u6027\u5f15\u7528 \u00b6 \u2605 \u5c5e\u6027\u5f15\u7528\u89c4\u5219 : \u5148\u4ece\u5bf9\u8c61\u81ea\u5df1\u7684\u540d\u79f0\u7a7a\u95f4\u627e , \u6ca1\u6709\u5219\u53bb\u7c7b ( \u7c7b - \u7236\u7c7b - \u76f4\u5230\u9876\u7ea7\u7236\u7c7bObject\u7c7b ) \u4e2d\u627e \u82e5\u90fd\u6ca1\u6709 , \u5219\u62a5\u9519 \u201c \u6b64\u5bf9\u8c61\u6ca1\u6709\u8be5\u5c5e\u6027 \u201d -- \u4e0d\u4f1a\u53bb\u5168\u5c40\u7a7a\u95f4\u627e ! \u2605 \u7c7b\u4e2d\u53d8\u91cf\u5f15\u7528\u7684\u89c4\u5219 : 1 > \u672a\u7ed1\u5b9a\u7684\u5c40\u90e8\u53d8\u91cf\u5c06\u5728\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u4e2d\u67e5\u627e 2 > \u5728\u7c7b\u4ee3\u7801\u5757\u4e2d\u5b9a\u4e49\u7684\u540d\u79f0\u7684\u4f5c\u7528\u57df / namescope\u4f5c\u7528\u8303\u56f4 , \u4e0d\u4f1a\u6269\u5c55\u5230\u65b9\u6cd5\u7684\u4ee3\u7801\u5757\u4e2d \u5305\u62ec\u5217\u8868\u63a8\u5bfc\u5f0f\u548c\u751f\u6210\u5668\u8868\u8fbe\u5f0f \u5373\u4f5c\u7528\u57df\u5d4c\u5957\u89c4\u5219\u9002\u7528\u4e8eLEGB , \u4e0d\u9002\u7528\u4e8e\u7c7b\u4e0e\u7c7b\u4e2d\u7684\u51fd\u6570 . Ps : \u53ef\u4ee5\u901a\u8fc7 obj . \u5c5e\u6027 -- \u5373\u5c5e\u6027\u5f15\u7528\u7684\u65b9\u5f0f\u6765\u8fdb\u884c\u8bbf\u95ee f1 = 0 a = 1 def m (): print ( 234 ) class Foo : b = 2 print ( f1 ) # 0 print ( Foo ) # -- NameError: name 'Foo' is not defined def f1 ( self ): print ( b ) def f2 ( self ): m () # -- \u5c40\u90e8\u4e2d\u6ca1\u6709m\u53d8\u91cf,\u4f1a\u5728\u5168\u5c40\u4e2d\u627e self . m () @staticmethod # -- \u9759\u6001\u65b9\u6cd5,\u610f\u5473\u7740\u4e0d\u4f1a\u81ea\u52a8\u7ed1\u5b9a\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61 def m (): print ( 123 ) print ( Foo . a ) # -- AttributeError: type object 'Foo' has no attribute 'a' print ( Foo () . a ) # -- AttributeError: 'Foo' object has no attribute 'a' Foo () . f1 () # -- NameError: name 'b' is not defined Foo () . f2 () # 234 # 123 \u2605 \u8fd9\u6837\u8bb0 !! Foo . a . \u524d\u9762\u5c5e\u4e8e < \u53d8\u91cf\u5f15\u7528 > , NameError ; . \u7684\u540e\u9762\u5c5e\u4e8e < \u5c5e\u6027\u5f15\u7528 > , AttributeError !! \u7ed1\u5b9a\u65b9\u6cd5\u4e0e\u975e\u7ed1\u5b9a\u65b9\u6cd5 \u00b6 self @classmethod\u4e0ecls @staticmethod \u2605 \u867d\u7136\u4e0d\u4e25\u8c28,\u4f46\u6211\u4eec\u53ef\u4ee5\u5927\u80c6\u7684\u8bf4: 1 > \u5b9e\u4f8b\u65b9\u6cd5 -- \u5b9e\u4f8b\u5bf9\u8c61\u8c03\u7528 \u7c7b\u4e2d\u4e0d\u52a0\u88c5\u9970\u5668\u7684\u51fd\u6570<\u9ed8\u8ba4>\u662f\u7ed1\u5b9a\u7ed9\u5b9e\u4f8b\u5316\u5bf9\u8c61\u4f7f\u7528\u7684 \u8be5\u51fd\u6570\u5fc5\u987b\u8981\u6709\u4e2a\u5f62\u53c2,\u7ea6\u5b9a\u662fself \u5b9e\u4f8b\u8c03\u7528\u65f6\u4f1a\u5c06\u5b9e\u4f8b\u81ea\u5df1\u4f5c\u4e3a\u51fd\u6570\u7b2c\u4e00\u4e2a\u5f62\u53c2self\u7684\u5b9e\u53c2 \"\u81ea\u52a8\u4f20\u5165\" 2 > \u7c7b\u65b9\u6cd5 -- \u7c7b\u5bf9\u8c61\u8c03\u7528 \u7c7b\u4e2d\u88ab\u88c5\u9970\u5668@classmethod\u88c5\u9970\u7684\u51fd\u6570<\u7ea6\u5b9a>\u662f\u7ed1\u5b9a\u7ed9\u7c7b\u5bf9\u8c61\u4f7f\u7528\u7684 \u8be5\u51fd\u6570\u5fc5\u987b\u8981\u6709\u4e2a\u5f62\u53c2,\u7ea6\u5b9a\u662fcls \u7c7b\u8c03\u7528\u65f6\u4f1a\u5c06\u7c7b\u81ea\u5df1\u4f5c\u4e3a\u51fd\u6570\u7b2c\u4e00\u4e2a\u5f62\u53c2cls\u7684\u5b9e\u53c2 \"\u81ea\u52a8\u4f20\u5165\" 3 > \u9759\u6001\u65b9\u6cd5 -- \u90fd\u53ef\u8c03\u7528 \u7c7b\u4e2d\u88ab\u88c5\u9970\u5668@staticmethod\u88c5\u9970\u7684\u51fd\u6570,<\u610f\u5473>\u7740\u7c7b\u5bf9\u8c61\u548c\u5b9e\u4f8b\u90fd\u53ef\u4ee5\u8c03\u7528 \u4f46\u6b64\u51fd\u6570\u5c31\u662f\u4e00\u4e2a\u666e\u901a\u51fd\u6570!!\u8c03\u7528\u65f6\u8be5\u51fd\u6570,\u8be5\u51fd\u6570\u6709\u591a\u5c11\u5f62\u53c2\u5c31\u5bf9\u5e94\u4f20\u591a\u5c11\u5b9e\u53c2 \u25b2 \u4f55\u4e3a\u51fd\u6570\u4f55\u4e3a\u65b9\u6cd5? \u51fd\u6570:\u6709\u51e0\u4e2a\u503c\u5c31\u4f20\u51e0\u4e2a\u503c. \u65b9\u6cd5:\u4f1a\u81ea\u52a8\u4f20\u503c,\u7ed1\u5b9a\u65b9\u6cd5\u3001\u9759\u6001\u65b9\u6cd5 ( \u4e25\u683c\u610f\u4e49\u4e0a\u6765\u5c06\u9759\u6001\u65b9\u6cd5\u662f\u51fd\u6570,\u6211\u4eec\u8fd9\u6837\u79f0\u547c\u7f62\u4e86! ) \u2605 \u6ce8\u610f: \u7c7b\u8c03\u7528\u5b9e\u4f8b\u65b9\u6cd5,\u5c31\u662f\u5728\u8c03\u7528\u666e\u901a\u7684\u51fd\u6570 \u5b9e\u4f8b\u5bf9\u8c61\u8c03\u7528\u7c7b\u65b9\u6cd5,\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u5165\u7684\u4ecd\u7136\u662f\u7c7b\u5bf9\u8c61 \u2605 \u6253\u5370\u4e0d\u540c\u5bf9\u8c61\u8bbf\u95ee\u7c7b\u4e2d\u65b9\u6cd5\u5c5e\u6027 ( \u5b9e\u4f8b\u65b9\u6cd5\u3001\u7c7b\u65b9\u6cd5\u3001\u9759\u6001\u65b9\u6cd5 ) \u7684\u7ed3\u679c: bound method -- \u5b9e\u4f8b\u548c\u7c7b\u8bbf\u95ee\u7c7b\u65b9\u6cd5\u3001\u5b9e\u4f8b\u8bbf\u95ee\u5b9e\u4f8b\u65b9\u6cd5 -- \u5c5e\u6027\u5f15\u7528 \"\u5f15\u7528\u7684\u662fPyMethodObject<\u65b9\u6cd5\u5bf9\u8c61>\" function -- \u5b9e\u4f8b\u548c\u7c7b\u8bbf\u95ee\u9759\u6001\u65b9\u6cd5\u3001\u7c7b\u8bbf\u95ee\u5b9e\u4f8b\u65b9\u6cd5 -- \u5c5e\u6027\u5f15\u7528 \"\u5f15\u7528\u7684\u662fPyFunctionObject<\u51fd\u6570\u5bf9\u8c61>\" \u2605 \u5373! \u51fd\u6570\u5b9a\u4e49: PyCodeObject + def == PyFunctionObject \"\u51fd\u6570\u5bf9\u8c61\" \u7c7b\u5b9a\u4e49: \u6709 \"self\" \u7279\u5f81\u7684PyFunctionObject \u5c06\u4e0e\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u8fdb\u884c\u7ed1\u5b9a \u8fdb\u5316\u4e3a PyMethodObject \"\u65b9\u6cd5\u5bf9\u8c61\" \u6709 \"@classmethod\" \u7279\u5f81\u7684PyFunctionObject \u5c06\u4e0e\u7c7b\u5bf9\u8c61\u8fdb\u884c\u7ed1\u5b9a \u8fdb\u5316\u4e3a PyMethodObject \"\u65b9\u6cd5\u5bf9\u8c61\" PyMethodObject\u548cPyFunctionObject\u5728\u8c03\u7528\u65f6\u8fdb\u5316\u6210PyFrameObject,\u5f00\u8f9f\u4e00\u5757\u547d\u540d\u7a7a\u95f4,\u6267\u884c\u51fd\u6570\u4f53\u4ee3\u7801. Ps: \u7c7b\u65b9\u6cd5\u7684\u4e00\u4e2a\u5e94\u7528 -- \u53ef\u4ee5\u8ba9\u7c7b\u8c03\u7528\u7c7b\u65b9\u6cd5\u5728\u7c7b\u65b9\u6cd5\u4f53\u91cc\u5b8c\u6210\u5bf9\u7c7b\u7684\u5b9e\u4f8b\u5316!! \u7c7b\u4e0e\u7c7b\u578b\u7684\u7edf\u4e00 \u00b6 \u2605 \u5728python3\u4e2d\u7edf\u4e00\u4e86\u7c7b\u4e0e\u7c7b\u578b\u7684\u6982\u5ff5,\u7c7b\u5c31\u662f\u7c7b\u578b \u5373\u81ea\u5b9a\u4e49\u7c7b\u5c31\u662f\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u578b \u6253\u5370\u5b9e\u4f8b -- <__main__.\u7c7b\u540d object at \u5185\u5b58\u5730\u5740> \u6253\u5370\u7c7b\u3001type ( \u5b9e\u4f8b ) -- <class '__main__.\u7c7b\u540d' > Ps: isinstance ( obj,cls ) \u68c0\u67e5obj\u662f\u5426\u662f\u7c7b cls \u7684\u4e00\u4e2a\u5b9e\u4f8b issubclass ( sub, super ) \u68c0\u67e5sub\u7c7b\u662f\u5426\u662f super \u7c7b\u7684\u6d3e\u751f\u7c7b/\u5b50\u7c7b \u5f53\u8c03\u7528a.f1 ( *args ) \u7684\u65f6\u5019\u5176\u5b9e\u662f\u8c03\u7528\u4e86A.f1 ( a, *args ) d = { 'x' : 1 } # -- \u672c\u8d28\u4e0a\u662f d = dict({'x':1}) my_list = [ 1 , 2 , 3 ] # -- \u672c\u8d28\u4e0a\u662f my_list = list([1, 2, 3]) my_list\u662f\u7c7bdict\u7684\u4e00\u4e2a\u5b9e\u4f8b # \u5217\u8868\u7684append\u3001extend\u7b49\u662fmy_list\u5bf9\u8c61\u7684\u5b9e\u4f8b\u65b9\u6cd5!! print ( isinstance ( d, dict )) # -- \u4e0d\u5efa\u8bae\u7528`type(d) is dict`\u6765\u5224\u65ad \u9b54\u6cd5\u65b9\u6cd5 \u00b6 \u9b54\u6cd5\u65b9\u6cd5\u5728\u7c7b\u4e2d, \u67d0\u79cd\u7279\u5b9a\u6761\u4ef6\u4e0b\u5c31\u4f1a\u89e6\u53d1\u5b83\u7684\u6267\u884c! __init__ -- \u8c03\u7528\u7c7b\u4ea7\u751f\u7a7a\u7684\u5b9e\u4f8b\u5bf9\u8c61\u540e\u4f1a\u81ea\u52a8\u89e6\u53d1\u8be5\u65b9\u6cd5\u5b8c\u6210\u5bf9\u5b9e\u4f8b\u5bf9\u8c61\u7684\u521d\u59cb\u5316 __new__ -- \u662f\u521b\u5efa\u8fd9\u4e2a\u7a7a\u5b9e\u4f8b\u5bf9\u8c61\u7684\u65b9\u6cd5 __str__ -- \u5f53self \"\u5373\u5b9e\u4f8b\u5bf9\u8c61\" \u88ab\u6253\u5370\u65f6 , \u81ea\u52a8\u89e6\u53d1 __del__ -- \u6790\u6784\u65b9\u6cd5 . \u5728\u5bf9\u8c61\u88abdel\u5220\u9664\u65f6\u81ea\u52a8\u89e6\u53d1 \u53ef\u4ee5\u7528\u4e8e\u624b\u52a8\u56de\u6536\u7cfb\u7edf\u8d44\u6e90 __call__ -- \u5f53\u5bf9\u8c61\u88ab\u8c03\u7528\u65f6\u4f1a\u81ea\u52a8\u89e6\u53d1\u8be5\u65b9\u6cd5 ! obj () \u7ee7\u627f \u00b6 \u7c7b\u540d . __bases__ -- \u5217\u51fa\u5f53\u524d\u7c7b\u7ee7\u627f\u7684\u6240\u6709\u7236\u7c7b . \u2605 \u7ec4\u5408 -- \u8be6\u770b \u5bf9\u5e94\u5c0f\u8282\u7684\u4e3e\u4f8b . \u83f1\u5f62\u7ee7\u627f -- \u65b0\u5f0f\u7c7b >> \u5e7f\u5ea6\u4f18\u5148 \u5728\u5b50\u7c7b\u6d3e\u751f\u51fa\u6765\u7684\u529f\u80fd\u4e2d\u91cd\u7528\u7236\u7c7b\u529f\u80fd\u7684\u65b9\u5f0f\u6709\u4e24\u79cd : 1 > \u6307\u540d\u9053\u59d3\u8bbf\u95ee\u67d0\u4e00\u4e2a\u7c7b\u7684\u51fd\u6570 : \u8be5\u65b9\u5f0f\u4e0e\u7ee7\u627f\u65e0\u5173 -- \u7c7b\u540d . \u51fd\u6570\u540d () eg : \u524d\u9762\u7684\u4ee3\u7801 OldboyPeople . __init__ ( self , name , age , sex ) \u2605 2 > super () -- \u53c2\u6570\u4e00\u4e0d\u5199\u5c31\u662f\u5f53\u524d\u7c7b , \u53c2\u6570\u4e8c\u6307self\u6240\u5728\u7c7b\u7684mro\u7ee7\u627f\u94fe \u7c7b\u540d . mro () \u7b49\u540c\u4e8e \u7c7b\u540d . __mro__ () \u591a\u6001 \u00b6 \u5217\u8868 \u3001 \u5143\u7ec4 \u3001 \u5b57\u7b26\u4e32 \u8ba1\u7b97\u957f\u5ea6\u7684\u65b9\u6cd5\u90fd\u662f len \u5c01\u88c5 \u00b6 \u5728\u5c5e\u6027\u540d\u524d\u9762\u52a0\u53cc\u4e0b\u5212\u7ebf__ \u5728\u7c7b\u7684\u5185\u90e8\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee , \u800c\u5728\u7c7b\u7684\u5916\u90e8\u65e0\u6cd5\u76f4\u63a5\u8bbf\u95ee \u56e0\u4e3a\u5728\u7c7b\u5b9a\u4e49\u9636\u6bb5\u53d1\u751f\u4e86\u4e00\u6b21\u53d8\u5f62 _\u7c7b\u540d__\u5c5e\u6027\u540d \u53d8\u5f62\u540e\u7684\u540d\u5b57\u4e22\u8fdb\u4e86namescope \u5e94\u7528 : \u5982\u679c\u4e0d\u60f3\u8ba9\u5b50\u7c7b\u7684\u65b9\u6cd5\u8986\u76d6\u7236\u7c7b\u7684 , \u53ef\u4ee5\u5c06\u8be5\u65b9\u6cd5\u540d\u524d\u52a0\u4e00\u4e2a__\u5f00\u5934 . 1 > \u9690\u85cf\u6570\u636e\u5c5e\u6027 : \u8ba9\u7c7b\u5916\u90e8\u7684\u4f7f\u7528\u8005\u901a\u8fc7\u63a5\u53e3\u6765\u95f4\u63a5\u5730\u64cd\u4f5c\u9690\u85cf\u7684\u5c5e\u6027 , \u5728\u63a5\u53e3\u4e4b\u4e0a\u9644\u52a0\u4efb\u610f\u7684\u903b\u8f91 , \u4ece\u800c\u4e25\u683c\u63a7\u5236\u4f7f\u7528\u8005\u5bf9\u5c5e\u6027\u7684\u64cd\u4f5c ! 2 > \u9690\u85cf\u51fd\u6570\u5c5e\u6027 : \u5728\u63a5\u53e3\u5185\u53bb\u8c03\u7528\u9690\u85cf\u7684\u529f\u80fd , \u9694\u79bb\u4e86\u590d\u6742\u5ea6 , \u7528\u6237\u53ea\u9700\u8981\u8c03\u7528\u8fd9\u4e2a\u63a5\u53e3\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4e00\u7cfb\u5217\u6b65\u9aa4 . \u5bf9\u9690\u85cf\u7684\u6570\u636e\u5c5e\u6027 , \u9700\u8981\u5199\u63a5\u53e3\u6765\u95f4\u63a5CURD . \u4f46\u6211\u4eec\u4e0d\u60f3\u6539\u53d8\u672a\u9690\u85cf\u65f6\u7684\u5bf9\u6570\u636e\u5c5e\u6027\u7684\u64cd\u4f5c\u4e60\u60ef . \u7528property\u88c5\u9970\u5668 ! property \u8be5\u88c5\u9970\u5668\u7528\u4e8e\u5c06\u88ab\u88c5\u9970\u7684\u65b9\u6cd5 \u4f2a\u88c5\u6210\u4e00\u4e2a\u6570\u636e\u5c5e\u6027 @property -- \u67e5 @name . setter -- \u6539 @name . deleter -- \u5220 \u2605\u53cd\u5c04 \u00b6 \u901a\u8fc7\u5b57\u7b26\u4e32\u6765\u64cd\u4f5c\u7c7b\u6216\u8005\u5bf9\u8c61\u7684\u5c5e\u6027 1 > hasattr ( p , \"xxx\" ) -- \u8fd4\u56deTrue\u6216\u8005False \u4e0d\u4ec5\u5c40\u9650\u4e8e\u5224\u65ad \"xxx\" in p . __dict__ , \u662f\u5728\u5224\u65ad\u80fd\u5426\u901a\u8fc7\u5c5e\u6027\u67e5\u627e\u89c4\u5219\u5bf9\u8be5\u5c5e\u6027\u8fdb\u884c\u5f15\u7528 2 > getattr ( p , \"xxx\" , \"\u8bbe\u7f6e\u6ca1\u627e\u5230\u7684\u8fd4\u56de\u503c,\u901a\u5e38\u8bbe\u7f6e\u4e3aNone.\" ) # \u4e0d\u8bbe\u7f6e\u9ed8\u8ba4\u8fd4\u56de\u503c,\u6ca1\u627e\u7684\u8bdd\u4f1a\u62a5\u9519. 3 > setattr ( p , \"age\" , 18 ) \u7b49\u540c\u4e8e p . age = 18 4 > delattr ( p , \"name\" ) \u7b49\u540c\u4e8e del p . name \u5e94\u7528\u573a\u666f : \u6bd4\u5982input\u8f93\u5165\u7684\u662f\u5b57\u7b26\u4e32 , \u8f93\u5165\u5b57\u7b26\u4e32\u53cd\u5c04\u5230\u5bf9\u8c61\u5177\u4f53\u7684\u65b9\u6cd5\u4e0a\u9762 \u5143\u7c7b \u00b6 \u2605 \u8be6\u7ec6\u7684\u5206\u6790\u8fc7\u7a0b \u76f4\u63a5\u770b \u5143\u7c7b.md \u4e2d\u7684\u5c5e\u6027\u67e5\u627e\u548c\u6a21\u7248\u5206\u6790 \u4e24\u90e8\u5206\u5185\u5bb9! class Mymeta ( type ) : # -- \u63a7\u5236\u81ea\u5b9a\u4e49\u7c7b\u7684\u521b\u5efa\u8fc7\u7a0b People = Mymeta('People',..,..) def __init__ ( self, class_name, class_bases, class_dic ) : # -- \u8be5self\u662fPeople super ( Mymeta, self ) .__init__ ( class_name, class_bases, class_dic ) # -- \u63a7\u5236\u81ea\u5b9a\u4e49\u7c7b\u7684\u8c03\u7528 p = People('dc',18) def __call__ ( self, *args, **kwargs ) : # -- \u8be5self\u662fPeople obj = self.__new__ ( self ) self.__init__ ( obj, *args, **kwargs ) return obj \"\"\" # -- \u81ea\u5b9a\u4e49\u7c7b\u7684\u521b\u5efa\u8fc7\u7a0b class\u5173\u952e\u5b57\u5bf9\u4e09\u8981\u7d20\u8fdb\u884c\u4e86\u5c01\u88c5. People = Mymate('People',(object,),{...}) \u5373People\u662fMymate(...,...,...)\u5b9e\u4f8b\u5316\u51fa\u6765\u7684 Mymate\u5143\u7c7b\u7684\u8c03\u7528\u4f1a\u89e6\u53d1type\u4e2d__call__\u65b9\u6cd5\u7684\u6267\u884c. \u91cc\u9762\u6709\u884c\u4ee3\u7801 `self.__init__(obj, *args, **kwargs)` \u5373Mymate.__init__(People,*args,**kwargs) \"\"\" class People ( object, metaclass = Mymeta ) : def __init__ ( self, name, age ) : self.name = name self.age = age \u5143\u7c7b\u4e2d\u7684\u4e09\u4e2a\u9b54\u6cd5\u65b9\u6cd5. __new__ -- self\u6307\u5143\u7c7b \u8be5\u65b9\u6cd5\u4e0d\u662f\u7ed1\u5b9a\u65b9\u6cd5 __init__ __call__ -- self\u6307\u7c7b \u5bf9class_dic\u7684\u64cd\u4f5c\u5728__new__\u4e2d\u8fdb\u884c __init__\u4e0d\u4f1a\u5bf9class_dic\u8fdb\u884c\u6709\u6240\u64cd\u4f5c \u521b\u5efa\u67d0\u4e2a\u5b9e\u4f8b\u4f5c\u4e3a\u7c7b\u7684\u4e00\u4e2a\u5c5e\u6027 ( \u5373\u5b9e\u73b0\u5355\u4f8b ) \u5728__init__\u4e2d\u8fdb\u884c \u5373\u4e3a\u7c7b\u521b\u5efa\u72ec\u6709\u7684\u5c5e\u6027 __call__ \u662f\u521b\u5efa\u5b9e\u4f8b\u7684 \u4f1a\u7ecf\u5386 \u521b\u5efa\u7a7a\u5bf9\u8c61\u3001\u7a7a\u5bf9\u8c61\u521d\u59cb\u5316\u4e24\u4e2a\u6b65\u9aa4 \u8c03\u7528\u7c7b\u4ea7\u751f\u5b9e\u4f8b \u9700\u8981\u6267\u884c\u7c7b\u4e2d\u7684__new__\u65b9\u6cd5\u4ea7\u751f\u4e00\u4e2a\u7a7a\u5b9e\u4f8b\u5bf9\u8c61,\u518d\u6267\u884c\u7c7b\u4e2d\u7684__init__\u65b9\u6cd5\u5b9e\u73b0\u5bf9\u8be5\u5b9e\u4f8b\u5bf9\u8c61\u521d\u59cb\u5316,\u4e5f\u5c31\u662f\u4e3a\u8be5\u5b9e\u4f8b\u5bf9\u8c61\u5b9a\u5236\u72ec\u6709\u7684\u5c5e\u6027 ; \u7c7b\u6bd4\u8fc7\u6765, \u8c03\u7528\u5143\u7c7b\u521b\u5efa\u7c7b,\u5143\u7c7b\u4e2d\u7684__new__\u65b9\u6cd5\u5df2\u7ecf\u5b9e\u73b0\u4e86\u5bf9\u7c7b\u7684\u521b\u5efa, __init__\u662f\u4e3a\u4e86\u7ed9\u521b\u5efa\u7684\u7c7b\u6dfb\u52a0\u5c5e\u6027 ( \u53ef\u4ee5\u7528\u4e8e\u5b9e\u73b0\u5355\u4f8b ) \u6ce8\u610f,new\u91cc\u5fc5\u987b\u8fd4\u56de\u521b\u5efa\u7684\u5b9e\u4f8b,\u4e0d\u7136new\u8fd4\u56de\u5565,\u5b9e\u4f8b\u5c31\u53d8\u6210\u4e86\u5565 metaclass\u5bf9\u7c7b\u64cd\u4f5c\u9700\u8981\u5728\u5143\u7c7bnew\u91cc\u64cd\u4f5c","title":"\u590d\u4e60"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/10_%E5%A4%8D%E4%B9%A0/#_1","text":"\u5b9a\u4e49\u7c7b \u7c7b\u4f3c\u4e8e ` import \u6a21\u5757\u540d ` \u5bfc\u5165\u6a21\u5757\u4f1a\u521b\u5efa\u4e00\u4e2anamescope. \u901a\u8fc7 \u6a21\u5757\u540d.\u5c5e\u6027\u540d \u4ecenamescope\u4e2d\u53d6\u5c5e\u6027/\u53d8\u91cf. \u540c\u7406! \u4ece\u4e0a\u5f80\u4e0b\u8fd0\u884c\u5230class\u5b9a\u4e49\u7684\u7c7b\u4ee3\u7801,\u4f1a\u5f00\u8f9f\u4e00\u4e2a\u7c7b\u7684namescope,\u5c06\u7c7b\u4e2d\u7684\u53d8\u91cf\u548c\u65b9\u6cd5/\u51fd\u6570\u5f80namescope\u4e2d\u4e22. \u2605 ( \u7c7b\u4e2d\u7684\u4ee3\u7801/\u7c7b\u4f53\u4ee3\u7801 \u5728\u5b9a\u4e49\u9636\u6bb5\u5c31\u6267\u884c\u5566!! ) \u2605 \u8bb0\u4f4f: \u6267\u884cpy\u6587\u4ef6\u3001\u6267\u884c\u5bfc\u5165\u6a21\u5757\u3001\u7c7b\u5b9a\u4e49\u3001\u7c7b\u7684\u5b9e\u4f8b\u5316/\u7c7b\u7684\u8c03\u7528\u3001\u51fd\u6570\u8c03\u7528\u7684\u4ee3\u7801\u65f6,\u4f1a\u5f00\u8f9fnamescope. \u7279\u522b\u6ce8\u610f,\u7c7b\u4e2d\u51fd\u6570\u4f53\u7684\u4ee3\u7801\u8981\u5728\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u624d\u4f1a\u6267\u884c! --------- | \u6570\u636e\u5c5e\u6027 \uff5c \u7c7b\u540d --> | \uff5c | \u51fd\u6570\u5c5e\u6027 \uff5c --------- \u7c7b\u540d\u6307\u5411\u7c7b\u7684namescope \u67e5\u770b\u7c7b\u7684namescope: \u7c7b\u540d.__dict__ \u7c7b\u540d.\u5c5e\u6027\u540d \u7b49\u540c\u4e8e \u7c7b\u540d.__dict__ [ \"\u5c5e\u6027\u540d\" ] \u2605 So,\u5bf9namescope\u7684CURD\u7684\u672c\u8d28\u5c31\u662f\u5728\u64cd\u4f5c\u5b57\u5178!! \u2605 ( \u7c7b\u7684\u5b9e\u4f8b\u662f\u4e00\u6837\u7684! \u67e5\u770b\u5b9e\u4f8b\u7684namescope: \u5b9e\u4f8b\u540d.__dict__ )","title":"\u7c7b\u7684\u5b9a\u4e49"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/10_%E5%A4%8D%E4%B9%A0/#_2","text":"` \u7c7b\u540d ([ __init__\u7684\u5f62\u53c2 ]) ` step 1 > \u9020\u5b9e\u4f8b -- \u8c03\u7528\u7c7b\u521b\u5efa\u4e00\u4e2a\u7a7a\u5bf9\u8c61/\u5b9e\u4f8b,\u4f1a\u4e3a\u8be5\u5b9e\u4f8b\u5f00\u8f9f\u4e00\u4e2a\u65b0\u7684namescope step 2 > \u521d\u59cb\u5316\u5b9e\u4f8b -- \u521b\u5efa\u5b8c\u5b9e\u4f8b\u540e,\u8be5\u5b9e\u4f8b\u4f1a\u81ea\u52a8\u8c03\u7528\u7c7b\u4e2d\u7684__init__\u529f\u80fd\u7684\u6267\u884c,\u5e76\u5c06\u81ea\u5df1\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570self\u7684\u5b9e\u53c2\u4f20\u5165 \u5f3a\u8c03: __init__\u662f\u7528\u6765\u521d\u59cb\u5316\u5b9e\u4f8b\u7684 ( \u4e3a\u5b9e\u4f8b\u5b9a\u5236\u72ec\u6709\u5c5e\u6027\u7684 ) ,\u4e0d\u662f\u9020\u5b9e\u4f8b\u7684 __init__\u7684\u51fd\u6570\u4f53\u4e2d\u53ef\u4ee5\u6709\u4efb\u610f\u4ee3\u7801,\u4f46\u552f\u72ec\u4e0d\u80fdreturn\u975eNone\u7684\u8fd4\u56de\u503c \u2605 \u7c7b\u7684namescope\u662f\u5b9e\u4f8b\u4eec\u5171\u4eab\u7684!! \u5b9e\u4f8b\u7684namescope\u4e2d\u53ea\u6709\u81ea\u4e2a\u513f\u72ec\u6709\u7684\u5c5e\u6027,\u53ea\u6709\u81ea\u5df1\u770b\u5f97\u89c1 \u2605 \u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u662f\u6570\u636e\u4e0e\u65b9\u6cd5\u9ad8\u5ea6\u6574\u5408\u7684\u4ea7\u7269!","title":"\u7c7b\u7684\u8c03\u7528/\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/10_%E5%A4%8D%E4%B9%A0/#_3","text":"\u2605 \u5c5e\u6027\u5f15\u7528\u89c4\u5219 : \u5148\u4ece\u5bf9\u8c61\u81ea\u5df1\u7684\u540d\u79f0\u7a7a\u95f4\u627e , \u6ca1\u6709\u5219\u53bb\u7c7b ( \u7c7b - \u7236\u7c7b - \u76f4\u5230\u9876\u7ea7\u7236\u7c7bObject\u7c7b ) \u4e2d\u627e \u82e5\u90fd\u6ca1\u6709 , \u5219\u62a5\u9519 \u201c \u6b64\u5bf9\u8c61\u6ca1\u6709\u8be5\u5c5e\u6027 \u201d -- \u4e0d\u4f1a\u53bb\u5168\u5c40\u7a7a\u95f4\u627e ! \u2605 \u7c7b\u4e2d\u53d8\u91cf\u5f15\u7528\u7684\u89c4\u5219 : 1 > \u672a\u7ed1\u5b9a\u7684\u5c40\u90e8\u53d8\u91cf\u5c06\u5728\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u4e2d\u67e5\u627e 2 > \u5728\u7c7b\u4ee3\u7801\u5757\u4e2d\u5b9a\u4e49\u7684\u540d\u79f0\u7684\u4f5c\u7528\u57df / namescope\u4f5c\u7528\u8303\u56f4 , \u4e0d\u4f1a\u6269\u5c55\u5230\u65b9\u6cd5\u7684\u4ee3\u7801\u5757\u4e2d \u5305\u62ec\u5217\u8868\u63a8\u5bfc\u5f0f\u548c\u751f\u6210\u5668\u8868\u8fbe\u5f0f \u5373\u4f5c\u7528\u57df\u5d4c\u5957\u89c4\u5219\u9002\u7528\u4e8eLEGB , \u4e0d\u9002\u7528\u4e8e\u7c7b\u4e0e\u7c7b\u4e2d\u7684\u51fd\u6570 . Ps : \u53ef\u4ee5\u901a\u8fc7 obj . \u5c5e\u6027 -- \u5373\u5c5e\u6027\u5f15\u7528\u7684\u65b9\u5f0f\u6765\u8fdb\u884c\u8bbf\u95ee f1 = 0 a = 1 def m (): print ( 234 ) class Foo : b = 2 print ( f1 ) # 0 print ( Foo ) # -- NameError: name 'Foo' is not defined def f1 ( self ): print ( b ) def f2 ( self ): m () # -- \u5c40\u90e8\u4e2d\u6ca1\u6709m\u53d8\u91cf,\u4f1a\u5728\u5168\u5c40\u4e2d\u627e self . m () @staticmethod # -- \u9759\u6001\u65b9\u6cd5,\u610f\u5473\u7740\u4e0d\u4f1a\u81ea\u52a8\u7ed1\u5b9a\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61 def m (): print ( 123 ) print ( Foo . a ) # -- AttributeError: type object 'Foo' has no attribute 'a' print ( Foo () . a ) # -- AttributeError: 'Foo' object has no attribute 'a' Foo () . f1 () # -- NameError: name 'b' is not defined Foo () . f2 () # 234 # 123 \u2605 \u8fd9\u6837\u8bb0 !! Foo . a . \u524d\u9762\u5c5e\u4e8e < \u53d8\u91cf\u5f15\u7528 > , NameError ; . \u7684\u540e\u9762\u5c5e\u4e8e < \u5c5e\u6027\u5f15\u7528 > , AttributeError !!","title":"\u5c5e\u6027\u7684\u67e5\u627e/\u5c5e\u6027\u5f15\u7528"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/10_%E5%A4%8D%E4%B9%A0/#_4","text":"self @classmethod\u4e0ecls @staticmethod \u2605 \u867d\u7136\u4e0d\u4e25\u8c28,\u4f46\u6211\u4eec\u53ef\u4ee5\u5927\u80c6\u7684\u8bf4: 1 > \u5b9e\u4f8b\u65b9\u6cd5 -- \u5b9e\u4f8b\u5bf9\u8c61\u8c03\u7528 \u7c7b\u4e2d\u4e0d\u52a0\u88c5\u9970\u5668\u7684\u51fd\u6570<\u9ed8\u8ba4>\u662f\u7ed1\u5b9a\u7ed9\u5b9e\u4f8b\u5316\u5bf9\u8c61\u4f7f\u7528\u7684 \u8be5\u51fd\u6570\u5fc5\u987b\u8981\u6709\u4e2a\u5f62\u53c2,\u7ea6\u5b9a\u662fself \u5b9e\u4f8b\u8c03\u7528\u65f6\u4f1a\u5c06\u5b9e\u4f8b\u81ea\u5df1\u4f5c\u4e3a\u51fd\u6570\u7b2c\u4e00\u4e2a\u5f62\u53c2self\u7684\u5b9e\u53c2 \"\u81ea\u52a8\u4f20\u5165\" 2 > \u7c7b\u65b9\u6cd5 -- \u7c7b\u5bf9\u8c61\u8c03\u7528 \u7c7b\u4e2d\u88ab\u88c5\u9970\u5668@classmethod\u88c5\u9970\u7684\u51fd\u6570<\u7ea6\u5b9a>\u662f\u7ed1\u5b9a\u7ed9\u7c7b\u5bf9\u8c61\u4f7f\u7528\u7684 \u8be5\u51fd\u6570\u5fc5\u987b\u8981\u6709\u4e2a\u5f62\u53c2,\u7ea6\u5b9a\u662fcls \u7c7b\u8c03\u7528\u65f6\u4f1a\u5c06\u7c7b\u81ea\u5df1\u4f5c\u4e3a\u51fd\u6570\u7b2c\u4e00\u4e2a\u5f62\u53c2cls\u7684\u5b9e\u53c2 \"\u81ea\u52a8\u4f20\u5165\" 3 > \u9759\u6001\u65b9\u6cd5 -- \u90fd\u53ef\u8c03\u7528 \u7c7b\u4e2d\u88ab\u88c5\u9970\u5668@staticmethod\u88c5\u9970\u7684\u51fd\u6570,<\u610f\u5473>\u7740\u7c7b\u5bf9\u8c61\u548c\u5b9e\u4f8b\u90fd\u53ef\u4ee5\u8c03\u7528 \u4f46\u6b64\u51fd\u6570\u5c31\u662f\u4e00\u4e2a\u666e\u901a\u51fd\u6570!!\u8c03\u7528\u65f6\u8be5\u51fd\u6570,\u8be5\u51fd\u6570\u6709\u591a\u5c11\u5f62\u53c2\u5c31\u5bf9\u5e94\u4f20\u591a\u5c11\u5b9e\u53c2 \u25b2 \u4f55\u4e3a\u51fd\u6570\u4f55\u4e3a\u65b9\u6cd5? \u51fd\u6570:\u6709\u51e0\u4e2a\u503c\u5c31\u4f20\u51e0\u4e2a\u503c. \u65b9\u6cd5:\u4f1a\u81ea\u52a8\u4f20\u503c,\u7ed1\u5b9a\u65b9\u6cd5\u3001\u9759\u6001\u65b9\u6cd5 ( \u4e25\u683c\u610f\u4e49\u4e0a\u6765\u5c06\u9759\u6001\u65b9\u6cd5\u662f\u51fd\u6570,\u6211\u4eec\u8fd9\u6837\u79f0\u547c\u7f62\u4e86! ) \u2605 \u6ce8\u610f: \u7c7b\u8c03\u7528\u5b9e\u4f8b\u65b9\u6cd5,\u5c31\u662f\u5728\u8c03\u7528\u666e\u901a\u7684\u51fd\u6570 \u5b9e\u4f8b\u5bf9\u8c61\u8c03\u7528\u7c7b\u65b9\u6cd5,\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u5165\u7684\u4ecd\u7136\u662f\u7c7b\u5bf9\u8c61 \u2605 \u6253\u5370\u4e0d\u540c\u5bf9\u8c61\u8bbf\u95ee\u7c7b\u4e2d\u65b9\u6cd5\u5c5e\u6027 ( \u5b9e\u4f8b\u65b9\u6cd5\u3001\u7c7b\u65b9\u6cd5\u3001\u9759\u6001\u65b9\u6cd5 ) \u7684\u7ed3\u679c: bound method -- \u5b9e\u4f8b\u548c\u7c7b\u8bbf\u95ee\u7c7b\u65b9\u6cd5\u3001\u5b9e\u4f8b\u8bbf\u95ee\u5b9e\u4f8b\u65b9\u6cd5 -- \u5c5e\u6027\u5f15\u7528 \"\u5f15\u7528\u7684\u662fPyMethodObject<\u65b9\u6cd5\u5bf9\u8c61>\" function -- \u5b9e\u4f8b\u548c\u7c7b\u8bbf\u95ee\u9759\u6001\u65b9\u6cd5\u3001\u7c7b\u8bbf\u95ee\u5b9e\u4f8b\u65b9\u6cd5 -- \u5c5e\u6027\u5f15\u7528 \"\u5f15\u7528\u7684\u662fPyFunctionObject<\u51fd\u6570\u5bf9\u8c61>\" \u2605 \u5373! \u51fd\u6570\u5b9a\u4e49: PyCodeObject + def == PyFunctionObject \"\u51fd\u6570\u5bf9\u8c61\" \u7c7b\u5b9a\u4e49: \u6709 \"self\" \u7279\u5f81\u7684PyFunctionObject \u5c06\u4e0e\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u8fdb\u884c\u7ed1\u5b9a \u8fdb\u5316\u4e3a PyMethodObject \"\u65b9\u6cd5\u5bf9\u8c61\" \u6709 \"@classmethod\" \u7279\u5f81\u7684PyFunctionObject \u5c06\u4e0e\u7c7b\u5bf9\u8c61\u8fdb\u884c\u7ed1\u5b9a \u8fdb\u5316\u4e3a PyMethodObject \"\u65b9\u6cd5\u5bf9\u8c61\" PyMethodObject\u548cPyFunctionObject\u5728\u8c03\u7528\u65f6\u8fdb\u5316\u6210PyFrameObject,\u5f00\u8f9f\u4e00\u5757\u547d\u540d\u7a7a\u95f4,\u6267\u884c\u51fd\u6570\u4f53\u4ee3\u7801. Ps: \u7c7b\u65b9\u6cd5\u7684\u4e00\u4e2a\u5e94\u7528 -- \u53ef\u4ee5\u8ba9\u7c7b\u8c03\u7528\u7c7b\u65b9\u6cd5\u5728\u7c7b\u65b9\u6cd5\u4f53\u91cc\u5b8c\u6210\u5bf9\u7c7b\u7684\u5b9e\u4f8b\u5316!!","title":"\u7ed1\u5b9a\u65b9\u6cd5\u4e0e\u975e\u7ed1\u5b9a\u65b9\u6cd5"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/10_%E5%A4%8D%E4%B9%A0/#_5","text":"\u2605 \u5728python3\u4e2d\u7edf\u4e00\u4e86\u7c7b\u4e0e\u7c7b\u578b\u7684\u6982\u5ff5,\u7c7b\u5c31\u662f\u7c7b\u578b \u5373\u81ea\u5b9a\u4e49\u7c7b\u5c31\u662f\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u578b \u6253\u5370\u5b9e\u4f8b -- <__main__.\u7c7b\u540d object at \u5185\u5b58\u5730\u5740> \u6253\u5370\u7c7b\u3001type ( \u5b9e\u4f8b ) -- <class '__main__.\u7c7b\u540d' > Ps: isinstance ( obj,cls ) \u68c0\u67e5obj\u662f\u5426\u662f\u7c7b cls \u7684\u4e00\u4e2a\u5b9e\u4f8b issubclass ( sub, super ) \u68c0\u67e5sub\u7c7b\u662f\u5426\u662f super \u7c7b\u7684\u6d3e\u751f\u7c7b/\u5b50\u7c7b \u5f53\u8c03\u7528a.f1 ( *args ) \u7684\u65f6\u5019\u5176\u5b9e\u662f\u8c03\u7528\u4e86A.f1 ( a, *args ) d = { 'x' : 1 } # -- \u672c\u8d28\u4e0a\u662f d = dict({'x':1}) my_list = [ 1 , 2 , 3 ] # -- \u672c\u8d28\u4e0a\u662f my_list = list([1, 2, 3]) my_list\u662f\u7c7bdict\u7684\u4e00\u4e2a\u5b9e\u4f8b # \u5217\u8868\u7684append\u3001extend\u7b49\u662fmy_list\u5bf9\u8c61\u7684\u5b9e\u4f8b\u65b9\u6cd5!! print ( isinstance ( d, dict )) # -- \u4e0d\u5efa\u8bae\u7528`type(d) is dict`\u6765\u5224\u65ad","title":"\u7c7b\u4e0e\u7c7b\u578b\u7684\u7edf\u4e00"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/10_%E5%A4%8D%E4%B9%A0/#_6","text":"\u9b54\u6cd5\u65b9\u6cd5\u5728\u7c7b\u4e2d, \u67d0\u79cd\u7279\u5b9a\u6761\u4ef6\u4e0b\u5c31\u4f1a\u89e6\u53d1\u5b83\u7684\u6267\u884c! __init__ -- \u8c03\u7528\u7c7b\u4ea7\u751f\u7a7a\u7684\u5b9e\u4f8b\u5bf9\u8c61\u540e\u4f1a\u81ea\u52a8\u89e6\u53d1\u8be5\u65b9\u6cd5\u5b8c\u6210\u5bf9\u5b9e\u4f8b\u5bf9\u8c61\u7684\u521d\u59cb\u5316 __new__ -- \u662f\u521b\u5efa\u8fd9\u4e2a\u7a7a\u5b9e\u4f8b\u5bf9\u8c61\u7684\u65b9\u6cd5 __str__ -- \u5f53self \"\u5373\u5b9e\u4f8b\u5bf9\u8c61\" \u88ab\u6253\u5370\u65f6 , \u81ea\u52a8\u89e6\u53d1 __del__ -- \u6790\u6784\u65b9\u6cd5 . \u5728\u5bf9\u8c61\u88abdel\u5220\u9664\u65f6\u81ea\u52a8\u89e6\u53d1 \u53ef\u4ee5\u7528\u4e8e\u624b\u52a8\u56de\u6536\u7cfb\u7edf\u8d44\u6e90 __call__ -- \u5f53\u5bf9\u8c61\u88ab\u8c03\u7528\u65f6\u4f1a\u81ea\u52a8\u89e6\u53d1\u8be5\u65b9\u6cd5 ! obj ()","title":"\u9b54\u6cd5\u65b9\u6cd5"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/10_%E5%A4%8D%E4%B9%A0/#_7","text":"\u7c7b\u540d . __bases__ -- \u5217\u51fa\u5f53\u524d\u7c7b\u7ee7\u627f\u7684\u6240\u6709\u7236\u7c7b . \u2605 \u7ec4\u5408 -- \u8be6\u770b \u5bf9\u5e94\u5c0f\u8282\u7684\u4e3e\u4f8b . \u83f1\u5f62\u7ee7\u627f -- \u65b0\u5f0f\u7c7b >> \u5e7f\u5ea6\u4f18\u5148 \u5728\u5b50\u7c7b\u6d3e\u751f\u51fa\u6765\u7684\u529f\u80fd\u4e2d\u91cd\u7528\u7236\u7c7b\u529f\u80fd\u7684\u65b9\u5f0f\u6709\u4e24\u79cd : 1 > \u6307\u540d\u9053\u59d3\u8bbf\u95ee\u67d0\u4e00\u4e2a\u7c7b\u7684\u51fd\u6570 : \u8be5\u65b9\u5f0f\u4e0e\u7ee7\u627f\u65e0\u5173 -- \u7c7b\u540d . \u51fd\u6570\u540d () eg : \u524d\u9762\u7684\u4ee3\u7801 OldboyPeople . __init__ ( self , name , age , sex ) \u2605 2 > super () -- \u53c2\u6570\u4e00\u4e0d\u5199\u5c31\u662f\u5f53\u524d\u7c7b , \u53c2\u6570\u4e8c\u6307self\u6240\u5728\u7c7b\u7684mro\u7ee7\u627f\u94fe \u7c7b\u540d . mro () \u7b49\u540c\u4e8e \u7c7b\u540d . __mro__ ()","title":"\u7ee7\u627f"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/10_%E5%A4%8D%E4%B9%A0/#_8","text":"\u5217\u8868 \u3001 \u5143\u7ec4 \u3001 \u5b57\u7b26\u4e32 \u8ba1\u7b97\u957f\u5ea6\u7684\u65b9\u6cd5\u90fd\u662f len","title":"\u591a\u6001"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/10_%E5%A4%8D%E4%B9%A0/#_9","text":"\u5728\u5c5e\u6027\u540d\u524d\u9762\u52a0\u53cc\u4e0b\u5212\u7ebf__ \u5728\u7c7b\u7684\u5185\u90e8\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee , \u800c\u5728\u7c7b\u7684\u5916\u90e8\u65e0\u6cd5\u76f4\u63a5\u8bbf\u95ee \u56e0\u4e3a\u5728\u7c7b\u5b9a\u4e49\u9636\u6bb5\u53d1\u751f\u4e86\u4e00\u6b21\u53d8\u5f62 _\u7c7b\u540d__\u5c5e\u6027\u540d \u53d8\u5f62\u540e\u7684\u540d\u5b57\u4e22\u8fdb\u4e86namescope \u5e94\u7528 : \u5982\u679c\u4e0d\u60f3\u8ba9\u5b50\u7c7b\u7684\u65b9\u6cd5\u8986\u76d6\u7236\u7c7b\u7684 , \u53ef\u4ee5\u5c06\u8be5\u65b9\u6cd5\u540d\u524d\u52a0\u4e00\u4e2a__\u5f00\u5934 . 1 > \u9690\u85cf\u6570\u636e\u5c5e\u6027 : \u8ba9\u7c7b\u5916\u90e8\u7684\u4f7f\u7528\u8005\u901a\u8fc7\u63a5\u53e3\u6765\u95f4\u63a5\u5730\u64cd\u4f5c\u9690\u85cf\u7684\u5c5e\u6027 , \u5728\u63a5\u53e3\u4e4b\u4e0a\u9644\u52a0\u4efb\u610f\u7684\u903b\u8f91 , \u4ece\u800c\u4e25\u683c\u63a7\u5236\u4f7f\u7528\u8005\u5bf9\u5c5e\u6027\u7684\u64cd\u4f5c ! 2 > \u9690\u85cf\u51fd\u6570\u5c5e\u6027 : \u5728\u63a5\u53e3\u5185\u53bb\u8c03\u7528\u9690\u85cf\u7684\u529f\u80fd , \u9694\u79bb\u4e86\u590d\u6742\u5ea6 , \u7528\u6237\u53ea\u9700\u8981\u8c03\u7528\u8fd9\u4e2a\u63a5\u53e3\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4e00\u7cfb\u5217\u6b65\u9aa4 . \u5bf9\u9690\u85cf\u7684\u6570\u636e\u5c5e\u6027 , \u9700\u8981\u5199\u63a5\u53e3\u6765\u95f4\u63a5CURD . \u4f46\u6211\u4eec\u4e0d\u60f3\u6539\u53d8\u672a\u9690\u85cf\u65f6\u7684\u5bf9\u6570\u636e\u5c5e\u6027\u7684\u64cd\u4f5c\u4e60\u60ef . \u7528property\u88c5\u9970\u5668 ! property \u8be5\u88c5\u9970\u5668\u7528\u4e8e\u5c06\u88ab\u88c5\u9970\u7684\u65b9\u6cd5 \u4f2a\u88c5\u6210\u4e00\u4e2a\u6570\u636e\u5c5e\u6027 @property -- \u67e5 @name . setter -- \u6539 @name . deleter -- \u5220","title":"\u5c01\u88c5"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/10_%E5%A4%8D%E4%B9%A0/#_10","text":"\u901a\u8fc7\u5b57\u7b26\u4e32\u6765\u64cd\u4f5c\u7c7b\u6216\u8005\u5bf9\u8c61\u7684\u5c5e\u6027 1 > hasattr ( p , \"xxx\" ) -- \u8fd4\u56deTrue\u6216\u8005False \u4e0d\u4ec5\u5c40\u9650\u4e8e\u5224\u65ad \"xxx\" in p . __dict__ , \u662f\u5728\u5224\u65ad\u80fd\u5426\u901a\u8fc7\u5c5e\u6027\u67e5\u627e\u89c4\u5219\u5bf9\u8be5\u5c5e\u6027\u8fdb\u884c\u5f15\u7528 2 > getattr ( p , \"xxx\" , \"\u8bbe\u7f6e\u6ca1\u627e\u5230\u7684\u8fd4\u56de\u503c,\u901a\u5e38\u8bbe\u7f6e\u4e3aNone.\" ) # \u4e0d\u8bbe\u7f6e\u9ed8\u8ba4\u8fd4\u56de\u503c,\u6ca1\u627e\u7684\u8bdd\u4f1a\u62a5\u9519. 3 > setattr ( p , \"age\" , 18 ) \u7b49\u540c\u4e8e p . age = 18 4 > delattr ( p , \"name\" ) \u7b49\u540c\u4e8e del p . name \u5e94\u7528\u573a\u666f : \u6bd4\u5982input\u8f93\u5165\u7684\u662f\u5b57\u7b26\u4e32 , \u8f93\u5165\u5b57\u7b26\u4e32\u53cd\u5c04\u5230\u5bf9\u8c61\u5177\u4f53\u7684\u65b9\u6cd5\u4e0a\u9762","title":"\u2605\u53cd\u5c04"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/10_%E5%A4%8D%E4%B9%A0/#_11","text":"\u2605 \u8be6\u7ec6\u7684\u5206\u6790\u8fc7\u7a0b \u76f4\u63a5\u770b \u5143\u7c7b.md \u4e2d\u7684\u5c5e\u6027\u67e5\u627e\u548c\u6a21\u7248\u5206\u6790 \u4e24\u90e8\u5206\u5185\u5bb9! class Mymeta ( type ) : # -- \u63a7\u5236\u81ea\u5b9a\u4e49\u7c7b\u7684\u521b\u5efa\u8fc7\u7a0b People = Mymeta('People',..,..) def __init__ ( self, class_name, class_bases, class_dic ) : # -- \u8be5self\u662fPeople super ( Mymeta, self ) .__init__ ( class_name, class_bases, class_dic ) # -- \u63a7\u5236\u81ea\u5b9a\u4e49\u7c7b\u7684\u8c03\u7528 p = People('dc',18) def __call__ ( self, *args, **kwargs ) : # -- \u8be5self\u662fPeople obj = self.__new__ ( self ) self.__init__ ( obj, *args, **kwargs ) return obj \"\"\" # -- \u81ea\u5b9a\u4e49\u7c7b\u7684\u521b\u5efa\u8fc7\u7a0b class\u5173\u952e\u5b57\u5bf9\u4e09\u8981\u7d20\u8fdb\u884c\u4e86\u5c01\u88c5. People = Mymate('People',(object,),{...}) \u5373People\u662fMymate(...,...,...)\u5b9e\u4f8b\u5316\u51fa\u6765\u7684 Mymate\u5143\u7c7b\u7684\u8c03\u7528\u4f1a\u89e6\u53d1type\u4e2d__call__\u65b9\u6cd5\u7684\u6267\u884c. \u91cc\u9762\u6709\u884c\u4ee3\u7801 `self.__init__(obj, *args, **kwargs)` \u5373Mymate.__init__(People,*args,**kwargs) \"\"\" class People ( object, metaclass = Mymeta ) : def __init__ ( self, name, age ) : self.name = name self.age = age \u5143\u7c7b\u4e2d\u7684\u4e09\u4e2a\u9b54\u6cd5\u65b9\u6cd5. __new__ -- self\u6307\u5143\u7c7b \u8be5\u65b9\u6cd5\u4e0d\u662f\u7ed1\u5b9a\u65b9\u6cd5 __init__ __call__ -- self\u6307\u7c7b \u5bf9class_dic\u7684\u64cd\u4f5c\u5728__new__\u4e2d\u8fdb\u884c __init__\u4e0d\u4f1a\u5bf9class_dic\u8fdb\u884c\u6709\u6240\u64cd\u4f5c \u521b\u5efa\u67d0\u4e2a\u5b9e\u4f8b\u4f5c\u4e3a\u7c7b\u7684\u4e00\u4e2a\u5c5e\u6027 ( \u5373\u5b9e\u73b0\u5355\u4f8b ) \u5728__init__\u4e2d\u8fdb\u884c \u5373\u4e3a\u7c7b\u521b\u5efa\u72ec\u6709\u7684\u5c5e\u6027 __call__ \u662f\u521b\u5efa\u5b9e\u4f8b\u7684 \u4f1a\u7ecf\u5386 \u521b\u5efa\u7a7a\u5bf9\u8c61\u3001\u7a7a\u5bf9\u8c61\u521d\u59cb\u5316\u4e24\u4e2a\u6b65\u9aa4 \u8c03\u7528\u7c7b\u4ea7\u751f\u5b9e\u4f8b \u9700\u8981\u6267\u884c\u7c7b\u4e2d\u7684__new__\u65b9\u6cd5\u4ea7\u751f\u4e00\u4e2a\u7a7a\u5b9e\u4f8b\u5bf9\u8c61,\u518d\u6267\u884c\u7c7b\u4e2d\u7684__init__\u65b9\u6cd5\u5b9e\u73b0\u5bf9\u8be5\u5b9e\u4f8b\u5bf9\u8c61\u521d\u59cb\u5316,\u4e5f\u5c31\u662f\u4e3a\u8be5\u5b9e\u4f8b\u5bf9\u8c61\u5b9a\u5236\u72ec\u6709\u7684\u5c5e\u6027 ; \u7c7b\u6bd4\u8fc7\u6765, \u8c03\u7528\u5143\u7c7b\u521b\u5efa\u7c7b,\u5143\u7c7b\u4e2d\u7684__new__\u65b9\u6cd5\u5df2\u7ecf\u5b9e\u73b0\u4e86\u5bf9\u7c7b\u7684\u521b\u5efa, __init__\u662f\u4e3a\u4e86\u7ed9\u521b\u5efa\u7684\u7c7b\u6dfb\u52a0\u5c5e\u6027 ( \u53ef\u4ee5\u7528\u4e8e\u5b9e\u73b0\u5355\u4f8b ) \u6ce8\u610f,new\u91cc\u5fc5\u987b\u8fd4\u56de\u521b\u5efa\u7684\u5b9e\u4f8b,\u4e0d\u7136new\u8fd4\u56de\u5565,\u5b9e\u4f8b\u5c31\u53d8\u6210\u4e86\u5565 metaclass\u5bf9\u7c7b\u64cd\u4f5c\u9700\u8981\u5728\u5143\u7c7bnew\u91cc\u64cd\u4f5c","title":"\u5143\u7c7b"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1_%E7%BB%A7%E6%89%BF%E5%92%8C%E7%BB%84%E5%90%88/","text":"\u65b0\u5f0f\u7c7b\u4e0e\u7ecf\u5178\u7c7b \u00b6 \u7ee7\u627f\u662f\u4e00\u79cd\u65b0\u5efa\u7c7b\u7684\u65b9\u5f0f,\u65b0\u5efa\u7684\u7c7b\u79f0\u4e3a \u5b50\u7c7b /\u6d3e\u751f\u7c7b ,\u88ab\u7ee7\u627f\u7684\u7c7b\u79f0\u4e3a \u7236\u7c7b /\u57fa\u7c7b/\u8d85\u7c7b \u5728python\u4e2d\u652f\u6301 \u4e00\u4e2a\u7c7b\u540c\u65f6\u7ee7\u627f\u591a\u4e2a\u7236\u7c7b \u7ee7\u627f\u7684\u7279\u6027: \u5b50\u7c7b\u4f1a \u2018\u9057\u4f20\u2019 \u7236\u7c7b\u7684\u5c5e\u6027 \u7ee7\u627f\u7684\u597d\u5904: \u89e3\u51b3\u4ee3\u7801\u91cd\u7528\u7684\u95ee\u9898 \u53ef\u4ee5\u51cf\u5c11\u4ee3\u7801\u7684 \u5197\u4f59 . \u5f3a\u8c03! \u7ee7\u627f\u662f\u7c7b\u4e0e\u7c7b\u4e4b\u95f4\u7684\u5173\u7cfb \u65b0\u5f0f\u7c7b : \u4f46\u51e1\u7ee7\u627f\u4e86object\u7c7b\u7684 \u7c7b\u4ee5\u53ca\u8be5\u7c7b\u7684\u5b50\u7c7b \u90fd\u662f\u65b0\u5f0f\u7c7b. \u5728python3\u4e2d,\u5982\u679c\u4e00\u4e2a\u7c7b\u6ca1\u6709\u7ee7\u627f\u4efb\u4f55\u7c7b,\u90a3\u4e48\u9ed8\u8ba4\u7ee7\u627fobject\u7c7b \u56e0\u800c \u5728python3\u4e2d\u7684\u7c7b\u90fd\u662f\u65b0\u5f0f\u7c7b \u7ecf\u5178\u7c7b : \u6ca1\u6709\u7ee7\u627fobject\u7c7b\u7684 \u7c7b\u4ee5\u53ca\u8be5\u7c7b\u7684\u5b50\u7c7b \u90fd\u662f\u7ecf\u5178\u7c7b \u5728python2\u4e2d,\u5982\u679c\u4e00\u4e2a\u7c7b\u6ca1\u6709\u7ee7\u627f\u4efb\u4f55\u7c7b,\u4e0d\u4f1a\u9ed8\u8ba4\u7ee7\u627fobject\u7c7b \u56e0\u800c \u53ea\u6709\u5728python2\u4e2d\u624d\u533a\u522b\u65b0\u5f0f\u7c7b\u4e0e\u7ecf\u5178\u7c7b Ps: object\u7c7b\u662f\u6240\u6709python\u7c7b\u7684\u57fa\u7c7b,\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5e38\u89c1\u65b9\u6cd5(\u5982\u6253\u5370\u5bf9\u8c61\u65f6\u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u5185\u7f6e\u65b9\u6cd5__str__). class Parent1 : pass class Parent2 : pass class Sub1 ( Parent1 , Parent2 ): pass # __bases__\u5217\u51fa\u5f53\u524d\u7c7b\u7ee7\u627f\u7684\u6240\u6709\u7236\u7c7b __base__\u53ea\u67e5\u770b\u4ece\u5de6\u5230\u53f3\u7ee7\u627f\u7684\u7b2c\u4e00\u4e2a\u7236\u7c7b print ( Sub1 . __bases__ ) # (<class '__main__.Parent1'>, <class '__main__.Parent2'>) print ( Sub1 . __base__ ) # <class '__main__.Parent1'> print ( Parent1 . __bases__ ) # (<class 'object'>,) Python3\u4e2d\u9ed8\u8ba4\u7ee7\u627fobject\u7c7b \u7ee7\u627f \u00b6 \u2606\u7ee7\u627f\u4e0e\u62bd\u8c61 \u00b6 \u62bd\u8c61\u5c31\u662f\u627e\u591a\u4e2a\u4e8b\u7269\u76f8\u4f3c\u4e4b\u5904\u7684\u8fc7\u7a0b. \u627e\u5bf9\u8c61\u7684\u76f8\u4f3c\u5730\u65b9\u5c31\u5f97\u5230\u4e86\u7c7b,\u627e\u7c7b\u7684\u76f8\u4f3c\u5904\u5c31\u5f97\u5230\u4e86\u7236\u7c7b. ( \u76ee\u7684\u5728\u4e8e\u51cf\u5c11\u4ee3\u7801\u7684\u5197\u4f59.. ) \u2606\u7ee7\u627f\u4e0e\u91cd\u7528\u6027 \u00b6 \u7ee7\u627f\u662f\u5f3a\u8026\u5408 \u00b6 OldboyStudent\u7c7b\u4e2d\u5e94\u8be5\u653e\u5b66\u751f\u76f8\u4f3c\u7684\u7279\u5f81\u4e0e\u6280\u80fd,\u4ee5\u53ca\u6bcf\u4e2a\u5b66\u751f\u72ec\u6709\u7684\u7279\u5f81 OldboyTeacher\u7c7b\u540c\u7406. \u4f46\u8fd9\u4e24\u4e2a\u7c7b\u6709\u91cd\u590d\u7684\u4ee3\u7801(\u76f8\u4f3c\u4e4b\u5904), eg: school\u5c5e\u6027 \u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684name\u3001age\u3001sex \u521b\u5efa\u4e00\u4e2aOldboyPeople\u7c7b\u5b58\u653e\u91cd\u590d\u4ee3\u7801,OldboyStudent\u548cOldboyTeacher\u901a\u8fc7 \u7ee7\u627f OldboyPeople\u7c7b. \u8fdb\u800c\u53ef\u4ee5\u4f7f\u7528\u7236\u7c7b\u4e2d\u7684\u6240\u6709\u5c5e\u6027( \u6570\u636e\u5c5e\u6027\u548c\u51fd\u6570\u5c5e\u6027 ). \u5b9e\u73b0\u4ee3\u7801\u91cd\u7528 , \u51cf\u5c11\u7c7b\u4e0e\u7c7b\u4e4b\u95f4\u7684\u4ee3\u7801\u5197\u4f59.. \u9898\u5916\u8bdd: \u7ee7\u627f\u5b9e\u5219\u5c06\u7c7b\u5f3a\u8026\u5408\u5728\u4e86\u4e00\u8d77,\u4e0d\u8981\u8ba9\u7ee7\u627f\u5173\u7cfb\u5957\u592a\u591a!!! \u66f4\u5e94\u8be5\u63a8\u5d07\u89e3\u8026\u5408\u7684\u601d\u60f3! \u6ce8\u610f\u70b9 : OldboyPeople.__init__(self, name, age, sex) \u8fd9\u884c\u4ee3\u7801\u8ddf\u7ee7\u627f\u6ca1\u6709\u534a\u6bdb\u94b1\u5173\u7cfb class OldboyPeople : school = 'oldboy' def __init__ ( self , name , age , sex ): self . name = name self . age = age self . sex = sex class OldboyStudent ( OldboyPeople ): def choose_course ( self ): # -- \u9009\u8bfe print ( ' %s is choosing course..' % self . name ) class OldboyTeacher ( OldboyPeople ): def __init__ ( self , name , age , sex , level ): # \u518d\u6b21\u5f3a\u8c03,\u901a\u8fc7\u7c7b\u8c03\u7528\u7684\u65b9\u6cd5\u5c31\u662f\u4e00\u4e2a\u666e\u901a\u51fd\u6570,\u6709\u51e0\u4e2a\u53c2\u6570\u5c31\u4f20\u51e0\u4e2a\u53c2\u6570 OldboyPeople . __init__ ( self , name , age , sex ) # \u8fd9\u884c\u4ee3\u7801\u8ddf\u7ee7\u627f\u6ca1\u6709\u534a\u6bdb\u94b1\u5173\u7cfb self . level = level # \u4f20\u5165stu_obj\u53c2\u6570 \u8868\u660e\u7ed9\u8c01\u6253\u5206 \u5b9e\u73b0\u4e86\u5b9e\u4f8b\u5316\u5bf9\u8c61\u4e4b\u95f4\u7684\u4ea4\u4e92 def score ( self , stu_obj , num ): # -- \u6253\u5206 stu_obj . score = num print ( ' %s \u6b63\u5728\u4e3a\u5b66\u751f %s \u6253\u5206,\u5206\u6570\u4e3a[ %s ]\u5206..' % ( self . name , stu_obj . name , num )) stu1 = OldboyStudent ( '\u5c0f\u5ddd' , 20 , 'male' ) teacher1 = OldboyTeacher ( 'egon' , 18 , 'male' , 10 ) # \u5b9e\u4f8b\u5316\u5bf9\u8c61\u67e5\u627e\u5c5e\u6027\u7684\u987a\u5e8f: \u5b9e\u4f8b\u5316\u5bf9\u8c61\u81ea\u5df1 - \u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684\u7c7b - \u7236\u7c7b print ( stu1 . school ) # oldboy stu1 . choose_course () # \u5c0f\u5ddd is choosing course.. teacher1 . score ( stu1 , 99 ) # egon\u6b63\u5728\u4e3a\u5b66\u751f\u5c0f\u5ddd\u6253\u5206,\u5206\u6570\u4e3a[99]\u5206.. # 'score': 99 \u5b9e\u4f8b\u5316\u5bf9\u8c61\u4e4b\u95f4\u4ea4\u4e92\u7684\u7ed3\u679c print ( stu1 . __dict__ ) # {'name': '\u5c0f\u5ddd', 'age': 20, 'sex': 'male', 'score': 99} \u5c5e\u6027\u67e5\u627e\u987a\u5e8f \u00b6 !!! \u5b9e\u4f8b\u5316\u5bf9\u8c61\u67e5\u627e\u5c5e\u6027\u7684\u987a\u5e8f : \u5b9e\u4f8b\u5316\u5bf9\u8c61\u81ea\u5df1 - \u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684\u7c7b - \u7236\u7c7b - ... - \u76f4\u5230\u9876\u7ea7\u7236\u7c7bObject\u7c7b \u8865\u5145: getattr\u65b9\u6cd5\u7684\u67e5\u627e\u987a\u5e8f\u8ddf\u5b83\u662f\u4e00\u6837\u7684!! \u5206\u6790\u5982\u4e0b : func2\u7684\u67e5\u627e\u987a\u5e8f : obj\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684__dict__\u4e2d\u627e - B\u7c7b - A\u7c7b \u627e\u5230func2 \u6267\u884cfunc2 \u6253\u5370\u4e86'A.func2' self.func1() < \u8fd9\u91cc\u7684self\u5c31\u662f\u5b9e\u4f8b\u5316\u5bf9\u8c61obj > func1\u7684\u67e5\u627e\u987a\u5e8f : obj\u5b9e\u4f8b\u5316\u5bf9\u8c61 - B\u7c7b \u627e\u5230\u4e86func1 \u6267\u884cfunc1 \u6253\u5370\u4e86'B.func1' class A : def func1 ( self ): print ( 'A.func1' ) def func2 ( self ): print ( 'A.func2' ) self . func1 () class B ( A ): def func1 ( self ): print ( 'B.func1' ) obj = B () obj . func2 () # -- \u6ce8\u610f\u8fd9\u91cc\u4f20\u5165\u7684self\u5bf9\u8c61\u662f\u8c01!! \"\"\" A.func2 B.func1 \"\"\" Mixins\u673a\u5236 \u00b6 Python\u63d0\u4f9b\u4e86 Mixins\u673a\u5236 , mixin\u7c7b\u7684\u547d\u540d\u65b9\u5f0f\u4e00\u822c\u4ee5 Mixin, able, ible \u4e3a\u540e\u7f00, \u8868\u660e\u8fd9\u4e2a\u7c7b\u662f\u4e00\u4e2aMixin\u7c7b, \u8868\u793a\u6df7\u5165(mix-in), \u8fd9\u4e2a\u7c7b\u662f\u4f5c\u4e3a\u529f\u80fd\u6dfb\u52a0\u5230\u5b50\u7c7b\u4e2d, \u800c\u4e0d\u662f\u4f5c\u4e3a\u7236\u7c7b, \u5b83\u7684\u4f5c\u7528\u540cJava\u4e2d\u7684\u63a5\u53e3!! \u4f46\u4f7f\u7528\u8be5\u673a\u5236\u672c\u8d28\u8fd8\u662f\u591a\u7ee7\u627f.. \u4e00\u4e2a\u7c7b\u53ef\u4ee5\u7ee7\u627f\u591a\u4e2aMixin, \u4e3a\u4e86\u4fdd\u8bc1\u9075\u5faa\u7ee7\u627f\u7684 \u201cis-a\u201d \u539f\u5219, \u53ea\u80fd\u7ee7\u627f\u4e00\u4e2a\u6807\u8bc6\u5176\u5f52\u5c5e\u542b\u4e49\u7684\u7236\u7c7b \u5b50\u7c7b\u5373\u4fbf\u6ca1\u6709\u7ee7\u627f\u8fd9\u4e2aMixin\u7c7b,\u4e5f\u7167\u6837\u53ef\u4ee5\u5de5\u4f5c,\u5c31\u662f\u7f3a\u5c11\u4e86\u67d0\u4e2a\u529f\u80fd(\u6bd4\u5982\u98de\u673a\u7167\u6837\u53ef\u4ee5\u8f7d\u5ba2,\u5c31\u662f\u4e0d\u80fd\u98de\u4e86) \u6d3e\u751f \u00b6 \u5728\u5b50\u7c7b\u4e2d\u5b9a\u4e49\u7684\u5c5e\u6027\u79f0\u4e3a\u6d3e\u751f \u5b50\u7c7b\u53ef\u4ee5\u6dfb\u52a0\u81ea\u5df1\u65b0\u7684\u5c5e\u6027\u6216\u8005\u91cd\u65b0\u5b9a\u4e49\u7ee7\u627f\u5230\u7684\u67d0\u4e9b\u5c5e\u6027(\u4e0d\u4f1a\u5f71\u54cd\u5230\u7236\u7c7b), \u5728\u4f7f\u7528\u67d0\u5c5e\u6027\u65f6,\u82e5\u5b50\u7c7b\u4e2d\u5b58\u5728,\u5219\u4ee5\u5b50\u7c7b\u5b58\u5728\u7684\u4e3a\u51c6 \u5c0f\u58f0bb,\u611f\u89c9\u5c31\u662f\u53ea\u8981\u662f\u5b50\u7c7b,\u90a3\u4e48\u5b50\u7c7b\u4e2d\u5b9a\u4e49\u7684\u6240\u6709\u4e1c\u897f\u90fd\u662f '\u6d3e\u751f' \u51fa\u6765\u7684...\u8fd9\u6982\u5ff5\u5f88\u9b54\u5e7b.\u8fd9\u4e5f\u5c31\u662f\u5b50\u7c7b\u4e5f\u88ab\u79f0\u4f5c\u6d3e\u751f\u7c7b\u7684\u539f\u56e0\u5427 \u5728\u5b50\u7c7b\u6d3e\u751f\u51fa\u6765\u7684\u529f\u80fd\u4e2d\u91cd\u7528\u7236\u7c7b\u529f\u80fd\u7684\u65b9\u5f0f\u6709\u4e24\u79cd : 1> \u6307\u540d\u9053\u59d3\u8bbf\u95ee\u67d0\u4e00\u4e2a\u7c7b\u7684\u51fd\u6570: \u8be5\u65b9\u5f0f\u4e0e\u7ee7\u627f\u65e0\u5173 eg: \u524d\u9762\u7684\u4ee3\u7801 OldboyPeople.__init__(self, name, age, sex) 2> super() \u7ec4\u5408 \u00b6 \u2606\u91cd\u7528\u6027 \u00b6 \u7ec4\u5408\u5c31\u662f\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u5177\u5907\u67d0\u4e00\u4e2a\u5c5e\u6027, \u8be5\u5c5e\u6027\u7684\u503c\u662f\u6307\u5411\u53e6\u5916\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61 . \u56de\u987e : \u7528\u7ee7\u627f\u6765\u89e3\u51b3\u4ee3\u7801\u7684\u5197\u4f59. \u3010\u7ec4\u5408\u548c\u7ee7\u627f\u90fd\u662f\u4e3a\u4e86\u89e3\u51b3\u7c7b\u4e0e\u7c7b\u76f4\u63a5\u5197\u4f59\u7684\u95ee\u9898\u7684\uff01\uff01\uff01\u3011 \u7f8a\u3001\u725b\u3001\u72d7\u90fd\u662f\u52a8\u7269.\u662f\u4e00\u79cd\u4ece\u5c5e\u5173\u7cfb.\u6240\u4ee5\u7f8a\u7c7b\u725b\u7c7b\u72d7\u7c7b\u90fd\u7ee7\u627f\u52a8\u7269\u7c7b. \u5b66\u6821\u91cc\u7684 \u5b66\u751f\u548c\u8001\u5e08 \u90fd\u662f(\u5c5e\u4e8e)\u5b66\u6821\u7684\u4eba. \u6240\u4ee5 OldboyStudent\u548cOldboyTeacher\u7c7b \u7ee7\u627f OldboyPeople. \u9009\u8bfe\u7cfb\u7edf\u4e2d\u80af\u5b9a\u9700\u8981\u4e00\u4e2a'\u8bfe\u7a0b'\u7684\u89d2\u8272. \u8001\u5e08\u6388\u8bfe, \u5b66\u751f\u9009\u8bfe.. \u8001\u5e08\u8ddf\u5b66\u751f\u90fd\u8981\u5173\u8054\u8bfe\u7a0b. \u5b66\u751f\u548c\u8001\u5e08\u8ddf\u5b66\u6821\u662f\u4ece\u5c5e\u5173\u7cfb (\u4ec0\u4e48 '\u662f' \u4ec0\u4e48), \u90a3\u4e48\u5b66\u751f\u548c\u8001\u5e08\u8ddf\u8bfe\u7a0b\u662f\u4ec0\u4e48\u5173\u7cfb\uff1f \u9996\u5148\u6211\u4eec\u60f3\u5230\u7684\u662f \u5b66\u751f\u9009\u8bfe\u540e\u6709\u4e86\u4e00\u95e8\u8bfe\u7a0b,\u5373\u6709\u4e86\u8bfe\u7a0b\u7684\u76f8\u5173\u4fe1\u606f, \u662f \u4ec0\u4e48 '\u6709' \u4ec0\u4e48\u7684\u5173\u7cfb ... \u8fd9\u4e9b\u8bfe\u7a0b\u4fe1\u606f\u662f \u5b66\u751f\u5bf9\u8c61\u72ec\u6709\u7684 ,\u6240\u4ee5\u9700\u8981\u5c06\u8bfe\u7a0b\u76f8\u5173\u4fe1\u606f\u5f80 __init__ \u91cc\u9762\u653e. \u8001\u5e08\u540c\u7406. class OldboyPeople : school = 'oldboy' def __init__ ( self , name , age , sex ): self . name = name self . age = age self . sex = sex class OldboyStudent ( OldboyPeople ): def __init__ ( self , name , age , sex , stu_id , course_name , course_period , course_price ): OldboyPeople . __init__ ( self , name , age , sex ) self . stu_id = stu_id # \u5b9a\u5236\u8bfe\u7a0b\u76f8\u5173\u5c5e\u6027/\u6570\u636e self . course_name = course_name self . course_period = course_period self . course_price = course_price class OldboyTeacher ( OldboyPeople ): def __init__ ( self , name , age , sex , level , course_name , course_period , course_price ): OldboyPeople . __init__ ( self , name , age , sex ) self . level = level # \u5b9a\u5236\u8bfe\u7a0b\u76f8\u5173\u5c5e\u6027/\u6570\u636e self . course_name = course_name self . course_period = course_period self . course_price = course_price \u51fa\u73b0\u4e86\u4ee3\u7801\u91cd\u7528\u7684\u95ee\u9898, \u73b0\u9636\u6bb5\u7684\u7b2c\u4e00\u53cd\u5e94\u662f\u5c06\u5176\u653e\u5230\u7236\u7c7bOldboyPeople\u91cc. \u4f46\u4e0d\u5408\u7406 , \u4e0d\u662f\u5b66\u6821\u7684\u4eba\u90fd\u9700\u8981\u6709\u8bfe\u7a0b\u7684\u76f8\u5173\u4fe1\u606f... \u6bd4\u5982 \u7ba1\u7406\u5458\u662f\u5b66\u6821\u7684\u4eba\u4f46\u4e0d\u9700\u8981\u4e0e\u8bfe\u7a0b\u5173\u8054. Ps: \u4ed4\u7ec6\u60f3\u60f3, \u5c06\u8bfe\u7a0b\u4fe1\u606f\u5199\u5230 __init__ \u91cc\u4e5f\u6709\u70b9\u4e0d\u5408\u7406, \u5b66\u751f\u5bf9\u8c61\u4e0d\u662f\u4e00\u9020\u51fa\u6765\u5c31\u8981\u9009\u8bfe. \u2606\u7ec4\u5408 \u00b6 \u89e3\u51b3\u529e\u6cd5: \u5c06\u8bfe\u7a0b\u81ea\u6210\u4e00\u4e2a\u7c7b\uff01 \u7ec4\u5408\u5c31\u662f\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u5177\u5907\u67d0\u4e00\u4e2a\u5c5e\u6027, \u8be5\u5c5e\u6027\u7684\u503c\u662f\u6307\u5411\u53e6\u5916\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61 . class Course : def __init__ ( self , name , period , price ): self . name = name self . period = period self . price = price def tell_info ( self ): print ( f '\u8bfe\u7a0b\u540d: { self . name } \u5468\u671f: { self . period } \u4ef7\u683c: { self . price } ' ) class OldboyPeople : school = 'oldboy' def __init__ ( self , name , age , sex ): self . name = name self . age = age self . sex = sex class OldboyStudent ( OldboyPeople ): def __init__ ( self , name , age , sex , stu_id ): OldboyPeople . __init__ ( self , name , age , sex ) self . stu_id = stu_id self . choice_course = [] def choose_course ( self ): print ( ' %s is choosing course..' % self . name ) class OldboyTeacher ( OldboyPeople ): def __init__ ( self , name , age , sex , level ): OldboyPeople . __init__ ( self , name , age , sex ) self . level = level self . teach_course = [] def score ( self , stu_obj , num ): stu_obj . score = num print ( ' %s \u6b63\u5728\u4e3a\u5b66\u751f %s \u6253\u5206,\u5206\u6570\u4e3a[ %s ]\u5206..' % ( self . name , stu_obj . name , num )) python = Course ( 'python\u5168\u6808\u5f00\u53d1' , '5month' , 10000 ) linux = Course ( 'linux\u8fd0\u7ef4' , '4month' , 8000 ) stu1 = OldboyStudent ( '\u5c0f\u5ddd' , 20 , 'male' , '001' ) teacher1 = OldboyTeacher ( 'egon' , 18 , 'male' , 10 ) # -- \u5c06\u5b66\u751f\u3001\u8001\u5e08\u4e0e\u8bfe\u7a0b\u5173\u8054/\u7ec4\u5408 \"\"\"\u8fd9\u79cd\u65b9\u5f0f \u6bcf\u4e2a\u5b66\u751f\u53ea\u80fd\u9009\u4e00\u95e8\u8bfe \u6bcf\u4e2a\u8001\u5e08\u53ea\u80fd\u6559\u4e00\u95e8\u8bfe stu1.course = python teacher1.course = linux stu1.course.tell_info() teacher1.course.tell_info() \"\"\" # PS:\u8fd8\u53ef\u4ee5\u6269\u5c55 \u8001\u5e08\u6559\u5b66\u54ea\u4e9b\u5b66\u751f # \u5173\u952e\u4ee3\u7801 self.teach_stu = []; teacher1.teach_stu.append(stu1) # \u5b66\u751f\u53ef\u4ee5\u9009\u591a\u95e8\u8bfe \u8001\u5e08\u4e5f\u53ef\u4ee5\u6559\u591a\u95e8\u8bfe stu1 . choice_course . append ( python ) stu1 . choice_course . append ( linux ) teacher1 . teach_course . append ( linux ) for course_obj in stu1 . choice_course : course_obj . tell_info () \u83f1\u5f62\u7ee7\u627f\u95ee\u9898 \u00b6 \u6b64\u5c0f\u8282\u7684\u7406\u8bba\u77e5\u8bc6\u6d89\u53capython\u7ee7\u627f\u5e95\u5c42\u5b9e\u73b0\u539f\u7406. \u9762\u8bd5\u5f88\u7231\u95ee\u54e6.. \u2606\u83f1\u5f62\u7ee7\u627f \u00b6 \u83f1\u5f62\u7ee7\u627f : \u5f53\u4e00\u4e2a\u5b50\u7c7b\u7ee7\u627f\u591a\u4e2a\u7236\u7c7b\u65f6, \u591a\u4e2a\u7236\u7c7b\u6700\u7ec8\u7ee7\u627f\u4e86\u540c\u4e00\u4e2a\u7c7b,(\u591a\u4e2a\u7c7b\u7684\u5206\u652f\u6c47\u805a\u5230\u540c\u4e00\u70b9\u5566). \u7ecf\u5178\u7c7b\u4e0b\u67e5\u627e\u5c5e\u6027: \u6df1\u5ea6\u4f18\u5148\u67e5\u627e \u65b0\u5f0f\u7c7b\u4e0b\u67e5\u627e\u5c5e\u6027: \u5e7f\u5ea6\u4f18\u5148\u67e5\u627e \u2606c3\u7b97\u6cd5\u4e0emro \u00b6 \u5728\u65b0\u5f0f\u7c7b\u4e2d, python\u4e3a\u5176\u5185\u7f6e\u4e86\u4e00\u4e2amro\u65b9\u6cd5. >>> A . mro () # -- \u7b49\u540c\u4e8eA.__mro__ [ < class ' __main__ . A '>, <class ' __main__ . B '>, <class ' __main__ . E '>, <class ' __main__ . C '>, <class ' __main__ . F '>, <class ' __main__ . D '>, <class ' __main__ . G '>, <class ' object '>] \u8fd9\u4e2amro\u5217\u8868\u7684\u6784\u9020\u662f\u901a\u8fc7\u4e00\u4e2aC3\u7ebf\u6027\u5316\u7b97\u6cd5\u6765\u5b9e\u73b0\u7684. \u5c5e\u6027\u67e5\u627e\u9075\u5faa\u4e09\u6761\u51c6\u5219: 1> \u5b50\u7c7b\u4f1a\u5148\u4e8e\u7236\u7c7b\u88ab\u67e5\u627e 2> \u591a\u4e2a\u7236\u7c7b\u4f1a\u6839\u636e\u5b83\u4eec\u5728\u5217\u8868\u4e2d\u7684\u987a\u5e8f\u88ab\u67e5\u627e 3> \u82e5\u7b2c\u4e00\u4e2a\u7236\u7c7b\u548c\u7b2c\u4e8c\u4e2a\u7236\u7c7b\u90fd\u5b58\u5728\u5408\u6cd5\u7684\u9009\u62e9, \u9009\u62e9\u7b2c\u4e00\u4e2a\u7236\u7c7b. super \u00b6 \u5728\u5b50\u7c7b\u6d3e\u751f\u51fa\u6765\u7684\u529f\u80fd\u4e2d\u91cd\u7528\u7236\u7c7b\u529f\u80fd\u7684\u65b9\u5f0f\u6709\u4e24\u79cd: \u65b9\u5f0f\u4e00 : \u6307\u540d\u9053\u59d3\u8bbf\u95ee\u67d0\u4e00\u4e2a\u7c7b\u7684\u51fd\u6570: \u8be5\u65b9\u5f0f\u4e0e\u7ee7\u627f\u65e0\u5173 \u7c7b\u540d.\u51fd\u6570\u540d \u65b9\u5f0f\u4e8c : \u4e25\u683c\u4f9d\u8d56mro\u7ee7\u627f\u5c5e\u6027\u67e5\u627e\u5173\u7cfb super() \u4f1a\u5f97\u5230 \u4e00\u4e2a\u7279\u6b8a\u7684\u5bf9\u8c61 \u7528\u4e8e \u4e13\u95e8\u8bbf\u95ee\u7236\u7c7b \u4e2d\u7684\u5c5e\u6027.. (\u6309\u7167\u7ee7\u627f\u5173\u7cfb \u8be5\u5bf9\u8c61\u4e13\u95e8\u4ece\u5f53\u524d\u7236\u7c7b\u5f00\u59cb\u5f80\u540e\u67e5\u627e) super().__init__() \u56e0\u4e3asuper()\u662f\u4e00\u4e2a\u5bf9\u8c61,\u6240\u4ee5\u6b64\u5904\u662f \u7ed1\u5b9a\u65b9\u6cd5 , \u4e0d\u7528\u5355\u72ec\u4e3aself\u4f20\u503c\uff01\uff01 class People : def __init__ ( self , name , age , sex ): self . name = name self . age = age self . sex = sex class Student ( People ): def __init__ ( self , name , age , sex , stu_id ): # super()\u8fd9\u4e00\u7279\u6b8a\u5bf9\u8c61\u7528\u4e8e\u4e13\u95e8\u8bbf\u95ee\u7236\u7c7b\u4e2d\u7684\u5c5e\u6027 # <class '__main__.People'>, <class 'object'> \u90fd\u662f\u5f53\u524dStudent\u7c7b\u7684\u7236\u7c7b super () . __init__ ( name , age , sex ) self . stu_id = stu_id stu1 = Student ( 'egon' , 19 , 'male' , '007' ) # {'name': 'egon', 'age': 19, 'sex': 'male', 'stu_id': '007'} print ( stu1 . __dict__ ) # [<class '__main__.Student'>, <class '__main__.People'>, <class 'object'>] print ( Student . mro ()) super()\u662f\u7b80\u5199,\u5b8c\u6574\u7684\u5199\u6cd5\u662f super(Student,self).__init__(name, age, sex) ,\u5728python2\u4e2d\u9700\u8981\u5199\u5b8c\u6574.. \u89e3\u6790 super(Student,self) \u7684\u53c2\u6570 : \u7b2c\u4e00\u4e2a\u53c2\u6570:: \u8868\u793a\u6839\u636e\u6307\u5b9a\u7684\u7c7b(eg Student\u7c7b),\u5728\u7ee7\u627f\u94fe\u4e2d \u83b7\u53d6\u5b83\u201cStudent\u201d\u7684 [\u4e0b\u4e00\u4e2a] \u7c7b . \u4e0d\u5199\u9ed8\u8ba4\u5c31\u662fsuper()\u6240\u5728\u7684\u5f53\u524d\u7c7b \u7b2c\u4e8c\u4e2a\u53c2\u6570:: \u8868\u793a\u83b7\u53d6self\u5bf9\u8c61\u6240\u5728\u7684\u7c7b\u7684mro\u7ee7\u627f\u94fe \u5373 type(self).__mro__ \u7b80\u800c\u8a00\u4e4b, super\u4e0d\u4e00\u5b9a\u5c31\u662f\u7236\u7c7b, \u800c\u662f\u8981\u770b\u91cc\u9762\u7684self\u662f\u8c01. super(xxx, self) \u4e00\u5b9a\u662ftype(self)\u5bf9\u5e94\u7684mro\u4e2d, xxx\u7684\u4e0b\u4e00\u4e2a\u7c7b. \u6ce8\u610f\u54e6\uff01 \u5373\u4f7f\u6ca1\u6709\u76f4\u63a5\u7ee7\u627f\u5173\u7cfb,super\u4ecd\u7136\u4f1a\u6309\u7167mro\u7ee7\u7eed\u5f80\u540e\u67e5\u627e! class A : def f1 ( self ): print ( 'A.f1' ) class B : def f2 ( self ): # \u8fd9\u4e2asuper\u662f\u4ee5C\u7c7b\u89e6\u53d1\u7684\u67e5\u627e,\u5e94\u8be5\u9075\u5faaC\u7684mro 'C-B-A-object' # \u4f46\u5230\u8fd9\u91cc,mro\u67e5\u627e\u8fdb\u884c\u5230\u4e86B # \u56e0\u800c\u8fd9\u91cc\u53ef\u4ee5\u5199\u6210 super(B, self).f1() self\u662fC\u7c7b\u7684mro\u7ee7\u627f\u94fe # \u5f80\u540e\u5373\u67e5\u627eC\u7c7bmro\u7ee7\u627f\u94fe\u4e2dB\u540e\u9762\u7684A\u7c7b\u662f\u5426\u6709f1\u65b9\u6cd5 super () . f1 () print ( 'B.f2' ) class C ( B , A ): def f1 (): print ( 'C.f1' ) # [<class '__main__.C'>, <class '__main__.B'>, <class '__main__.A'>, <class 'object'>] print ( C . mro ()) obj = C () obj . f2 () # obj - C - B f2() \"\"\" A.f1 B.f2 \"\"\" class B : def run ( self ): print ( 'run B' ) class A ( B ): def func1 ( self ): super ( A , self ) . run () def run ( self ): print ( 'run A' ) a = A () a . func1 () # -- run B","title":"\u7ee7\u627f\u548c\u7ec4\u5408"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1_%E7%BB%A7%E6%89%BF%E5%92%8C%E7%BB%84%E5%90%88/#_1","text":"\u7ee7\u627f\u662f\u4e00\u79cd\u65b0\u5efa\u7c7b\u7684\u65b9\u5f0f,\u65b0\u5efa\u7684\u7c7b\u79f0\u4e3a \u5b50\u7c7b /\u6d3e\u751f\u7c7b ,\u88ab\u7ee7\u627f\u7684\u7c7b\u79f0\u4e3a \u7236\u7c7b /\u57fa\u7c7b/\u8d85\u7c7b \u5728python\u4e2d\u652f\u6301 \u4e00\u4e2a\u7c7b\u540c\u65f6\u7ee7\u627f\u591a\u4e2a\u7236\u7c7b \u7ee7\u627f\u7684\u7279\u6027: \u5b50\u7c7b\u4f1a \u2018\u9057\u4f20\u2019 \u7236\u7c7b\u7684\u5c5e\u6027 \u7ee7\u627f\u7684\u597d\u5904: \u89e3\u51b3\u4ee3\u7801\u91cd\u7528\u7684\u95ee\u9898 \u53ef\u4ee5\u51cf\u5c11\u4ee3\u7801\u7684 \u5197\u4f59 . \u5f3a\u8c03! \u7ee7\u627f\u662f\u7c7b\u4e0e\u7c7b\u4e4b\u95f4\u7684\u5173\u7cfb \u65b0\u5f0f\u7c7b : \u4f46\u51e1\u7ee7\u627f\u4e86object\u7c7b\u7684 \u7c7b\u4ee5\u53ca\u8be5\u7c7b\u7684\u5b50\u7c7b \u90fd\u662f\u65b0\u5f0f\u7c7b. \u5728python3\u4e2d,\u5982\u679c\u4e00\u4e2a\u7c7b\u6ca1\u6709\u7ee7\u627f\u4efb\u4f55\u7c7b,\u90a3\u4e48\u9ed8\u8ba4\u7ee7\u627fobject\u7c7b \u56e0\u800c \u5728python3\u4e2d\u7684\u7c7b\u90fd\u662f\u65b0\u5f0f\u7c7b \u7ecf\u5178\u7c7b : \u6ca1\u6709\u7ee7\u627fobject\u7c7b\u7684 \u7c7b\u4ee5\u53ca\u8be5\u7c7b\u7684\u5b50\u7c7b \u90fd\u662f\u7ecf\u5178\u7c7b \u5728python2\u4e2d,\u5982\u679c\u4e00\u4e2a\u7c7b\u6ca1\u6709\u7ee7\u627f\u4efb\u4f55\u7c7b,\u4e0d\u4f1a\u9ed8\u8ba4\u7ee7\u627fobject\u7c7b \u56e0\u800c \u53ea\u6709\u5728python2\u4e2d\u624d\u533a\u522b\u65b0\u5f0f\u7c7b\u4e0e\u7ecf\u5178\u7c7b Ps: object\u7c7b\u662f\u6240\u6709python\u7c7b\u7684\u57fa\u7c7b,\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5e38\u89c1\u65b9\u6cd5(\u5982\u6253\u5370\u5bf9\u8c61\u65f6\u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u5185\u7f6e\u65b9\u6cd5__str__). class Parent1 : pass class Parent2 : pass class Sub1 ( Parent1 , Parent2 ): pass # __bases__\u5217\u51fa\u5f53\u524d\u7c7b\u7ee7\u627f\u7684\u6240\u6709\u7236\u7c7b __base__\u53ea\u67e5\u770b\u4ece\u5de6\u5230\u53f3\u7ee7\u627f\u7684\u7b2c\u4e00\u4e2a\u7236\u7c7b print ( Sub1 . __bases__ ) # (<class '__main__.Parent1'>, <class '__main__.Parent2'>) print ( Sub1 . __base__ ) # <class '__main__.Parent1'> print ( Parent1 . __bases__ ) # (<class 'object'>,) Python3\u4e2d\u9ed8\u8ba4\u7ee7\u627fobject\u7c7b","title":"\u65b0\u5f0f\u7c7b\u4e0e\u7ecf\u5178\u7c7b"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1_%E7%BB%A7%E6%89%BF%E5%92%8C%E7%BB%84%E5%90%88/#_2","text":"","title":"\u7ee7\u627f"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1_%E7%BB%A7%E6%89%BF%E5%92%8C%E7%BB%84%E5%90%88/#_3","text":"\u62bd\u8c61\u5c31\u662f\u627e\u591a\u4e2a\u4e8b\u7269\u76f8\u4f3c\u4e4b\u5904\u7684\u8fc7\u7a0b. \u627e\u5bf9\u8c61\u7684\u76f8\u4f3c\u5730\u65b9\u5c31\u5f97\u5230\u4e86\u7c7b,\u627e\u7c7b\u7684\u76f8\u4f3c\u5904\u5c31\u5f97\u5230\u4e86\u7236\u7c7b. ( \u76ee\u7684\u5728\u4e8e\u51cf\u5c11\u4ee3\u7801\u7684\u5197\u4f59.. )","title":"\u2606\u7ee7\u627f\u4e0e\u62bd\u8c61"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1_%E7%BB%A7%E6%89%BF%E5%92%8C%E7%BB%84%E5%90%88/#_4","text":"","title":"\u2606\u7ee7\u627f\u4e0e\u91cd\u7528\u6027"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1_%E7%BB%A7%E6%89%BF%E5%92%8C%E7%BB%84%E5%90%88/#_5","text":"OldboyStudent\u7c7b\u4e2d\u5e94\u8be5\u653e\u5b66\u751f\u76f8\u4f3c\u7684\u7279\u5f81\u4e0e\u6280\u80fd,\u4ee5\u53ca\u6bcf\u4e2a\u5b66\u751f\u72ec\u6709\u7684\u7279\u5f81 OldboyTeacher\u7c7b\u540c\u7406. \u4f46\u8fd9\u4e24\u4e2a\u7c7b\u6709\u91cd\u590d\u7684\u4ee3\u7801(\u76f8\u4f3c\u4e4b\u5904), eg: school\u5c5e\u6027 \u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684name\u3001age\u3001sex \u521b\u5efa\u4e00\u4e2aOldboyPeople\u7c7b\u5b58\u653e\u91cd\u590d\u4ee3\u7801,OldboyStudent\u548cOldboyTeacher\u901a\u8fc7 \u7ee7\u627f OldboyPeople\u7c7b. \u8fdb\u800c\u53ef\u4ee5\u4f7f\u7528\u7236\u7c7b\u4e2d\u7684\u6240\u6709\u5c5e\u6027( \u6570\u636e\u5c5e\u6027\u548c\u51fd\u6570\u5c5e\u6027 ). \u5b9e\u73b0\u4ee3\u7801\u91cd\u7528 , \u51cf\u5c11\u7c7b\u4e0e\u7c7b\u4e4b\u95f4\u7684\u4ee3\u7801\u5197\u4f59.. \u9898\u5916\u8bdd: \u7ee7\u627f\u5b9e\u5219\u5c06\u7c7b\u5f3a\u8026\u5408\u5728\u4e86\u4e00\u8d77,\u4e0d\u8981\u8ba9\u7ee7\u627f\u5173\u7cfb\u5957\u592a\u591a!!! \u66f4\u5e94\u8be5\u63a8\u5d07\u89e3\u8026\u5408\u7684\u601d\u60f3! \u6ce8\u610f\u70b9 : OldboyPeople.__init__(self, name, age, sex) \u8fd9\u884c\u4ee3\u7801\u8ddf\u7ee7\u627f\u6ca1\u6709\u534a\u6bdb\u94b1\u5173\u7cfb class OldboyPeople : school = 'oldboy' def __init__ ( self , name , age , sex ): self . name = name self . age = age self . sex = sex class OldboyStudent ( OldboyPeople ): def choose_course ( self ): # -- \u9009\u8bfe print ( ' %s is choosing course..' % self . name ) class OldboyTeacher ( OldboyPeople ): def __init__ ( self , name , age , sex , level ): # \u518d\u6b21\u5f3a\u8c03,\u901a\u8fc7\u7c7b\u8c03\u7528\u7684\u65b9\u6cd5\u5c31\u662f\u4e00\u4e2a\u666e\u901a\u51fd\u6570,\u6709\u51e0\u4e2a\u53c2\u6570\u5c31\u4f20\u51e0\u4e2a\u53c2\u6570 OldboyPeople . __init__ ( self , name , age , sex ) # \u8fd9\u884c\u4ee3\u7801\u8ddf\u7ee7\u627f\u6ca1\u6709\u534a\u6bdb\u94b1\u5173\u7cfb self . level = level # \u4f20\u5165stu_obj\u53c2\u6570 \u8868\u660e\u7ed9\u8c01\u6253\u5206 \u5b9e\u73b0\u4e86\u5b9e\u4f8b\u5316\u5bf9\u8c61\u4e4b\u95f4\u7684\u4ea4\u4e92 def score ( self , stu_obj , num ): # -- \u6253\u5206 stu_obj . score = num print ( ' %s \u6b63\u5728\u4e3a\u5b66\u751f %s \u6253\u5206,\u5206\u6570\u4e3a[ %s ]\u5206..' % ( self . name , stu_obj . name , num )) stu1 = OldboyStudent ( '\u5c0f\u5ddd' , 20 , 'male' ) teacher1 = OldboyTeacher ( 'egon' , 18 , 'male' , 10 ) # \u5b9e\u4f8b\u5316\u5bf9\u8c61\u67e5\u627e\u5c5e\u6027\u7684\u987a\u5e8f: \u5b9e\u4f8b\u5316\u5bf9\u8c61\u81ea\u5df1 - \u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684\u7c7b - \u7236\u7c7b print ( stu1 . school ) # oldboy stu1 . choose_course () # \u5c0f\u5ddd is choosing course.. teacher1 . score ( stu1 , 99 ) # egon\u6b63\u5728\u4e3a\u5b66\u751f\u5c0f\u5ddd\u6253\u5206,\u5206\u6570\u4e3a[99]\u5206.. # 'score': 99 \u5b9e\u4f8b\u5316\u5bf9\u8c61\u4e4b\u95f4\u4ea4\u4e92\u7684\u7ed3\u679c print ( stu1 . __dict__ ) # {'name': '\u5c0f\u5ddd', 'age': 20, 'sex': 'male', 'score': 99}","title":"\u7ee7\u627f\u662f\u5f3a\u8026\u5408"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1_%E7%BB%A7%E6%89%BF%E5%92%8C%E7%BB%84%E5%90%88/#_6","text":"!!! \u5b9e\u4f8b\u5316\u5bf9\u8c61\u67e5\u627e\u5c5e\u6027\u7684\u987a\u5e8f : \u5b9e\u4f8b\u5316\u5bf9\u8c61\u81ea\u5df1 - \u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684\u7c7b - \u7236\u7c7b - ... - \u76f4\u5230\u9876\u7ea7\u7236\u7c7bObject\u7c7b \u8865\u5145: getattr\u65b9\u6cd5\u7684\u67e5\u627e\u987a\u5e8f\u8ddf\u5b83\u662f\u4e00\u6837\u7684!! \u5206\u6790\u5982\u4e0b : func2\u7684\u67e5\u627e\u987a\u5e8f : obj\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684__dict__\u4e2d\u627e - B\u7c7b - A\u7c7b \u627e\u5230func2 \u6267\u884cfunc2 \u6253\u5370\u4e86'A.func2' self.func1() < \u8fd9\u91cc\u7684self\u5c31\u662f\u5b9e\u4f8b\u5316\u5bf9\u8c61obj > func1\u7684\u67e5\u627e\u987a\u5e8f : obj\u5b9e\u4f8b\u5316\u5bf9\u8c61 - B\u7c7b \u627e\u5230\u4e86func1 \u6267\u884cfunc1 \u6253\u5370\u4e86'B.func1' class A : def func1 ( self ): print ( 'A.func1' ) def func2 ( self ): print ( 'A.func2' ) self . func1 () class B ( A ): def func1 ( self ): print ( 'B.func1' ) obj = B () obj . func2 () # -- \u6ce8\u610f\u8fd9\u91cc\u4f20\u5165\u7684self\u5bf9\u8c61\u662f\u8c01!! \"\"\" A.func2 B.func1 \"\"\"","title":"\u5c5e\u6027\u67e5\u627e\u987a\u5e8f"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1_%E7%BB%A7%E6%89%BF%E5%92%8C%E7%BB%84%E5%90%88/#mixins","text":"Python\u63d0\u4f9b\u4e86 Mixins\u673a\u5236 , mixin\u7c7b\u7684\u547d\u540d\u65b9\u5f0f\u4e00\u822c\u4ee5 Mixin, able, ible \u4e3a\u540e\u7f00, \u8868\u660e\u8fd9\u4e2a\u7c7b\u662f\u4e00\u4e2aMixin\u7c7b, \u8868\u793a\u6df7\u5165(mix-in), \u8fd9\u4e2a\u7c7b\u662f\u4f5c\u4e3a\u529f\u80fd\u6dfb\u52a0\u5230\u5b50\u7c7b\u4e2d, \u800c\u4e0d\u662f\u4f5c\u4e3a\u7236\u7c7b, \u5b83\u7684\u4f5c\u7528\u540cJava\u4e2d\u7684\u63a5\u53e3!! \u4f46\u4f7f\u7528\u8be5\u673a\u5236\u672c\u8d28\u8fd8\u662f\u591a\u7ee7\u627f.. \u4e00\u4e2a\u7c7b\u53ef\u4ee5\u7ee7\u627f\u591a\u4e2aMixin, \u4e3a\u4e86\u4fdd\u8bc1\u9075\u5faa\u7ee7\u627f\u7684 \u201cis-a\u201d \u539f\u5219, \u53ea\u80fd\u7ee7\u627f\u4e00\u4e2a\u6807\u8bc6\u5176\u5f52\u5c5e\u542b\u4e49\u7684\u7236\u7c7b \u5b50\u7c7b\u5373\u4fbf\u6ca1\u6709\u7ee7\u627f\u8fd9\u4e2aMixin\u7c7b,\u4e5f\u7167\u6837\u53ef\u4ee5\u5de5\u4f5c,\u5c31\u662f\u7f3a\u5c11\u4e86\u67d0\u4e2a\u529f\u80fd(\u6bd4\u5982\u98de\u673a\u7167\u6837\u53ef\u4ee5\u8f7d\u5ba2,\u5c31\u662f\u4e0d\u80fd\u98de\u4e86)","title":"Mixins\u673a\u5236"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1_%E7%BB%A7%E6%89%BF%E5%92%8C%E7%BB%84%E5%90%88/#_7","text":"\u5728\u5b50\u7c7b\u4e2d\u5b9a\u4e49\u7684\u5c5e\u6027\u79f0\u4e3a\u6d3e\u751f \u5b50\u7c7b\u53ef\u4ee5\u6dfb\u52a0\u81ea\u5df1\u65b0\u7684\u5c5e\u6027\u6216\u8005\u91cd\u65b0\u5b9a\u4e49\u7ee7\u627f\u5230\u7684\u67d0\u4e9b\u5c5e\u6027(\u4e0d\u4f1a\u5f71\u54cd\u5230\u7236\u7c7b), \u5728\u4f7f\u7528\u67d0\u5c5e\u6027\u65f6,\u82e5\u5b50\u7c7b\u4e2d\u5b58\u5728,\u5219\u4ee5\u5b50\u7c7b\u5b58\u5728\u7684\u4e3a\u51c6 \u5c0f\u58f0bb,\u611f\u89c9\u5c31\u662f\u53ea\u8981\u662f\u5b50\u7c7b,\u90a3\u4e48\u5b50\u7c7b\u4e2d\u5b9a\u4e49\u7684\u6240\u6709\u4e1c\u897f\u90fd\u662f '\u6d3e\u751f' \u51fa\u6765\u7684...\u8fd9\u6982\u5ff5\u5f88\u9b54\u5e7b.\u8fd9\u4e5f\u5c31\u662f\u5b50\u7c7b\u4e5f\u88ab\u79f0\u4f5c\u6d3e\u751f\u7c7b\u7684\u539f\u56e0\u5427 \u5728\u5b50\u7c7b\u6d3e\u751f\u51fa\u6765\u7684\u529f\u80fd\u4e2d\u91cd\u7528\u7236\u7c7b\u529f\u80fd\u7684\u65b9\u5f0f\u6709\u4e24\u79cd : 1> \u6307\u540d\u9053\u59d3\u8bbf\u95ee\u67d0\u4e00\u4e2a\u7c7b\u7684\u51fd\u6570: \u8be5\u65b9\u5f0f\u4e0e\u7ee7\u627f\u65e0\u5173 eg: \u524d\u9762\u7684\u4ee3\u7801 OldboyPeople.__init__(self, name, age, sex) 2> super()","title":"\u6d3e\u751f"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1_%E7%BB%A7%E6%89%BF%E5%92%8C%E7%BB%84%E5%90%88/#_8","text":"","title":"\u7ec4\u5408"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1_%E7%BB%A7%E6%89%BF%E5%92%8C%E7%BB%84%E5%90%88/#_9","text":"\u7ec4\u5408\u5c31\u662f\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u5177\u5907\u67d0\u4e00\u4e2a\u5c5e\u6027, \u8be5\u5c5e\u6027\u7684\u503c\u662f\u6307\u5411\u53e6\u5916\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61 . \u56de\u987e : \u7528\u7ee7\u627f\u6765\u89e3\u51b3\u4ee3\u7801\u7684\u5197\u4f59. \u3010\u7ec4\u5408\u548c\u7ee7\u627f\u90fd\u662f\u4e3a\u4e86\u89e3\u51b3\u7c7b\u4e0e\u7c7b\u76f4\u63a5\u5197\u4f59\u7684\u95ee\u9898\u7684\uff01\uff01\uff01\u3011 \u7f8a\u3001\u725b\u3001\u72d7\u90fd\u662f\u52a8\u7269.\u662f\u4e00\u79cd\u4ece\u5c5e\u5173\u7cfb.\u6240\u4ee5\u7f8a\u7c7b\u725b\u7c7b\u72d7\u7c7b\u90fd\u7ee7\u627f\u52a8\u7269\u7c7b. \u5b66\u6821\u91cc\u7684 \u5b66\u751f\u548c\u8001\u5e08 \u90fd\u662f(\u5c5e\u4e8e)\u5b66\u6821\u7684\u4eba. \u6240\u4ee5 OldboyStudent\u548cOldboyTeacher\u7c7b \u7ee7\u627f OldboyPeople. \u9009\u8bfe\u7cfb\u7edf\u4e2d\u80af\u5b9a\u9700\u8981\u4e00\u4e2a'\u8bfe\u7a0b'\u7684\u89d2\u8272. \u8001\u5e08\u6388\u8bfe, \u5b66\u751f\u9009\u8bfe.. \u8001\u5e08\u8ddf\u5b66\u751f\u90fd\u8981\u5173\u8054\u8bfe\u7a0b. \u5b66\u751f\u548c\u8001\u5e08\u8ddf\u5b66\u6821\u662f\u4ece\u5c5e\u5173\u7cfb (\u4ec0\u4e48 '\u662f' \u4ec0\u4e48), \u90a3\u4e48\u5b66\u751f\u548c\u8001\u5e08\u8ddf\u8bfe\u7a0b\u662f\u4ec0\u4e48\u5173\u7cfb\uff1f \u9996\u5148\u6211\u4eec\u60f3\u5230\u7684\u662f \u5b66\u751f\u9009\u8bfe\u540e\u6709\u4e86\u4e00\u95e8\u8bfe\u7a0b,\u5373\u6709\u4e86\u8bfe\u7a0b\u7684\u76f8\u5173\u4fe1\u606f, \u662f \u4ec0\u4e48 '\u6709' \u4ec0\u4e48\u7684\u5173\u7cfb ... \u8fd9\u4e9b\u8bfe\u7a0b\u4fe1\u606f\u662f \u5b66\u751f\u5bf9\u8c61\u72ec\u6709\u7684 ,\u6240\u4ee5\u9700\u8981\u5c06\u8bfe\u7a0b\u76f8\u5173\u4fe1\u606f\u5f80 __init__ \u91cc\u9762\u653e. \u8001\u5e08\u540c\u7406. class OldboyPeople : school = 'oldboy' def __init__ ( self , name , age , sex ): self . name = name self . age = age self . sex = sex class OldboyStudent ( OldboyPeople ): def __init__ ( self , name , age , sex , stu_id , course_name , course_period , course_price ): OldboyPeople . __init__ ( self , name , age , sex ) self . stu_id = stu_id # \u5b9a\u5236\u8bfe\u7a0b\u76f8\u5173\u5c5e\u6027/\u6570\u636e self . course_name = course_name self . course_period = course_period self . course_price = course_price class OldboyTeacher ( OldboyPeople ): def __init__ ( self , name , age , sex , level , course_name , course_period , course_price ): OldboyPeople . __init__ ( self , name , age , sex ) self . level = level # \u5b9a\u5236\u8bfe\u7a0b\u76f8\u5173\u5c5e\u6027/\u6570\u636e self . course_name = course_name self . course_period = course_period self . course_price = course_price \u51fa\u73b0\u4e86\u4ee3\u7801\u91cd\u7528\u7684\u95ee\u9898, \u73b0\u9636\u6bb5\u7684\u7b2c\u4e00\u53cd\u5e94\u662f\u5c06\u5176\u653e\u5230\u7236\u7c7bOldboyPeople\u91cc. \u4f46\u4e0d\u5408\u7406 , \u4e0d\u662f\u5b66\u6821\u7684\u4eba\u90fd\u9700\u8981\u6709\u8bfe\u7a0b\u7684\u76f8\u5173\u4fe1\u606f... \u6bd4\u5982 \u7ba1\u7406\u5458\u662f\u5b66\u6821\u7684\u4eba\u4f46\u4e0d\u9700\u8981\u4e0e\u8bfe\u7a0b\u5173\u8054. Ps: \u4ed4\u7ec6\u60f3\u60f3, \u5c06\u8bfe\u7a0b\u4fe1\u606f\u5199\u5230 __init__ \u91cc\u4e5f\u6709\u70b9\u4e0d\u5408\u7406, \u5b66\u751f\u5bf9\u8c61\u4e0d\u662f\u4e00\u9020\u51fa\u6765\u5c31\u8981\u9009\u8bfe.","title":"\u2606\u91cd\u7528\u6027"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1_%E7%BB%A7%E6%89%BF%E5%92%8C%E7%BB%84%E5%90%88/#_10","text":"\u89e3\u51b3\u529e\u6cd5: \u5c06\u8bfe\u7a0b\u81ea\u6210\u4e00\u4e2a\u7c7b\uff01 \u7ec4\u5408\u5c31\u662f\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u5177\u5907\u67d0\u4e00\u4e2a\u5c5e\u6027, \u8be5\u5c5e\u6027\u7684\u503c\u662f\u6307\u5411\u53e6\u5916\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61 . class Course : def __init__ ( self , name , period , price ): self . name = name self . period = period self . price = price def tell_info ( self ): print ( f '\u8bfe\u7a0b\u540d: { self . name } \u5468\u671f: { self . period } \u4ef7\u683c: { self . price } ' ) class OldboyPeople : school = 'oldboy' def __init__ ( self , name , age , sex ): self . name = name self . age = age self . sex = sex class OldboyStudent ( OldboyPeople ): def __init__ ( self , name , age , sex , stu_id ): OldboyPeople . __init__ ( self , name , age , sex ) self . stu_id = stu_id self . choice_course = [] def choose_course ( self ): print ( ' %s is choosing course..' % self . name ) class OldboyTeacher ( OldboyPeople ): def __init__ ( self , name , age , sex , level ): OldboyPeople . __init__ ( self , name , age , sex ) self . level = level self . teach_course = [] def score ( self , stu_obj , num ): stu_obj . score = num print ( ' %s \u6b63\u5728\u4e3a\u5b66\u751f %s \u6253\u5206,\u5206\u6570\u4e3a[ %s ]\u5206..' % ( self . name , stu_obj . name , num )) python = Course ( 'python\u5168\u6808\u5f00\u53d1' , '5month' , 10000 ) linux = Course ( 'linux\u8fd0\u7ef4' , '4month' , 8000 ) stu1 = OldboyStudent ( '\u5c0f\u5ddd' , 20 , 'male' , '001' ) teacher1 = OldboyTeacher ( 'egon' , 18 , 'male' , 10 ) # -- \u5c06\u5b66\u751f\u3001\u8001\u5e08\u4e0e\u8bfe\u7a0b\u5173\u8054/\u7ec4\u5408 \"\"\"\u8fd9\u79cd\u65b9\u5f0f \u6bcf\u4e2a\u5b66\u751f\u53ea\u80fd\u9009\u4e00\u95e8\u8bfe \u6bcf\u4e2a\u8001\u5e08\u53ea\u80fd\u6559\u4e00\u95e8\u8bfe stu1.course = python teacher1.course = linux stu1.course.tell_info() teacher1.course.tell_info() \"\"\" # PS:\u8fd8\u53ef\u4ee5\u6269\u5c55 \u8001\u5e08\u6559\u5b66\u54ea\u4e9b\u5b66\u751f # \u5173\u952e\u4ee3\u7801 self.teach_stu = []; teacher1.teach_stu.append(stu1) # \u5b66\u751f\u53ef\u4ee5\u9009\u591a\u95e8\u8bfe \u8001\u5e08\u4e5f\u53ef\u4ee5\u6559\u591a\u95e8\u8bfe stu1 . choice_course . append ( python ) stu1 . choice_course . append ( linux ) teacher1 . teach_course . append ( linux ) for course_obj in stu1 . choice_course : course_obj . tell_info ()","title":"\u2606\u7ec4\u5408"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1_%E7%BB%A7%E6%89%BF%E5%92%8C%E7%BB%84%E5%90%88/#_11","text":"\u6b64\u5c0f\u8282\u7684\u7406\u8bba\u77e5\u8bc6\u6d89\u53capython\u7ee7\u627f\u5e95\u5c42\u5b9e\u73b0\u539f\u7406. \u9762\u8bd5\u5f88\u7231\u95ee\u54e6..","title":"\u83f1\u5f62\u7ee7\u627f\u95ee\u9898"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1_%E7%BB%A7%E6%89%BF%E5%92%8C%E7%BB%84%E5%90%88/#_12","text":"\u83f1\u5f62\u7ee7\u627f : \u5f53\u4e00\u4e2a\u5b50\u7c7b\u7ee7\u627f\u591a\u4e2a\u7236\u7c7b\u65f6, \u591a\u4e2a\u7236\u7c7b\u6700\u7ec8\u7ee7\u627f\u4e86\u540c\u4e00\u4e2a\u7c7b,(\u591a\u4e2a\u7c7b\u7684\u5206\u652f\u6c47\u805a\u5230\u540c\u4e00\u70b9\u5566). \u7ecf\u5178\u7c7b\u4e0b\u67e5\u627e\u5c5e\u6027: \u6df1\u5ea6\u4f18\u5148\u67e5\u627e \u65b0\u5f0f\u7c7b\u4e0b\u67e5\u627e\u5c5e\u6027: \u5e7f\u5ea6\u4f18\u5148\u67e5\u627e","title":"\u2606\u83f1\u5f62\u7ee7\u627f"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1_%E7%BB%A7%E6%89%BF%E5%92%8C%E7%BB%84%E5%90%88/#c3mro","text":"\u5728\u65b0\u5f0f\u7c7b\u4e2d, python\u4e3a\u5176\u5185\u7f6e\u4e86\u4e00\u4e2amro\u65b9\u6cd5. >>> A . mro () # -- \u7b49\u540c\u4e8eA.__mro__ [ < class ' __main__ . A '>, <class ' __main__ . B '>, <class ' __main__ . E '>, <class ' __main__ . C '>, <class ' __main__ . F '>, <class ' __main__ . D '>, <class ' __main__ . G '>, <class ' object '>] \u8fd9\u4e2amro\u5217\u8868\u7684\u6784\u9020\u662f\u901a\u8fc7\u4e00\u4e2aC3\u7ebf\u6027\u5316\u7b97\u6cd5\u6765\u5b9e\u73b0\u7684. \u5c5e\u6027\u67e5\u627e\u9075\u5faa\u4e09\u6761\u51c6\u5219: 1> \u5b50\u7c7b\u4f1a\u5148\u4e8e\u7236\u7c7b\u88ab\u67e5\u627e 2> \u591a\u4e2a\u7236\u7c7b\u4f1a\u6839\u636e\u5b83\u4eec\u5728\u5217\u8868\u4e2d\u7684\u987a\u5e8f\u88ab\u67e5\u627e 3> \u82e5\u7b2c\u4e00\u4e2a\u7236\u7c7b\u548c\u7b2c\u4e8c\u4e2a\u7236\u7c7b\u90fd\u5b58\u5728\u5408\u6cd5\u7684\u9009\u62e9, \u9009\u62e9\u7b2c\u4e00\u4e2a\u7236\u7c7b.","title":"\u2606c3\u7b97\u6cd5\u4e0emro"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1_%E7%BB%A7%E6%89%BF%E5%92%8C%E7%BB%84%E5%90%88/#super","text":"\u5728\u5b50\u7c7b\u6d3e\u751f\u51fa\u6765\u7684\u529f\u80fd\u4e2d\u91cd\u7528\u7236\u7c7b\u529f\u80fd\u7684\u65b9\u5f0f\u6709\u4e24\u79cd: \u65b9\u5f0f\u4e00 : \u6307\u540d\u9053\u59d3\u8bbf\u95ee\u67d0\u4e00\u4e2a\u7c7b\u7684\u51fd\u6570: \u8be5\u65b9\u5f0f\u4e0e\u7ee7\u627f\u65e0\u5173 \u7c7b\u540d.\u51fd\u6570\u540d \u65b9\u5f0f\u4e8c : \u4e25\u683c\u4f9d\u8d56mro\u7ee7\u627f\u5c5e\u6027\u67e5\u627e\u5173\u7cfb super() \u4f1a\u5f97\u5230 \u4e00\u4e2a\u7279\u6b8a\u7684\u5bf9\u8c61 \u7528\u4e8e \u4e13\u95e8\u8bbf\u95ee\u7236\u7c7b \u4e2d\u7684\u5c5e\u6027.. (\u6309\u7167\u7ee7\u627f\u5173\u7cfb \u8be5\u5bf9\u8c61\u4e13\u95e8\u4ece\u5f53\u524d\u7236\u7c7b\u5f00\u59cb\u5f80\u540e\u67e5\u627e) super().__init__() \u56e0\u4e3asuper()\u662f\u4e00\u4e2a\u5bf9\u8c61,\u6240\u4ee5\u6b64\u5904\u662f \u7ed1\u5b9a\u65b9\u6cd5 , \u4e0d\u7528\u5355\u72ec\u4e3aself\u4f20\u503c\uff01\uff01 class People : def __init__ ( self , name , age , sex ): self . name = name self . age = age self . sex = sex class Student ( People ): def __init__ ( self , name , age , sex , stu_id ): # super()\u8fd9\u4e00\u7279\u6b8a\u5bf9\u8c61\u7528\u4e8e\u4e13\u95e8\u8bbf\u95ee\u7236\u7c7b\u4e2d\u7684\u5c5e\u6027 # <class '__main__.People'>, <class 'object'> \u90fd\u662f\u5f53\u524dStudent\u7c7b\u7684\u7236\u7c7b super () . __init__ ( name , age , sex ) self . stu_id = stu_id stu1 = Student ( 'egon' , 19 , 'male' , '007' ) # {'name': 'egon', 'age': 19, 'sex': 'male', 'stu_id': '007'} print ( stu1 . __dict__ ) # [<class '__main__.Student'>, <class '__main__.People'>, <class 'object'>] print ( Student . mro ()) super()\u662f\u7b80\u5199,\u5b8c\u6574\u7684\u5199\u6cd5\u662f super(Student,self).__init__(name, age, sex) ,\u5728python2\u4e2d\u9700\u8981\u5199\u5b8c\u6574.. \u89e3\u6790 super(Student,self) \u7684\u53c2\u6570 : \u7b2c\u4e00\u4e2a\u53c2\u6570:: \u8868\u793a\u6839\u636e\u6307\u5b9a\u7684\u7c7b(eg Student\u7c7b),\u5728\u7ee7\u627f\u94fe\u4e2d \u83b7\u53d6\u5b83\u201cStudent\u201d\u7684 [\u4e0b\u4e00\u4e2a] \u7c7b . \u4e0d\u5199\u9ed8\u8ba4\u5c31\u662fsuper()\u6240\u5728\u7684\u5f53\u524d\u7c7b \u7b2c\u4e8c\u4e2a\u53c2\u6570:: \u8868\u793a\u83b7\u53d6self\u5bf9\u8c61\u6240\u5728\u7684\u7c7b\u7684mro\u7ee7\u627f\u94fe \u5373 type(self).__mro__ \u7b80\u800c\u8a00\u4e4b, super\u4e0d\u4e00\u5b9a\u5c31\u662f\u7236\u7c7b, \u800c\u662f\u8981\u770b\u91cc\u9762\u7684self\u662f\u8c01. super(xxx, self) \u4e00\u5b9a\u662ftype(self)\u5bf9\u5e94\u7684mro\u4e2d, xxx\u7684\u4e0b\u4e00\u4e2a\u7c7b. \u6ce8\u610f\u54e6\uff01 \u5373\u4f7f\u6ca1\u6709\u76f4\u63a5\u7ee7\u627f\u5173\u7cfb,super\u4ecd\u7136\u4f1a\u6309\u7167mro\u7ee7\u7eed\u5f80\u540e\u67e5\u627e! class A : def f1 ( self ): print ( 'A.f1' ) class B : def f2 ( self ): # \u8fd9\u4e2asuper\u662f\u4ee5C\u7c7b\u89e6\u53d1\u7684\u67e5\u627e,\u5e94\u8be5\u9075\u5faaC\u7684mro 'C-B-A-object' # \u4f46\u5230\u8fd9\u91cc,mro\u67e5\u627e\u8fdb\u884c\u5230\u4e86B # \u56e0\u800c\u8fd9\u91cc\u53ef\u4ee5\u5199\u6210 super(B, self).f1() self\u662fC\u7c7b\u7684mro\u7ee7\u627f\u94fe # \u5f80\u540e\u5373\u67e5\u627eC\u7c7bmro\u7ee7\u627f\u94fe\u4e2dB\u540e\u9762\u7684A\u7c7b\u662f\u5426\u6709f1\u65b9\u6cd5 super () . f1 () print ( 'B.f2' ) class C ( B , A ): def f1 (): print ( 'C.f1' ) # [<class '__main__.C'>, <class '__main__.B'>, <class '__main__.A'>, <class 'object'>] print ( C . mro ()) obj = C () obj . f2 () # obj - C - B f2() \"\"\" A.f1 B.f2 \"\"\" class B : def run ( self ): print ( 'run B' ) class A ( B ): def func1 ( self ): super ( A , self ) . run () def run ( self ): print ( 'run A' ) a = A () a . func1 () # -- run B","title":"super"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/2_%E5%A4%9A%E6%80%81%E4%B8%8E%E5%A4%9A%E6%80%81%E6%80%A7/","text":"\u5b9a\u4e49 \u00b6 \u591a\u6001\u6307\u7684\u662f\u540c\u4e00\u4e8b\u7269\u7684\u591a\u79cd\u5f62\u6001 . \u6c34 -- \u51b0\u3001\u6c34\u84b8\u6c14\u3001\u6db2\u6001\u6c34 \u52a8\u7269 -- \u4eba\u3001\u72d7\u3001\u732a \u591a\u6001\u6027 : \u7ee7\u627f\u540c\u4e00\u4e2a\u7236\u7c7b\u7684\u591a\u4e2a\u5b50\u7c7b, \u5177\u6709\u76f8\u540c\u7684\u65b9\u6cd5\u540d \u5728\u4f7f\u7528\u7684\u65f6\u5019, \u5b50\u7c7b\u5b9e\u4f8b\u5316\u7684\u5bf9\u8c61\u5c31\u53ef\u4ee5\u5728\u4e0d\u7528\u8003\u8651\u81ea\u8eab\u5177\u4f53\u7684\u6570\u636e\u7c7b\u578b\u7684\u524d\u63d0\u4e0b\u76f4\u63a5\u8c03\u7528\u529f\u80fd \u591a\u6001\u5176\u5b9e\u5728\u505a\u89c4\u5212,\u7edf\u4e00\u4e00\u4e2a\u6807\u51c6... People\u3001Dog\u3001Pig\u4e09\u4e2a\u7c7b\u5b9e\u4f8b\u5316\u7684peo1\u3001dog1\u3001pig1\u5bf9\u8c61\u90fd\u53ef\u4ee5\u8c03\u7528\u7236\u7c7bAnimal\u91cc\u7684speak()\u65b9\u6cd5. \u5f53\u7136\u8fd9\u4e09\u79cd\u52a8\u7269\u53eb\u7684\u65b9\u5f0f\u4e0d\u4e00\u6837...\u4eba\u8bf4\u8bdd,\u72d7\u6c6a\u6c6a,\u732a\u54fc\u54fc.. \u4e09\u4e2a\u5b50\u7c7b\u9700\u8981\u5206\u522b\u5199\u4e00\u4e2a\u65b9\u6cd5\u8868\u793a\u53eb\u7684\u65b9\u5f0f. \u6bd4\u5982, People\u7c7b\u6d3e\u751f\u51fatalk()\u65b9\u6cd5;Dog\u7c7b\u6d3e\u751f\u51fawang()\u65b9\u6cd5;Pig\u7c7b\u6d3e\u751f\u51faHum()\u65b9\u6cd5... \u8fd9\u6837\u5199,\u6709\u95ee\u9898\u5417?\u6ca1\u6709\u95ee\u9898.. \u4f46\u5728\u8c03\u7528\u7684\u65f6\u5019, \u5c31\u9ebb\u70e6\u5566, \u4e00\u4e2a\u53eb\u7684\u529f\u80fd, \u4e09\u4e2a\u5b50\u7c7b\u6211\u8981\u8bb0\u4e09\u4e2a\u4e0d\u540c\u7684\u65b9\u6cd5\u540d... \u82e5\u6211\u4eec\u5c06Animal\u7684\u4e09\u4e2a\u5b50\u7c7b\u6d3e\u751f\u51fa\u7684 '\u8868\u793a\u53eb\u7684\u65b9\u5f0f' \u7684\u65b9\u6cd5\u540d\u90fd\u547d\u540d\u6210\u8ddf\u7236\u7c7b\u4e00\u6837\u7684speak. \u90a3\u4e48\u4f46\u51e1\u9700\u8981\u53eb\u7684\u65f6\u5019,\u4e0d\u7528care\u5b9e\u4f8b\u5316\u51fa\u6765\u7684\u5bf9\u8c61\u662f\u52a8\u7269\u7684\u54ea\u79cd\u5f62\u6001, \u53ea\u8981\u662f\u52a8\u7269,\u90fd\u8c03\u7528speak\u65b9\u6cd5\u5c31\u884c\u5566.. \u62bd\u8c61\u7c7b \u00b6 \u786c\u6027\u5f3a\u5236\u89c4\u5b9a\u7236\u7c7b\u5efa\u7acb\u7684\u6807\u51c6,\u5b50\u7c7b\u5fc5\u987b\u9075\u5faa\uff01\uff01\u82e5\u4e0d\u9075\u5faa,\u5b50\u7c7b\u5b9e\u4f8b\u5316\u65f6\u5c31\u4f1a\u62a5\u9519.. \u7236\u7c7bAnimal\u6ca1\u6709\u5b9e\u4f8b\u5316\u7684\u8981\u6c42,\u7236\u7c7b\u662f\u7528\u6765\u5236\u5b9a\u6807\u51c6\u7684, \u4e0d\u80fd\u88ab\u5b9e\u4f8b\u5316\uff01\uff01 import abc # abstractclass \u62bd\u8c61\u7c7b # -- \u6307\u5b9ametaclass\u5c5e\u6027\u5c06\u7c7b\u8bbe\u7f6e\u4e3a\u62bd\u8c61\u7c7b,\u62bd\u8c61\u7c7b\u672c\u8eab\u53ea\u662f\u7528\u6765\u7ea6\u675f\u5b50\u7c7b\u7684,\u4e0d\u80fd\u88ab\u5b9e\u4f8b\u5316 class Animal ( metaclass = abc . ABCMeta ): @abc . abstractmethod # -- \u8be5\u88c5\u9970\u5668\u9650\u5236\u5b50\u7c7b\u5fc5\u987b\u5b9a\u4e49\u6709\u4e00\u4e2a\u540d\u4e3aspeak\u7684\u65b9\u6cd5 def speak (): # -- \u62bd\u8c61\u65b9\u6cd5\u4e2d\u65e0\u9700\u5b9e\u73b0\u5177\u4f53\u7684\u529f\u80fd pass @abc . abstractmethod def eat (): pass class People ( Animal ): # -- \u4f46\u51e1\u7ee7\u627fAnimal\u7684\u5b50\u7c7b\u90fd\u5fc5\u987b\u9075\u5faaAnimal\u89c4\u5b9a\u7684\u6807\u51c6 def speak ( self ): print ( 'Hello World..' ) def eat ( self ): pass class Dog ( Animal ): def speak ( self ): print ( '\u6c6a\u6c6a\u6c6a..' ) def eat ( self ): pass class Pig ( Animal ): def speak ( self ): print ( '\u54fc\u54fc\u54fc..' ) def eat ( self ): pass # -- \u82e5\u5b50\u7c7b\u4e2d\u6ca1\u6709\u540d\u4e3aspeak\u548ceat\u7684\u65b9\u6cd5\u5219\u4f1a\u629b\u51fa\u5f02\u5e38TypeError,\u65e0\u6cd5\u5b9e\u4f8b\u5316 peo1 = People () dog1 = Dog () pig1 = Pig () peo1 . speak () dog1 . speak () pig1 . speak () \"\"\" \u8fdb\u4e00\u6b65,\u8fd8\u53ef\u4ee5\u8fd9\u6837\u73a9\uff01 def my_speak(animal): # \u4e0d\u7ba1\u5177\u4f53\u662f\u54ea\u79cd\u52a8\u7269,\u53ea\u8981\u662f\u52a8\u7269\u5c31\u884c.. animal.speak() my_speak(peo1) my_speak(dog1) my_speak(pig1) \"\"\" py\u4e2d\u591a\u6001\u6027\u7684\u5e94\u7528 \u00b6 \u6211\u4eec\u4e00\u76f4\u5728\u4eab\u53d7\u7740\u591a\u6001\u6027\u5e26\u6765\u7684\u597d\u5904, \u81f3\u4eca\u4ece\u672a\u505c\u6b62\u8fc7.. (\u204e\u204d\u0334\u031b\u1d17\u204d\u0334\u031b\u204e) # str,list,tuple\u90fd\u662f\u5e8f\u5217\u7c7b\u578b s = str ( 'hello' ) l = list ([ 1 , 2 , 3 ]) t = tuple (( 4 , 5 , 6 )) # \u6211\u4eec\u53ef\u4ee5\u5728\u4e0d\u8003\u8651\u4e09\u8005\u7c7b\u578b\u7684\u524d\u63d0\u4e0b\u4f7f\u7528s,l,t # \u56e0\u4e3a\u5b83\u4eec\u90fd\u5c06\u7edf\u8ba1\u957f\u5ea6\u7684\u65b9\u6cd5 \u547d\u540d\u4e3a len().. s . __len__ () l . __len__ () t . __len__ () len ( s ) len ( l ) len ( t ) \u9e2d\u5b50\u7c7b\u578b \u00b6 \u5176\u5b83\u8bed\u8a00\u4e00\u63d0\u5230\u591a\u6001, \u5c31\u8bf4\u591a\u6001\u5e94\u8be5\u5728\u7ee7\u627f\u7684\u6761\u4ef6\u4e0b\u4f7f\u7528. \u800cpython\u4e0d\u63a8\u5d07\u5728\u7ee7\u627f\u7684\u80cc\u666f\u4e0b\u5b9e\u73b0\u591a\u6001, python\u63a8\u5d07\u7684\u662f \u9e2d\u5b50\u7c7b\u578b . duck typing [\u53ea\u8981\u4f60\u53eb\u7684\u58f0\u97f3\u50cf\u9e2d\u5b50, \u5e76\u4e14\u4f60\u8d70\u8def\u7684\u6837\u5b50\u4e5f\u50cf\u9e2d\u5b50, \u90a3\u4f60\u5c31\u662f\u9e2d\u5b50!! \u560e\u560e\u560e\uff5e] \u524d\u9762\u6211\u4eec\u901a\u8fc7\u62bd\u8c61\u7c7b\u786c\u6027\u8981\u6c42\u5b50\u7c7b\u600e\u4e48\u6837\u600e\u4e48\u6837, python\u4e0d\u63a8\u5d07, \u56e0\u4e3a\u63d0\u9ad8\u4e86\u8026\u5408\u5ea6.. Dog\u3001People\u3001Pig\u7c7b\u53ef\u4ee5\u4e0d\u7528\u7ee7\u627fAnimal\u7c7b, \u5b83\u4eec\u4e09\u4e2a\u76f8\u4e92\u7ea6\u5b9a, \u5c06\u53eb\u7684\u65b9\u5f0f\u90fd\u547d\u540d\u4e3aspeak(). \u4e5f\u80fd\u8fbe\u5230\u591a\u6001\u7684\u6548\u679c. \u6709 \u5f52\u4e00\u5316 \u7684\u601d\u60f3, \u4e5f\u5b9e\u73b0\u4e86\u4ee3\u7801\u7684\u89e3\u8026\u5408... (\u7c7b\u662f\u72ec\u7acb\u7684\u4e00\u5757\u4e00\u5757\u7684 \u5f7c\u6b64\u4e4b\u95f4\u4e0d\u5f71\u54cd) \u91cd\u8981\u662f\u5c06\u6807\u51c6\u7edf\u4e00\uff01\u5927\u5bb6\u90fd\u9075\u5b88\uff01\uff01 \u8fd9\u6837\u53ef\u4ee5\u964d\u4f4e\u4f7f\u7528\u7684\u96be\u5ea6, \u5b66\u4e60\u8c03\u7528\u7684\u6210\u672c..","title":"\u591a\u6001\u4e0e\u591a\u6001\u6027"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/2_%E5%A4%9A%E6%80%81%E4%B8%8E%E5%A4%9A%E6%80%81%E6%80%A7/#_1","text":"\u591a\u6001\u6307\u7684\u662f\u540c\u4e00\u4e8b\u7269\u7684\u591a\u79cd\u5f62\u6001 . \u6c34 -- \u51b0\u3001\u6c34\u84b8\u6c14\u3001\u6db2\u6001\u6c34 \u52a8\u7269 -- \u4eba\u3001\u72d7\u3001\u732a \u591a\u6001\u6027 : \u7ee7\u627f\u540c\u4e00\u4e2a\u7236\u7c7b\u7684\u591a\u4e2a\u5b50\u7c7b, \u5177\u6709\u76f8\u540c\u7684\u65b9\u6cd5\u540d \u5728\u4f7f\u7528\u7684\u65f6\u5019, \u5b50\u7c7b\u5b9e\u4f8b\u5316\u7684\u5bf9\u8c61\u5c31\u53ef\u4ee5\u5728\u4e0d\u7528\u8003\u8651\u81ea\u8eab\u5177\u4f53\u7684\u6570\u636e\u7c7b\u578b\u7684\u524d\u63d0\u4e0b\u76f4\u63a5\u8c03\u7528\u529f\u80fd \u591a\u6001\u5176\u5b9e\u5728\u505a\u89c4\u5212,\u7edf\u4e00\u4e00\u4e2a\u6807\u51c6... People\u3001Dog\u3001Pig\u4e09\u4e2a\u7c7b\u5b9e\u4f8b\u5316\u7684peo1\u3001dog1\u3001pig1\u5bf9\u8c61\u90fd\u53ef\u4ee5\u8c03\u7528\u7236\u7c7bAnimal\u91cc\u7684speak()\u65b9\u6cd5. \u5f53\u7136\u8fd9\u4e09\u79cd\u52a8\u7269\u53eb\u7684\u65b9\u5f0f\u4e0d\u4e00\u6837...\u4eba\u8bf4\u8bdd,\u72d7\u6c6a\u6c6a,\u732a\u54fc\u54fc.. \u4e09\u4e2a\u5b50\u7c7b\u9700\u8981\u5206\u522b\u5199\u4e00\u4e2a\u65b9\u6cd5\u8868\u793a\u53eb\u7684\u65b9\u5f0f. \u6bd4\u5982, People\u7c7b\u6d3e\u751f\u51fatalk()\u65b9\u6cd5;Dog\u7c7b\u6d3e\u751f\u51fawang()\u65b9\u6cd5;Pig\u7c7b\u6d3e\u751f\u51faHum()\u65b9\u6cd5... \u8fd9\u6837\u5199,\u6709\u95ee\u9898\u5417?\u6ca1\u6709\u95ee\u9898.. \u4f46\u5728\u8c03\u7528\u7684\u65f6\u5019, \u5c31\u9ebb\u70e6\u5566, \u4e00\u4e2a\u53eb\u7684\u529f\u80fd, \u4e09\u4e2a\u5b50\u7c7b\u6211\u8981\u8bb0\u4e09\u4e2a\u4e0d\u540c\u7684\u65b9\u6cd5\u540d... \u82e5\u6211\u4eec\u5c06Animal\u7684\u4e09\u4e2a\u5b50\u7c7b\u6d3e\u751f\u51fa\u7684 '\u8868\u793a\u53eb\u7684\u65b9\u5f0f' \u7684\u65b9\u6cd5\u540d\u90fd\u547d\u540d\u6210\u8ddf\u7236\u7c7b\u4e00\u6837\u7684speak. \u90a3\u4e48\u4f46\u51e1\u9700\u8981\u53eb\u7684\u65f6\u5019,\u4e0d\u7528care\u5b9e\u4f8b\u5316\u51fa\u6765\u7684\u5bf9\u8c61\u662f\u52a8\u7269\u7684\u54ea\u79cd\u5f62\u6001, \u53ea\u8981\u662f\u52a8\u7269,\u90fd\u8c03\u7528speak\u65b9\u6cd5\u5c31\u884c\u5566..","title":"\u5b9a\u4e49"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/2_%E5%A4%9A%E6%80%81%E4%B8%8E%E5%A4%9A%E6%80%81%E6%80%A7/#_2","text":"\u786c\u6027\u5f3a\u5236\u89c4\u5b9a\u7236\u7c7b\u5efa\u7acb\u7684\u6807\u51c6,\u5b50\u7c7b\u5fc5\u987b\u9075\u5faa\uff01\uff01\u82e5\u4e0d\u9075\u5faa,\u5b50\u7c7b\u5b9e\u4f8b\u5316\u65f6\u5c31\u4f1a\u62a5\u9519.. \u7236\u7c7bAnimal\u6ca1\u6709\u5b9e\u4f8b\u5316\u7684\u8981\u6c42,\u7236\u7c7b\u662f\u7528\u6765\u5236\u5b9a\u6807\u51c6\u7684, \u4e0d\u80fd\u88ab\u5b9e\u4f8b\u5316\uff01\uff01 import abc # abstractclass \u62bd\u8c61\u7c7b # -- \u6307\u5b9ametaclass\u5c5e\u6027\u5c06\u7c7b\u8bbe\u7f6e\u4e3a\u62bd\u8c61\u7c7b,\u62bd\u8c61\u7c7b\u672c\u8eab\u53ea\u662f\u7528\u6765\u7ea6\u675f\u5b50\u7c7b\u7684,\u4e0d\u80fd\u88ab\u5b9e\u4f8b\u5316 class Animal ( metaclass = abc . ABCMeta ): @abc . abstractmethod # -- \u8be5\u88c5\u9970\u5668\u9650\u5236\u5b50\u7c7b\u5fc5\u987b\u5b9a\u4e49\u6709\u4e00\u4e2a\u540d\u4e3aspeak\u7684\u65b9\u6cd5 def speak (): # -- \u62bd\u8c61\u65b9\u6cd5\u4e2d\u65e0\u9700\u5b9e\u73b0\u5177\u4f53\u7684\u529f\u80fd pass @abc . abstractmethod def eat (): pass class People ( Animal ): # -- \u4f46\u51e1\u7ee7\u627fAnimal\u7684\u5b50\u7c7b\u90fd\u5fc5\u987b\u9075\u5faaAnimal\u89c4\u5b9a\u7684\u6807\u51c6 def speak ( self ): print ( 'Hello World..' ) def eat ( self ): pass class Dog ( Animal ): def speak ( self ): print ( '\u6c6a\u6c6a\u6c6a..' ) def eat ( self ): pass class Pig ( Animal ): def speak ( self ): print ( '\u54fc\u54fc\u54fc..' ) def eat ( self ): pass # -- \u82e5\u5b50\u7c7b\u4e2d\u6ca1\u6709\u540d\u4e3aspeak\u548ceat\u7684\u65b9\u6cd5\u5219\u4f1a\u629b\u51fa\u5f02\u5e38TypeError,\u65e0\u6cd5\u5b9e\u4f8b\u5316 peo1 = People () dog1 = Dog () pig1 = Pig () peo1 . speak () dog1 . speak () pig1 . speak () \"\"\" \u8fdb\u4e00\u6b65,\u8fd8\u53ef\u4ee5\u8fd9\u6837\u73a9\uff01 def my_speak(animal): # \u4e0d\u7ba1\u5177\u4f53\u662f\u54ea\u79cd\u52a8\u7269,\u53ea\u8981\u662f\u52a8\u7269\u5c31\u884c.. animal.speak() my_speak(peo1) my_speak(dog1) my_speak(pig1) \"\"\"","title":"\u62bd\u8c61\u7c7b"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/2_%E5%A4%9A%E6%80%81%E4%B8%8E%E5%A4%9A%E6%80%81%E6%80%A7/#py","text":"\u6211\u4eec\u4e00\u76f4\u5728\u4eab\u53d7\u7740\u591a\u6001\u6027\u5e26\u6765\u7684\u597d\u5904, \u81f3\u4eca\u4ece\u672a\u505c\u6b62\u8fc7.. (\u204e\u204d\u0334\u031b\u1d17\u204d\u0334\u031b\u204e) # str,list,tuple\u90fd\u662f\u5e8f\u5217\u7c7b\u578b s = str ( 'hello' ) l = list ([ 1 , 2 , 3 ]) t = tuple (( 4 , 5 , 6 )) # \u6211\u4eec\u53ef\u4ee5\u5728\u4e0d\u8003\u8651\u4e09\u8005\u7c7b\u578b\u7684\u524d\u63d0\u4e0b\u4f7f\u7528s,l,t # \u56e0\u4e3a\u5b83\u4eec\u90fd\u5c06\u7edf\u8ba1\u957f\u5ea6\u7684\u65b9\u6cd5 \u547d\u540d\u4e3a len().. s . __len__ () l . __len__ () t . __len__ () len ( s ) len ( l ) len ( t )","title":"py\u4e2d\u591a\u6001\u6027\u7684\u5e94\u7528"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/2_%E5%A4%9A%E6%80%81%E4%B8%8E%E5%A4%9A%E6%80%81%E6%80%A7/#_3","text":"\u5176\u5b83\u8bed\u8a00\u4e00\u63d0\u5230\u591a\u6001, \u5c31\u8bf4\u591a\u6001\u5e94\u8be5\u5728\u7ee7\u627f\u7684\u6761\u4ef6\u4e0b\u4f7f\u7528. \u800cpython\u4e0d\u63a8\u5d07\u5728\u7ee7\u627f\u7684\u80cc\u666f\u4e0b\u5b9e\u73b0\u591a\u6001, python\u63a8\u5d07\u7684\u662f \u9e2d\u5b50\u7c7b\u578b . duck typing [\u53ea\u8981\u4f60\u53eb\u7684\u58f0\u97f3\u50cf\u9e2d\u5b50, \u5e76\u4e14\u4f60\u8d70\u8def\u7684\u6837\u5b50\u4e5f\u50cf\u9e2d\u5b50, \u90a3\u4f60\u5c31\u662f\u9e2d\u5b50!! \u560e\u560e\u560e\uff5e] \u524d\u9762\u6211\u4eec\u901a\u8fc7\u62bd\u8c61\u7c7b\u786c\u6027\u8981\u6c42\u5b50\u7c7b\u600e\u4e48\u6837\u600e\u4e48\u6837, python\u4e0d\u63a8\u5d07, \u56e0\u4e3a\u63d0\u9ad8\u4e86\u8026\u5408\u5ea6.. Dog\u3001People\u3001Pig\u7c7b\u53ef\u4ee5\u4e0d\u7528\u7ee7\u627fAnimal\u7c7b, \u5b83\u4eec\u4e09\u4e2a\u76f8\u4e92\u7ea6\u5b9a, \u5c06\u53eb\u7684\u65b9\u5f0f\u90fd\u547d\u540d\u4e3aspeak(). \u4e5f\u80fd\u8fbe\u5230\u591a\u6001\u7684\u6548\u679c. \u6709 \u5f52\u4e00\u5316 \u7684\u601d\u60f3, \u4e5f\u5b9e\u73b0\u4e86\u4ee3\u7801\u7684\u89e3\u8026\u5408... (\u7c7b\u662f\u72ec\u7acb\u7684\u4e00\u5757\u4e00\u5757\u7684 \u5f7c\u6b64\u4e4b\u95f4\u4e0d\u5f71\u54cd) \u91cd\u8981\u662f\u5c06\u6807\u51c6\u7edf\u4e00\uff01\u5927\u5bb6\u90fd\u9075\u5b88\uff01\uff01 \u8fd9\u6837\u53ef\u4ee5\u964d\u4f4e\u4f7f\u7528\u7684\u96be\u5ea6, \u5b66\u4e60\u8c03\u7528\u7684\u6210\u672c..","title":"\u9e2d\u5b50\u7c7b\u578b"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3_%E5%B0%81%E8%A3%85%E4%B8%8E%E6%8E%A5%E5%8F%A3/","text":"\u5c01\u88c5 \u00b6 \u2606\u4ec0\u4e48\u662f\u5c01\u88c5\uff1f \u00b6 [ \u5c01: ] \u5c5e\u6027\u5bf9\u5916\u662f\u9690\u85cf\u7684, \u5bf9\u5185\u662f\u5f00\u653e\u7684 .. \u88c5: \u7533\u8bf7\u4e00\u4e2a\u540d\u79f0\u7a7a\u95f4,\u5f80\u91cc\u9762\u88c5\u5165\u4e00\u7cfb\u5217\u7684\u540d\u5b57/\u5c5e\u6027.. \u4e0d\u7528\u505a\u4efb\u4f55\u64cd\u4f5c, \u7c7b\u4e0e\u5b9e\u4f8b\u5316\u5bf9\u8c61\u5c31\u6ee1\u8db3\u88c5\u7684\u6982\u5ff5\u5566;\u4f46\u4e0d\u6ee1\u8db3\u5c01, \u56e0\u4e3a\u5b83\u4eec\u7684\u5c5e\u6027, \u5185\u5916\u90fd\u80fd\u8bbf\u95ee\u7684\u5230. class People : country = 'China' def __init__ ( self , name , age , sex ): self . name = name self . age = age self . sex = sex print ( People . country ) # -- \u5185\u90e8\u8bbf\u95ee \u7c7b\u5c5e\u6027 def eat ( self ): print ( ' %s is eating....' % self . name ) # -- \u5185\u90e8\u8bbf\u95ee \u5b9e\u4f8b\u5316\u5bf9\u8c61\u5c5e\u6027 # print(People.__country) # \u6ce8\u610f\u54e6!\u62a5\u9519,\u56e0\u4e3aPeople\u7c7b\u5728\u8fd9\u91cc\u8fd8\u6ca1\u6709\u5b9a\u4e49\u5b8c.. peo1 = People ( '\u5c0f\u5ddd' , 20 , 'male' ) print ( peo1 . name ) # -- \u5916\u90e8\u8bbf\u95ee \u5b9e\u4f8b\u5316\u5c5e\u6027 print ( People . country ) # -- \u5916\u90e8\u8bbf\u95ee \u7c7b\u5c5e\u6027 \u2606\u5982\u4f55\u5c01\u88c5\uff1f \u00b6 \u5728\u5c5e\u6027\u524d\u52a0\u4e0a __ \u5f00\u5934.. \u8fd9\u79cd\u9690\u85cf\u662f\u5bf9\u5916\u4e0d\u5bf9\u5185\u7684, \u5373\u5728\u7c7b\u7684\u5185\u90e8\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee,\u800c\u5728\u7c7b\u7684\u5916\u90e8\u65e0\u6cd5\u76f4\u63a5\u8bbf\u95ee.. class People : __country = 'China' def __init__ ( self , name , age , sex ): self . __name = name self . age = age self . sex = sex def speak ( self ): print ( 'is speaking...' ) print ( People . __country ) def eat ( self ): print ( 'is eating...' ) print ( self . __name ) def __run ( self ): print ( 'is running...' ) # -- \u7c7b\u5c5e\u6027 \u5185\u90e8\u80fd\u8bbf\u95ee,\u5916\u90e8\u4e0d\u80fd People . speak ( 123 ) # People.__run(123) # type object 'People' has no attribute '__run' # print(People.__country) # type object 'People' has no attribute '__country' # -- \u5b9e\u4f8b\u5316\u5bf9\u8c61\u5c5e\u6027 \u5185\u90e8\u80fd\u8bbf\u95ee,\u5916\u90e8\u4e0d\u80fd peo1 = People ( '\u5c0f\u5ddd' , 20 , 'male' ) peo1 . eat () # print(peo1.__name) # 'People' object has no attribute 'name' \u2606\u5c01\u88c5\u5e95\u5c42\u539f\u7406 \u00b6 \u5c01\u88c5\u7684\u9690\u85cf\u5c5e\u6027\u7684\u5e95\u5c42\u539f\u7406/\u7279\u5b9a: 1> \u8fd9\u79cd\u9690\u85cf\u4ec5\u4ec5\u53ea\u662f\u4e00\u79cd \u8bed\u6cd5\u4e0a\u7684\u53d8\u5f62\u64cd\u4f5c _\u7c7b\u540d__\u5c5e\u6027\u540d 2> \u8fd9\u79cd\u8bed\u6cd5\u4e0a\u7684\u53d8\u5f62 \u53ea\u5728\u7c7b\u5b9a\u4e49\u9636\u6bb5\u53d1\u751f\u4e00\u6b21 .. \u56e0\u4e3a\u7c7b\u4f53\u4ee3\u7801\u4ec5\u4ec5\u53ea\u5728\u7c7b\u5b9a\u4e49\u9636\u6bb5\u68c0\u6d4b\u4e00\u6b21.. 3> \u8fd9\u79cd\u9690\u85cf\u662f \u5bf9\u5916\u4e0d\u5bf9\u5185 \u7684,\u5373\u5728\u7c7b\u7684\u5185\u90e8\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee,\u800c\u5728\u7c7b\u7684\u5916\u90e8\u65e0\u6cd5\u76f4\u63a5\u8bbf\u95ee, \u539f\u56e0\u662f \u5728\u7c7b\u5b9a\u4e49\u9636\u6bb5, \u7c7b\u4f53\u5185\u4ee3\u7801 \u7edf\u4e00 \u53d1\u751f\u4e86\u4e00\u6b21\u53d8\u5f62... 4> \u5982\u679c\u4e0d\u60f3\u8ba9\u5b50\u7c7b\u7684\u65b9\u6cd5\u8986\u76d6\u7236\u7c7b\u7684, \u53ef\u4ee5\u5c06\u8be5\u65b9\u6cd5\u540d\u524d\u52a0\u4e00\u4e2a__\u5f00\u5934. \u5f53\u8fd0\u884c\u5230\u7c7b\u4f53\u4ee3\u7801,\u4f1a\u4ece\u4e0a\u5230\u4e0b,\u5148\u68c0\u6d4b\u5f53\u524d\u884c\u7684\u8bed\u6cd5(\u9047\u5230\u51fd\u6570\u7684\u8bdd,\u4e5f\u4f1a\u5148\u68c0\u6d4b\u51fd\u6570\u4f53\u91cc\u7684\u4ee3\u7801), \u5728\u68c0\u6d4b\u8fc7\u7a0b\u4e2d\u5c31\u5c06\u5c01\u88c5\u5c5e\u6027\u7684\u540d\u5b57\u8fdb\u884c\u4e86\u53d8\u5f62\uff01\u68c0\u6d4b\u540e\u6267\u884c\u5f53\u524d\u884c\u4ee3\u7801.\u4e22\u8fdb\u540d\u79f0\u7a7a\u95f4\u7684\u540d\u5b57\u5c31\u53d8\u6210\u4e86\u68c0\u6d4b\u65f6\u53d8\u5f62\u7684\u540d\u5b57. \u6240\u4ee5\u80fd\u5728\u5185\u90e8\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u5230,\u5728\u5916\u90e8\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee\u5230.. \u9610\u8ff0\u7684\u597d\u5570\u55e6... \u53cd\u590d\u6a2a\u8df3 \u53ea\u53ef\u610f\u4f1a\u4e0d\u53ef\u8a00\u4f20.(\u00b4\u25bd\uff40) # {'_People__name': '\u5c0f\u5ddd', 'age': 20, 'sex': 'male'} print ( peo1 . __dict__ ) # {... '_People__country': 'China', ... , # '_People__run': <function People.__run at 0x7fedb7f1cc10> ...} print ( People . __dict__ ) \u8fd9\u610f\u5473\u7740,\u5728\u7c7b\u4f53\u5916,\u4ee5\u5c01\u88c5\u7684\u65b9\u5f0f\u8bd5\u56fe\u6dfb\u52a0\u4e00\u4e2a\u9690\u85cf\u5c5e\u6027..\u4e0d\u4f1a\u5bf9\u5176\u53d8\u5f62\uff01\uff01 # {'_People__name': '\u5c0f\u5ddd', 'age': 20, 'sex': 'male', '__height': 173} peo1 . __height = 173 print ( peo1 . __dict__ ) \u5728\u7ee7\u627f\u90a3\u4e00\u5c0f\u8282,\u5206\u6790 '\u5b9e\u4f8b\u5316\u5bf9\u8c61\u67e5\u627e\u5c5e\u6027\u7684\u987a\u5e8f'\u65f6, \u4e3e\u4e86\u4ee5\u4e0b\u8fd9\u4e2a\u4f8b\u5b50: \u9a8c\u8bc1\u4e0a\u65b9\u5e95\u5c42\u539f\u7406\u7684\u7b2c4\u70b9 ...\u4e0d\u60f3\u8ba9\u5b50\u7c7b\u7684\u65b9\u6cd5\u8986\u76d6\u7236\u7c7b\u7684... : \u82e5\u60f3\u8bbf\u95ee\u5230\u7684\u662fA\u7c7b\u91cc\u7684func1,\u5982\u4f55\u505a\uff1f\uff1f \u91c7\u7528\u53cc\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u65b9\u5f0f\u5c06\u65b9\u6cd5\u8bbe\u7f6e\u4e3a\u79c1\u6709\u7684! class A : def func1 ( self ): print ( 'A.func1' ) def func2 ( self ): print ( 'A.func2' ) self . func1 () # obj.func1() class B ( A ): def func1 ( self ): print ( 'B.func1' ) obj = B () obj . func2 () \"\"\" A.func2 B.func1 \"\"\" # -- (\uffe3O\uffe3;) \u7528\u5c01\u88c5\u5c06\u5176\u53d8\u4e2a\u5f62\uff01\uff01\u770b\u4f3c\u76f8\u540c\u5b9e\u5219\u53d1\u751f\u4e86\u53d8\u5f62. # \u5b50\u7c7b\u9690\u85cf\u7236\u7c7b\u4e0d\u9690\u85cf;\u7236\u7c7b\u9690\u85cf\u5b50\u7c7b\u4e0d\u9690\u85cf;\u90fd\u9690\u85cf ... \u90fd\u80fd\u5b9e\u73b0\u4e0a\u65b9\u53d8\u66f4\u7684\u9700\u6c42. class A : def __func1 ( self ): # _A.__func1 print ( 'A.func1' ) def func2 ( self ): print ( 'A.func2' ) self . __func1 () # self._A__func1 obj._A__func1 class B ( A ): def __func1 ( self ): # _B__func1 print ( 'B.func1' ) obj = B () obj . func2 () \"\"\" A.func2 A.func1 \"\"\" # ------------- class Foo : __x = 111 # _Foo__x class Bar ( Foo ): __x = 222 # _Bar__x -- \u6ca1\u6709\u8986\u76d6\u7684\u6548\u679c \u2606\u5f00\u53d1\u63a5\u53e3 \u00b6 \u9690\u85cf\u6570\u636e\u5c5e\u6027 \u00b6 \u5c01\u88c5\u6570\u636e\u5c5e\u6027\u7684\u76ee\u7684/\u5e94\u7528\u573a\u666f : \u9996\u5148\u5b9a\u4e49\u5c5e\u6027\u7684\u76ee\u7684\u5c31\u662f\u4e3a\u4e86\u7ed9\u7c7b\u5916\u90e8\u7684\u4f7f\u7528\u8005\u4f7f\u7528\u7684. \u9690\u85cf\u4e4b\u540e\u662f \u4e3a\u4e86\u4e0d\u8ba9\u5916\u90e8\u4f7f\u7528\u8005\u76f4\u63a5\u4f7f\u7528 ,\u9700\u8981\u5728\u7c7b\u5185\u90e8\u5f00\u8f9f\u4e00\u4e2a\u63a5\u53e3. \u7136\u540e\u8ba9\u7c7b\u5916\u90e8\u7684\u4f7f\u7528\u8005\u901a\u8fc7\u63a5\u53e3\u6765\u95f4\u63a5\u5730\u64cd\u4f5c\u9690\u85cf\u7684\u5c5e\u6027. \u7cbe\u9ad3\u5728\u4e8e -- \u6211\u4eec\u53ef\u4ee5\u5728\u63a5\u53e3\u4e4b\u4e0a\u9644\u52a0\u4efb\u610f\u7684\u903b\u8f91,\u4ece\u800c\u4e25\u683c\u63a7\u5236\u4f7f\u7528\u8005\u5bf9\u5c5e\u6027\u7684\u64cd\u4f5c \uff01 '\u589e\u5220\u6539\u67e5' class People : def __init__ ( self , name , age ): self . __name = name self . __age = age def tell_info ( self ): print ( f '\u59d3\u540d: { self . __name } ,\u5e74\u9f84: { self . __age } ' ) def set_info ( self , name , age ): if type ( name ) is not str : print ( '\u7528\u6237\u540d\u5fc5\u987b\u4e3astr\u7c7b\u578b!' ) return if not isinstance ( age , int ): # \u4e3b\u52a8\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\u8ba9\u7a0b\u5e8f\u7ed3\u675f\u8fd0\u884c raise TypeError ( '\u5e74\u9f84\u5fc5\u987b\u4e3a\u6574\u578b!' ) self . __name = name self . __age = age peo1 = People ( 'egon' , 18 ) peo1 . set_info ( '\u5c0f\u5ddd' , 20 ) peo1 . tell_info () # \u59d3\u540d:\u5c0f\u5ddd,\u5e74\u9f84:20 \"\"\" \u5c01\u88c5\u6570\u636e\u5c5e\u6027\u5e76\u4e0d\u662f\u8ba9\u4f7f\u7528\u8005\u4e0d\u7528,\u53ea\u662f\u4e0d\u8ba9\u4ed6\u76f4\u63a5\u7528,\u8ba9\u5176\u4f7f\u7528\u5185\u90e8\u5f00\u53d1\u7684\u63a5\u53e3\u5b9e\u73b0\u95f4\u63a5\u4f7f\u7528, \u800c\u5f00\u53d1\u8005\u53ef\u4ee5\u5728\u63a5\u53e3\u4e0a\u6dfb\u52a0\u903b\u8f91\u4e25\u683c\u63a7\u5236\u4f7f\u7528\u8005\u7684\u64cd\u4f5c\u884c\u4e3a \"\"\" \u9690\u85cf\u51fd\u6570\u5c5e\u6027 \u00b6 \u5c01\u88c5\u51fd\u6570\u5c5e\u6027\u7684\u76ee\u7684: \u9996\u5148\u5b9a\u4e49\u5c5e\u6027\u7684\u76ee\u7684\u5c31\u662f\u4e3a\u4e86\u7ed9\u7c7b\u5916\u90e8\u7684\u4f7f\u7528\u8005\u4f7f\u7528\u7684. \u9690\u85cf\u51fd\u6570\u5c5e\u6027\u662f\u4e3a\u4e86\u4e0d\u8ba9\u5916\u90e8\u4f7f\u7528\u8005\u76f4\u63a5\u4f7f\u7528,\u9700\u8981\u7c7b\u5185\u90e8\u5f00\u8f9f\u4e00\u4e2a\u63a5\u53e3. \u7136\u540e\u5728\u63a5\u53e3\u5185\u53bb\u8c03\u7528\u9690\u85cf\u7684\u529f\u80fd \u7cbe\u9ad3\u5728\u4e8e -- \u9694\u79bb\u4e86\u590d\u6742\u5ea6\uff01 \u6817\u5b500: \u7535\u89c6\u673a\u672c\u8eab\u662f\u4e2a\u9ed1\u76d2\u5b50,\u9690\u85cf\u4e86\u6240\u6709\u7ec6\u8282,\u4f46\u662f\u4e00\u5b9a\u4f1a\u5bf9\u5916\u63d0\u4f9b\u4e00\u5806\u6309\u94ae,\u8fd9\u4e9b\u6309\u94ae\u4e5f\u6b63\u662f\u63a5\u53e3\u7684\u6982\u5ff5 \u6817\u5b501: \u5feb\u95e8\u5c31\u662f\u50bb\u74dc\u76f8\u673a\u4e3a\u50bb\u74dc\u4eec\u63d0\u4f9b\u7684\u65b9\u6cd5,\u8be5\u65b9\u6cd5\u5c06\u5185\u90e8\u590d\u6742\u7684\u7167\u76f8\u529f\u80fd\u90fd\u9690\u85cf\u8d77\u6765\u5566. \"\"\" \u53d6\u6b3e\u662f\u529f\u80fd,\u800c\u8fd9\u4e2a\u529f\u80fd\u6709\u5f88\u591a\u529f\u80fd\u7ec4\u6210:\u63d2\u5361\u3001\u5bc6\u7801\u8ba4\u8bc1\u3001\u8f93\u5165\u91d1\u989d\u3001\u6253\u5370\u8d26\u5355\u3001\u53d6\u94b1 \u5bf9\u4f7f\u7528\u8005\u6765\u8bf4,\u53ea\u9700\u8981\u77e5\u9053\u53d6\u6b3e\u8fd9\u4e2a\u529f\u80fd\u5373\u53ef,\u5176\u4f59\u529f\u80fd\u6211\u4eec\u90fd\u53ef\u4ee5\u9690\u85cf\u8d77\u6765 \u5f88\u660e\u663e\u8fd9\u4e48\u505a,\u9694\u79bb\u4e86\u590d\u6742\u5ea6,\u540c\u65f6\u4e5f\u63d0\u5347\u4e86\u5b89\u5168\u6027 \"\"\" class ATM : def __card ( self ): print ( '\u63d2\u5361' ) def __auth ( self ): print ( '\u7528\u6237\u8ba4\u8bc1' ) def __input ( self ): print ( '\u8f93\u5165\u53d6\u6b3e\u91d1\u989d' ) def __print_bill ( self ): print ( '\u6253\u5370\u8d26\u5355' ) def __take_money ( self ): print ( '\u53d6\u6b3e' ) def withdraw ( self ): self . __card () self . __auth () self . __input () self . __print_bill () self . __take_money () a = ATM () a . withdraw () @property \u00b6 \u65b9\u6cd5\u4f2a\u88c5\u6570\u636e\u5c5e\u6027 property\u88c5\u9970\u5668\u7528\u4e8e\u5c06\u88ab\u88c5\u9970\u7684\u65b9\u6cd5 \u4f2a\u88c5\u6210\u4e00\u4e2a\u6570\u636e\u5c5e\u6027 ,\u5728\u4f7f\u7528\u65f6\u53ef\u4ee5\u4e0d\u7528\u52a0\u62ec\u53f7\u800c\u76f4\u63a5\u4f7f\u7528. class People : def __init__ ( self , name , weight , height ): self . name = name self . weight = weight self . height = height # \u4e0d\u59a5, \u56e0\u4e3abmi\u6307\u6570\u5e94\u8be5\u662f\u968f\u7740\u8eab\u9ad8\u4f53\u91cd\u7684\u53d8\u5316\u800c\u53d8\u5316\u7684 # self.bmi = self.weight / (self.height**2) @property def bmi ( self ): return self . weight / ( self . height ** 2 ) peo1 = People ( 'egon' , 75 , 1.8 ) print ( peo1 . bmi ) # 23.148148148148145 # BMI\u6307\u6570\u542c\u8d77\u6765\u66f4\u50cf\u662f\u4e00\u4e2a\u7279\u5f81(\u6570\u636e\u5c5e\u6027)\u800c\u4e0d\u662f\u6280\u80fd(\u51fd\u6570\u5c5e\u6027). # @property \u5c06bmi\u8fd9\u4e2a\u6280\u80fd\u4f2a\u88c5\u6210\u4e86\u4e00\u4e2a\u7279\u5f81 \u7ed3\u5408\u5c01\u88c5\u7684\u5e94\u7528 \u4e0e\u5c01\u88c5\u7684\u5c5e\u6027 \u7ed3\u5408\u7740 \u4f7f\u7528\uff01 >> \u67e5\u770b - \u4fee\u6539 - \u5220\u9664 << class People : def __init__ ( self , name ): self . __name = name @property def name ( self ): return f '\u59d3\u540d: { self . __name } ' @name . setter # \u524d\u63d0\u662fname\u65b9\u6cd5\u88abproperty\u88c5\u9970\u8fc7\u4e86. def name ( self , name ): if type ( name ) is not str : raise TypeError ( '\u540d\u5b57\u5fc5\u987b\u4e3astr\u7c7b\u578b..' ) self . __name = name @name . deleter def name ( self ): # del self.__name # raise PermissionError('\u4e0d\u5141\u8bb8\u5220\u9664\uff01') print ( '\u4e0d\u5141\u8bb8\u5220\u9664\uff01' ) peo1 = People ( 'egon' ) print ( peo1 . name ) # \u59d3\u540d:egon peo1 . name = '\u5c0f\u5ddd' print ( peo1 . name ) # \u59d3\u540d:\u5c0f\u5ddd del peo1 . name # \u4e0d\u5141\u8bb8\u5220\u9664\uff01 \"\"\"Ps \u8fdc\u53e4\u7684\u7528\u6cd5,\u5b9e\u73b0\u7684\u6548\u679c\u662f\u4e00\u6837\u7684. class People: def __init__(self, name): self.__name = name def get_name(self): return f'\u59d3\u540d:{self.__name}' def set_name(self, name): if type(name) is not str: raise TypeError('\u540d\u5b57\u5fc5\u987b\u4e3astr\u7c7b\u578b..') self.__name = name def del_name(self): print('\u4e0d\u5141\u8bb8\u5220\u9664\uff01') name = property(get_name, set_name, del_name) peo1 = People('egon') print(peo1.name) # \u59d3\u540d:egon peo1.name = '\u5c0f\u5ddd' \"\"\"","title":"\u5c01\u88c5\u4e0e\u63a5\u53e3"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3_%E5%B0%81%E8%A3%85%E4%B8%8E%E6%8E%A5%E5%8F%A3/#_1","text":"","title":"\u5c01\u88c5"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3_%E5%B0%81%E8%A3%85%E4%B8%8E%E6%8E%A5%E5%8F%A3/#_2","text":"[ \u5c01: ] \u5c5e\u6027\u5bf9\u5916\u662f\u9690\u85cf\u7684, \u5bf9\u5185\u662f\u5f00\u653e\u7684 .. \u88c5: \u7533\u8bf7\u4e00\u4e2a\u540d\u79f0\u7a7a\u95f4,\u5f80\u91cc\u9762\u88c5\u5165\u4e00\u7cfb\u5217\u7684\u540d\u5b57/\u5c5e\u6027.. \u4e0d\u7528\u505a\u4efb\u4f55\u64cd\u4f5c, \u7c7b\u4e0e\u5b9e\u4f8b\u5316\u5bf9\u8c61\u5c31\u6ee1\u8db3\u88c5\u7684\u6982\u5ff5\u5566;\u4f46\u4e0d\u6ee1\u8db3\u5c01, \u56e0\u4e3a\u5b83\u4eec\u7684\u5c5e\u6027, \u5185\u5916\u90fd\u80fd\u8bbf\u95ee\u7684\u5230. class People : country = 'China' def __init__ ( self , name , age , sex ): self . name = name self . age = age self . sex = sex print ( People . country ) # -- \u5185\u90e8\u8bbf\u95ee \u7c7b\u5c5e\u6027 def eat ( self ): print ( ' %s is eating....' % self . name ) # -- \u5185\u90e8\u8bbf\u95ee \u5b9e\u4f8b\u5316\u5bf9\u8c61\u5c5e\u6027 # print(People.__country) # \u6ce8\u610f\u54e6!\u62a5\u9519,\u56e0\u4e3aPeople\u7c7b\u5728\u8fd9\u91cc\u8fd8\u6ca1\u6709\u5b9a\u4e49\u5b8c.. peo1 = People ( '\u5c0f\u5ddd' , 20 , 'male' ) print ( peo1 . name ) # -- \u5916\u90e8\u8bbf\u95ee \u5b9e\u4f8b\u5316\u5c5e\u6027 print ( People . country ) # -- \u5916\u90e8\u8bbf\u95ee \u7c7b\u5c5e\u6027","title":"\u2606\u4ec0\u4e48\u662f\u5c01\u88c5\uff1f"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3_%E5%B0%81%E8%A3%85%E4%B8%8E%E6%8E%A5%E5%8F%A3/#_3","text":"\u5728\u5c5e\u6027\u524d\u52a0\u4e0a __ \u5f00\u5934.. \u8fd9\u79cd\u9690\u85cf\u662f\u5bf9\u5916\u4e0d\u5bf9\u5185\u7684, \u5373\u5728\u7c7b\u7684\u5185\u90e8\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee,\u800c\u5728\u7c7b\u7684\u5916\u90e8\u65e0\u6cd5\u76f4\u63a5\u8bbf\u95ee.. class People : __country = 'China' def __init__ ( self , name , age , sex ): self . __name = name self . age = age self . sex = sex def speak ( self ): print ( 'is speaking...' ) print ( People . __country ) def eat ( self ): print ( 'is eating...' ) print ( self . __name ) def __run ( self ): print ( 'is running...' ) # -- \u7c7b\u5c5e\u6027 \u5185\u90e8\u80fd\u8bbf\u95ee,\u5916\u90e8\u4e0d\u80fd People . speak ( 123 ) # People.__run(123) # type object 'People' has no attribute '__run' # print(People.__country) # type object 'People' has no attribute '__country' # -- \u5b9e\u4f8b\u5316\u5bf9\u8c61\u5c5e\u6027 \u5185\u90e8\u80fd\u8bbf\u95ee,\u5916\u90e8\u4e0d\u80fd peo1 = People ( '\u5c0f\u5ddd' , 20 , 'male' ) peo1 . eat () # print(peo1.__name) # 'People' object has no attribute 'name'","title":"\u2606\u5982\u4f55\u5c01\u88c5\uff1f"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3_%E5%B0%81%E8%A3%85%E4%B8%8E%E6%8E%A5%E5%8F%A3/#_4","text":"\u5c01\u88c5\u7684\u9690\u85cf\u5c5e\u6027\u7684\u5e95\u5c42\u539f\u7406/\u7279\u5b9a: 1> \u8fd9\u79cd\u9690\u85cf\u4ec5\u4ec5\u53ea\u662f\u4e00\u79cd \u8bed\u6cd5\u4e0a\u7684\u53d8\u5f62\u64cd\u4f5c _\u7c7b\u540d__\u5c5e\u6027\u540d 2> \u8fd9\u79cd\u8bed\u6cd5\u4e0a\u7684\u53d8\u5f62 \u53ea\u5728\u7c7b\u5b9a\u4e49\u9636\u6bb5\u53d1\u751f\u4e00\u6b21 .. \u56e0\u4e3a\u7c7b\u4f53\u4ee3\u7801\u4ec5\u4ec5\u53ea\u5728\u7c7b\u5b9a\u4e49\u9636\u6bb5\u68c0\u6d4b\u4e00\u6b21.. 3> \u8fd9\u79cd\u9690\u85cf\u662f \u5bf9\u5916\u4e0d\u5bf9\u5185 \u7684,\u5373\u5728\u7c7b\u7684\u5185\u90e8\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee,\u800c\u5728\u7c7b\u7684\u5916\u90e8\u65e0\u6cd5\u76f4\u63a5\u8bbf\u95ee, \u539f\u56e0\u662f \u5728\u7c7b\u5b9a\u4e49\u9636\u6bb5, \u7c7b\u4f53\u5185\u4ee3\u7801 \u7edf\u4e00 \u53d1\u751f\u4e86\u4e00\u6b21\u53d8\u5f62... 4> \u5982\u679c\u4e0d\u60f3\u8ba9\u5b50\u7c7b\u7684\u65b9\u6cd5\u8986\u76d6\u7236\u7c7b\u7684, \u53ef\u4ee5\u5c06\u8be5\u65b9\u6cd5\u540d\u524d\u52a0\u4e00\u4e2a__\u5f00\u5934. \u5f53\u8fd0\u884c\u5230\u7c7b\u4f53\u4ee3\u7801,\u4f1a\u4ece\u4e0a\u5230\u4e0b,\u5148\u68c0\u6d4b\u5f53\u524d\u884c\u7684\u8bed\u6cd5(\u9047\u5230\u51fd\u6570\u7684\u8bdd,\u4e5f\u4f1a\u5148\u68c0\u6d4b\u51fd\u6570\u4f53\u91cc\u7684\u4ee3\u7801), \u5728\u68c0\u6d4b\u8fc7\u7a0b\u4e2d\u5c31\u5c06\u5c01\u88c5\u5c5e\u6027\u7684\u540d\u5b57\u8fdb\u884c\u4e86\u53d8\u5f62\uff01\u68c0\u6d4b\u540e\u6267\u884c\u5f53\u524d\u884c\u4ee3\u7801.\u4e22\u8fdb\u540d\u79f0\u7a7a\u95f4\u7684\u540d\u5b57\u5c31\u53d8\u6210\u4e86\u68c0\u6d4b\u65f6\u53d8\u5f62\u7684\u540d\u5b57. \u6240\u4ee5\u80fd\u5728\u5185\u90e8\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u5230,\u5728\u5916\u90e8\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee\u5230.. \u9610\u8ff0\u7684\u597d\u5570\u55e6... \u53cd\u590d\u6a2a\u8df3 \u53ea\u53ef\u610f\u4f1a\u4e0d\u53ef\u8a00\u4f20.(\u00b4\u25bd\uff40) # {'_People__name': '\u5c0f\u5ddd', 'age': 20, 'sex': 'male'} print ( peo1 . __dict__ ) # {... '_People__country': 'China', ... , # '_People__run': <function People.__run at 0x7fedb7f1cc10> ...} print ( People . __dict__ ) \u8fd9\u610f\u5473\u7740,\u5728\u7c7b\u4f53\u5916,\u4ee5\u5c01\u88c5\u7684\u65b9\u5f0f\u8bd5\u56fe\u6dfb\u52a0\u4e00\u4e2a\u9690\u85cf\u5c5e\u6027..\u4e0d\u4f1a\u5bf9\u5176\u53d8\u5f62\uff01\uff01 # {'_People__name': '\u5c0f\u5ddd', 'age': 20, 'sex': 'male', '__height': 173} peo1 . __height = 173 print ( peo1 . __dict__ ) \u5728\u7ee7\u627f\u90a3\u4e00\u5c0f\u8282,\u5206\u6790 '\u5b9e\u4f8b\u5316\u5bf9\u8c61\u67e5\u627e\u5c5e\u6027\u7684\u987a\u5e8f'\u65f6, \u4e3e\u4e86\u4ee5\u4e0b\u8fd9\u4e2a\u4f8b\u5b50: \u9a8c\u8bc1\u4e0a\u65b9\u5e95\u5c42\u539f\u7406\u7684\u7b2c4\u70b9 ...\u4e0d\u60f3\u8ba9\u5b50\u7c7b\u7684\u65b9\u6cd5\u8986\u76d6\u7236\u7c7b\u7684... : \u82e5\u60f3\u8bbf\u95ee\u5230\u7684\u662fA\u7c7b\u91cc\u7684func1,\u5982\u4f55\u505a\uff1f\uff1f \u91c7\u7528\u53cc\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u65b9\u5f0f\u5c06\u65b9\u6cd5\u8bbe\u7f6e\u4e3a\u79c1\u6709\u7684! class A : def func1 ( self ): print ( 'A.func1' ) def func2 ( self ): print ( 'A.func2' ) self . func1 () # obj.func1() class B ( A ): def func1 ( self ): print ( 'B.func1' ) obj = B () obj . func2 () \"\"\" A.func2 B.func1 \"\"\" # -- (\uffe3O\uffe3;) \u7528\u5c01\u88c5\u5c06\u5176\u53d8\u4e2a\u5f62\uff01\uff01\u770b\u4f3c\u76f8\u540c\u5b9e\u5219\u53d1\u751f\u4e86\u53d8\u5f62. # \u5b50\u7c7b\u9690\u85cf\u7236\u7c7b\u4e0d\u9690\u85cf;\u7236\u7c7b\u9690\u85cf\u5b50\u7c7b\u4e0d\u9690\u85cf;\u90fd\u9690\u85cf ... \u90fd\u80fd\u5b9e\u73b0\u4e0a\u65b9\u53d8\u66f4\u7684\u9700\u6c42. class A : def __func1 ( self ): # _A.__func1 print ( 'A.func1' ) def func2 ( self ): print ( 'A.func2' ) self . __func1 () # self._A__func1 obj._A__func1 class B ( A ): def __func1 ( self ): # _B__func1 print ( 'B.func1' ) obj = B () obj . func2 () \"\"\" A.func2 A.func1 \"\"\" # ------------- class Foo : __x = 111 # _Foo__x class Bar ( Foo ): __x = 222 # _Bar__x -- \u6ca1\u6709\u8986\u76d6\u7684\u6548\u679c","title":"\u2606\u5c01\u88c5\u5e95\u5c42\u539f\u7406"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3_%E5%B0%81%E8%A3%85%E4%B8%8E%E6%8E%A5%E5%8F%A3/#_5","text":"","title":"\u2606\u5f00\u53d1\u63a5\u53e3"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3_%E5%B0%81%E8%A3%85%E4%B8%8E%E6%8E%A5%E5%8F%A3/#_6","text":"\u5c01\u88c5\u6570\u636e\u5c5e\u6027\u7684\u76ee\u7684/\u5e94\u7528\u573a\u666f : \u9996\u5148\u5b9a\u4e49\u5c5e\u6027\u7684\u76ee\u7684\u5c31\u662f\u4e3a\u4e86\u7ed9\u7c7b\u5916\u90e8\u7684\u4f7f\u7528\u8005\u4f7f\u7528\u7684. \u9690\u85cf\u4e4b\u540e\u662f \u4e3a\u4e86\u4e0d\u8ba9\u5916\u90e8\u4f7f\u7528\u8005\u76f4\u63a5\u4f7f\u7528 ,\u9700\u8981\u5728\u7c7b\u5185\u90e8\u5f00\u8f9f\u4e00\u4e2a\u63a5\u53e3. \u7136\u540e\u8ba9\u7c7b\u5916\u90e8\u7684\u4f7f\u7528\u8005\u901a\u8fc7\u63a5\u53e3\u6765\u95f4\u63a5\u5730\u64cd\u4f5c\u9690\u85cf\u7684\u5c5e\u6027. \u7cbe\u9ad3\u5728\u4e8e -- \u6211\u4eec\u53ef\u4ee5\u5728\u63a5\u53e3\u4e4b\u4e0a\u9644\u52a0\u4efb\u610f\u7684\u903b\u8f91,\u4ece\u800c\u4e25\u683c\u63a7\u5236\u4f7f\u7528\u8005\u5bf9\u5c5e\u6027\u7684\u64cd\u4f5c \uff01 '\u589e\u5220\u6539\u67e5' class People : def __init__ ( self , name , age ): self . __name = name self . __age = age def tell_info ( self ): print ( f '\u59d3\u540d: { self . __name } ,\u5e74\u9f84: { self . __age } ' ) def set_info ( self , name , age ): if type ( name ) is not str : print ( '\u7528\u6237\u540d\u5fc5\u987b\u4e3astr\u7c7b\u578b!' ) return if not isinstance ( age , int ): # \u4e3b\u52a8\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\u8ba9\u7a0b\u5e8f\u7ed3\u675f\u8fd0\u884c raise TypeError ( '\u5e74\u9f84\u5fc5\u987b\u4e3a\u6574\u578b!' ) self . __name = name self . __age = age peo1 = People ( 'egon' , 18 ) peo1 . set_info ( '\u5c0f\u5ddd' , 20 ) peo1 . tell_info () # \u59d3\u540d:\u5c0f\u5ddd,\u5e74\u9f84:20 \"\"\" \u5c01\u88c5\u6570\u636e\u5c5e\u6027\u5e76\u4e0d\u662f\u8ba9\u4f7f\u7528\u8005\u4e0d\u7528,\u53ea\u662f\u4e0d\u8ba9\u4ed6\u76f4\u63a5\u7528,\u8ba9\u5176\u4f7f\u7528\u5185\u90e8\u5f00\u53d1\u7684\u63a5\u53e3\u5b9e\u73b0\u95f4\u63a5\u4f7f\u7528, \u800c\u5f00\u53d1\u8005\u53ef\u4ee5\u5728\u63a5\u53e3\u4e0a\u6dfb\u52a0\u903b\u8f91\u4e25\u683c\u63a7\u5236\u4f7f\u7528\u8005\u7684\u64cd\u4f5c\u884c\u4e3a \"\"\"","title":"\u9690\u85cf\u6570\u636e\u5c5e\u6027"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3_%E5%B0%81%E8%A3%85%E4%B8%8E%E6%8E%A5%E5%8F%A3/#_7","text":"\u5c01\u88c5\u51fd\u6570\u5c5e\u6027\u7684\u76ee\u7684: \u9996\u5148\u5b9a\u4e49\u5c5e\u6027\u7684\u76ee\u7684\u5c31\u662f\u4e3a\u4e86\u7ed9\u7c7b\u5916\u90e8\u7684\u4f7f\u7528\u8005\u4f7f\u7528\u7684. \u9690\u85cf\u51fd\u6570\u5c5e\u6027\u662f\u4e3a\u4e86\u4e0d\u8ba9\u5916\u90e8\u4f7f\u7528\u8005\u76f4\u63a5\u4f7f\u7528,\u9700\u8981\u7c7b\u5185\u90e8\u5f00\u8f9f\u4e00\u4e2a\u63a5\u53e3. \u7136\u540e\u5728\u63a5\u53e3\u5185\u53bb\u8c03\u7528\u9690\u85cf\u7684\u529f\u80fd \u7cbe\u9ad3\u5728\u4e8e -- \u9694\u79bb\u4e86\u590d\u6742\u5ea6\uff01 \u6817\u5b500: \u7535\u89c6\u673a\u672c\u8eab\u662f\u4e2a\u9ed1\u76d2\u5b50,\u9690\u85cf\u4e86\u6240\u6709\u7ec6\u8282,\u4f46\u662f\u4e00\u5b9a\u4f1a\u5bf9\u5916\u63d0\u4f9b\u4e00\u5806\u6309\u94ae,\u8fd9\u4e9b\u6309\u94ae\u4e5f\u6b63\u662f\u63a5\u53e3\u7684\u6982\u5ff5 \u6817\u5b501: \u5feb\u95e8\u5c31\u662f\u50bb\u74dc\u76f8\u673a\u4e3a\u50bb\u74dc\u4eec\u63d0\u4f9b\u7684\u65b9\u6cd5,\u8be5\u65b9\u6cd5\u5c06\u5185\u90e8\u590d\u6742\u7684\u7167\u76f8\u529f\u80fd\u90fd\u9690\u85cf\u8d77\u6765\u5566. \"\"\" \u53d6\u6b3e\u662f\u529f\u80fd,\u800c\u8fd9\u4e2a\u529f\u80fd\u6709\u5f88\u591a\u529f\u80fd\u7ec4\u6210:\u63d2\u5361\u3001\u5bc6\u7801\u8ba4\u8bc1\u3001\u8f93\u5165\u91d1\u989d\u3001\u6253\u5370\u8d26\u5355\u3001\u53d6\u94b1 \u5bf9\u4f7f\u7528\u8005\u6765\u8bf4,\u53ea\u9700\u8981\u77e5\u9053\u53d6\u6b3e\u8fd9\u4e2a\u529f\u80fd\u5373\u53ef,\u5176\u4f59\u529f\u80fd\u6211\u4eec\u90fd\u53ef\u4ee5\u9690\u85cf\u8d77\u6765 \u5f88\u660e\u663e\u8fd9\u4e48\u505a,\u9694\u79bb\u4e86\u590d\u6742\u5ea6,\u540c\u65f6\u4e5f\u63d0\u5347\u4e86\u5b89\u5168\u6027 \"\"\" class ATM : def __card ( self ): print ( '\u63d2\u5361' ) def __auth ( self ): print ( '\u7528\u6237\u8ba4\u8bc1' ) def __input ( self ): print ( '\u8f93\u5165\u53d6\u6b3e\u91d1\u989d' ) def __print_bill ( self ): print ( '\u6253\u5370\u8d26\u5355' ) def __take_money ( self ): print ( '\u53d6\u6b3e' ) def withdraw ( self ): self . __card () self . __auth () self . __input () self . __print_bill () self . __take_money () a = ATM () a . withdraw ()","title":"\u9690\u85cf\u51fd\u6570\u5c5e\u6027"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3_%E5%B0%81%E8%A3%85%E4%B8%8E%E6%8E%A5%E5%8F%A3/#property","text":"\u65b9\u6cd5\u4f2a\u88c5\u6570\u636e\u5c5e\u6027 property\u88c5\u9970\u5668\u7528\u4e8e\u5c06\u88ab\u88c5\u9970\u7684\u65b9\u6cd5 \u4f2a\u88c5\u6210\u4e00\u4e2a\u6570\u636e\u5c5e\u6027 ,\u5728\u4f7f\u7528\u65f6\u53ef\u4ee5\u4e0d\u7528\u52a0\u62ec\u53f7\u800c\u76f4\u63a5\u4f7f\u7528. class People : def __init__ ( self , name , weight , height ): self . name = name self . weight = weight self . height = height # \u4e0d\u59a5, \u56e0\u4e3abmi\u6307\u6570\u5e94\u8be5\u662f\u968f\u7740\u8eab\u9ad8\u4f53\u91cd\u7684\u53d8\u5316\u800c\u53d8\u5316\u7684 # self.bmi = self.weight / (self.height**2) @property def bmi ( self ): return self . weight / ( self . height ** 2 ) peo1 = People ( 'egon' , 75 , 1.8 ) print ( peo1 . bmi ) # 23.148148148148145 # BMI\u6307\u6570\u542c\u8d77\u6765\u66f4\u50cf\u662f\u4e00\u4e2a\u7279\u5f81(\u6570\u636e\u5c5e\u6027)\u800c\u4e0d\u662f\u6280\u80fd(\u51fd\u6570\u5c5e\u6027). # @property \u5c06bmi\u8fd9\u4e2a\u6280\u80fd\u4f2a\u88c5\u6210\u4e86\u4e00\u4e2a\u7279\u5f81 \u7ed3\u5408\u5c01\u88c5\u7684\u5e94\u7528 \u4e0e\u5c01\u88c5\u7684\u5c5e\u6027 \u7ed3\u5408\u7740 \u4f7f\u7528\uff01 >> \u67e5\u770b - \u4fee\u6539 - \u5220\u9664 << class People : def __init__ ( self , name ): self . __name = name @property def name ( self ): return f '\u59d3\u540d: { self . __name } ' @name . setter # \u524d\u63d0\u662fname\u65b9\u6cd5\u88abproperty\u88c5\u9970\u8fc7\u4e86. def name ( self , name ): if type ( name ) is not str : raise TypeError ( '\u540d\u5b57\u5fc5\u987b\u4e3astr\u7c7b\u578b..' ) self . __name = name @name . deleter def name ( self ): # del self.__name # raise PermissionError('\u4e0d\u5141\u8bb8\u5220\u9664\uff01') print ( '\u4e0d\u5141\u8bb8\u5220\u9664\uff01' ) peo1 = People ( 'egon' ) print ( peo1 . name ) # \u59d3\u540d:egon peo1 . name = '\u5c0f\u5ddd' print ( peo1 . name ) # \u59d3\u540d:\u5c0f\u5ddd del peo1 . name # \u4e0d\u5141\u8bb8\u5220\u9664\uff01 \"\"\"Ps \u8fdc\u53e4\u7684\u7528\u6cd5,\u5b9e\u73b0\u7684\u6548\u679c\u662f\u4e00\u6837\u7684. class People: def __init__(self, name): self.__name = name def get_name(self): return f'\u59d3\u540d:{self.__name}' def set_name(self, name): if type(name) is not str: raise TypeError('\u540d\u5b57\u5fc5\u987b\u4e3astr\u7c7b\u578b..') self.__name = name def del_name(self): print('\u4e0d\u5141\u8bb8\u5220\u9664\uff01') name = property(get_name, set_name, del_name) peo1 = People('egon') print(peo1.name) # \u59d3\u540d:egon peo1.name = '\u5c0f\u5ddd' \"\"\"","title":"@property"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/4_%E7%BB%91%E5%AE%9A%E4%B8%8E%E9%9D%9E%E7%BB%91%E5%AE%9A%E6%96%B9%E6%B3%95/","text":"\u7ed1\u5b9a\u65b9\u6cd5 \u00b6 \u7ed1\u5b9a\u7ed9\u8c01\u5c31\u5e94\u8be5\u7531\u8c01\u6765 \u8c03\u7528.\u8c01\u6765\u8c03\u7528\u5c31\u4f1a\u5c06\u8c01\u5f53\u4f5c\u7b2c\u4e00\u4e2a\u53c2\u6570\u81ea\u52a8\u4f20\u5165. \u7cbe\u9ad3\u5728\u4e8e --- \u81ea\u52a8\u4f20\u503c \u2606\u5206\u7c7b self cls \u00b6 1> \u7ed1\u5b9a\u7ed9\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684\u65b9\u6cd5 \u5728\u7c7b\u5185\u90e8\u5b9a\u4e49\u7684\u51fd\u6570( \u7b2c\u4e00\u4e2a\u53c2\u6570\u7ea6\u5b9a\u4fd7\u6210\u5199\u4e3aself+\u6ca1\u6709\u88ab\u4efb\u4f55\u88c5\u9970\u5668\u4fee\u9970 ),\u901a\u5e38\u9ed8\u8ba4\u5c31\u662f\u7ed1\u5b9a\u7ed9\u5bf9\u8c61\u7528\u7684. \u53cd\u8fc7\u6765\u7406\u89e3,\u7c7b\u4e2d\u6ca1\u6709\u88ab\u88c5\u9970\u5668\u7ed1\u5b9a\u7684\u51fd\u6570,\u5c31\u662f\u7ed1\u5b9a\u7ed9\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7528\u7684,\u5bf9\u8c61\u4f7f\u7528\u65f6,\u4f1a\u81ea\u52a8\u5c06\u81ea\u5df1\u4f20\u5165, \u6240\u4ee5\u6b64\u51fd\u6570\u9700\u8981\u6709\u4e00\u4e2a\u5f62\u53c2\u6765\u63a5\u53d7, \u6b64\u5f62\u53c2\u7ea6\u5b9a\u5199\u6210self.\u4fbf\u4e8e\u533a\u5206. \u6709\u4e00\u4e9b__\u5f00\u5934\u7684\u51fd\u6570\u5c5e\u4e8e\u7279\u6b8a\u60c5\u51b5... \u7279\u6b8a\u60c5\u51b5\u7279\u6b8a\u5206\u6790 2> \u7ed1\u5b9a\u7ed9\u7c7b\u7684\u65b9\u6cd5 \u5728\u7c7b\u5185\u90e8\u5b9a\u4e49\u7684\u51fd\u6570( \u7b2c\u4e00\u4e2a\u53c2\u6570\u7ea6\u5b9a\u4fd7\u6210\u5199\u4e3acls )\u82e5\u88ab\u88c5\u9970\u5668@classmethod\u88c5\u9970\u5668\u88c5\u9970, \u90a3\u4e48\u5219\u662f\u7ed1\u5b9a\u7ed9\u7c7b\u7684,\u5e94\u8be5\u7531\u7c7b\u6765\u8c03\u7528,\u4f1a\u81ea\u52a8\u5c06\u7c7b\u5f53\u4f5c\u7b2c\u4e00\u4e2a\u53c2\u6570\u81ea\u52a8\u4f20\u5165 class Foo : @classmethod def f1 ( cls ): print ( cls ) def f2 ( self ): print ( self ) obj = Foo () # -- \u7ed1\u5b9a\u7ed9\u7c7b\u7684 # \u2605 \u4e86\u89e3:\u7ed1\u5b9a\u7ed9\u7c7b\u7684\u5e94\u8be5\u7531\u7c7b\u6765\u8c03\u7528,\u4f46\u5b9e\u4f8b\u5316\u5bf9\u8c61\u5176\u5b9e\u4e5f\u53ef\u4ee5\u4f7f\u7528,\u53ea\u4e0d\u8fc7\u81ea\u52a8\u4f20\u5165\u7684\u4ecd\u7136\u662f\u7c7b. print ( Foo . f1 ) # <bound method Foo.f1 of <class '__main__.Foo'>> print ( obj . f1 ) # <bound method Foo.f1 of <class '__main__.Foo'>> Foo . f1 () # <class '__main__.Foo'> obj . f1 () # <class '__main__.Foo'> # -- \u7ed1\u5b9a\u7ed9\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684 print ( obj . f2 ) # <bound method Foo.f2 of <__main__.Foo object at 0x7f90898498e0>> print ( Foo . f2 ) # <function Foo.f2 at 0x7f9089848b80> \u666e\u901a\u65b9\u6cd5 \u8be5\u4f20\u591a\u5c11\u53c2\u6570\u5c31\u4f20\u591a\u5c11\u53c2\u6570 obj . f2 () # <__main__.Foo object at 0x7f90898498e0> Foo . f2 () # \u62a5\u9519:f2() missing 1 required positional argument: 'self' \u2606\u5e94\u7528 \u00b6 \u82e5\u51fd\u6570\u4f53\u4ee3\u7801\u9700\u8981\u7528\u5916\u90e8\u4f20\u5165\u7684\u7c7b, \u5219\u5e94\u8be5\u5c06\u8be5\u51fd\u6570\u5b9a\u4e49\u6210\u7ed1\u5b9a\u7ed9\u7c7b\u7684\u65b9\u6cd5. \u82e5\u51fd\u6570\u4f53\u4ee3\u7801\u9700\u8981\u7528\u5916\u90e8\u4f20\u5165\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61, \u5219\u5e94\u8be5\u5c06\u8be5\u51fd\u6570\u5b9a\u4e49\u6210\u7ed1\u5b9a\u7ed9\u5bf9\u8c61\u7684\u65b9\u6cd5. \u9ed8\u8ba4 \u7684\u5b9e\u4f8b\u5316\u65b9\u5f0f: \u7c7b\u540d( ) \u65b0\u7684 \u5b9e\u4f8b\u5316\u65b9\u5f0f: \u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u8bfb\u53d6\u914d\u7f6e\u5b8c\u6210\u5b9e\u4f8b\u5316! \"\"\" # -- setting.py HOST = '127.0.0.1' PORT = 3306 \"\"\" import settings class MySQL : def __init__ ( self , host , port ): self . host = host self . port = port def tell_info ( self ): print ( f 'IP\u5730\u5740: { self . host } ,\u7aef\u53e3: { self . port } ' ) @classmethod def from_conf ( cls ): print ( cls ) return cls ( settings . HOST , settings . PORT ) # conn = MySQL('127.0.0.1',3306) conn = MySQL . from_conf () conn . tell_info () # IP\u5730\u5740:127.0.0.1,\u7aef\u53e3:3306 \u975e\u7ed1\u5b9a\u65b9\u6cd5 \u00b6 \u7c7b\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u5982\u679c\u88ab\u88c5\u9970\u5668@staticmethod\u88c5\u9970,\u90a3\u4e48\u8be5\u51fd\u6570\u5c31\u53d8\u6210\u975e\u7ed1\u5b9a\u65b9\u6cd5. \u65e2\u4e0d\u4e0e\u7c7b\u7ed1\u5b9a,\u53c8\u4e0d\u4e0e\u5bf9\u8c61\u7ed1\u5b9a, \u610f\u5473\u7740\u7c7b\u4e0e\u5bf9\u8c61\u90fd\u53ef\u4ee5\u6765\u8c03\u7528 \u4f46\u65e0\u8bba\u8c01\u6765\u8c03\u7528, \u90fd \u6ca1\u6709 \u4efb\u4f55 \u81ea\u52a8\u4f20\u503c \u7684\u6548\u679c .. \u5c31\u662f\u4e00\u4e2a\u666e\u901a\u51fd\u6570 \uff01\uff01 @staticmethod \u00b6 \u5e94\u7528 : \u5982\u679c\u51fd\u6570\u4f53\u4ee3\u7801\u65e2\u4e0d\u9700\u8981\u5916\u90e8\u4f20\u5165\u7684\u7c7b\u4e5f\u4e0d\u9700\u8981\u5916\u90e8\u4f20\u5165\u7684\u5bf9\u8c61, \u5219\u5e94\u8be5\u5c06\u8be5\u51fd\u6570\u5b9a\u4e49\u6210\u975e\u7ed1\u5b9a\u65b9\u6cd5. Q: \u601d\u8003 => \u4e0d\u52a0@staticmethod,\u76f4\u63a5\u5728\u7c7b\u4e2d\u5b9a\u4e49, def func():pass \u6cb3\u72f8\u5417\uff1f A\uff1a[\u4e0d\u5408\u7406] \u8fd8\u662f\u8001\u751f\u5e38\u8c08\u7684\u4e00\u4e2a\u95ee\u9898,\u7c7b\u4e2d\u4e0d\u52a0\u88c5\u9970\u5668\u7684\u51fd\u6570\u9ed8\u8ba4\u662f\u7ed1\u5b9a\u7ed9\u5b9e\u4f8b\u5316\u5bf9\u8c61\u4f7f\u7528\u7684. \u5b9e\u4f8b\u5316\u5bf9\u8c61\u8c03\u7528func, \u53d1\u73b0func\u65b9\u6cd5\u6ca1\u6709\u53c2\u6570\u63a5\u6536\u81ea\u52a8\u4f20\u5165\u7684\u5bf9\u8c61\u81ea\u5df1. \u76f4\u63a5\u62a5\u9519: func() takes 0 positional arguments but 1 was given import uuid class A : def __init__ ( self ): self . uid = self . create_id () @staticmethod def func1 ( x , y ): print ( '\u8fd9\u662f\u4e00\u4e2a\u975e\u7ed1\u5b9a\u65b9\u6cd5..' ) @staticmethod def create_id (): return uuid . uuid1 () a = A () print ( a . func1 ) # <function A.func1 at 0x7f806805b5e0> print ( A . func1 ) # <function A.func1 at 0x7f806805b5e0> a . func1 ( 1 , 2 ) # \u8fd9\u662f\u4e00\u4e2a\u975e\u7ed1\u5b9a\u65b9\u6cd5.. A . func1 ( 1 , 2 ) # \u8fd9\u662f\u4e00\u4e2a\u975e\u7ed1\u5b9a\u65b9\u6cd5.. \"\"\" UUID\u662f128\u4f4d\u7684\u5168\u5c40\u552f\u4e00\u6807\u8bc6\u7b26,\u901a\u5e38\u753132\u5b57\u8282\u7684\u5b57\u7b26\u4e32\u8868\u793a.\u5b83\u53ef\u4ee5\u4fdd\u8bc1\u65f6\u95f4\u548c\u7a7a\u95f4\u7684\u552f\u4e00\u6027. uuid1() \u57fa\u4e8e\u65f6\u95f4\u6233\u7684\u7b97\u6cd5 \u7531MAC\u5730\u5740\u3001\u5f53\u524d\u65f6\u95f4\u6233\u3001\u968f\u673a\u6570\u751f\u6210. \u53ef\u4ee5\u4fdd\u8bc1\u5168\u7403\u8303\u56f4\u5185\u7684\u552f\u4e00\u6027 \u4f46MAC\u7684\u4f7f\u7528\u540c\u65f6\u5e26\u6765\u5b89\u5168\u6027\u95ee\u9898,\u5c40\u57df\u7f51\u4e2d\u53ef\u4ee5\u4f7f\u7528IP\u6765\u4ee3\u66ffMAC UUID\u4e3b\u8981\u6709\u4e94\u4e2a\u7b97\u6cd5 \u9996\u5148,Python\u4e2d\u6ca1\u6709\u57fa\u4e8eDCE\u7684,\u6240\u4ee5uuid2\u53ef\u4ee5\u5ffd\u7565; \u5176\u6b21,uuid4\u5b58\u5728\u6982\u7387\u6027\u91cd\u590d,\u6700\u597d\u4e0d\u7528; \u518d\u6b21,\u82e5\u5728Global\u7684\u5206\u5e03\u5f0f\u8ba1\u7b97\u73af\u5883\u4e0b,\u6700\u597d\u7528uuid1; \u6700\u540e,\u82e5\u6709\u540d\u5b57\u7684\u552f\u4e00\u6027\u8981\u6c42,\u6700\u597d\u7528uuid3\u6216uuid5. \"\"\" \u4f53\u4f1a\u533a\u522b \u00b6 PS: \u4f53\u4f1aclassmethod\u4e0estaticmethod\u7684\u533a\u522b \u6211\u4eec\u7684\u610f\u56fe\u662f\u60f3\u89e6\u53d1 Mariadb.__str__ ,\u4f46\u662f\u7ed3\u679c\u89e6\u53d1\u4e86 MySQL.__str__ \u7684\u6267\u884c. \u56e0\u4e3a\u8fd4\u56de\u7684m\u662fMySQ\u7c7b\u4ea7\u751f\u7684... return MySQL(settings.HOST, settings.PORT) import settings class MySQL : def __init__ ( self , host , port ): self . host = host self . port = port @staticmethod def from_conf (): return MySQL ( settings . HOST , settings . PORT ) # @classmethod #\u54ea\u4e2a\u7c7b\u6765\u8c03\u7528,\u5c31\u5c06\u54ea\u4e2a\u7c7b\u5f53\u505a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u5165 # def from_conf(cls): # return cls(settings.HOST,settings.PORT) # \u54ea\u4e2a\u7c7b\u6765\u8c03\u7528,\u5373\u7528\u54ea\u4e2a\u7c7bcls\u6765\u5b9e\u4f8b\u5316 def __str__ ( self ): return '\u5c31\u4e0d\u544a\u8bc9\u4f60' class Mariadb ( MySQL ): # __str__\u65b9\u6cd5\u9700\u8981\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u5f53\u505a\u5bf9\u8fd9\u4e2a\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684\u63cf\u5199 def __str__ ( self ): return '< %s : %s >' % ( self . host , self . port ) m = Mariadb . from_conf () print ( m ) #\u6211\u4eec\u7684\u610f\u56fe\u662f\u60f3\u89e6\u53d1Mariadb.__str__,\u4f46\u662f\u7ed3\u679c\u89e6\u53d1\u4e86MySQL.__str__\u7684\u6267\u884c,\u6253\u5370\u5c31\u4e0d\u544a\u8bc9\u4f60\uff1a \u603b\u7ed3\u7ed1\u5b9a\u65b9\u6cd5\u4e0e\u975e\u7ed1\u5b9a\u65b9\u6cd5\u7684\u4f7f\u7528: \u82e5\u7c7b\u4e2d\u9700\u8981\u4e00\u4e2a\u529f\u80fd, \u8be5\u529f\u80fd\u7684\u5b9e\u73b0\u4ee3\u7801\u4e2d\u9700\u8981\u5f15\u7528\u5bf9\u8c61\u5219\u5c06\u5176\u5b9a\u4e49\u6210\u5bf9\u8c61\u65b9\u6cd5; \u9700\u8981\u5f15\u7528\u7c7b\u5219\u5c06\u5176\u5b9a\u4e49\u6210\u7c7b\u65b9\u6cd5; \u65e0\u9700\u5f15\u7528\u7c7b\u6216\u5bf9\u8c61\u5219\u5c06\u5176\u5b9a\u4e49\u6210\u9759\u6001\u65b9\u6cd5.","title":"\u7ed1\u5b9a\u4e0e\u975e\u7ed1\u5b9a\u65b9\u6cd5"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/4_%E7%BB%91%E5%AE%9A%E4%B8%8E%E9%9D%9E%E7%BB%91%E5%AE%9A%E6%96%B9%E6%B3%95/#_1","text":"\u7ed1\u5b9a\u7ed9\u8c01\u5c31\u5e94\u8be5\u7531\u8c01\u6765 \u8c03\u7528.\u8c01\u6765\u8c03\u7528\u5c31\u4f1a\u5c06\u8c01\u5f53\u4f5c\u7b2c\u4e00\u4e2a\u53c2\u6570\u81ea\u52a8\u4f20\u5165. \u7cbe\u9ad3\u5728\u4e8e --- \u81ea\u52a8\u4f20\u503c","title":"\u7ed1\u5b9a\u65b9\u6cd5"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/4_%E7%BB%91%E5%AE%9A%E4%B8%8E%E9%9D%9E%E7%BB%91%E5%AE%9A%E6%96%B9%E6%B3%95/#self-cls","text":"1> \u7ed1\u5b9a\u7ed9\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684\u65b9\u6cd5 \u5728\u7c7b\u5185\u90e8\u5b9a\u4e49\u7684\u51fd\u6570( \u7b2c\u4e00\u4e2a\u53c2\u6570\u7ea6\u5b9a\u4fd7\u6210\u5199\u4e3aself+\u6ca1\u6709\u88ab\u4efb\u4f55\u88c5\u9970\u5668\u4fee\u9970 ),\u901a\u5e38\u9ed8\u8ba4\u5c31\u662f\u7ed1\u5b9a\u7ed9\u5bf9\u8c61\u7528\u7684. \u53cd\u8fc7\u6765\u7406\u89e3,\u7c7b\u4e2d\u6ca1\u6709\u88ab\u88c5\u9970\u5668\u7ed1\u5b9a\u7684\u51fd\u6570,\u5c31\u662f\u7ed1\u5b9a\u7ed9\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7528\u7684,\u5bf9\u8c61\u4f7f\u7528\u65f6,\u4f1a\u81ea\u52a8\u5c06\u81ea\u5df1\u4f20\u5165, \u6240\u4ee5\u6b64\u51fd\u6570\u9700\u8981\u6709\u4e00\u4e2a\u5f62\u53c2\u6765\u63a5\u53d7, \u6b64\u5f62\u53c2\u7ea6\u5b9a\u5199\u6210self.\u4fbf\u4e8e\u533a\u5206. \u6709\u4e00\u4e9b__\u5f00\u5934\u7684\u51fd\u6570\u5c5e\u4e8e\u7279\u6b8a\u60c5\u51b5... \u7279\u6b8a\u60c5\u51b5\u7279\u6b8a\u5206\u6790 2> \u7ed1\u5b9a\u7ed9\u7c7b\u7684\u65b9\u6cd5 \u5728\u7c7b\u5185\u90e8\u5b9a\u4e49\u7684\u51fd\u6570( \u7b2c\u4e00\u4e2a\u53c2\u6570\u7ea6\u5b9a\u4fd7\u6210\u5199\u4e3acls )\u82e5\u88ab\u88c5\u9970\u5668@classmethod\u88c5\u9970\u5668\u88c5\u9970, \u90a3\u4e48\u5219\u662f\u7ed1\u5b9a\u7ed9\u7c7b\u7684,\u5e94\u8be5\u7531\u7c7b\u6765\u8c03\u7528,\u4f1a\u81ea\u52a8\u5c06\u7c7b\u5f53\u4f5c\u7b2c\u4e00\u4e2a\u53c2\u6570\u81ea\u52a8\u4f20\u5165 class Foo : @classmethod def f1 ( cls ): print ( cls ) def f2 ( self ): print ( self ) obj = Foo () # -- \u7ed1\u5b9a\u7ed9\u7c7b\u7684 # \u2605 \u4e86\u89e3:\u7ed1\u5b9a\u7ed9\u7c7b\u7684\u5e94\u8be5\u7531\u7c7b\u6765\u8c03\u7528,\u4f46\u5b9e\u4f8b\u5316\u5bf9\u8c61\u5176\u5b9e\u4e5f\u53ef\u4ee5\u4f7f\u7528,\u53ea\u4e0d\u8fc7\u81ea\u52a8\u4f20\u5165\u7684\u4ecd\u7136\u662f\u7c7b. print ( Foo . f1 ) # <bound method Foo.f1 of <class '__main__.Foo'>> print ( obj . f1 ) # <bound method Foo.f1 of <class '__main__.Foo'>> Foo . f1 () # <class '__main__.Foo'> obj . f1 () # <class '__main__.Foo'> # -- \u7ed1\u5b9a\u7ed9\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684 print ( obj . f2 ) # <bound method Foo.f2 of <__main__.Foo object at 0x7f90898498e0>> print ( Foo . f2 ) # <function Foo.f2 at 0x7f9089848b80> \u666e\u901a\u65b9\u6cd5 \u8be5\u4f20\u591a\u5c11\u53c2\u6570\u5c31\u4f20\u591a\u5c11\u53c2\u6570 obj . f2 () # <__main__.Foo object at 0x7f90898498e0> Foo . f2 () # \u62a5\u9519:f2() missing 1 required positional argument: 'self'","title":"\u2606\u5206\u7c7b self \u00a0cls"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/4_%E7%BB%91%E5%AE%9A%E4%B8%8E%E9%9D%9E%E7%BB%91%E5%AE%9A%E6%96%B9%E6%B3%95/#_2","text":"\u82e5\u51fd\u6570\u4f53\u4ee3\u7801\u9700\u8981\u7528\u5916\u90e8\u4f20\u5165\u7684\u7c7b, \u5219\u5e94\u8be5\u5c06\u8be5\u51fd\u6570\u5b9a\u4e49\u6210\u7ed1\u5b9a\u7ed9\u7c7b\u7684\u65b9\u6cd5. \u82e5\u51fd\u6570\u4f53\u4ee3\u7801\u9700\u8981\u7528\u5916\u90e8\u4f20\u5165\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61, \u5219\u5e94\u8be5\u5c06\u8be5\u51fd\u6570\u5b9a\u4e49\u6210\u7ed1\u5b9a\u7ed9\u5bf9\u8c61\u7684\u65b9\u6cd5. \u9ed8\u8ba4 \u7684\u5b9e\u4f8b\u5316\u65b9\u5f0f: \u7c7b\u540d( ) \u65b0\u7684 \u5b9e\u4f8b\u5316\u65b9\u5f0f: \u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u8bfb\u53d6\u914d\u7f6e\u5b8c\u6210\u5b9e\u4f8b\u5316! \"\"\" # -- setting.py HOST = '127.0.0.1' PORT = 3306 \"\"\" import settings class MySQL : def __init__ ( self , host , port ): self . host = host self . port = port def tell_info ( self ): print ( f 'IP\u5730\u5740: { self . host } ,\u7aef\u53e3: { self . port } ' ) @classmethod def from_conf ( cls ): print ( cls ) return cls ( settings . HOST , settings . PORT ) # conn = MySQL('127.0.0.1',3306) conn = MySQL . from_conf () conn . tell_info () # IP\u5730\u5740:127.0.0.1,\u7aef\u53e3:3306","title":"\u2606\u5e94\u7528"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/4_%E7%BB%91%E5%AE%9A%E4%B8%8E%E9%9D%9E%E7%BB%91%E5%AE%9A%E6%96%B9%E6%B3%95/#_3","text":"\u7c7b\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u5982\u679c\u88ab\u88c5\u9970\u5668@staticmethod\u88c5\u9970,\u90a3\u4e48\u8be5\u51fd\u6570\u5c31\u53d8\u6210\u975e\u7ed1\u5b9a\u65b9\u6cd5. \u65e2\u4e0d\u4e0e\u7c7b\u7ed1\u5b9a,\u53c8\u4e0d\u4e0e\u5bf9\u8c61\u7ed1\u5b9a, \u610f\u5473\u7740\u7c7b\u4e0e\u5bf9\u8c61\u90fd\u53ef\u4ee5\u6765\u8c03\u7528 \u4f46\u65e0\u8bba\u8c01\u6765\u8c03\u7528, \u90fd \u6ca1\u6709 \u4efb\u4f55 \u81ea\u52a8\u4f20\u503c \u7684\u6548\u679c .. \u5c31\u662f\u4e00\u4e2a\u666e\u901a\u51fd\u6570 \uff01\uff01","title":"\u975e\u7ed1\u5b9a\u65b9\u6cd5"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/4_%E7%BB%91%E5%AE%9A%E4%B8%8E%E9%9D%9E%E7%BB%91%E5%AE%9A%E6%96%B9%E6%B3%95/#staticmethod","text":"\u5e94\u7528 : \u5982\u679c\u51fd\u6570\u4f53\u4ee3\u7801\u65e2\u4e0d\u9700\u8981\u5916\u90e8\u4f20\u5165\u7684\u7c7b\u4e5f\u4e0d\u9700\u8981\u5916\u90e8\u4f20\u5165\u7684\u5bf9\u8c61, \u5219\u5e94\u8be5\u5c06\u8be5\u51fd\u6570\u5b9a\u4e49\u6210\u975e\u7ed1\u5b9a\u65b9\u6cd5. Q: \u601d\u8003 => \u4e0d\u52a0@staticmethod,\u76f4\u63a5\u5728\u7c7b\u4e2d\u5b9a\u4e49, def func():pass \u6cb3\u72f8\u5417\uff1f A\uff1a[\u4e0d\u5408\u7406] \u8fd8\u662f\u8001\u751f\u5e38\u8c08\u7684\u4e00\u4e2a\u95ee\u9898,\u7c7b\u4e2d\u4e0d\u52a0\u88c5\u9970\u5668\u7684\u51fd\u6570\u9ed8\u8ba4\u662f\u7ed1\u5b9a\u7ed9\u5b9e\u4f8b\u5316\u5bf9\u8c61\u4f7f\u7528\u7684. \u5b9e\u4f8b\u5316\u5bf9\u8c61\u8c03\u7528func, \u53d1\u73b0func\u65b9\u6cd5\u6ca1\u6709\u53c2\u6570\u63a5\u6536\u81ea\u52a8\u4f20\u5165\u7684\u5bf9\u8c61\u81ea\u5df1. \u76f4\u63a5\u62a5\u9519: func() takes 0 positional arguments but 1 was given import uuid class A : def __init__ ( self ): self . uid = self . create_id () @staticmethod def func1 ( x , y ): print ( '\u8fd9\u662f\u4e00\u4e2a\u975e\u7ed1\u5b9a\u65b9\u6cd5..' ) @staticmethod def create_id (): return uuid . uuid1 () a = A () print ( a . func1 ) # <function A.func1 at 0x7f806805b5e0> print ( A . func1 ) # <function A.func1 at 0x7f806805b5e0> a . func1 ( 1 , 2 ) # \u8fd9\u662f\u4e00\u4e2a\u975e\u7ed1\u5b9a\u65b9\u6cd5.. A . func1 ( 1 , 2 ) # \u8fd9\u662f\u4e00\u4e2a\u975e\u7ed1\u5b9a\u65b9\u6cd5.. \"\"\" UUID\u662f128\u4f4d\u7684\u5168\u5c40\u552f\u4e00\u6807\u8bc6\u7b26,\u901a\u5e38\u753132\u5b57\u8282\u7684\u5b57\u7b26\u4e32\u8868\u793a.\u5b83\u53ef\u4ee5\u4fdd\u8bc1\u65f6\u95f4\u548c\u7a7a\u95f4\u7684\u552f\u4e00\u6027. uuid1() \u57fa\u4e8e\u65f6\u95f4\u6233\u7684\u7b97\u6cd5 \u7531MAC\u5730\u5740\u3001\u5f53\u524d\u65f6\u95f4\u6233\u3001\u968f\u673a\u6570\u751f\u6210. \u53ef\u4ee5\u4fdd\u8bc1\u5168\u7403\u8303\u56f4\u5185\u7684\u552f\u4e00\u6027 \u4f46MAC\u7684\u4f7f\u7528\u540c\u65f6\u5e26\u6765\u5b89\u5168\u6027\u95ee\u9898,\u5c40\u57df\u7f51\u4e2d\u53ef\u4ee5\u4f7f\u7528IP\u6765\u4ee3\u66ffMAC UUID\u4e3b\u8981\u6709\u4e94\u4e2a\u7b97\u6cd5 \u9996\u5148,Python\u4e2d\u6ca1\u6709\u57fa\u4e8eDCE\u7684,\u6240\u4ee5uuid2\u53ef\u4ee5\u5ffd\u7565; \u5176\u6b21,uuid4\u5b58\u5728\u6982\u7387\u6027\u91cd\u590d,\u6700\u597d\u4e0d\u7528; \u518d\u6b21,\u82e5\u5728Global\u7684\u5206\u5e03\u5f0f\u8ba1\u7b97\u73af\u5883\u4e0b,\u6700\u597d\u7528uuid1; \u6700\u540e,\u82e5\u6709\u540d\u5b57\u7684\u552f\u4e00\u6027\u8981\u6c42,\u6700\u597d\u7528uuid3\u6216uuid5. \"\"\"","title":"@staticmethod"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/4_%E7%BB%91%E5%AE%9A%E4%B8%8E%E9%9D%9E%E7%BB%91%E5%AE%9A%E6%96%B9%E6%B3%95/#_4","text":"PS: \u4f53\u4f1aclassmethod\u4e0estaticmethod\u7684\u533a\u522b \u6211\u4eec\u7684\u610f\u56fe\u662f\u60f3\u89e6\u53d1 Mariadb.__str__ ,\u4f46\u662f\u7ed3\u679c\u89e6\u53d1\u4e86 MySQL.__str__ \u7684\u6267\u884c. \u56e0\u4e3a\u8fd4\u56de\u7684m\u662fMySQ\u7c7b\u4ea7\u751f\u7684... return MySQL(settings.HOST, settings.PORT) import settings class MySQL : def __init__ ( self , host , port ): self . host = host self . port = port @staticmethod def from_conf (): return MySQL ( settings . HOST , settings . PORT ) # @classmethod #\u54ea\u4e2a\u7c7b\u6765\u8c03\u7528,\u5c31\u5c06\u54ea\u4e2a\u7c7b\u5f53\u505a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u5165 # def from_conf(cls): # return cls(settings.HOST,settings.PORT) # \u54ea\u4e2a\u7c7b\u6765\u8c03\u7528,\u5373\u7528\u54ea\u4e2a\u7c7bcls\u6765\u5b9e\u4f8b\u5316 def __str__ ( self ): return '\u5c31\u4e0d\u544a\u8bc9\u4f60' class Mariadb ( MySQL ): # __str__\u65b9\u6cd5\u9700\u8981\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u5f53\u505a\u5bf9\u8fd9\u4e2a\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684\u63cf\u5199 def __str__ ( self ): return '< %s : %s >' % ( self . host , self . port ) m = Mariadb . from_conf () print ( m ) #\u6211\u4eec\u7684\u610f\u56fe\u662f\u60f3\u89e6\u53d1Mariadb.__str__,\u4f46\u662f\u7ed3\u679c\u89e6\u53d1\u4e86MySQL.__str__\u7684\u6267\u884c,\u6253\u5370\u5c31\u4e0d\u544a\u8bc9\u4f60\uff1a \u603b\u7ed3\u7ed1\u5b9a\u65b9\u6cd5\u4e0e\u975e\u7ed1\u5b9a\u65b9\u6cd5\u7684\u4f7f\u7528: \u82e5\u7c7b\u4e2d\u9700\u8981\u4e00\u4e2a\u529f\u80fd, \u8be5\u529f\u80fd\u7684\u5b9e\u73b0\u4ee3\u7801\u4e2d\u9700\u8981\u5f15\u7528\u5bf9\u8c61\u5219\u5c06\u5176\u5b9a\u4e49\u6210\u5bf9\u8c61\u65b9\u6cd5; \u9700\u8981\u5f15\u7528\u7c7b\u5219\u5c06\u5176\u5b9a\u4e49\u6210\u7c7b\u65b9\u6cd5; \u65e0\u9700\u5f15\u7528\u7c7b\u6216\u5bf9\u8c61\u5219\u5c06\u5176\u5b9a\u4e49\u6210\u9759\u6001\u65b9\u6cd5.","title":"\u4f53\u4f1a\u533a\u522b"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/5_%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/","text":"python3\u7edf\u4e00\u4e86\u7c7b\u4e0e\u7c7b\u578b\u7684\u6982\u5ff5 . \u7c7b\u5373\u7c7b\u578b . obj . \u5c5e\u6027 -- \u5373\u5c5e\u6027\u5f15\u7528 \u2605 \u7c7b\u7684\u4e24\u5927\u64cd\u4f5c 1. \"\u5c5e\u6027\u5f15\u7528\" \u7c7b\u7684\u5b9a\u4e49\u91cc\u7684\u5c5e\u6027 = \u6570\u636e\u5c5e\u6027 + \u51fd\u6570\u5c5e\u6027 1 > \u5728\u7c7b\u7684\u5b9a\u4e49\u9636\u6bb5 ( \"\u6ce8\u610f!\u4e0d\u662f\u7c7b\u5b9e\u4f8b\u5316\u7684\u65f6\u5019\u54e6\" ) \u5c31\u4f1a\u6267\u884c\u7c7b\u91cc\u9762\u7684\u4ee3\u7801 , \u5f00\u8f9f\u4e00\u4e2anamescope 2 > namescope ( \u7c7b ) \u4e2d\u7684\u5c5e\u6027\u662f\u5171\u4eab\u7ed9\u6240\u6709\u7684\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684 \u3010 \u5171\u6709\u5c5e\u6027 \u3011 2. \"\u7c7b\u5b9e\u4f8b\u5316\" \u8c03\u7528\u7c7b\u5bf9\u8c61 / \u7c7b\u7684\u5b9e\u4f8b\u5316 \u4f1a\u5f00\u8f9f\u4e00\u4e2a\u4e2a\u7a7a\u7684namescope . \u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u5f00\u8f9f\u4e00\u4e2a\u7a7a\u7684scope\u540e , \u7d27\u63a5\u7740\u5c31\u4f1a\u89e6\u53d1\u7ed1\u5b9a\u65b9\u6cd5__init__\u7684\u6267\u884c , \u521d\u59cb\u5316\u5b9e\u4f8b\u5316\u5bf9\u8c61 \u4f1a\u5c06\u7c7b\u7684\u5b9e\u4f8b\u5316obj\u4f5c\u4e3a\u7ed1\u5b9a\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u5f62\u53c2 ( \u7ea6\u5b9a\u4fd7\u79f0\u662fself ) \u7684\u503c\u4f20\u5165 \u6ce8\u610f : __init__\u91cc\u9762\u4e0d\u53ef\u6709return \u2605 \u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u53ef\u8fdb\u884c \"\u5c5e\u6027\u5f15\u7528\" !! 1. \u5f15\u7528\u6570\u636e\u5c5e\u6027 1 > \u7c7b\u4e2d\u7684\u6570\u636e\u5c5e\u6027 2 > \u72ec\u6709\u7684 ( \u4f18\u5148\u7ea7\u6700\u9ad8 ) namescope ( \u7c7b\u5b9e\u4f8b\u5316 ) \u91cc\u9762\u5b58\u653e\u7684\u5c31\u662f\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684 \u3010 \u72ec\u6709\u5c5e\u6027 \u3011 2. \u5f15\u7528\u65b9\u6cd5\u5c5e\u6027 \u5373\u7c7b\u4e2d\u7684\u51fd\u6570\u5c5e\u6027 \"\u65b9\u6cd5\u662f\u2018\u4ece\u5c5e\u4e8e\u2019\u5bf9\u8c61\u7684\u51fd\u6570\" Ps : \u65b9\u6cd5\u4e0d\u662f\u7c7b\u5b9e\u4f8b\u6240\u7279\u6709\u7684 , \u6bd4\u5982\u5217\u8868\u5bf9\u8c61\u4e5f\u5177\u6709append \u3001 insert\u7b49\u65b9\u6cd5 \u3010 \u7c7b\u5c31\u662f\u7c7b\u578b \u3011 d = { 'x' : 1 } \u672c\u8d28\u4e0a\u662f d = dict ({ 'x' : 1 }) namescope ( \u7c7b ) \u3001 namescope ( \u5b9e\u4f8b\u5316\u5bf9\u8c61 ) \u90fd\u53ef\u901a\u8fc7 \"obj.__dict__\" \u67e5\u770bnamescope\u91cc\u9762\u7684\u5c5e\u6027 \u4ee3\u7801\u5757 ( \u6a21\u5757 \u3001 \u51fd\u6570 \u3001 \u7c7b ) \u6267\u884c\u4ee3\u7801\u65f6 , \u4ee5\u53ca\u7c7b\u7684\u5b9e\u4f8b\u5316\u7684\u65f6\u5019 , \u4f1a\u5f00\u8f9fnamespace . \u7279\u522b\u6ce8\u610f\u7684\u662f , \u51fd\u6570\u91cc\u51fd\u6570\u4f53\u7684\u4ee3\u7801\u5728\u8c03\u7528\u65f6\u6267\u884c !! from types import MethodType , FunctionType a = 5 def f (): pass # -- \u6ce8\u610f\u54c8!!\u6709\u4e2a\u7a7a\u5b57\u5178\u7684\u7ed3\u679c\u8fd4\u56de,\u5e76\u4e0d\u610f\u5473\u7740\u5f00\u8f9f\u4e86\u4e00\u4e2a\u7a7a\u7684\u547d\u540d\u7a7a\u95f4,\u51fd\u6570\u5728\u8c03\u7528\u7684\u65f6\u5019\u624d\u4f1a\u5f00\u8f9f\u547d\u540d\u7a7a\u95f4 print ( f . __dict__ ) # {} # -- \u7c7bA\u5728\u5b9a\u4e49\u9636\u6bb5\u5c31\u4f1a\u6267\u884c\u91cc\u9762\u7684\u4ee3\u7801,\u5f00\u8f9f\u547d\u540d\u7a7a\u95f4.(\u4e0d\u662f\u5728\u5b9e\u4f8b\u5316\u7684\u65f6\u5019\u5f00\u8f9f\u54e6!!) class A : a = 3 # -- \u6b64\u5904namespace(\u7c7bA)\u91cc\u5df2\u7ecf\u5bf9a\u540d\u79f0\u8fdb\u884c\u4e86\u7ed1\u5b9a {a:3} print ( a ) # 3 # -- \u7c7bA\u8fd8\u5728\u5b9a\u4e49\u7684\u8fc7\u7a0b\u4e2d,\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u91cc\u8fd8\u6ca1\u6709A # -- \u51c6\u786e\u70b9\u8bf4,\u8fd9\u91cc\u6d89\u53ca\u5230\u3010\u7c7b\u4e2d\u53d8\u91cf\u5f15\u7528\u7684\u89c4\u5219\u3011,\u5b98\u65b9\u89e3\u91ca: # 1> \u672a\u7ed1\u5b9a\u7684\u5c40\u90e8\u53d8\u91cf\u5c06\u5728\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u4e2d\u67e5\u627e # 2> \u5728\u7c7b\u4ee3\u7801\u5757\u4e2d\u5b9a\u4e49\u7684\u540d\u79f0\u7684\u4f5c\u7528\u57df/namespace\u4f5c\u7528\u8303\u56f4,\u4e0d\u4f1a\u6269\u5c55\u5230\u65b9\u6cd5\u7684\u4ee3\u7801\u5757\u4e2d # \u5305\u62ec\u5217\u8868\u63a8\u5bfc\u5f0f\u548c\u751f\u6210\u5668\u8868\u8fbe\u5f0f Ps:\u53ef\u4ee5\u901a\u8fc7 obj.\u5c5e\u6027 -- \u5373\u5c5e\u6027\u5f15\u7528\u7684\u65b9\u5f0f\u6765\u8fdb\u884c\u8bbf\u95ee # print(A.a) # NameError:name 'A' is not defined def __init__ ( self , name ): self . name = 'dc' def fun1 ( self ): pass @classmethod def fun2 ( self ): pass @staticmethod def foo (): # -- \u8fd9\u91cc\u6d89\u53ca\u5230\u7c7b\u4e2d\u53d8\u91cf\u5f15\u7528\u7684\u89c4\u5219 print ( a ) # 5 # -- \u7c7b\u7684\u5b9e\u4f8b\u5316\u4f1a\u5148\u5f00\u8f9f\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4,\u7136\u540e\u901a\u8fc7__init__\u8fdb\u884c\u521d\u59cb\u5316\u5b58\u653e\u8be5\u5b9e\u4f8b\u5316\u5bf9\u8c61\u72ec\u6709\u7684\u6570\u636e\u5c5e\u6027 x = A ( 'dc' ) print ( x ) # <__main__.A object at 0x7fbcebe8dca0> print ( A ) # <class '__main__.A'> \"\"\" \u4e00\u822c\u5355\u72ecdef\u7684\u53d8\u91cf\u662f\u51fd\u6570\u5bf9\u8c61. \u88ab@classmethod\u88c5\u9970\u7684\u51fd\u6570\u5c5e\u6027,\u4e0d\u7ba1\u662f\u7c7b\u8fd8\u662f\u5b9e\u4f8b\u5316\u5bf9\u8c61\u8fdb\u884c\u5c5e\u6027\u5f15\u7528,\u5f15\u7528\u7684\u90fd\u662fPyMethodObject\u65b9\u6cd5\u5bf9\u8c61. \u7b2c\u4e00\u4e2a\u53c2\u6570\u662fself\u7684\u51fd\u6570\u5c5e\u6027,\u88ab\u5b9e\u4f8b\u5316\u5bf9\u8c61\u8fdb\u884c\u5c5e\u6027\u5f15\u7528,\u5f15\u7528\u7684\u662fPyMethodObject\u65b9\u6cd5\u5bf9\u8c61. \u9664\u6b64\u4e4b\u5916,\u8fdb\u884c\u7684\u5c5e\u6027\u5f15\u7528(eg:@staticmethod),\u5f15\u7528\u7684\u90fd\u662fPyFunctionObject\u51fd\u6570\u5bf9\u8c61. \u51fd\u6570\u5b9a\u4e49: PyCodeObject + def == PyFunctionObject\"\u51fd\u6570\u5bf9\u8c61\" \u7c7b\u5b9a\u4e49: \u6709\"self\"\u7279\u5f81\u7684PyFunctionObject \u5c06\u4e0e\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u8fdb\u884c\u7ed1\u5b9a \u8fdb\u5316\u4e3a PyMethodObject\"\u65b9\u6cd5\u5bf9\u8c61\" \u6709\"@classmethod\"\u7279\u5f81\u7684PyFunctionObject \u5c06\u4e0e\u7c7b\u5bf9\u8c61\u8fdb\u884c\u7ed1\u5b9a \u8fdb\u5316\u4e3a PyMethodObject\"\u65b9\u6cd5\u5bf9\u8c61\" PyMethodObject\u548cPyFunctionObject\u5728\u8c03\u7528\u65f6\u8fdb\u5316\u6210PyFrameObject,\u5f00\u8f9f\u4e00\u5757\u547d\u540d\u7a7a\u95f4,\u6267\u884c\u51fd\u6570\u4f53\u4ee3\u7801. \"\"\" # -- \u901a\u8fc7`from types import MethodType, FunctionType`\u6765\u5224\u65ad # \u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u5f15\u7528\u7684\u65b9\u6cd5\u5c5e\u6027\u662f\u51fd\u6570\u5bf9\u8c61\u8fd8\u662f\u65b9\u6cd5\u5bf9\u8c61 \u524d\u8005\u662f<function ...> \u540e\u8005\u662f<bound method ...> train_list = [ f , # <function f at 0x7fbcebe8a9d0>\u662f\u51fd\u6570\u5bf9\u8c61! A . fun1 , # <function A.fun1 at 0x7fbcebe8aa60>\u662f\u51fd\u6570\u5bf9\u8c61! x . fun1 , # <bound method A.fun1 of <__main__.A object at 0x7fbcebe8dca0>>\u662f\u65b9\u6cd5\u5bf9\u8c61! A . fun2 , # <bound method A.fun2 of <class '__main__.A'>>\u662f\u65b9\u6cd5\u5bf9\u8c61! x . fun2 , # <bound method A.fun2 of <class '__main__.A'>>\u662f\u65b9\u6cd5\u5bf9\u8c61! A . foo , # <function A.foo at 0x7fbcebe8aaf0>\u662f\u51fd\u6570\u5bf9\u8c61! x . foo , # <function A.foo at 0x7fbcebe8aaf0>\u662f\u51fd\u6570\u5bf9\u8c61! ] for item in train_list : if isinstance ( item , FunctionType ): print ( f \" { item } \u662f\u51fd\u6570\u5bf9\u8c61!\" ) else : print ( f \" { item } \u662f\u65b9\u6cd5\u5bf9\u8c61!\" ) A . foo () print ( x . fun1 . __dict__ ) # {} class A : def f1 ( self ): pass def f2 ( self ): # \u4e0d\u52a0self\u62a5\u9519! # \u4e5f\u8bb8\u4f60\u4f1a\u60f3,\u6267\u884c`m()` namescope(f2)\u91cc\u9762\u6ca1\u6709\u7684\u8bdd,\u5c31\u53bbnamescope(A)\u91cc\u9762\u627e??? # \u6ce8\u610f\u54e6,\u3010\u7c7b\u4e2d\u53d8\u91cf\u5f15\u7528\u7684\u89c4\u5219\u3011 # m() # NameError:name 'm' is not defined self . m () @staticmethod # -- \u9759\u6001\u65b9\u6cd5,\u610f\u5473\u7740\u4e0d\u4f1a\u81ea\u52a8\u7ed1\u5b9a\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61 def m (): pass a = A () b = A () a . f1 () b . f1 () a . f2 () \"\"\" \u5206\u6790\u5982\u4e0b: \"\"\" 1 > a . f1 () \u7684\u672c\u8d28\u662f A . f1 ( a ) a . f1 () \u3001 b . f1 () \u8fdb\u884c\u65b9\u6cd5\u7684\u7ed1\u5b9a , \u76f8\u5f53\u4e8eA\u8fdb\u884c\u4e86\u4e24\u6b21\u51fd\u6570\u8c03\u7528 , \u51fd\u6570\u8c03\u7528\u4f1a\u5f00\u8f9f\u65b0\u7684\u547d\u540d\u7a7a\u95f4 \u6240\u4ee5\u8fd9\u91cca . f1 () \u3001 b . f1 () \u5f00\u8f9f\u7684\u547d\u540d\u7a7a\u95f4\u662f\u4e0d\u4e00\u6837\u7684 . 2 > a . f1 is b . f1 \u7684\u7ed3\u679c\u4e3aFalse \u867d\u7136a . f1\u548cb . f1\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u5f15\u7528\u7684\u90fd\u662fnamescope ( \u7c7bA ) \u4e2d\u540c\u4e00\u4e2aPyFunctionObject f1 \u4f46f1\u5206\u522b\u4e0ea\u548cb\u8fdb\u884c\u7ed1\u5b9a\u540e , \u8fdb\u5316\u51fa\u6765\u7684PyMethodObject\u662f\u4e0d\u540c\u7684 \u6362\u4e2a\u8bf4\u6cd5 : Pyhon\u662f\u52a8\u6001\u8bed\u8a00 . \u5bf9\u8c61\u548c\u7c7b\u7684\u6210\u5458\u5e76\u4e0d\u4e00\u5b9a\u4f1a\u4e00\u81f4 \u901a\u8fc7a . f1\u8fd9\u6837\u83b7\u5f97\u7684\u5bf9\u8c61 , \u5e76\u4e0d\u662f\u771f\u6b63\u7684A . f1 , \u5bf9\u4e0e\u4e0d\u540c\u7684\u7c7b\u5b9e\u4f8b\u6765\u8bf4\u4e5f\u4e0d\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61 . \u8fd9\u662f\u56e0\u4e3aa . f1\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u5c06\u5b9e\u4f8ba\u7ed1\u5b9a\u5230\u4e86self\u4e0a\u7684\u65b0\u521b\u5efa\u7684\u4e00\u4e2a\u4e34\u65f6\u7684bound method . ( a . f1\u662f\u751f\u6210\u4e86\u4e00\u4e2a\u6346\u7ed1A . f1\u548ca\u7684\u4e34\u65f6\u5bf9\u8c61 ) \u5f53\u8c03\u7528a . f1 ( * args ) \u7684\u65f6\u5019\u5176\u5b9e\u662f\u8c03\u7528\u4e86A . f1 ( a , * args ), \u662f\u4e00\u4e2a\u628a\u5b9e\u4f8b\u672c\u8eab\u5f53\u4f5c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e5f\u5c31\u662fself\u4f20\u8fdb\u53bb\u7684\u5c01\u88c5\u4e86\u4e00\u5c42\u7684\u51fd\u6570 . 3 > a . m is b . m \u7684\u7ed3\u679c\u4e3aTrue","title":"\u7b80\u5355\u603b\u7ed3"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/6_%E5%8F%8D%E5%B0%84%E3%80%81%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95/","text":"\u53cd\u5c04 \u00b6 \u901a\u8fc7 \u5b57\u7b26\u4e32 \u6765\u64cd\u4f5c\u7c7b\u6216\u8005\u5bf9\u8c61\u7684\u5c5e\u6027 \u6d89\u53ca\u56db\u4e2a\u5185\u7f6e\u51fd\u6570: hasattr getattr setattr delattr >>> hasattr < built - in function hasattr > \u64cd\u4f5c\u5c5e\u6027 \u00b6 \u6ce8\u610f, \u4f7f\u7528 getattr\u65f6\u5019, \u5fc5\u987b\u6355\u83b7\u7684\u5230\u7684\u662f AttributeError \u5f02\u5e38, \u624d\u80fd\u8fd4\u56degetattr\u8bbe\u7f6e\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u503c!! \u5c31\u50cf\u662f \u81ea\u5b9a\u4e49\u8fed\u4ee3\u5668\u8981raise StopIteration\u4e00\u6837, \u53ea\u6709\u8fd9\u6837for\u5faa\u73af\u624d\u4f1a\u6355\u6349\u5230\u5e76\u7ec8\u6b62\u8fed\u4ee3!! xxx = 1 class Pepole : country = 'china' def __init__ ( self , name ): self . name = name def eat ( self ): print ( f \" { self . name } is eating!\" ) p = Pepole ( 'dc' ) # -- \u672c\u8d28\u4e0a\u662f\u770b p\u80fd\u5426\u5bf9country\u8fd9\u4e2a\u5c5e\u6027\u8fdb\u884c\u5f15\u7528 \u4e0d\u5c40\u9650\u4e8e\u5224\u65ad \"country\" in p.__dict__ # \u4e5f\u5c31\u662f\u5728\u5224\u65ad\u80fd\u5426\u901a\u8fc7.\u8bbf\u95ee\u5230\u67d0\u4e2a\u5c5e\u6027 \u5373p.country\u662f\u5426\u62a5\u9519 # \u56de\u987e\u4e0b\u5c5e\u6027\u67e5\u627e\u89c4\u5219(\u547d\u540d\u7a7a\u95f4): \u81ea\u8eab-\u7c7b-\u7236\u7c7b-...-\u9876\u7ea7\u7236\u7c7bobject print ( hasattr ( p , \"country\" )) # True print ( hasattr ( p , \"xxx\" )) # False # <bound method Pepole.eat of <__main__.Pepole object at 0x7f8adde7e910>> print ( getattr ( p , \"eat\" )) print ( p . eat ) # <bound method Pepole.eat of <__main__.Pepole object at 0x7f8adde7e910>> # print(getattr(p, \"xxx\")) # AttributeError:'Pepole' object has no attribute 'xxx' print ( getattr ( p , \"xxx\" , \"\u6ca1\u6709\u8be5\u5c5e\u6027\" )) # \u6ca1\u6709\u8be5\u5c5e\u6027 -- \u901a\u5e38\u60c5\u51b5\u4e0b\u6ca1\u627e\u5230\u4f1a\u8bbe\u7f6e\u8fd4\u56de\u503c\u4e3aNone setattr ( p , \"age\" , 18 ) # -- \u7b49\u540c\u4e8e p.age = 18 print ( p . age ) # 18 print ( p . __dict__ ) # {'name': 'dc', 'age': 18} delattr ( p , \"name\" ) # -- \u7b49\u540c\u4e8e del p.name print ( p . __dict__ ) # {'age': 18} \u53cd\u5c04\u7b80\u5355\u5e94\u7528 \u00b6 \u8fd9\u4e2a\u4f8b\u5b50\u5f88\u597d\u7684\u8be0\u91ca\u4e86 \u53cd\u5c04\u6bd4\u70b9\u8bed\u6cd5\u597d\u7684\u5730\u65b9!! \u56e0\u4e3a\u53cd\u5c04\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5b57\u7b26\u4e32!! class Ftp : def __init__ ( self , ip , port ): self . ip = ip self . port = port def get ( self ): print ( \"GET function\" ) def put ( self ): print ( \"PUT function\" ) def run ( self ): while True : # -- \u8f93\u5165\u5b57\u7b26\u4e32\u53cd\u5c04\u5230\u5bf9\u8c61\u5177\u4f53\u7684\u65b9\u6cd5\u4e0a\u9762 choice = input ( \">>>: \" ) . strip () if hasattr ( self , choice ): method = getattr ( self , choice ) method () else : print ( \"\u60a8\u8f93\u5165\u7684\u547d\u4ee4\u4e0d\u5b58\u5728!\" ) \"\"\" method = getattr(self, choice, None) if method: method() else: print(\"\u4e0d\u5b58\u5728\") \"\"\" conn = Ftp ( \"1.1.1.1\" , 3306 ) conn . run () \u5185\u7f6e\u65b9\u6cd5 \u00b6 \u81ea\u5b9a\u4e49\u5185\u7f6e\u65b9\u6cd5\u6765\u5b9a\u5236\u7c7b\u7684\u529f\u80fd \u4ee5__\u5f00\u5934\u548c__\u7ed3\u5c3e\u7684\u65b9\u6cd5\u5728\u6ee1\u8db3\u67d0\u79cd\u6761\u4ef6\u4e0b\u4f1a\u81ea\u52a8\u89e6\u53d1. __str__ \u00b6 d = { 'x' : 1 } # -- \u5373d = dict({'x':1}) \u8c03\u7528dict\u8fd9\u4e2a\u7c7b\u6765\u5b8c\u6210\u5b9e\u4f8b\u5316\u7684\u8fc7\u7a0b print ( d ) # {'x': 1} -- d\u662f\u4e00\u4e2a\u5bf9\u8c61,\u672c\u8d28\u662f\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4,\u91cc\u9762\u5b58\u7684\u662f\u4e00\u5806\u6570\u636e \"\"\" \u50cf\u5185\u7f6e\u6570\u636e\u7c7b\u578b\u4e00\u6837,\u5728\u6253\u5370\u5bf9\u8c61\u65f6,\u6253\u5370\u6709\u7528\u7684\u4fe1\u606f\u51fa\u6765.\u800c\u4e0d\u662f\u6253\u5370\u5185\u5b58\u5730\u5740. __str__ \u4e3a\u6253\u5370\u5bf9\u8c61\u5b9a\u5236\u6253\u5370\u7684\u683c\u5f0f \"\"\" class People : def __init__ ( self , name , age ): self . name = name self . age = age # -- \u5728\u5bf9\u8c61self\u88ab\u6253\u5370\u65f6,\u81ea\u52a8\u89e6\u53d1 # \u5728\u9876\u7ea7\u7236\u7c7bobject\u4e2d\u6709__str__\u65b9\u6cd5,\u8fd4\u56de\u7684\u662fself\u7684\u5185\u5b58\u5730\u5740 # \u6211\u4eec\u5e94\u8be5\u91cd\u5199\u8be5\u65b9\u6cd5,\u5728\u8be5\u65b9\u6cd5\u5185\u91c7\u96c6\u4e0e\u5bf9\u8c61self\u6709\u5173\u7684\u4fe1\u606f,\u7136\u540e\u62fc\u6210\u5b57\u7b26\u4e32\u8fd4\u56de def __str__ ( self ): return \"name: %s ,age: %s \" % ( self . name , self . age ) obj = People ( 'dc' , 18 ) # -- \u6ca1\u6709__str__\u65b9\u6cd5\u7684\u65f6\u5019,\u6253\u5370 <__main__.Foo object at 0x7fef48e8d1f0> # \u6709__str__\u65b9\u6cd5\u540e, name:dc,age:18 print ( obj ) __del__ \u00b6 __del__ \u6790\u6784\u65b9\u6cd5. \u4f1a\u5728\u5bf9\u8c61\u88ab\u5220\u9664\u4e4b\u524d\u81ea\u52a8\u89e6\u53d1 \u5e94\u7528\u573a\u666f: \u8be5\u5bf9\u8c61\u4e0d\u4ec5\u4ec5\u5360\u7528python\u5e94\u7528\u7a0b\u5e8f\u7684\u5185\u5b58\u7a7a\u95f4,\u8fd8\u5360\u7528\u5176\u4ed6(eg:\u64cd\u4f5c\u7cfb\u7edf)\u7684\u8d44\u6e90. \u9700\u8981\u5728\u56de\u6536\u8be5\u5bf9\u8c61\u65f6\u5019,\u4f7f\u7528\u6790\u6784\u65b9\u6cd5\u5c06\u5360\u7528\u7684\u5176\u4ed6\u8d44\u6e90\u987a\u5e26\u4e00\u8d77\u56de\u6536\u4e86.. __del__\u4f1a\u5728\u5bf9\u8c61\u88ab\u5220\u9664\u65f6\u81ea\u52a8\u89e6\u53d1 . \u7531\u4e8ePython\u81ea\u5e26\u7684\u5783\u573e\u56de\u6536\u673a\u5236\u4f1a\u81ea\u52a8\u6e05\u7406Python\u7a0b\u5e8f\u7684\u8d44\u6e90 \u6240\u4ee5\u5f53\u4e00\u4e2a\u5bf9\u8c61\u53ea\u5360\u7528\u5e94\u7528\u7a0b\u5e8f\u7ea7\u8d44\u6e90\u65f6 , \u5b8c\u5168\u6ca1\u5fc5\u8981\u4e3a\u5bf9\u8c61\u5b9a\u5236__del__\u65b9\u6cd5 . \u4f46\u5728\u4ea7\u751f\u4e00\u4e2a\u5bf9\u8c61\u7684\u540c\u65f6\u6d89\u53ca\u5230\u7533\u8bf7\u7cfb\u7edf\u8d44\u6e90 ( \u6bd4\u5982\u7cfb\u7edf\u6253\u5f00\u7684\u6587\u4ef6 \u3001 \u7f51\u7edc\u8fde\u63a5\u7b49 ) \u7684\u60c5\u51b5\u4e0b \u3010 \u5173\u4e8e\u7cfb\u7edf\u8d44\u6e90\u7684\u56de\u6536 , Python\u7684\u5783\u573e\u56de\u6536\u673a\u5236\u4fbf\u6d3e\u4e0d\u4e0a\u7528\u573a\u4e86 ?? \"\u8fd9\u53e5\u8bdd\u597d\u50cf\u4e0d\u4e25\u8c28\" \u3011 \u9700\u8981\u6211\u4eec\u4e3a\u5bf9\u8c61\u5b9a\u5236\u8be5\u65b9\u6cd5 , \u7528\u6765\u5728\u5bf9\u8c61\u88ab\u5220\u9664\u65f6\u81ea\u52a8\u89e6\u53d1\u56de\u6536\u7cfb\u7edf\u8d44\u6e90\u7684\u64cd\u4f5c !! \"\"\" f = open('a.txt') \u53ef\u4ee5\u770b\u4f5c\u4e00\u4e2a\u7c7b\u5b9e\u4f8b\u5316\u5f97\u5230\u4e86f\u5bf9\u8c61 f\u5bf9\u8c61\u5360\u7528\u4e24\u65b9\u9762\u7684\u8d44\u6e90: 1> f\u662fpython\u7684\u4e00\u4e2a\u53d8\u91cf\u540d,\u5360\u7528python\u5e94\u7528\u7a0b\u5e8f\u7684\u7a7a\u95f4 2> f\u8fd8\u5bf9\u5e94\u64cd\u4f5c\u7cfb\u7edf\u6253\u5f00\u7684a.txt\u6587\u4ef6 \u7533\u8bf7\u8d44\u6e90\u540e,\u9700\u8981\u56de\u6536\u8d44\u6e90: 1> \u9488\u5bf9\u53d8\u91cf\u7684\u56de\u6536,python\u6709gc\u673a\u5236,\u80fd\u56de\u6536\u53d8\u91cf\u5bf9\u5e94\u7684\u503c 2> \u64cd\u4f5c\u7cfb\u7edf\u65b9\u9762\u7684\u8d44\u6e90 \u5728f\u53d8\u91cf\u88ab\u56de\u6536\u4e4b\u524d,\u901a\u8fc7f.close()\u8fdb\u884c\u56de\u6536 \"\"\" f = open ( 'a.txt' ) class People : def __init__ ( self , name , age ): self . name = name self . age = age self . f = open ( 'a.txt' , 'rt' , encoding = 'utf-8' ) def __del__ ( self ): self . f . close () def __str__ ( self ): return \"name: %s ,age: %s \" % ( self . name , self . age ) # -- obj\u662fpython\u5e94\u7528\u7a0b\u5e8f\u7684\u8d44\u6e90,\u6ca1\u5fc5\u8981\u8003\u8651\u56de\u6536 # \u4f46\u662fobj\u91cc\u9762\u6709\u5c5e\u6027f,\u8be5\u5c5e\u6027\u4e0d\u4ec5\u5360\u7528python\u8d44\u6e90,\u8fd8\u6307\u5411\u64cd\u4f5c\u7cfb\u7edf\u6253\u5f00\u7684\u6587\u4ef6 obj = People ( 'dc' , 18 ) # -- \u65b9\u5f0f1> \u7a0b\u5e8f\u7ed3\u675f,\u81ea\u52a8\u56de\u6536 \u547d\u540d\u7a7a\u95f4\u751f\u547d\u5468\u671f\u7ed3\u675f,\u5f15\u7528\u8ba1\u6570\u4e3a0,\u56de\u6536 # -- \u65b9\u5f0f2> \u7a0b\u5e8f\u5f53\u4e2d,\u4e3b\u52a8\u5220\u9664\u5bf9\u8c61,\u4f7f\u7528del\u89e3\u9664\u5bf9\u8c61\u4e0e\u503c\u7684\u7ed1\u5b9a\u5173\u7cfb,\u8be5\u5bf9\u8c61\u5219\u4f1a\u88abgc\u673a\u5236\u81ea\u52a8\u56de\u6536 del obj","title":"\u53cd\u5c04\u3001\u5185\u7f6e\u65b9\u6cd5"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/6_%E5%8F%8D%E5%B0%84%E3%80%81%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95/#_1","text":"\u901a\u8fc7 \u5b57\u7b26\u4e32 \u6765\u64cd\u4f5c\u7c7b\u6216\u8005\u5bf9\u8c61\u7684\u5c5e\u6027 \u6d89\u53ca\u56db\u4e2a\u5185\u7f6e\u51fd\u6570: hasattr getattr setattr delattr >>> hasattr < built - in function hasattr >","title":"\u53cd\u5c04"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/6_%E5%8F%8D%E5%B0%84%E3%80%81%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95/#_2","text":"\u6ce8\u610f, \u4f7f\u7528 getattr\u65f6\u5019, \u5fc5\u987b\u6355\u83b7\u7684\u5230\u7684\u662f AttributeError \u5f02\u5e38, \u624d\u80fd\u8fd4\u56degetattr\u8bbe\u7f6e\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u503c!! \u5c31\u50cf\u662f \u81ea\u5b9a\u4e49\u8fed\u4ee3\u5668\u8981raise StopIteration\u4e00\u6837, \u53ea\u6709\u8fd9\u6837for\u5faa\u73af\u624d\u4f1a\u6355\u6349\u5230\u5e76\u7ec8\u6b62\u8fed\u4ee3!! xxx = 1 class Pepole : country = 'china' def __init__ ( self , name ): self . name = name def eat ( self ): print ( f \" { self . name } is eating!\" ) p = Pepole ( 'dc' ) # -- \u672c\u8d28\u4e0a\u662f\u770b p\u80fd\u5426\u5bf9country\u8fd9\u4e2a\u5c5e\u6027\u8fdb\u884c\u5f15\u7528 \u4e0d\u5c40\u9650\u4e8e\u5224\u65ad \"country\" in p.__dict__ # \u4e5f\u5c31\u662f\u5728\u5224\u65ad\u80fd\u5426\u901a\u8fc7.\u8bbf\u95ee\u5230\u67d0\u4e2a\u5c5e\u6027 \u5373p.country\u662f\u5426\u62a5\u9519 # \u56de\u987e\u4e0b\u5c5e\u6027\u67e5\u627e\u89c4\u5219(\u547d\u540d\u7a7a\u95f4): \u81ea\u8eab-\u7c7b-\u7236\u7c7b-...-\u9876\u7ea7\u7236\u7c7bobject print ( hasattr ( p , \"country\" )) # True print ( hasattr ( p , \"xxx\" )) # False # <bound method Pepole.eat of <__main__.Pepole object at 0x7f8adde7e910>> print ( getattr ( p , \"eat\" )) print ( p . eat ) # <bound method Pepole.eat of <__main__.Pepole object at 0x7f8adde7e910>> # print(getattr(p, \"xxx\")) # AttributeError:'Pepole' object has no attribute 'xxx' print ( getattr ( p , \"xxx\" , \"\u6ca1\u6709\u8be5\u5c5e\u6027\" )) # \u6ca1\u6709\u8be5\u5c5e\u6027 -- \u901a\u5e38\u60c5\u51b5\u4e0b\u6ca1\u627e\u5230\u4f1a\u8bbe\u7f6e\u8fd4\u56de\u503c\u4e3aNone setattr ( p , \"age\" , 18 ) # -- \u7b49\u540c\u4e8e p.age = 18 print ( p . age ) # 18 print ( p . __dict__ ) # {'name': 'dc', 'age': 18} delattr ( p , \"name\" ) # -- \u7b49\u540c\u4e8e del p.name print ( p . __dict__ ) # {'age': 18}","title":"\u64cd\u4f5c\u5c5e\u6027"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/6_%E5%8F%8D%E5%B0%84%E3%80%81%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95/#_3","text":"\u8fd9\u4e2a\u4f8b\u5b50\u5f88\u597d\u7684\u8be0\u91ca\u4e86 \u53cd\u5c04\u6bd4\u70b9\u8bed\u6cd5\u597d\u7684\u5730\u65b9!! \u56e0\u4e3a\u53cd\u5c04\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5b57\u7b26\u4e32!! class Ftp : def __init__ ( self , ip , port ): self . ip = ip self . port = port def get ( self ): print ( \"GET function\" ) def put ( self ): print ( \"PUT function\" ) def run ( self ): while True : # -- \u8f93\u5165\u5b57\u7b26\u4e32\u53cd\u5c04\u5230\u5bf9\u8c61\u5177\u4f53\u7684\u65b9\u6cd5\u4e0a\u9762 choice = input ( \">>>: \" ) . strip () if hasattr ( self , choice ): method = getattr ( self , choice ) method () else : print ( \"\u60a8\u8f93\u5165\u7684\u547d\u4ee4\u4e0d\u5b58\u5728!\" ) \"\"\" method = getattr(self, choice, None) if method: method() else: print(\"\u4e0d\u5b58\u5728\") \"\"\" conn = Ftp ( \"1.1.1.1\" , 3306 ) conn . run ()","title":"\u53cd\u5c04\u7b80\u5355\u5e94\u7528"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/6_%E5%8F%8D%E5%B0%84%E3%80%81%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95/#_4","text":"\u81ea\u5b9a\u4e49\u5185\u7f6e\u65b9\u6cd5\u6765\u5b9a\u5236\u7c7b\u7684\u529f\u80fd \u4ee5__\u5f00\u5934\u548c__\u7ed3\u5c3e\u7684\u65b9\u6cd5\u5728\u6ee1\u8db3\u67d0\u79cd\u6761\u4ef6\u4e0b\u4f1a\u81ea\u52a8\u89e6\u53d1.","title":"\u5185\u7f6e\u65b9\u6cd5"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/6_%E5%8F%8D%E5%B0%84%E3%80%81%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95/#__str__","text":"d = { 'x' : 1 } # -- \u5373d = dict({'x':1}) \u8c03\u7528dict\u8fd9\u4e2a\u7c7b\u6765\u5b8c\u6210\u5b9e\u4f8b\u5316\u7684\u8fc7\u7a0b print ( d ) # {'x': 1} -- d\u662f\u4e00\u4e2a\u5bf9\u8c61,\u672c\u8d28\u662f\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4,\u91cc\u9762\u5b58\u7684\u662f\u4e00\u5806\u6570\u636e \"\"\" \u50cf\u5185\u7f6e\u6570\u636e\u7c7b\u578b\u4e00\u6837,\u5728\u6253\u5370\u5bf9\u8c61\u65f6,\u6253\u5370\u6709\u7528\u7684\u4fe1\u606f\u51fa\u6765.\u800c\u4e0d\u662f\u6253\u5370\u5185\u5b58\u5730\u5740. __str__ \u4e3a\u6253\u5370\u5bf9\u8c61\u5b9a\u5236\u6253\u5370\u7684\u683c\u5f0f \"\"\" class People : def __init__ ( self , name , age ): self . name = name self . age = age # -- \u5728\u5bf9\u8c61self\u88ab\u6253\u5370\u65f6,\u81ea\u52a8\u89e6\u53d1 # \u5728\u9876\u7ea7\u7236\u7c7bobject\u4e2d\u6709__str__\u65b9\u6cd5,\u8fd4\u56de\u7684\u662fself\u7684\u5185\u5b58\u5730\u5740 # \u6211\u4eec\u5e94\u8be5\u91cd\u5199\u8be5\u65b9\u6cd5,\u5728\u8be5\u65b9\u6cd5\u5185\u91c7\u96c6\u4e0e\u5bf9\u8c61self\u6709\u5173\u7684\u4fe1\u606f,\u7136\u540e\u62fc\u6210\u5b57\u7b26\u4e32\u8fd4\u56de def __str__ ( self ): return \"name: %s ,age: %s \" % ( self . name , self . age ) obj = People ( 'dc' , 18 ) # -- \u6ca1\u6709__str__\u65b9\u6cd5\u7684\u65f6\u5019,\u6253\u5370 <__main__.Foo object at 0x7fef48e8d1f0> # \u6709__str__\u65b9\u6cd5\u540e, name:dc,age:18 print ( obj )","title":"__str__"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/6_%E5%8F%8D%E5%B0%84%E3%80%81%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95/#__del__","text":"__del__ \u6790\u6784\u65b9\u6cd5. \u4f1a\u5728\u5bf9\u8c61\u88ab\u5220\u9664\u4e4b\u524d\u81ea\u52a8\u89e6\u53d1 \u5e94\u7528\u573a\u666f: \u8be5\u5bf9\u8c61\u4e0d\u4ec5\u4ec5\u5360\u7528python\u5e94\u7528\u7a0b\u5e8f\u7684\u5185\u5b58\u7a7a\u95f4,\u8fd8\u5360\u7528\u5176\u4ed6(eg:\u64cd\u4f5c\u7cfb\u7edf)\u7684\u8d44\u6e90. \u9700\u8981\u5728\u56de\u6536\u8be5\u5bf9\u8c61\u65f6\u5019,\u4f7f\u7528\u6790\u6784\u65b9\u6cd5\u5c06\u5360\u7528\u7684\u5176\u4ed6\u8d44\u6e90\u987a\u5e26\u4e00\u8d77\u56de\u6536\u4e86.. __del__\u4f1a\u5728\u5bf9\u8c61\u88ab\u5220\u9664\u65f6\u81ea\u52a8\u89e6\u53d1 . \u7531\u4e8ePython\u81ea\u5e26\u7684\u5783\u573e\u56de\u6536\u673a\u5236\u4f1a\u81ea\u52a8\u6e05\u7406Python\u7a0b\u5e8f\u7684\u8d44\u6e90 \u6240\u4ee5\u5f53\u4e00\u4e2a\u5bf9\u8c61\u53ea\u5360\u7528\u5e94\u7528\u7a0b\u5e8f\u7ea7\u8d44\u6e90\u65f6 , \u5b8c\u5168\u6ca1\u5fc5\u8981\u4e3a\u5bf9\u8c61\u5b9a\u5236__del__\u65b9\u6cd5 . \u4f46\u5728\u4ea7\u751f\u4e00\u4e2a\u5bf9\u8c61\u7684\u540c\u65f6\u6d89\u53ca\u5230\u7533\u8bf7\u7cfb\u7edf\u8d44\u6e90 ( \u6bd4\u5982\u7cfb\u7edf\u6253\u5f00\u7684\u6587\u4ef6 \u3001 \u7f51\u7edc\u8fde\u63a5\u7b49 ) \u7684\u60c5\u51b5\u4e0b \u3010 \u5173\u4e8e\u7cfb\u7edf\u8d44\u6e90\u7684\u56de\u6536 , Python\u7684\u5783\u573e\u56de\u6536\u673a\u5236\u4fbf\u6d3e\u4e0d\u4e0a\u7528\u573a\u4e86 ?? \"\u8fd9\u53e5\u8bdd\u597d\u50cf\u4e0d\u4e25\u8c28\" \u3011 \u9700\u8981\u6211\u4eec\u4e3a\u5bf9\u8c61\u5b9a\u5236\u8be5\u65b9\u6cd5 , \u7528\u6765\u5728\u5bf9\u8c61\u88ab\u5220\u9664\u65f6\u81ea\u52a8\u89e6\u53d1\u56de\u6536\u7cfb\u7edf\u8d44\u6e90\u7684\u64cd\u4f5c !! \"\"\" f = open('a.txt') \u53ef\u4ee5\u770b\u4f5c\u4e00\u4e2a\u7c7b\u5b9e\u4f8b\u5316\u5f97\u5230\u4e86f\u5bf9\u8c61 f\u5bf9\u8c61\u5360\u7528\u4e24\u65b9\u9762\u7684\u8d44\u6e90: 1> f\u662fpython\u7684\u4e00\u4e2a\u53d8\u91cf\u540d,\u5360\u7528python\u5e94\u7528\u7a0b\u5e8f\u7684\u7a7a\u95f4 2> f\u8fd8\u5bf9\u5e94\u64cd\u4f5c\u7cfb\u7edf\u6253\u5f00\u7684a.txt\u6587\u4ef6 \u7533\u8bf7\u8d44\u6e90\u540e,\u9700\u8981\u56de\u6536\u8d44\u6e90: 1> \u9488\u5bf9\u53d8\u91cf\u7684\u56de\u6536,python\u6709gc\u673a\u5236,\u80fd\u56de\u6536\u53d8\u91cf\u5bf9\u5e94\u7684\u503c 2> \u64cd\u4f5c\u7cfb\u7edf\u65b9\u9762\u7684\u8d44\u6e90 \u5728f\u53d8\u91cf\u88ab\u56de\u6536\u4e4b\u524d,\u901a\u8fc7f.close()\u8fdb\u884c\u56de\u6536 \"\"\" f = open ( 'a.txt' ) class People : def __init__ ( self , name , age ): self . name = name self . age = age self . f = open ( 'a.txt' , 'rt' , encoding = 'utf-8' ) def __del__ ( self ): self . f . close () def __str__ ( self ): return \"name: %s ,age: %s \" % ( self . name , self . age ) # -- obj\u662fpython\u5e94\u7528\u7a0b\u5e8f\u7684\u8d44\u6e90,\u6ca1\u5fc5\u8981\u8003\u8651\u56de\u6536 # \u4f46\u662fobj\u91cc\u9762\u6709\u5c5e\u6027f,\u8be5\u5c5e\u6027\u4e0d\u4ec5\u5360\u7528python\u8d44\u6e90,\u8fd8\u6307\u5411\u64cd\u4f5c\u7cfb\u7edf\u6253\u5f00\u7684\u6587\u4ef6 obj = People ( 'dc' , 18 ) # -- \u65b9\u5f0f1> \u7a0b\u5e8f\u7ed3\u675f,\u81ea\u52a8\u56de\u6536 \u547d\u540d\u7a7a\u95f4\u751f\u547d\u5468\u671f\u7ed3\u675f,\u5f15\u7528\u8ba1\u6570\u4e3a0,\u56de\u6536 # -- \u65b9\u5f0f2> \u7a0b\u5e8f\u5f53\u4e2d,\u4e3b\u52a8\u5220\u9664\u5bf9\u8c61,\u4f7f\u7528del\u89e3\u9664\u5bf9\u8c61\u4e0e\u503c\u7684\u7ed1\u5b9a\u5173\u7cfb,\u8be5\u5bf9\u8c61\u5219\u4f1a\u88abgc\u673a\u5236\u81ea\u52a8\u56de\u6536 del obj","title":"__del__"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7_%E5%85%83%E7%B1%BB/","text":"\u5143\u7c7b\u4ecb\u7ecd \u00b6 \u5728python\u4e2d\u4e00\u5207\u7686\u5bf9\u8c61,\u5219\u6211\u4eec\u7528class\u5173\u952e\u5b57\u5b9a\u4e49\u7684\u7c7b\u672c\u8eab\u4e5f\u662f\u4e00\u4e2a\u5bf9\u8c61. \u8d1f\u8d23\u4ea7\u751f\u8be5\u5bf9\u8c61\u7684\u7c7b\u79f0\u4e4b\u4e3a\u5143\u7c7b, \u5373 \u5143\u7c7b\u662f\u6211\u4eec\u81ea\u5b9a\u4e49\u7c7b\u7684\u7c7b . \u6362\u4e2a\u8bf4\u6cd5, \u6211\u4eec\u7528class\u5b9a\u4e49\u7684\u7c7b\u672c\u8d28\u5c31\u662f\u5728\u5b9e\u4f8b\u5316\u5143\u7c7b. \u5143\u7c7b\u662f\u8d1f\u8d23\u4ea7\u751f\u7c7b\u7684,\u6211\u4eec\u5b66\u4e60\u5143\u7c7b/\u81ea\u5b9a\u4e49\u5143\u7c7b\u7684 \u76ee\u7684 \u5728\u4e8e: 1> \u63a7\u5236class\u5b9a\u4e49\u7c7b\u7684\u8fc7\u7a0b; 2> \u63a7\u5236 \u8c03\u7528\u7c7b(\u8be5\u7c7b\u662fclass\u5b9a\u4e49\u7684)\u4ea7\u751f\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684\u8fc7\u7a0b. \u5143\u7c7b\u91cc\u7684 __init__ \u63a7\u5236\u5143\u7c7b\u4ea7\u751f\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61 (\u5373\u7c7b) \u521d\u59cb\u5316\u7684\u8fc7\u7a0b ; \u5143\u7c7b\u91cc\u7684 __call__ \u63a7\u5236\u5b9e\u4f8b\u5316\u5bf9\u8c61\"\u5b9e\u4f8b\u5316/\u8c03\u7528\"\u4ea7\u751f\u5b9e\u4f8b\u7684\u8fc7\u7a0b. \u521b\u5efa\u7c7b\u7684\u4e24\u79cd\u65b9\u5f0f \u00b6 \u5927\u524d\u63d0: Python\u4e00\u5207\u7686\u5bf9\u8c61,\u90a3\u4e48\u7c7b\u4e5f\u662f\u4e00\u4e2a\u5bf9\u8c61.\u5219\u7528class\u5173\u952e\u5b57\u53bb\u521b\u5efa\u7c7b\u7684\u8fc7\u7a0b\u4e5f\u662f\u4e00\u4e2a\u5b9e\u4f8b\u5316\u7684\u8fc7\u7a0b; \u8be5\u5b9e\u4f8b\u5316\u7684\u8fc7\u7a0b\u662f\u4e3a\u4e86\u5f97\u5230\u4e00\u4e2a\u7c7b,\u8c03\u7528\u7684\u662f\u5143\u7c7b.. 1> \u9ed8\u8ba4\u7684\u5143\u7c7btype; 2> \u81ea\u5b9a\u4e49\u7684\u5143\u7c7b. \u7528\u9ed8\u8ba4\u5143\u7c7btype \u00b6 \u5373\u7528\u5173\u952e\u5b57class \u8fdb\u884c\u521b\u5efa. # -- \u65b9\u5f0f\u4e00: \u7528\u7684\u9ed8\u8ba4\u7684\u5143\u7c7btype class People : # -- People = type('People',..,..) country = \"China\" def __init__ ( self , name , age ): self . name = name self . age = age def eat ( self ): print ( \" %s is eating.\" % self . name ) obj = People ( 'dc' , 22 ) print ( type ( obj )) # <class '__main__.People'> -- obj\u5bf9\u8c61\u662f\u901a\u8fc7People\u7c7b\u5b9e\u4f8b\u5316\u5f97\u5230\u7684!! print ( type ( People )) # <class 'type'> -- \u6240\u6709\u7528class\u5173\u952e\u5b57\u521b\u5efa\u7684\u7c7b\u90fd\u9ed8\u8ba4\u662ftype\u7c7b\u5b9e\u4f8b\u5316\u5f97\u5230\u7684!! print ( obj ) # <__main__.People object at 0x7f91cde7eac0> print ( People ) # <class '__main__.People'> \u5185\u7f6e\u51fd\u6570exec \u00b6 exec(object[, globals[, locals]]) : \u53c2\u6570\u4e00: \u5305\u542b\u4e00\u7cfb\u5217python\u4ee3\u7801\u7684 \u5b57\u7b26\u4e32 \u53c2\u6570\u4e8c: \u5168\u5c40\u4f5c\u7528\u57df(\u5b57\u5178\u5f62\u5f0f), \u5982\u679c\u4e0d\u6307\u5b9a, \u9ed8\u8ba4\u4e3aglobals() \u53c2\u6570\u4e09: \u5c40\u90e8\u4f5c\u7528\u57df(\u5b57\u5178\u5f62\u5f0f), \u5982\u679c\u4e0d\u6307\u5b9a, \u9ed8\u8ba4\u4e3alocals() \u53ef\u4ee5\u628aexec\u547d\u4ee4\u7684\u6267\u884c\u5f53\u6210\u662f\u4e00\u4e2a\u51fd\u6570\u7684\u6267\u884c,\u4f1a\u5c06\u6267\u884c\u671f\u95f4\u4ea7\u751f\u7684\u540d\u5b57\u5b58\u653e\u4e8e\u5c40\u90e8\u540d\u79f0\u7a7a\u95f4\u4e2d. g_dic = { 'x' : 1 , 'y' : 2 } l_dic = { 'm' : 3 , 'n' : 4 , 'x' : 5 , 'y' : 6 } x , y , m , n = 10 , 20 , 30 , 40 exec ( ''' global x,z x=100 z=200 m=300 print(m,n,x,y) # 300 4 100 6 # -- x\u7684\u503c\u4e3a100,\u800c\u4e0d\u662fl_dic\u4e2d\u76845,\u662f\u56e0\u4e3aglobal\u5173\u952e\u5b57 # \u5b83\u5df2\u7ecf\u544a\u8bc9python\u89e3\u91ca\u5668,\u51fd\u6570\u91cc\u4f46\u51e1\u5bf9x\u53d8\u91cf\u7684\u5f15\u7528,\u90fd\u4f1a\u89e3\u6790\u6210\u5168\u5c40\u53d8\u91cf.. # \u5b83\u8fd8\u4f7f\u5f97\u5bf9x\u53d8\u91cf\u7684\u8d4b\u503c\u4e5f\u662f\u5728\u5bf9\u5168\u5c40\u53d8\u91cf\u8fdb\u884c\u64cd\u4f5c ''' , g_dic , l_dic ) print ( g_dic ) # {'x': 100, 'y': 2,'z':200,...} print ( l_dic ) # {'m': 300, 'n': 4, 'x': 5, 'y': 6} -- \u53ef\u4ee5\u770b\u5230m\u53d8\u91cf\u7684\u503c\u88ab\u8986\u76d6\u4e86 # --- --- --- cmd = \"\"\" x = 1 y = 2 print('>>>>:') \"\"\" local_dic = {} exec ( cmd , {}, local_dic ) print ( local_dic ) # -- \u5c06\u6267\u884c\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u540d\u5b57\u90fd\u4e22\u5230local_dic\u91cc\u9762\u53bb\u5566\uff01 \"\"\"\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b: >>>>: {'x': 1, 'y': 2} \"\"\" # --- --- --- \u6a21\u62df\u7c7b\u5b9a\u4e49\u9636\u6bb5,\u5f00\u8f9f\u547d\u540d\u7a7a\u95f4,\u5c06\u7c7b\u4f53\u6267\u884c\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u540d\u5b57\u653e\u5230\u547d\u540d\u7a7a\u95f4\u91cc\u7684\u8fc7\u7a0b. class Foo : x = 1 def fun ( self ): pass cmd = \"\"\" x = 1 def fun(self):pass \"\"\" class_dic = {} # -- \u5b9a\u4e49\u7c7b\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4 exec ( cmd , {}, class_dic ) print ( class_dic ) # {'x': 1, 'fun': <function fun at 0x7fcfdfe799d0>} \u521b\u5efa\u7c7b\u7684\u4e09\u8981\u7d20 \u00b6 \u521b\u5efa\u7c7b\u76843\u4e2a\u8981\u7d20: \u7c7b\u540d\u3001\u57fa\u7c7b\u3001\u7c7b\u7684\u540d\u79f0\u7a7a\u95f4. class_name = 'People' class_bases = ( object , ) class_dic = {} class_body = \"\"\" country = \"China\" def __init__(self, name, age): self.name = name self.age = age def eat(self): print(\" %s is eating.\" % s elf.name) \"\"\" exec ( class_body , {}, class_dic ) # -- \u51c6\u5907\u597d\u521b\u5efa\u7c7b\u7684\u4e09\u4e2a\u8981\u7d20 print ( class_name ) # People print ( class_bases ) # (<class 'object'>,) # { # 'country': 'China', # '__init__': <function __init__ at 0x7fb7b45799d0>, # 'eat': <function eat at 0x7fb7b4579940> # } print ( class_dic ) # -- type(\u7c7b\u540d,\u57fa\u7c7b,\u7c7b\u7684\u540d\u79f0\u7a7a\u95f4) # Ps:\u4e00\u822c\u4f1a\u5c06type\u8d4b\u503c\u7ed9\u7684\u53d8\u91cf\u7684\u540d\u5b57,\u547d\u540d\u7684\u8ddfclass_name\u4e00\u6837 Peo = type ( class_name , class_bases , class_dic ) print ( Peo ) # <class '__main__.People'> \u81ea\u5b9a\u4e49\u7684\u5143\u7c7b \u00b6 class\u521b\u5efa\u7c7b\u7684\u6d41\u7a0b \u00b6 \u5728\u7528\u9ed8\u8ba4\u5143\u7c7btype\u521b\u5efa\u7c7b\u7684\u65b9\u5f0f\u4e2d, \u6211\u4eec\u53ef\u4ee5\u5206\u6790\u51fa class\u7684\u8fd0\u884c\u539f\u7406: (\u800c\u975e\u5143\u7c7b\u7684\u8fd0\u884c\u539f\u7406) 1> \u62ff\u5230\u4e00\u4e2a\u5b57\u7b26\u4e32\u683c\u5f0f\u7684\u7c7b\u540d class_name = \"People\" 2> \u62ff\u5230\u4e00\u4e2a\u7c7b\u7684\u57fa\u7c7b\u4eec class_bases = (object, ) 3> \u6267\u884c\u7c7b\u4f53\u4ee3\u7801, \u62ff\u5230\u4e00\u4e2a\u7c7b\u7684\u540d\u79f0\u7a7a\u95f4 class_dic = {...} 4> \u8c03\u7528 People = type(class_name, class_bases, class_dic) class\u5173\u952e\u5b57\u662f\u4e0a\u8ff0\u56db\u4e2a\u6b65\u9aa4\u7684\u5c01\u88c5. class Mymeta ( type ): # -- \u53ea\u6709\u7ee7\u627f\u4e86type\u7c7b\u624d\u80fd\u79f0\u4e4b\u4e3a\u4e00\u4e2a\u5143\u7c7b,\u5426\u5219\u5c31\u662f\u4e00\u4e2a\u666e\u901a\u7684\u81ea\u5b9a\u4e49\u7c7b def __init__ ( self , class_name , class_bases , class_dic ): print ( self ) # <class '__main__.People'> \u6ce8\u610f\u54e6,Mymeta\u5b9e\u4f8b\u5316\u51fa\u7684\u662f\u4e00\u4e2a\u7c7b print ( class_name ) # People print ( class_bases ) # (<class 'object'>,) # { # '__module__': '__main__', # '__qualname__': 'People', # 'country': 'China', # '__init__': <function People.__init__ at 0x7f9ce3555700>, # 'eat': <function People.eat at 0x7f9ce3555a60> # } print ( class_dic ) # (<class '__main__.Mymeta'>, <class 'type'>, <class 'object'>) print ( Mymeta . __mro__ ) # -- People = Mymeta(...) self\u662fPeople,\u5176\u6240\u5728\u7c7b\u662fMymeta,\u770bMymeta\u7c7b\u7684mro\u94fe # super()\u4f1a\u5f97\u5230\u4e00\u4e2a\u7279\u6b8a\u5bf9\u8c61,\u6b64\u5904\u662f\u7ed1\u5b9a\u65b9\u6cd5,\u6240\u4ee5\u4e0d\u7528\u5199self. super ( Mymeta , self ) . __init__ ( class_name , class_bases , class_dic ) # -- \u91cd\u7528\u7236\u7c7b\u529f\u80fd # -- People\u9ed8\u8ba4\u7ee7\u627fobject\u7c7b,metaclass\u9ed8\u8ba4\u503c\u4e3atype. # class\u7684\u8fd0\u884c\u539f\u7406\u7b2c4\u6b65\u662f\u7528type\u5b9e\u4f8b\u5316\u51faPeople\u5bf9\u8c61. # \u5728\u8fd9\u91cc,\u6211\u4eec\u4e0d\u4f7f\u7528type,\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684\u5143\u7c7bMymeta\u5b9e\u4f8b\u5316\u51faPeople\u5bf9\u8c61. # People = Mymeta(\u7c7b\u540d,\u57fa\u7c7b\u4eec,\u7c7b\u7684\u540d\u79f0\u7a7a\u95f4) # \u8c03\u7528Mymeta\u7c7b\u521b\u5efa\u4e86\u4e00\u4e2a\u7a7a\u5bf9\u8c61'\u5373\u7a7a\u7684\u540d\u79f0\u7a7a\u95f4{}'\u540e; # \u7a7a\u5bf9\u8c61People\u4f1a\u8fde\u540cMymeta\u62ec\u53f7\u5185\u7684\u53c2\u6570\u4e00\u8d77\u4f20\u7ed9Mymeta\u4e0b\u7684__init__\u65b9\u6cd5,\u5b8c\u6210\u521d\u59cb\u5316 class People ( object , metaclass = Mymeta ): country = \"China\" def __init__ ( self , name , age ): self . name = name self . age = age def eat ( self ): print ( \" %s is eating.\" % self . name ) \u6dfb\u52a0\u4e00\u4e9b\u5224\u65ad \u00b6 # -- \u5e94\u7528:\u81ea\u5b9a\u4e49\u5143\u7c7b\u63a7\u5236\u7c7b\u7684\u4ea7\u751f\u8fc7\u7a0b,\u7c7b\u7684\u4ea7\u751f\u8fc7\u7a0b\u5176\u5b9e\u5c31\u662f\u5143\u7c7b\u7684\u8c03\u7528\u8fc7\u7a0b class Mymeta ( type ): def __init__ ( self , class_name , class_bases , class_dic ): temp = class_dic . get ( \"__doc__\" ) # -- or\u5de6\u4fa7\u6761\u4ef6\u6210\u7acb\u7684\u8bdd,or\u53f3\u4fa7\u5c31\u4e0d\u4f1a\u6267\u884c\u5566!!\u4e5f\u5c31\u4fdd\u8bc1or\u53f3\u4fa7\u6267\u884c\u65f6,temp\u4e00\u5b9a\u4e0d\u4e3aNone. if temp is None or len ( temp . strip ()) == 0 : raise TypeError ( \"\u7c7b\u4e2d\u5fc5\u987b\u6709\u6587\u6863\u6ce8\u91ca,\u5e76\u4e14\u4e0d\u4e3a\u7a7a.\" ) if not class_name . istitle (): raise TypeError ( \"\u7c7b\u540d\u9996\u5b57\u6bcd\u5fc5\u987b\u5927\u5199.\" ) super ( Mymeta , self ) . __init__ ( class_name , class_bases , class_dic ) class People ( object , metaclass = Mymeta ): \"\"\"\u8fd9\u662f\u4e00\u4e2aPeople\u7c7b!\"\"\" country = \"China\" def __init__ ( self , name , age ): self . name = name self . age = age def eat ( self ): print ( \" %s is eating.\" % self . name ) print ( getattr ( People , \"__doc__\" , None )) \u81ea\u5b9a\u4e49\u7c7b\u7684\u5b9e\u4f8b\u5316 \u00b6 \u81ea\u5b9a\u4e49\u5143\u7c7b\u6765\u63a7\u5236\u7c7b\u7684\u8c03\u7528\u8fc7\u7a0b, \u5373\u7c7b\u7684\u5b9e\u4f8b\u5316\u8fc7\u7a0b __call__ \u00b6 \u539f\u7406 \u00b6 class Foo : def __call__ ( self , * args , ** kwargs ): print ( self ) # <__main__.Foo object at 0x7fa1f868cac0> print ( args ) # (1, 2, 3) print ( kwargs ) # {'x': 4, 'y': 5} return \"\u8fd4\u56de\u503c123\" obj = Foo () # -- \u8981\u60f3\u8ba9obj\u8fd9\u4e2a\u5b9e\u4f8b\u5316\u5bf9\u8c61\u53d8\u6210\u4e00\u4e2a\u53ef\u8c03\u7528\u7684\u5bf9\u8c61,\u9700\u8981\u5728\u8be5\u5bf9\u8c61\u7684\u7c7b\u4e2d\u5b9a\u4e49\u4e00\u4e2a__call__\u65b9\u6cd5 # \u8be5\u65b9\u6cd5\u4f1a\u5728\u8c03\u7528\u5b9e\u4f8b\u5316\u5bf9\u8c61obj\u65f6\u81ea\u52a8\u89e6\u53d1,\u8c03\u7528obj\u7684\u8fd4\u56de\u503c\u5c31\u662f__call__\u65b9\u6cd5\u7684\u8fd4\u56de\u503c print ( obj ( 1 , 2 , 3 , x = 4 , y = 5 )) # \u8fd4\u56de\u503c123 -- obj\u7684\u8c03\u7528\u4f1a\u89e6\u53d1Foo\u4e2d__call__\u65b9\u6cd5\u7684\u6267\u884c \u7531\u6b64\u5f97\u77e5, \u8c03\u7528\u4e00\u4e2a\u5bf9\u8c61, \u5c31\u662f\u89e6\u53d1\u5bf9\u8c61\u6240\u5728\u7c7b\u4e2d\u7684__call__\u65b9\u6cd5\u7684\u6267\u884c! Python\u5904\u5904\u7686\u5bf9\u8c61, People\u4e5f\u662f\u4e00\u4e2a\u5bf9\u8c61, \u5e76\u4e14People\u5b83\u662f\u53ef\u4ee5\u8c03\u7528\u7684! \u90a3\u4e48\u5728\u5b9e\u4f8b\u5316\u5f97\u5230People\u5bf9\u8c61\u7684Mymeta\u7c7b\u4e2d\u4e5f\u5fc5\u7136\u5b58\u5728\u4e00\u4e2a__call__\u65b9\u6cd5!!! \u5143\u7c7b\u4e2d\u7684__call__ \u00b6 Mymeta ---(\u5b9e\u4f8b\u5316)--- People ---(\u5b9e\u4f8b\u5316)--- obj People\u5b9e\u4f8b\u5316\u5f97\u5230obj\u4f1a\u5bf9People\u8fdb\u884c\u8c03\u7528,\u5219Mymeta\u4e2d\u4e00\u5b9a\u4f1a\u6709__call__\u65b9\u6cd5. # -- \u5e94\u7528:\u81ea\u5b9a\u4e49\u5143\u7c7b\u63a7\u5236\u7c7b\u7684\u4ea7\u751f\u8fc7\u7a0b,\u7c7b\u7684\u4ea7\u751f\u8fc7\u7a0b\u5176\u5b9e\u5c31\u662f\u5143\u7c7b\u7684\u8c03\u7528\u8fc7\u7a0b class Mymeta ( type ): def __call__ ( self , * args , ** kwargs ): print ( self ) # <class '__main__.People'> print ( args ) # ('dc',) print ( kwargs ) # {'age': 18} class People ( object , metaclass = Mymeta ): country = \"China\" def __init__ ( self , name , age ): self . name = name self . age = age def eat ( self ): print ( \" %s is eating.\" % self . name ) # -- \u8c03\u7528People\u5c31\u662f\u5728\u8c03\u7528Mymeta\u7c7b\u4e2d\u7684__call__\u65b9\u6cd5 # \u7136\u540e\u5c06People\u4f20\u7ed9self,\u6ea2\u51fa\u7684\u4f4d\u7f6e\u53c2\u6570\u4f20\u7ed9*,\u6ea2\u51fa\u7684\u5173\u952e\u5b57\u53c2\u6570\u4f20\u7ed9** # \u8c03\u7528People\u7684\u8fd4\u56de\u503c\u5c31\u662f\u8c03\u7528__call__\u7684\u8fd4\u56de\u503c obj = People ( 'dc' , age = 18 ) print ( obj ) # None \u56de\u987e\u4e00\u4e0b,\u629b\u5f00\u5143\u7c7b\u7684\u77e5\u8bc6\u4e0d\u8c08, \u5c31\u5355\u7eaf\u7684People('dc', 18)\u5f97\u5230\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61obj, \u8fd9\u4e00\u8fc7\u7a0b\u7ecf\u5386\u4e86\u4ec0\u4e48\uff1f step1: \u8c03\u7528\u7c7b\u521b\u5efa\u4e86\u4e00\u4e2a\u7a7a\u5bf9\u8c61 '\u7a7a\u7684\u540d\u79f0\u7a7a\u95f4' {} step2: \u81ea\u52a8\u89e6\u53d1\u7c7b\u4e2d__init__\u529f\u80fd\u7684\u6267\u884c, \u5c06\u7a7a\u5bf9\u8c61\u4f20\u7ed9self\u53c2\u6570 \u8c03\u7528\u5143\u7c7b\u4ea7\u751f\u7684\u7c7b \u00b6 \u90a3\u4e48,\u81ea\u5b9a\u4e49\u7684\u5143\u7c7bMymeta\u5728__call__\u65b9\u6cd5\u4e2d\u4e00\u5b9a\u4f1a\u5b9e\u73b0\u8fd9\u4e09\u4ef6\u4e8b: 1> \u4ea7\u751f\u4e00\u4e2aPeople\u7684\u7a7a\u5bf9\u8c61obj 2> \u8c03\u7528__init__\u65b9\u6cd5\u521d\u59cb\u5316\u5bf9\u8c61obj 3> \u8fd4\u56de\u521d\u59cb\u5316\u597d\u7684obj \u63a5\u4e0b\u6765,\u6211\u4eec\u5c06\u9ed8\u8ba4\u5143\u7c7btype\u5e72\u7684\u4e8b\u60c5\u8fdb\u884c\u8fd8\u539f. # -- \u5e94\u7528:\u81ea\u5b9a\u4e49\u5143\u7c7b\u63a7\u5236\u7c7b\u7684\u4ea7\u751f\u8fc7\u7a0b,\u7c7b\u7684\u4ea7\u751f\u8fc7\u7a0b\u5176\u5b9e\u5c31\u662f\u5143\u7c7b\u7684\u8c03\u7528\u8fc7\u7a0b class Mymeta ( type ): def __call__ ( self , * args , ** kwargs ): # -- !!!\u5fc5\u987b\u5199self\u53c2\u6570,\u4ee3\u8868\u521b\u5efa\u7684\u662f\u8be5self\u7684\u7a7a\u5bf9\u8c61 \u56fa\u5b9a\u7528\u6cd5!! # \u6b64\u5904\u662fself\u6307\u4ee3\u7684\u662f\u7c7bPeople # \u8981\u627e__new__\u8fd9\u4e2a\u5c5e\u6027,\u82e5People\u7684namespace\u4e2d\u6ca1\u6709,\u4f9d\u6b21\u518d\u53bbobject\u3001Mymeta\u3001type\u4e2d\u627e obj = self . __new__ ( self ) # -- \u30101\u3011.\u901a\u8fc7__new__\u65b9\u6cd5\u5148\u9020\u4e00\u4e2aPeople\u7684\u7a7a\u5bf9\u8c61 # -- \u8fd9\u91cc\u4e5f\u6d89\u53ca\u5230\u5c5e\u6027\u67e5\u627e,\u8be5self(\u5373People)\u4e2d\u6709__init__\u65b9\u6cd5,\u5c31\u76f4\u63a5\u4f7f\u7528\u5b83 # \u629b\u5f00\u5143\u7c7b\u4e0d\u8c08,\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u81ea\u52a8\u8c03\u7528__init__\u7ed1\u5b9a\u65b9\u6cd5\u65f6,\u4e0d\u7528\u4f20self.. \u5c31\u662f\u56e0\u4e3a\u5728\u8fd9\u91cc\u5e2e\u5fd9\u4f20\u5566 self . __init__ ( obj , * args , ** kwargs ) # -- \u30102\u3011.\u8c03\u7528__init__\u4e3a\u8be5\u7a7a\u5bf9\u8c61\u521d\u59cb\u5316\u72ec\u6709\u7684\u5c5e\u6027 return obj # -- \u30103\u3011.\u8fd4\u56de\u4e00\u4e2a\u521d\u59cb\u5316\u597d\u7684\u5bf9\u8c61obj # -- People = Mymeta(People,...,...) \u662f\u5728\u521b\u5efa\u7c7b,\u4e3b\u8981\u64cd\u4f5c\u7684\u662fMymeta\u4e2d\u7684__init__ # -- People()\u662f\u5728\u8c03\u7528Mymeta\u4e2d\u7684__call__\u521b\u5efa\u5b9e\u4f8b\u5316\u5bf9\u8c61 class People ( object , metaclass = Mymeta ): country = \"China\" def __init__ ( self , name , age ): self . name = name self . age = age def eat ( self ): print ( \" %s is eating.\" % self . name ) def __new__ ( cls , * args , ** kwargs ): # print(cls) # <class '__main__.People'> # cls.__new__(cls) # -- \u76f4\u63a5\u62a5\u9519,\u9012\u5f52\u6b7b\u5faa\u73af # print(cls.__mro__) # -- (<class '__main__.People'>, <class 'object'>) obj = super () . __new__ ( cls ) # -- \u5b8c\u6574\u5199\u6cd5\u4e3a: super(People,cls) return obj obj = People ( 'dc' , age = 18 ) print ( obj . __dict__ ) # {'name': 'dc', 'age': 18} obj . eat () # dc is eating. \u5c5e\u6027\u67e5\u627e \u00b6 \u7ed3\u5408 python\u7ee7\u627f\u7684\u5b9e\u73b0\u539f\u7406+\u5143\u7c7b \u91cd\u65b0\u770b\u5c5e\u6027\u7684\u67e5\u627e\u5e94\u8be5\u662f\u4ec0\u4e48\u6837\u5b50\u5462??? \u5728\u5b66\u4e60\u5b8c\u5143\u7c7b\u540e, \u66f4\u8fdb\u4e00\u6b65\u7406\u89e3\u4e86\"python\u5904\u5904\u7686\u5bf9\u8c61\",\u63d0\u4e00\u70b9,\u7528class\u81ea\u5b9a\u4e49\u7684\u7c7b\u5168\u90fd\u662f\u5bf9\u8c61 \u5305\u62ecobject\u7c7b\u672c\u8eab\u4e5f\u662f\u5143\u7c7btype\u7684 \u4e00\u4e2a\u5b9e\u4f8b,\u53ef\u4ee5\u7528 type(object) \u9a8c\u8bc1. \u7ee7\u627f\u7684\u5b9e\u73b0\u539f\u7406 + \u5c06\u7c7b\u5f53\u6210\u5bf9\u8c61.\u4e0b\u8ff0\u7ee7\u627f\u5e94\u8be5\u8bf4\u6210\u662f: \u5bf9\u8c61StanfordTeacher\u7ee7\u627f\u5bf9\u8c61Foo, \u5bf9\u8c61Foo\u7ee7\u627f\u5bf9\u8c61Bar, \u5bf9\u8c61Bar\u7ee7\u627f\u5bf9\u8c61object \u4e8e\u662f\u5c5e\u6027\u67e5\u627e\u5e94\u8be5\u5206\u6210 \u4e24\u5c42 : \u4e00\u5c42\u662f\u5bf9\u8c61\u5c42 (\u57fa\u4e8ec3\u7b97\u6cd5\u7684MRO) \u7684\u67e5\u627e, \u53e6\u5916\u4e00\u4e2a\u5c42\u5219\u662f\u7c7b\u5c42(\u5373\u5143\u7c7b\u5c42)\u7684\u67e5\u627e!! Ps: \u82e5StanfordTeacher\u5b9e\u4f8b\u5316\u51faobj\u5bf9\u8c61,obj\u901a\u8fc7 . \u8fdb\u884c\u5c5e\u6027\u5f15\u7528\u65f6,\u4f1a\u5148\u5728\u81ea\u5df1\u7684namespace\u4e2d\u67e5\u627e\u72ec\u6709\u5c5e\u6027. class Mymeta ( type ): n = 520 def __call__ ( self , * args , ** kwargs ): # print(self) # <class '__main__.StanfordTeacher'> # -- __new__\u7684\u67e5\u627e\u987a\u5e8f\u4e3aStanfordTeacher->Foo->Bar->object->Mymeta->type obj = self . __new__ ( self ) # print(self.__new__ is object.__new__) # True # -- !!\u4e0b\u65b9\u8fd9\u6761\u6ce8\u91ca\u7684\u8bed\u53e5,\u4e5f\u53ef\u4ee5\u521b\u5efa\u7a7a\u5bf9\u8c61,\u4f46\u4f1a\u76f4\u63a5\u8df3\u8fc7StanfordTeacher->Foo->Bar\u8fd9\u4e09\u4e2a\u7c7b\u7684\u68c0\u7d22 # obj = object.__new__(self) self . __init__ ( obj , * args , ** kwargs ) return obj class Bar ( object ): n = 333 class Foo ( Bar ): n = 222 class StanfordTeacher ( Foo , metaclass = Mymeta ): n = 111 school = 'Stanford' def __init__ ( self , name , age ): self . name = name self . age = age def say ( self ): print ( ' %s says welcome to the Stanford to learn Python' % self . name ) # -- n\u7684\u67e5\u627e\u987a\u5e8f\u4e3aStanfordTeacher->Foo->Bar->object->Mymeta->type print ( StanfordTeacher . n ) obj = object.__new__(self) \u4e5f\u53ef\u4ee5\u521b\u5efa\u7a7a\u5bf9\u8c61,\u4f46\u4f1a\u76f4\u63a5\u8df3\u8fc7StanfordTeacher->Foo->Bar\u8fd9\u4e09\u4e2a\u7c7b\u7684\u68c0\u7d22 \u63d0\u4e00\u5634: StanfordTeacher = Mymeta('StanfordTeacher','...','...') \u4ea7\u751f\u7c7bStanfordTeacher\u7684\u8fc7\u7a0b\u5c31\u662f\u5728\u8c03\u7528Mymeta, \u800cMymeta\u4e5f\u662ftype\u7c7b\u7684\u4e00\u4e2a\u5bf9\u8c61, \u90a3\u4e48Mymeta\u4e4b\u6240\u4ee5\u53ef\u4ee5\u8c03\u7528, \u662f\u56e0\u4e3a\u5728\u5143\u7c7btype\u4e2d\u4e5f\u6709\u4e00\u4e2a __call__\u65b9\u6cd5!!! \u8be5\u65b9\u6cd5\u4e2d\u4e5f\u4f1a\u5b9e\u73b0\u90a3\u4e09\u4ef6\u4e8b!! \u5b9e\u8df5 \u00b6 \u6a21\u7248\u5206\u6790 \u00b6 1 # class type: 2 # def __call__(self, *args, **kwargs): # -- self\u4e3aMymeta\u5bf9\u8c61 args\u662f\u4e09\u8981\u7d20 15 3 # obj = self.__new__(self, *args, **kwargs) 4 # self.__init__(obj, *args, **kwargs) 5 # return obj 6 class Mymeta ( type ): 7 def __new__ ( self , * args , ** kwargs ): # -- self\u4e3aMymeta\u5bf9\u8c61 args\u662f\u4e09\u8981\u7d20 15 8 return super ( Mymeta , self ) . __new__ ( self , * args , ** kwargs ) 9 def __init__ ( self , class_name , class_bases , class_dic ): # -- self\u4e3aPeople\u5bf9\u8c61 15 10 super ( Mymeta , self ) . __init__ ( class_name , class_bases , class_dic ) 11 def __call__ ( self , * args , ** kwargs ): # -- self\u4e3aPeople\u5bf9\u8c61 args\u662f('dc',18) 21 12 obj = self . __new__ ( self ) # -- \u8fd9\u91cc\u8c03\u7528\u7684\u662f19\u884c\u7684\u4ee3\u7801 13 self . __init__ ( obj , * args , ** kwargs ) # -- \u8c03\u7528\u7684\u662f16\u7684\u4ee3\u7801 *args\u89e3\u5305\u4ee5\u4f4d\u7f6e\u53c2\u6570\u4f20\u9012 14 return obj 15 class People ( object , metaclass = Mymeta ): 16 def __init__ ( self , name , age ): 17 self . name = name 18 self . age = age # -- \u7b2c19\u300120\u884c\u7684\u4ee3\u7801\u4e0d\u5199\u4e5f\u662f\u53ef\u4ee5\u7684 19 def __new__ ( self ): 20 return super ( People , self ) . __new__ ( self ) # -- \u6700\u540e\u8c03\u7528\u7684\u662fobject\u91cc\u7684__new__ # \u6ce8\u610f,object\u7684__new__\u53ea\u6709\u4e00\u4e2a\u53c2\u6570 21 p = People ( 'dc' , 18 ) \u5148\u8bf4\u4e00\u70b9 : python\u5904\u5904\u7686\u5bf9\u8c61 , \u7c7b\u4e5f\u662f\u4e00\u4e2a\u5bf9\u8c61 . \u8c03\u7528\u5bf9\u8c61\u5c31\u4f1a\u89e6\u53d1\u5b9e\u4f8b\u5316\u8be5\u5bf9\u8c61\u7684\u7c7b\u4e2d\u7684__call__\u65b9\u6cd5 . \u4ee5\u672c\u6a21\u7248\u4e3a\u4f8b , Mymeta () \u3001 People () \u4f1a\u5206\u522b\u89e6\u53d1type\u7c7b\u548cMymeta\u7c7b\u4e2d\u7684call\u65b9\u6cd5 ; < \u5728\u7b2c15\u884c\u6253\u4e2a\u65ad\u70b9 , \u5c31\u77e5\u9053\u6267\u884c\u987a\u5e8f\u5566 !! \u4ece\u4e0a\u5230\u4e0b , class\u548cdef\u8bed\u53e5\u90fd\u4f1a\u5148\u6267\u884c , \u4f46\u51fd\u6570\u4f53\u4ee3\u7801\u662f\u6ca1\u6709\u9a6c\u4e0a\u6267\u884c\u7684 .> \u7b2c1 - 5 \u884c\u4ee3\u7801\u662ftype\u7c7b\u7684\u4f2a\u4ee3\u7801 . 1 > \u4ece\u7b2c15\u884c\u4ee3\u7801\u5f00\u59cb\u5206\u6790 . class\u5173\u952e\u5b57\u4f1a\u6536\u96c6\u521b\u5efa\u7c7b\u7684\u4e09\u8981\u7d20 , \u7c7b\u540dPeople \u3001 \u57fa\u7c7b\u4eec ( object ,) \u3001 \u6267\u884c\u7c7b\u4f53\u4ee3\u7801\u5f97\u5230\u7684\u540d\u79f0\u5b57\u5178 . \u6ce8\u610f\u4e00\u70b9 : \u80fd\u6536\u96c6\u5230\u540d\u79f0\u5b57\u5178\u662f\u56e0\u4e3a\u7b2c16\u884c \u3001 \u7b2c19\u884c\u4ee3\u7801\u6267\u884c\u4e86 , \u4f46\u662f\u51fd\u6570\u4f53\u4ee3\u7801\u5e76\u6ca1\u6709\u6267\u884c !! 2 > \u6536\u96c6\u5b8c\u6210\u540e , \u5728\u80cc\u540e\u4f1a\u6267\u884c\u8bed\u53e5 , People = Mymate ( 'People' ,( object ,),{ ... }) Mymate\u5bf9\u8c61\u7684\u8c03\u7528\u4f1a\u89e6\u53d1type\u4e2d__call__\u65b9\u6cd5\u7684\u8fd0\u884c . 3 > \u770b\u7b2c2\u884c\u7684\u4f2a\u4ee3\u7801 , self\u662fMymeta\u5bf9\u8c61 . -- \u56e0\u4e3a\u5bf9\u8c61\u8c03\u7528\u7ed1\u5b9a\u65b9\u6cd5\u4f1a\u81ea\u52a8\u5c06\u81ea\u5df1\u4f20\u9012\u7ed9\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570 . \u521b\u5efa\u7c7b\u7684\u4e09\u8981\u7d20\u4f1a\u88ab * args\u4ee5\u5143\u7956\u5f62\u5f0f\u63a5\u6536 . 4 > \u7b2c3\u884c\u7684\u4f2a\u4ee3\u7801 , \u5f00\u59cb\u5b9e\u4f8b\u5316Mymeta\u5bf9\u8c61 , \u521b\u5efa\u51fa\u4e00\u4e2a\u7a7a\u5bf9\u8c61 .. \u8fd9\u91cc\u6d89\u53ca\u5230__new__\u5c5e\u6027\u7684\u67e5\u627e . Mymeta\u5bf9\u8c61\u4e2d\u6709__new__\u5c5e\u6027 , \u8df3\u8f6c\u5230\u7b2c7\u884c\u4ee3\u7801 . \u8be5\u884c\u4ee3\u7801\u4e2d\u7684self\u4e5f\u662fMymeta\u5bf9\u8c61 . \u6253\u5370\u4e00\u4e0b , \u4f1a\u53d1\u73b0args\u5143\u7ec4\u91cc\u662f\u521b\u5efa\u7c7b\u7684\u4e09\u8981\u7d20 , kwargs\u662f\u7a7a\u5b57\u5178 .. \u7b2c8\u884c\u4ee3\u7801\u4f7f\u7528\u4e86super (), \u6b64\u884c\u4ee3\u7801\u7b49\u4ef7\u4e8e ` return type . __new__ ( self , * args , ** kwargs ) ` \u6ce8\u610f\u4e00\u70b9 \uff01 * args\u76f8\u5f53\u4e8e\u5c06args\u5143\u7956\u8fdb\u884c\u4e86\u62c6\u5305 , \u4ee5\u4f4d\u7f6e\u53c2\u6570\u7684\u5f62\u5f0f\u8fdb\u884c\u4e86\u4f20\u9012 !!! ok , \u5c06\u7a7a\u5bf9\u8c61 return\u56de\u4e86 \u7b2c3\u884c\u7684\u4f2a\u4ee3\u7801 , \u5e76\u8d4b\u503c\u7ed9\u4e86obj\u5bf9\u8c61 . \u5b9e\u5219\u6b64obj\u5c31\u662f People\u5bf9\u8c61 ! 5 > \u6267\u884c\u7b2c4\u884c\u7684\u4f2a\u4ee3\u7801 , \u4e3aPeople\u5bf9\u8c61\u8fdb\u884c\u521d\u59cb\u5316\u64cd\u4f5c , \u540c\u7406 , \u6d89\u53ca__init__\u5c5e\u6027\u7684\u67e5\u627e . \u8df3\u8f6c\u5230\u7b2c9\u884c\u4ee3\u7801 .. \u63a5\u7740\u6267\u884c\u7b2c10\u884c , \u518d\u56de\u5230\u7b2c4\u884c , \u6267\u884c\u7b2c5\u884c\u7684return\u8bed\u53e5 6 > \u5c31\u6b64 , \u7b2c15\u884c\u4ee3\u7801 People = Mymate ( 'People' ,( object ,),{ ... }) \u7684\u8def\u9014\u7ed3\u675f !! 7 > \u7b2c21\u884c\u4ee3\u7801\u7684\u6267\u884c , \u4f1a\u6267\u884c\u7b2c12\u884c\u4ee3\u7801 , \u518d\u6267\u884c\u7b2c20\u884c\u4ee3\u7801 ; \u7b2c13\u884c\u4ee3\u7801\u7684\u6267\u884c\u4f1a\u6267\u884c\u7b2c17\u884c\u4ee3\u7801 . \u6e05\u723d\u7248 class Mymeta ( type ): # -- \u63a7\u5236\u81ea\u5b9a\u4e49\u7c7b\u7684\u521b\u5efa\u8fc7\u7a0b People = Mymeta('People',..,..) def __init__ ( self , class_name , class_bases , class_dic ): super ( Mymeta , self ) . __init__ ( class_name , class_bases , class_dic ) # -- \u63a7\u5236\u81ea\u5b9a\u4e49\u7c7b\u7684\u8c03\u7528 p = People('dc',18) def __call__ ( self , * args , ** kwargs ): obj = self . __new__ ( self ) self . __init__ ( obj , * args , ** kwargs ) return obj class People ( object , metaclass = Mymeta ): def __init__ ( self , name , age ): self . name = name self . age = age \u5c0f\u8bd5\u8eab\u624b \u00b6 1> \u5728\u81ea\u5b9a\u4e49\u5143\u7c7bMymeta\u4e2d\u628a\u81ea\u5b9a\u4e49\u7c7bPeople\u7684\u6570\u636e\u5c5e\u6027\u90fd\u53d8\u6210\u5927\u5199 2> \u5728\u81ea\u5b9a\u4e49\u5143\u7c7bMymeta\u4e2d\u5b8c\u6210People\u5b9e\u4f8b\u5bf9\u8c61p\u72ec\u6709\u5c5e\u6027\u7684\u5b9a\u5236,\u81ea\u5b9a\u4e49\u7c7bPeople\u65e0\u9700\u4f7f\u7528__init__\u65b9\u6cd5 \"\"\" class type: def __call__(self, *args, **kwargs): # print(self) # <class '__main__.Mymeta'> obj = self.__new__(self, *args, **kwargs) # -- \u4ea7\u751fMymeta\u7684\u4e00\u4e2a\u5bf9\u8c61People self.__init__(obj, *args, **kwargs) return obj \"\"\" class Mymeta ( type ): def __new__ ( self , class_name , class_bases , class_dic ): print ( self ) # <class '__main__.Mymeta'> !!!!!! update_dic = {} for k , v in class_dic . items (): if not callable ( v ) and not k . startswith ( \"__\" ): update_dic [ k . upper ()] = v else : update_dic [ k ] = v # -- \u8fd9\u91cc\u662f\u521b\u5efa\u4e00\u4e2aMymeta\u7684\u7a7a\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61People # \u7b49\u540c\u4e8e return type.__new__(self, class_name, class_bases, update_dic) return super ( Mymeta , self ) . __new__ ( self , class_name , class_bases , update_dic ) def __call__ ( self , * args , ** kwargs ): print ( self ) # -- <class '__main__.People'> !!!!!! # -- \u8981\u6c42\u5b9e\u4f8b\u5316\u65f6\u4f20\u53c2\u5fc5\u987b\u4e3a\u5173\u952e\u5b57\u5f62\u5f0f if args : raise TypeError ( \"must use keyword argument for key function!\" ) obj = self . __new__ ( self ) for k , v in kwargs . items (): obj . __dict__ [ k ] = v return obj class People ( object , metaclass = Mymeta ): # -- People = Mymeta(People,..,..) country = \"china\" def __init__ ( self , name , age ): self . name = name self . age = age print ( getattr ( People , 'COUNTRY' )) # china p = People ( name = 'dc' , age = 18 ) print ( p . __dict__ ) # {'name': 'dc', 'age': 18} 3> \u5728\u5143\u7c7bMymeta\u4e2d\u63a7\u5236\u81ea\u5b9a\u4e49\u7684\u7c7bPeople\u4ea7\u751f\u7684\u5bf9\u8c61p\u76f8\u5173\u7684\u72ec\u6709\u5c5e\u6027\u5168\u90e8\u4e3a\u9690\u85cf\u5c5e\u6027 class Mymeta ( type ): def __call__ ( self , * args , ** kwargs ): obj = object . __new__ ( self ) self . __init__ ( obj , * args , ** kwargs ) obj . __dict__ = { f '_ { self . __name__ } __ { k } ' : v for k , v in obj . __dict__ . items ()} return obj class People ( object , metaclass = Mymeta ): def __init__ ( self , name , age ): self . name = name self . age = age p = People ( 'dc' , 18 ) print ( p . __dict__ ) # {'_People__name': 'dc', '_People__age': 18} \u5355\u4f8b\u6a21\u5f0f \u00b6 \u5355\u4f8b\u6a21\u5f0f: \u5373\u5355\u4e2a\u5b9e\u4f8b, \u6307\u7684\u662f\u540c\u4e00\u4e2a\u7c7b\u5b9e\u4f8b\u5316\u591a\u6b21\u7684\u7ed3\u679c\u6307\u5411\u540c\u4e00\u4e2a\u5bf9\u8c61, \u7528\u4e8e\u8282\u7701\u5185\u5b58\u7a7a\u95f4 \u5e94\u7528\u573a\u666f: \u5f53\u5b9e\u4f8b\u5316\u591a\u6b21\u5f97\u5230\u7684\u591a\u4e2a\u5bf9\u8c61\u4e2d\u5b58\u653e\u7684\u5c5e\u6027\u90fd\u4e00\u6837\u65f6, \u5e94\u8be5\u5c06\u591a\u4e2a\u5bf9\u8c61\u6307\u5411\u540c\u4e00\u4e2a\u5185\u5b58, \u5373\u540c\u4e00\u4e2a\u5b9e\u4f8b! settings.py\u914d\u7f6e\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b: IP = \"1.1.1.10\" PORT = 3306 \u82e5\u6211\u4eec\u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u8bfb\u53d6\u914d\u7f6e\u6765\u8fdb\u884c\u5b9e\u4f8b\u5316, \u5728\u914d\u7f6e\u76f8\u540c\u7684\u60c5\u51b5, \u5c31\u6ca1\u5fc5\u8981\u91cd\u590d\u4ea7\u751f\u5bf9\u8c61\u6d6a\u8d39\u5185\u5b58\u5566! \u65b9\u5f0f\u4e8c\u548c\u4e09,\u7ea6\u5b9a\u4e00\u4e2a\u89c4\u5219,Mysql()\u4e0d\u4f20\u53c2\u6570,\u9ed8\u8ba4\u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u8bfb\u53d6\u53c2\u6570!!Hhh. \u65b9\u5f0f\u4e00:\u7c7b\u65b9\u6cd5 \u00b6 import settings class Mysql : __instance = None def __init__ ( self , ip , port ): self . ip = ip self . port = port @classmethod def from_conf ( cls ): if not cls . __instance : cls . __instance = cls ( settings . IP , settings . PORT ) return cls . __instance obj1 = Mysql . from_conf () obj2 = Mysql . from_conf () obj3 = Mysql . from_conf () print ( obj1 is obj2 is obj3 ) # True \u65b9\u5f0f\u4e8c:\u88c5\u9970\u5668 \u00b6 import settings \"\"\" def singleton(cls): _isinstance = None def wrapper(*args, **kwargs): if args or kwargs: return cls(*args, **kwargs) nonlocal _isinstance if not _isinstance: _isinstance = cls(settings.IP, settings.PORT) return _isinstance return wrapper \"\"\" # -- Ps:\u88c5\u9970\u5668\u8fd8\u53ef\u4ee5\u7528\u7c7b\u5b9e\u73b0,\u5177\u4f53\u53c2\u8003\u9762\u5411\u5bf9\u8c61\u9ad8\u7ea7\u90e8\u5206\u4e2d\u5173\u4e8e\u63cf\u8ff0\u7b26\u7684\u77e5\u8bc6\u70b9!! def singleton ( cls ): # -- \u53ef\u4ee5\u653e\u5230\u7c7b\u91cc cls.__isinstance # \u6ce8\u610f:\u51fd\u6570\u4e2d\u7ea6\u5b9a\u4e00\u4e2a\u4e0b\u5212\u7ebf,\u7c7b\u4e2d\u7ea6\u5b9a\u4e24\u4e2a\u4e0b\u5212\u7ebf. _isinstance = cls ( settings . IP , settings . PORT ) def wrapper ( * args , ** kwargs ): if args or kwargs : return cls ( * args , ** kwargs ) # -- cls.__isinstance return _isinstance return wrapper # -- \u88ab\u88c5\u9970\u5bf9\u8c61\u53ef\u4ee5\u662f\u4efb\u610f\u53ef\u88ab\u8c03\u7528\u7684\u5bf9\u8c61 \u7c7b\u662f\u53ef\u4ee5\u8c03\u7528\u7684 @singleton class Mysql : def __init__ ( self , ip , port ): self . ip = ip self . port = port obj1 = Mysql () obj2 = Mysql () obj3 = Mysql () print ( obj1 is obj2 is obj3 ) # True \u65b9\u5f0f\u4e09:\u5143\u7c7b \u00b6 import settings class Mymeta ( type ): # -- \u5b9a\u4e49\u7c7bMysql\u65f6\u89e6\u53d1 def __init__ ( self , class_name , class_bases , class_dic ): # -- self\u4e3aMysql # -- \u5728Mysql\u8c03\u7528\u4e4b\u524d,\u4e8b\u5148\u5148\u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u53d6\u914d\u7f6e\u6765\u9020\u4e00\u4e2aMysql\u7684\u5b9e\u4f8b\u51fa\u6765 self . __instance = object . __new__ ( self ) # -- \u9020\u51fa\u4e00\u4e2aMysql\u7684\u7a7a\u5bf9\u8c61 self . __init__ ( self . __instance , settings . IP , settings . PORT ) # -- \u52a0\u8f7d\u914d\u7f6e\u6587\u4ef6\u521d\u59cb\u5316Mysql\u7684\u7a7a\u5bf9\u8c61 # \u4e0a\u8ff0\u4e24\u6b65\u53ef\u4ee5\u5408\u6210\u4e0b\u9762\u7684\u4efb\u610f\u4e00\u79cd\u5199\u6cd5(\u5373\u4e0a\u65b9\u7684\u4e24\u884c\u4ee3\u7801\u7b49\u6548\u4e8e\u4e0b\u65b9\u7684\u4e24\u884c\u4ee3\u7801\u4e2d\u7684\u4efb\u610f\u4e00\u6761) # \u5efa\u8bae\u4e0d\u5408\u6210 \u96be\u5f97\u7406\u89e3 \u2014_-\"\" \u6b64__call__\u662ftype\u4e2d\u7684, \u770b\u524d\u9762\u7684\u00b7\u6a21\u7248\u5206\u6790\u00b7\u5c31\u6653\u5f97\u548b\u4e2a\u56de\u4e8b\u4e86. # self.__instance = super().__call__(settings.IP, settings.PORT) # self.__instance = type.__call__(self, settings.IP, settings.PORT) # -- \u6b64\u884c\u6a21\u7248\u4ee3\u7801\u653e\u5230\u6b64\u51fd\u6570\u7684\u54ea\u4e2a\u4f4d\u7f6e\u90fd\u53ef\u4ee5.. # \u56e0\u4e3atype\u4e2d\u7684__call__\u65b9\u6cd5\u91cc\u7684__new__\u6b65\u9aa4\u5df2\u7ecf\u521b\u5efa\u597d\u4e86Mymeta\u7684\u7a7a\u5bf9\u8c61. super ( Mymeta , self ) . __init__ ( class_name , class_bases , class_dic ) # -- Mysql\u8c03\u7528\u65f6\u89e6\u53d1 def __call__ ( self , * args , ** kwargs ): # -- self\u4e3aMysql if args or kwargs : obj = self . __new__ ( self ) self . __init__ ( obj , * args , ** kwargs ) return obj return self . __instance class Mysql ( object , metaclass = Mymeta ): def __init__ ( self , ip , port ): self . ip = ip self . port = port # -- \u6ca1\u6709\u4f20\u503c\u5219\u9ed8\u8ba4\u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u8bfb\u914d\u7f6e\u6765\u5b9e\u4f8b\u5316,\u6240\u6709\u7684\u5b9e\u4f8b\u5e94\u8be5\u6307\u5411\u4e00\u4e2a\u5185\u5b58\u5730\u5740 obj1 = Mysql () obj2 = Mysql () obj3 = Mysql () print ( obj1 is obj2 is obj3 ) # True obj4 = Mysql ( '127.0.0.1' , 8000 ) print ( obj1 is obj4 ) # False \u8865\u5145 \u00b6 class MyType ( type ): def __init__ ( self , * args , ** kwargs ): print ( \"2\" ) super () . __init__ ( * args , ** kwargs ) def __new__ ( cls , * args , ** kwargs ): print ( \"1\" ) new_cls = super () . __new__ ( cls , * args , ** kwargs ) # \u521b\u5efa\u7c7b print ( new_cls ) # <class '__main__.Foo'> return new_cls class Foo ( object , metaclass = MyType ): # \u4e5f\u9075\u5faa,\u5148\u6267\u884cnew\u518d\u6267\u884cinit pass # \u7c7b\u521b\u5efa\u5bf9\u8c61\u5148\u6267\u884c\u7c7b\u4e2d\u7684new\u518d\u6267\u884cinit,\u5bf9\u8c61\u52a0\u62ec\u53f7\u4f1a\u6267\u884c\u7c7b\u4e2d\u7684call\u65b9\u6cd5 # \u521b\u5efa\u7c7b\u7684\"\u4e1c\u897f\"\u5728\u521b\u5efa\u7c7b\u65f6\u4e5f\u4f1a\u5148\u6267\u884c\"\u4e1c\u897f\"\u91cc\u7684new\u518d\u6267\u884cinit,\u7c7b\u52a0\u62ec\u53f7\u4f1a\u6267\u884c\"\u4e1c\u897f\"\u91cc\u7684call\u65b9\u6cd5 # \u610f\u5473\u7740 \u7c7b\u52a0\u62ec\u53f7\u4f1a\u6267\u884c \"\u4e1c\u897f\" \u91cc\u7684call\u65b9\u6cd5?? # \u5148new\u540einit\u662f\u56e0\u4e3acall\u91cc\u5b9a\u4e49\u4e86\u7684 \u6839\u636e\u7c7b\u521b\u5efa\u5bf9\u8c61 1 > \u5148\u6267\u884c__new__\u65b9\u6cd5 , \u521b\u5efa\u7a7a\u5bf9\u8c61 ; ==> \u6784\u9020\u65b9\u6cd5 2 > \u6267\u884c\u7c7b\u7684__init__\u65b9\u6cd5 , \u521d\u59cb\u5316\u5bf9\u8c61 ; ==> \u521d\u59cb\u5316\u65b9\u6cd5 Q : \u5bf9\u8c61\u662f\u57fa\u4e8e\u7c7b\u521b\u5efa\u7684 . \u90a3\u4e48\u7c7b\u662f\u7531\u8c01\u521b\u5efa\u7684 ? A : \u7c7b\u9ed8\u8ba4\u662f\u7531type\u521b\u5efa\u7684 !! class Foo ( object ): v1 = 123 def func ( self ): return 666 \u7b49\u540c\u4e8e Foo = type ( \"Foo\" ,( object ,),{ \"v1\" : 123 , \"func\" : lambda self : 666 }) # \u7c7b\u540d\u3001\u7ee7\u627f\u7c7b\u3001\u6210\u5458 type\u4e5f\u662f\u4e00\u4e2a\u7ee7\u627f\u4e86object\u7684\u7c7b , type\u62ec\u53f7\u540e\u9762\u7684\u4e09\u4e2a\u53c2\u6570\u662finit\u7684\u53c2\u6570 ??? --- \u7c7b\u9ed8\u8ba4\u662f\u7531type\u521b\u5efa\u7684 , \u90a3\u5982\u4f55\u8ba9\u4e00\u4e2a\u7c7b\u7684\u521b\u5efa\u6539\u6210\u5176\u4ed6\u4e1c\u897f\u5462 ? \u5143\u7c7b !! \u5143\u7c7b , \u6307\u5b9a\u7c7b\u7531\u8c01\u6765\u521b\u5efa !! \u901a\u8fc7metaclass =.. \u6765\u6307\u5b9a !","title":"\u5143\u7c7b"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7_%E5%85%83%E7%B1%BB/#_1","text":"\u5728python\u4e2d\u4e00\u5207\u7686\u5bf9\u8c61,\u5219\u6211\u4eec\u7528class\u5173\u952e\u5b57\u5b9a\u4e49\u7684\u7c7b\u672c\u8eab\u4e5f\u662f\u4e00\u4e2a\u5bf9\u8c61. \u8d1f\u8d23\u4ea7\u751f\u8be5\u5bf9\u8c61\u7684\u7c7b\u79f0\u4e4b\u4e3a\u5143\u7c7b, \u5373 \u5143\u7c7b\u662f\u6211\u4eec\u81ea\u5b9a\u4e49\u7c7b\u7684\u7c7b . \u6362\u4e2a\u8bf4\u6cd5, \u6211\u4eec\u7528class\u5b9a\u4e49\u7684\u7c7b\u672c\u8d28\u5c31\u662f\u5728\u5b9e\u4f8b\u5316\u5143\u7c7b. \u5143\u7c7b\u662f\u8d1f\u8d23\u4ea7\u751f\u7c7b\u7684,\u6211\u4eec\u5b66\u4e60\u5143\u7c7b/\u81ea\u5b9a\u4e49\u5143\u7c7b\u7684 \u76ee\u7684 \u5728\u4e8e: 1> \u63a7\u5236class\u5b9a\u4e49\u7c7b\u7684\u8fc7\u7a0b; 2> \u63a7\u5236 \u8c03\u7528\u7c7b(\u8be5\u7c7b\u662fclass\u5b9a\u4e49\u7684)\u4ea7\u751f\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684\u8fc7\u7a0b. \u5143\u7c7b\u91cc\u7684 __init__ \u63a7\u5236\u5143\u7c7b\u4ea7\u751f\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61 (\u5373\u7c7b) \u521d\u59cb\u5316\u7684\u8fc7\u7a0b ; \u5143\u7c7b\u91cc\u7684 __call__ \u63a7\u5236\u5b9e\u4f8b\u5316\u5bf9\u8c61\"\u5b9e\u4f8b\u5316/\u8c03\u7528\"\u4ea7\u751f\u5b9e\u4f8b\u7684\u8fc7\u7a0b.","title":"\u5143\u7c7b\u4ecb\u7ecd"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7_%E5%85%83%E7%B1%BB/#_2","text":"\u5927\u524d\u63d0: Python\u4e00\u5207\u7686\u5bf9\u8c61,\u90a3\u4e48\u7c7b\u4e5f\u662f\u4e00\u4e2a\u5bf9\u8c61.\u5219\u7528class\u5173\u952e\u5b57\u53bb\u521b\u5efa\u7c7b\u7684\u8fc7\u7a0b\u4e5f\u662f\u4e00\u4e2a\u5b9e\u4f8b\u5316\u7684\u8fc7\u7a0b; \u8be5\u5b9e\u4f8b\u5316\u7684\u8fc7\u7a0b\u662f\u4e3a\u4e86\u5f97\u5230\u4e00\u4e2a\u7c7b,\u8c03\u7528\u7684\u662f\u5143\u7c7b.. 1> \u9ed8\u8ba4\u7684\u5143\u7c7btype; 2> \u81ea\u5b9a\u4e49\u7684\u5143\u7c7b.","title":"\u521b\u5efa\u7c7b\u7684\u4e24\u79cd\u65b9\u5f0f"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7_%E5%85%83%E7%B1%BB/#type","text":"\u5373\u7528\u5173\u952e\u5b57class \u8fdb\u884c\u521b\u5efa. # -- \u65b9\u5f0f\u4e00: \u7528\u7684\u9ed8\u8ba4\u7684\u5143\u7c7btype class People : # -- People = type('People',..,..) country = \"China\" def __init__ ( self , name , age ): self . name = name self . age = age def eat ( self ): print ( \" %s is eating.\" % self . name ) obj = People ( 'dc' , 22 ) print ( type ( obj )) # <class '__main__.People'> -- obj\u5bf9\u8c61\u662f\u901a\u8fc7People\u7c7b\u5b9e\u4f8b\u5316\u5f97\u5230\u7684!! print ( type ( People )) # <class 'type'> -- \u6240\u6709\u7528class\u5173\u952e\u5b57\u521b\u5efa\u7684\u7c7b\u90fd\u9ed8\u8ba4\u662ftype\u7c7b\u5b9e\u4f8b\u5316\u5f97\u5230\u7684!! print ( obj ) # <__main__.People object at 0x7f91cde7eac0> print ( People ) # <class '__main__.People'>","title":"\u7528\u9ed8\u8ba4\u5143\u7c7btype"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7_%E5%85%83%E7%B1%BB/#exec","text":"exec(object[, globals[, locals]]) : \u53c2\u6570\u4e00: \u5305\u542b\u4e00\u7cfb\u5217python\u4ee3\u7801\u7684 \u5b57\u7b26\u4e32 \u53c2\u6570\u4e8c: \u5168\u5c40\u4f5c\u7528\u57df(\u5b57\u5178\u5f62\u5f0f), \u5982\u679c\u4e0d\u6307\u5b9a, \u9ed8\u8ba4\u4e3aglobals() \u53c2\u6570\u4e09: \u5c40\u90e8\u4f5c\u7528\u57df(\u5b57\u5178\u5f62\u5f0f), \u5982\u679c\u4e0d\u6307\u5b9a, \u9ed8\u8ba4\u4e3alocals() \u53ef\u4ee5\u628aexec\u547d\u4ee4\u7684\u6267\u884c\u5f53\u6210\u662f\u4e00\u4e2a\u51fd\u6570\u7684\u6267\u884c,\u4f1a\u5c06\u6267\u884c\u671f\u95f4\u4ea7\u751f\u7684\u540d\u5b57\u5b58\u653e\u4e8e\u5c40\u90e8\u540d\u79f0\u7a7a\u95f4\u4e2d. g_dic = { 'x' : 1 , 'y' : 2 } l_dic = { 'm' : 3 , 'n' : 4 , 'x' : 5 , 'y' : 6 } x , y , m , n = 10 , 20 , 30 , 40 exec ( ''' global x,z x=100 z=200 m=300 print(m,n,x,y) # 300 4 100 6 # -- x\u7684\u503c\u4e3a100,\u800c\u4e0d\u662fl_dic\u4e2d\u76845,\u662f\u56e0\u4e3aglobal\u5173\u952e\u5b57 # \u5b83\u5df2\u7ecf\u544a\u8bc9python\u89e3\u91ca\u5668,\u51fd\u6570\u91cc\u4f46\u51e1\u5bf9x\u53d8\u91cf\u7684\u5f15\u7528,\u90fd\u4f1a\u89e3\u6790\u6210\u5168\u5c40\u53d8\u91cf.. # \u5b83\u8fd8\u4f7f\u5f97\u5bf9x\u53d8\u91cf\u7684\u8d4b\u503c\u4e5f\u662f\u5728\u5bf9\u5168\u5c40\u53d8\u91cf\u8fdb\u884c\u64cd\u4f5c ''' , g_dic , l_dic ) print ( g_dic ) # {'x': 100, 'y': 2,'z':200,...} print ( l_dic ) # {'m': 300, 'n': 4, 'x': 5, 'y': 6} -- \u53ef\u4ee5\u770b\u5230m\u53d8\u91cf\u7684\u503c\u88ab\u8986\u76d6\u4e86 # --- --- --- cmd = \"\"\" x = 1 y = 2 print('>>>>:') \"\"\" local_dic = {} exec ( cmd , {}, local_dic ) print ( local_dic ) # -- \u5c06\u6267\u884c\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u540d\u5b57\u90fd\u4e22\u5230local_dic\u91cc\u9762\u53bb\u5566\uff01 \"\"\"\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b: >>>>: {'x': 1, 'y': 2} \"\"\" # --- --- --- \u6a21\u62df\u7c7b\u5b9a\u4e49\u9636\u6bb5,\u5f00\u8f9f\u547d\u540d\u7a7a\u95f4,\u5c06\u7c7b\u4f53\u6267\u884c\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u540d\u5b57\u653e\u5230\u547d\u540d\u7a7a\u95f4\u91cc\u7684\u8fc7\u7a0b. class Foo : x = 1 def fun ( self ): pass cmd = \"\"\" x = 1 def fun(self):pass \"\"\" class_dic = {} # -- \u5b9a\u4e49\u7c7b\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4 exec ( cmd , {}, class_dic ) print ( class_dic ) # {'x': 1, 'fun': <function fun at 0x7fcfdfe799d0>}","title":"\u5185\u7f6e\u51fd\u6570exec"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7_%E5%85%83%E7%B1%BB/#_3","text":"\u521b\u5efa\u7c7b\u76843\u4e2a\u8981\u7d20: \u7c7b\u540d\u3001\u57fa\u7c7b\u3001\u7c7b\u7684\u540d\u79f0\u7a7a\u95f4. class_name = 'People' class_bases = ( object , ) class_dic = {} class_body = \"\"\" country = \"China\" def __init__(self, name, age): self.name = name self.age = age def eat(self): print(\" %s is eating.\" % s elf.name) \"\"\" exec ( class_body , {}, class_dic ) # -- \u51c6\u5907\u597d\u521b\u5efa\u7c7b\u7684\u4e09\u4e2a\u8981\u7d20 print ( class_name ) # People print ( class_bases ) # (<class 'object'>,) # { # 'country': 'China', # '__init__': <function __init__ at 0x7fb7b45799d0>, # 'eat': <function eat at 0x7fb7b4579940> # } print ( class_dic ) # -- type(\u7c7b\u540d,\u57fa\u7c7b,\u7c7b\u7684\u540d\u79f0\u7a7a\u95f4) # Ps:\u4e00\u822c\u4f1a\u5c06type\u8d4b\u503c\u7ed9\u7684\u53d8\u91cf\u7684\u540d\u5b57,\u547d\u540d\u7684\u8ddfclass_name\u4e00\u6837 Peo = type ( class_name , class_bases , class_dic ) print ( Peo ) # <class '__main__.People'>","title":"\u521b\u5efa\u7c7b\u7684\u4e09\u8981\u7d20"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7_%E5%85%83%E7%B1%BB/#_4","text":"","title":"\u81ea\u5b9a\u4e49\u7684\u5143\u7c7b"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7_%E5%85%83%E7%B1%BB/#class","text":"\u5728\u7528\u9ed8\u8ba4\u5143\u7c7btype\u521b\u5efa\u7c7b\u7684\u65b9\u5f0f\u4e2d, \u6211\u4eec\u53ef\u4ee5\u5206\u6790\u51fa class\u7684\u8fd0\u884c\u539f\u7406: (\u800c\u975e\u5143\u7c7b\u7684\u8fd0\u884c\u539f\u7406) 1> \u62ff\u5230\u4e00\u4e2a\u5b57\u7b26\u4e32\u683c\u5f0f\u7684\u7c7b\u540d class_name = \"People\" 2> \u62ff\u5230\u4e00\u4e2a\u7c7b\u7684\u57fa\u7c7b\u4eec class_bases = (object, ) 3> \u6267\u884c\u7c7b\u4f53\u4ee3\u7801, \u62ff\u5230\u4e00\u4e2a\u7c7b\u7684\u540d\u79f0\u7a7a\u95f4 class_dic = {...} 4> \u8c03\u7528 People = type(class_name, class_bases, class_dic) class\u5173\u952e\u5b57\u662f\u4e0a\u8ff0\u56db\u4e2a\u6b65\u9aa4\u7684\u5c01\u88c5. class Mymeta ( type ): # -- \u53ea\u6709\u7ee7\u627f\u4e86type\u7c7b\u624d\u80fd\u79f0\u4e4b\u4e3a\u4e00\u4e2a\u5143\u7c7b,\u5426\u5219\u5c31\u662f\u4e00\u4e2a\u666e\u901a\u7684\u81ea\u5b9a\u4e49\u7c7b def __init__ ( self , class_name , class_bases , class_dic ): print ( self ) # <class '__main__.People'> \u6ce8\u610f\u54e6,Mymeta\u5b9e\u4f8b\u5316\u51fa\u7684\u662f\u4e00\u4e2a\u7c7b print ( class_name ) # People print ( class_bases ) # (<class 'object'>,) # { # '__module__': '__main__', # '__qualname__': 'People', # 'country': 'China', # '__init__': <function People.__init__ at 0x7f9ce3555700>, # 'eat': <function People.eat at 0x7f9ce3555a60> # } print ( class_dic ) # (<class '__main__.Mymeta'>, <class 'type'>, <class 'object'>) print ( Mymeta . __mro__ ) # -- People = Mymeta(...) self\u662fPeople,\u5176\u6240\u5728\u7c7b\u662fMymeta,\u770bMymeta\u7c7b\u7684mro\u94fe # super()\u4f1a\u5f97\u5230\u4e00\u4e2a\u7279\u6b8a\u5bf9\u8c61,\u6b64\u5904\u662f\u7ed1\u5b9a\u65b9\u6cd5,\u6240\u4ee5\u4e0d\u7528\u5199self. super ( Mymeta , self ) . __init__ ( class_name , class_bases , class_dic ) # -- \u91cd\u7528\u7236\u7c7b\u529f\u80fd # -- People\u9ed8\u8ba4\u7ee7\u627fobject\u7c7b,metaclass\u9ed8\u8ba4\u503c\u4e3atype. # class\u7684\u8fd0\u884c\u539f\u7406\u7b2c4\u6b65\u662f\u7528type\u5b9e\u4f8b\u5316\u51faPeople\u5bf9\u8c61. # \u5728\u8fd9\u91cc,\u6211\u4eec\u4e0d\u4f7f\u7528type,\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684\u5143\u7c7bMymeta\u5b9e\u4f8b\u5316\u51faPeople\u5bf9\u8c61. # People = Mymeta(\u7c7b\u540d,\u57fa\u7c7b\u4eec,\u7c7b\u7684\u540d\u79f0\u7a7a\u95f4) # \u8c03\u7528Mymeta\u7c7b\u521b\u5efa\u4e86\u4e00\u4e2a\u7a7a\u5bf9\u8c61'\u5373\u7a7a\u7684\u540d\u79f0\u7a7a\u95f4{}'\u540e; # \u7a7a\u5bf9\u8c61People\u4f1a\u8fde\u540cMymeta\u62ec\u53f7\u5185\u7684\u53c2\u6570\u4e00\u8d77\u4f20\u7ed9Mymeta\u4e0b\u7684__init__\u65b9\u6cd5,\u5b8c\u6210\u521d\u59cb\u5316 class People ( object , metaclass = Mymeta ): country = \"China\" def __init__ ( self , name , age ): self . name = name self . age = age def eat ( self ): print ( \" %s is eating.\" % self . name )","title":"class\u521b\u5efa\u7c7b\u7684\u6d41\u7a0b"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7_%E5%85%83%E7%B1%BB/#_5","text":"# -- \u5e94\u7528:\u81ea\u5b9a\u4e49\u5143\u7c7b\u63a7\u5236\u7c7b\u7684\u4ea7\u751f\u8fc7\u7a0b,\u7c7b\u7684\u4ea7\u751f\u8fc7\u7a0b\u5176\u5b9e\u5c31\u662f\u5143\u7c7b\u7684\u8c03\u7528\u8fc7\u7a0b class Mymeta ( type ): def __init__ ( self , class_name , class_bases , class_dic ): temp = class_dic . get ( \"__doc__\" ) # -- or\u5de6\u4fa7\u6761\u4ef6\u6210\u7acb\u7684\u8bdd,or\u53f3\u4fa7\u5c31\u4e0d\u4f1a\u6267\u884c\u5566!!\u4e5f\u5c31\u4fdd\u8bc1or\u53f3\u4fa7\u6267\u884c\u65f6,temp\u4e00\u5b9a\u4e0d\u4e3aNone. if temp is None or len ( temp . strip ()) == 0 : raise TypeError ( \"\u7c7b\u4e2d\u5fc5\u987b\u6709\u6587\u6863\u6ce8\u91ca,\u5e76\u4e14\u4e0d\u4e3a\u7a7a.\" ) if not class_name . istitle (): raise TypeError ( \"\u7c7b\u540d\u9996\u5b57\u6bcd\u5fc5\u987b\u5927\u5199.\" ) super ( Mymeta , self ) . __init__ ( class_name , class_bases , class_dic ) class People ( object , metaclass = Mymeta ): \"\"\"\u8fd9\u662f\u4e00\u4e2aPeople\u7c7b!\"\"\" country = \"China\" def __init__ ( self , name , age ): self . name = name self . age = age def eat ( self ): print ( \" %s is eating.\" % self . name ) print ( getattr ( People , \"__doc__\" , None ))","title":"\u6dfb\u52a0\u4e00\u4e9b\u5224\u65ad"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7_%E5%85%83%E7%B1%BB/#_6","text":"\u81ea\u5b9a\u4e49\u5143\u7c7b\u6765\u63a7\u5236\u7c7b\u7684\u8c03\u7528\u8fc7\u7a0b, \u5373\u7c7b\u7684\u5b9e\u4f8b\u5316\u8fc7\u7a0b","title":"\u81ea\u5b9a\u4e49\u7c7b\u7684\u5b9e\u4f8b\u5316"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7_%E5%85%83%E7%B1%BB/#__call__","text":"","title":"__call__"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7_%E5%85%83%E7%B1%BB/#_7","text":"class Foo : def __call__ ( self , * args , ** kwargs ): print ( self ) # <__main__.Foo object at 0x7fa1f868cac0> print ( args ) # (1, 2, 3) print ( kwargs ) # {'x': 4, 'y': 5} return \"\u8fd4\u56de\u503c123\" obj = Foo () # -- \u8981\u60f3\u8ba9obj\u8fd9\u4e2a\u5b9e\u4f8b\u5316\u5bf9\u8c61\u53d8\u6210\u4e00\u4e2a\u53ef\u8c03\u7528\u7684\u5bf9\u8c61,\u9700\u8981\u5728\u8be5\u5bf9\u8c61\u7684\u7c7b\u4e2d\u5b9a\u4e49\u4e00\u4e2a__call__\u65b9\u6cd5 # \u8be5\u65b9\u6cd5\u4f1a\u5728\u8c03\u7528\u5b9e\u4f8b\u5316\u5bf9\u8c61obj\u65f6\u81ea\u52a8\u89e6\u53d1,\u8c03\u7528obj\u7684\u8fd4\u56de\u503c\u5c31\u662f__call__\u65b9\u6cd5\u7684\u8fd4\u56de\u503c print ( obj ( 1 , 2 , 3 , x = 4 , y = 5 )) # \u8fd4\u56de\u503c123 -- obj\u7684\u8c03\u7528\u4f1a\u89e6\u53d1Foo\u4e2d__call__\u65b9\u6cd5\u7684\u6267\u884c \u7531\u6b64\u5f97\u77e5, \u8c03\u7528\u4e00\u4e2a\u5bf9\u8c61, \u5c31\u662f\u89e6\u53d1\u5bf9\u8c61\u6240\u5728\u7c7b\u4e2d\u7684__call__\u65b9\u6cd5\u7684\u6267\u884c! Python\u5904\u5904\u7686\u5bf9\u8c61, People\u4e5f\u662f\u4e00\u4e2a\u5bf9\u8c61, \u5e76\u4e14People\u5b83\u662f\u53ef\u4ee5\u8c03\u7528\u7684! \u90a3\u4e48\u5728\u5b9e\u4f8b\u5316\u5f97\u5230People\u5bf9\u8c61\u7684Mymeta\u7c7b\u4e2d\u4e5f\u5fc5\u7136\u5b58\u5728\u4e00\u4e2a__call__\u65b9\u6cd5!!!","title":"\u539f\u7406"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7_%E5%85%83%E7%B1%BB/#__call___1","text":"Mymeta ---(\u5b9e\u4f8b\u5316)--- People ---(\u5b9e\u4f8b\u5316)--- obj People\u5b9e\u4f8b\u5316\u5f97\u5230obj\u4f1a\u5bf9People\u8fdb\u884c\u8c03\u7528,\u5219Mymeta\u4e2d\u4e00\u5b9a\u4f1a\u6709__call__\u65b9\u6cd5. # -- \u5e94\u7528:\u81ea\u5b9a\u4e49\u5143\u7c7b\u63a7\u5236\u7c7b\u7684\u4ea7\u751f\u8fc7\u7a0b,\u7c7b\u7684\u4ea7\u751f\u8fc7\u7a0b\u5176\u5b9e\u5c31\u662f\u5143\u7c7b\u7684\u8c03\u7528\u8fc7\u7a0b class Mymeta ( type ): def __call__ ( self , * args , ** kwargs ): print ( self ) # <class '__main__.People'> print ( args ) # ('dc',) print ( kwargs ) # {'age': 18} class People ( object , metaclass = Mymeta ): country = \"China\" def __init__ ( self , name , age ): self . name = name self . age = age def eat ( self ): print ( \" %s is eating.\" % self . name ) # -- \u8c03\u7528People\u5c31\u662f\u5728\u8c03\u7528Mymeta\u7c7b\u4e2d\u7684__call__\u65b9\u6cd5 # \u7136\u540e\u5c06People\u4f20\u7ed9self,\u6ea2\u51fa\u7684\u4f4d\u7f6e\u53c2\u6570\u4f20\u7ed9*,\u6ea2\u51fa\u7684\u5173\u952e\u5b57\u53c2\u6570\u4f20\u7ed9** # \u8c03\u7528People\u7684\u8fd4\u56de\u503c\u5c31\u662f\u8c03\u7528__call__\u7684\u8fd4\u56de\u503c obj = People ( 'dc' , age = 18 ) print ( obj ) # None \u56de\u987e\u4e00\u4e0b,\u629b\u5f00\u5143\u7c7b\u7684\u77e5\u8bc6\u4e0d\u8c08, \u5c31\u5355\u7eaf\u7684People('dc', 18)\u5f97\u5230\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61obj, \u8fd9\u4e00\u8fc7\u7a0b\u7ecf\u5386\u4e86\u4ec0\u4e48\uff1f step1: \u8c03\u7528\u7c7b\u521b\u5efa\u4e86\u4e00\u4e2a\u7a7a\u5bf9\u8c61 '\u7a7a\u7684\u540d\u79f0\u7a7a\u95f4' {} step2: \u81ea\u52a8\u89e6\u53d1\u7c7b\u4e2d__init__\u529f\u80fd\u7684\u6267\u884c, \u5c06\u7a7a\u5bf9\u8c61\u4f20\u7ed9self\u53c2\u6570","title":"\u5143\u7c7b\u4e2d\u7684__call__"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7_%E5%85%83%E7%B1%BB/#_8","text":"\u90a3\u4e48,\u81ea\u5b9a\u4e49\u7684\u5143\u7c7bMymeta\u5728__call__\u65b9\u6cd5\u4e2d\u4e00\u5b9a\u4f1a\u5b9e\u73b0\u8fd9\u4e09\u4ef6\u4e8b: 1> \u4ea7\u751f\u4e00\u4e2aPeople\u7684\u7a7a\u5bf9\u8c61obj 2> \u8c03\u7528__init__\u65b9\u6cd5\u521d\u59cb\u5316\u5bf9\u8c61obj 3> \u8fd4\u56de\u521d\u59cb\u5316\u597d\u7684obj \u63a5\u4e0b\u6765,\u6211\u4eec\u5c06\u9ed8\u8ba4\u5143\u7c7btype\u5e72\u7684\u4e8b\u60c5\u8fdb\u884c\u8fd8\u539f. # -- \u5e94\u7528:\u81ea\u5b9a\u4e49\u5143\u7c7b\u63a7\u5236\u7c7b\u7684\u4ea7\u751f\u8fc7\u7a0b,\u7c7b\u7684\u4ea7\u751f\u8fc7\u7a0b\u5176\u5b9e\u5c31\u662f\u5143\u7c7b\u7684\u8c03\u7528\u8fc7\u7a0b class Mymeta ( type ): def __call__ ( self , * args , ** kwargs ): # -- !!!\u5fc5\u987b\u5199self\u53c2\u6570,\u4ee3\u8868\u521b\u5efa\u7684\u662f\u8be5self\u7684\u7a7a\u5bf9\u8c61 \u56fa\u5b9a\u7528\u6cd5!! # \u6b64\u5904\u662fself\u6307\u4ee3\u7684\u662f\u7c7bPeople # \u8981\u627e__new__\u8fd9\u4e2a\u5c5e\u6027,\u82e5People\u7684namespace\u4e2d\u6ca1\u6709,\u4f9d\u6b21\u518d\u53bbobject\u3001Mymeta\u3001type\u4e2d\u627e obj = self . __new__ ( self ) # -- \u30101\u3011.\u901a\u8fc7__new__\u65b9\u6cd5\u5148\u9020\u4e00\u4e2aPeople\u7684\u7a7a\u5bf9\u8c61 # -- \u8fd9\u91cc\u4e5f\u6d89\u53ca\u5230\u5c5e\u6027\u67e5\u627e,\u8be5self(\u5373People)\u4e2d\u6709__init__\u65b9\u6cd5,\u5c31\u76f4\u63a5\u4f7f\u7528\u5b83 # \u629b\u5f00\u5143\u7c7b\u4e0d\u8c08,\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u81ea\u52a8\u8c03\u7528__init__\u7ed1\u5b9a\u65b9\u6cd5\u65f6,\u4e0d\u7528\u4f20self.. \u5c31\u662f\u56e0\u4e3a\u5728\u8fd9\u91cc\u5e2e\u5fd9\u4f20\u5566 self . __init__ ( obj , * args , ** kwargs ) # -- \u30102\u3011.\u8c03\u7528__init__\u4e3a\u8be5\u7a7a\u5bf9\u8c61\u521d\u59cb\u5316\u72ec\u6709\u7684\u5c5e\u6027 return obj # -- \u30103\u3011.\u8fd4\u56de\u4e00\u4e2a\u521d\u59cb\u5316\u597d\u7684\u5bf9\u8c61obj # -- People = Mymeta(People,...,...) \u662f\u5728\u521b\u5efa\u7c7b,\u4e3b\u8981\u64cd\u4f5c\u7684\u662fMymeta\u4e2d\u7684__init__ # -- People()\u662f\u5728\u8c03\u7528Mymeta\u4e2d\u7684__call__\u521b\u5efa\u5b9e\u4f8b\u5316\u5bf9\u8c61 class People ( object , metaclass = Mymeta ): country = \"China\" def __init__ ( self , name , age ): self . name = name self . age = age def eat ( self ): print ( \" %s is eating.\" % self . name ) def __new__ ( cls , * args , ** kwargs ): # print(cls) # <class '__main__.People'> # cls.__new__(cls) # -- \u76f4\u63a5\u62a5\u9519,\u9012\u5f52\u6b7b\u5faa\u73af # print(cls.__mro__) # -- (<class '__main__.People'>, <class 'object'>) obj = super () . __new__ ( cls ) # -- \u5b8c\u6574\u5199\u6cd5\u4e3a: super(People,cls) return obj obj = People ( 'dc' , age = 18 ) print ( obj . __dict__ ) # {'name': 'dc', 'age': 18} obj . eat () # dc is eating.","title":"\u8c03\u7528\u5143\u7c7b\u4ea7\u751f\u7684\u7c7b"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7_%E5%85%83%E7%B1%BB/#_9","text":"\u7ed3\u5408 python\u7ee7\u627f\u7684\u5b9e\u73b0\u539f\u7406+\u5143\u7c7b \u91cd\u65b0\u770b\u5c5e\u6027\u7684\u67e5\u627e\u5e94\u8be5\u662f\u4ec0\u4e48\u6837\u5b50\u5462??? \u5728\u5b66\u4e60\u5b8c\u5143\u7c7b\u540e, \u66f4\u8fdb\u4e00\u6b65\u7406\u89e3\u4e86\"python\u5904\u5904\u7686\u5bf9\u8c61\",\u63d0\u4e00\u70b9,\u7528class\u81ea\u5b9a\u4e49\u7684\u7c7b\u5168\u90fd\u662f\u5bf9\u8c61 \u5305\u62ecobject\u7c7b\u672c\u8eab\u4e5f\u662f\u5143\u7c7btype\u7684 \u4e00\u4e2a\u5b9e\u4f8b,\u53ef\u4ee5\u7528 type(object) \u9a8c\u8bc1. \u7ee7\u627f\u7684\u5b9e\u73b0\u539f\u7406 + \u5c06\u7c7b\u5f53\u6210\u5bf9\u8c61.\u4e0b\u8ff0\u7ee7\u627f\u5e94\u8be5\u8bf4\u6210\u662f: \u5bf9\u8c61StanfordTeacher\u7ee7\u627f\u5bf9\u8c61Foo, \u5bf9\u8c61Foo\u7ee7\u627f\u5bf9\u8c61Bar, \u5bf9\u8c61Bar\u7ee7\u627f\u5bf9\u8c61object \u4e8e\u662f\u5c5e\u6027\u67e5\u627e\u5e94\u8be5\u5206\u6210 \u4e24\u5c42 : \u4e00\u5c42\u662f\u5bf9\u8c61\u5c42 (\u57fa\u4e8ec3\u7b97\u6cd5\u7684MRO) \u7684\u67e5\u627e, \u53e6\u5916\u4e00\u4e2a\u5c42\u5219\u662f\u7c7b\u5c42(\u5373\u5143\u7c7b\u5c42)\u7684\u67e5\u627e!! Ps: \u82e5StanfordTeacher\u5b9e\u4f8b\u5316\u51faobj\u5bf9\u8c61,obj\u901a\u8fc7 . \u8fdb\u884c\u5c5e\u6027\u5f15\u7528\u65f6,\u4f1a\u5148\u5728\u81ea\u5df1\u7684namespace\u4e2d\u67e5\u627e\u72ec\u6709\u5c5e\u6027. class Mymeta ( type ): n = 520 def __call__ ( self , * args , ** kwargs ): # print(self) # <class '__main__.StanfordTeacher'> # -- __new__\u7684\u67e5\u627e\u987a\u5e8f\u4e3aStanfordTeacher->Foo->Bar->object->Mymeta->type obj = self . __new__ ( self ) # print(self.__new__ is object.__new__) # True # -- !!\u4e0b\u65b9\u8fd9\u6761\u6ce8\u91ca\u7684\u8bed\u53e5,\u4e5f\u53ef\u4ee5\u521b\u5efa\u7a7a\u5bf9\u8c61,\u4f46\u4f1a\u76f4\u63a5\u8df3\u8fc7StanfordTeacher->Foo->Bar\u8fd9\u4e09\u4e2a\u7c7b\u7684\u68c0\u7d22 # obj = object.__new__(self) self . __init__ ( obj , * args , ** kwargs ) return obj class Bar ( object ): n = 333 class Foo ( Bar ): n = 222 class StanfordTeacher ( Foo , metaclass = Mymeta ): n = 111 school = 'Stanford' def __init__ ( self , name , age ): self . name = name self . age = age def say ( self ): print ( ' %s says welcome to the Stanford to learn Python' % self . name ) # -- n\u7684\u67e5\u627e\u987a\u5e8f\u4e3aStanfordTeacher->Foo->Bar->object->Mymeta->type print ( StanfordTeacher . n ) obj = object.__new__(self) \u4e5f\u53ef\u4ee5\u521b\u5efa\u7a7a\u5bf9\u8c61,\u4f46\u4f1a\u76f4\u63a5\u8df3\u8fc7StanfordTeacher->Foo->Bar\u8fd9\u4e09\u4e2a\u7c7b\u7684\u68c0\u7d22 \u63d0\u4e00\u5634: StanfordTeacher = Mymeta('StanfordTeacher','...','...') \u4ea7\u751f\u7c7bStanfordTeacher\u7684\u8fc7\u7a0b\u5c31\u662f\u5728\u8c03\u7528Mymeta, \u800cMymeta\u4e5f\u662ftype\u7c7b\u7684\u4e00\u4e2a\u5bf9\u8c61, \u90a3\u4e48Mymeta\u4e4b\u6240\u4ee5\u53ef\u4ee5\u8c03\u7528, \u662f\u56e0\u4e3a\u5728\u5143\u7c7btype\u4e2d\u4e5f\u6709\u4e00\u4e2a __call__\u65b9\u6cd5!!! \u8be5\u65b9\u6cd5\u4e2d\u4e5f\u4f1a\u5b9e\u73b0\u90a3\u4e09\u4ef6\u4e8b!!","title":"\u5c5e\u6027\u67e5\u627e"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7_%E5%85%83%E7%B1%BB/#_10","text":"","title":"\u5b9e\u8df5"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7_%E5%85%83%E7%B1%BB/#_11","text":"1 # class type: 2 # def __call__(self, *args, **kwargs): # -- self\u4e3aMymeta\u5bf9\u8c61 args\u662f\u4e09\u8981\u7d20 15 3 # obj = self.__new__(self, *args, **kwargs) 4 # self.__init__(obj, *args, **kwargs) 5 # return obj 6 class Mymeta ( type ): 7 def __new__ ( self , * args , ** kwargs ): # -- self\u4e3aMymeta\u5bf9\u8c61 args\u662f\u4e09\u8981\u7d20 15 8 return super ( Mymeta , self ) . __new__ ( self , * args , ** kwargs ) 9 def __init__ ( self , class_name , class_bases , class_dic ): # -- self\u4e3aPeople\u5bf9\u8c61 15 10 super ( Mymeta , self ) . __init__ ( class_name , class_bases , class_dic ) 11 def __call__ ( self , * args , ** kwargs ): # -- self\u4e3aPeople\u5bf9\u8c61 args\u662f('dc',18) 21 12 obj = self . __new__ ( self ) # -- \u8fd9\u91cc\u8c03\u7528\u7684\u662f19\u884c\u7684\u4ee3\u7801 13 self . __init__ ( obj , * args , ** kwargs ) # -- \u8c03\u7528\u7684\u662f16\u7684\u4ee3\u7801 *args\u89e3\u5305\u4ee5\u4f4d\u7f6e\u53c2\u6570\u4f20\u9012 14 return obj 15 class People ( object , metaclass = Mymeta ): 16 def __init__ ( self , name , age ): 17 self . name = name 18 self . age = age # -- \u7b2c19\u300120\u884c\u7684\u4ee3\u7801\u4e0d\u5199\u4e5f\u662f\u53ef\u4ee5\u7684 19 def __new__ ( self ): 20 return super ( People , self ) . __new__ ( self ) # -- \u6700\u540e\u8c03\u7528\u7684\u662fobject\u91cc\u7684__new__ # \u6ce8\u610f,object\u7684__new__\u53ea\u6709\u4e00\u4e2a\u53c2\u6570 21 p = People ( 'dc' , 18 ) \u5148\u8bf4\u4e00\u70b9 : python\u5904\u5904\u7686\u5bf9\u8c61 , \u7c7b\u4e5f\u662f\u4e00\u4e2a\u5bf9\u8c61 . \u8c03\u7528\u5bf9\u8c61\u5c31\u4f1a\u89e6\u53d1\u5b9e\u4f8b\u5316\u8be5\u5bf9\u8c61\u7684\u7c7b\u4e2d\u7684__call__\u65b9\u6cd5 . \u4ee5\u672c\u6a21\u7248\u4e3a\u4f8b , Mymeta () \u3001 People () \u4f1a\u5206\u522b\u89e6\u53d1type\u7c7b\u548cMymeta\u7c7b\u4e2d\u7684call\u65b9\u6cd5 ; < \u5728\u7b2c15\u884c\u6253\u4e2a\u65ad\u70b9 , \u5c31\u77e5\u9053\u6267\u884c\u987a\u5e8f\u5566 !! \u4ece\u4e0a\u5230\u4e0b , class\u548cdef\u8bed\u53e5\u90fd\u4f1a\u5148\u6267\u884c , \u4f46\u51fd\u6570\u4f53\u4ee3\u7801\u662f\u6ca1\u6709\u9a6c\u4e0a\u6267\u884c\u7684 .> \u7b2c1 - 5 \u884c\u4ee3\u7801\u662ftype\u7c7b\u7684\u4f2a\u4ee3\u7801 . 1 > \u4ece\u7b2c15\u884c\u4ee3\u7801\u5f00\u59cb\u5206\u6790 . class\u5173\u952e\u5b57\u4f1a\u6536\u96c6\u521b\u5efa\u7c7b\u7684\u4e09\u8981\u7d20 , \u7c7b\u540dPeople \u3001 \u57fa\u7c7b\u4eec ( object ,) \u3001 \u6267\u884c\u7c7b\u4f53\u4ee3\u7801\u5f97\u5230\u7684\u540d\u79f0\u5b57\u5178 . \u6ce8\u610f\u4e00\u70b9 : \u80fd\u6536\u96c6\u5230\u540d\u79f0\u5b57\u5178\u662f\u56e0\u4e3a\u7b2c16\u884c \u3001 \u7b2c19\u884c\u4ee3\u7801\u6267\u884c\u4e86 , \u4f46\u662f\u51fd\u6570\u4f53\u4ee3\u7801\u5e76\u6ca1\u6709\u6267\u884c !! 2 > \u6536\u96c6\u5b8c\u6210\u540e , \u5728\u80cc\u540e\u4f1a\u6267\u884c\u8bed\u53e5 , People = Mymate ( 'People' ,( object ,),{ ... }) Mymate\u5bf9\u8c61\u7684\u8c03\u7528\u4f1a\u89e6\u53d1type\u4e2d__call__\u65b9\u6cd5\u7684\u8fd0\u884c . 3 > \u770b\u7b2c2\u884c\u7684\u4f2a\u4ee3\u7801 , self\u662fMymeta\u5bf9\u8c61 . -- \u56e0\u4e3a\u5bf9\u8c61\u8c03\u7528\u7ed1\u5b9a\u65b9\u6cd5\u4f1a\u81ea\u52a8\u5c06\u81ea\u5df1\u4f20\u9012\u7ed9\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570 . \u521b\u5efa\u7c7b\u7684\u4e09\u8981\u7d20\u4f1a\u88ab * args\u4ee5\u5143\u7956\u5f62\u5f0f\u63a5\u6536 . 4 > \u7b2c3\u884c\u7684\u4f2a\u4ee3\u7801 , \u5f00\u59cb\u5b9e\u4f8b\u5316Mymeta\u5bf9\u8c61 , \u521b\u5efa\u51fa\u4e00\u4e2a\u7a7a\u5bf9\u8c61 .. \u8fd9\u91cc\u6d89\u53ca\u5230__new__\u5c5e\u6027\u7684\u67e5\u627e . Mymeta\u5bf9\u8c61\u4e2d\u6709__new__\u5c5e\u6027 , \u8df3\u8f6c\u5230\u7b2c7\u884c\u4ee3\u7801 . \u8be5\u884c\u4ee3\u7801\u4e2d\u7684self\u4e5f\u662fMymeta\u5bf9\u8c61 . \u6253\u5370\u4e00\u4e0b , \u4f1a\u53d1\u73b0args\u5143\u7ec4\u91cc\u662f\u521b\u5efa\u7c7b\u7684\u4e09\u8981\u7d20 , kwargs\u662f\u7a7a\u5b57\u5178 .. \u7b2c8\u884c\u4ee3\u7801\u4f7f\u7528\u4e86super (), \u6b64\u884c\u4ee3\u7801\u7b49\u4ef7\u4e8e ` return type . __new__ ( self , * args , ** kwargs ) ` \u6ce8\u610f\u4e00\u70b9 \uff01 * args\u76f8\u5f53\u4e8e\u5c06args\u5143\u7956\u8fdb\u884c\u4e86\u62c6\u5305 , \u4ee5\u4f4d\u7f6e\u53c2\u6570\u7684\u5f62\u5f0f\u8fdb\u884c\u4e86\u4f20\u9012 !!! ok , \u5c06\u7a7a\u5bf9\u8c61 return\u56de\u4e86 \u7b2c3\u884c\u7684\u4f2a\u4ee3\u7801 , \u5e76\u8d4b\u503c\u7ed9\u4e86obj\u5bf9\u8c61 . \u5b9e\u5219\u6b64obj\u5c31\u662f People\u5bf9\u8c61 ! 5 > \u6267\u884c\u7b2c4\u884c\u7684\u4f2a\u4ee3\u7801 , \u4e3aPeople\u5bf9\u8c61\u8fdb\u884c\u521d\u59cb\u5316\u64cd\u4f5c , \u540c\u7406 , \u6d89\u53ca__init__\u5c5e\u6027\u7684\u67e5\u627e . \u8df3\u8f6c\u5230\u7b2c9\u884c\u4ee3\u7801 .. \u63a5\u7740\u6267\u884c\u7b2c10\u884c , \u518d\u56de\u5230\u7b2c4\u884c , \u6267\u884c\u7b2c5\u884c\u7684return\u8bed\u53e5 6 > \u5c31\u6b64 , \u7b2c15\u884c\u4ee3\u7801 People = Mymate ( 'People' ,( object ,),{ ... }) \u7684\u8def\u9014\u7ed3\u675f !! 7 > \u7b2c21\u884c\u4ee3\u7801\u7684\u6267\u884c , \u4f1a\u6267\u884c\u7b2c12\u884c\u4ee3\u7801 , \u518d\u6267\u884c\u7b2c20\u884c\u4ee3\u7801 ; \u7b2c13\u884c\u4ee3\u7801\u7684\u6267\u884c\u4f1a\u6267\u884c\u7b2c17\u884c\u4ee3\u7801 . \u6e05\u723d\u7248 class Mymeta ( type ): # -- \u63a7\u5236\u81ea\u5b9a\u4e49\u7c7b\u7684\u521b\u5efa\u8fc7\u7a0b People = Mymeta('People',..,..) def __init__ ( self , class_name , class_bases , class_dic ): super ( Mymeta , self ) . __init__ ( class_name , class_bases , class_dic ) # -- \u63a7\u5236\u81ea\u5b9a\u4e49\u7c7b\u7684\u8c03\u7528 p = People('dc',18) def __call__ ( self , * args , ** kwargs ): obj = self . __new__ ( self ) self . __init__ ( obj , * args , ** kwargs ) return obj class People ( object , metaclass = Mymeta ): def __init__ ( self , name , age ): self . name = name self . age = age","title":"\u6a21\u7248\u5206\u6790"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7_%E5%85%83%E7%B1%BB/#_12","text":"1> \u5728\u81ea\u5b9a\u4e49\u5143\u7c7bMymeta\u4e2d\u628a\u81ea\u5b9a\u4e49\u7c7bPeople\u7684\u6570\u636e\u5c5e\u6027\u90fd\u53d8\u6210\u5927\u5199 2> \u5728\u81ea\u5b9a\u4e49\u5143\u7c7bMymeta\u4e2d\u5b8c\u6210People\u5b9e\u4f8b\u5bf9\u8c61p\u72ec\u6709\u5c5e\u6027\u7684\u5b9a\u5236,\u81ea\u5b9a\u4e49\u7c7bPeople\u65e0\u9700\u4f7f\u7528__init__\u65b9\u6cd5 \"\"\" class type: def __call__(self, *args, **kwargs): # print(self) # <class '__main__.Mymeta'> obj = self.__new__(self, *args, **kwargs) # -- \u4ea7\u751fMymeta\u7684\u4e00\u4e2a\u5bf9\u8c61People self.__init__(obj, *args, **kwargs) return obj \"\"\" class Mymeta ( type ): def __new__ ( self , class_name , class_bases , class_dic ): print ( self ) # <class '__main__.Mymeta'> !!!!!! update_dic = {} for k , v in class_dic . items (): if not callable ( v ) and not k . startswith ( \"__\" ): update_dic [ k . upper ()] = v else : update_dic [ k ] = v # -- \u8fd9\u91cc\u662f\u521b\u5efa\u4e00\u4e2aMymeta\u7684\u7a7a\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61People # \u7b49\u540c\u4e8e return type.__new__(self, class_name, class_bases, update_dic) return super ( Mymeta , self ) . __new__ ( self , class_name , class_bases , update_dic ) def __call__ ( self , * args , ** kwargs ): print ( self ) # -- <class '__main__.People'> !!!!!! # -- \u8981\u6c42\u5b9e\u4f8b\u5316\u65f6\u4f20\u53c2\u5fc5\u987b\u4e3a\u5173\u952e\u5b57\u5f62\u5f0f if args : raise TypeError ( \"must use keyword argument for key function!\" ) obj = self . __new__ ( self ) for k , v in kwargs . items (): obj . __dict__ [ k ] = v return obj class People ( object , metaclass = Mymeta ): # -- People = Mymeta(People,..,..) country = \"china\" def __init__ ( self , name , age ): self . name = name self . age = age print ( getattr ( People , 'COUNTRY' )) # china p = People ( name = 'dc' , age = 18 ) print ( p . __dict__ ) # {'name': 'dc', 'age': 18} 3> \u5728\u5143\u7c7bMymeta\u4e2d\u63a7\u5236\u81ea\u5b9a\u4e49\u7684\u7c7bPeople\u4ea7\u751f\u7684\u5bf9\u8c61p\u76f8\u5173\u7684\u72ec\u6709\u5c5e\u6027\u5168\u90e8\u4e3a\u9690\u85cf\u5c5e\u6027 class Mymeta ( type ): def __call__ ( self , * args , ** kwargs ): obj = object . __new__ ( self ) self . __init__ ( obj , * args , ** kwargs ) obj . __dict__ = { f '_ { self . __name__ } __ { k } ' : v for k , v in obj . __dict__ . items ()} return obj class People ( object , metaclass = Mymeta ): def __init__ ( self , name , age ): self . name = name self . age = age p = People ( 'dc' , 18 ) print ( p . __dict__ ) # {'_People__name': 'dc', '_People__age': 18}","title":"\u5c0f\u8bd5\u8eab\u624b"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7_%E5%85%83%E7%B1%BB/#_13","text":"\u5355\u4f8b\u6a21\u5f0f: \u5373\u5355\u4e2a\u5b9e\u4f8b, \u6307\u7684\u662f\u540c\u4e00\u4e2a\u7c7b\u5b9e\u4f8b\u5316\u591a\u6b21\u7684\u7ed3\u679c\u6307\u5411\u540c\u4e00\u4e2a\u5bf9\u8c61, \u7528\u4e8e\u8282\u7701\u5185\u5b58\u7a7a\u95f4 \u5e94\u7528\u573a\u666f: \u5f53\u5b9e\u4f8b\u5316\u591a\u6b21\u5f97\u5230\u7684\u591a\u4e2a\u5bf9\u8c61\u4e2d\u5b58\u653e\u7684\u5c5e\u6027\u90fd\u4e00\u6837\u65f6, \u5e94\u8be5\u5c06\u591a\u4e2a\u5bf9\u8c61\u6307\u5411\u540c\u4e00\u4e2a\u5185\u5b58, \u5373\u540c\u4e00\u4e2a\u5b9e\u4f8b! settings.py\u914d\u7f6e\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b: IP = \"1.1.1.10\" PORT = 3306 \u82e5\u6211\u4eec\u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u8bfb\u53d6\u914d\u7f6e\u6765\u8fdb\u884c\u5b9e\u4f8b\u5316, \u5728\u914d\u7f6e\u76f8\u540c\u7684\u60c5\u51b5, \u5c31\u6ca1\u5fc5\u8981\u91cd\u590d\u4ea7\u751f\u5bf9\u8c61\u6d6a\u8d39\u5185\u5b58\u5566! \u65b9\u5f0f\u4e8c\u548c\u4e09,\u7ea6\u5b9a\u4e00\u4e2a\u89c4\u5219,Mysql()\u4e0d\u4f20\u53c2\u6570,\u9ed8\u8ba4\u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u8bfb\u53d6\u53c2\u6570!!Hhh.","title":"\u5355\u4f8b\u6a21\u5f0f"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7_%E5%85%83%E7%B1%BB/#_14","text":"import settings class Mysql : __instance = None def __init__ ( self , ip , port ): self . ip = ip self . port = port @classmethod def from_conf ( cls ): if not cls . __instance : cls . __instance = cls ( settings . IP , settings . PORT ) return cls . __instance obj1 = Mysql . from_conf () obj2 = Mysql . from_conf () obj3 = Mysql . from_conf () print ( obj1 is obj2 is obj3 ) # True","title":"\u65b9\u5f0f\u4e00:\u7c7b\u65b9\u6cd5"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7_%E5%85%83%E7%B1%BB/#_15","text":"import settings \"\"\" def singleton(cls): _isinstance = None def wrapper(*args, **kwargs): if args or kwargs: return cls(*args, **kwargs) nonlocal _isinstance if not _isinstance: _isinstance = cls(settings.IP, settings.PORT) return _isinstance return wrapper \"\"\" # -- Ps:\u88c5\u9970\u5668\u8fd8\u53ef\u4ee5\u7528\u7c7b\u5b9e\u73b0,\u5177\u4f53\u53c2\u8003\u9762\u5411\u5bf9\u8c61\u9ad8\u7ea7\u90e8\u5206\u4e2d\u5173\u4e8e\u63cf\u8ff0\u7b26\u7684\u77e5\u8bc6\u70b9!! def singleton ( cls ): # -- \u53ef\u4ee5\u653e\u5230\u7c7b\u91cc cls.__isinstance # \u6ce8\u610f:\u51fd\u6570\u4e2d\u7ea6\u5b9a\u4e00\u4e2a\u4e0b\u5212\u7ebf,\u7c7b\u4e2d\u7ea6\u5b9a\u4e24\u4e2a\u4e0b\u5212\u7ebf. _isinstance = cls ( settings . IP , settings . PORT ) def wrapper ( * args , ** kwargs ): if args or kwargs : return cls ( * args , ** kwargs ) # -- cls.__isinstance return _isinstance return wrapper # -- \u88ab\u88c5\u9970\u5bf9\u8c61\u53ef\u4ee5\u662f\u4efb\u610f\u53ef\u88ab\u8c03\u7528\u7684\u5bf9\u8c61 \u7c7b\u662f\u53ef\u4ee5\u8c03\u7528\u7684 @singleton class Mysql : def __init__ ( self , ip , port ): self . ip = ip self . port = port obj1 = Mysql () obj2 = Mysql () obj3 = Mysql () print ( obj1 is obj2 is obj3 ) # True","title":"\u65b9\u5f0f\u4e8c:\u88c5\u9970\u5668"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7_%E5%85%83%E7%B1%BB/#_16","text":"import settings class Mymeta ( type ): # -- \u5b9a\u4e49\u7c7bMysql\u65f6\u89e6\u53d1 def __init__ ( self , class_name , class_bases , class_dic ): # -- self\u4e3aMysql # -- \u5728Mysql\u8c03\u7528\u4e4b\u524d,\u4e8b\u5148\u5148\u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u53d6\u914d\u7f6e\u6765\u9020\u4e00\u4e2aMysql\u7684\u5b9e\u4f8b\u51fa\u6765 self . __instance = object . __new__ ( self ) # -- \u9020\u51fa\u4e00\u4e2aMysql\u7684\u7a7a\u5bf9\u8c61 self . __init__ ( self . __instance , settings . IP , settings . PORT ) # -- \u52a0\u8f7d\u914d\u7f6e\u6587\u4ef6\u521d\u59cb\u5316Mysql\u7684\u7a7a\u5bf9\u8c61 # \u4e0a\u8ff0\u4e24\u6b65\u53ef\u4ee5\u5408\u6210\u4e0b\u9762\u7684\u4efb\u610f\u4e00\u79cd\u5199\u6cd5(\u5373\u4e0a\u65b9\u7684\u4e24\u884c\u4ee3\u7801\u7b49\u6548\u4e8e\u4e0b\u65b9\u7684\u4e24\u884c\u4ee3\u7801\u4e2d\u7684\u4efb\u610f\u4e00\u6761) # \u5efa\u8bae\u4e0d\u5408\u6210 \u96be\u5f97\u7406\u89e3 \u2014_-\"\" \u6b64__call__\u662ftype\u4e2d\u7684, \u770b\u524d\u9762\u7684\u00b7\u6a21\u7248\u5206\u6790\u00b7\u5c31\u6653\u5f97\u548b\u4e2a\u56de\u4e8b\u4e86. # self.__instance = super().__call__(settings.IP, settings.PORT) # self.__instance = type.__call__(self, settings.IP, settings.PORT) # -- \u6b64\u884c\u6a21\u7248\u4ee3\u7801\u653e\u5230\u6b64\u51fd\u6570\u7684\u54ea\u4e2a\u4f4d\u7f6e\u90fd\u53ef\u4ee5.. # \u56e0\u4e3atype\u4e2d\u7684__call__\u65b9\u6cd5\u91cc\u7684__new__\u6b65\u9aa4\u5df2\u7ecf\u521b\u5efa\u597d\u4e86Mymeta\u7684\u7a7a\u5bf9\u8c61. super ( Mymeta , self ) . __init__ ( class_name , class_bases , class_dic ) # -- Mysql\u8c03\u7528\u65f6\u89e6\u53d1 def __call__ ( self , * args , ** kwargs ): # -- self\u4e3aMysql if args or kwargs : obj = self . __new__ ( self ) self . __init__ ( obj , * args , ** kwargs ) return obj return self . __instance class Mysql ( object , metaclass = Mymeta ): def __init__ ( self , ip , port ): self . ip = ip self . port = port # -- \u6ca1\u6709\u4f20\u503c\u5219\u9ed8\u8ba4\u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u8bfb\u914d\u7f6e\u6765\u5b9e\u4f8b\u5316,\u6240\u6709\u7684\u5b9e\u4f8b\u5e94\u8be5\u6307\u5411\u4e00\u4e2a\u5185\u5b58\u5730\u5740 obj1 = Mysql () obj2 = Mysql () obj3 = Mysql () print ( obj1 is obj2 is obj3 ) # True obj4 = Mysql ( '127.0.0.1' , 8000 ) print ( obj1 is obj4 ) # False","title":"\u65b9\u5f0f\u4e09:\u5143\u7c7b"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7_%E5%85%83%E7%B1%BB/#_17","text":"class MyType ( type ): def __init__ ( self , * args , ** kwargs ): print ( \"2\" ) super () . __init__ ( * args , ** kwargs ) def __new__ ( cls , * args , ** kwargs ): print ( \"1\" ) new_cls = super () . __new__ ( cls , * args , ** kwargs ) # \u521b\u5efa\u7c7b print ( new_cls ) # <class '__main__.Foo'> return new_cls class Foo ( object , metaclass = MyType ): # \u4e5f\u9075\u5faa,\u5148\u6267\u884cnew\u518d\u6267\u884cinit pass # \u7c7b\u521b\u5efa\u5bf9\u8c61\u5148\u6267\u884c\u7c7b\u4e2d\u7684new\u518d\u6267\u884cinit,\u5bf9\u8c61\u52a0\u62ec\u53f7\u4f1a\u6267\u884c\u7c7b\u4e2d\u7684call\u65b9\u6cd5 # \u521b\u5efa\u7c7b\u7684\"\u4e1c\u897f\"\u5728\u521b\u5efa\u7c7b\u65f6\u4e5f\u4f1a\u5148\u6267\u884c\"\u4e1c\u897f\"\u91cc\u7684new\u518d\u6267\u884cinit,\u7c7b\u52a0\u62ec\u53f7\u4f1a\u6267\u884c\"\u4e1c\u897f\"\u91cc\u7684call\u65b9\u6cd5 # \u610f\u5473\u7740 \u7c7b\u52a0\u62ec\u53f7\u4f1a\u6267\u884c \"\u4e1c\u897f\" \u91cc\u7684call\u65b9\u6cd5?? # \u5148new\u540einit\u662f\u56e0\u4e3acall\u91cc\u5b9a\u4e49\u4e86\u7684 \u6839\u636e\u7c7b\u521b\u5efa\u5bf9\u8c61 1 > \u5148\u6267\u884c__new__\u65b9\u6cd5 , \u521b\u5efa\u7a7a\u5bf9\u8c61 ; ==> \u6784\u9020\u65b9\u6cd5 2 > \u6267\u884c\u7c7b\u7684__init__\u65b9\u6cd5 , \u521d\u59cb\u5316\u5bf9\u8c61 ; ==> \u521d\u59cb\u5316\u65b9\u6cd5 Q : \u5bf9\u8c61\u662f\u57fa\u4e8e\u7c7b\u521b\u5efa\u7684 . \u90a3\u4e48\u7c7b\u662f\u7531\u8c01\u521b\u5efa\u7684 ? A : \u7c7b\u9ed8\u8ba4\u662f\u7531type\u521b\u5efa\u7684 !! class Foo ( object ): v1 = 123 def func ( self ): return 666 \u7b49\u540c\u4e8e Foo = type ( \"Foo\" ,( object ,),{ \"v1\" : 123 , \"func\" : lambda self : 666 }) # \u7c7b\u540d\u3001\u7ee7\u627f\u7c7b\u3001\u6210\u5458 type\u4e5f\u662f\u4e00\u4e2a\u7ee7\u627f\u4e86object\u7684\u7c7b , type\u62ec\u53f7\u540e\u9762\u7684\u4e09\u4e2a\u53c2\u6570\u662finit\u7684\u53c2\u6570 ??? --- \u7c7b\u9ed8\u8ba4\u662f\u7531type\u521b\u5efa\u7684 , \u90a3\u5982\u4f55\u8ba9\u4e00\u4e2a\u7c7b\u7684\u521b\u5efa\u6539\u6210\u5176\u4ed6\u4e1c\u897f\u5462 ? \u5143\u7c7b !! \u5143\u7c7b , \u6307\u5b9a\u7c7b\u7531\u8c01\u6765\u521b\u5efa !! \u901a\u8fc7metaclass =.. \u6765\u6307\u5b9a !","title":"\u8865\u5145"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/8_%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/","text":"\u53c2\u8003\u94fe\u63a5: https://zhuanlan.zhihu.com/p/109340070 \u4ec0\u4e48\u662f\u5f02\u5e38\uff1f \u00b6 \u5f02\u5e38\u662f\u7a0b\u5e8f\u53d1\u751f \u9519\u8bef \u7684\u4fe1\u53f7, \u7a0b\u5e8f\u4e00\u65e6\u51fa\u73b0\u9519\u8bef, \u4fbf\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5f02\u5e38. \u82e5\u7a0b\u5e8f\u4e2d\u6ca1\u6709\u5904\u7406\u5b83, \u5c31\u4f1a\u629b\u51fa\u8be5\u5f02\u5e38, \u7a0b\u5e8f\u7684\u8fd0\u884c\u4e5f\u968f\u4e4b\u7ec8\u6b62. \u9519\u8bef\u5206\u4e3a\u4e24\u79cd: 1> \u8bed\u6cd5\u4e0a\u7684\u9519\u8befSyntaxError , \u8fd9\u79cd\u9519\u8bef\u5e94\u8be5\u5728\u7a0b\u5e8f\u8fd0\u884c\u524d\u5c31\u4fee\u6539\u6b63\u786e 2> \u903b\u8f91\u9519\u8bef . eg: TypeError\u3001ValueError\u3001NameError\u7b49 # -- TypeError: \u6570\u5b57\u7c7b\u578b\u65e0\u6cd5\u4e0e\u5b57\u7b26\u4e32\u7c7b\u578b\u76f8\u52a0 1 + \u2019 2 \u2019 # -- ValueError: \u5f53\u5b57\u7b26\u4e32\u5305\u542b\u6709\u975e\u6570\u5b57\u7684\u503c\u65f6,\u65e0\u6cd5\u8f6c\u6210int\u7c7b\u578b num = input ( \">>: \" ) # -- \u8f93\u5165hello int ( num ) # -- NameError: \u5f15\u7528\u4e86\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u540d\u5b57x x # -- IndexError: \u7d22\u5f15\u8d85\u51fa\u5217\u8868\u7684\u9650\u5236 l = [ 'egon' , 'aa' ] l [ 3 ] # -- KeyError: \u5f15\u7528\u4e86\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684key dic = { 'name' : 'egon' } dic [ 'age' ] # -- AttributeError: \u5f15\u7528\u7684\u5c5e\u6027\u4e0d\u5b58\u5728 class Foo : pass Foo . x # -- ZeroDivisionError: \u9664\u6570\u4e0d\u80fd\u4e3a0 1 / 0 \u82e5\u9519\u8bef\u53d1\u751f\u7684\u6761\u4ef6\u662f\u201c\u53ef\u9884\u77e5\u7684\u201d, \u6211\u4eec\u5e94\u8be5\u7528 if \u6765\u8fdb\u884c \u201d\u9884\u9632\u201d; \u82e5\u9519\u8bef\u53d1\u751f\u7684\u6761\u4ef6\u201c\u4e0d\u53ef\u9884\u77e5\u201d, \u5373\u5f02\u5e38\u4e00\u5b9a\u4f1a\u89e6\u53d1, \u90a3\u4e48\u6211\u4eec\u624d\u5e94\u8be5\u4f7f\u7528 try...except \u8bed\u53e5\u6765\u5904\u7406. \u5f02\u5e38\u5904\u7406 \u00b6 try : \u88ab\u68c0\u6d4b\u7684\u4ee3\u7801\u5757 except NameError : \u89e6\u53d1NameError\u65f6\u5bf9\u5e94\u7684\u5904\u7406\u903b\u8f91 except ( IndexError , TypeError ): \u89e6\u53d1IndexError\u65f6\u5bf9\u5e94\u7684\u5904\u7406\u903b\u8f91 except Exception : # -- \u4e07\u80fd\u5f02\u5e38 \u5176\u4ed6\u7c7b\u578b\u7684\u5f02\u5e38\u7edf\u4e00\u7528\u6b64\u5904\u7684\u903b\u8f91\u5904\u7406 else : \u5728\u88ab\u76d1\u6d4b\u7684\u4ee3\u7801\u5757\u6ca1\u6709\u5f02\u5e38\u53d1\u751f\u65f6\u4f1a\u81ea\u52a8\u6267\u884c finally : # -- \u901a\u5e38\u5728finally\u7684\u5b50\u4ee3\u7801\u5757\u505a\u4e00\u4e9b\u56de\u6536\u8d44\u6e90\u7684\u64cd\u4f5c,\u6bd4\u5982\u5173\u95ed\u6253\u5f00\u7684\u6587\u4ef6\u3001\u5173\u95ed\u6570\u636e\u5e93\u8fde\u63a5\u7b49 \u88ab\u76d1\u6d4b\u7684\u4ee3\u7801\u5757\u65e0\u8bba\u6709\u65e0\u5f02\u5e38\u90fd\u4f1a\u81ea\u52a8\u6267\u884c \u672c\u6765\u7a0b\u5e8f\u4e00\u65e6\u51fa\u73b0\u5f02\u5e38\u5c31\u4f1a\u7ec8\u6b62\u8fd0\u884c, \u6709\u4e86\u5f02\u5e38\u5904\u7406\u4ee5\u540e. \u5728\u88ab\u68c0\u6d4b\u7684\u4ee3\u7801\u5757\u51fa\u73b0\u5f02\u5e38\u65f6, \u88ab\u68c0\u6d4b\u7684\u4ee3\u7801\u5757 \u4e2d\u5f02\u5e38\u53d1\u751f\u4f4d\u7f6e\u4e4b\u540e\u7684\u4ee3\u7801\u5c06\u4e0d\u4f1a\u6267\u884c . \u53d6\u800c\u4ee3\u4e4b\u7684\u662f \u6267\u884c\u5339\u914d\u5f02\u5e38\u7684except\u5b50\u4ee3\u7801\u5757, \u5176\u4f59\u4ee3\u7801\u5747\u6b63\u5e38\u8fd0\u884c. raise\u4e0eassert \u00b6 raise\u7531\u7a0b\u5e8f\u5458\u81ea\u5df1\u6765\u660e\u786e\u5730\u89e6\u53d1\u5f02\u5e38 \u65ad\u8a00\u8bed\u53e5assert expression, \u65ad\u5b9a\u8868\u8fbe\u5f0fexpression\u6210\u7acb, \u5426\u5219\u89e6\u53d1\u5f02\u5e38AssertionError class Student : def __init__ ( self , name , age ): if not isinstance ( name , str ): raise TypeError ( 'name must be str' ) if not isinstance ( age , int ): raise TypeError ( 'age must be int' ) self . name = name self . age = age stu1 = Student ( 4573 , 18 ) raise\u4e0eassert age = '18' # -- \u82e5\u8868\u8fbe\u5f0fisinstance(age,int)\u8fd4\u56de\u503c\u4e3aFalse\u5219\u89e6\u53d1\u5f02\u5e38AssertionError assert isinstance ( age , int ) # -- \u7b49\u540c\u4e8e if not isinstance ( age , int ): raise AssertionError \u81ea\u5b9a\u4e49\u5f02\u5e38 \u00b6 \u5728\u5185\u7f6e\u5f02\u5e38\u4e0d\u591f\u7528\u7684\u60c5\u51b5\u4e0b, \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7ee7\u627f\u5185\u7f6e\u7684\u5f02\u5e38\u7c7b\u6765\u81ea\u5b9a\u4e49\u5f02\u5e38\u7c7b class PoolEmptyError ( Exception ): # -- \u53ef\u4ee5\u901a\u8fc7\u7ee7\u627fException\u6765\u5b9a\u4e49\u4e00\u4e2a\u5168\u65b0\u7684\u5f02\u5e38 def __init__ ( self , value = 'The proxy source is exhausted' ): # \u53ef\u4ee5\u5b9a\u5236\u521d\u59cb\u5316\u65b9\u6cd5 super ( PoolEmptyError , self ) . __init__ () self . value = value def __str__ ( self ): # -- \u53ef\u4ee5\u5b9a\u4e49\u8be5\u65b9\u6cd5\u7528\u6765\u5b9a\u5236\u89e6\u53d1\u5f02\u5e38\u65f6\u6253\u5370\u5f02\u5e38\u503c\u7684\u683c\u5f0f return '< %s >' % self . value class NetworkIOError ( IOError ): # -- \u4e5f\u53ef\u4ee5\u5728\u7279\u5b9a\u5f02\u5e38\u7684\u57fa\u7840\u4e0a\u6269\u5c55\u4e00\u4e2a\u76f8\u5173\u7684\u5f02\u5e38 pass raise PoolEmptyError # __main__.PoolEmptyError: < The proxy source is exhausted > # raise NetworkIOError('\u8fde\u63a5\u88ab\u62d2\u7edd') # __main__.NetworkIOError: \u8fde\u63a5\u88ab\u62d2\u7edd","title":"\u5f02\u5e38\u5904\u7406"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/8_%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/#_1","text":"\u5f02\u5e38\u662f\u7a0b\u5e8f\u53d1\u751f \u9519\u8bef \u7684\u4fe1\u53f7, \u7a0b\u5e8f\u4e00\u65e6\u51fa\u73b0\u9519\u8bef, \u4fbf\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5f02\u5e38. \u82e5\u7a0b\u5e8f\u4e2d\u6ca1\u6709\u5904\u7406\u5b83, \u5c31\u4f1a\u629b\u51fa\u8be5\u5f02\u5e38, \u7a0b\u5e8f\u7684\u8fd0\u884c\u4e5f\u968f\u4e4b\u7ec8\u6b62. \u9519\u8bef\u5206\u4e3a\u4e24\u79cd: 1> \u8bed\u6cd5\u4e0a\u7684\u9519\u8befSyntaxError , \u8fd9\u79cd\u9519\u8bef\u5e94\u8be5\u5728\u7a0b\u5e8f\u8fd0\u884c\u524d\u5c31\u4fee\u6539\u6b63\u786e 2> \u903b\u8f91\u9519\u8bef . eg: TypeError\u3001ValueError\u3001NameError\u7b49 # -- TypeError: \u6570\u5b57\u7c7b\u578b\u65e0\u6cd5\u4e0e\u5b57\u7b26\u4e32\u7c7b\u578b\u76f8\u52a0 1 + \u2019 2 \u2019 # -- ValueError: \u5f53\u5b57\u7b26\u4e32\u5305\u542b\u6709\u975e\u6570\u5b57\u7684\u503c\u65f6,\u65e0\u6cd5\u8f6c\u6210int\u7c7b\u578b num = input ( \">>: \" ) # -- \u8f93\u5165hello int ( num ) # -- NameError: \u5f15\u7528\u4e86\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u540d\u5b57x x # -- IndexError: \u7d22\u5f15\u8d85\u51fa\u5217\u8868\u7684\u9650\u5236 l = [ 'egon' , 'aa' ] l [ 3 ] # -- KeyError: \u5f15\u7528\u4e86\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684key dic = { 'name' : 'egon' } dic [ 'age' ] # -- AttributeError: \u5f15\u7528\u7684\u5c5e\u6027\u4e0d\u5b58\u5728 class Foo : pass Foo . x # -- ZeroDivisionError: \u9664\u6570\u4e0d\u80fd\u4e3a0 1 / 0 \u82e5\u9519\u8bef\u53d1\u751f\u7684\u6761\u4ef6\u662f\u201c\u53ef\u9884\u77e5\u7684\u201d, \u6211\u4eec\u5e94\u8be5\u7528 if \u6765\u8fdb\u884c \u201d\u9884\u9632\u201d; \u82e5\u9519\u8bef\u53d1\u751f\u7684\u6761\u4ef6\u201c\u4e0d\u53ef\u9884\u77e5\u201d, \u5373\u5f02\u5e38\u4e00\u5b9a\u4f1a\u89e6\u53d1, \u90a3\u4e48\u6211\u4eec\u624d\u5e94\u8be5\u4f7f\u7528 try...except \u8bed\u53e5\u6765\u5904\u7406.","title":"\u4ec0\u4e48\u662f\u5f02\u5e38\uff1f"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/8_%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/#_2","text":"try : \u88ab\u68c0\u6d4b\u7684\u4ee3\u7801\u5757 except NameError : \u89e6\u53d1NameError\u65f6\u5bf9\u5e94\u7684\u5904\u7406\u903b\u8f91 except ( IndexError , TypeError ): \u89e6\u53d1IndexError\u65f6\u5bf9\u5e94\u7684\u5904\u7406\u903b\u8f91 except Exception : # -- \u4e07\u80fd\u5f02\u5e38 \u5176\u4ed6\u7c7b\u578b\u7684\u5f02\u5e38\u7edf\u4e00\u7528\u6b64\u5904\u7684\u903b\u8f91\u5904\u7406 else : \u5728\u88ab\u76d1\u6d4b\u7684\u4ee3\u7801\u5757\u6ca1\u6709\u5f02\u5e38\u53d1\u751f\u65f6\u4f1a\u81ea\u52a8\u6267\u884c finally : # -- \u901a\u5e38\u5728finally\u7684\u5b50\u4ee3\u7801\u5757\u505a\u4e00\u4e9b\u56de\u6536\u8d44\u6e90\u7684\u64cd\u4f5c,\u6bd4\u5982\u5173\u95ed\u6253\u5f00\u7684\u6587\u4ef6\u3001\u5173\u95ed\u6570\u636e\u5e93\u8fde\u63a5\u7b49 \u88ab\u76d1\u6d4b\u7684\u4ee3\u7801\u5757\u65e0\u8bba\u6709\u65e0\u5f02\u5e38\u90fd\u4f1a\u81ea\u52a8\u6267\u884c \u672c\u6765\u7a0b\u5e8f\u4e00\u65e6\u51fa\u73b0\u5f02\u5e38\u5c31\u4f1a\u7ec8\u6b62\u8fd0\u884c, \u6709\u4e86\u5f02\u5e38\u5904\u7406\u4ee5\u540e. \u5728\u88ab\u68c0\u6d4b\u7684\u4ee3\u7801\u5757\u51fa\u73b0\u5f02\u5e38\u65f6, \u88ab\u68c0\u6d4b\u7684\u4ee3\u7801\u5757 \u4e2d\u5f02\u5e38\u53d1\u751f\u4f4d\u7f6e\u4e4b\u540e\u7684\u4ee3\u7801\u5c06\u4e0d\u4f1a\u6267\u884c . \u53d6\u800c\u4ee3\u4e4b\u7684\u662f \u6267\u884c\u5339\u914d\u5f02\u5e38\u7684except\u5b50\u4ee3\u7801\u5757, \u5176\u4f59\u4ee3\u7801\u5747\u6b63\u5e38\u8fd0\u884c.","title":"\u5f02\u5e38\u5904\u7406"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/8_%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/#raiseassert","text":"raise\u7531\u7a0b\u5e8f\u5458\u81ea\u5df1\u6765\u660e\u786e\u5730\u89e6\u53d1\u5f02\u5e38 \u65ad\u8a00\u8bed\u53e5assert expression, \u65ad\u5b9a\u8868\u8fbe\u5f0fexpression\u6210\u7acb, \u5426\u5219\u89e6\u53d1\u5f02\u5e38AssertionError class Student : def __init__ ( self , name , age ): if not isinstance ( name , str ): raise TypeError ( 'name must be str' ) if not isinstance ( age , int ): raise TypeError ( 'age must be int' ) self . name = name self . age = age stu1 = Student ( 4573 , 18 ) raise\u4e0eassert age = '18' # -- \u82e5\u8868\u8fbe\u5f0fisinstance(age,int)\u8fd4\u56de\u503c\u4e3aFalse\u5219\u89e6\u53d1\u5f02\u5e38AssertionError assert isinstance ( age , int ) # -- \u7b49\u540c\u4e8e if not isinstance ( age , int ): raise AssertionError","title":"raise\u4e0eassert"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/8_%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/#_3","text":"\u5728\u5185\u7f6e\u5f02\u5e38\u4e0d\u591f\u7528\u7684\u60c5\u51b5\u4e0b, \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7ee7\u627f\u5185\u7f6e\u7684\u5f02\u5e38\u7c7b\u6765\u81ea\u5b9a\u4e49\u5f02\u5e38\u7c7b class PoolEmptyError ( Exception ): # -- \u53ef\u4ee5\u901a\u8fc7\u7ee7\u627fException\u6765\u5b9a\u4e49\u4e00\u4e2a\u5168\u65b0\u7684\u5f02\u5e38 def __init__ ( self , value = 'The proxy source is exhausted' ): # \u53ef\u4ee5\u5b9a\u5236\u521d\u59cb\u5316\u65b9\u6cd5 super ( PoolEmptyError , self ) . __init__ () self . value = value def __str__ ( self ): # -- \u53ef\u4ee5\u5b9a\u4e49\u8be5\u65b9\u6cd5\u7528\u6765\u5b9a\u5236\u89e6\u53d1\u5f02\u5e38\u65f6\u6253\u5370\u5f02\u5e38\u503c\u7684\u683c\u5f0f return '< %s >' % self . value class NetworkIOError ( IOError ): # -- \u4e5f\u53ef\u4ee5\u5728\u7279\u5b9a\u5f02\u5e38\u7684\u57fa\u7840\u4e0a\u6269\u5c55\u4e00\u4e2a\u76f8\u5173\u7684\u5f02\u5e38 pass raise PoolEmptyError # __main__.PoolEmptyError: < The proxy source is exhausted > # raise NetworkIOError('\u8fde\u63a5\u88ab\u62d2\u7edd') # __main__.NetworkIOError: \u8fde\u63a5\u88ab\u62d2\u7edd","title":"\u81ea\u5b9a\u4e49\u5f02\u5e38"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/9_course_select/","text":"\u9879\u76ee\u9700\u6c42 \u00b6 \u89d2\u8272: \u5b66\u6821\u3001\u5b66\u751f\u3001\u8bfe\u7a0b\u3001\u8bb2\u5e08 \u8981\u6c42: 1> \u521b\u5efa\u5317\u4eac\u3001\u4e0a\u6d77\u4e24\u6240\u5b66\u6821 --- \u521b\u5efa\u5b66\u6821 2> \u521b\u5efalinux\u3001python\u3001go \u4e09\u95e8\u8bfe\u7a0b. linux/py\u5728\u5317\u4eac\u5f00,go\u5728\u4e0a\u6d77\u5f00 --- \u521b\u5efa\u8bfe\u7a0b,\u8bfe\u7a0b\u5173\u8054\u5b66\u6821 3> \u7ba1\u7406\u5458 \u521b\u5efa\u5b66\u6821,\u8001\u5e08,\u8bfe\u7a0b --- \u521b\u5efa\u5b66\u6821\u3001\u521b\u5efa\u8001\u5e08\u3001\u521b\u5efa\u8bfe\u7a0b 4> \u8bfe\u7a0b\u5305\u542b\u8bfe\u7a0b\u540d\u79f0 (\u5468\u671f,\u4ef7\u683c\u7b49\u5c5e\u6027) --- \u8bfe\u7a0b\u5c5e\u6027 5> \u5b66\u6821\u5305\u542b\u5b66\u6821\u540d\u79f0\u3001\u5730\u5740\u7b49\u5c5e\u6027 --- \u5b66\u6821\u5c5e\u6027 6> \u521b\u5efa\u8001\u5e08\u89d2\u8272\u8981\u5173\u8054\u5b66\u6821 7> \u5b66\u751f\u767b\u5f55\u540e,\u53ef\u4ee5\u9009\u8fd9\u5b66\u6821\u3001\u9009\u62e9\u8bfe\u7a0b\u3001\u67e5\u770b\u6210\u7ee9. --- \u9009\u62e9\u5b66\u6821,\u9009\u62e9\u8bfe\u7a0b,\u67e5\u770b\u6210\u7ee9 8> \u8001\u5e08\u767b\u5f55\u540e, \u53ef\u4ee5\u67e5\u770b\u6559\u6388\u7684\u8bfe\u7a0b, \u9009\u62e9\u8981\u6559\u6388\u7684\u8bfe\u7a0b, \u67e5\u770b\u8bfe\u7a0b\u4e0b\u7684\u5b66\u751f, \u4fee\u6539\u5b66\u751f\u6210\u7ee9\u7b49. \u5206\u4e3a\u4e09\u4e2a\u89c6\u56fe: \u25ce \u7ba1\u7406\u5458\u89c6\u56fe \u6ce8\u518c \u767b\u5f55 \u521b\u5efa\u5b66\u6821 \u521b\u5efa\u8001\u5e08 \u521b\u5efa\u8bfe\u7a0b \u25ce \u8001\u5e08\u89c6\u56fe \u767b\u5f55 \u9009\u62e9\u8bfe\u7a0b \u67e5\u770b\u8bfe\u7a0b \u67e5\u770b\u5b66\u751f \u4fee\u6539\u5b66\u751f\u6210\u7ee9 \u25ce \u5b66\u751f\u89c6\u56fe \u6ce8\u518c \u767b\u5f55 \u9009\u62e9\u5b66\u6821 \u9009\u62e9\u8bfe\u7a0b \u67e5\u770b\u6210\u7ee9 \u9879\u76ee\u5de5\u7a0b\u76ee\u5f55 \u00b6 One_Piece@DCdeMacBook-Air CourseSelection % tree . \u251c\u2500\u2500 conf \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 settings.py \u251c\u2500\u2500 core \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 admin.py \u2502 \u251c\u2500\u2500 src.py \u2502 \u251c\u2500\u2500 student.py \u2502 \u2514\u2500\u2500 teacher.py \u251c\u2500\u2500 db \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 db_handler.py \u2502 \u2514\u2500\u2500 models.py \u251c\u2500\u2500 interface \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 admin_interface.py \u2502 \u251c\u2500\u2500 common_interface.py \u2502 \u251c\u2500\u2500 student_interface.py \u2502 \u2514\u2500\u2500 teacher_interface.py \u251c\u2500\u2500 lib \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 common.py \u2514\u2500\u2500 start.py ######################################################################## \u3010\u65e5\u5fd7\u3011 \u3010\u7528\u6237\u529f\u80fd\u5c42\u3011 \u3010\u63a5\u53e3\u5c42\u3011 \u3010\u6570\u636e\u5904\u7406\u5c42\u3011 admin\u89c6\u56fe: admin_interface models \u7c7b\u53ca\u65b9\u6cd5 \u6ce8\u518c\u767b\u5f55 teacher_interface db_handler \u4fdd\u5b58\u3001\u67e5\u8be2 \u521b\u5efa\u5b66\u6821\u3001\u8001\u5e08.. student_interface teacher\u89c6\u56fe: common_interface \u767b\u5f55 \u9009\u62e9\u8bfe\u7a0b ... student\u89c6\u56fe: \u767b\u5f55\u3001\u6ce8\u518c \u9009\u62e9\u5b66\u6821 \u9009\u62e9\u8bfe\u7a0b \u67e5\u770b\u6210\u7ee9 \u3010common\u3011 ######################################################################## \u5199\u4ee3\u7801 \u00b6 \u5148\u5199\u597d\u7528\u6237\u529f\u80fd\u5c42\u6846\u67b6.. \u518d\u5b8c\u6210\u4e00\u4e2a\u4e2a\u7684\u529f\u80fd,\u7528\u5230\u5176\u5b83\u5c42\u7684\u65f6\u5019\u518d\u5230\u5176\u5b83\u5c42\u8fdb\u884c\u5b8c\u5584.. # -- start.py import os import sys from core import src path = os . path . dirname ( __file__ ) sys . path . append ( path ) if __name__ == '__main__' : src . run () # -- src.py from core import admin , student , teacher func_dic = { '1' : admin . admin_view , '2' : student . student_view , '3' : teacher . teacher_view } def run (): while True : print ( \"\"\" 1.\u7ba1\u7406\u5458\u89c6\u56fe 2.\u5b66\u751f\u89c6\u56fe 3.\u8001\u5e08\u89c6\u56fe \"\"\" ) choice = input ( \"\u8bf7\u8f93\u5165\u6570\u5b57\u9009\u62e9\u89c6\u56fe >>:\" ) . strip () if choice not in func_dic : continue func_dic [ choice ]() # -- admin.py def admin_register (): pass def admin_login (): pass def create_school (): pass def create_teacher (): pass def create_course (): pass func_dic = { '1' : admin_register , '2' : admin_login , '3' : create_school , '4' : create_teacher , '5' : create_course } def admin_view (): while True : print ( \"\"\" 1.\u6ce8\u518c 2.\u767b\u5f55 3.\u521b\u5efa\u5b66\u6821 4.\u521b\u5efa\u8001\u5e08 5.\u521b\u5efa\u8bfe\u7a0b \"\"\" ) choice = input ( \"\u8bf7\u8f93\u5165\u6570\u5b57\u9009\u62e9\u529f\u80fd >>:\" ) . strip () if choice not in func_dic : continue func_dic [ choice ]() # -- student.py def student_register (): pass def student_login (): pass def choose_school (): pass def choose_course (): pass def check_score (): pass func_dic = { '1' : student_register , '2' : student_login , '3' : choose_school , '4' : choose_course , '5' : check_score } def student_view (): while True : print ( \"\"\" 1.\u6ce8\u518c 2.\u767b\u5f55 3.\u9009\u62e9\u5b66\u6821 4.\u9009\u62e9\u8bfe\u7a0b 5.\u67e5\u770b\u6210\u7ee9 \"\"\" ) choice = input ( \"\u8bf7\u8f93\u5165\u6570\u5b57\u9009\u62e9\u529f\u80fd >>:\" ) . strip () if choice not in func_dic : continue func_dic [ choice ]() # -- teacher.py def teacher_login (): pass def choose_teach_course (): pass def check_course (): pass def check_student (): pass def modify_score (): pass func_dic = { '1' : teacher_login , '2' : choose_teach_course , '3' : check_course , '4' : check_student , '5' : modify_score } def teacher_view (): while True : print ( \"\"\" 1.\u767b\u5f55 2.\u9009\u62e9\u8bfe\u7a0b 3.\u67e5\u770b\u8bfe\u7a0b 4.\u67e5\u770b\u5b66\u751f 5.\u4fee\u6539\u5b66\u751f\u6210\u7ee9 \"\"\" ) choice = input ( \"\u8bf7\u8f93\u5165\u6570\u5b57\u9009\u62e9\u529f\u80fd >>:\" ) . strip () if choice not in func_dic : continue func_dic [ choice ]() \u6700\u6838\u5fc3\u7684\u4ee3\u7801 # -- models.py from db import db_handler class BaseClass : def save ( self ): # -- \u5c06\u5b9e\u4f8b\u5bf9\u8c61\u5b58\u50a8\u5230pickle\u6587\u4ef6\u4e2d\"\u4ee5\u5b9e\u4f8b\u5316\u5bf9\u8c61\u540d\u5b57\u547d\u540d\",\u5e76\u5206\u95e8\u522b\u7c7b\u7684\u5b58\u50a8\u5230\u5bf9\u5e94\u7684\u6587\u4ef6\u5939\u4e0b\u9762\"\u4ee5\u7c7b\u540d\u547d\u540d\" db_handler . save ( self ) @classmethod # -- \u5206\u6790: \u67e5\u8be2\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528\u7c7b\u65b9\u6cd5? # \u82e5\u7528\u5b9e\u4f8b\u5bf9\u8c61\u7684\u7ed1\u5b9a\u65b9\u6cd5,\u9700\u8981\u5148\u628a\u8fd9\u4e2a\u5b9e\u4f8b\u5bf9\u8c61\u751f\u6210\u51fa\u6765\u540e\u518d\u67e5. # \u53ef\u4ee5\u8fd9\u6837\u505a,\u4f46\u611f\u89c9\u751f\u6210\u5bf9\u8c61\u53bb\u67e5\u5bf9\u8c61..\u4e0d\u662f\u5f88perfect. # \u82e5\u7528\u9759\u6001\u65b9\u6cd5,\u9759\u6001\u65b9\u6cd5\u4e0d\u4f1a\u81ea\u52a8\u628a\u7c7b\u4f20\u8fc7\u6765.. \u8be5\u67e5\u8be2\u9700\u8981\u7528\u5230\u7c7b. def get_obj_by_name ( cls , name ): # -- \u6839\u636e\u540d\u5b57\u53d6\u51fa\u5bf9\u5e94pikle\u6587\u4ef6\u4e2d\u5b58\u50a8\u7684\u5b9e\u4f8b\u5bf9\u8c61 # name\u5b9e\u9645\u4e0a\u662f\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684\u540d\u5b57;cls.__name__.lower() \u5c0f\u5199\u7684\u7c7b\u540d return db_handler . select ( name , cls . __name__ . lower ()) class Admin ( BaseClass ): def __init__ ( self , name , pwd ): self . name = name self . pwd = pwd self . save () # -- db_handler.py import os import pickle from conf import settings def save ( obj ): # -- obj\u662f\u6211\u4eec\u8981\u4fdd\u5b58\u7684\u5b9e\u4f8b\u5bf9\u8c61 # obj.__class__ >>> \u5b9e\u4f8b\u8c03\u7528__class__\u5c5e\u6027\u65f6\u4f1a\u6307\u5411\u8be5\u5b9e\u4f8b\u5bf9\u5e94\u7684\u7c7b # obj.__class__.__name__ >>> \u83b7\u53d6\u7c7b\u540d path_dir = os . path . join ( settings . BASE_DB , obj . __class__ . __name__ . lower ()) if not os . path . isdir ( path_dir ): # os.path.exists \u4e5f\u53ef\u4ee5 os . mkdir ( path_dir ) path_obj = os . path . join ( path_dir , obj . name ) # -- \u4e4b\u6240\u4ee5\u7528pickle,\u662f\u56e0\u4e3apickle\u53ef\u4ee5\u76f4\u63a5\u4fdd\u5b58\u5bf9\u8c61.. # \u7528json\u7684\u8bdd\u9700\u8981\u6784\u5efajson\u683c\u5f0f,\u76f8\u5bf9\u590d\u6742\u4e00\u70b9. with open ( path_obj , 'wb' ) as f : pickle . dump ( obj , f ) def select ( obj_name , dir_name ): # -- \u6839\u636eobj _name\u548cdir_type\u5c06\u67d0\u4e00\u4e2a\u6587\u4ef6\u5939\u4e0b\u7684pickle\u6587\u4ef6\u53d6\u51fa\u6765 path_dir = os . path . join ( settings . BASE_DB , dir_name ) # -- \u53ef\u80fd\u4f1a\u51fa\u73b0\u7ba1\u7406\u5458\u5148\u67e5\u8be2,\u518d\u521b\u5efa\u7684\u60c5\u51b5. if not os . path . isdir ( path_dir ): os . mkdir ( path_dir ) path_obj = os . path . join ( path_dir , obj_name ) if os . path . exists ( path_obj ): with open ( path_obj , 'rb' ) as f : return pickle . load ( f ) else : return False \u7b80\u5355\u5206\u6790 \u00b6 \u4ee5Admin\u7ba1\u7406\u5458\u89c6\u56fe\u529f\u80fd\u7684\u5b9e\u73b0\u4e3a\u4f8b \"\"\" \u2605 ---\u7528\u6237\u5c42/\u524d\u7aef \"\"\" \u7ba1\u7406\u5458\u7684\u6ce8\u518c\u529f\u80fd , \u9700\u8981\u7528\u6237\u8f93\u5165name\u548cpwd\u5b57\u6bb5 . \u7a0b\u5e8f\u63a5\u6536\u5230\u8fd9\u4e24\u4e2a\u5b57\u6bb5\u540e , \u8fdb\u884c\u5065\u58ee\u6027\u7684\u5224\u65ad , \u5c31\u5f00\u59cb\u8c03\u7528\u63a5\u53e3 .. \u7b49\u5f85\u7ed3\u679c\u7684\u8fd4\u56de , \u5565\u4e5f\u4e0d\u7528\u7ba1\u5566 !! \u521b\u5efa\u8001\u5e08 \u3001 \u5b66\u6821 \u3001 \u8bfe\u7a0b\u5c31\u662f\u521b\u5efa\u5bf9\u5e94\u7684obj\u4fdd\u5b58\u8d77\u6765 .. \"\"\" \u2605 ---\u63a5\u53e3\u5c42 \"\"\" \u9700\u8981\u5148\u68c0\u67e5\u6ce8\u518c\u7684\u7ba1\u7406\u5458\u662f\u5426\u5df2\u7ecf\u5b58\u5728 , \u9700\u8981\u8c03\u7528\u6570\u636e\u5904\u7406\u5c42 . \u5b58\u5728\u8fd4\u56de False , \"\u5df2\u7ecf\u5b58\u5728\" \u4e0d\u5b58\u5728 \u521b\u5efa\u7ba1\u7406\u5458\u5bf9\u8c61 -- \u901a\u8fc7\u6570\u636e\u5904\u7406\u5c42\u7684models . py\u5b9e\u73b0 \"\"\" \u2605 ---\u6570\u636e\u5904\u7406\u5c42 \"\"\" \u5206\u4e3a\u4e86models . py\u548cdb_handler . py models . py\u91cc\u662f\u4e00\u5806\u7c7b\u53ca\u65b9\u6cd5 Base\u57fa\u7c7b -- \u67e5\u8be2\u548c\u4fdd\u5b58 \u5b66\u6821 \u3001 \u8001\u5e08 \u3001 \u7ba1\u7406\u5458 \u3001 \u5b66\u751f \u3001 \u8bfe\u7a0b \u56db\u4e2a\u7c7b\u90fd\u4f1a\u7ee7\u627fBase\u57fa\u7c7b . \u5728\u5b83\u4eec\u521d\u59cb\u5316\u7684\u65f6\u5019 , \u90fd\u4f1a\u8c03\u7528save () \u65b9\u6cd5 ; \u5728\u5b83\u4eec\u4e2d\u7684\u5c5e\u6027\u53d1\u751f\u6539\u53d8\u65f6\u5019 , \u4e5f\u9700\u8981\u8c03\u7528save () \u65b9\u6cd5\u91cd\u65b0\u4fdd\u5b58 . \u67e5\u8be2\u548c\u4fdd\u5b58\u5728 db_handler . py\u4e2d\u5b9e\u73b0 ! save () \u6253\u5f00\u6587\u4ef6 , \u5f80\u91cc\u9762\u5199 select () \u6253\u5f00\u6587\u4ef6 , \u53d6obj\u8fd4\u56de","title":"\u9879\u76ee"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/9_course_select/#_1","text":"\u89d2\u8272: \u5b66\u6821\u3001\u5b66\u751f\u3001\u8bfe\u7a0b\u3001\u8bb2\u5e08 \u8981\u6c42: 1> \u521b\u5efa\u5317\u4eac\u3001\u4e0a\u6d77\u4e24\u6240\u5b66\u6821 --- \u521b\u5efa\u5b66\u6821 2> \u521b\u5efalinux\u3001python\u3001go \u4e09\u95e8\u8bfe\u7a0b. linux/py\u5728\u5317\u4eac\u5f00,go\u5728\u4e0a\u6d77\u5f00 --- \u521b\u5efa\u8bfe\u7a0b,\u8bfe\u7a0b\u5173\u8054\u5b66\u6821 3> \u7ba1\u7406\u5458 \u521b\u5efa\u5b66\u6821,\u8001\u5e08,\u8bfe\u7a0b --- \u521b\u5efa\u5b66\u6821\u3001\u521b\u5efa\u8001\u5e08\u3001\u521b\u5efa\u8bfe\u7a0b 4> \u8bfe\u7a0b\u5305\u542b\u8bfe\u7a0b\u540d\u79f0 (\u5468\u671f,\u4ef7\u683c\u7b49\u5c5e\u6027) --- \u8bfe\u7a0b\u5c5e\u6027 5> \u5b66\u6821\u5305\u542b\u5b66\u6821\u540d\u79f0\u3001\u5730\u5740\u7b49\u5c5e\u6027 --- \u5b66\u6821\u5c5e\u6027 6> \u521b\u5efa\u8001\u5e08\u89d2\u8272\u8981\u5173\u8054\u5b66\u6821 7> \u5b66\u751f\u767b\u5f55\u540e,\u53ef\u4ee5\u9009\u8fd9\u5b66\u6821\u3001\u9009\u62e9\u8bfe\u7a0b\u3001\u67e5\u770b\u6210\u7ee9. --- \u9009\u62e9\u5b66\u6821,\u9009\u62e9\u8bfe\u7a0b,\u67e5\u770b\u6210\u7ee9 8> \u8001\u5e08\u767b\u5f55\u540e, \u53ef\u4ee5\u67e5\u770b\u6559\u6388\u7684\u8bfe\u7a0b, \u9009\u62e9\u8981\u6559\u6388\u7684\u8bfe\u7a0b, \u67e5\u770b\u8bfe\u7a0b\u4e0b\u7684\u5b66\u751f, \u4fee\u6539\u5b66\u751f\u6210\u7ee9\u7b49. \u5206\u4e3a\u4e09\u4e2a\u89c6\u56fe: \u25ce \u7ba1\u7406\u5458\u89c6\u56fe \u6ce8\u518c \u767b\u5f55 \u521b\u5efa\u5b66\u6821 \u521b\u5efa\u8001\u5e08 \u521b\u5efa\u8bfe\u7a0b \u25ce \u8001\u5e08\u89c6\u56fe \u767b\u5f55 \u9009\u62e9\u8bfe\u7a0b \u67e5\u770b\u8bfe\u7a0b \u67e5\u770b\u5b66\u751f \u4fee\u6539\u5b66\u751f\u6210\u7ee9 \u25ce \u5b66\u751f\u89c6\u56fe \u6ce8\u518c \u767b\u5f55 \u9009\u62e9\u5b66\u6821 \u9009\u62e9\u8bfe\u7a0b \u67e5\u770b\u6210\u7ee9","title":"\u9879\u76ee\u9700\u6c42"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/9_course_select/#_2","text":"One_Piece@DCdeMacBook-Air CourseSelection % tree . \u251c\u2500\u2500 conf \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 settings.py \u251c\u2500\u2500 core \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 admin.py \u2502 \u251c\u2500\u2500 src.py \u2502 \u251c\u2500\u2500 student.py \u2502 \u2514\u2500\u2500 teacher.py \u251c\u2500\u2500 db \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 db_handler.py \u2502 \u2514\u2500\u2500 models.py \u251c\u2500\u2500 interface \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 admin_interface.py \u2502 \u251c\u2500\u2500 common_interface.py \u2502 \u251c\u2500\u2500 student_interface.py \u2502 \u2514\u2500\u2500 teacher_interface.py \u251c\u2500\u2500 lib \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 common.py \u2514\u2500\u2500 start.py ######################################################################## \u3010\u65e5\u5fd7\u3011 \u3010\u7528\u6237\u529f\u80fd\u5c42\u3011 \u3010\u63a5\u53e3\u5c42\u3011 \u3010\u6570\u636e\u5904\u7406\u5c42\u3011 admin\u89c6\u56fe: admin_interface models \u7c7b\u53ca\u65b9\u6cd5 \u6ce8\u518c\u767b\u5f55 teacher_interface db_handler \u4fdd\u5b58\u3001\u67e5\u8be2 \u521b\u5efa\u5b66\u6821\u3001\u8001\u5e08.. student_interface teacher\u89c6\u56fe: common_interface \u767b\u5f55 \u9009\u62e9\u8bfe\u7a0b ... student\u89c6\u56fe: \u767b\u5f55\u3001\u6ce8\u518c \u9009\u62e9\u5b66\u6821 \u9009\u62e9\u8bfe\u7a0b \u67e5\u770b\u6210\u7ee9 \u3010common\u3011 ########################################################################","title":"\u9879\u76ee\u5de5\u7a0b\u76ee\u5f55"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/9_course_select/#_3","text":"\u5148\u5199\u597d\u7528\u6237\u529f\u80fd\u5c42\u6846\u67b6.. \u518d\u5b8c\u6210\u4e00\u4e2a\u4e2a\u7684\u529f\u80fd,\u7528\u5230\u5176\u5b83\u5c42\u7684\u65f6\u5019\u518d\u5230\u5176\u5b83\u5c42\u8fdb\u884c\u5b8c\u5584.. # -- start.py import os import sys from core import src path = os . path . dirname ( __file__ ) sys . path . append ( path ) if __name__ == '__main__' : src . run () # -- src.py from core import admin , student , teacher func_dic = { '1' : admin . admin_view , '2' : student . student_view , '3' : teacher . teacher_view } def run (): while True : print ( \"\"\" 1.\u7ba1\u7406\u5458\u89c6\u56fe 2.\u5b66\u751f\u89c6\u56fe 3.\u8001\u5e08\u89c6\u56fe \"\"\" ) choice = input ( \"\u8bf7\u8f93\u5165\u6570\u5b57\u9009\u62e9\u89c6\u56fe >>:\" ) . strip () if choice not in func_dic : continue func_dic [ choice ]() # -- admin.py def admin_register (): pass def admin_login (): pass def create_school (): pass def create_teacher (): pass def create_course (): pass func_dic = { '1' : admin_register , '2' : admin_login , '3' : create_school , '4' : create_teacher , '5' : create_course } def admin_view (): while True : print ( \"\"\" 1.\u6ce8\u518c 2.\u767b\u5f55 3.\u521b\u5efa\u5b66\u6821 4.\u521b\u5efa\u8001\u5e08 5.\u521b\u5efa\u8bfe\u7a0b \"\"\" ) choice = input ( \"\u8bf7\u8f93\u5165\u6570\u5b57\u9009\u62e9\u529f\u80fd >>:\" ) . strip () if choice not in func_dic : continue func_dic [ choice ]() # -- student.py def student_register (): pass def student_login (): pass def choose_school (): pass def choose_course (): pass def check_score (): pass func_dic = { '1' : student_register , '2' : student_login , '3' : choose_school , '4' : choose_course , '5' : check_score } def student_view (): while True : print ( \"\"\" 1.\u6ce8\u518c 2.\u767b\u5f55 3.\u9009\u62e9\u5b66\u6821 4.\u9009\u62e9\u8bfe\u7a0b 5.\u67e5\u770b\u6210\u7ee9 \"\"\" ) choice = input ( \"\u8bf7\u8f93\u5165\u6570\u5b57\u9009\u62e9\u529f\u80fd >>:\" ) . strip () if choice not in func_dic : continue func_dic [ choice ]() # -- teacher.py def teacher_login (): pass def choose_teach_course (): pass def check_course (): pass def check_student (): pass def modify_score (): pass func_dic = { '1' : teacher_login , '2' : choose_teach_course , '3' : check_course , '4' : check_student , '5' : modify_score } def teacher_view (): while True : print ( \"\"\" 1.\u767b\u5f55 2.\u9009\u62e9\u8bfe\u7a0b 3.\u67e5\u770b\u8bfe\u7a0b 4.\u67e5\u770b\u5b66\u751f 5.\u4fee\u6539\u5b66\u751f\u6210\u7ee9 \"\"\" ) choice = input ( \"\u8bf7\u8f93\u5165\u6570\u5b57\u9009\u62e9\u529f\u80fd >>:\" ) . strip () if choice not in func_dic : continue func_dic [ choice ]() \u6700\u6838\u5fc3\u7684\u4ee3\u7801 # -- models.py from db import db_handler class BaseClass : def save ( self ): # -- \u5c06\u5b9e\u4f8b\u5bf9\u8c61\u5b58\u50a8\u5230pickle\u6587\u4ef6\u4e2d\"\u4ee5\u5b9e\u4f8b\u5316\u5bf9\u8c61\u540d\u5b57\u547d\u540d\",\u5e76\u5206\u95e8\u522b\u7c7b\u7684\u5b58\u50a8\u5230\u5bf9\u5e94\u7684\u6587\u4ef6\u5939\u4e0b\u9762\"\u4ee5\u7c7b\u540d\u547d\u540d\" db_handler . save ( self ) @classmethod # -- \u5206\u6790: \u67e5\u8be2\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528\u7c7b\u65b9\u6cd5? # \u82e5\u7528\u5b9e\u4f8b\u5bf9\u8c61\u7684\u7ed1\u5b9a\u65b9\u6cd5,\u9700\u8981\u5148\u628a\u8fd9\u4e2a\u5b9e\u4f8b\u5bf9\u8c61\u751f\u6210\u51fa\u6765\u540e\u518d\u67e5. # \u53ef\u4ee5\u8fd9\u6837\u505a,\u4f46\u611f\u89c9\u751f\u6210\u5bf9\u8c61\u53bb\u67e5\u5bf9\u8c61..\u4e0d\u662f\u5f88perfect. # \u82e5\u7528\u9759\u6001\u65b9\u6cd5,\u9759\u6001\u65b9\u6cd5\u4e0d\u4f1a\u81ea\u52a8\u628a\u7c7b\u4f20\u8fc7\u6765.. \u8be5\u67e5\u8be2\u9700\u8981\u7528\u5230\u7c7b. def get_obj_by_name ( cls , name ): # -- \u6839\u636e\u540d\u5b57\u53d6\u51fa\u5bf9\u5e94pikle\u6587\u4ef6\u4e2d\u5b58\u50a8\u7684\u5b9e\u4f8b\u5bf9\u8c61 # name\u5b9e\u9645\u4e0a\u662f\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684\u540d\u5b57;cls.__name__.lower() \u5c0f\u5199\u7684\u7c7b\u540d return db_handler . select ( name , cls . __name__ . lower ()) class Admin ( BaseClass ): def __init__ ( self , name , pwd ): self . name = name self . pwd = pwd self . save () # -- db_handler.py import os import pickle from conf import settings def save ( obj ): # -- obj\u662f\u6211\u4eec\u8981\u4fdd\u5b58\u7684\u5b9e\u4f8b\u5bf9\u8c61 # obj.__class__ >>> \u5b9e\u4f8b\u8c03\u7528__class__\u5c5e\u6027\u65f6\u4f1a\u6307\u5411\u8be5\u5b9e\u4f8b\u5bf9\u5e94\u7684\u7c7b # obj.__class__.__name__ >>> \u83b7\u53d6\u7c7b\u540d path_dir = os . path . join ( settings . BASE_DB , obj . __class__ . __name__ . lower ()) if not os . path . isdir ( path_dir ): # os.path.exists \u4e5f\u53ef\u4ee5 os . mkdir ( path_dir ) path_obj = os . path . join ( path_dir , obj . name ) # -- \u4e4b\u6240\u4ee5\u7528pickle,\u662f\u56e0\u4e3apickle\u53ef\u4ee5\u76f4\u63a5\u4fdd\u5b58\u5bf9\u8c61.. # \u7528json\u7684\u8bdd\u9700\u8981\u6784\u5efajson\u683c\u5f0f,\u76f8\u5bf9\u590d\u6742\u4e00\u70b9. with open ( path_obj , 'wb' ) as f : pickle . dump ( obj , f ) def select ( obj_name , dir_name ): # -- \u6839\u636eobj _name\u548cdir_type\u5c06\u67d0\u4e00\u4e2a\u6587\u4ef6\u5939\u4e0b\u7684pickle\u6587\u4ef6\u53d6\u51fa\u6765 path_dir = os . path . join ( settings . BASE_DB , dir_name ) # -- \u53ef\u80fd\u4f1a\u51fa\u73b0\u7ba1\u7406\u5458\u5148\u67e5\u8be2,\u518d\u521b\u5efa\u7684\u60c5\u51b5. if not os . path . isdir ( path_dir ): os . mkdir ( path_dir ) path_obj = os . path . join ( path_dir , obj_name ) if os . path . exists ( path_obj ): with open ( path_obj , 'rb' ) as f : return pickle . load ( f ) else : return False","title":"\u5199\u4ee3\u7801"},{"location":"3_python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/9_course_select/#_4","text":"\u4ee5Admin\u7ba1\u7406\u5458\u89c6\u56fe\u529f\u80fd\u7684\u5b9e\u73b0\u4e3a\u4f8b \"\"\" \u2605 ---\u7528\u6237\u5c42/\u524d\u7aef \"\"\" \u7ba1\u7406\u5458\u7684\u6ce8\u518c\u529f\u80fd , \u9700\u8981\u7528\u6237\u8f93\u5165name\u548cpwd\u5b57\u6bb5 . \u7a0b\u5e8f\u63a5\u6536\u5230\u8fd9\u4e24\u4e2a\u5b57\u6bb5\u540e , \u8fdb\u884c\u5065\u58ee\u6027\u7684\u5224\u65ad , \u5c31\u5f00\u59cb\u8c03\u7528\u63a5\u53e3 .. \u7b49\u5f85\u7ed3\u679c\u7684\u8fd4\u56de , \u5565\u4e5f\u4e0d\u7528\u7ba1\u5566 !! \u521b\u5efa\u8001\u5e08 \u3001 \u5b66\u6821 \u3001 \u8bfe\u7a0b\u5c31\u662f\u521b\u5efa\u5bf9\u5e94\u7684obj\u4fdd\u5b58\u8d77\u6765 .. \"\"\" \u2605 ---\u63a5\u53e3\u5c42 \"\"\" \u9700\u8981\u5148\u68c0\u67e5\u6ce8\u518c\u7684\u7ba1\u7406\u5458\u662f\u5426\u5df2\u7ecf\u5b58\u5728 , \u9700\u8981\u8c03\u7528\u6570\u636e\u5904\u7406\u5c42 . \u5b58\u5728\u8fd4\u56de False , \"\u5df2\u7ecf\u5b58\u5728\" \u4e0d\u5b58\u5728 \u521b\u5efa\u7ba1\u7406\u5458\u5bf9\u8c61 -- \u901a\u8fc7\u6570\u636e\u5904\u7406\u5c42\u7684models . py\u5b9e\u73b0 \"\"\" \u2605 ---\u6570\u636e\u5904\u7406\u5c42 \"\"\" \u5206\u4e3a\u4e86models . py\u548cdb_handler . py models . py\u91cc\u662f\u4e00\u5806\u7c7b\u53ca\u65b9\u6cd5 Base\u57fa\u7c7b -- \u67e5\u8be2\u548c\u4fdd\u5b58 \u5b66\u6821 \u3001 \u8001\u5e08 \u3001 \u7ba1\u7406\u5458 \u3001 \u5b66\u751f \u3001 \u8bfe\u7a0b \u56db\u4e2a\u7c7b\u90fd\u4f1a\u7ee7\u627fBase\u57fa\u7c7b . \u5728\u5b83\u4eec\u521d\u59cb\u5316\u7684\u65f6\u5019 , \u90fd\u4f1a\u8c03\u7528save () \u65b9\u6cd5 ; \u5728\u5b83\u4eec\u4e2d\u7684\u5c5e\u6027\u53d1\u751f\u6539\u53d8\u65f6\u5019 , \u4e5f\u9700\u8981\u8c03\u7528save () \u65b9\u6cd5\u91cd\u65b0\u4fdd\u5b58 . \u67e5\u8be2\u548c\u4fdd\u5b58\u5728 db_handler . py\u4e2d\u5b9e\u73b0 ! save () \u6253\u5f00\u6587\u4ef6 , \u5f80\u91cc\u9762\u5199 select () \u6253\u5f00\u6587\u4ef6 , \u53d6obj\u8fd4\u56de","title":"\u7b80\u5355\u5206\u6790"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/0_%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%82%A8%E5%A4%87/","text":"\u6b64\u5c0f\u8282\u4e3a\u56de\u987e(\u603b\u7ed3\u5f00\u53d1\u5fc5\u77e5\u5fc5\u4f1a\u7684\u7f51\u7edc\u77e5\u8bc6), \u8be6\u7ec6\u7684\u7ec6\u8282\u8bf7\u770b\"\u8ba1\u7b97\u673a\u57fa\u7840\"\u7684\u5185\u5bb9. C/S \u00b6 C client\u5ba2\u6237\u7aef \u4e0e S server\u670d\u52a1\u7aef \u57fa\u4e8e\u7f51\u7edc\u8fdb\u884c\u901a\u4fe1. B/S \u5305\u542b\u4e8e C/S. B\u6307\u7684\u662fbrowser\u6d4f\u89c8\u5668 , \u4ee5\u6d4f\u89c8\u5668\u4f5c\u4e3a\u5ba2\u6237\u7aef. server\u7aef\u5fc5\u987b\u6ee1\u8db3\u7684\u4e24\u4e2a\u6761\u4ef6: 1> \u4fdd\u8bc1\u4e00\u5957\u4f53\u7cfb(\u7f51\u7edc - \u786c\u4ef6 - OS - server\u7684\u5e94\u7528\u8f6f\u4ef6)\u7684\u7a33\u5b9a\u8fd0\u884c \u5f00\u53d1\u4eba\u5458\u5173\u6ce8\u4e0e\u670d\u52a1\u7aef\u7684\u5e94\u7528\u8f6f\u4ef6\u5373\u53ef,\u7f51\u7edc\u3001\u786c\u4ef6\u3001Linux\u662f\u8fd0\u7ef4\u8d1f\u8d23\u7684. 2> \u670d\u52a1\u7aef\u5fc5\u987b\u7ed1\u5b9a\u4e00\u4e2a\u56fa\u5b9a\u7684\u5730\u5740.(IP + \u7aef\u53e3) \u4e92\u8054\u7f51 \u00b6 \u4e92\u8054\u7f51 = \u7269\u7406\u8fde\u63a5\u4ecb\u8d28 + \u4e92\u8054\u7f51\u534f\u8bae Ps: \u7269\u7406\u8fde\u63a5\u4ecb\u8d28(\u5149\u7ea4\u3001\u7535\u7f06\u3001\u4ea4\u6362\u673a\u3001\u8def\u7531\u5668..)\u662f\u7f51\u7edc\u8fd0\u7ef4\u7ba1\u7684.. \u6211\u4eec\u5173\u6ce8\u7684\u662f\u534f\u8bae!! \"\u4e92\u8054\u7f51\u534f\u8bae\u5373\u8ba1\u7b97\u673a\u754c\u7684\u82f1\u8bed\" (\u5168\u4e16\u754c\u7684\u901a\u7528\u8bed\u8a00\u662f\u82f1\u8bed) \u6240\u6709\u7684\u8ba1\u7b97\u673a\u90fd\u5f97\u5b66\u4f1a\u4e92\u8054\u7f51\u534f\u8bae,\u624d\u80fd\u6309\u7167\u534f\u8bae\u89c4\u5b9a\u7684\u6807\u51c6\u7ec4\u7ec7\u6570\u636e\u6cbf\u7740\u7f51\u7edc\u8fdb\u884c\u901a\u4fe1. OSI\u7ec4\u7ec7\u6839\u636e\u4e92\u8054\u7f51\u534f\u8bae\u529f\u80fd\u7684\u4e0d\u540c,\u5c06\u5176\u5206\u4e3a\u4e86\u4e03\u5c42: \u5e94\u8868\u4f1a\u4f20\u7f51\u6570\u7269 \u4f46\u4f5c\u4e3a\u5f00\u53d1\u4eba\u5458,\u53ea\u9700\u8981\u638c\u63e1\u4e94\u5c42: \u5e94 - \u4f20 - \u7f51 - \u6570 - \u7269 \u534f\u8bae \u4e94\u5c42 \u6807\u8bc6\u5730\u5740\u7684\u65b9\u5f0f HTTP\u3001FTP\u3001Email \u5e94 TCP\u3001UDP \u4f20 ip + mac + port IP \u7f51 ip + mac ethernet\u3001arp \u6570 mac \u9ad8\u4f4e\u7535\u4fe1\u53f7 \u7269 Ethernet\u534f\u8bae \u00b6 \u4ee5\u592a\u7f51\u534f\u8bae\u6709\u4e09\u5927\u89c4\u5b9a: 1> \u89c4\u5b9a\u4e00\u7ec4\u7535\u4fe1\u53f7\u6784\u6210\u4e00\u4e2a\u6570\u636e\u5e27 2> \u6bcf\u4e00 \u6570\u636e\u5e27 \u7531\u62a5\u5934head \"\u56fa\u5b9a\u957f\u5ea618\u4e2a\u5b57\u8282\" + \u6570\u636edata\u4e24\u90e8\u5206\u7ec4\u6210 \u6e90 \"mac\" \u5730\u5740 \u76ee\u6807 \"mac\" \u5730\u5740 \u6570\u636e\u7c7b\u578b DATA 6bit 6bit 6bit 46 -1500bit 3> \u89c4\u5b9a\u63a5\u5165\u7684internet\u7684\u8bbe\u5907\u90fd\u5fc5\u987b\u5177\u5907\u7f51\u5361,\u6bcf\u5757\u7f51\u5361\u4e0a\u5728\u51fa\u5382\u7684\u65f6\u5019\u90fd\u70e7\u5f55\u4e86\u5168\u4e16\u754c\u552f\u4e00\u7684mac\u5730\u5740. mac\u5730\u5740 48\u4f4d\u4e8c\u8fdb\u5236\u662f,\u753116\u4f4d\u5341\u516d\u8fdb\u5236\u6570\u8868\u793a,\u524d6\u4f4d\u5382\u5546\u7f16\u53f7,\u540e\u516d\u4f4d\u6d41\u6c34\u7ebf\u53f7. \u601d\u8003? \u6709\u4e86\u4ee5\u592a\u7f51\u534f\u8bae\u548c\u7269\u7406\u8fde\u63a5\u4ecb\u8d28,\u5c31\u80fd\u5b9e\u73b0\u5168\u4e16\u754c\u8ba1\u7b97\u673a\u4e4b\u95f4\u7684\u901a\u4fe1\u4e86\u5417\uff1f \u55ef! \u7406\u8bba\u4e0aok\u7684. \u4f46\u8981\u77e5\u9053 \u4ee5\u592a\u7f51\u534f\u8bae\u91c7\u7528\u4e00\u79cd\u53e4\u8001\u7684\u65b9\u5f0f\u901a\u4fe1: \u5e7f\u64ad. \u6709\u8fd9\u6837\u4e00\u53e5\u8c1a\u8bed: \u8ba1\u7b97\u673a\u901a\u4fe1\u57fa\u672c\u9760\u543c \u771f\u5b9e\u60c5\u51b5\u4e0b\u662f\u4e0d\u884c\u7684! \u4ece\u4e24\u65b9\u9762\u8003\u8651: \u4e00\u65b9\u9762,\u4ea7\u751f\u5927\u91cf\u7684\u5e7f\u64ad\u5305 ( \u5c31\u662f\u6570\u636e\u5e27,\u91cc\u9762\u4f1a\u6709\u6e90mac\u5730\u5740\u548c\u76ee\u6807mac ) \u4f1a\u9020\u6210\u7f51\u7edc\u98ce\u66b4; \u4e8c\u65b9\u9762,\u4ea4\u6362\u673a\u7684 mac\u5730\u5740\u8868 ( mac\u5730\u5740\u4e0e\u4ea4\u6362\u673a\u7aef\u53e3\u7684\u6620\u5c04 ) \u4e0d\u53ef\u80fd\u65e0\u9650\u5927. \u4ea4\u6362\u673a\u5177\u5907mac\u5730\u5740\u5b66\u4e60\u529f\u80fd! \"\u543c\"\u53ea\u80fd\u5728\u5f53\u524d\u6240\u5904\u7684 \u5c40\u57df\u7f51/\u5b50\u7f51/\u7f51\u6bb5/\u5e7f\u64ad\u57df \u4e2d\u543c! \u4ee5\u592a\u7f51\u534f\u8bae\u7684mac\u5730\u5740\u662f\u8d70\u4e0d\u51fa\u5e7f\u64ad\u57df\u7684!! mac\u5730\u5740\u80fd\u6807\u8bc6\u4e00\u53f0\u4e3b\u673a\u5728\u5c40\u57df\u7f51\u4e2d\u7684\u54ea\u4e2a\u4f4d\u7f6e. IP\u534f\u8bae \u00b6 IP\u534f\u8bae\u6709\u4e8c\u5927\u89c4\u5b9a: 1> \u89c4\u5b9a\u6bcf\u53f0\u8ba1\u7b97\u673a\u90fd\u5f97\u914d\u4e00\u4e2aIP\u5730\u5740 (\u73b0\u76ee\u524d\u662fIPv4\u5730\u5740) IPv4\u5730\u5740\u9075\u7167\u70b9\u5206\u5341\u8fdb\u5236\u7ec4\u6210,\u6709\u56db\u6bb5,\u6bcf\u6bb5\u90fd\u662f8\u4f4d\u4e8c\u8fdb\u5236\u6570,\u6362\u6210\u5341\u8fdb\u5236\u6570,\u6bcf\u6bb5\u7684\u8303\u56f4\u90fd\u662f0-255. 2> \u89c4\u5b9a\u53d1\u9001\u7684 \u6570\u636e\u62a5 \u7531\u62a5\u5934\u548c\u6570\u636e\u4e24\u90e8\u5206\u7ec4\u6210. \u62a5\u5934\u5305\u542b \u6e90IP\u5730\u5740 \u548c \u76ee\u6807IP\u5730\u5740 ! IP\u5730\u5740\u548c\u5b50\u7f51\u63a9\u7801\u4f5c\u6309\u4f4d\u4e0e\u8fd0\u7b97,\u53ef\u4ee5\u5f97\u5230\u5b50\u7f51\u5730\u5740/\u7f51\u7edc\u5730\u5740! \u82e5\u901a\u4fe1\u53cc\u65b9\u7684\u4e3b\u673a\u7684\u7f51\u7edc\u5730\u5740\u76f8\u540c, \u5219\u7528\u4ee5\u592a\u7f51\u534f\u8bae,\u57fa\u4e8emac\u5730\u5740\u901a\u8fc7\u6570\u636e\u94fe\u8def\u5c42\u7684\u4e8c\u5c42\u4ea4\u6362\u673a\u8fdb\u884c\u5e7f\u64ad. \u82e5\u4e0d\u76f8\u540c,\u5219\u9700\u8981\u8de8\u5c40\u57df\u7f51\u901a\u4fe1,\u6d89\u53ca\u5230\u8def\u7531\u534f\u8bae(\u4f1a\u6709\u4e00\u4e2a\u8def\u7531\u8868)\u7b49.. \u4e86\u89e3\u5373\u53ef,\u65e0\u9700\u638c\u63e1. Ps: \u4e0d\u5728\u540c\u4e00\u5c40\u57df\u7f51,\u4f1a\u5c06\u6570\u636e\u5305\u4ea4\u7ed9\u7f51\u5173,\u6570\u636e\u5305\u4e2d\"\u5c01\u88c5\u7684\u76ee\u6807mac\u662fmac(\u7f51\u5173)\" IP + mac\u5730\u5740\u80fd\u6807\u8bc6\u5168\u4e16\u754c\u8303\u56f4\u5185\u72ec\u4e00\u65e0\u4e8c\u7684\u4e00\u53f0\u8ba1\u7b97\u673a. \u6709\u65f6\u5019\u53ea\u8bf4IP\u662f\u56e0\u4e3aARP\u5728\u80cc\u540e\u627e\u5230\u4e86MAC. IP\u627e\u5230\u4e3b\u673a\u5728\u54ea\u4e2a\u5c40\u57df\u7f51,MAC\u627e\u5230\u4e3b\u673a\u5728\u5c40\u57df\u7f51\u7684\u54ea\u4e2a\u4f4d\u7f6e!! \u6211\u4eec\u5224\u65ad\u53cc\u65b9\u80fd\u5426\u80fd\u6210\u529f\u901a\u4fe1 , \u4f1aping\u5bf9\u65b9\u7684IP\u5730\u5740 . \u4f46\u8fd9\u5e76\u4e0d\u610f\u5473\u7740 , \u53ea\u9700\u8981IP\u5730\u5740\u5c31\u884c\u5566 ! \u627e\u5230\u5bf9\u65b9\u5904\u4e8e\u54ea\u4e2a\u5c40\u57df\u7f51\u540e , ARP\u534f\u8bae\u4f1a\u53d1\u9001 \"ARP\u5e7f\u64ad\u5305\" \u5e2e\u6211\u4eec\u62ff\u5230\u6b64\u5c40\u57df\u7f51\u91cc\u8be5IP\u5bf9\u5e94\u7684mac\u5730\u5740 !!! \u62ff\u5230\u76ee\u6807mac\u540e , \u518d\u5f00\u59cb\u5c01\u88c5\u4ee5\u592a\u7f51\u534f\u8bae\u7684\u62a5\u5934 , \u53d1\u9001\u771f\u6b63\u7684\u6570\u636e ! \u57fa\u4e8e\u7f51\u7edc\u5c42\u548c\u6570\u636e\u94fe\u8def\u5c42\u5982\u4f55\u8fdb\u884c\u901a\u4fe1\u7684 \uff1f \u7ec6\u8282\u8bf7\u770b \u8ba1\u7b97\u673a\u7f51\u7edc\u4e4b\u7f51\u7edc\u5c42 \u7684\u5185\u5bb9 . ( \u5f00\u53d1\u4e86\u89e3\u5373\u53ef ) \u5185\u5fc3OS : \u5f53\u65f6\u5f04\u660e\u767d\u7684\u8fc7\u7a0b\u4e5f\u633a\u75db\u82e6\u7684 .. Hhh \u60f3\u7740\u4ee5\u540e\u8ba1\u7b97\u673a\u8003\u7814 ( 408 ) \u4f1a\u8003\u8ba1\u7b97\u673a\u7f51\u7edc , \u4e5f\u5c31\u8212\u5766\u4e86\u4e9b\u8bb8 . \u5148\u4e86\u89e3\u561b ! TCP/UDP\u534f\u8bae \u00b6 \u5ba2\u6237\u7aef\u8f6f\u4ef6\u4e0e\u670d\u52a1\u7aef\u8f6f\u4ef6\u901a\u4fe1,C\u627e\u5230S\u5728\u54ea\u8fd8\u4e0d\u591f,\u8fd8\u5f97\u627e\u5230S\u4e0a\u8fd0\u884c\u7684\u591a\u4e2a\u8f6f\u4ef6\u4e2d\u7684\u90a3\u4e00\u4e2a!! TCP\u548cUDP\u662f\u57fa\u4e8e\u7aef\u53e3\u5de5\u4f5c\u7684\u534f\u8bae \u670d\u52a1\u7aef\u6bcf\u542f\u52a8\u4e00\u4e2a\u57fa\u4e8e\u4e92\u8054\u7f51\u901a\u4fe1\u7684\u7a0b\u5e8f,\u90fd\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u672c\u4e3b\u673a\u552f\u4e00\u7684\u7aef\u53e3\u53f7! \u7aef\u53e3\u53f7\u8303\u56f4: 0 - 65535 0 - 1024 \u7ed9\u64cd\u4f5c\u7cfb\u7edf\u9884\u7559\u7684, 1025 - 65535\u7ed9\u8f6f\u4ef6\u7684. IP + mac + port \u80fd\u6807\u8bc6\u5168\u4e16\u754c\u8303\u56f4\u5185\u72ec\u4e00\u65e0\u4e8c\u7684\u4e00\u4e2a\u57fa\u4e8e\u7f51\u7edc\u901a\u4fe1\u7684\u5e94\u7528\u8f6f\u4ef6!! \u56e0\u4e3aARP\u534f\u8bae\u7684\u5b58\u5728,\u901a\u5e38\u4f1a\u8bf4\u662f IP + port. C/S\u90fd\u9700\u8981IP\u548cport, \u4f46 \u670d\u52a1\u7aef\u7684IP\u548cport\u9700\u8981\u56fa\u5b9a! ( \u54ea\u6015\u5b95\u673a\u540e\u91cd\u542f\u4e5f\u4e0d\u80fd\u53d8! ),\u5ba2\u6237\u7aef\u4e0d\u9700\u8981\u56fa\u5b9a. HTTP\u534f\u8bae \u00b6 \u5e94\u7528\u8f6f\u4ef6\u5de5\u4f5c\u5728\u5e94\u7528\u5c42, \u81ea\u5df1\u5199\u7684\u5e94\u7528\u8f6f\u4ef6\u53ef\u4ee5\u81ea\u4e2a\u513f\u5b9a\u5236\u5e94\u7528\u5c42\u7684\u534f\u8bae! \u6bd4\u5982: \u6d4f\u89c8\u5668\u8fd9\u4e2a\u5e94\u7528\u8f6f\u4ef6\u5c31\u6267\u884c\u4e86http\u534f\u8bae\u548ctcp\u534f\u8bae.. \u8981\u77e5\u9053, \u901a\u4fe1\u6700\u6839\u672c\u7684\u76ee\u7684\u662f\u62ff\u5230\u6574\u4e2a\u4e92\u8054\u7f51\u91cc\u60f3\u8981\u8bbf\u95ee\u7684\u90a3\u4e2a\u8d44\u6e90!! \u4e0a\u7f51\u7684\u8fc7\u7a0b\u672c\u8d28\u5c31\u662f\u8d44\u6e90\u4e0b\u8f7d\u548c\u4e0a\u4f20\u7684\u8fc7\u7a0b! url \u7edf\u4e00\u8d44\u6e90\u5b9a\u4f4d\u7b26\u53f7 url = \u5e94\u7528\u534f\u8bae\u90e8\u5206 + \u57df\u540d\u548c\u7aef\u53e3 + \u8def\u5f84 https : // www . zhihu . com / column / c_1189883314197168128 \u5e94\u7528\u534f\u8bae\u90e8\u5206 https : // # -- \u4e5f\u6709\u53ef\u80fd\u662fhtp:// \u57df\u540d\u548c\u7aef\u53e3 www . zhihu . com : 80 # -- \u9ed8\u8ba4\u7aef\u53e3\u53f7\u662f80,\u6d4f\u89c8\u5668\u540e\u81ea\u52a8\u586b\u5145. \u8def\u5f84 column / c_1189883314197168128 \u6ce8\u610f : 80 \u662f\u670d\u52a1\u7aef\u7684\u7aef\u53e3\u53f7 , \u57fa\u4e8e\u7f51\u7edc\u901a\u4fe1\u7684web\u670d\u52a1 ( \u63d0\u4f9b\u7f51\u9875\u670d\u52a1\u7684 ) \u90fd\u662f\u7ed1\u5b9a80\u7aef\u53e3 . \u7ea6\u5b9a\u4fd7\u6210\u7684 . \u5e38\u89c1\u9ed8\u8ba4\u7aef\u53e3 : DHCP\u7aef\u53e3\u53f767 ; DNS\u7aef\u53e3\u53f753 url\u5730\u5740\u662f\u7528\u6765\u6807\u8bc6\u5168\u4e16\u754c\u8303\u56f4\u5185\u72ec\u4e00\u65e0\u4e8c\u7684\u4e00\u4e2a\u8d44\u6e90\u7684!! \u5c06url\u5730\u5740\u62c6\u5206,\u53ef\u4ee5\u53d1\u73b0,url\u662f\u5efa\u7acb\u5728ip+mac+port\u4e4b\u4e0a\u7684! [\u6d4f\u89c8\u5668\u6253\u5f00\u4e00\u7bc7\u535a\u5ba2\u7684\u8fc7\u7a0b!!] \u6d4f\u89c8\u5668\u548c\u7528\u6237\u8fdb\u884c\u4ea4\u4e92 \"\u7528\u6237\u70b9\u51fb\u67d0\u4e2a\u94fe\u63a5\" , \u4ea7\u751f\u4e86\u4e00\u4e2aurl\u5730\u5740. \u6d4f\u89c8\u5668\u4e0d\u7740\u6025\u53d1\u9001\u8bf7\u6c42. \u4f1a\u5148\u505a\u4e00\u4e9b\u51c6\u5907\u5de5\u4f5c: 1> \u5c06url\u4e2d\u7684\u57df\u540d\u53d1\u7ed9DNS\u670d\u52a1\u5668\u8fdb\u884c DNS\u57df\u540d\u89e3\u6790 , \u5f97\u5230IP\u5730\u5740. 2> \u62ff\u7740IP\u548c\u7aef\u53e3,\u6d4f\u89c8\u5668\u57fa\u4e8eTCP\u534f\u8bae\u53d1\u9001\u63a5\u6536\u6570\u636e\u5305\u4e0e\u76ee\u6807\u4e3b\u673a\u4e0a\u7684\u5e94\u7528\u8f6f\u4ef6\u5b8c\u6210\u4e09\u6b21\u63e1\u624b!! \u6ce8\u610f,\u4e09\u6b21\u63e1\u624b\u7684\u8fc7\u7a0b\u4e2d\u4f20\u8f93\u7684\u6570\u636e\u5305\u4e0d\u5305\u542b\u7528\u6237\u771f\u6b63\u8981\u4f20\u8f93\u7684\u6570\u636e; \u5373\u6b64\u65f6\u6ca1\u6709\u771f\u6b63\u7684\u6570\u636e\u5728\u4f20\u8f93 ,TCP \u4e09\u6b21\u63e1\u624b\u5efa\u7acb\u7684 \u53cc\u5411\u901a\u8def \u662f\u5728\u4e3a\u4f20\u8f93\u6570\u636e\u505a\u51c6\u5907!!! \u6b64\u53cc\u5411\u901a\u9053\u662f\u903b\u8f91\u4e0a\u7684! \u5efa\u7acb\u597d\u540e, \u6d4f\u89c8\u5668\u4f1a\u5148\u6309\u7167\u81ea\u5df1\u5b9a\u4e49\u7684HTTP\u534f\u8bae\u5c01\u88c5\u6570\u636e , \u5c06\u6570\u636e\u7ed9\u64cd\u4f5c\u7cfb\u7edf .\u64cd\u4f5c\u7cfb\u7edf\u518d\u4f9d\u6b21 \u5c01\u88c5 tcp\u5934\u3001ip\u5934\u3001\u4ee5\u592a\u7f51\u5934,\u6700\u540e\u8c03\u7528\u7f51\u5361\u901a\u8fc7\u7269\u7406\u8fde\u63a5\u4ecb\u8d28\u8fdb\u884c\u4f20\u8f93.. \u76ee\u6807\u4e3b\u673a\u6536\u5230\u540e,\u8fdb\u884c \u62c6\u5305 . \u518d\u5c01\u88c5\u6d4f\u89c8\u5668\u9700\u8981\u7684\u6570\u636e\u4f20\u8f93\u7ed9\u6d4f\u89c8\u5668. Q: \u4e3a\u5565\u8981\u5148\u5efa\u7acb\u53cc\u5411\u901a\u8def\"\u672c\u8d28\u4e0a\u5c31\u662f \u5168\u53cc\u5de5\u901a\u4fe1\"? A: HTTP\u662f\u6bd4TCP\u66f4\u9ad8\u5c42\u6b21\u7684\u5e94\u7528\u5c42\u534f\u8bae. \u6839\u636e\u89c4\u5219,\u53ea\u6709\u4f4e\u5c42\u534f\u8bae\u5efa\u7acb\u4e4b\u540e\u624d\u80fd,\u624d\u80fd\u8fdb\u884c\u66f4\u5c42\u534f\u8bae\u7684\u8fde\u63a5. \u56e0\u6b64, \u9996\u5148\u8981\u5efa\u7acbTCP\u8fde\u63a5, \u4e00\u822cTCP\u8fde\u63a5\u7684\u7aef\u53e3\u53f7\u662f80... \u6b64\u53cc\u5411\u901a\u8def\u8fd8\u53ef\u4ee5\u89e3\u51b3\u4e22\u5305\u95ee\u9898\u3001\u987a\u5e8f\u95ee\u9898\u3001\u6548\u7387\u95ee\u9898\u7b49. Q: \u5e94\u7528\u5c42\u4ec0\u4e48\u65f6\u5019\u5c31\u8ba4\u4e3a\u628a\u6570\u636e\u53d1\u5b8c\u4e86? A: \u5e94\u7528\u5c42\u5c06\u6570\u636e\u4e22\u7ed9OS\u7684\u65f6\u5019, \u5e94\u7528\u5c42\u5c31\u4e0d\u7ba1\u5566!OS\u518d\u6309\u7167\u534f\u8bae\u5f00\u59cb\u8fd0\u4f5c. So,\u8981\u6ce8\u610f,\u5e94\u7528\u5c42send\u64cd\u4f5c\u53d1\u6570\u636e\u7684\u65f6\u5019,\u4e0d\u662f\u76f4\u63a5\u53d1\u7ed9\u5bf9\u65b9\u5566,\u800c\u662f\u5148\u628a\u6570\u636e\u7ed9\u4e86OS!! \u4e09\u6b21\u63e1\u624b \u00b6 \u4e09\u6b21\u63e1\u624b\u5efa\u7acbTCP\u8fde\u63a5. \u51c6\u786e\u70b9\u8bf4\u662f \u4e00\u6b21\u63e1\u624b\u8fc7\u7a0b\u4e2d\u4ea4\u6362\u4e86\u4e09\u4e2a\u62a5\u6587!! \u4e00\u5b9a\u8981\u6653\u5f97\u5728\u53d1\u9001\u771f\u6b63\u6570\u636e\u4e4b\u524d,\u53cc\u5411\u901a\u8def\u662f\u6ca1\u6709\u5efa\u597d\u7684!!! TCP\u534f\u8bae\u662f\u597d\u4eba\u534f\u8bae, Client\u5411Server\u53d1\u9001\u8fde\u63a5\u8bf7\u6c42, S\u540c\u610f\u5566! \u6700\u540eC\u518d\u5411S\u53d1\u9001\u4e00\u4e2a\u786e\u8ba4. # SYN=1 \u8bf7\u6c42\u62a5\u6587 # ACK=1 \u786e\u8ba4\u62a5\u6587 # seq=x \u5e8f\u5217\u53f7 # ack=x+1 \u786e\u8ba4\u53f7,\u8868\u660ex\u5e8f\u53f7\u4ee5\u524d\u7684\u90fd\u6536\u5230\u5566,\u671f\u671b\u4e0b\u4e00\u6b21\u6536\u5230\u7684\u5e8f\u53f7\u662fx+1 \u7b2c\u4e00\u4e2a\u62a5\u6587 ` C to S ` SYN = 1 seq = x \u7b2c\u4e8c\u4e2a\u62a5\u6587 ` S to C ` ACK = 1 ack = x+1 - - - - - - - - SYN = 1 seq = y \u7b2c\u4e09\u4e2a\u62a5\u6587 ` C to S ` ACK = 1 seq = x+1 ack = y + 1 [\u534a\u8fde\u63a5\u6c60 backlog] \u670d\u52a1\u5668\u7b2c\u4e00\u6b21\u6536\u5230\u5ba2\u6237\u7aef\u7684 SYN \u4e4b\u540e, \u5c31\u4f1a\u5904\u4e8e SYN_RCVD \u72b6\u6001, \u6b64\u65f6\u53cc\u65b9\u8fd8\u6ca1\u6709\u5b8c\u5168\u5efa\u7acb\u8fde\u63a5. \u670d\u52a1\u5668\u4f1a\u628a\u8fd9\u79cd\u72b6\u6001\u4e0b \u8bf7\u6c42\u8fde\u63a5 \u653e\u5728\u4e00\u4e2a\u961f\u5217\u91cc, \u6211\u4eec\u628a\u8fd9\u79cd\u961f\u5217\u79f0\u4e4b\u4e3a\u534a\u8fde\u63a5\u961f\u5217. \u534a\u8fde\u63a5\u6c60\u9650\u5236\u7684\u662f\u540c\u4e00\u65f6\u95f4\u7684\u8bf7\u6c42\u6570,\u800c\u975e\u8fde\u63a5\u6570. \u534a\u8fde\u63a5\u6c60\u7684\u5927\u5c0f\u4e3a5,\u5df2\u8fde\u63a5\u6570\u53ef\u4ee5\u4e3a100. syn\u6d2a\u6c34\u653b\u51fb\u5c31\u4f1a\u9020\u6210\u670d\u52a1\u5668\u5927\u91cfSYN_RCVD\u72b6\u6001\u51fa\u73b0.. \u5f53\u7136\u8fd8\u6709\u4e00\u4e2a\u5168\u8fde\u63a5\u961f\u5217, \u5c31\u662f\u5df2\u7ecf\u5b8c\u6210\u4e09\u6b21\u63e1\u624b, \u5efa\u7acb\u597d\u7684\u8fde\u63a5 \u5c31\u4f1a\u653e\u5728\u5168\u8fde\u63a5\u961f\u5217\u4e2d. \u5982\u679c\u961f\u5217\u6ee1\u4e86\u5c31\u6709\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e22\u5305\u73b0\u8c61. [\u4e09\u6b21\u7684\u539f\u56e0]? 1> \u901a\u4fe1\u53cc\u65b9\u786e\u8ba4\u5f7c\u6b64\u7684\u6536\u53d1\u6570\u636e\u7684\u80fd\u529b\u6b63\u5e38. 2> \u53ea\u4ea4\u6362\u4e24\u6b21\u62a5\u6587\u7684\u8bdd,\u670d\u52a1\u7aef\u4e0d\u80fd\u4fdd\u8bc1\u5ba2\u6237\u7aef\u5df2\u7ecf\u6536\u5230\u4e86\u521d\u59cb\u5e8f\u5217\u53f7.. \u82e5\u7b2c\u4e8c\u4e2a\u62a5\u6587\u4e22\u5931, \u5ba2\u6237\u7aef\u4e0d\u6653\u5f97\u670d\u52a1\u7aef\u7684\u521d\u59cb\u5e8f\u5217\u53f7, TCP\u7684\u53ef\u9760\u6027\u5c31\u65e0\u4ece\u8c08\u8d77. 3> \u82e5\u53ea\u4ea4\u6362\u4e24\u6b21\u62a5\u6587. B\u4e00\u65e6\u6536\u5230A\u7684\u8fde\u63a5\u8bf7\u6c42,\u56de\u5305\u540e\u5c31\u8868\u660e\u8fde\u63a5\u5df2\u7ecf\u5efa\u7acb\u5566. \u5f53A\u7ed9B\u7684\u8fde\u63a5\u8bf7\u6c42\u56e0\u4e3a\u7f51\u7edc\u539f\u56e0\u5ef6\u8fdf\u4e86,A\u53c8\u91cd\u65b0\u53d1\u4e86\u8fde\u63a5\u8bf7\u6c42,\u5728AB\u8fde\u63a5\u65ad\u5f00\u540e,\u65e7\u7684\u90a3\u4e2a\u8fde\u63a5\u8bf7\u6c42\u5230\u8fbe\u4e86B,AB\u4e4b\u95f4\u53c8\u5efa\u7acb\u4e86\u8fde\u63a5.. B\u4f1a\u82e6\u82e6\u7b49\u5f85A\u53d1\u6570\u636e\u8fc7\u6765. 4> \u4e0d\u662f\u56db\u6b21\u662f\u56e0\u4e3a,\u7b2c\u4e8c\u6b21\u7684\u62a5\u6587\u662f\u6ca1\u6709\u4f20\u8f93\u771f\u6b63\u7684\u6570\u636e\u7684,ACK+SNK\u4e00\u8d77\u4f20\u5566. Ps: \u7b2c\u4e00\u4e2a\u7b2c\u4e8c\u4e2a\u62a5\u6587\u4e0d\u80fd\u643a\u5e26\u771f\u7684\u6570\u636e,\u7b2c\u4e09\u4e2a\u62a5\u6587\u662f\u53ef\u4ee5\u643a\u5e26\u771f\u6b63\u7684\u6570\u636e\u7684,\u56e0\u4e3a\u5ba2\u6237\u7aef\u5df2\u7ecf\u77e5\u9053\u670d\u52a1\u7aef\u7684\u6536\u53d1\u80fd\u529b\u6b63\u5e38. \u82e5\u7b2c\u4e00\u4e2a\u62a5\u6587\u53ef\u4ee5\u643a\u5e26\u6570\u636e,\u90a3\u4e48\u653b\u51fb\u8005\u5c31\u53ef\u4ee5\u53d1\u9001\u5927\u91cf\u7684\u62a5\u6587\u8ba9\u670d\u52a1\u5668\u5360\u7528\u5927\u91cf\u5185\u5b58\u8fdb\u884c\u7f13\u5b58.. [TCP\u534f\u8bae\u5982\u4f55\u4fdd\u8bc1\u53ef\u9760\u4f20\u8f93!!!!!!]? \u8be6\u89c1: https://blog.csdn.net/summer_fish/article/details/125259025 1> \u5b57\u8282\u7f16\u53f7\u673a\u5236!! 2> \u6570\u636e\u6bb5\u7684\u786e\u8ba4\u673a\u5236!! 3> TCP\u8d85\u65f6\u91cd\u4f20\u673a\u5236!! \u56db\u6b21\u6325\u624b \u00b6 \u56db\u62a5\u6587\u63e1\u624b \u65ad\u5f00\u8fde\u63a5 \u4e3a\u4ec0\u4e48\u662f\u56db\u6b21\uff1f\u60f3\u8c61\u4e00\u4e0b\u5efa\u7acb\u597d\u7684TCP\u8fde\u63a5\u662f\u53cc\u5411\u7684\u516c\u8def! \u901a\u5e38\u662f\u670d\u52a1\u7aef\u5148\u53d1\u8d77\u65ad\u5f00\u8fde\u63a5\u7684\u8bf7\u6c42,\u8fdb\u5165 FIN_WAIT_1\u7684\u72b6\u6001. \u5728\u5927\u5e76\u53d1\u7684\u60c5\u51b5\u4e0b,\u670d\u52a1\u7aef\u4f1a\u4e3b\u52a8\u65ad\u5f00\u8fde\u63a5.\u4f1a\u5feb\u901f\u7ecf\u8fc7FIN_WAIT_1\u3001FIN_WAIT_2,\u77ac\u95f4\u8d70\u5230TIME_WAIT\u72b6\u6001. So,\u670d\u52a1\u7aef\u5927\u91cf\u8fde\u63a5\u5904\u4e8eTIME_WAIT\u72b6\u6001,\u5219\u8bc1\u660e\u6709\u5927\u91cf\u7684\u8bbf\u95ee!! \u5176\u4f59\u7684\u8bf7\u770b \u8ba1\u7b97\u673a\u7f51\u7edc\u4e4b\u4f20\u8f93\u5c42 \u7684\u5185\u5bb9!! \u9762\u8bd5\u5e38\u95ee: 1> \u4e3a\u4f55\u5efa\u7acb\u8fde\u63a5\u9700\u8981\u4e09\u6b21, \u65ad\u5f00\u8fde\u63a5\u9700\u8981\u56db\u6b21? 2> \u4e3a\u4ec0\u4e48TCP\u534f\u8bae\u662f\u53ef\u9760\u534f\u8bae,UDP\u662f\u4e0d\u53ef\u9760\u534f\u8bae\uff1f \u53ef\u9760\u4e0e\u4e0d\u53ef\u9760\u4e0d\u5173\u4e4e\u6709\u65e0\u8fde\u63a5\u5efa\u7acb. TCP\u4f20\u8f93\u6570\u636e\u7684\u53ef\u9760\u5728\u4e8e\u5b83\u53d1\u6570\u636e\u540e\u5fc5\u987b\u7b49\u5bf9\u65b9\u786e\u8ba4\u540e\u624d\u4f1a\u628a\u8fd9\u4efd\u6570\u636e\u4ece\u81ea\u5df1\u7684 \u5185\u5b58\u4e2d/\u53d1\u9001\u961f\u5217\u4e2d \u5220\u9664\u6389.\u82e5\u672a\u5f97\u5230\u786e\u8ba4,\u4f1a\u91cd\u4f20. -- TCP\u8d85\u65f6\u91cd\u4f20\u673a\u5236. UDP\u628a\u6570\u636e\u53d1\u51fa\u53bb\u540e,\u5c31\u7acb\u523b\u6e05\u9664\u6389,\u6839\u672c\u4e0d\u8003\u8651\u5bf9\u65b9\u662f\u5426\u5df2\u7ecf\u6536\u5230. --- \u6548\u7387\u9ad8,\u4f46\u4e0d\u53ef\u9760.\u6570\u636e\u4e0d\u5b89\u5168. 3> tcp\u534f\u8bae\u5efa\u7acb\u8fde\u63a5\u4e0e\u65ad\u5f00\u8fde\u63a5\u7684\u72b6\u6001\u4fe1\u606f\u4ee5\u53ca\u8868\u793a\u7684\u610f\u4e49. \u6b63\u5e38\u60c5\u51b5\u4e0b,\u53ea\u4f1a\u8865\u6349\u5230LISTEN\u3001ESTABLISHED\u3001TIME_WAIT\u72b6\u6001.. \u5176\u4f59\u72b6\u6001\u4f1a\u5f88\u5feb\u5f88\u5feb.","title":"\u8ba1\u7b97\u673a\u7f51\u7edc\u50a8\u5907"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/0_%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%82%A8%E5%A4%87/#cs","text":"C client\u5ba2\u6237\u7aef \u4e0e S server\u670d\u52a1\u7aef \u57fa\u4e8e\u7f51\u7edc\u8fdb\u884c\u901a\u4fe1. B/S \u5305\u542b\u4e8e C/S. B\u6307\u7684\u662fbrowser\u6d4f\u89c8\u5668 , \u4ee5\u6d4f\u89c8\u5668\u4f5c\u4e3a\u5ba2\u6237\u7aef. server\u7aef\u5fc5\u987b\u6ee1\u8db3\u7684\u4e24\u4e2a\u6761\u4ef6: 1> \u4fdd\u8bc1\u4e00\u5957\u4f53\u7cfb(\u7f51\u7edc - \u786c\u4ef6 - OS - server\u7684\u5e94\u7528\u8f6f\u4ef6)\u7684\u7a33\u5b9a\u8fd0\u884c \u5f00\u53d1\u4eba\u5458\u5173\u6ce8\u4e0e\u670d\u52a1\u7aef\u7684\u5e94\u7528\u8f6f\u4ef6\u5373\u53ef,\u7f51\u7edc\u3001\u786c\u4ef6\u3001Linux\u662f\u8fd0\u7ef4\u8d1f\u8d23\u7684. 2> \u670d\u52a1\u7aef\u5fc5\u987b\u7ed1\u5b9a\u4e00\u4e2a\u56fa\u5b9a\u7684\u5730\u5740.(IP + \u7aef\u53e3)","title":"C/S"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/0_%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%82%A8%E5%A4%87/#_1","text":"\u4e92\u8054\u7f51 = \u7269\u7406\u8fde\u63a5\u4ecb\u8d28 + \u4e92\u8054\u7f51\u534f\u8bae Ps: \u7269\u7406\u8fde\u63a5\u4ecb\u8d28(\u5149\u7ea4\u3001\u7535\u7f06\u3001\u4ea4\u6362\u673a\u3001\u8def\u7531\u5668..)\u662f\u7f51\u7edc\u8fd0\u7ef4\u7ba1\u7684.. \u6211\u4eec\u5173\u6ce8\u7684\u662f\u534f\u8bae!! \"\u4e92\u8054\u7f51\u534f\u8bae\u5373\u8ba1\u7b97\u673a\u754c\u7684\u82f1\u8bed\" (\u5168\u4e16\u754c\u7684\u901a\u7528\u8bed\u8a00\u662f\u82f1\u8bed) \u6240\u6709\u7684\u8ba1\u7b97\u673a\u90fd\u5f97\u5b66\u4f1a\u4e92\u8054\u7f51\u534f\u8bae,\u624d\u80fd\u6309\u7167\u534f\u8bae\u89c4\u5b9a\u7684\u6807\u51c6\u7ec4\u7ec7\u6570\u636e\u6cbf\u7740\u7f51\u7edc\u8fdb\u884c\u901a\u4fe1. OSI\u7ec4\u7ec7\u6839\u636e\u4e92\u8054\u7f51\u534f\u8bae\u529f\u80fd\u7684\u4e0d\u540c,\u5c06\u5176\u5206\u4e3a\u4e86\u4e03\u5c42: \u5e94\u8868\u4f1a\u4f20\u7f51\u6570\u7269 \u4f46\u4f5c\u4e3a\u5f00\u53d1\u4eba\u5458,\u53ea\u9700\u8981\u638c\u63e1\u4e94\u5c42: \u5e94 - \u4f20 - \u7f51 - \u6570 - \u7269 \u534f\u8bae \u4e94\u5c42 \u6807\u8bc6\u5730\u5740\u7684\u65b9\u5f0f HTTP\u3001FTP\u3001Email \u5e94 TCP\u3001UDP \u4f20 ip + mac + port IP \u7f51 ip + mac ethernet\u3001arp \u6570 mac \u9ad8\u4f4e\u7535\u4fe1\u53f7 \u7269","title":"\u4e92\u8054\u7f51"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/0_%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%82%A8%E5%A4%87/#ethernet","text":"\u4ee5\u592a\u7f51\u534f\u8bae\u6709\u4e09\u5927\u89c4\u5b9a: 1> \u89c4\u5b9a\u4e00\u7ec4\u7535\u4fe1\u53f7\u6784\u6210\u4e00\u4e2a\u6570\u636e\u5e27 2> \u6bcf\u4e00 \u6570\u636e\u5e27 \u7531\u62a5\u5934head \"\u56fa\u5b9a\u957f\u5ea618\u4e2a\u5b57\u8282\" + \u6570\u636edata\u4e24\u90e8\u5206\u7ec4\u6210 \u6e90 \"mac\" \u5730\u5740 \u76ee\u6807 \"mac\" \u5730\u5740 \u6570\u636e\u7c7b\u578b DATA 6bit 6bit 6bit 46 -1500bit 3> \u89c4\u5b9a\u63a5\u5165\u7684internet\u7684\u8bbe\u5907\u90fd\u5fc5\u987b\u5177\u5907\u7f51\u5361,\u6bcf\u5757\u7f51\u5361\u4e0a\u5728\u51fa\u5382\u7684\u65f6\u5019\u90fd\u70e7\u5f55\u4e86\u5168\u4e16\u754c\u552f\u4e00\u7684mac\u5730\u5740. mac\u5730\u5740 48\u4f4d\u4e8c\u8fdb\u5236\u662f,\u753116\u4f4d\u5341\u516d\u8fdb\u5236\u6570\u8868\u793a,\u524d6\u4f4d\u5382\u5546\u7f16\u53f7,\u540e\u516d\u4f4d\u6d41\u6c34\u7ebf\u53f7. \u601d\u8003? \u6709\u4e86\u4ee5\u592a\u7f51\u534f\u8bae\u548c\u7269\u7406\u8fde\u63a5\u4ecb\u8d28,\u5c31\u80fd\u5b9e\u73b0\u5168\u4e16\u754c\u8ba1\u7b97\u673a\u4e4b\u95f4\u7684\u901a\u4fe1\u4e86\u5417\uff1f \u55ef! \u7406\u8bba\u4e0aok\u7684. \u4f46\u8981\u77e5\u9053 \u4ee5\u592a\u7f51\u534f\u8bae\u91c7\u7528\u4e00\u79cd\u53e4\u8001\u7684\u65b9\u5f0f\u901a\u4fe1: \u5e7f\u64ad. \u6709\u8fd9\u6837\u4e00\u53e5\u8c1a\u8bed: \u8ba1\u7b97\u673a\u901a\u4fe1\u57fa\u672c\u9760\u543c \u771f\u5b9e\u60c5\u51b5\u4e0b\u662f\u4e0d\u884c\u7684! \u4ece\u4e24\u65b9\u9762\u8003\u8651: \u4e00\u65b9\u9762,\u4ea7\u751f\u5927\u91cf\u7684\u5e7f\u64ad\u5305 ( \u5c31\u662f\u6570\u636e\u5e27,\u91cc\u9762\u4f1a\u6709\u6e90mac\u5730\u5740\u548c\u76ee\u6807mac ) \u4f1a\u9020\u6210\u7f51\u7edc\u98ce\u66b4; \u4e8c\u65b9\u9762,\u4ea4\u6362\u673a\u7684 mac\u5730\u5740\u8868 ( mac\u5730\u5740\u4e0e\u4ea4\u6362\u673a\u7aef\u53e3\u7684\u6620\u5c04 ) \u4e0d\u53ef\u80fd\u65e0\u9650\u5927. \u4ea4\u6362\u673a\u5177\u5907mac\u5730\u5740\u5b66\u4e60\u529f\u80fd! \"\u543c\"\u53ea\u80fd\u5728\u5f53\u524d\u6240\u5904\u7684 \u5c40\u57df\u7f51/\u5b50\u7f51/\u7f51\u6bb5/\u5e7f\u64ad\u57df \u4e2d\u543c! \u4ee5\u592a\u7f51\u534f\u8bae\u7684mac\u5730\u5740\u662f\u8d70\u4e0d\u51fa\u5e7f\u64ad\u57df\u7684!! mac\u5730\u5740\u80fd\u6807\u8bc6\u4e00\u53f0\u4e3b\u673a\u5728\u5c40\u57df\u7f51\u4e2d\u7684\u54ea\u4e2a\u4f4d\u7f6e.","title":"Ethernet\u534f\u8bae"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/0_%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%82%A8%E5%A4%87/#ip","text":"IP\u534f\u8bae\u6709\u4e8c\u5927\u89c4\u5b9a: 1> \u89c4\u5b9a\u6bcf\u53f0\u8ba1\u7b97\u673a\u90fd\u5f97\u914d\u4e00\u4e2aIP\u5730\u5740 (\u73b0\u76ee\u524d\u662fIPv4\u5730\u5740) IPv4\u5730\u5740\u9075\u7167\u70b9\u5206\u5341\u8fdb\u5236\u7ec4\u6210,\u6709\u56db\u6bb5,\u6bcf\u6bb5\u90fd\u662f8\u4f4d\u4e8c\u8fdb\u5236\u6570,\u6362\u6210\u5341\u8fdb\u5236\u6570,\u6bcf\u6bb5\u7684\u8303\u56f4\u90fd\u662f0-255. 2> \u89c4\u5b9a\u53d1\u9001\u7684 \u6570\u636e\u62a5 \u7531\u62a5\u5934\u548c\u6570\u636e\u4e24\u90e8\u5206\u7ec4\u6210. \u62a5\u5934\u5305\u542b \u6e90IP\u5730\u5740 \u548c \u76ee\u6807IP\u5730\u5740 ! IP\u5730\u5740\u548c\u5b50\u7f51\u63a9\u7801\u4f5c\u6309\u4f4d\u4e0e\u8fd0\u7b97,\u53ef\u4ee5\u5f97\u5230\u5b50\u7f51\u5730\u5740/\u7f51\u7edc\u5730\u5740! \u82e5\u901a\u4fe1\u53cc\u65b9\u7684\u4e3b\u673a\u7684\u7f51\u7edc\u5730\u5740\u76f8\u540c, \u5219\u7528\u4ee5\u592a\u7f51\u534f\u8bae,\u57fa\u4e8emac\u5730\u5740\u901a\u8fc7\u6570\u636e\u94fe\u8def\u5c42\u7684\u4e8c\u5c42\u4ea4\u6362\u673a\u8fdb\u884c\u5e7f\u64ad. \u82e5\u4e0d\u76f8\u540c,\u5219\u9700\u8981\u8de8\u5c40\u57df\u7f51\u901a\u4fe1,\u6d89\u53ca\u5230\u8def\u7531\u534f\u8bae(\u4f1a\u6709\u4e00\u4e2a\u8def\u7531\u8868)\u7b49.. \u4e86\u89e3\u5373\u53ef,\u65e0\u9700\u638c\u63e1. Ps: \u4e0d\u5728\u540c\u4e00\u5c40\u57df\u7f51,\u4f1a\u5c06\u6570\u636e\u5305\u4ea4\u7ed9\u7f51\u5173,\u6570\u636e\u5305\u4e2d\"\u5c01\u88c5\u7684\u76ee\u6807mac\u662fmac(\u7f51\u5173)\" IP + mac\u5730\u5740\u80fd\u6807\u8bc6\u5168\u4e16\u754c\u8303\u56f4\u5185\u72ec\u4e00\u65e0\u4e8c\u7684\u4e00\u53f0\u8ba1\u7b97\u673a. \u6709\u65f6\u5019\u53ea\u8bf4IP\u662f\u56e0\u4e3aARP\u5728\u80cc\u540e\u627e\u5230\u4e86MAC. IP\u627e\u5230\u4e3b\u673a\u5728\u54ea\u4e2a\u5c40\u57df\u7f51,MAC\u627e\u5230\u4e3b\u673a\u5728\u5c40\u57df\u7f51\u7684\u54ea\u4e2a\u4f4d\u7f6e!! \u6211\u4eec\u5224\u65ad\u53cc\u65b9\u80fd\u5426\u80fd\u6210\u529f\u901a\u4fe1 , \u4f1aping\u5bf9\u65b9\u7684IP\u5730\u5740 . \u4f46\u8fd9\u5e76\u4e0d\u610f\u5473\u7740 , \u53ea\u9700\u8981IP\u5730\u5740\u5c31\u884c\u5566 ! \u627e\u5230\u5bf9\u65b9\u5904\u4e8e\u54ea\u4e2a\u5c40\u57df\u7f51\u540e , ARP\u534f\u8bae\u4f1a\u53d1\u9001 \"ARP\u5e7f\u64ad\u5305\" \u5e2e\u6211\u4eec\u62ff\u5230\u6b64\u5c40\u57df\u7f51\u91cc\u8be5IP\u5bf9\u5e94\u7684mac\u5730\u5740 !!! \u62ff\u5230\u76ee\u6807mac\u540e , \u518d\u5f00\u59cb\u5c01\u88c5\u4ee5\u592a\u7f51\u534f\u8bae\u7684\u62a5\u5934 , \u53d1\u9001\u771f\u6b63\u7684\u6570\u636e ! \u57fa\u4e8e\u7f51\u7edc\u5c42\u548c\u6570\u636e\u94fe\u8def\u5c42\u5982\u4f55\u8fdb\u884c\u901a\u4fe1\u7684 \uff1f \u7ec6\u8282\u8bf7\u770b \u8ba1\u7b97\u673a\u7f51\u7edc\u4e4b\u7f51\u7edc\u5c42 \u7684\u5185\u5bb9 . ( \u5f00\u53d1\u4e86\u89e3\u5373\u53ef ) \u5185\u5fc3OS : \u5f53\u65f6\u5f04\u660e\u767d\u7684\u8fc7\u7a0b\u4e5f\u633a\u75db\u82e6\u7684 .. Hhh \u60f3\u7740\u4ee5\u540e\u8ba1\u7b97\u673a\u8003\u7814 ( 408 ) \u4f1a\u8003\u8ba1\u7b97\u673a\u7f51\u7edc , \u4e5f\u5c31\u8212\u5766\u4e86\u4e9b\u8bb8 . \u5148\u4e86\u89e3\u561b !","title":"IP\u534f\u8bae"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/0_%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%82%A8%E5%A4%87/#tcpudp","text":"\u5ba2\u6237\u7aef\u8f6f\u4ef6\u4e0e\u670d\u52a1\u7aef\u8f6f\u4ef6\u901a\u4fe1,C\u627e\u5230S\u5728\u54ea\u8fd8\u4e0d\u591f,\u8fd8\u5f97\u627e\u5230S\u4e0a\u8fd0\u884c\u7684\u591a\u4e2a\u8f6f\u4ef6\u4e2d\u7684\u90a3\u4e00\u4e2a!! TCP\u548cUDP\u662f\u57fa\u4e8e\u7aef\u53e3\u5de5\u4f5c\u7684\u534f\u8bae \u670d\u52a1\u7aef\u6bcf\u542f\u52a8\u4e00\u4e2a\u57fa\u4e8e\u4e92\u8054\u7f51\u901a\u4fe1\u7684\u7a0b\u5e8f,\u90fd\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u672c\u4e3b\u673a\u552f\u4e00\u7684\u7aef\u53e3\u53f7! \u7aef\u53e3\u53f7\u8303\u56f4: 0 - 65535 0 - 1024 \u7ed9\u64cd\u4f5c\u7cfb\u7edf\u9884\u7559\u7684, 1025 - 65535\u7ed9\u8f6f\u4ef6\u7684. IP + mac + port \u80fd\u6807\u8bc6\u5168\u4e16\u754c\u8303\u56f4\u5185\u72ec\u4e00\u65e0\u4e8c\u7684\u4e00\u4e2a\u57fa\u4e8e\u7f51\u7edc\u901a\u4fe1\u7684\u5e94\u7528\u8f6f\u4ef6!! \u56e0\u4e3aARP\u534f\u8bae\u7684\u5b58\u5728,\u901a\u5e38\u4f1a\u8bf4\u662f IP + port. C/S\u90fd\u9700\u8981IP\u548cport, \u4f46 \u670d\u52a1\u7aef\u7684IP\u548cport\u9700\u8981\u56fa\u5b9a! ( \u54ea\u6015\u5b95\u673a\u540e\u91cd\u542f\u4e5f\u4e0d\u80fd\u53d8! ),\u5ba2\u6237\u7aef\u4e0d\u9700\u8981\u56fa\u5b9a.","title":"TCP/UDP\u534f\u8bae"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/0_%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%82%A8%E5%A4%87/#http","text":"\u5e94\u7528\u8f6f\u4ef6\u5de5\u4f5c\u5728\u5e94\u7528\u5c42, \u81ea\u5df1\u5199\u7684\u5e94\u7528\u8f6f\u4ef6\u53ef\u4ee5\u81ea\u4e2a\u513f\u5b9a\u5236\u5e94\u7528\u5c42\u7684\u534f\u8bae! \u6bd4\u5982: \u6d4f\u89c8\u5668\u8fd9\u4e2a\u5e94\u7528\u8f6f\u4ef6\u5c31\u6267\u884c\u4e86http\u534f\u8bae\u548ctcp\u534f\u8bae.. \u8981\u77e5\u9053, \u901a\u4fe1\u6700\u6839\u672c\u7684\u76ee\u7684\u662f\u62ff\u5230\u6574\u4e2a\u4e92\u8054\u7f51\u91cc\u60f3\u8981\u8bbf\u95ee\u7684\u90a3\u4e2a\u8d44\u6e90!! \u4e0a\u7f51\u7684\u8fc7\u7a0b\u672c\u8d28\u5c31\u662f\u8d44\u6e90\u4e0b\u8f7d\u548c\u4e0a\u4f20\u7684\u8fc7\u7a0b! url \u7edf\u4e00\u8d44\u6e90\u5b9a\u4f4d\u7b26\u53f7 url = \u5e94\u7528\u534f\u8bae\u90e8\u5206 + \u57df\u540d\u548c\u7aef\u53e3 + \u8def\u5f84 https : // www . zhihu . com / column / c_1189883314197168128 \u5e94\u7528\u534f\u8bae\u90e8\u5206 https : // # -- \u4e5f\u6709\u53ef\u80fd\u662fhtp:// \u57df\u540d\u548c\u7aef\u53e3 www . zhihu . com : 80 # -- \u9ed8\u8ba4\u7aef\u53e3\u53f7\u662f80,\u6d4f\u89c8\u5668\u540e\u81ea\u52a8\u586b\u5145. \u8def\u5f84 column / c_1189883314197168128 \u6ce8\u610f : 80 \u662f\u670d\u52a1\u7aef\u7684\u7aef\u53e3\u53f7 , \u57fa\u4e8e\u7f51\u7edc\u901a\u4fe1\u7684web\u670d\u52a1 ( \u63d0\u4f9b\u7f51\u9875\u670d\u52a1\u7684 ) \u90fd\u662f\u7ed1\u5b9a80\u7aef\u53e3 . \u7ea6\u5b9a\u4fd7\u6210\u7684 . \u5e38\u89c1\u9ed8\u8ba4\u7aef\u53e3 : DHCP\u7aef\u53e3\u53f767 ; DNS\u7aef\u53e3\u53f753 url\u5730\u5740\u662f\u7528\u6765\u6807\u8bc6\u5168\u4e16\u754c\u8303\u56f4\u5185\u72ec\u4e00\u65e0\u4e8c\u7684\u4e00\u4e2a\u8d44\u6e90\u7684!! \u5c06url\u5730\u5740\u62c6\u5206,\u53ef\u4ee5\u53d1\u73b0,url\u662f\u5efa\u7acb\u5728ip+mac+port\u4e4b\u4e0a\u7684! [\u6d4f\u89c8\u5668\u6253\u5f00\u4e00\u7bc7\u535a\u5ba2\u7684\u8fc7\u7a0b!!] \u6d4f\u89c8\u5668\u548c\u7528\u6237\u8fdb\u884c\u4ea4\u4e92 \"\u7528\u6237\u70b9\u51fb\u67d0\u4e2a\u94fe\u63a5\" , \u4ea7\u751f\u4e86\u4e00\u4e2aurl\u5730\u5740. \u6d4f\u89c8\u5668\u4e0d\u7740\u6025\u53d1\u9001\u8bf7\u6c42. \u4f1a\u5148\u505a\u4e00\u4e9b\u51c6\u5907\u5de5\u4f5c: 1> \u5c06url\u4e2d\u7684\u57df\u540d\u53d1\u7ed9DNS\u670d\u52a1\u5668\u8fdb\u884c DNS\u57df\u540d\u89e3\u6790 , \u5f97\u5230IP\u5730\u5740. 2> \u62ff\u7740IP\u548c\u7aef\u53e3,\u6d4f\u89c8\u5668\u57fa\u4e8eTCP\u534f\u8bae\u53d1\u9001\u63a5\u6536\u6570\u636e\u5305\u4e0e\u76ee\u6807\u4e3b\u673a\u4e0a\u7684\u5e94\u7528\u8f6f\u4ef6\u5b8c\u6210\u4e09\u6b21\u63e1\u624b!! \u6ce8\u610f,\u4e09\u6b21\u63e1\u624b\u7684\u8fc7\u7a0b\u4e2d\u4f20\u8f93\u7684\u6570\u636e\u5305\u4e0d\u5305\u542b\u7528\u6237\u771f\u6b63\u8981\u4f20\u8f93\u7684\u6570\u636e; \u5373\u6b64\u65f6\u6ca1\u6709\u771f\u6b63\u7684\u6570\u636e\u5728\u4f20\u8f93 ,TCP \u4e09\u6b21\u63e1\u624b\u5efa\u7acb\u7684 \u53cc\u5411\u901a\u8def \u662f\u5728\u4e3a\u4f20\u8f93\u6570\u636e\u505a\u51c6\u5907!!! \u6b64\u53cc\u5411\u901a\u9053\u662f\u903b\u8f91\u4e0a\u7684! \u5efa\u7acb\u597d\u540e, \u6d4f\u89c8\u5668\u4f1a\u5148\u6309\u7167\u81ea\u5df1\u5b9a\u4e49\u7684HTTP\u534f\u8bae\u5c01\u88c5\u6570\u636e , \u5c06\u6570\u636e\u7ed9\u64cd\u4f5c\u7cfb\u7edf .\u64cd\u4f5c\u7cfb\u7edf\u518d\u4f9d\u6b21 \u5c01\u88c5 tcp\u5934\u3001ip\u5934\u3001\u4ee5\u592a\u7f51\u5934,\u6700\u540e\u8c03\u7528\u7f51\u5361\u901a\u8fc7\u7269\u7406\u8fde\u63a5\u4ecb\u8d28\u8fdb\u884c\u4f20\u8f93.. \u76ee\u6807\u4e3b\u673a\u6536\u5230\u540e,\u8fdb\u884c \u62c6\u5305 . \u518d\u5c01\u88c5\u6d4f\u89c8\u5668\u9700\u8981\u7684\u6570\u636e\u4f20\u8f93\u7ed9\u6d4f\u89c8\u5668. Q: \u4e3a\u5565\u8981\u5148\u5efa\u7acb\u53cc\u5411\u901a\u8def\"\u672c\u8d28\u4e0a\u5c31\u662f \u5168\u53cc\u5de5\u901a\u4fe1\"? A: HTTP\u662f\u6bd4TCP\u66f4\u9ad8\u5c42\u6b21\u7684\u5e94\u7528\u5c42\u534f\u8bae. \u6839\u636e\u89c4\u5219,\u53ea\u6709\u4f4e\u5c42\u534f\u8bae\u5efa\u7acb\u4e4b\u540e\u624d\u80fd,\u624d\u80fd\u8fdb\u884c\u66f4\u5c42\u534f\u8bae\u7684\u8fde\u63a5. \u56e0\u6b64, \u9996\u5148\u8981\u5efa\u7acbTCP\u8fde\u63a5, \u4e00\u822cTCP\u8fde\u63a5\u7684\u7aef\u53e3\u53f7\u662f80... \u6b64\u53cc\u5411\u901a\u8def\u8fd8\u53ef\u4ee5\u89e3\u51b3\u4e22\u5305\u95ee\u9898\u3001\u987a\u5e8f\u95ee\u9898\u3001\u6548\u7387\u95ee\u9898\u7b49. Q: \u5e94\u7528\u5c42\u4ec0\u4e48\u65f6\u5019\u5c31\u8ba4\u4e3a\u628a\u6570\u636e\u53d1\u5b8c\u4e86? A: \u5e94\u7528\u5c42\u5c06\u6570\u636e\u4e22\u7ed9OS\u7684\u65f6\u5019, \u5e94\u7528\u5c42\u5c31\u4e0d\u7ba1\u5566!OS\u518d\u6309\u7167\u534f\u8bae\u5f00\u59cb\u8fd0\u4f5c. So,\u8981\u6ce8\u610f,\u5e94\u7528\u5c42send\u64cd\u4f5c\u53d1\u6570\u636e\u7684\u65f6\u5019,\u4e0d\u662f\u76f4\u63a5\u53d1\u7ed9\u5bf9\u65b9\u5566,\u800c\u662f\u5148\u628a\u6570\u636e\u7ed9\u4e86OS!!","title":"HTTP\u534f\u8bae"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/0_%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%82%A8%E5%A4%87/#_2","text":"\u4e09\u6b21\u63e1\u624b\u5efa\u7acbTCP\u8fde\u63a5. \u51c6\u786e\u70b9\u8bf4\u662f \u4e00\u6b21\u63e1\u624b\u8fc7\u7a0b\u4e2d\u4ea4\u6362\u4e86\u4e09\u4e2a\u62a5\u6587!! \u4e00\u5b9a\u8981\u6653\u5f97\u5728\u53d1\u9001\u771f\u6b63\u6570\u636e\u4e4b\u524d,\u53cc\u5411\u901a\u8def\u662f\u6ca1\u6709\u5efa\u597d\u7684!!! TCP\u534f\u8bae\u662f\u597d\u4eba\u534f\u8bae, Client\u5411Server\u53d1\u9001\u8fde\u63a5\u8bf7\u6c42, S\u540c\u610f\u5566! \u6700\u540eC\u518d\u5411S\u53d1\u9001\u4e00\u4e2a\u786e\u8ba4. # SYN=1 \u8bf7\u6c42\u62a5\u6587 # ACK=1 \u786e\u8ba4\u62a5\u6587 # seq=x \u5e8f\u5217\u53f7 # ack=x+1 \u786e\u8ba4\u53f7,\u8868\u660ex\u5e8f\u53f7\u4ee5\u524d\u7684\u90fd\u6536\u5230\u5566,\u671f\u671b\u4e0b\u4e00\u6b21\u6536\u5230\u7684\u5e8f\u53f7\u662fx+1 \u7b2c\u4e00\u4e2a\u62a5\u6587 ` C to S ` SYN = 1 seq = x \u7b2c\u4e8c\u4e2a\u62a5\u6587 ` S to C ` ACK = 1 ack = x+1 - - - - - - - - SYN = 1 seq = y \u7b2c\u4e09\u4e2a\u62a5\u6587 ` C to S ` ACK = 1 seq = x+1 ack = y + 1 [\u534a\u8fde\u63a5\u6c60 backlog] \u670d\u52a1\u5668\u7b2c\u4e00\u6b21\u6536\u5230\u5ba2\u6237\u7aef\u7684 SYN \u4e4b\u540e, \u5c31\u4f1a\u5904\u4e8e SYN_RCVD \u72b6\u6001, \u6b64\u65f6\u53cc\u65b9\u8fd8\u6ca1\u6709\u5b8c\u5168\u5efa\u7acb\u8fde\u63a5. \u670d\u52a1\u5668\u4f1a\u628a\u8fd9\u79cd\u72b6\u6001\u4e0b \u8bf7\u6c42\u8fde\u63a5 \u653e\u5728\u4e00\u4e2a\u961f\u5217\u91cc, \u6211\u4eec\u628a\u8fd9\u79cd\u961f\u5217\u79f0\u4e4b\u4e3a\u534a\u8fde\u63a5\u961f\u5217. \u534a\u8fde\u63a5\u6c60\u9650\u5236\u7684\u662f\u540c\u4e00\u65f6\u95f4\u7684\u8bf7\u6c42\u6570,\u800c\u975e\u8fde\u63a5\u6570. \u534a\u8fde\u63a5\u6c60\u7684\u5927\u5c0f\u4e3a5,\u5df2\u8fde\u63a5\u6570\u53ef\u4ee5\u4e3a100. syn\u6d2a\u6c34\u653b\u51fb\u5c31\u4f1a\u9020\u6210\u670d\u52a1\u5668\u5927\u91cfSYN_RCVD\u72b6\u6001\u51fa\u73b0.. \u5f53\u7136\u8fd8\u6709\u4e00\u4e2a\u5168\u8fde\u63a5\u961f\u5217, \u5c31\u662f\u5df2\u7ecf\u5b8c\u6210\u4e09\u6b21\u63e1\u624b, \u5efa\u7acb\u597d\u7684\u8fde\u63a5 \u5c31\u4f1a\u653e\u5728\u5168\u8fde\u63a5\u961f\u5217\u4e2d. \u5982\u679c\u961f\u5217\u6ee1\u4e86\u5c31\u6709\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e22\u5305\u73b0\u8c61. [\u4e09\u6b21\u7684\u539f\u56e0]? 1> \u901a\u4fe1\u53cc\u65b9\u786e\u8ba4\u5f7c\u6b64\u7684\u6536\u53d1\u6570\u636e\u7684\u80fd\u529b\u6b63\u5e38. 2> \u53ea\u4ea4\u6362\u4e24\u6b21\u62a5\u6587\u7684\u8bdd,\u670d\u52a1\u7aef\u4e0d\u80fd\u4fdd\u8bc1\u5ba2\u6237\u7aef\u5df2\u7ecf\u6536\u5230\u4e86\u521d\u59cb\u5e8f\u5217\u53f7.. \u82e5\u7b2c\u4e8c\u4e2a\u62a5\u6587\u4e22\u5931, \u5ba2\u6237\u7aef\u4e0d\u6653\u5f97\u670d\u52a1\u7aef\u7684\u521d\u59cb\u5e8f\u5217\u53f7, TCP\u7684\u53ef\u9760\u6027\u5c31\u65e0\u4ece\u8c08\u8d77. 3> \u82e5\u53ea\u4ea4\u6362\u4e24\u6b21\u62a5\u6587. B\u4e00\u65e6\u6536\u5230A\u7684\u8fde\u63a5\u8bf7\u6c42,\u56de\u5305\u540e\u5c31\u8868\u660e\u8fde\u63a5\u5df2\u7ecf\u5efa\u7acb\u5566. \u5f53A\u7ed9B\u7684\u8fde\u63a5\u8bf7\u6c42\u56e0\u4e3a\u7f51\u7edc\u539f\u56e0\u5ef6\u8fdf\u4e86,A\u53c8\u91cd\u65b0\u53d1\u4e86\u8fde\u63a5\u8bf7\u6c42,\u5728AB\u8fde\u63a5\u65ad\u5f00\u540e,\u65e7\u7684\u90a3\u4e2a\u8fde\u63a5\u8bf7\u6c42\u5230\u8fbe\u4e86B,AB\u4e4b\u95f4\u53c8\u5efa\u7acb\u4e86\u8fde\u63a5.. B\u4f1a\u82e6\u82e6\u7b49\u5f85A\u53d1\u6570\u636e\u8fc7\u6765. 4> \u4e0d\u662f\u56db\u6b21\u662f\u56e0\u4e3a,\u7b2c\u4e8c\u6b21\u7684\u62a5\u6587\u662f\u6ca1\u6709\u4f20\u8f93\u771f\u6b63\u7684\u6570\u636e\u7684,ACK+SNK\u4e00\u8d77\u4f20\u5566. Ps: \u7b2c\u4e00\u4e2a\u7b2c\u4e8c\u4e2a\u62a5\u6587\u4e0d\u80fd\u643a\u5e26\u771f\u7684\u6570\u636e,\u7b2c\u4e09\u4e2a\u62a5\u6587\u662f\u53ef\u4ee5\u643a\u5e26\u771f\u6b63\u7684\u6570\u636e\u7684,\u56e0\u4e3a\u5ba2\u6237\u7aef\u5df2\u7ecf\u77e5\u9053\u670d\u52a1\u7aef\u7684\u6536\u53d1\u80fd\u529b\u6b63\u5e38. \u82e5\u7b2c\u4e00\u4e2a\u62a5\u6587\u53ef\u4ee5\u643a\u5e26\u6570\u636e,\u90a3\u4e48\u653b\u51fb\u8005\u5c31\u53ef\u4ee5\u53d1\u9001\u5927\u91cf\u7684\u62a5\u6587\u8ba9\u670d\u52a1\u5668\u5360\u7528\u5927\u91cf\u5185\u5b58\u8fdb\u884c\u7f13\u5b58.. [TCP\u534f\u8bae\u5982\u4f55\u4fdd\u8bc1\u53ef\u9760\u4f20\u8f93!!!!!!]? \u8be6\u89c1: https://blog.csdn.net/summer_fish/article/details/125259025 1> \u5b57\u8282\u7f16\u53f7\u673a\u5236!! 2> \u6570\u636e\u6bb5\u7684\u786e\u8ba4\u673a\u5236!! 3> TCP\u8d85\u65f6\u91cd\u4f20\u673a\u5236!!","title":"\u4e09\u6b21\u63e1\u624b"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/0_%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%82%A8%E5%A4%87/#_3","text":"\u56db\u62a5\u6587\u63e1\u624b \u65ad\u5f00\u8fde\u63a5 \u4e3a\u4ec0\u4e48\u662f\u56db\u6b21\uff1f\u60f3\u8c61\u4e00\u4e0b\u5efa\u7acb\u597d\u7684TCP\u8fde\u63a5\u662f\u53cc\u5411\u7684\u516c\u8def! \u901a\u5e38\u662f\u670d\u52a1\u7aef\u5148\u53d1\u8d77\u65ad\u5f00\u8fde\u63a5\u7684\u8bf7\u6c42,\u8fdb\u5165 FIN_WAIT_1\u7684\u72b6\u6001. \u5728\u5927\u5e76\u53d1\u7684\u60c5\u51b5\u4e0b,\u670d\u52a1\u7aef\u4f1a\u4e3b\u52a8\u65ad\u5f00\u8fde\u63a5.\u4f1a\u5feb\u901f\u7ecf\u8fc7FIN_WAIT_1\u3001FIN_WAIT_2,\u77ac\u95f4\u8d70\u5230TIME_WAIT\u72b6\u6001. So,\u670d\u52a1\u7aef\u5927\u91cf\u8fde\u63a5\u5904\u4e8eTIME_WAIT\u72b6\u6001,\u5219\u8bc1\u660e\u6709\u5927\u91cf\u7684\u8bbf\u95ee!! \u5176\u4f59\u7684\u8bf7\u770b \u8ba1\u7b97\u673a\u7f51\u7edc\u4e4b\u4f20\u8f93\u5c42 \u7684\u5185\u5bb9!! \u9762\u8bd5\u5e38\u95ee: 1> \u4e3a\u4f55\u5efa\u7acb\u8fde\u63a5\u9700\u8981\u4e09\u6b21, \u65ad\u5f00\u8fde\u63a5\u9700\u8981\u56db\u6b21? 2> \u4e3a\u4ec0\u4e48TCP\u534f\u8bae\u662f\u53ef\u9760\u534f\u8bae,UDP\u662f\u4e0d\u53ef\u9760\u534f\u8bae\uff1f \u53ef\u9760\u4e0e\u4e0d\u53ef\u9760\u4e0d\u5173\u4e4e\u6709\u65e0\u8fde\u63a5\u5efa\u7acb. TCP\u4f20\u8f93\u6570\u636e\u7684\u53ef\u9760\u5728\u4e8e\u5b83\u53d1\u6570\u636e\u540e\u5fc5\u987b\u7b49\u5bf9\u65b9\u786e\u8ba4\u540e\u624d\u4f1a\u628a\u8fd9\u4efd\u6570\u636e\u4ece\u81ea\u5df1\u7684 \u5185\u5b58\u4e2d/\u53d1\u9001\u961f\u5217\u4e2d \u5220\u9664\u6389.\u82e5\u672a\u5f97\u5230\u786e\u8ba4,\u4f1a\u91cd\u4f20. -- TCP\u8d85\u65f6\u91cd\u4f20\u673a\u5236. UDP\u628a\u6570\u636e\u53d1\u51fa\u53bb\u540e,\u5c31\u7acb\u523b\u6e05\u9664\u6389,\u6839\u672c\u4e0d\u8003\u8651\u5bf9\u65b9\u662f\u5426\u5df2\u7ecf\u6536\u5230. --- \u6548\u7387\u9ad8,\u4f46\u4e0d\u53ef\u9760.\u6570\u636e\u4e0d\u5b89\u5168. 3> tcp\u534f\u8bae\u5efa\u7acb\u8fde\u63a5\u4e0e\u65ad\u5f00\u8fde\u63a5\u7684\u72b6\u6001\u4fe1\u606f\u4ee5\u53ca\u8868\u793a\u7684\u610f\u4e49. \u6b63\u5e38\u60c5\u51b5\u4e0b,\u53ea\u4f1a\u8865\u6349\u5230LISTEN\u3001ESTABLISHED\u3001TIME_WAIT\u72b6\u6001.. \u5176\u4f59\u72b6\u6001\u4f1a\u5f88\u5feb\u5f88\u5feb.","title":"\u56db\u6b21\u6325\u624b"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/10_GIL%E8%AF%A6%E8%A7%A3/","text":"\u53c2\u8003\u94fe\u63a5: \u8d8a\u5f80\u7ec6\u5904\u60f3,\u8d8a\u89c9\u5f97\u81ea\u5df1\u662f\u4e2a\u83dc\u9e21 (\u3064\u0414`)\u30ce https://www.cnblogs.com/linhaifeng/articles/7449853.html https://zhuanlan.zhihu.com/p/75780308 https://blog.csdn.net/weixin_41594007/article/details/79485847 GIL\u65b0\u89e3: https://zhuanlan.zhihu.com/p/401127743 http://www.dabeaz.com/python/UnderstandingGIL.pdf \u5f15\u5165 \u00b6 \u5b98\u65b9\u89e3\u91ca \u00b6 In CPython, the global interpreter lock, or GIL, is a mutex that prevents multiple native threads from executing Python bytecodes at once. This lock is necessary mainly because CPython\u2019s memory management is not thread-safe. (However, since the GIL exists, other features have grown to depend on the guarantees that it enforces.) 1> \u5728Cpython\u4e2d,\u5168\u5c40\u89e3\u91ca\u5668\u7ea7\u522b\u7684\u9501,\u6216\u8005\u7b80\u79f0GIL,\u662f\u4e00\u4e2a\u4e92\u65a5\u9501. 2> \u5b83\u53ef\u9632\u6b62\u591a\u4e2a\u672c\u673a\u7ebf\u7a0b\u540c\u65f6\u6267\u884cPython\u5b57\u8282\u7801. \u591a\u4e2a\u7ebf\u7a0b\u5373\u591a\u4e2a\u4efb\u52a1,\u6ce8\u610f\u662f\u540c\u4e00\u8fdb\u7a0b\u4e0b\u7684\u591a\u4e2a\u7ebf\u7a0b;\u8fd0\u884c\u7684py\u7a0b\u5e8f\u90fd\u4f1a\u8f6c\u6362\u6210py\u7684\u5b57\u8282\u7801\u8fd0\u884c 3> \u8fd9\u628a\u9501\u662f\u975e\u5e38\u91cd\u8981\u7684,\u56e0\u4e3aCpython\u89e3\u91ca\u5668\u7684\u5185\u5b58\u7ba1\u7406\u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684. \u7ebf\u7a0b\u662f\u5426\u5b89\u5168\u9700\u8981\u770b\u591a\u4e2a\u7ebf\u7a0b\u4fee\u6539\" py\u89e3\u91ca\u5668\u7ea7\u522b \u7684\u5171\u4eab\u6570\u636e\"\u5230\u5e95\u4f1a\u4e0d\u4f1a\u6539\u4e71,\u82e5\u4f1a\u6539\u4e71,\u5c06\u52a0\u4e92\u65a5\u9501 \u90a3py\u89e3\u91ca\u5668\u7ea7\u522b\u3001py\u7a0b\u5e8f\u7ea7\u522b\u7684\u5171\u4eab\u6570\u636e\u662f\u4ec0\u4e48\uff1f-- \u524d\u8005\u5783\u573e\u56de\u6536\u7684\u6570\u636e,\u540e\u8005\u7ebf\u7a0b\u6267\u884c\u7684\u4efb\u52a1\u6570\u636e.. 4> \u65e0\u8bba\u5982\u4f55,\u7531\u4e8eGIL\u7684\u5b58\u5728,Cpyhton\u89e3\u91ca\u5668\u884d\u751f\u51fa\u6765\u7684\u529f\u80fd\u90fd\u5c06\u4f9d\u8d56\u4e8e\u8fd9\u628a\u9501. GIL\u4ecb\u7ecd \u00b6 \u9996\u5148\u660e\u786e\u4e00\u70b9! GIL\u4e0d\u662fpython\u7684\u7279\u6027, \u5b83\u662f\u5728\u5b9e\u73b0CPython\u89e3\u6790\u5668\u65f6\u6240\u5f15\u5165\u7684\u4e00\u4e2a\u6982\u5ff5! \u867d\u7136CPython\u662f\u5927\u90e8\u5206\u73af\u5883\u4e0b\u9ed8\u8ba4\u7684Python\u6267\u884c\u73af\u5883. \u4f46Python\u5b8c\u5168\u53ef\u4ee5\u4e0d\u4f9d\u8d56\u4e8eGIL, \u50cf\u5176\u4e2d\u7684JPython\u5c31\u6ca1\u6709GIL... GIL\u672c\u8d28\u5c31\u662f\u4e00\u628a\u4e92\u65a5\u9501, \u65e2\u7136\u662f\u4e92\u65a5\u9501, \u6240\u6709\u4e92\u65a5\u9501\u7684\u672c\u8d28\u90fd\u4e00\u6837, \u90fd\u662f\u5c06\u5e76\u53d1\u8fd0\u884c\u53d8\u6210\"\u4e32\u884c\". \u4ee5\u6b64\u6765\u63a7\u5236\u540c\u4e00\u65f6\u95f4\u5185\u5171\u4eab\u6570\u636e\u53ea\u80fd\u88ab\u4e00\u4e2a\u4efb\u52a1\u6240\u4fee\u6539, \u8fdb\u800c\u4fdd\u8bc1\u6570\u636e\u5b89\u5168. GIL\u8fd9\u4e2a\u4e92\u65a5\u9501\u8ba9\u540c\u4e00\u8fdb\u7a0b\u5185\u5e76\u53d1\u7684\u591a\u4e2a\u7ebf\u7a0b\u540c\u4e00\u65f6\u95f4\u53ea\u80fd\u6709\u4e00\u4e2a\u6267\u884c. \u610f\u5473\u7740\u5728Cpython\u89e3\u91ca\u5668\u4e2d: \u4e00\u4e2a\u8fdb\u7a0b\u4e0b\u7684\u591a\u4e2a\u7ebf\u7a0b\u65e0\u6cd5\u5b9e\u73b0\u5e76\u884c -- \u5373\u65e0\u6cd5\u5229\u7528\u591a\u6838\u4f18\u52bf \u5927\u767d\u8bdd: \u591a\u7ebf\u7a0b\u9762\u5bf9\u56db\u6838\u7684cpu,\u56db\u4e2a\u6838\u90fd\u7528\u5f97\u4e0a,\u4f46\u540c\u4e00\u65f6\u95f4\u53ea\u4f1a\u7528\u5176\u4e2d\u4e00\u4e2a. \u4e0d\u540c\u8fdb\u7a0b\u5185\u7684\u4e24\u4e2a\u7ebf\u7a0b\u662f\u80fd\u5e76\u884c\u7684\u54e6!\u5b9e\u5219\u6307\u7684\u5c31\u662f\u591a\u8fdb\u7a0b. \u4f46GIL\u4e0d\u5f71\u54cd\u591a\u7ebf\u7a0b\u5e76\u53d1\u7684\u5b9e\u73b0\u54e6!! (\u591a\u6838cpu\u6765\u56de\u8fd0\u884c\u591a\u4e2a\u7ebf\u7a0b,\u5728\u8fd9\u8fc7\u7a0b\u4e2d, \u6bcf\u65f6\u6bcf\u523b\u53ea\u67094\u4e2a\u6838\u4e2d\u76841\u4e2a\u6838\u5728\u8fd0\u4f5c,\u4f46\u4e0d\u4e00\u5b9a\u662f\u540c\u4e00\u4e2a\u6838) Q: \u4e3a\u4ec0\u4e48\u8981\u7528GIL\uff1f A: \u56e0\u4e3aCpython\u89e3\u91ca\u5668\u81ea\u5e26\u7684\u5783\u573e\u56de\u6536\u673a\u5236\u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684! \u63d0\u524d\u8bf4\u4e00\u5634: \u4fdd\u62a4\u4e0d\u540c\u6570\u636e (\u89e3\u91ca\u5668\u7ea7\u522b--GIL\u3001\u7a0b\u5e8f\u7ea7\u522b--\u81ea\u5b9a\u4e49\u4e92\u65a5\u9501) \u7684\u5b89\u5168, \u5c31\u5e94\u8be5\u52a0\u4e0d\u540c\u7684\u9501. GIL\u8fd0\u884c\u539f\u7406 \u00b6 \u89e3\u91ca\u5668\u529f\u80fd \u00b6 py\u6267\u884c\u6587\u4ef6\u8c03\u7528py\u89e3\u91ca\u5668\u7684\u529f\u80fd,\u771f\u6b63\u6267\u884c\u7684\u662fpy\u89e3\u91ca\u5668\u7684\u4ee3\u7801!! \u9996\u5148\u8981\u660e\u786e\u51e0\u70b9: 1> \u6267\u884c\u4e0d\u540c\u7684py\u6587\u4ef6,\u90fd\u4f1a\u4ea7\u751f\u4e00\u4e2a\u72ec\u7acb\u7684\u8fdb\u7a0b, \u8fdb\u7a0b\u662f\u8d44\u6e90\u5355\u4f4d,\u4f1a\u5b58\u50a8\u4e0e\u8d44\u6e90\u76f8\u5173\u7684\u6240\u6709\u6570\u636e. So,\u6bcf\u4e2a\u8fdb\u7a0b\u5185\u4e0d\u4ec5\u6709\u4e3b\u7ebf\u7a0b\u5f00\u542f\u7684\u5176\u5b83\u5b50\u7ebf\u7a0b,\u8fd8\u4f1a\u6709\u89e3\u91ca\u5668\u7ea7\u522b\u7684\u5783\u573e\u56de\u6536\u7ebf\u7a0b..\u8981\u6267\u884c\u7684\u4ee3\u7801\u7b49.. 2> \u8fdb\u7a0b\u5185\u7684\u6240\u6709\u7684\u6570\u636e\u90fd\u662f\u5171\u4eab\u7684! \u5373\u8fdb\u7a0b\u5185\u7684\u4ee3\u7801 (\u5305\u62ecpy\u6587\u4ef6\u4ee5\u53capy\u89e3\u91ca\u5668\u7684\u6240\u6709\u4ee3\u7801) \u4f5c\u4e3a\u6570\u636e\u662f\u88ab\u8fdb\u7a0b\u5185\u7684\u6240\u6709\u7ebf\u7a0b\u5171\u4eab\u7684. 3> \u6240\u6709\u7684\u7ebf\u7a0b\u8981\u60f3\u8fd0\u884c\u81ea\u5df1\u7684\u4efb\u52a1, \u9700\u8981\u80fd\u591f\u8bbf\u95ee\u5230\u89e3\u91ca\u5668\u7684\u4ee3\u7801.. train.py\u7684\u4ee3\u7801\u5982\u4e0b: \u53ef\u4ee5\u5c06\u89e3\u91ca\u5668\u60f3\u8c61\u6210\u4e00\u4e2a\u529f\u80fd\u51fd\u6570,\u4e3b\u7ebf\u7a0b/\u8fdb\u7a0b\u91cc\u7684\u539f\u751f\u7ebf\u7a0b\u5c06train.py\u4ee3\u7801( \u5c31\u662f\u4e00\u5806\u666e\u901a\u7684\u5b57\u7b26\u4e32 )\u4f5c\u4e3a\u53c2\u6570\u4f20\u7ed9py\u89e3\u91ca\u5668\u6267\u884c;\u4e09\u4e2a\u5b50\u7ebf\u7a0b\u5c06task\u51fd\u6570\u4f53\u7684\u4ee3\u7801\u4f5c\u4e3a\u53c2\u6570\u4f20\u7ed9py\u89e3\u91ca\u5668\u6267\u884c!!( \u82e5\u662f\u591a\u8fdb\u7a0b\u7684\u8bdd,\u6bcf\u4e2a\u8fdb\u7a0b\u5185\u90fd\u5f97\u62f7\u8d1d\u4e00\u4efdpy\u6267\u884c\u6587\u4ef6\u7684main\u51fd\u6570\u4e4b\u4e0a\u7684\u6240\u6709\u4ee3\u7801,\u591a\u7ebf\u7a0b\u6570\u636e\u5171\u4eab\u4e0d\u7528\u62f7\u8d1d ) \u7ad9\u5728\u89e3\u91ca\u5668\u7684\u89d2\u5ea6: \u89e3\u91ca\u5668\u53bb\u7ffb\u8bd1\u8fd9\u5806py\u4ee3\u7801. \u7ad9\u5728py\u4ee3\u7801\u7684\u89d2\u5ea6: py\u4ee3\u7801\u90fd\u8c03\u7528\u4e86python\u89e3\u91ca\u5668\u7684\u529f\u80fd. So, \u771f\u6b63\u6267\u884c\u7684\u662fpython\u89e3\u91ca\u5668\u7684\u4ee3\u7801!! \u63d0\u9192\u4e00\u4e0b: \u89e3\u91ca\u5668\u7684\u4ee3\u7801\u662f\u6240\u6709\u7ebf\u7a0b\u5171\u4eab\u7684,\u6240\u4ee5\u5783\u573e\u56de\u6536\u7ebf\u7a0b\u8c03\u7528\u7684\u4e5f\u662fpython\u89e3\u91ca\u5668\u7684\u529f\u80fd!! # -- train.py import time from threading import Thread , Lock mutex = Lock () n = 100 def task (): global n with mutex : temp = n time . sleep ( 0.1 ) n = temp - 1 if __name__ == '__main__' : start = time . time () t_l = [ Thread ( target = task ) for _ in range ( 3 )] for t in t_l : t . start () for t in t_l : t . join () print ( n , time . time () - start ) GIL\u9501 \u00b6 GIL\u9501\u89e3\u51b3\u4e86python\u5783\u573e\u56de\u6536\u673a\u5236\u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\u95ee\u9898!! Ps:\u5176\u5b9e\u6211\u5728\u60f3\u5783\u573e\u56de\u6536\u673a\u5236\u7ebf\u7a0b\u4e0d\u5b89\u5168\u7684\u95ee\u9898,\u4e3a\u5565\u5f97\u901a\u8fc7\u8ba9\u6240\u6709\u7ebf\u7a0b\u5e76\u53d1(\u672c\u8d28\u662f\u4e00\u4e2a\u4e2a\u6267\u884c\u7684)\u6765\u89e3\u51b3.. \u8bd5\u60f3\u4e0b\u4e3b\u7ebf\u7a0b\u3001\u7ebf\u7a0b1-3\u653e\u5230\u4e00\u4e2a\u96c6\u5408A\u4e2d, \u5783\u573e\u56de\u6536\u7ebf\u7a0b\u653e\u5230\u96c6\u5408B\u4e2d, \u96c6\u5408A\u548c\u96c6\u5408B\u5e76\u53d1\u6267\u884c, \u96c6\u5408A\u91cc\u9762\u7684\u5143\u7d20\u5e76\u884c\u6267\u884c\u4e0d\u66f4\u597d\u561b.. Hhh. \u8fd9\u53ea\u662f\u4e00\u4e2a\u731c\u60f3, \u6211\u4e5f\u4e0d\u77e5\u5982\u4f55\u5b9e\u73b0. \u5f53\u65f6\u5927\u4f6c\u4eec\u80af\u5b9a\u6709\u5176\u5b83\u7684\u8003\u8651.. \u4e5f\u8bb8\u662f\u56e0\u4e3a\u5927\u4f6c\u8bbe\u8ba1\u591a\u7ebf\u7a0b\u65f6\u53ea\u8003\u8651\u4e86\u5355\u6838. \u8d4b\u503c\u64cd\u4f5c\u5206\u4e24\u6b65 \u00b6 \u9996\u5148, \u8981\u660e\u767d\u8d4b\u503c\u64cd\u4f5c(eg: x = 100 )\u4f1a\u5206\u4e3a\u4e24\u6b65\u8fdb\u884c: step1: \u5728\u8fdb\u7a0b\u5185\u5f00\u8f9f\u4e00\u5757\u7a7a\u95f4\u653e\u503c100, step2: \u5c06\u53d8\u91cf\u4e0e\u503c\u7ed1\u5b9a\u5728\u4e00\u8d77. import dis print ( dis . dis ( \"x=100\" )) \"\"\" 1 0 LOAD_CONST 0 (100) 2 STORE_NAME 0 (x) 4 LOAD_CONST 1 (None) 6 RETURN_VALUE None \"\"\" dis\u6a21\u5757\u7684\u53c2\u8003\u8fde\u63a5\u5982\u4e0b : https : // www . cnblogs . com / blili / p / 11804690. html https : // blog . csdn . net / qq_27283619 / article / details / 106021295 \u591a\u7ebf\u7a0b\u5e76\u884c\u95ee\u9898 \u00b6 Q: \u5047\u8bbe\u6ca1\u6709GIL\u7684\u5b58\u5728,\u90a3\u4e48\u540c\u4e00\u8fdb\u7a0b\u4e0b\u7684\u591a\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u5229\u7528cpu\u7684\u591a\u4e2a\u6838\u8fdb\u884c\u5e76\u53d1\u5904\u7406 \u591a\u7ebf\u7a0b\u7684\u5e76\u53d1\u8fd0\u884c\u53ef\u80fd\u4f1a\u51fa\u73b0\u4ec0\u4e48\u95ee\u9898\uff1f A: \u4e3b\u7ebf\u7a0b\u3001\u5b50\u7ebf\u7a0b1-3\u628a\u4ee3\u7801\u4ea4\u7ed9\u89e3\u91ca\u5668\u8fd0\u884c,\u5783\u573e\u56de\u6536\u7ebf\u7a0b\u8c03\u7528\u89e3\u91ca\u5668\u7684\u529f\u80fd\u65f6\u4e0d\u65f6\u770b\u770b\u6709\u65e0\u5f15\u7528\u8ba1\u6570\u4e3a0\u7684\u503c. \u597d\u5de7\u4e0d\u5de7, \u8bed\u53e5 x=100 \u6b63\u6267\u884c\u5b8c\u7b2c\u4e00\u6b65, \u8fd8\u6ca1\u6765\u5f97\u53ca\u8fdb\u884c\u7b2c\u4e8c\u6b65, \u5783\u573e\u56de\u6536\u7ebf\u7a0b\u53d1\u73b0 100 \u8fd9\u4e2a\u503c\u7684\u5f15\u7528\u8ba1\u6570\u4e3a0, \u5c31\u5c06\u5176\u56de\u6536\u6389\u4e86, \u89e3\u91ca\u5668\u63a5\u7740\u6267\u884c x=100 \u7684\u7b2c\u4e8c\u6b65\u65f6, \u53d1\u73b0\u8be5\u5185\u5b58\u5730\u5740\u4e0b\u6ca1\u6709\u503c.. \u7ed1\u5b9a\u5931\u8d25! \u591a\u7ebf\u7a0b\u7684\u5e76\u53d1\u76f8\u5f53\u4e8ecpu\u7684\u6bcf\u4e2a\u6838\u540c\u65f6\u8c03\u7528\u8fdb\u7a0b\u91cc\u7684\u89e3\u91ca\u5668\u5f00\u59cb\u8ba1\u7b97\u76f8\u5e94\u7ebf\u7a0b\u7684\u4efb\u52a1. \u5177\u4f53\u8fc7\u7a0b\u662f\u600e\u6837\u7684\u5462\uff1f\u4e0d\u77e5\u9053, \u4f46\u53ef\u4ee5\u4ece\u51fd\u6570\u7684\u591a\u6b21\u8c03\u7528\u8fc7\u7a0b\u8fdb\u884c\u601d\u8003, \u6bcf\u6b21\u51fd\u6570\u7684\u8c03\u7528\u90fd\u4f1a\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684PyFrameObject\u5bf9\u8c61,\u5f00\u8f9f\u4e00\u5757\u65b0\u7684\u547d\u540d\u7a7a\u95f4,\u63a5\u7740\u6267\u884c\u51fd\u6570\u4f53\u4ee3\u7801. \u52a0\u9501\u89e3\u51b3\u95ee\u9898 \u00b6 \u591a\u7ebf\u7a0b\u5e76\u884c\u6709\u95ee\u9898, \u90a3\u4e48\u5c31\u8ba9\u5b83\u4eec(\u56fe\u4e2d\u7684\u4e94\u4e2a\u7ebf\u7a0b)\u4e0d\u80fd\u540c\u65f6\u8fd0\u884c!! \u52a0\u9501 \u8ba9\u4ed6\u4eec\u4e00\u4e2a\u4e00\u4e2a\u7684\u6765. \u8fd9\u4e9b\u7ebf\u7a0b\u7684\u6267\u884c\u90fd\u8981\u4f7f\u7528\u89e3\u91ca\u5668. So, \u4e3a\u4e86\u4fdd\u62a4\u8fd9\u4e9b\u5783\u573e\u56de\u6536\u6570\u636e(\u89e3\u91ca\u5668\u7ea7\u522b\u7684\u5171\u4eab\u6570\u636e), \u76f4\u63a5\u7b80\u5355\u7c97\u66b4\u7684 \u5728CPyhton\u89e3\u91ca\u5668\u4e0a \u52a0\u4e86\u4e00\u628a\u9501!! (\u4e5f\u5c31\u662f\u8bf4,\u7ebf\u7a0b\u60f3\u8fd0\u884c\u662f\u5427?\u5f97\u6709GIL\u9501\u624d\u80fd\u4f7f\u7528\u89e3\u91ca\u5668!! Hhh) GIL\u9501\u7684\u5b58\u5728\u4f7f\u5f97\u8fdb\u7a0b\u4e0b\u7684\u591a\u4e2a\u7ebf\u7a0b\u4e0d\u80fd\u5e76\u53d1\u7684\u8fd0\u884c!! \u5373\u89e3\u91ca\u5668\u540c\u4e00\u65f6\u95f4\u53ea\u80fd\u6267\u884c\u4e00\u4e2a\u7ebf\u7a0b\u7684\u4efb\u52a1\u4ee3\u7801.. (\u591a\u6838cpu\u7684\u54ea\u4e2a\u6838\u8fd0\u884c\u7684\u4e0d\u4e00\u5b9a\u54e6,\u8981\u770bOS\u7684\u8c03\u5ea6,\u53e6\u5916,\u591a\u7ebf\u7a0b\u662f\u53ef\u4ee5\u5e76\u53d1\u8fd0\u884c\u7684!!) GIL\u4fdd\u8bc1\u4e86\u7ebf\u7a0b\u5728\u8fdb\u884c\u8d4b\u503c\u64cd\u4f5c x=100 \u65f6, \u5176\u5b83\u7ebf\u7a0b\u4e0d\u4f1a\u6267\u884c!! \u5c31\u4e0d\u4f1a\u51fa\u73b0\u7ed1\u5b9a\u5931\u8d25\u7684\u60c5\u51b5. \u7ec6\u8bf4\u4e00\u4e2a\u4e2a\u6765 \u00b6 \u6ce8\u610f, \u4e00\u4e2a\u4e00\u4e2a\u7684\u6765,\u53ef\u4ee5\u662f\u4e32\u884c,\u53ef\u4ee5\u662f\u5e76\u884c,\u5f88\u660e\u663e,\u5e76\u884c\u7684\u6548\u7387\u66f4\u9ad8\u561b,\u4e5f\u662f\u8fd9\u6837\u8bbe\u8ba1\u7684!! \u7ebf\u7a0bA\u62a2\u5230GIL\u9501\u540e\u5f00\u59cb\u8fd0\u884c,\u9047\u5230IO/\u6267\u884c\u65f6\u95f4\u8fc7\u957f 5ms/\u9047\u5230\u4f18\u5148\u7ea7\u66f4\u9ad8\u7684\u7ebf\u7a0b, \u4f1a\u5265\u593acpu\u7684\u4f7f\u7528,GIL\u9501\u4e5f\u4f1a\u88ab\u5f3a\u884c\u91ca\u653e!! \u5176\u5b83\u7ebf\u7a0b\u62a2\u5230\u9501\u8fd0\u884c. \u7ebf\u7a0bA\u4e56\u4e56\u7684\u505a\u5b8cIO\u540e,\u518d\u52a0\u5165\u62a2GIL\u9501\u7684\u961f\u4f0d,\u62a2\u5230\u4e86\u518d\u57fa\u4e8e\u4e0a\u6b21\u4fdd\u5b58\u7684\u72b6\u6001\u5f00\u59cb\u7ee7\u7eed\u8fd0\u884c.. \u56e0\u800c, \u52a0\u4e86GIL\u9501, \u591a\u7ebf\u7a0b\u4e5f\u662f\u5e76\u884c\u7684, \u5173\u952e\u5728\u4e8e cpu\u548cGIL\u9501\u4f1a\u4e00\u540c\u6ca1.. Hhhh (\u53ef\u4ee5\u601d\u8003\u4e0b,\u82e5CPU\u88ab\u593a\u8d70\u4e86,\u7ebf\u7a0b1\u8fd8\u62ff\u7740GIL\u4e0d\u677e\u624b,\u8fd9\u5c31\u4f1a\u9020\u6210\u4e25\u91cd\u7684\u6548\u7387\u95ee\u9898,\u5728\u5176\u505aIO\u671f\u95f4,\u5176\u5b83\u7ebf\u7a0b\u90fd\u522b\u60f3\u8fd0\u884c,\u56e0\u4e3a\u7ebf\u7a0b\u7684\u8fd0\u884c\u9700\u8981GIL\u9501.\u6ca1GIL\u9501\u5c31\u4e0d\u80fd\u4f7f\u7528\u89e3\u91ca\u5668) \u5b9e\u9645\u4e0a\u7ebf\u7a0b\u7684\u8fd0\u884c\u9700\u8981cpu\u7684\u65f6\u95f4\u7247+\u62a2\u5230GIL\u9501. \u4e0a\u8ff0\u7684\u9610\u8ff0\u9ed8\u8ba4\u62a2\u5230GIL\u9501\u65f6,OS\u5df2\u5206\u914dcpu\u65f6\u95f4\u7247\u7ed9\u7ebf\u7a0b! (\u62ff\u5230cpu\u6743\u9650 -- \u62ff\u5230GIL\u89e3\u91ca\u5668\u9501 -- \u6267\u884c\u4ee3\u7801 (\u3064\u0414`)\u30ce) GIL\u4e0e\u81ea\u5b9a\u4e49\u4e92\u65a5\u9501 \u00b6 GIL\u4fdd\u8bc1\u4e86\u5783\u573e\u56de\u6536\u673a\u5236\u7684\u7ebf\u7a0b\u5b89\u5168,\u4f46\u5e76\u6ca1\u6709\u4fdd\u8bc1\u4e0a\u4e00\u5c0f\u8282\u56fe\u4e2d\u7684\u7ebf1-\u7ebf3\u5bf9\u5e94\u4efb\u52a1\u7684\u6570\u636e\u5b89\u5168!! \u7ebf\u7a0b\u62e5\u6709\u4ee5\u4e0b\u4e1c\u897f\u540e \u4f5c\u7528 CPU \u53ef\u8fd0\u884c\u89e3\u91ca\u5668\u4ee3\u7801 GIL \u62e5\u6709\u5bf9\u89e3\u91ca\u5668\u7684\u6267\u884c\u6743\u9650 Lock \u62e5\u6709\u5bf9\u4efb\u52a1\u6570\u636e\u7684\u4f7f\u7528\u6743 \u629b\u51fa\u95ee\u9898 \u00b6 \u7ecf\u8fc7\u4e0a\u9762\u7684\u5b66\u4e60,\u4e5f\u8bb8\u4f60\u4f1a\u95ee: (\u6211\u4e5f\u66fe\u7ecf\u7591\u60d1\u8fc7) Python\u5df2\u7ecf\u6709\u4e00\u4e2aGIL\u6765\u4fdd\u8bc1\u540c\u4e00\u65f6\u95f4\u53ea\u80fd\u6709\u4e00\u4e2a\u7ebf\u7a0b\u6765\u6267\u884c\u4e86,\u4e3a\u4ec0\u4e48\u8fd9\u91cc\u8fd8\u9700\u8981\u81ea\u5b9a\u4e49\u4e92\u65a5\u9501Lock? \u9996\u5148\u6211\u4eec\u9700\u8981\u8fbe\u6210\u5171\u8bc6: \u9501\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u4fdd\u62a4\u5171\u4eab\u7684\u6570\u636e, \u540c\u4e00\u65f6\u95f4\u53ea\u80fd\u6709\u4e00\u4e2a\u7ebf\u7a0b\u6765\u4fee\u6539\u5171\u4eab\u7684\u6570\u636e!! \u4fdd\u62a4\u4e0d\u540c\u7684\u6570\u636e\u5c31\u5e94\u8be5\u52a0\u4e0d\u540c\u7684\u9501! GIL \u4e0eLock\u662f\u4e24\u628a\u9501, \u4fdd\u62a4\u7684\u6570\u636e\u4e0d\u4e00\u6837, \u524d\u8005\u4fdd\u62a4\u7684\u662f\u89e3\u91ca\u5668\u7ea7\u522b\u7684(\u6bd4\u5982\u5783\u573e\u56de\u6536\u7684\u6570\u636e,\u56de\u6536\u7684\u662f\u5806\u533a\u7684\u503c), \u540e\u8005\u662f\u4fdd\u62a4\u7528\u6237\u81ea\u5df1\u5f00\u53d1\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u6570\u636e! \u901a\u4fd7\u4e00\u70b9,\u4e0d\u4e25\u8c28\u7684\u8bf4,GIL\u4fdd\u8bc1\u4e86\u7ebf\u7a0b\u5728\u8fdb\u884c\u8d4b\u503c\u64cd\u4f5c x=100 \u65f6,\u5176\u5b83\u7ebf\u7a0b\u4e0d\u4f1a\u6267\u884c,\u4e0d\u4f1a\u51fa\u73b0\u7ed1\u5b9a\u5931\u8d25\u7684\u60c5\u51b5; GIL\u5e76\u6ca1\u6709\u4fdd\u8bc1 x = 100 \u8fd9\u4e2a\u5171\u4eab\u6570\u636e\u7684\u4fee\u6539\u662f\u5b89\u5168\u7684!! \u56fe\u89e3\u9a8c\u8bc1 \u00b6 \u73b0\u5728\u6709\u4e24\u4e2a\u7ebf\u7a0b,\u7ebf\u7a0b1\u548c\u7ebf\u7a0b2. \u4e24\u4e2a\u7ebf\u7a0b\u5e76\u53d1\u6267\u884c. 1 > \u5047\u8bbe\u4ed6\u4e24\u5904\u4e8e\u5c31\u7eea\u6001\u65f6,\u90fd\u62ff\u5230\u4e86\u6570\u636e ` count = 0 ` \uff01 2 > \u540c\u4e00\u8fdb\u7a0b\u5185\u7684\u7ebf\u7a0b\u8981\u60f3\u6267\u884c,\u5148\u62a2GIL ( \u5373\u62a2\u89e3\u91ca\u5668\u7684\u6267\u884c\u6743\u9650 ) .\u5047\u8bbe\u7ebf\u7a0b1\u62a2\u5230\u4e86. 3 > \u5728\u6267\u884c\u7ebf\u7a0b1\u7684\u4efb\u52a1\u4ee3\u7801\u4e4b\u524d,Cpython\u89e3\u91ca\u5668\u4f1a\u8c03\u7528OS\u7684\u539f\u751f\u7ebf\u7a0b. \u5e94\u7528\u7a0b\u5e8f\u662f\u53ef\u4ee5\u81ea\u5df1\u8bbe\u8ba1\u4e00\u5957\u7ebf\u7a0b\u5207\u6362\u673a\u5236\u6765\u63a7\u5236\u7ebf\u7a0b\u7684\u8c03\u5ea6\u7684.\u4f46python\u6ca1\u6709\u8fd9\u6837\u505a,\u5b83\u76f4\u63a5\u5c06\u7ebf\u7a0b\u7684\u8c03\u7528\u63a8\u7ed9\u4e86\u64cd\u4f5c\u7cfb\u7edf.\u6240\u4ee5\u8981\u77e5\u9053,python\u4e2d\u7ebf\u7a0b\u4e4b\u95f4\u7684\u5207\u6362\u662f\u64cd\u4f5c\u7cfb\u7edf\u5728\u505a! 4 > \u7ebf\u7a0b1\u7684\u4efb\u52a1\u4ee3\u7801\u5728OS\u5206\u914d\u7684cpu\u4e0a\u8fd0\u884c. ( \u5b9e\u5219\u662f\u7ebf\u7a0b1\u5c06\u4efb\u52a1\u4ee3\u7801\u4f5c\u4e3a\u53c2\u6570\u4f20\u7ed9\u89e3\u91ca\u5668,cpu\u8c03\u7528\u89e3\u91ca\u5668,\u8fd0\u884c\u89e3\u91ca\u5668\u7684\u4ee3\u7801 -- \u5355\u72ec\u7684\u7a0b\u5e8f\u4ee3\u7801\u662f\u6ca1\u6709\u7528\u7684 ) 5 > \u7ebf\u7a0b1\u5728cpu\u4e0a\u6267\u884c\u65f6,\u672c\u6765\u8981\u505a ` count += 1 ` \u7684\u64cd\u4f5c.\u4f46\u6267\u884c\u65f6\u95f4\u5230\u4e86,count\u52a01\u7684\u64cd\u4f5c\u5e76\u6ca1\u6709\u5b8c\u6210.\u88ab\u5265\u593a\u4e86cpu,\u5e76\u4e14\u88ab\u8981\u6c42\u5f3a\u884c\u91ca\u653eGIL. ( \u7ebf\u7a0b1CPU\u4e0eGIL\u7686\u65e0 ) 6 -11> \u540c\u4e00\u8fdb\u7a0b\u4e0b\u7684\u5176\u5b83\u7ebf\u7a0b\u5728\u76ef\u7740\u8fd9\u628aGIL\u9501\u5462,\u53ea\u8981\u91ca\u653e,\u5c31\u4f1a\u7ade\u4e89/\u62a2\u8fd9\u628a\u9501. \u8fd9\u91cc\u662f\u7ebf\u7a0b2\u62a2\u5230\u4e86,\u7ecf\u8fc7\u4e00\u7cfb\u5217\u64cd\u4f5c,\u5b8c\u6210\u4e86count++\u7684\u64cd\u4f5c,count\u88ab\u6539\u62101\u4e86.\u7ebf\u7a0b2\u7684\u6d3b\u5e72\u5b8c\u4e86.\u5e72\u5b8c\u4e86\u5c31\u4f1a\u91ca\u653e\u9501. 12 -13> \u7ebf\u7a0b1\u91cd\u65b0\u62a2\u5230\u4e86GIL\u9501,\u4ece\u4fdd\u5b58\u7684\u72b6\u6001\u7ee7\u7eed\u6267\u884c ( \u4fdd\u5b58\u72b6\u6001\u65f6,count\u503c\u4e3a0 ) ; \u5373\u7ebf\u7a0b1\u4f1a\u4ece\u6682\u505c\u7684\u4f4d\u7f6e\u7ee7\u7eed\u5f80\u4e0b\u8d70,\u7ebf\u7a0b2\u5bf9count\u7684\u6539\u53d8\u5bf9\u4e8e\u7ebf\u7a0b1\u6765\u8bf4\u6ca1\u6709\u5f71\u54cd. \u5206\u6790:\u6539\u4e86\u4e24\u6b21,count\u7684\u503c\u5e94\u8be5\u4e3a2,\u4f46\u6700\u7ec8\u503c\u4e3a1. So,GIL\u5e76\u4e0d\u4f1a\u4fdd\u8bc1\u7528\u6237\u6570\u636e\u7684\u7ebf\u7a0b\u5b89\u5168!\u4ec5\u4ec5\u53ea\u662f\u4fdd\u8bc1\u4e86\u5783\u573e\u56de\u6536\u673a\u5236\u6570\u636e\u7684\u5b89\u5168. GIL+Lock \u00b6 \u7ebf\u7a0b\u4f1a\u5148\u62a2GIL\u9501, \u62ff\u5230GIL\u9501\u540e\u624d\u80fd\u62ff\u5230\u4e92\u65a5\u9501Lock, \u5176\u4ed6\u7ebf\u7a0b\u5728GIL\u91ca\u653e\u540e\u4e5f\u53ef\u4ee5\u62a2\u5230GIL, \u4f46\u5982\u679c\u53d1\u73b0Lock\u4ecd\u7136\u6ca1\u6709\u88ab\u91ca\u653e\u5219\u963b\u585e, \u5373\u4fbf\u662f\u62ff\u5230GIL\u4e5f\u8981\u7acb\u523b\u4ea4\u51fa\u6765!! Hhh. \u4e0b\u8ff0\u7684\u4ee3\u7801\u6574\u4e2a\u8fd0\u884c\u8fc7\u7a0b\u662f\u600e\u6837\u7684? \u5173\u952e\u70b9\u5728\u4e8e: \u540c\u4e00\u8fdb\u7a0b\u4e0b\u7684\u591a\u4e2a\u7ebf\u7a0b, \u751f\u6210\u540e\u4e00\u4e0a\u6765\u5c31\u4f1a\u5148\u62a2GIL\u9501! (\u7ebf\u7a0b\u6267\u884c\u9700\u8981GIL\u9501) GIL\u9501\u4f1a\u5728\u7ebf\u7a0b\u4e0d\u80fd\u6267\u884c (CPU\u88abOS\u62ff\u8d70\u4e86) \u7684\u60c5\u51b5\u4e0b,\u88ab\u5f3a\u884c\u7684\u91ca\u653e\u6389,\u4f46\u81ea\u5b9a\u7684\u4e92\u65a5\u9501\u4e0d\u4f1a\u88ab\u5f3a\u884c\u91ca\u653e\u6389! \u7a0b\u5e8f\u4e2d\u6709\u4e09\u4e2a\u5b50\u7ebf\u7a0b, \u7ebf\u7a0bA\u3001B\u3001C. (\u9ed8\u8ba4\u62a2\u5230GIL\u4e4b\u524d\u662f\u6709CPU\u65f6\u95f4\u7247\u7684) \u25a0 \u5047\u8bbeA\u5148\u62a2\u5230GIL\u9501,\u5f00\u59cb\u8fd0\u884c\u4efb\u52a1\u4ee3\u7801. 1> global n \u5f88\u5feb,\u5ffd\u7565\u4e0d\u8ba1; 2> mutex.acquire() A\u53ef\u4ee5\u5f88\u60a0\u95f2\u7684\u62a2\u5230mutex\u8fd9\u628a\u9501,\u8fd9\u91cc\u6ca1\u4eba\u8ddf\u7ebf\u7a0bA\u62a2(\u7ebf\u7a0bB\u548cC\u8fd8\u5728\u7b49\u7740\u62a2GIL\u5462) 3> \u7ee7\u7eed\u8fd0\u884c, \u5f53A\u8fd0\u884c\u5230 time.sleep(0.1) \u65f6, \u9047\u5230\u4e86IO, OS\u4f1a\u5265\u593a\u7ebf\u7a0bA\u7684CPU. \u7ebf\u7a0bA\u6ca1\u4e86CPU\u4e0d\u80fd\u8fd0\u884c,GIL\u9501\u4e5f\u5c06\u91ca\u653e! \u25a0 \u7ebf\u7a0bA\u5c06GIL\u9501\u4e00\u91ca\u653e,\u5047\u8bbe\u7ebf\u7a0bB\u62a2\u5230\u4e86. B\u8fd0\u884c\u5b8c global n \u540e, \u51c6\u5907\u7ee7\u7eed\u8fd0\u884c mutex.acquire() ,\u50bb\u773c\u4e86,\u56e0\u4e3amutex\u8fd9\u628a\u9501\u8fd8\u88ab\u7ebf\u7a0bA\u5360\u7528\u7740\u5462,\u5c31\u5728\u539f\u5730\u963b\u585e\u4e86. OS\u53ef\u4e0d\u4f1a\u8ba9CPU\u95f2\u7740,\u76f4\u63a5\u628acpu\u5265\u593a\u8d70,\u7ebf\u7a0bB\u540c\u6837\u5c06GIL\u9501\u91ca\u653e\u4e86\u51fa\u6765. \u25a0 \u7ebf\u7a0bB\u5c06GIL\u9501\u4e00\u91ca\u653e,\u5047\u8bbe\u7ebf\u7a0bC\u62a2\u5230\u4e86. \u7ebf\u7a0bC\u51c6\u5907\u8fd0\u884c mutex.acquire() \u65f6, \u4e5f\u53d1\u73b0mutex\u8fd9\u628a\u9501\u8fd8\u88ab\u7ebf\u7a0bA\u5360\u7528\u7740\u5462,\u53c8\u88ab\u5265\u593acpu,\u91ca\u653eGIL.. \u25a0 \u7ebf\u7a0bC\u5c06GIL\u9501\u4e00\u91ca\u653e,\u7ebf\u7a0bB\u53c8\u62a2\u5230\u4e86.. \u515c\u515c\u8f6c\u8f6c,\u5728\u7ebf\u7a0bA\u7761\u7720\u671f\u95f4,\u4f1a\u53d1\u751f\u5927\u91cf\u7ebf\u7a0bBC\u4e89\u62a2GIL\u7684\u65e0\u7528\u8fc7\u7a0b. \u8fd9\u4f1a\u5e26\u6765\u6548\u7387\u95ee\u9898,\u8fd9\u4e5f\u662fpy2\u5230py3\u4e0d\u65ad\u4f18\u5316\u7684\u95ee\u9898,\u8fd9\u4e2a\u4e89\u62a2\u5bf9\u8ba1\u7b97\u673a\u6765\u8bf4\u5f88\u6162,\u4f46\u5bf9\u6211\u4eec\u6765\u8bf4\u5f88\u5feb,\u6240\u4ee5,\u5982\u679c\u53ea\u7ad9\u5728pyhton\u5e94\u7528\u7a0b\u5e8f\u7684\u89d2\u5ea6\u601d\u8003\u95ee\u9898,\u8bda\u7136\u8fd0\u884c\u901f\u5ea6\u80af\u5b9a\u4e0d\u5982\u673a\u5668\u8bed\u8a00\u5565\u7684\u5feb,\u4f46\u8861\u91cf\u4e00\u4e2a\u7a0b\u5e8f/\u8f6f\u4ef6\u7684\u6548\u7387\u8981\u7ad9\u5728\u6574\u4e2a\u4f53\u7cfb\u7684\u89d2\u5ea6\u770b\u5f85,\u5957\u63a5\u5b57\u7a0b\u5e8f\u5927\u90e8\u5206\u7684\u901f\u5ea6\u90fd\u5361\u5728\u7f51\u901f\u4e0a,\u800c\u7edd\u975e\u7f16\u7a0b\u8bed\u8a00\u4e0a. \u25a0 \u76f4\u5230A\u7761\u9192\u4e86,A\u52a0\u5165\u4e86\u4e89\u62a2\u7684\u8fc7\u7a0b,\u5047\u8bbe\u7ebf\u7a0bA\u518d\u6b21\u62a2\u5230\u4e86GIL\u9501 (\u76f4\u5230\u7ebf\u7a0bA\u62a2\u5230\u4e86GIL\u9501\u624d\u4f1a\u6709\u610f\u4e49..) A\u4ece\u7761\u7684\u4f4d\u7f6e\u5f80\u4e0b\u7ee7\u7eed\u8fd0\u884c! \u6267\u884c\u5b8c n = temp - 1 \u540e, \u7ee7\u7eed\u6267\u884c mutex.acquire() . \u7ebf\u7a0bA\u4f1a\u5c06mutex\u8fd9\u628a\u4e92\u65a5\u9501\u91ca\u653e\u6389! \u5230\u8fd9\u91cc,\u7ebf\u7a0bA\u7684\u6d3b\u5df2\u7ecf\u5e72\u5b8c\u4e86,\u4e0d\u4f1a\u518d\u5360\u7528CPU,GIL\u9501\u4e5f\u4f1a\u91ca\u653e. \u9700\u8981\u6ce8\u610f\u7684\u662f,\u6b64\u65f6n\u7684\u503c\u5df2\u7ecf\u88ab\u6539\u621099\u4e86!! \u610f\u5473\u8fd9\u7d27\u63a5\u7740\u62a2\u5230GIL\u7684\u7ebf\u7a0b\u62ff\u5230\u7684n\u503c\u4e3a99!!\u4e0d\u662f100. \u25a0 \u63a5\u4e0b\u6765\u7a0b\u5e8f\u7684\u8fd0\u884c\u540c\u7406,\u4e0d\u518d\u8d58\u8ff0. import time from threading import Thread , Lock mutex = Lock () n = 100 def task (): global n mutex . acquire () temp = n time . sleep ( 0.1 ) n = temp - 1 mutex . release () if __name__ == '__main__' : start = time . time () t_l = [ Thread ( target = task ) for _ in range ( 3 )] for t in t_l : t . start () for t in t_l : t . join () print ( n , time . time () - start ) # 97 0.3104860782623291 \"\"\"GIL\u9501\u4e0e\u4e92\u65a5\u9501\u7efc\u5408\u5206\u6790(\u91cd\u70b9!!!) 1.100\u4e2a\u7ebf\u7a0b\u53bb\u62a2GIL\u9501,\u5373\u62a2\u6267\u884c\u6743\u9650 2.\u80af\u5b9a\u6709\u4e00\u4e2a\u7ebf\u7a0b\u5148\u62a2\u5230GIL(\u6682\u4e14\u79f0\u4e3a\u7ebf\u7a0b1),\u7136\u540e\u5f00\u59cb\u6267\u884c,\u4e00\u65e6\u6267\u884c\u5c31\u4f1a\u62ff\u5230lock.acquire() 3.\u6781\u6709\u53ef\u80fd\u7ebf\u7a0b1\u8fd8\u672a\u8fd0\u884c\u5b8c\u6bd5(eg:\u7ebf\u7a0b1\u9047\u5230\u4e86IO\u91ca\u653e\u4e86GIL\u9501),\u5c31\u6709\u53e6\u5916\u4e00\u4e2a\u7ebf\u7a0b2\u62a2\u5230GIL. \u7136\u540e\u7ebf\u7a0b2\u5f00\u59cb\u8fd0\u884c,\u4f46\u7ebf\u7a0b2\u53d1\u73b0\u4e92\u65a5\u9501lock\u8fd8\u672a\u88ab\u7ebf\u7a0b1\u91ca\u653e,\u4e8e\u662f\u963b\u585e,\u88ab\u8feb\u91ca\u653eGIL. 4.\u76f4\u5230\u7ebf\u7a0b1\u505a\u5b8cIO\u91cd\u65b0\u62a2\u5230GIL,\u5f00\u59cb\u4ece\u4e0a\u6b21\u6682\u505c\u7684\u4f4d\u7f6e\u7ee7\u7eed\u6267\u884c. \u76f4\u5230\u6b63\u5e38\u91ca\u653e\u4e92\u65a5\u9501lock,\u7136\u540e\u5176\u4ed6\u7684\u7ebf\u7a0b\u518d\u91cd\u590d2 3 4\u7684\u8fc7\u7a0b \u8fd9\u5c31\u5bfc\u81f4\u4e86\"\u4e32\u884c\"\u8fd0\u884c\u7684\u6548\u679c!! \u56de\u987e\u4e00\u4e0b:(\u8fdb\u7a0b\u90a3\u91cc\u63d0\u5230\u8fc7) \u65e2\u7136\u662f\u4e32\u884c,\u90a3\u4e3a\u5565\u4e0d\u6267\u884c t1.start() t1.join() t2.start() t2.join() \u8bed\u53e5\u6765\u8fbe\u5230\u4e32\u884c\u7684\u6548\u679c\u5462? join\u662f\u7b49\u5f85\u6240\u6709,\u5373\u6574\u4f53\u4e32\u884c,\u800c\u4e92\u65a5\u9501\u53ea\u662f\u9501\u4f4f\u4fee\u6539\u5171\u4eab\u6570\u636e\u7684\u90e8\u5206,\u5373\u90e8\u5206\u4e32\u884c; \u8981\u60f3\u4fdd\u8bc1\u6570\u636e\u5b89\u5168\u7684\u6839\u672c\u539f\u7406\u5728\u4e8e\u8ba9\u5e76\u53d1\u53d8\u6210\u4e32\u884c,join\u4e0e\u4e92\u65a5\u9501\u90fd\u53ef\u4ee5\u5b9e\u73b0,\u6beb\u65e0\u7591\u95ee,\u4e92\u65a5\u9501\u7684\u90e8\u5206\u4e32\u884c\u6548\u7387\u8981\u66f4\u9ad8!! \"\"\" \u591a\u8fdb\u7a0b vs \u591a\u7ebf\u7a0b \u00b6 \u629b\u51fa\u95ee\u9898 \u00b6 GIL\u8fd9\u628a\u9501\u662f\u5b58\u5728\u4e8e\u89e3\u91ca\u5668\u7684,\u4e00\u4e2a\u8fdb\u7a0b\u5185\u6709\u8fd9\u4e48\u4e00\u628a\u9501.. \u6709\u4e86GIL\u7684\u5b58\u5728, \u540c\u4e00\u65f6\u523b\u540c\u4e00\u8fdb\u7a0b\u4e2d\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u88ab\u6267\u884c. \u4e5f\u8bb8\u4f60\u4f1a\u8d28\u95ee: \u8fdb\u7a0b\u53ef\u4ee5\u5229\u7528\u591a\u6838,\u4f46\u662f\u5f00\u9500\u5927; -- \u591a\u8fdb\u7a0b\u5e76\u884c \u800c python\u7684\u591a\u7ebf\u7a0b\u5f00\u9500\u5c0f, \u4f46\u5374\u65e0\u6cd5\u5229\u7528\u591a\u6838\u4f18\u52bf (\u54ea\u6015cpu\u6709100\u4e2a\u6838,\u540c\u4e00\u65f6\u523b\u4e5f\u53ea\u4f1a\u7528\u4e00\u4e2a) So, python\u6ca1\u7528\u4e86?! python\u8bbe\u8ba1\u591a\u7ebf\u7a0b\u5f88\u9e21\u808b? NO! cpu\u662f\u7528\u6765\u505a\u8ba1\u7b97\u7684,\u591acpu/\u591a\u6838,\u610f\u5473\u7740\u53ef\u4ee5\u6709\u591a\u4e2a\u6838\u5e76\u884c\u5b8c\u6210\u8ba1\u7b97,\u6240\u4ee5\u591a\u6838\u63d0\u5347\u7684\u662f\u8ba1\u7b97\u6027\u80fd!! cpu\u4e00\u65e6\u9047\u5230I/O\u963b\u585e, \u4ecd\u7136\u9700\u8981\u7b49\u5f85, \u6240\u4ee5\u591a\u6838\u5bf9I/O\u64cd\u4f5c\u6ca1\u4ec0\u4e48\u7528\u5904 !! \u6253\u4e2a\u6bd4\u65b9: \u4e00\u4e2a\u5de5\u4eba\u76f8\u5f53\u4e8ecpu,\u6b64\u65f6\u8ba1\u7b97\u76f8\u5f53\u4e8e\u5de5\u4eba\u5728\u5e72\u6d3b,I/O\u963b\u585e\u76f8\u5f53\u4e8e\u4e3a\u5de5\u4eba\u5e72\u6d3b\u63d0\u4f9b\u6240\u9700\u539f\u6750\u6599\u7684\u8fc7\u7a0b. \u5de5\u4eba\u5e72\u6d3b\u7684\u8fc7\u7a0b\u4e2d\u5982\u679c\u6ca1\u6709\u539f\u6750\u6599\u4e86,\u5219\u5de5\u4eba\u5e72\u6d3b\u7684\u8fc7\u7a0b\u9700\u8981\u505c\u6b62,\u76f4\u5230\u7b49\u5f85\u539f\u6750\u6599\u7684\u5230\u6765. \u5982\u679c\u5de5\u5382\u5e72\u7684\u5927\u591a\u6570\u4efb\u52a1\u90fd\u8981\u6709\u51c6\u5907\u539f\u6750\u6599\u7684\u8fc7\u7a0b ( I/O\u5bc6\u96c6\u578b ) \u90a3\u4e48\u4f60\u6709\u518d\u591a\u7684\u5de5\u4eba,\u610f\u4e49\u4e5f\u4e0d\u5927. \u8fd8\u4e0d\u5982\u4e00\u4e2a\u4eba,\u5728\u7b49\u6750\u6599\u7684\u8fc7\u7a0b\u4e2d\u8ba9\u5de5\u4eba\u53bb\u5e72\u522b\u7684\u6d3b. \u53cd\u8fc7\u6765\u8bb2,\u5982\u679c\u4f60\u7684\u5de5\u5382\u539f\u6750\u6599\u90fd\u9f50\u5168 ( \u8ba1\u7b97\u5bc6\u96c6\u578b ) ,\u90a3\u5f53\u7136\u662f\u5de5\u4eba\u8d8a\u591a,\u6548\u7387\u8d8a\u9ad8! IO\u5bc6\u96c6\u578b\u7a0b\u5e8f\u91cc\u603b\u4f1a\u6709\u8ba1\u7b97,cpu\u8d8a\u591a,\u6548\u7387\u8d8a\u9ad8 ( OS\u53ef\u8c03\u914d\u7684\u8d44\u6e90 \"\u6838\" \u5c31\u66f4\u591a ) ,\u6027\u4ef7\u6bd4\u4f1a\u8d8a\u4f4e ( \u6838\u95f2\u7f6e ) . \u8ba1\u7b97\u5bc6\u96c6\u578b\u91cc\u7684IO\u64cd\u4f5c\u51e0\u4e4e\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1. IO\u5bc6\u96c6\u578b -- \u591a\u7ebf\u7a0b,\u505aIO\u5c31\u5207,\u4e0d\u4f1a\u95f2\u7740,\u90fd\u9047\u5230IO\u90a3\u5c31\u90fd\u505aIO. \u8ba1\u7b97\u5bc6\u96c6\u578b -- \u591a\u8fdb\u7a0b,\u591a\u4e2a\u8fdb\u7a0b\u4e4b\u95f4\u7684\u539f\u751f\u7ebf\u7a0b\u4e0d\u5b58\u5728\u62a2GIL. ( \u6bcf\u4e2a\u8fdb\u7a0b\u91cc\u90fd\u6709\u4e00\u4e2aGIL ) \u4e3e\u4f8b\u5206\u6790 \u00b6 \u591a\u7ebf\u7a0b\u7528\u4e8eIO\u5bc6\u96c6\u578b, \u5982socket\u3001\u722c\u866b\u3001web; -- \u6211\u4eec\u5f00\u53d1\u7684\u5c31\u662f\u5957\u63a5\u5b57\u7a0b\u5e8f,\u79bb\u4e0d\u5f00\u7f51\u7edcIO. \u591a\u8fdb\u7a0b\u7528\u4e8e\u8ba1\u7b97\u5bc6\u96c6\u578b, \u5982\u91d1\u878d\u5206\u6790\u3001\u533a\u5757\u94fe\u6316\u77ff.. \u73b0\u5728\u6709\u56db\u4e2a\u4efb\u52a1\u9700\u8981\u5904\u7406, \u5904\u7406\u65b9\u5f0f\u80af\u5b9a\u662f\u8981\u73a9\u51fa\u5e76\u53d1\u7684\u6548\u679c, \u5e76\u53d1\u89e3\u51b3\u65b9\u6848\u6709\u4e24\u79cd: \u65b9\u68481> \u5f00\u542f\u56db\u4e2a\u8fdb\u7a0b. \u65b9\u68482> \u4e00\u4e2a\u8fdb\u7a0b\u4e0b,\u5f00\u542f\u56db\u4e2a\u7ebf\u7a0b. \u5355\u6838\u60c5\u51b5 \u00b6 1> \u5982\u679c\u56db\u4e2a\u4efb\u52a1\u662f\u8ba1\u7b97\u5bc6\u96c6\u578b, \u6ca1\u6709\u591a\u6838\u6765\u5e76\u884c\u8ba1\u7b97, \u65b9\u6848\u4e00\u5f92\u589e\u4e86\u521b\u5efa\u8fdb\u7a0b\u7684\u5f00\u9500, \u65b9\u6848\u4e8c\u80dc 2> \u5982\u679c\u56db\u4e2a\u4efb\u52a1\u662fI/O\u5bc6\u96c6\u578b, \u65b9\u6848\u4e00\u521b\u5efa\u8fdb\u7a0b\u7684\u5f00\u9500\u5927, \u4e14\u8fdb\u7a0b\u7684\u5207\u6362\u901f\u5ea6\u8fdc\u4e0d\u5982\u7ebf\u7a0b, \u65b9\u6848\u4e8c\u80dc \u7efc\u4e0a, \u5355\u6838\u60c5\u51b5, \u65e0\u8bba\u662f\u8ba1\u7b97\u5bc6\u96c6\u578b\u8fd8\u662fIO\u5bc6\u96c6\u578b,\u90fd\u4f7f\u7528\u591a\u7ebf\u7a0b!! \u591a\u6838\u60c5\u51b5 \u00b6 \u5047\u8bbecpu\u67094\u4e2a\u6838. 1> \u5982\u679c\u56db\u4e2a\u4efb\u52a1\u662f\u8ba1\u7b97\u5bc6\u96c6\u578b, \u5e94\u8be5\u5f00\u591a\u8fdb\u7a0b, \u591a\u8fdb\u7a0b\u53ef\u4ee5\u5229\u7528\u56db\u4e2a\u6838\u5e76\u884c\u8fd0\u7b974\u4e2a\u4efb\u52a1; \u5f00\u591a\u7ebf\u7a0b\u7684\u8bdd, \u56e0\u4e3aGIL\u7684\u5b58\u5728, \u540c\u4e00\u65f6\u523bcpu\u53ea\u6709\u4e00\u4e2a\u6838\u5728\u8fd0\u4f5c(\u540c\u4e00\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u5728\u8fd0\u884c)..\u5e76\u4e0d\u80fd\u5e26\u6765\u591a\u5927\u6027\u80fd\u4e0a\u7684\u63d0\u5347,\u751a\u81f3\u4e0d\u5982\u4e32\u884c(\u6ca1\u6709\u5927\u91cf\u5207\u6362). 2> \u5982\u679c\u56db\u4e2a\u4efb\u52a1\u662fI/O\u5bc6\u96c6\u578b, \u5e94\u8be5\u7528\u591a\u7ebf\u7a0b!! \u56e0\u4e3a\u518d\u591a\u7684\u6838\u4e5f\u4e0d\u80fd\u89e3\u51b3I/O\u95ee\u9898! \u5047\u8bbe\u6bcf\u4e2a\u4efb\u52a1\u670910\u79d2\u5728\u505aIO , \u5f00\u591a\u8fdb\u7a0b , 4 \u4e2acpu\u90fd\u5728\u7b97 , 10 \u79d2\u591a\u4e00\u70b9\u8fd0\u884c\u5b8c , \u5176\u4e2d\u5927\u91cf\u7684\u65f6\u95f4\u90fd\u5728\u7b49 . \u5f004\u4e2a\u7ebf\u7a0b\u591a\u957f\u65f6\u95f4\u8fd0\u7b97\u5b8c ? \u5728python\u91cc\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u540c\u4e00\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u6267\u884c , \u591a\u7ebf\u7a0b\u7528\u4e0d\u4e0a\u591a\u6838 . \u7ebf\u7a0b1\u9047\u5230IO\u4e86 , cpu\u8fd0\u884c\u7ebf\u7a0b2 , \u7ebf\u7a0b2\u9047\u5230IO\u4e86 , cpu\u8fd0\u884c\u7ebf\u7a0b3 .. cpu\u6765\u56de\u8fd0\u884c\u8fd9\u4e9b\u7ebf\u7a0b . \u6700\u540e\u4e5f\u662f10s\u591a\u4e00\u70b9 . \u4f46\u5f00\u591a\u7ebf\u7a0b\u7684\u5f00\u9500\u66f4\u5c0f , cpu\u5728\u7ebf\u7a0b\u4e2d\u5207\u6362\u66f4\u5feb . ( \u8fdb\u7a0b\u4e0d\u540c\u5185\u5b58\u5730\u5740\u4e4b\u95f4\u5207\u6362 , \u7ebf\u7a0b\u540c\u4e00\u5185\u5b58\u5185\u5207\u6362 , \u5f00\u9500\u80af\u5b9a\u4e0d\u4e00\u6837 ) \u6240\u4ee5\u591a\u7ebf\u7a0b\u7684\u5e76\u53d1\u5728\u9047\u5230IO\u7684\u60c5\u51b5\u4e0b\u53cd\u800c\u6bd4\u591a\u8fdb\u7a0b\u7684\u6548\u7387\u66f4\u9ad8\u4e00\u70b9 . \u7efc\u4e0a, \u591a\u6838\u60c5\u51b5, \u8ba1\u7b97\u5bc6\u96c6\u578b\u7528\u591a\u8fdb\u7a0b,IO\u5bc6\u96c6\u578b\u7528\u591a\u7ebf\u7a0b!! \u4ee5\u540e\u8fd0\u884c\u7a0b\u5e8f\u82e5\u9700\u8981\u5927\u91cf\u7684\u8fd0\u7b97\u6027\u80fd\u7684\u8bdd,(\u4e0d\u4f1a\u5728\u4e00\u53f0\u673a\u5668\u4e0a\u52a01000\u4e2acpu),\u800c\u662f\u91c7\u7528\u5206\u5e03\u5f0f\u7684\u601d\u60f3!! \u8ba1\u7b97\u4efb\u52a1\u53ef\u4ee5\u5206\u6563\u5230\u4e00\u53f0\u53f0\u7684\u8ba1\u7b97\u673a\u4e0a. \u591a\u53f0\u673a\u5668\u5f62\u6210\u4e00\u4e2a\u96c6\u7fa4\u5171\u540c\u6765\u5e72\u8fd9\u4e2a\u6d3b. \u6bcf\u53f0\u673a\u5668\u5206\u7684\u8fdb\u7a0b\u6570\u5176\u5b9e\u5e76\u4e0d\u591a!! \u6240\u4ee5, \u5728\u5206\u5e03\u5f0f\u8ba1\u7b97\u9762\u524d, \u591a\u8fdb\u7a0b\u5360\u7528\u7684\u5185\u5b58\u7684\u5f00\u9500\u6839\u672c\u4e0d\u662f\u95ee\u9898!! \u5b9e\u9a8c\u9a8c\u8bc1 \u00b6 \u8fd9\u91cc\u7528\u7eaf\u8ba1\u7b97\u6765\u4ee3\u66ff\u8ba1\u7b97\u5bc6\u96c6\u578b,\u7eafIO\u6765\u4ee3\u66ffIO\u5bc6\u96c6\u578b\u8fdb\u884c\u5b9e\u9a8c \u8ba1\u7b97\u5bc6\u96c6\u578b \u00b6 \u8ba1\u7b97\u5bc6\u96c6\u578b -- \u591a\u8fdb\u7a0b\u6548\u7387\u9ad8! \u5b9e\u9a8c\u7ed3\u679c\u7684\u7528\u65f6\u4e0d\u662f4\u500d\u7684\u5173\u7cfb,\u8ddf\u673a\u5b50\u6709\u5173,\u6211\u7528\u7684mac,\u4e0d\u7528\u8fc7\u4e8e\u7ea0\u7ed3! import os import time from multiprocessing import Process from threading import Thread def work (): res = 0 for i in range ( 100000000 ): res += 1 if __name__ == '__main__' : # 4 -- \u672c\u673a\u67094\u4e2a\u6838 print ( os . cpu_count ()) start = time . time () # l = [Process(target=work) for _ in range(4)] # -- 23.658430099487305 l = [ Thread ( target = work ) for _ in range ( 4 )] # -- 31.427711009979248 for obj in l : obj . start () for obj in l : obj . join () print ( time . time () - start ) IO\u5bc6\u96c6\u578b \u00b6 IO\u5bc6\u96c6\u578b -- \u591a\u7ebf\u7a0b\u6548\u7387\u9ad8! \"\"\" \u5f00\u591a\u8fdb\u7a0b,\u53ef\u4ee5\u7528\u591a\u6838\u4f18\u52bf,\u5e76\u884c\u8fd0\u884c,\u610f\u5473\u77404\u4e2a\u6838\u540c\u65f6\u8fd0\u884c\u56db\u4e2a\u4efb\u52a1. \u4f46\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u9047\u5230IO\u4e86,cpu\u4e0d\u4f1a\u5728\u90a3\u7b49.\u5f53IO\u7ed3\u675f\u540e,OS\u624d\u4f1a\u91cd\u65b0\u5206\u914d\u7ed9\u8fdb\u7a0bcpu. So,\u591a\u8fdb\u7a0b\u80fd\u540c\u65f6\u4f7f\u75284\u4e2a\u6838,\u4f46\u662f\u4e00\u65e6\u9047\u5230IO,\u89e3\u51b3IO\u671f\u95f4\u662f\u6ca1\u6709\u7528\u4e0acpu\u7684. \u5f00\u542f\u591a\u4e2a\u7ebf\u7a0b,cpu\u4f1a\u542cOS\u6307\u4ee4\u4e0d\u65ad\u5728\u8fd9\u56db\u4e2a\u7ebf\u7a0b\u4e4b\u95f4\u8c03\u5ea6.(\u540c\u4e00\u65f6\u95f4\u53ea\u6709\u4e00\u4e2a\u6838\u5728\u4f7f\u7528) \u56db\u4e2a\u7ebf\u7a0b\u5148\u62a2gil,\u7ebf\u7a0b\u9047\u5230IO,\u5265\u593acpu,\u91ca\u653eGIL\u9501..\u518d\u62a2GIL.. \"\"\" import os import time from threading import Thread from multiprocessing import Process def work (): time . sleep ( 2 ) if __name__ == '__main__' : l = [] print ( os . cpu_count ()) start = time . time () for i in range ( 400 ): # run time is 2.2067270278930664 # -- 400\u4e2a\u8fdb\u7a0bIO\u65f6\u95f4\u90fd\u662f2\u79d2,\u5269\u4e0b\u7684\u65f6\u95f4\u8017\u8d39\u5728\u521b\u5efa\u8fdb\u7a0b\u4ee5\u53ca\u5207\u6362\u4e0a p = Process ( target = work ) # run time is 2.0048937797546387 # -- \u522b\u770b\u8fd9\u91cc\u5b9e\u9a8c\u7ed3\u679c\u76f8\u5dee\u8fd9\u4e48\u5c0f,\u968f\u7740\u6570\u91cf\u7ea7\u7684\u589e\u52a0,\u76f8\u5dee\u662f\u6050\u6016\u7684 # p = Thread(target=work) l . append ( p ) p . start () for p in l : p . join () stop = time . time () print ( 'run time is %s ' % ( stop - start )) \u8865\u5145 \u00b6 \u25a0 CPU\u548cGIL\u5fc5\u987b\u90fd\u5177\u5907\u624d\u53ef\u4ee5\u6267\u884c\u4ee3\u7801 \u25a0 GIL\u89e3\u91ca\u5668\u9501\u4f1a\u5728\u4e24\u79cd\u60c5\u51b5\u4e0b\u91ca\u653e \u4e3b\u52a8\u91ca\u653e: \u81ea\u5df1\u4e3b\u52a8\u4ea4\u51fa\u6765 \u9047\u5230IO\u64cd\u4f5c\u6216\u8005\u5206\u914d\u7684cpu\u65f6\u95f4\u7247\u5230\u65f6\u95f4\u4e86 . \u6ce8\u610f ! GIL\u5b58\u5728\u7684\u610f\u4e49\u5728\u4e8e\u7ef4\u62a4\u7ebf\u7a0b\u5b89\u5168 . x = 10 \u6d89\u53ca\u5230io\u64cd\u4f5c , \u5982\u679c\u4e5f\u88ab\u5f53\u6210\u666e\u901a\u7684io\u64cd\u4f5c , \u4e3b\u52a8\u4ea4\u51faGIL , \u90a3\u4e48\u4e00\u5b9a\u4f1a\u51fa\u73b0\u6570\u636e\u4e0d\u5b89\u5168\u95ee\u9898 . \u6240\u4ee5x = 10 \u4e00\u5b9a\u662f\u88ab\u533a\u5206\u5bf9\u5f85\u4e86 . \u81f3\u4e8ex = 10 \u5982\u4f55\u5b9e\u73b0\u7684\u88ab\u533a\u5206\u5bf9\u5f85 . \u8fd9\u5176\u5b9e\u5f88\u597d\u7406\u89e3 , \u4efb\u4f55\u7684io\u64cd\u4f5c\u90fd\u662f\u5411\u64cd\u4f5c\u7cfb\u7edf\u53d1\u9001\u7cfb\u7edf\u8c03\u7528 , \u5373\u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u7684\u67d0\u4e00\u63a5\u53e3\u5b9e\u73b0\u7684 . \u6bd4\u5982\u53d8\u91cf\u8d4b\u503c\u64cd\u4f5c\u80af\u5b9a\u662f\u8c03\u7528\u4e86\u4e00\u79cd\u63a5\u53e3 , \u6587\u4ef6\u8bfb\u5199\u64cd\u4f5c\u80af\u5b9a\u4e5f\u662f\u8c03\u7528\u4e86\u4e00\u79cd\u63a5\u53e3 , \u7f51\u7edcio\u4e5f\u662f\u8c03\u7528\u4e86\u67d0\u4e00\u79cd\u63a5\u53e3 .. \u8fd9\u5c31\u7ed9\u533a\u5206\u5bf9\u5f85\u63d0\u4f9b\u4e86\u5b9e\u73b0\u7684\u4f9d\u636e , \u5373\u53d8\u91cf\u8d4b\u503c\u64cd\u4f5c\u5e76\u4e0d\u5c5e\u4e8e\u4e3b\u52a8\u91ca\u653e\u7684\u8303\u7574 , \u8fd9\u6837GIL\u5728\u7ebf\u7a0b\u5b89\u5168\u65b9\u9762\u624d\u4f1a\u6709\u6240\u4f5c\u4e3a ! \u88ab\u52a8\u91ca\u653e python3 .2 \u4e4b\u540e\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf : /* Python / ceval . c */ ... static volatile int gil_drop_request = 0 ; \u6ce8\u610f\u5f53\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u65f6 , \u8be5\u7ebf\u7a0b\u4f1a\u4e00\u76f4\u8fd0\u884c , \u4e0d\u4f1a\u91ca\u653eGIL , \u5f53\u6709\u591a\u4e2a\u7ebf\u7a0b\u65f6 : \u4f8b\u5982thead1 \u3001 thread2 . \u5982\u679cthread1\u4e00\u76f4\u6ca1\u6709\u4e3b\u52a8\u91ca\u653e\u6389GIL , \u90a3\u80af\u5b9a\u4e0d\u4f1a\u8ba9\u4ed6\u4e00\u76f4\u8fd0\u884c\u4e0b\u53bb ! 1 > \u5b9e\u9645\u4e0a\u5728thread1\u8fd0\u884c\u7684\u8fc7\u7a0b\u65f6 , thread2\u5c31\u4f1a\u6267\u884c\u4e00\u4e2acv_wait ( gil , TIMEOUT ) \u7684\u51fd\u6570 ( \u9ed8\u8ba4TIMEOUT\u503c\u4e3a5ms , \u4f46\u662f\u53ef\u4ee5\u4fee\u6539 ), \u4e00\u65e6\u5230\u4e86\u65f6\u95f4 , \u5c31\u4f1a\u5c06\u5168\u5c40\u53d8\u91cfgil_drop_request = 1 ; 2 > \u7ebf\u7a0bthread1\u5c31\u4f1a\u88ab\u5f3a\u5236\u91ca\u653eGIL , \u7136\u540e\u7ebf\u7a0bthread2\u5f00\u59cb\u8fd0\u884c\u5e76\u8fd4\u56de\u4e00\u4e2aack\u7ed9\u7ebf\u7a0bthread1 \u7ebf\u7a0bthread1\u5f00\u59cb\u8c03\u7528cv_wait ( gil , TIMEOUT ) \u5373\u4e00\u4e2a\u7ebf\u7a0b\u5728\u8fd0\u884c\u65f6 , \u5176\u5b83\u7ebf\u7a0b\u4f1a\u7ed9\u5b83\u8ba1\u65f6 ! \u56de\u7b54: python\u7684\u591a\u7ebf\u7a0b\u662f\u4e0d\u662f\u6bd4\u8f83\u9e21\u808b\uff1f \u662f\u4e0d\u662f\u56e0\u4e3apython\u591a\u7ebf\u7a0b\u4e0d\u80fd\u5b9e\u73b0\u5e76\u884c \uff1f \u4f55\u4e3a\u5e76\u884c . \u5e76\u884c\u6307\u7684\u662f\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u540c\u65f6\u8fd0\u884c . \u53ea\u6709\u591a\u6838\u624d\u80fd\u5b9e\u73b0\u5e76\u884c . python\u7684\u591a\u7ebf\u7a0b\u4e0d\u80fd\u5b9e\u73b0\u5e76\u884c\u610f\u5473\u7740\u5b83\u4e0d\u80fd\u7528\u4e0a\u591a\u6838\u4f18\u52bf . \u4ec0\u4e48\u662f\u591a\u6838\u4f18\u52bf \uff1f \u591a\u6838\u662f\u591a\u4e2acpu , \u591a\u4e2acpu\u5728\u4efb\u52a1\u662f\u8ba1\u7b97\u5bc6\u96c6\u578b\u7684\u60c5\u51b5\u4e0b\u624d\u7b97\u4f18\u52bf . \u82e5\u4efb\u52a1\u4e0d\u662f\u8ba1\u7b97\u5bc6\u96c6\u578b\u7684 , \u90a3\u591a\u6838\u4f18\u52bf\u8ddf\u591a\u7ebf\u7a0b\u6ca1\u6709\u5173\u7cfb . \u54b1\u4ee5\u540e\u5199\u7684\u4efb\u52a1\u7edd\u5927\u591a\u6570\u90fd\u662fI / O\u5bc6\u96c6\u578b . \u90a3\u4e48\u591a\u6838\u5c31\u4e0d\u7b97\u4f18\u52bf\u4e86 , \u8fd8\u4e0d\u5982\u4e00\u4e2a\u6838\u5728\u591a\u4e2a\u7ebf\u7a0b\u4e4b\u95f4\u6765\u56de\u5207 . \u5927\u5bb6\u901f\u5ea6\u90fd\u5dee\u4e0d\u591a . \u6240\u4ee5python\u591a\u7ebf\u7a0b\u662f\u6709\u7528\u7684 . \u53ef\u4ee5\u4f7f\u7528\u7684 ! \u82e5\u771f\u7684\u662f\u8ba1\u7b97\u5bc6\u96c6\u578b , \u90a3\u5c31\u7528\u591a\u8fdb\u7a0b . \u591a\u8fdb\u7a0b\u7684\u542f\u52a8\u548c\u5207\u6362\u5f00\u9500\u662f\u5f88\u5927 , \u4f46\u6211\u4eec\u7684\u7a0b\u5e8f\u90fd\u662f\u5206\u5e03\u5f0f\u7684\u65b9\u5f0f\u53bb\u8fd0\u884c\u7684 , \u6240\u4ee5\u4e0d\u53ef\u80fd\u8ba9\u4e00\u53f0\u673a\u5668\u8dd1\u4e0a\u4e07\u4e2a\u8fdb\u7a0b . \u90a3\u6837\u7684\u8bdd , \u5185\u5b58\u4f1a\u88ab\u6491\u7206\u7684 . \u8bf4python\u7684\u591a\u7ebf\u7a0b\u6bd4\u8f83\u9e21\u808b\u7684 , \u662f\u5bf9python\u7684\u5e76\u53d1\u7f16\u7a0b\u4e00\u65e0\u6240\u77e5 . \u5e76\u53d1\u7f16\u7a0b\u91cc\u5c31\u9700\u8981\u8003\u8651\u4efb\u52a1\u7684\u7c7b\u578b , \u662fI / O\u5bc6\u96c6\u578b\u8fd8\u662f\u8ba1\u7b97\u5bc6\u96c6\u578b .","title":"GIL\u8be6\u89e3"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/10_GIL%E8%AF%A6%E8%A7%A3/#_1","text":"","title":"\u5f15\u5165"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/10_GIL%E8%AF%A6%E8%A7%A3/#_2","text":"In CPython, the global interpreter lock, or GIL, is a mutex that prevents multiple native threads from executing Python bytecodes at once. This lock is necessary mainly because CPython\u2019s memory management is not thread-safe. (However, since the GIL exists, other features have grown to depend on the guarantees that it enforces.) 1> \u5728Cpython\u4e2d,\u5168\u5c40\u89e3\u91ca\u5668\u7ea7\u522b\u7684\u9501,\u6216\u8005\u7b80\u79f0GIL,\u662f\u4e00\u4e2a\u4e92\u65a5\u9501. 2> \u5b83\u53ef\u9632\u6b62\u591a\u4e2a\u672c\u673a\u7ebf\u7a0b\u540c\u65f6\u6267\u884cPython\u5b57\u8282\u7801. \u591a\u4e2a\u7ebf\u7a0b\u5373\u591a\u4e2a\u4efb\u52a1,\u6ce8\u610f\u662f\u540c\u4e00\u8fdb\u7a0b\u4e0b\u7684\u591a\u4e2a\u7ebf\u7a0b;\u8fd0\u884c\u7684py\u7a0b\u5e8f\u90fd\u4f1a\u8f6c\u6362\u6210py\u7684\u5b57\u8282\u7801\u8fd0\u884c 3> \u8fd9\u628a\u9501\u662f\u975e\u5e38\u91cd\u8981\u7684,\u56e0\u4e3aCpython\u89e3\u91ca\u5668\u7684\u5185\u5b58\u7ba1\u7406\u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684. \u7ebf\u7a0b\u662f\u5426\u5b89\u5168\u9700\u8981\u770b\u591a\u4e2a\u7ebf\u7a0b\u4fee\u6539\" py\u89e3\u91ca\u5668\u7ea7\u522b \u7684\u5171\u4eab\u6570\u636e\"\u5230\u5e95\u4f1a\u4e0d\u4f1a\u6539\u4e71,\u82e5\u4f1a\u6539\u4e71,\u5c06\u52a0\u4e92\u65a5\u9501 \u90a3py\u89e3\u91ca\u5668\u7ea7\u522b\u3001py\u7a0b\u5e8f\u7ea7\u522b\u7684\u5171\u4eab\u6570\u636e\u662f\u4ec0\u4e48\uff1f-- \u524d\u8005\u5783\u573e\u56de\u6536\u7684\u6570\u636e,\u540e\u8005\u7ebf\u7a0b\u6267\u884c\u7684\u4efb\u52a1\u6570\u636e.. 4> \u65e0\u8bba\u5982\u4f55,\u7531\u4e8eGIL\u7684\u5b58\u5728,Cpyhton\u89e3\u91ca\u5668\u884d\u751f\u51fa\u6765\u7684\u529f\u80fd\u90fd\u5c06\u4f9d\u8d56\u4e8e\u8fd9\u628a\u9501.","title":"\u5b98\u65b9\u89e3\u91ca"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/10_GIL%E8%AF%A6%E8%A7%A3/#gil","text":"\u9996\u5148\u660e\u786e\u4e00\u70b9! GIL\u4e0d\u662fpython\u7684\u7279\u6027, \u5b83\u662f\u5728\u5b9e\u73b0CPython\u89e3\u6790\u5668\u65f6\u6240\u5f15\u5165\u7684\u4e00\u4e2a\u6982\u5ff5! \u867d\u7136CPython\u662f\u5927\u90e8\u5206\u73af\u5883\u4e0b\u9ed8\u8ba4\u7684Python\u6267\u884c\u73af\u5883. \u4f46Python\u5b8c\u5168\u53ef\u4ee5\u4e0d\u4f9d\u8d56\u4e8eGIL, \u50cf\u5176\u4e2d\u7684JPython\u5c31\u6ca1\u6709GIL... GIL\u672c\u8d28\u5c31\u662f\u4e00\u628a\u4e92\u65a5\u9501, \u65e2\u7136\u662f\u4e92\u65a5\u9501, \u6240\u6709\u4e92\u65a5\u9501\u7684\u672c\u8d28\u90fd\u4e00\u6837, \u90fd\u662f\u5c06\u5e76\u53d1\u8fd0\u884c\u53d8\u6210\"\u4e32\u884c\". \u4ee5\u6b64\u6765\u63a7\u5236\u540c\u4e00\u65f6\u95f4\u5185\u5171\u4eab\u6570\u636e\u53ea\u80fd\u88ab\u4e00\u4e2a\u4efb\u52a1\u6240\u4fee\u6539, \u8fdb\u800c\u4fdd\u8bc1\u6570\u636e\u5b89\u5168. GIL\u8fd9\u4e2a\u4e92\u65a5\u9501\u8ba9\u540c\u4e00\u8fdb\u7a0b\u5185\u5e76\u53d1\u7684\u591a\u4e2a\u7ebf\u7a0b\u540c\u4e00\u65f6\u95f4\u53ea\u80fd\u6709\u4e00\u4e2a\u6267\u884c. \u610f\u5473\u7740\u5728Cpython\u89e3\u91ca\u5668\u4e2d: \u4e00\u4e2a\u8fdb\u7a0b\u4e0b\u7684\u591a\u4e2a\u7ebf\u7a0b\u65e0\u6cd5\u5b9e\u73b0\u5e76\u884c -- \u5373\u65e0\u6cd5\u5229\u7528\u591a\u6838\u4f18\u52bf \u5927\u767d\u8bdd: \u591a\u7ebf\u7a0b\u9762\u5bf9\u56db\u6838\u7684cpu,\u56db\u4e2a\u6838\u90fd\u7528\u5f97\u4e0a,\u4f46\u540c\u4e00\u65f6\u95f4\u53ea\u4f1a\u7528\u5176\u4e2d\u4e00\u4e2a. \u4e0d\u540c\u8fdb\u7a0b\u5185\u7684\u4e24\u4e2a\u7ebf\u7a0b\u662f\u80fd\u5e76\u884c\u7684\u54e6!\u5b9e\u5219\u6307\u7684\u5c31\u662f\u591a\u8fdb\u7a0b. \u4f46GIL\u4e0d\u5f71\u54cd\u591a\u7ebf\u7a0b\u5e76\u53d1\u7684\u5b9e\u73b0\u54e6!! (\u591a\u6838cpu\u6765\u56de\u8fd0\u884c\u591a\u4e2a\u7ebf\u7a0b,\u5728\u8fd9\u8fc7\u7a0b\u4e2d, \u6bcf\u65f6\u6bcf\u523b\u53ea\u67094\u4e2a\u6838\u4e2d\u76841\u4e2a\u6838\u5728\u8fd0\u4f5c,\u4f46\u4e0d\u4e00\u5b9a\u662f\u540c\u4e00\u4e2a\u6838) Q: \u4e3a\u4ec0\u4e48\u8981\u7528GIL\uff1f A: \u56e0\u4e3aCpython\u89e3\u91ca\u5668\u81ea\u5e26\u7684\u5783\u573e\u56de\u6536\u673a\u5236\u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684! \u63d0\u524d\u8bf4\u4e00\u5634: \u4fdd\u62a4\u4e0d\u540c\u6570\u636e (\u89e3\u91ca\u5668\u7ea7\u522b--GIL\u3001\u7a0b\u5e8f\u7ea7\u522b--\u81ea\u5b9a\u4e49\u4e92\u65a5\u9501) \u7684\u5b89\u5168, \u5c31\u5e94\u8be5\u52a0\u4e0d\u540c\u7684\u9501.","title":"GIL\u4ecb\u7ecd"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/10_GIL%E8%AF%A6%E8%A7%A3/#gil_1","text":"","title":"GIL\u8fd0\u884c\u539f\u7406"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/10_GIL%E8%AF%A6%E8%A7%A3/#_3","text":"py\u6267\u884c\u6587\u4ef6\u8c03\u7528py\u89e3\u91ca\u5668\u7684\u529f\u80fd,\u771f\u6b63\u6267\u884c\u7684\u662fpy\u89e3\u91ca\u5668\u7684\u4ee3\u7801!! \u9996\u5148\u8981\u660e\u786e\u51e0\u70b9: 1> \u6267\u884c\u4e0d\u540c\u7684py\u6587\u4ef6,\u90fd\u4f1a\u4ea7\u751f\u4e00\u4e2a\u72ec\u7acb\u7684\u8fdb\u7a0b, \u8fdb\u7a0b\u662f\u8d44\u6e90\u5355\u4f4d,\u4f1a\u5b58\u50a8\u4e0e\u8d44\u6e90\u76f8\u5173\u7684\u6240\u6709\u6570\u636e. So,\u6bcf\u4e2a\u8fdb\u7a0b\u5185\u4e0d\u4ec5\u6709\u4e3b\u7ebf\u7a0b\u5f00\u542f\u7684\u5176\u5b83\u5b50\u7ebf\u7a0b,\u8fd8\u4f1a\u6709\u89e3\u91ca\u5668\u7ea7\u522b\u7684\u5783\u573e\u56de\u6536\u7ebf\u7a0b..\u8981\u6267\u884c\u7684\u4ee3\u7801\u7b49.. 2> \u8fdb\u7a0b\u5185\u7684\u6240\u6709\u7684\u6570\u636e\u90fd\u662f\u5171\u4eab\u7684! \u5373\u8fdb\u7a0b\u5185\u7684\u4ee3\u7801 (\u5305\u62ecpy\u6587\u4ef6\u4ee5\u53capy\u89e3\u91ca\u5668\u7684\u6240\u6709\u4ee3\u7801) \u4f5c\u4e3a\u6570\u636e\u662f\u88ab\u8fdb\u7a0b\u5185\u7684\u6240\u6709\u7ebf\u7a0b\u5171\u4eab\u7684. 3> \u6240\u6709\u7684\u7ebf\u7a0b\u8981\u60f3\u8fd0\u884c\u81ea\u5df1\u7684\u4efb\u52a1, \u9700\u8981\u80fd\u591f\u8bbf\u95ee\u5230\u89e3\u91ca\u5668\u7684\u4ee3\u7801.. train.py\u7684\u4ee3\u7801\u5982\u4e0b: \u53ef\u4ee5\u5c06\u89e3\u91ca\u5668\u60f3\u8c61\u6210\u4e00\u4e2a\u529f\u80fd\u51fd\u6570,\u4e3b\u7ebf\u7a0b/\u8fdb\u7a0b\u91cc\u7684\u539f\u751f\u7ebf\u7a0b\u5c06train.py\u4ee3\u7801( \u5c31\u662f\u4e00\u5806\u666e\u901a\u7684\u5b57\u7b26\u4e32 )\u4f5c\u4e3a\u53c2\u6570\u4f20\u7ed9py\u89e3\u91ca\u5668\u6267\u884c;\u4e09\u4e2a\u5b50\u7ebf\u7a0b\u5c06task\u51fd\u6570\u4f53\u7684\u4ee3\u7801\u4f5c\u4e3a\u53c2\u6570\u4f20\u7ed9py\u89e3\u91ca\u5668\u6267\u884c!!( \u82e5\u662f\u591a\u8fdb\u7a0b\u7684\u8bdd,\u6bcf\u4e2a\u8fdb\u7a0b\u5185\u90fd\u5f97\u62f7\u8d1d\u4e00\u4efdpy\u6267\u884c\u6587\u4ef6\u7684main\u51fd\u6570\u4e4b\u4e0a\u7684\u6240\u6709\u4ee3\u7801,\u591a\u7ebf\u7a0b\u6570\u636e\u5171\u4eab\u4e0d\u7528\u62f7\u8d1d ) \u7ad9\u5728\u89e3\u91ca\u5668\u7684\u89d2\u5ea6: \u89e3\u91ca\u5668\u53bb\u7ffb\u8bd1\u8fd9\u5806py\u4ee3\u7801. \u7ad9\u5728py\u4ee3\u7801\u7684\u89d2\u5ea6: py\u4ee3\u7801\u90fd\u8c03\u7528\u4e86python\u89e3\u91ca\u5668\u7684\u529f\u80fd. So, \u771f\u6b63\u6267\u884c\u7684\u662fpython\u89e3\u91ca\u5668\u7684\u4ee3\u7801!! \u63d0\u9192\u4e00\u4e0b: \u89e3\u91ca\u5668\u7684\u4ee3\u7801\u662f\u6240\u6709\u7ebf\u7a0b\u5171\u4eab\u7684,\u6240\u4ee5\u5783\u573e\u56de\u6536\u7ebf\u7a0b\u8c03\u7528\u7684\u4e5f\u662fpython\u89e3\u91ca\u5668\u7684\u529f\u80fd!! # -- train.py import time from threading import Thread , Lock mutex = Lock () n = 100 def task (): global n with mutex : temp = n time . sleep ( 0.1 ) n = temp - 1 if __name__ == '__main__' : start = time . time () t_l = [ Thread ( target = task ) for _ in range ( 3 )] for t in t_l : t . start () for t in t_l : t . join () print ( n , time . time () - start )","title":"\u89e3\u91ca\u5668\u529f\u80fd"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/10_GIL%E8%AF%A6%E8%A7%A3/#gil_2","text":"GIL\u9501\u89e3\u51b3\u4e86python\u5783\u573e\u56de\u6536\u673a\u5236\u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\u95ee\u9898!! Ps:\u5176\u5b9e\u6211\u5728\u60f3\u5783\u573e\u56de\u6536\u673a\u5236\u7ebf\u7a0b\u4e0d\u5b89\u5168\u7684\u95ee\u9898,\u4e3a\u5565\u5f97\u901a\u8fc7\u8ba9\u6240\u6709\u7ebf\u7a0b\u5e76\u53d1(\u672c\u8d28\u662f\u4e00\u4e2a\u4e2a\u6267\u884c\u7684)\u6765\u89e3\u51b3.. \u8bd5\u60f3\u4e0b\u4e3b\u7ebf\u7a0b\u3001\u7ebf\u7a0b1-3\u653e\u5230\u4e00\u4e2a\u96c6\u5408A\u4e2d, \u5783\u573e\u56de\u6536\u7ebf\u7a0b\u653e\u5230\u96c6\u5408B\u4e2d, \u96c6\u5408A\u548c\u96c6\u5408B\u5e76\u53d1\u6267\u884c, \u96c6\u5408A\u91cc\u9762\u7684\u5143\u7d20\u5e76\u884c\u6267\u884c\u4e0d\u66f4\u597d\u561b.. Hhh. \u8fd9\u53ea\u662f\u4e00\u4e2a\u731c\u60f3, \u6211\u4e5f\u4e0d\u77e5\u5982\u4f55\u5b9e\u73b0. \u5f53\u65f6\u5927\u4f6c\u4eec\u80af\u5b9a\u6709\u5176\u5b83\u7684\u8003\u8651.. \u4e5f\u8bb8\u662f\u56e0\u4e3a\u5927\u4f6c\u8bbe\u8ba1\u591a\u7ebf\u7a0b\u65f6\u53ea\u8003\u8651\u4e86\u5355\u6838.","title":"GIL\u9501"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/10_GIL%E8%AF%A6%E8%A7%A3/#_4","text":"\u9996\u5148, \u8981\u660e\u767d\u8d4b\u503c\u64cd\u4f5c(eg: x = 100 )\u4f1a\u5206\u4e3a\u4e24\u6b65\u8fdb\u884c: step1: \u5728\u8fdb\u7a0b\u5185\u5f00\u8f9f\u4e00\u5757\u7a7a\u95f4\u653e\u503c100, step2: \u5c06\u53d8\u91cf\u4e0e\u503c\u7ed1\u5b9a\u5728\u4e00\u8d77. import dis print ( dis . dis ( \"x=100\" )) \"\"\" 1 0 LOAD_CONST 0 (100) 2 STORE_NAME 0 (x) 4 LOAD_CONST 1 (None) 6 RETURN_VALUE None \"\"\" dis\u6a21\u5757\u7684\u53c2\u8003\u8fde\u63a5\u5982\u4e0b : https : // www . cnblogs . com / blili / p / 11804690. html https : // blog . csdn . net / qq_27283619 / article / details / 106021295","title":"\u8d4b\u503c\u64cd\u4f5c\u5206\u4e24\u6b65"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/10_GIL%E8%AF%A6%E8%A7%A3/#_5","text":"Q: \u5047\u8bbe\u6ca1\u6709GIL\u7684\u5b58\u5728,\u90a3\u4e48\u540c\u4e00\u8fdb\u7a0b\u4e0b\u7684\u591a\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u5229\u7528cpu\u7684\u591a\u4e2a\u6838\u8fdb\u884c\u5e76\u53d1\u5904\u7406 \u591a\u7ebf\u7a0b\u7684\u5e76\u53d1\u8fd0\u884c\u53ef\u80fd\u4f1a\u51fa\u73b0\u4ec0\u4e48\u95ee\u9898\uff1f A: \u4e3b\u7ebf\u7a0b\u3001\u5b50\u7ebf\u7a0b1-3\u628a\u4ee3\u7801\u4ea4\u7ed9\u89e3\u91ca\u5668\u8fd0\u884c,\u5783\u573e\u56de\u6536\u7ebf\u7a0b\u8c03\u7528\u89e3\u91ca\u5668\u7684\u529f\u80fd\u65f6\u4e0d\u65f6\u770b\u770b\u6709\u65e0\u5f15\u7528\u8ba1\u6570\u4e3a0\u7684\u503c. \u597d\u5de7\u4e0d\u5de7, \u8bed\u53e5 x=100 \u6b63\u6267\u884c\u5b8c\u7b2c\u4e00\u6b65, \u8fd8\u6ca1\u6765\u5f97\u53ca\u8fdb\u884c\u7b2c\u4e8c\u6b65, \u5783\u573e\u56de\u6536\u7ebf\u7a0b\u53d1\u73b0 100 \u8fd9\u4e2a\u503c\u7684\u5f15\u7528\u8ba1\u6570\u4e3a0, \u5c31\u5c06\u5176\u56de\u6536\u6389\u4e86, \u89e3\u91ca\u5668\u63a5\u7740\u6267\u884c x=100 \u7684\u7b2c\u4e8c\u6b65\u65f6, \u53d1\u73b0\u8be5\u5185\u5b58\u5730\u5740\u4e0b\u6ca1\u6709\u503c.. \u7ed1\u5b9a\u5931\u8d25! \u591a\u7ebf\u7a0b\u7684\u5e76\u53d1\u76f8\u5f53\u4e8ecpu\u7684\u6bcf\u4e2a\u6838\u540c\u65f6\u8c03\u7528\u8fdb\u7a0b\u91cc\u7684\u89e3\u91ca\u5668\u5f00\u59cb\u8ba1\u7b97\u76f8\u5e94\u7ebf\u7a0b\u7684\u4efb\u52a1. \u5177\u4f53\u8fc7\u7a0b\u662f\u600e\u6837\u7684\u5462\uff1f\u4e0d\u77e5\u9053, \u4f46\u53ef\u4ee5\u4ece\u51fd\u6570\u7684\u591a\u6b21\u8c03\u7528\u8fc7\u7a0b\u8fdb\u884c\u601d\u8003, \u6bcf\u6b21\u51fd\u6570\u7684\u8c03\u7528\u90fd\u4f1a\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684PyFrameObject\u5bf9\u8c61,\u5f00\u8f9f\u4e00\u5757\u65b0\u7684\u547d\u540d\u7a7a\u95f4,\u63a5\u7740\u6267\u884c\u51fd\u6570\u4f53\u4ee3\u7801.","title":"\u591a\u7ebf\u7a0b\u5e76\u884c\u95ee\u9898"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/10_GIL%E8%AF%A6%E8%A7%A3/#_6","text":"\u591a\u7ebf\u7a0b\u5e76\u884c\u6709\u95ee\u9898, \u90a3\u4e48\u5c31\u8ba9\u5b83\u4eec(\u56fe\u4e2d\u7684\u4e94\u4e2a\u7ebf\u7a0b)\u4e0d\u80fd\u540c\u65f6\u8fd0\u884c!! \u52a0\u9501 \u8ba9\u4ed6\u4eec\u4e00\u4e2a\u4e00\u4e2a\u7684\u6765. \u8fd9\u4e9b\u7ebf\u7a0b\u7684\u6267\u884c\u90fd\u8981\u4f7f\u7528\u89e3\u91ca\u5668. So, \u4e3a\u4e86\u4fdd\u62a4\u8fd9\u4e9b\u5783\u573e\u56de\u6536\u6570\u636e(\u89e3\u91ca\u5668\u7ea7\u522b\u7684\u5171\u4eab\u6570\u636e), \u76f4\u63a5\u7b80\u5355\u7c97\u66b4\u7684 \u5728CPyhton\u89e3\u91ca\u5668\u4e0a \u52a0\u4e86\u4e00\u628a\u9501!! (\u4e5f\u5c31\u662f\u8bf4,\u7ebf\u7a0b\u60f3\u8fd0\u884c\u662f\u5427?\u5f97\u6709GIL\u9501\u624d\u80fd\u4f7f\u7528\u89e3\u91ca\u5668!! Hhh) GIL\u9501\u7684\u5b58\u5728\u4f7f\u5f97\u8fdb\u7a0b\u4e0b\u7684\u591a\u4e2a\u7ebf\u7a0b\u4e0d\u80fd\u5e76\u53d1\u7684\u8fd0\u884c!! \u5373\u89e3\u91ca\u5668\u540c\u4e00\u65f6\u95f4\u53ea\u80fd\u6267\u884c\u4e00\u4e2a\u7ebf\u7a0b\u7684\u4efb\u52a1\u4ee3\u7801.. (\u591a\u6838cpu\u7684\u54ea\u4e2a\u6838\u8fd0\u884c\u7684\u4e0d\u4e00\u5b9a\u54e6,\u8981\u770bOS\u7684\u8c03\u5ea6,\u53e6\u5916,\u591a\u7ebf\u7a0b\u662f\u53ef\u4ee5\u5e76\u53d1\u8fd0\u884c\u7684!!) GIL\u4fdd\u8bc1\u4e86\u7ebf\u7a0b\u5728\u8fdb\u884c\u8d4b\u503c\u64cd\u4f5c x=100 \u65f6, \u5176\u5b83\u7ebf\u7a0b\u4e0d\u4f1a\u6267\u884c!! \u5c31\u4e0d\u4f1a\u51fa\u73b0\u7ed1\u5b9a\u5931\u8d25\u7684\u60c5\u51b5.","title":"\u52a0\u9501\u89e3\u51b3\u95ee\u9898"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/10_GIL%E8%AF%A6%E8%A7%A3/#_7","text":"\u6ce8\u610f, \u4e00\u4e2a\u4e00\u4e2a\u7684\u6765,\u53ef\u4ee5\u662f\u4e32\u884c,\u53ef\u4ee5\u662f\u5e76\u884c,\u5f88\u660e\u663e,\u5e76\u884c\u7684\u6548\u7387\u66f4\u9ad8\u561b,\u4e5f\u662f\u8fd9\u6837\u8bbe\u8ba1\u7684!! \u7ebf\u7a0bA\u62a2\u5230GIL\u9501\u540e\u5f00\u59cb\u8fd0\u884c,\u9047\u5230IO/\u6267\u884c\u65f6\u95f4\u8fc7\u957f 5ms/\u9047\u5230\u4f18\u5148\u7ea7\u66f4\u9ad8\u7684\u7ebf\u7a0b, \u4f1a\u5265\u593acpu\u7684\u4f7f\u7528,GIL\u9501\u4e5f\u4f1a\u88ab\u5f3a\u884c\u91ca\u653e!! \u5176\u5b83\u7ebf\u7a0b\u62a2\u5230\u9501\u8fd0\u884c. \u7ebf\u7a0bA\u4e56\u4e56\u7684\u505a\u5b8cIO\u540e,\u518d\u52a0\u5165\u62a2GIL\u9501\u7684\u961f\u4f0d,\u62a2\u5230\u4e86\u518d\u57fa\u4e8e\u4e0a\u6b21\u4fdd\u5b58\u7684\u72b6\u6001\u5f00\u59cb\u7ee7\u7eed\u8fd0\u884c.. \u56e0\u800c, \u52a0\u4e86GIL\u9501, \u591a\u7ebf\u7a0b\u4e5f\u662f\u5e76\u884c\u7684, \u5173\u952e\u5728\u4e8e cpu\u548cGIL\u9501\u4f1a\u4e00\u540c\u6ca1.. Hhhh (\u53ef\u4ee5\u601d\u8003\u4e0b,\u82e5CPU\u88ab\u593a\u8d70\u4e86,\u7ebf\u7a0b1\u8fd8\u62ff\u7740GIL\u4e0d\u677e\u624b,\u8fd9\u5c31\u4f1a\u9020\u6210\u4e25\u91cd\u7684\u6548\u7387\u95ee\u9898,\u5728\u5176\u505aIO\u671f\u95f4,\u5176\u5b83\u7ebf\u7a0b\u90fd\u522b\u60f3\u8fd0\u884c,\u56e0\u4e3a\u7ebf\u7a0b\u7684\u8fd0\u884c\u9700\u8981GIL\u9501.\u6ca1GIL\u9501\u5c31\u4e0d\u80fd\u4f7f\u7528\u89e3\u91ca\u5668) \u5b9e\u9645\u4e0a\u7ebf\u7a0b\u7684\u8fd0\u884c\u9700\u8981cpu\u7684\u65f6\u95f4\u7247+\u62a2\u5230GIL\u9501. \u4e0a\u8ff0\u7684\u9610\u8ff0\u9ed8\u8ba4\u62a2\u5230GIL\u9501\u65f6,OS\u5df2\u5206\u914dcpu\u65f6\u95f4\u7247\u7ed9\u7ebf\u7a0b! (\u62ff\u5230cpu\u6743\u9650 -- \u62ff\u5230GIL\u89e3\u91ca\u5668\u9501 -- \u6267\u884c\u4ee3\u7801 (\u3064\u0414`)\u30ce)","title":"\u7ec6\u8bf4\u4e00\u4e2a\u4e2a\u6765"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/10_GIL%E8%AF%A6%E8%A7%A3/#gil_3","text":"GIL\u4fdd\u8bc1\u4e86\u5783\u573e\u56de\u6536\u673a\u5236\u7684\u7ebf\u7a0b\u5b89\u5168,\u4f46\u5e76\u6ca1\u6709\u4fdd\u8bc1\u4e0a\u4e00\u5c0f\u8282\u56fe\u4e2d\u7684\u7ebf1-\u7ebf3\u5bf9\u5e94\u4efb\u52a1\u7684\u6570\u636e\u5b89\u5168!! \u7ebf\u7a0b\u62e5\u6709\u4ee5\u4e0b\u4e1c\u897f\u540e \u4f5c\u7528 CPU \u53ef\u8fd0\u884c\u89e3\u91ca\u5668\u4ee3\u7801 GIL \u62e5\u6709\u5bf9\u89e3\u91ca\u5668\u7684\u6267\u884c\u6743\u9650 Lock \u62e5\u6709\u5bf9\u4efb\u52a1\u6570\u636e\u7684\u4f7f\u7528\u6743","title":"GIL\u4e0e\u81ea\u5b9a\u4e49\u4e92\u65a5\u9501"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/10_GIL%E8%AF%A6%E8%A7%A3/#_8","text":"\u7ecf\u8fc7\u4e0a\u9762\u7684\u5b66\u4e60,\u4e5f\u8bb8\u4f60\u4f1a\u95ee: (\u6211\u4e5f\u66fe\u7ecf\u7591\u60d1\u8fc7) Python\u5df2\u7ecf\u6709\u4e00\u4e2aGIL\u6765\u4fdd\u8bc1\u540c\u4e00\u65f6\u95f4\u53ea\u80fd\u6709\u4e00\u4e2a\u7ebf\u7a0b\u6765\u6267\u884c\u4e86,\u4e3a\u4ec0\u4e48\u8fd9\u91cc\u8fd8\u9700\u8981\u81ea\u5b9a\u4e49\u4e92\u65a5\u9501Lock? \u9996\u5148\u6211\u4eec\u9700\u8981\u8fbe\u6210\u5171\u8bc6: \u9501\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u4fdd\u62a4\u5171\u4eab\u7684\u6570\u636e, \u540c\u4e00\u65f6\u95f4\u53ea\u80fd\u6709\u4e00\u4e2a\u7ebf\u7a0b\u6765\u4fee\u6539\u5171\u4eab\u7684\u6570\u636e!! \u4fdd\u62a4\u4e0d\u540c\u7684\u6570\u636e\u5c31\u5e94\u8be5\u52a0\u4e0d\u540c\u7684\u9501! GIL \u4e0eLock\u662f\u4e24\u628a\u9501, \u4fdd\u62a4\u7684\u6570\u636e\u4e0d\u4e00\u6837, \u524d\u8005\u4fdd\u62a4\u7684\u662f\u89e3\u91ca\u5668\u7ea7\u522b\u7684(\u6bd4\u5982\u5783\u573e\u56de\u6536\u7684\u6570\u636e,\u56de\u6536\u7684\u662f\u5806\u533a\u7684\u503c), \u540e\u8005\u662f\u4fdd\u62a4\u7528\u6237\u81ea\u5df1\u5f00\u53d1\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u6570\u636e! \u901a\u4fd7\u4e00\u70b9,\u4e0d\u4e25\u8c28\u7684\u8bf4,GIL\u4fdd\u8bc1\u4e86\u7ebf\u7a0b\u5728\u8fdb\u884c\u8d4b\u503c\u64cd\u4f5c x=100 \u65f6,\u5176\u5b83\u7ebf\u7a0b\u4e0d\u4f1a\u6267\u884c,\u4e0d\u4f1a\u51fa\u73b0\u7ed1\u5b9a\u5931\u8d25\u7684\u60c5\u51b5; GIL\u5e76\u6ca1\u6709\u4fdd\u8bc1 x = 100 \u8fd9\u4e2a\u5171\u4eab\u6570\u636e\u7684\u4fee\u6539\u662f\u5b89\u5168\u7684!!","title":"\u629b\u51fa\u95ee\u9898"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/10_GIL%E8%AF%A6%E8%A7%A3/#_9","text":"\u73b0\u5728\u6709\u4e24\u4e2a\u7ebf\u7a0b,\u7ebf\u7a0b1\u548c\u7ebf\u7a0b2. \u4e24\u4e2a\u7ebf\u7a0b\u5e76\u53d1\u6267\u884c. 1 > \u5047\u8bbe\u4ed6\u4e24\u5904\u4e8e\u5c31\u7eea\u6001\u65f6,\u90fd\u62ff\u5230\u4e86\u6570\u636e ` count = 0 ` \uff01 2 > \u540c\u4e00\u8fdb\u7a0b\u5185\u7684\u7ebf\u7a0b\u8981\u60f3\u6267\u884c,\u5148\u62a2GIL ( \u5373\u62a2\u89e3\u91ca\u5668\u7684\u6267\u884c\u6743\u9650 ) .\u5047\u8bbe\u7ebf\u7a0b1\u62a2\u5230\u4e86. 3 > \u5728\u6267\u884c\u7ebf\u7a0b1\u7684\u4efb\u52a1\u4ee3\u7801\u4e4b\u524d,Cpython\u89e3\u91ca\u5668\u4f1a\u8c03\u7528OS\u7684\u539f\u751f\u7ebf\u7a0b. \u5e94\u7528\u7a0b\u5e8f\u662f\u53ef\u4ee5\u81ea\u5df1\u8bbe\u8ba1\u4e00\u5957\u7ebf\u7a0b\u5207\u6362\u673a\u5236\u6765\u63a7\u5236\u7ebf\u7a0b\u7684\u8c03\u5ea6\u7684.\u4f46python\u6ca1\u6709\u8fd9\u6837\u505a,\u5b83\u76f4\u63a5\u5c06\u7ebf\u7a0b\u7684\u8c03\u7528\u63a8\u7ed9\u4e86\u64cd\u4f5c\u7cfb\u7edf.\u6240\u4ee5\u8981\u77e5\u9053,python\u4e2d\u7ebf\u7a0b\u4e4b\u95f4\u7684\u5207\u6362\u662f\u64cd\u4f5c\u7cfb\u7edf\u5728\u505a! 4 > \u7ebf\u7a0b1\u7684\u4efb\u52a1\u4ee3\u7801\u5728OS\u5206\u914d\u7684cpu\u4e0a\u8fd0\u884c. ( \u5b9e\u5219\u662f\u7ebf\u7a0b1\u5c06\u4efb\u52a1\u4ee3\u7801\u4f5c\u4e3a\u53c2\u6570\u4f20\u7ed9\u89e3\u91ca\u5668,cpu\u8c03\u7528\u89e3\u91ca\u5668,\u8fd0\u884c\u89e3\u91ca\u5668\u7684\u4ee3\u7801 -- \u5355\u72ec\u7684\u7a0b\u5e8f\u4ee3\u7801\u662f\u6ca1\u6709\u7528\u7684 ) 5 > \u7ebf\u7a0b1\u5728cpu\u4e0a\u6267\u884c\u65f6,\u672c\u6765\u8981\u505a ` count += 1 ` \u7684\u64cd\u4f5c.\u4f46\u6267\u884c\u65f6\u95f4\u5230\u4e86,count\u52a01\u7684\u64cd\u4f5c\u5e76\u6ca1\u6709\u5b8c\u6210.\u88ab\u5265\u593a\u4e86cpu,\u5e76\u4e14\u88ab\u8981\u6c42\u5f3a\u884c\u91ca\u653eGIL. ( \u7ebf\u7a0b1CPU\u4e0eGIL\u7686\u65e0 ) 6 -11> \u540c\u4e00\u8fdb\u7a0b\u4e0b\u7684\u5176\u5b83\u7ebf\u7a0b\u5728\u76ef\u7740\u8fd9\u628aGIL\u9501\u5462,\u53ea\u8981\u91ca\u653e,\u5c31\u4f1a\u7ade\u4e89/\u62a2\u8fd9\u628a\u9501. \u8fd9\u91cc\u662f\u7ebf\u7a0b2\u62a2\u5230\u4e86,\u7ecf\u8fc7\u4e00\u7cfb\u5217\u64cd\u4f5c,\u5b8c\u6210\u4e86count++\u7684\u64cd\u4f5c,count\u88ab\u6539\u62101\u4e86.\u7ebf\u7a0b2\u7684\u6d3b\u5e72\u5b8c\u4e86.\u5e72\u5b8c\u4e86\u5c31\u4f1a\u91ca\u653e\u9501. 12 -13> \u7ebf\u7a0b1\u91cd\u65b0\u62a2\u5230\u4e86GIL\u9501,\u4ece\u4fdd\u5b58\u7684\u72b6\u6001\u7ee7\u7eed\u6267\u884c ( \u4fdd\u5b58\u72b6\u6001\u65f6,count\u503c\u4e3a0 ) ; \u5373\u7ebf\u7a0b1\u4f1a\u4ece\u6682\u505c\u7684\u4f4d\u7f6e\u7ee7\u7eed\u5f80\u4e0b\u8d70,\u7ebf\u7a0b2\u5bf9count\u7684\u6539\u53d8\u5bf9\u4e8e\u7ebf\u7a0b1\u6765\u8bf4\u6ca1\u6709\u5f71\u54cd. \u5206\u6790:\u6539\u4e86\u4e24\u6b21,count\u7684\u503c\u5e94\u8be5\u4e3a2,\u4f46\u6700\u7ec8\u503c\u4e3a1. So,GIL\u5e76\u4e0d\u4f1a\u4fdd\u8bc1\u7528\u6237\u6570\u636e\u7684\u7ebf\u7a0b\u5b89\u5168!\u4ec5\u4ec5\u53ea\u662f\u4fdd\u8bc1\u4e86\u5783\u573e\u56de\u6536\u673a\u5236\u6570\u636e\u7684\u5b89\u5168.","title":"\u56fe\u89e3\u9a8c\u8bc1"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/10_GIL%E8%AF%A6%E8%A7%A3/#gillock","text":"\u7ebf\u7a0b\u4f1a\u5148\u62a2GIL\u9501, \u62ff\u5230GIL\u9501\u540e\u624d\u80fd\u62ff\u5230\u4e92\u65a5\u9501Lock, \u5176\u4ed6\u7ebf\u7a0b\u5728GIL\u91ca\u653e\u540e\u4e5f\u53ef\u4ee5\u62a2\u5230GIL, \u4f46\u5982\u679c\u53d1\u73b0Lock\u4ecd\u7136\u6ca1\u6709\u88ab\u91ca\u653e\u5219\u963b\u585e, \u5373\u4fbf\u662f\u62ff\u5230GIL\u4e5f\u8981\u7acb\u523b\u4ea4\u51fa\u6765!! Hhh. \u4e0b\u8ff0\u7684\u4ee3\u7801\u6574\u4e2a\u8fd0\u884c\u8fc7\u7a0b\u662f\u600e\u6837\u7684? \u5173\u952e\u70b9\u5728\u4e8e: \u540c\u4e00\u8fdb\u7a0b\u4e0b\u7684\u591a\u4e2a\u7ebf\u7a0b, \u751f\u6210\u540e\u4e00\u4e0a\u6765\u5c31\u4f1a\u5148\u62a2GIL\u9501! (\u7ebf\u7a0b\u6267\u884c\u9700\u8981GIL\u9501) GIL\u9501\u4f1a\u5728\u7ebf\u7a0b\u4e0d\u80fd\u6267\u884c (CPU\u88abOS\u62ff\u8d70\u4e86) \u7684\u60c5\u51b5\u4e0b,\u88ab\u5f3a\u884c\u7684\u91ca\u653e\u6389,\u4f46\u81ea\u5b9a\u7684\u4e92\u65a5\u9501\u4e0d\u4f1a\u88ab\u5f3a\u884c\u91ca\u653e\u6389! \u7a0b\u5e8f\u4e2d\u6709\u4e09\u4e2a\u5b50\u7ebf\u7a0b, \u7ebf\u7a0bA\u3001B\u3001C. (\u9ed8\u8ba4\u62a2\u5230GIL\u4e4b\u524d\u662f\u6709CPU\u65f6\u95f4\u7247\u7684) \u25a0 \u5047\u8bbeA\u5148\u62a2\u5230GIL\u9501,\u5f00\u59cb\u8fd0\u884c\u4efb\u52a1\u4ee3\u7801. 1> global n \u5f88\u5feb,\u5ffd\u7565\u4e0d\u8ba1; 2> mutex.acquire() A\u53ef\u4ee5\u5f88\u60a0\u95f2\u7684\u62a2\u5230mutex\u8fd9\u628a\u9501,\u8fd9\u91cc\u6ca1\u4eba\u8ddf\u7ebf\u7a0bA\u62a2(\u7ebf\u7a0bB\u548cC\u8fd8\u5728\u7b49\u7740\u62a2GIL\u5462) 3> \u7ee7\u7eed\u8fd0\u884c, \u5f53A\u8fd0\u884c\u5230 time.sleep(0.1) \u65f6, \u9047\u5230\u4e86IO, OS\u4f1a\u5265\u593a\u7ebf\u7a0bA\u7684CPU. \u7ebf\u7a0bA\u6ca1\u4e86CPU\u4e0d\u80fd\u8fd0\u884c,GIL\u9501\u4e5f\u5c06\u91ca\u653e! \u25a0 \u7ebf\u7a0bA\u5c06GIL\u9501\u4e00\u91ca\u653e,\u5047\u8bbe\u7ebf\u7a0bB\u62a2\u5230\u4e86. B\u8fd0\u884c\u5b8c global n \u540e, \u51c6\u5907\u7ee7\u7eed\u8fd0\u884c mutex.acquire() ,\u50bb\u773c\u4e86,\u56e0\u4e3amutex\u8fd9\u628a\u9501\u8fd8\u88ab\u7ebf\u7a0bA\u5360\u7528\u7740\u5462,\u5c31\u5728\u539f\u5730\u963b\u585e\u4e86. OS\u53ef\u4e0d\u4f1a\u8ba9CPU\u95f2\u7740,\u76f4\u63a5\u628acpu\u5265\u593a\u8d70,\u7ebf\u7a0bB\u540c\u6837\u5c06GIL\u9501\u91ca\u653e\u4e86\u51fa\u6765. \u25a0 \u7ebf\u7a0bB\u5c06GIL\u9501\u4e00\u91ca\u653e,\u5047\u8bbe\u7ebf\u7a0bC\u62a2\u5230\u4e86. \u7ebf\u7a0bC\u51c6\u5907\u8fd0\u884c mutex.acquire() \u65f6, \u4e5f\u53d1\u73b0mutex\u8fd9\u628a\u9501\u8fd8\u88ab\u7ebf\u7a0bA\u5360\u7528\u7740\u5462,\u53c8\u88ab\u5265\u593acpu,\u91ca\u653eGIL.. \u25a0 \u7ebf\u7a0bC\u5c06GIL\u9501\u4e00\u91ca\u653e,\u7ebf\u7a0bB\u53c8\u62a2\u5230\u4e86.. \u515c\u515c\u8f6c\u8f6c,\u5728\u7ebf\u7a0bA\u7761\u7720\u671f\u95f4,\u4f1a\u53d1\u751f\u5927\u91cf\u7ebf\u7a0bBC\u4e89\u62a2GIL\u7684\u65e0\u7528\u8fc7\u7a0b. \u8fd9\u4f1a\u5e26\u6765\u6548\u7387\u95ee\u9898,\u8fd9\u4e5f\u662fpy2\u5230py3\u4e0d\u65ad\u4f18\u5316\u7684\u95ee\u9898,\u8fd9\u4e2a\u4e89\u62a2\u5bf9\u8ba1\u7b97\u673a\u6765\u8bf4\u5f88\u6162,\u4f46\u5bf9\u6211\u4eec\u6765\u8bf4\u5f88\u5feb,\u6240\u4ee5,\u5982\u679c\u53ea\u7ad9\u5728pyhton\u5e94\u7528\u7a0b\u5e8f\u7684\u89d2\u5ea6\u601d\u8003\u95ee\u9898,\u8bda\u7136\u8fd0\u884c\u901f\u5ea6\u80af\u5b9a\u4e0d\u5982\u673a\u5668\u8bed\u8a00\u5565\u7684\u5feb,\u4f46\u8861\u91cf\u4e00\u4e2a\u7a0b\u5e8f/\u8f6f\u4ef6\u7684\u6548\u7387\u8981\u7ad9\u5728\u6574\u4e2a\u4f53\u7cfb\u7684\u89d2\u5ea6\u770b\u5f85,\u5957\u63a5\u5b57\u7a0b\u5e8f\u5927\u90e8\u5206\u7684\u901f\u5ea6\u90fd\u5361\u5728\u7f51\u901f\u4e0a,\u800c\u7edd\u975e\u7f16\u7a0b\u8bed\u8a00\u4e0a. \u25a0 \u76f4\u5230A\u7761\u9192\u4e86,A\u52a0\u5165\u4e86\u4e89\u62a2\u7684\u8fc7\u7a0b,\u5047\u8bbe\u7ebf\u7a0bA\u518d\u6b21\u62a2\u5230\u4e86GIL\u9501 (\u76f4\u5230\u7ebf\u7a0bA\u62a2\u5230\u4e86GIL\u9501\u624d\u4f1a\u6709\u610f\u4e49..) A\u4ece\u7761\u7684\u4f4d\u7f6e\u5f80\u4e0b\u7ee7\u7eed\u8fd0\u884c! \u6267\u884c\u5b8c n = temp - 1 \u540e, \u7ee7\u7eed\u6267\u884c mutex.acquire() . \u7ebf\u7a0bA\u4f1a\u5c06mutex\u8fd9\u628a\u4e92\u65a5\u9501\u91ca\u653e\u6389! \u5230\u8fd9\u91cc,\u7ebf\u7a0bA\u7684\u6d3b\u5df2\u7ecf\u5e72\u5b8c\u4e86,\u4e0d\u4f1a\u518d\u5360\u7528CPU,GIL\u9501\u4e5f\u4f1a\u91ca\u653e. \u9700\u8981\u6ce8\u610f\u7684\u662f,\u6b64\u65f6n\u7684\u503c\u5df2\u7ecf\u88ab\u6539\u621099\u4e86!! \u610f\u5473\u8fd9\u7d27\u63a5\u7740\u62a2\u5230GIL\u7684\u7ebf\u7a0b\u62ff\u5230\u7684n\u503c\u4e3a99!!\u4e0d\u662f100. \u25a0 \u63a5\u4e0b\u6765\u7a0b\u5e8f\u7684\u8fd0\u884c\u540c\u7406,\u4e0d\u518d\u8d58\u8ff0. import time from threading import Thread , Lock mutex = Lock () n = 100 def task (): global n mutex . acquire () temp = n time . sleep ( 0.1 ) n = temp - 1 mutex . release () if __name__ == '__main__' : start = time . time () t_l = [ Thread ( target = task ) for _ in range ( 3 )] for t in t_l : t . start () for t in t_l : t . join () print ( n , time . time () - start ) # 97 0.3104860782623291 \"\"\"GIL\u9501\u4e0e\u4e92\u65a5\u9501\u7efc\u5408\u5206\u6790(\u91cd\u70b9!!!) 1.100\u4e2a\u7ebf\u7a0b\u53bb\u62a2GIL\u9501,\u5373\u62a2\u6267\u884c\u6743\u9650 2.\u80af\u5b9a\u6709\u4e00\u4e2a\u7ebf\u7a0b\u5148\u62a2\u5230GIL(\u6682\u4e14\u79f0\u4e3a\u7ebf\u7a0b1),\u7136\u540e\u5f00\u59cb\u6267\u884c,\u4e00\u65e6\u6267\u884c\u5c31\u4f1a\u62ff\u5230lock.acquire() 3.\u6781\u6709\u53ef\u80fd\u7ebf\u7a0b1\u8fd8\u672a\u8fd0\u884c\u5b8c\u6bd5(eg:\u7ebf\u7a0b1\u9047\u5230\u4e86IO\u91ca\u653e\u4e86GIL\u9501),\u5c31\u6709\u53e6\u5916\u4e00\u4e2a\u7ebf\u7a0b2\u62a2\u5230GIL. \u7136\u540e\u7ebf\u7a0b2\u5f00\u59cb\u8fd0\u884c,\u4f46\u7ebf\u7a0b2\u53d1\u73b0\u4e92\u65a5\u9501lock\u8fd8\u672a\u88ab\u7ebf\u7a0b1\u91ca\u653e,\u4e8e\u662f\u963b\u585e,\u88ab\u8feb\u91ca\u653eGIL. 4.\u76f4\u5230\u7ebf\u7a0b1\u505a\u5b8cIO\u91cd\u65b0\u62a2\u5230GIL,\u5f00\u59cb\u4ece\u4e0a\u6b21\u6682\u505c\u7684\u4f4d\u7f6e\u7ee7\u7eed\u6267\u884c. \u76f4\u5230\u6b63\u5e38\u91ca\u653e\u4e92\u65a5\u9501lock,\u7136\u540e\u5176\u4ed6\u7684\u7ebf\u7a0b\u518d\u91cd\u590d2 3 4\u7684\u8fc7\u7a0b \u8fd9\u5c31\u5bfc\u81f4\u4e86\"\u4e32\u884c\"\u8fd0\u884c\u7684\u6548\u679c!! \u56de\u987e\u4e00\u4e0b:(\u8fdb\u7a0b\u90a3\u91cc\u63d0\u5230\u8fc7) \u65e2\u7136\u662f\u4e32\u884c,\u90a3\u4e3a\u5565\u4e0d\u6267\u884c t1.start() t1.join() t2.start() t2.join() \u8bed\u53e5\u6765\u8fbe\u5230\u4e32\u884c\u7684\u6548\u679c\u5462? join\u662f\u7b49\u5f85\u6240\u6709,\u5373\u6574\u4f53\u4e32\u884c,\u800c\u4e92\u65a5\u9501\u53ea\u662f\u9501\u4f4f\u4fee\u6539\u5171\u4eab\u6570\u636e\u7684\u90e8\u5206,\u5373\u90e8\u5206\u4e32\u884c; \u8981\u60f3\u4fdd\u8bc1\u6570\u636e\u5b89\u5168\u7684\u6839\u672c\u539f\u7406\u5728\u4e8e\u8ba9\u5e76\u53d1\u53d8\u6210\u4e32\u884c,join\u4e0e\u4e92\u65a5\u9501\u90fd\u53ef\u4ee5\u5b9e\u73b0,\u6beb\u65e0\u7591\u95ee,\u4e92\u65a5\u9501\u7684\u90e8\u5206\u4e32\u884c\u6548\u7387\u8981\u66f4\u9ad8!! \"\"\"","title":"GIL+Lock"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/10_GIL%E8%AF%A6%E8%A7%A3/#vs","text":"","title":"\u591a\u8fdb\u7a0b vs \u591a\u7ebf\u7a0b"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/10_GIL%E8%AF%A6%E8%A7%A3/#_10","text":"GIL\u8fd9\u628a\u9501\u662f\u5b58\u5728\u4e8e\u89e3\u91ca\u5668\u7684,\u4e00\u4e2a\u8fdb\u7a0b\u5185\u6709\u8fd9\u4e48\u4e00\u628a\u9501.. \u6709\u4e86GIL\u7684\u5b58\u5728, \u540c\u4e00\u65f6\u523b\u540c\u4e00\u8fdb\u7a0b\u4e2d\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u88ab\u6267\u884c. \u4e5f\u8bb8\u4f60\u4f1a\u8d28\u95ee: \u8fdb\u7a0b\u53ef\u4ee5\u5229\u7528\u591a\u6838,\u4f46\u662f\u5f00\u9500\u5927; -- \u591a\u8fdb\u7a0b\u5e76\u884c \u800c python\u7684\u591a\u7ebf\u7a0b\u5f00\u9500\u5c0f, \u4f46\u5374\u65e0\u6cd5\u5229\u7528\u591a\u6838\u4f18\u52bf (\u54ea\u6015cpu\u6709100\u4e2a\u6838,\u540c\u4e00\u65f6\u523b\u4e5f\u53ea\u4f1a\u7528\u4e00\u4e2a) So, python\u6ca1\u7528\u4e86?! python\u8bbe\u8ba1\u591a\u7ebf\u7a0b\u5f88\u9e21\u808b? NO! cpu\u662f\u7528\u6765\u505a\u8ba1\u7b97\u7684,\u591acpu/\u591a\u6838,\u610f\u5473\u7740\u53ef\u4ee5\u6709\u591a\u4e2a\u6838\u5e76\u884c\u5b8c\u6210\u8ba1\u7b97,\u6240\u4ee5\u591a\u6838\u63d0\u5347\u7684\u662f\u8ba1\u7b97\u6027\u80fd!! cpu\u4e00\u65e6\u9047\u5230I/O\u963b\u585e, \u4ecd\u7136\u9700\u8981\u7b49\u5f85, \u6240\u4ee5\u591a\u6838\u5bf9I/O\u64cd\u4f5c\u6ca1\u4ec0\u4e48\u7528\u5904 !! \u6253\u4e2a\u6bd4\u65b9: \u4e00\u4e2a\u5de5\u4eba\u76f8\u5f53\u4e8ecpu,\u6b64\u65f6\u8ba1\u7b97\u76f8\u5f53\u4e8e\u5de5\u4eba\u5728\u5e72\u6d3b,I/O\u963b\u585e\u76f8\u5f53\u4e8e\u4e3a\u5de5\u4eba\u5e72\u6d3b\u63d0\u4f9b\u6240\u9700\u539f\u6750\u6599\u7684\u8fc7\u7a0b. \u5de5\u4eba\u5e72\u6d3b\u7684\u8fc7\u7a0b\u4e2d\u5982\u679c\u6ca1\u6709\u539f\u6750\u6599\u4e86,\u5219\u5de5\u4eba\u5e72\u6d3b\u7684\u8fc7\u7a0b\u9700\u8981\u505c\u6b62,\u76f4\u5230\u7b49\u5f85\u539f\u6750\u6599\u7684\u5230\u6765. \u5982\u679c\u5de5\u5382\u5e72\u7684\u5927\u591a\u6570\u4efb\u52a1\u90fd\u8981\u6709\u51c6\u5907\u539f\u6750\u6599\u7684\u8fc7\u7a0b ( I/O\u5bc6\u96c6\u578b ) \u90a3\u4e48\u4f60\u6709\u518d\u591a\u7684\u5de5\u4eba,\u610f\u4e49\u4e5f\u4e0d\u5927. \u8fd8\u4e0d\u5982\u4e00\u4e2a\u4eba,\u5728\u7b49\u6750\u6599\u7684\u8fc7\u7a0b\u4e2d\u8ba9\u5de5\u4eba\u53bb\u5e72\u522b\u7684\u6d3b. \u53cd\u8fc7\u6765\u8bb2,\u5982\u679c\u4f60\u7684\u5de5\u5382\u539f\u6750\u6599\u90fd\u9f50\u5168 ( \u8ba1\u7b97\u5bc6\u96c6\u578b ) ,\u90a3\u5f53\u7136\u662f\u5de5\u4eba\u8d8a\u591a,\u6548\u7387\u8d8a\u9ad8! IO\u5bc6\u96c6\u578b\u7a0b\u5e8f\u91cc\u603b\u4f1a\u6709\u8ba1\u7b97,cpu\u8d8a\u591a,\u6548\u7387\u8d8a\u9ad8 ( OS\u53ef\u8c03\u914d\u7684\u8d44\u6e90 \"\u6838\" \u5c31\u66f4\u591a ) ,\u6027\u4ef7\u6bd4\u4f1a\u8d8a\u4f4e ( \u6838\u95f2\u7f6e ) . \u8ba1\u7b97\u5bc6\u96c6\u578b\u91cc\u7684IO\u64cd\u4f5c\u51e0\u4e4e\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1. IO\u5bc6\u96c6\u578b -- \u591a\u7ebf\u7a0b,\u505aIO\u5c31\u5207,\u4e0d\u4f1a\u95f2\u7740,\u90fd\u9047\u5230IO\u90a3\u5c31\u90fd\u505aIO. \u8ba1\u7b97\u5bc6\u96c6\u578b -- \u591a\u8fdb\u7a0b,\u591a\u4e2a\u8fdb\u7a0b\u4e4b\u95f4\u7684\u539f\u751f\u7ebf\u7a0b\u4e0d\u5b58\u5728\u62a2GIL. ( \u6bcf\u4e2a\u8fdb\u7a0b\u91cc\u90fd\u6709\u4e00\u4e2aGIL )","title":"\u629b\u51fa\u95ee\u9898"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/10_GIL%E8%AF%A6%E8%A7%A3/#_11","text":"\u591a\u7ebf\u7a0b\u7528\u4e8eIO\u5bc6\u96c6\u578b, \u5982socket\u3001\u722c\u866b\u3001web; -- \u6211\u4eec\u5f00\u53d1\u7684\u5c31\u662f\u5957\u63a5\u5b57\u7a0b\u5e8f,\u79bb\u4e0d\u5f00\u7f51\u7edcIO. \u591a\u8fdb\u7a0b\u7528\u4e8e\u8ba1\u7b97\u5bc6\u96c6\u578b, \u5982\u91d1\u878d\u5206\u6790\u3001\u533a\u5757\u94fe\u6316\u77ff.. \u73b0\u5728\u6709\u56db\u4e2a\u4efb\u52a1\u9700\u8981\u5904\u7406, \u5904\u7406\u65b9\u5f0f\u80af\u5b9a\u662f\u8981\u73a9\u51fa\u5e76\u53d1\u7684\u6548\u679c, \u5e76\u53d1\u89e3\u51b3\u65b9\u6848\u6709\u4e24\u79cd: \u65b9\u68481> \u5f00\u542f\u56db\u4e2a\u8fdb\u7a0b. \u65b9\u68482> \u4e00\u4e2a\u8fdb\u7a0b\u4e0b,\u5f00\u542f\u56db\u4e2a\u7ebf\u7a0b.","title":"\u4e3e\u4f8b\u5206\u6790"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/10_GIL%E8%AF%A6%E8%A7%A3/#_12","text":"1> \u5982\u679c\u56db\u4e2a\u4efb\u52a1\u662f\u8ba1\u7b97\u5bc6\u96c6\u578b, \u6ca1\u6709\u591a\u6838\u6765\u5e76\u884c\u8ba1\u7b97, \u65b9\u6848\u4e00\u5f92\u589e\u4e86\u521b\u5efa\u8fdb\u7a0b\u7684\u5f00\u9500, \u65b9\u6848\u4e8c\u80dc 2> \u5982\u679c\u56db\u4e2a\u4efb\u52a1\u662fI/O\u5bc6\u96c6\u578b, \u65b9\u6848\u4e00\u521b\u5efa\u8fdb\u7a0b\u7684\u5f00\u9500\u5927, \u4e14\u8fdb\u7a0b\u7684\u5207\u6362\u901f\u5ea6\u8fdc\u4e0d\u5982\u7ebf\u7a0b, \u65b9\u6848\u4e8c\u80dc \u7efc\u4e0a, \u5355\u6838\u60c5\u51b5, \u65e0\u8bba\u662f\u8ba1\u7b97\u5bc6\u96c6\u578b\u8fd8\u662fIO\u5bc6\u96c6\u578b,\u90fd\u4f7f\u7528\u591a\u7ebf\u7a0b!!","title":"\u5355\u6838\u60c5\u51b5"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/10_GIL%E8%AF%A6%E8%A7%A3/#_13","text":"\u5047\u8bbecpu\u67094\u4e2a\u6838. 1> \u5982\u679c\u56db\u4e2a\u4efb\u52a1\u662f\u8ba1\u7b97\u5bc6\u96c6\u578b, \u5e94\u8be5\u5f00\u591a\u8fdb\u7a0b, \u591a\u8fdb\u7a0b\u53ef\u4ee5\u5229\u7528\u56db\u4e2a\u6838\u5e76\u884c\u8fd0\u7b974\u4e2a\u4efb\u52a1; \u5f00\u591a\u7ebf\u7a0b\u7684\u8bdd, \u56e0\u4e3aGIL\u7684\u5b58\u5728, \u540c\u4e00\u65f6\u523bcpu\u53ea\u6709\u4e00\u4e2a\u6838\u5728\u8fd0\u4f5c(\u540c\u4e00\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u5728\u8fd0\u884c)..\u5e76\u4e0d\u80fd\u5e26\u6765\u591a\u5927\u6027\u80fd\u4e0a\u7684\u63d0\u5347,\u751a\u81f3\u4e0d\u5982\u4e32\u884c(\u6ca1\u6709\u5927\u91cf\u5207\u6362). 2> \u5982\u679c\u56db\u4e2a\u4efb\u52a1\u662fI/O\u5bc6\u96c6\u578b, \u5e94\u8be5\u7528\u591a\u7ebf\u7a0b!! \u56e0\u4e3a\u518d\u591a\u7684\u6838\u4e5f\u4e0d\u80fd\u89e3\u51b3I/O\u95ee\u9898! \u5047\u8bbe\u6bcf\u4e2a\u4efb\u52a1\u670910\u79d2\u5728\u505aIO , \u5f00\u591a\u8fdb\u7a0b , 4 \u4e2acpu\u90fd\u5728\u7b97 , 10 \u79d2\u591a\u4e00\u70b9\u8fd0\u884c\u5b8c , \u5176\u4e2d\u5927\u91cf\u7684\u65f6\u95f4\u90fd\u5728\u7b49 . \u5f004\u4e2a\u7ebf\u7a0b\u591a\u957f\u65f6\u95f4\u8fd0\u7b97\u5b8c ? \u5728python\u91cc\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u540c\u4e00\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u6267\u884c , \u591a\u7ebf\u7a0b\u7528\u4e0d\u4e0a\u591a\u6838 . \u7ebf\u7a0b1\u9047\u5230IO\u4e86 , cpu\u8fd0\u884c\u7ebf\u7a0b2 , \u7ebf\u7a0b2\u9047\u5230IO\u4e86 , cpu\u8fd0\u884c\u7ebf\u7a0b3 .. cpu\u6765\u56de\u8fd0\u884c\u8fd9\u4e9b\u7ebf\u7a0b . \u6700\u540e\u4e5f\u662f10s\u591a\u4e00\u70b9 . \u4f46\u5f00\u591a\u7ebf\u7a0b\u7684\u5f00\u9500\u66f4\u5c0f , cpu\u5728\u7ebf\u7a0b\u4e2d\u5207\u6362\u66f4\u5feb . ( \u8fdb\u7a0b\u4e0d\u540c\u5185\u5b58\u5730\u5740\u4e4b\u95f4\u5207\u6362 , \u7ebf\u7a0b\u540c\u4e00\u5185\u5b58\u5185\u5207\u6362 , \u5f00\u9500\u80af\u5b9a\u4e0d\u4e00\u6837 ) \u6240\u4ee5\u591a\u7ebf\u7a0b\u7684\u5e76\u53d1\u5728\u9047\u5230IO\u7684\u60c5\u51b5\u4e0b\u53cd\u800c\u6bd4\u591a\u8fdb\u7a0b\u7684\u6548\u7387\u66f4\u9ad8\u4e00\u70b9 . \u7efc\u4e0a, \u591a\u6838\u60c5\u51b5, \u8ba1\u7b97\u5bc6\u96c6\u578b\u7528\u591a\u8fdb\u7a0b,IO\u5bc6\u96c6\u578b\u7528\u591a\u7ebf\u7a0b!! \u4ee5\u540e\u8fd0\u884c\u7a0b\u5e8f\u82e5\u9700\u8981\u5927\u91cf\u7684\u8fd0\u7b97\u6027\u80fd\u7684\u8bdd,(\u4e0d\u4f1a\u5728\u4e00\u53f0\u673a\u5668\u4e0a\u52a01000\u4e2acpu),\u800c\u662f\u91c7\u7528\u5206\u5e03\u5f0f\u7684\u601d\u60f3!! \u8ba1\u7b97\u4efb\u52a1\u53ef\u4ee5\u5206\u6563\u5230\u4e00\u53f0\u53f0\u7684\u8ba1\u7b97\u673a\u4e0a. \u591a\u53f0\u673a\u5668\u5f62\u6210\u4e00\u4e2a\u96c6\u7fa4\u5171\u540c\u6765\u5e72\u8fd9\u4e2a\u6d3b. \u6bcf\u53f0\u673a\u5668\u5206\u7684\u8fdb\u7a0b\u6570\u5176\u5b9e\u5e76\u4e0d\u591a!! \u6240\u4ee5, \u5728\u5206\u5e03\u5f0f\u8ba1\u7b97\u9762\u524d, \u591a\u8fdb\u7a0b\u5360\u7528\u7684\u5185\u5b58\u7684\u5f00\u9500\u6839\u672c\u4e0d\u662f\u95ee\u9898!!","title":"\u591a\u6838\u60c5\u51b5"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/10_GIL%E8%AF%A6%E8%A7%A3/#_14","text":"\u8fd9\u91cc\u7528\u7eaf\u8ba1\u7b97\u6765\u4ee3\u66ff\u8ba1\u7b97\u5bc6\u96c6\u578b,\u7eafIO\u6765\u4ee3\u66ffIO\u5bc6\u96c6\u578b\u8fdb\u884c\u5b9e\u9a8c","title":"\u5b9e\u9a8c\u9a8c\u8bc1"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/10_GIL%E8%AF%A6%E8%A7%A3/#_15","text":"\u8ba1\u7b97\u5bc6\u96c6\u578b -- \u591a\u8fdb\u7a0b\u6548\u7387\u9ad8! \u5b9e\u9a8c\u7ed3\u679c\u7684\u7528\u65f6\u4e0d\u662f4\u500d\u7684\u5173\u7cfb,\u8ddf\u673a\u5b50\u6709\u5173,\u6211\u7528\u7684mac,\u4e0d\u7528\u8fc7\u4e8e\u7ea0\u7ed3! import os import time from multiprocessing import Process from threading import Thread def work (): res = 0 for i in range ( 100000000 ): res += 1 if __name__ == '__main__' : # 4 -- \u672c\u673a\u67094\u4e2a\u6838 print ( os . cpu_count ()) start = time . time () # l = [Process(target=work) for _ in range(4)] # -- 23.658430099487305 l = [ Thread ( target = work ) for _ in range ( 4 )] # -- 31.427711009979248 for obj in l : obj . start () for obj in l : obj . join () print ( time . time () - start )","title":"\u8ba1\u7b97\u5bc6\u96c6\u578b"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/10_GIL%E8%AF%A6%E8%A7%A3/#io","text":"IO\u5bc6\u96c6\u578b -- \u591a\u7ebf\u7a0b\u6548\u7387\u9ad8! \"\"\" \u5f00\u591a\u8fdb\u7a0b,\u53ef\u4ee5\u7528\u591a\u6838\u4f18\u52bf,\u5e76\u884c\u8fd0\u884c,\u610f\u5473\u77404\u4e2a\u6838\u540c\u65f6\u8fd0\u884c\u56db\u4e2a\u4efb\u52a1. \u4f46\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u9047\u5230IO\u4e86,cpu\u4e0d\u4f1a\u5728\u90a3\u7b49.\u5f53IO\u7ed3\u675f\u540e,OS\u624d\u4f1a\u91cd\u65b0\u5206\u914d\u7ed9\u8fdb\u7a0bcpu. So,\u591a\u8fdb\u7a0b\u80fd\u540c\u65f6\u4f7f\u75284\u4e2a\u6838,\u4f46\u662f\u4e00\u65e6\u9047\u5230IO,\u89e3\u51b3IO\u671f\u95f4\u662f\u6ca1\u6709\u7528\u4e0acpu\u7684. \u5f00\u542f\u591a\u4e2a\u7ebf\u7a0b,cpu\u4f1a\u542cOS\u6307\u4ee4\u4e0d\u65ad\u5728\u8fd9\u56db\u4e2a\u7ebf\u7a0b\u4e4b\u95f4\u8c03\u5ea6.(\u540c\u4e00\u65f6\u95f4\u53ea\u6709\u4e00\u4e2a\u6838\u5728\u4f7f\u7528) \u56db\u4e2a\u7ebf\u7a0b\u5148\u62a2gil,\u7ebf\u7a0b\u9047\u5230IO,\u5265\u593acpu,\u91ca\u653eGIL\u9501..\u518d\u62a2GIL.. \"\"\" import os import time from threading import Thread from multiprocessing import Process def work (): time . sleep ( 2 ) if __name__ == '__main__' : l = [] print ( os . cpu_count ()) start = time . time () for i in range ( 400 ): # run time is 2.2067270278930664 # -- 400\u4e2a\u8fdb\u7a0bIO\u65f6\u95f4\u90fd\u662f2\u79d2,\u5269\u4e0b\u7684\u65f6\u95f4\u8017\u8d39\u5728\u521b\u5efa\u8fdb\u7a0b\u4ee5\u53ca\u5207\u6362\u4e0a p = Process ( target = work ) # run time is 2.0048937797546387 # -- \u522b\u770b\u8fd9\u91cc\u5b9e\u9a8c\u7ed3\u679c\u76f8\u5dee\u8fd9\u4e48\u5c0f,\u968f\u7740\u6570\u91cf\u7ea7\u7684\u589e\u52a0,\u76f8\u5dee\u662f\u6050\u6016\u7684 # p = Thread(target=work) l . append ( p ) p . start () for p in l : p . join () stop = time . time () print ( 'run time is %s ' % ( stop - start ))","title":"IO\u5bc6\u96c6\u578b"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/10_GIL%E8%AF%A6%E8%A7%A3/#_16","text":"\u25a0 CPU\u548cGIL\u5fc5\u987b\u90fd\u5177\u5907\u624d\u53ef\u4ee5\u6267\u884c\u4ee3\u7801 \u25a0 GIL\u89e3\u91ca\u5668\u9501\u4f1a\u5728\u4e24\u79cd\u60c5\u51b5\u4e0b\u91ca\u653e \u4e3b\u52a8\u91ca\u653e: \u81ea\u5df1\u4e3b\u52a8\u4ea4\u51fa\u6765 \u9047\u5230IO\u64cd\u4f5c\u6216\u8005\u5206\u914d\u7684cpu\u65f6\u95f4\u7247\u5230\u65f6\u95f4\u4e86 . \u6ce8\u610f ! GIL\u5b58\u5728\u7684\u610f\u4e49\u5728\u4e8e\u7ef4\u62a4\u7ebf\u7a0b\u5b89\u5168 . x = 10 \u6d89\u53ca\u5230io\u64cd\u4f5c , \u5982\u679c\u4e5f\u88ab\u5f53\u6210\u666e\u901a\u7684io\u64cd\u4f5c , \u4e3b\u52a8\u4ea4\u51faGIL , \u90a3\u4e48\u4e00\u5b9a\u4f1a\u51fa\u73b0\u6570\u636e\u4e0d\u5b89\u5168\u95ee\u9898 . \u6240\u4ee5x = 10 \u4e00\u5b9a\u662f\u88ab\u533a\u5206\u5bf9\u5f85\u4e86 . \u81f3\u4e8ex = 10 \u5982\u4f55\u5b9e\u73b0\u7684\u88ab\u533a\u5206\u5bf9\u5f85 . \u8fd9\u5176\u5b9e\u5f88\u597d\u7406\u89e3 , \u4efb\u4f55\u7684io\u64cd\u4f5c\u90fd\u662f\u5411\u64cd\u4f5c\u7cfb\u7edf\u53d1\u9001\u7cfb\u7edf\u8c03\u7528 , \u5373\u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u7684\u67d0\u4e00\u63a5\u53e3\u5b9e\u73b0\u7684 . \u6bd4\u5982\u53d8\u91cf\u8d4b\u503c\u64cd\u4f5c\u80af\u5b9a\u662f\u8c03\u7528\u4e86\u4e00\u79cd\u63a5\u53e3 , \u6587\u4ef6\u8bfb\u5199\u64cd\u4f5c\u80af\u5b9a\u4e5f\u662f\u8c03\u7528\u4e86\u4e00\u79cd\u63a5\u53e3 , \u7f51\u7edcio\u4e5f\u662f\u8c03\u7528\u4e86\u67d0\u4e00\u79cd\u63a5\u53e3 .. \u8fd9\u5c31\u7ed9\u533a\u5206\u5bf9\u5f85\u63d0\u4f9b\u4e86\u5b9e\u73b0\u7684\u4f9d\u636e , \u5373\u53d8\u91cf\u8d4b\u503c\u64cd\u4f5c\u5e76\u4e0d\u5c5e\u4e8e\u4e3b\u52a8\u91ca\u653e\u7684\u8303\u7574 , \u8fd9\u6837GIL\u5728\u7ebf\u7a0b\u5b89\u5168\u65b9\u9762\u624d\u4f1a\u6709\u6240\u4f5c\u4e3a ! \u88ab\u52a8\u91ca\u653e python3 .2 \u4e4b\u540e\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf : /* Python / ceval . c */ ... static volatile int gil_drop_request = 0 ; \u6ce8\u610f\u5f53\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u65f6 , \u8be5\u7ebf\u7a0b\u4f1a\u4e00\u76f4\u8fd0\u884c , \u4e0d\u4f1a\u91ca\u653eGIL , \u5f53\u6709\u591a\u4e2a\u7ebf\u7a0b\u65f6 : \u4f8b\u5982thead1 \u3001 thread2 . \u5982\u679cthread1\u4e00\u76f4\u6ca1\u6709\u4e3b\u52a8\u91ca\u653e\u6389GIL , \u90a3\u80af\u5b9a\u4e0d\u4f1a\u8ba9\u4ed6\u4e00\u76f4\u8fd0\u884c\u4e0b\u53bb ! 1 > \u5b9e\u9645\u4e0a\u5728thread1\u8fd0\u884c\u7684\u8fc7\u7a0b\u65f6 , thread2\u5c31\u4f1a\u6267\u884c\u4e00\u4e2acv_wait ( gil , TIMEOUT ) \u7684\u51fd\u6570 ( \u9ed8\u8ba4TIMEOUT\u503c\u4e3a5ms , \u4f46\u662f\u53ef\u4ee5\u4fee\u6539 ), \u4e00\u65e6\u5230\u4e86\u65f6\u95f4 , \u5c31\u4f1a\u5c06\u5168\u5c40\u53d8\u91cfgil_drop_request = 1 ; 2 > \u7ebf\u7a0bthread1\u5c31\u4f1a\u88ab\u5f3a\u5236\u91ca\u653eGIL , \u7136\u540e\u7ebf\u7a0bthread2\u5f00\u59cb\u8fd0\u884c\u5e76\u8fd4\u56de\u4e00\u4e2aack\u7ed9\u7ebf\u7a0bthread1 \u7ebf\u7a0bthread1\u5f00\u59cb\u8c03\u7528cv_wait ( gil , TIMEOUT ) \u5373\u4e00\u4e2a\u7ebf\u7a0b\u5728\u8fd0\u884c\u65f6 , \u5176\u5b83\u7ebf\u7a0b\u4f1a\u7ed9\u5b83\u8ba1\u65f6 ! \u56de\u7b54: python\u7684\u591a\u7ebf\u7a0b\u662f\u4e0d\u662f\u6bd4\u8f83\u9e21\u808b\uff1f \u662f\u4e0d\u662f\u56e0\u4e3apython\u591a\u7ebf\u7a0b\u4e0d\u80fd\u5b9e\u73b0\u5e76\u884c \uff1f \u4f55\u4e3a\u5e76\u884c . \u5e76\u884c\u6307\u7684\u662f\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u540c\u65f6\u8fd0\u884c . \u53ea\u6709\u591a\u6838\u624d\u80fd\u5b9e\u73b0\u5e76\u884c . python\u7684\u591a\u7ebf\u7a0b\u4e0d\u80fd\u5b9e\u73b0\u5e76\u884c\u610f\u5473\u7740\u5b83\u4e0d\u80fd\u7528\u4e0a\u591a\u6838\u4f18\u52bf . \u4ec0\u4e48\u662f\u591a\u6838\u4f18\u52bf \uff1f \u591a\u6838\u662f\u591a\u4e2acpu , \u591a\u4e2acpu\u5728\u4efb\u52a1\u662f\u8ba1\u7b97\u5bc6\u96c6\u578b\u7684\u60c5\u51b5\u4e0b\u624d\u7b97\u4f18\u52bf . \u82e5\u4efb\u52a1\u4e0d\u662f\u8ba1\u7b97\u5bc6\u96c6\u578b\u7684 , \u90a3\u591a\u6838\u4f18\u52bf\u8ddf\u591a\u7ebf\u7a0b\u6ca1\u6709\u5173\u7cfb . \u54b1\u4ee5\u540e\u5199\u7684\u4efb\u52a1\u7edd\u5927\u591a\u6570\u90fd\u662fI / O\u5bc6\u96c6\u578b . \u90a3\u4e48\u591a\u6838\u5c31\u4e0d\u7b97\u4f18\u52bf\u4e86 , \u8fd8\u4e0d\u5982\u4e00\u4e2a\u6838\u5728\u591a\u4e2a\u7ebf\u7a0b\u4e4b\u95f4\u6765\u56de\u5207 . \u5927\u5bb6\u901f\u5ea6\u90fd\u5dee\u4e0d\u591a . \u6240\u4ee5python\u591a\u7ebf\u7a0b\u662f\u6709\u7528\u7684 . \u53ef\u4ee5\u4f7f\u7528\u7684 ! \u82e5\u771f\u7684\u662f\u8ba1\u7b97\u5bc6\u96c6\u578b , \u90a3\u5c31\u7528\u591a\u8fdb\u7a0b . \u591a\u8fdb\u7a0b\u7684\u542f\u52a8\u548c\u5207\u6362\u5f00\u9500\u662f\u5f88\u5927 , \u4f46\u6211\u4eec\u7684\u7a0b\u5e8f\u90fd\u662f\u5206\u5e03\u5f0f\u7684\u65b9\u5f0f\u53bb\u8fd0\u884c\u7684 , \u6240\u4ee5\u4e0d\u53ef\u80fd\u8ba9\u4e00\u53f0\u673a\u5668\u8dd1\u4e0a\u4e07\u4e2a\u8fdb\u7a0b . \u90a3\u6837\u7684\u8bdd , \u5185\u5b58\u4f1a\u88ab\u6491\u7206\u7684 . \u8bf4python\u7684\u591a\u7ebf\u7a0b\u6bd4\u8f83\u9e21\u808b\u7684 , \u662f\u5bf9python\u7684\u5e76\u53d1\u7f16\u7a0b\u4e00\u65e0\u6240\u77e5 . \u5e76\u53d1\u7f16\u7a0b\u91cc\u5c31\u9700\u8981\u8003\u8651\u4efb\u52a1\u7684\u7c7b\u578b , \u662fI / O\u5bc6\u96c6\u578b\u8fd8\u662f\u8ba1\u7b97\u5bc6\u96c6\u578b .","title":"\u8865\u5145"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/11_%E8%BF%9B%E7%A8%8B%E6%B1%A0%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/","text":"\u5e76\u53d1\u7684\u5957\u63a5\u5b57\u901a\u4fe1 \u00b6 \u670d\u52a1\u7aef \u00b6 from socket import * from threading import Thread def talk ( conn ): while True : try : data = conn . recv ( 1024 ) if len ( data ) == 0 : break conn . send ( data . upper ()) except ConnectionResetError : break conn . close () # -- \u7701\u7565\u4e86\u7c98\u5305\u95ee\u9898\u7684\u89e3\u51b3 def server ( ip , port , backlog = 5 ): s = socket ( AF_INET , SOCK_STREAM ) s . bind (( ip , port )) s . listen ( backlog ) while True : conn , addr = s . accept () t = Thread ( target = talk , args = ( conn ,)) t . start () if __name__ == '__main__' : server ( '127.0.0.1' , 8080 ) \u5ba2\u6237\u7aef \u00b6 import os from socket import * client = socket ( AF_INET , SOCK_STREAM ) client . connect (( \"127.0.0.1\" , 8080 )) while True : msg = \" %s say hello\" % os . getpid () client . send ( msg . encode ( 'utf-8' )) data = client . recv ( 1024 ) print ( data . decode ( 'utf-8' )) \u82e5\u540c\u65f6\u6709\u4e00\u4e07\u4e2a\u5ba2\u6237\u7aef\u8fde\u63a5\u670d\u52a1\u7aef,\u8fdc\u8fdc\u8d85\u8fc7\u4e86\u670d\u52a1\u7aef\u7684\u5e76\u53d1\u4e0a\u9650,\u670d\u52a1\u7aef\u57ae\u4e86,\u5c31\u6ca1\u6709\u6548\u7387\u4e00\u8bf4\u4e86. \u800c\u4e14Python\u7684\u7ebf\u7a0b\u4f7f\u7528\u7684\u662fOS\u7684\u539f\u751f\u7ebf\u7a0b. \u4e00\u6765OS\u8981\u8c03\u5ea6\u8fd9\u4e48\u591a\u7ebf\u7a0b\u538b\u529b\u5c71\u5927;\u4e8c\u6765\u7ebf\u7a0b\u5360\u7528\u7684\u5185\u5b58\u867d\u7136\u5c0f,\u4f46\u67b6\u4e0d\u4f4f\u91cf\u591a. \u90a3\u5982\u4f55\u89e3\u51b3\u5462? \u8fd9\u5c31\u4e0d\u5f97\u4e0d\u63d0\u53ca\u8fdb\u7a0b\u6c60\u4e0e\u7ebf\u7a0b\u6c60\u5566! \u6982\u5ff5!! \u00b6 \u5f02\u6b65\u901a\u5e38\u548c\u56de\u8c03\u4e00\u8d77\u4f7f\u7528. Q: \u4ec0\u4e48\u65f6\u5019\u7528\u8fdb\u7a0b\u6c60,\u4ec0\u4e48\u65f6\u5019\u7528\u7ebf\u7a0b\u6c60? A: \u8fd9\u4e2a\u95ee\u9898\u8981\u5206\u89e3\u6210 \u4e24\u65b9\u9762 \u6765\u56de\u7b54. 1> \u4ec0\u4e48\u65f6\u5019\u7528\u7ebf\u7a0b,\u4ec0\u4e48\u65f6\u5019\u7528\u8fdb\u7a0b -- \u8ba1\u7b97\u578b\u7684\u7528\u591a\u8fdb\u7a0b,IO\u5bc6\u96c6\u578b\u7684\u7528\u591a\u7ebf\u7a0b. 2> \u4ec0\u4e48\u65f6\u5019\u7528\u6c60 -- \u6c60\u7684\u529f\u80fd\u662f \u9650\u5236 \u542f\u52a8\u7684\u8fdb\u7a0b\u6570\u6216\u7ebf\u7a0b\u6570. \u4ec0\u4e48\u65f6\u5019\u9650\u5236\u5462? \u5f53\u5e76\u53d1\u7684\u4efb\u52a1\u6570\u8fdc\u8fdc\u8d85\u8fc7\u4e86\u8ba1\u7b97\u673a\u7684\u627f\u53d7\u80fd\u529b, \u5373\u65e0\u6cd5\u4e00\u6b21\u6027\u5f00\u542f\u8fc7\u591a\u7684\u8fdb\u7a0b\u6570\u6216\u7ebf\u7a0b\u6570\u65f6, \u5c31\u5e94\u8be5\u7528\u6c60\u7684\u6982\u5ff5\u5c06\u5f00\u542f\u7684\u8fdb\u7a0b\u6570\u6216\u7ebf\u7a0b\u6570\u9650\u5236\u5728\u8ba1\u7b97\u673a\u53ef\u627f\u53d7\u7684\u8303\u56f4\u5185!! (\u901a\u5e38\u6765\u8bf4,\u6709\u51e0\u4e2acpu/\u6838\u5f00\u51e0\u4e2a\u8fdb\u7a0b,\u5f00\u7684\u7ebf\u7a0b\u6570\u662fcpu/\u6838\u76845\u500d) Q: \u540c\u6b65 vs \u5f02\u6b65!! \u2605 A: \u540c\u6b65\u4e0e\u5f02\u6b65\u6307\u7684\u7684\u662f \u63d0\u4ea4\u4efb\u52a1\u7684\u4e24\u79cd\u65b9\u5f0f. \u540c\u6b65: \u63d0\u4ea4\u5b8c\u4efb\u52a1\u540e\u5c31\u5728\u539f\u5730\u7b49\u5f85,\u76f4\u5230\u4efb\u52a1\u8fd0\u884c\u5b8c\u6bd5\u540e\u62ff\u5230\u4efb\u52a1\u7684\u8fd4\u56de\u503c,\u518d\u7ee7\u7eed\u8fd0\u884c\u4e0b\u4e00\u884c\u4ee3\u7801! \u867d\u7136\u540c\u6b65\u63d0\u4ea4\u4efb\u52a1\u540e,\u8be5\u4efb\u52a1\u7684\u8fd0\u884c\u786e\u5b9e\u662f\u4e32\u884c\u7684,\u4f46\u662f\u522b\u5c06\u540c\u6b65\u4e0e\u4e32\u884c\u753b\u4e0a\u7b49\u53f7,\u8981\u660e\u786e! \u540c\u6b65\u6307\u7684\u662f\u63d0\u4ea4\u4efb\u52a1\u7684\u65b9\u5f0f,\u4e32\u884c\u6307\u7684\u662f\u8fd0\u884c\u4efb\u52a1\u7684\u65f6\u5019\u7684\u4e00\u79cd\u6548\u679c! \u5f02\u6b65: \u63d0\u4ea4\u5b8c\u4efb\u52a1\uff08\u7ed1\u5b9a\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\uff09\u540e\u6839\u672c\u5c31\u4e0d\u5728\u539f\u5730\u7b49\u5f85.\u76f4\u63a5\u8fd0\u884c\u4e0b\u4e00\u884c\u4ee3\u7801! \u7b49\u5230\u4efb\u52a1\u6709\u8fd4\u56de\u503c\u540e\u4f1a \u81ea\u52a8 \u89e6\u53d1\u56de\u8c03\u51fd\u6570. (\u4efb\u52a1\u662f\u5426\u8d77\u6765\u4e0d\u7ba1\u3001\u662f\u5426\u8fd0\u884c\u5b8c\u4e0d\u7ba1\u3001\u8fd0\u884c\u5b8c\u540e\u4e5f\u4e0d\u7ba1, \u53ea\u7ba1\u63d0\u4ea4 ) \u8c01\u6765\u6267\u884c\u8fd9\u4e2a\u56de\u8c03\u51fd\u6570,\u8fdb\u7a0b\u6c60\u548c\u7ebf\u7a0b\u6c60\u4e5f\u4e0d\u5927\u4e00\u6837,\u8fdb\u7a0b\u6c60\u662f\u4e3b\u8fdb\u7a0b\u505a,\u7ebf\u7a0b\u6c60\u662f\u8c01\u95f2\u4e0b\u6765\u8c01\u505a! \u6ce8\u610f, \u5f02\u6b65\u662f\u63d0\u4ea4\u4efb\u52a1\u7684\u65b9\u5f0f, \u800c\u56de\u8c03\u662f\u5f02\u6b65\u62ff\u5230\u7ed3\u679c\u540e\u5904\u7406\u7684\u65b9\u5f0f! \u56de\u987e\u4e0b\u7a0b\u5e8f\u7684\u8fd0\u884c\u72b6\u6001.(\u963b\u585e\u3001\u975e\u963b\u585e) \u963b\u585e: IO\u963b\u585e \u975e\u963b\u585e: \u8fd0\u884c \u6216 \u5c31\u7eea. \u8fdb\u7a0b\u6c60 \u00b6 \u5f02\u6b65\u63d0\u4ea4 \u00b6 pool.submit(task, i) import os import time # -- concurrent.futures\u6a21\u5757\u63d0\u4f9b\u4e86\u9ad8\u5ea6\u5c01\u88c5\u7684\u5f02\u6b65\u8c03\u7528\u63a5\u53e3 from concurrent.futures import ProcessPoolExecutor def task ( n ): print ( \" %s run..\" % os . getpid ()) # -- \u6807\u8bc6\u8fdb\u7a0b\u6c60\u91cc\u7684\u54ea\u4e2a\u8fdb\u7a0b\u5728\u6267\u884c\u4efb\u52a1 time . sleep ( n ) return n ** 2 if __name__ == '__main__' : # -- \u53c2\u6570max_workers:\u63d0\u4ea4\u7684\u6700\u5927\u4efb\u52a1\u6570,\u4e0d\u5199\u9ed8\u8ba4\u8d4b\u503cNone # \u82e5\u503c\u4e3aNone,\u521b\u5efa\u7684\u8fdb\u7a0b\u6570\u8ddf\u673a\u5668\u7684cpu\u7684\u6838\u6570\u4e00\u6837! # \u6267\u884c\u5b8c\u8be5\u8bed\u53e5\u540e,\u73b0\u76ee\u524d\u67095\u4e2a\u8fdb\u7a0b,\u4e3b\u8fdb\u7a0b+\u6c60\u5b50\u91cc\u76844\u4e2a\u8fdb\u7a0b pool = ProcessPoolExecutor ( 4 ) # -- \u9020\u6c60 # -- \u5f80\u8fdb\u7a0b\u6c60\u91cc<\u5f02\u6b65>\u63d0\u4ea4\u4e8610\u4e2a\u4efb\u52a1,\u8fdb\u7a0b\u6c60\u91cc\u76844\u4e2a\u8fdb\u7a0b\u9700\u8981\u54fc\u54e7\u54fc\u54e7\u7684\u5e72\u5b8c\u8fd910\u4e2a\u6d3b # \u5f02\u6b65\u63d0\u4ea4\u7684,10\u4e2a\u6d3b\u4f1a\u5feb\u901f\u7684\u63d0\u4ea4\u5230\u8fdb\u7a0b\u6c60\u91cc. # \u8fdb\u7a0b\u6c60\u76844\u4e2a\u8fdb\u7a0b\u5148\u4e00\u4eba\u9886\u4e00\u4e2a\u6d3b\u5e72,\u5e72\u5b8c\u540e\u518d\u9886\u4e00\u4e2a\u6d3b\u5e72,\u76f4\u523010\u4e2a\u6d3b\u5168\u90e8\u5e72\u5b8c # \u4ece\u59cb\u81f3\u7ec8\u5c31\u8fdb\u7a0b\u6c60\u91cc\u76844\u4e2a\u8fdb\u7a0b\u5728\u5e72\u6d3b,\u4e0d\u4f1a\u518d\u542f\u52a8\u5176\u5b83\u7684\u8fdb\u7a0b,\u7262\u7262\u7684\u5c06\u5b50\u8fdb\u7a0b\u6570\u63a7\u5236\u57284\u4e2a for i in range ( 1 , 11 ): # -- \u53c2\u6570: \u6307\u5b9a\u4efb\u52a1\u51fd\u6570\u3001\u7ed9\u6307\u5b9a\u7684\u4efb\u52a1\u51fd\u6570\u4f20\u53c2 pool . submit ( task , i ) # -- \u8be5\u884c\u4ee3\u7801\u53ea\u7ba1\u63d0\u4ea4,\u63d0\u4ea4\u540e\u5c31\u5565\u4e5f\u4e0d\u7ba1\u5566,\u4e0d\u4f1a\u539f\u5730\u7b49\u5f85 print ( \"\u4e3b\" ) Ps: \u6ce8\u610f,\u8fd0\u884c\u7ed3\u679c\u4e2d\u770b\u8d77\u6765\u56db\u4e2a\u8fdb\u7a0b\u662f\u4f9d\u6b21\u5faa\u73af\u505a\u4efb\u52a1,\u662f\u56e0\u4e3a10\u4e2a\u4efb\u52a1\u7684\u8fd0\u884c\u65f6\u95f4\u4f9d\u6b21\u9012\u589e\u5bfc\u81f4\u7684.. \u6211\u6ca1\u6709 random.randint() \u8bbe\u7f6e\u968f\u673a\u65f6\u95f4. \u521d\u63a2\u5f02\u6b65\u7ed3\u679c \u00b6 future.result() \u00b6 \u8fd9\u79cd\u8981\u7ed3\u679c\u7684\u65b9\u5f0f\u662f\u4e0d\u6b63\u786e\u7684!! import os import time from concurrent.futures import ProcessPoolExecutor def task ( n ): print ( \" %s run..\" % os . getpid ()) time . sleep ( n ) return n ** 2 if __name__ == '__main__' : pool = ProcessPoolExecutor ( 4 ) for i in range ( 1 , 11 ): # -- \u5f02\u6b65\u63d0\u4ea4\u7684,\u4e0d\u80fd\u7acb\u9a6c\u62ff\u5230\u8fd4\u56de\u7ed3\u679c. So,\u6b64\u5904\u7684future\u62ff\u5230\u7684\u53ea\u662f\u4e00\u4e2a\u5bf9\u8c61 future = pool . submit ( task , i ) # -- \u8c03\u7528future\u5bf9\u8c61\u7684result\u65b9\u6cd5,\u5c31\u662f\u5728\u5411\u8be5\u5bf9\u8c61\u8981\u7ed3\u679c # \u6ca1\u6709\u5c31\u4f1a\u4e00\u76f4\u7b49\u7740/\u963b\u585e\u7740,\u76f4\u5230\u62ff\u5230\u7ed3\u679c\u540e,\u518d\u8fdb\u884c\u4e0b\u4e00\u6b21\u5faa\u73af print ( future . result ()) print ( \"\u4e3b\" ) \"\"\" 42565 run.. 1 42567 run.. 4 42568 run.. 9 42566 run.. 16 42565 run.. 25 42567 run.. 36 ... ... ... \"\"\" \u53ef\u4ee5\u770b\u5230\u4efb\u52a1\u7684\u8fd0\u884c\u7ed3\u679c\u5df2\u7ecf\u53d8\u6210\u4e32\u884c\u4e86.. So,\u867d\u8bf4\u4efb\u52a1\u662f\u5f02\u6b65\u63d0\u4ea4\u7684,\u4f46\u5faa\u73af\u91cc\u7684 future.result() \u8bed\u53e5 \u5bfc\u81f4 \u5e72\u6d3b\u8fc7\u7a0b\u8ddf\u540c\u6b65\u63d0\u4ea4\u7684\u5e72\u6d3b\u8fc7\u7a0b\u662f\u4e00\u6837. \u4e0d\u5e94\u8be5\u8fd9\u6837\u505a! \u8fd9\u6837\u505a\u8fd8\u4e0d\u5982\u7528\u4e3b\u8fdb\u7a0b \u4f9d\u6b21 \u5e72\u5b8c\u8fd910\u4e2a\u6d3b/\u8c03\u7528\u8fd910\u4e2a\u51fd\u6570. pool.shutdown() \u00b6 \u90a3\u600e\u4e48\u641e\u5462? \u7b49\u6240\u6709\u7684\u4efb\u52a1\u8fd0\u884c\u5b8c,\u7edf\u4e00\u7684\u62ff\u7ed3\u679c? \u8be5\u7a0b\u5e8f\u52a0\u4e86\u4e2a\u4efb\u52a1\u7ed3\u679c\u5904\u7406\u7684\u51fd\u6570. import os import time from concurrent.futures import ProcessPoolExecutor def task ( n ): print ( \" %s run..\" % os . getpid ()) time . sleep ( n ) # -- \u56fa\u5b9a\u6bcf\u4e2a\u4efb\u52a1\u7684\u5904\u7406\u65f6\u95f4\u4e3a5s return n ** 2 def parse ( res ): time . sleep ( 1 ) # -- \u6bcf\u4e2a\u4efb\u52a1\u7684\u5904\u7406\u65f6\u95f4\u90fd\u4e3a1s print ( res ) if __name__ == '__main__' : pool = ProcessPoolExecutor ( 4 ) future_list = [] for i in range ( 1 , 11 ): future_list . append ( pool . submit ( task , i )) start = time . time () # -- \u53c2\u6570wait\u7684\u9ed8\u8ba4\u503c\u5c31\u4e3aTrue! # -- \u8be5\u8bed\u53e5\u505a\u4e86\u4e24\u4ef6\u4e8b: \"\u76f8\u5f53\u4e8epool.close()+pool.join()\" # 1> shutdown\u4ee3\u8868\u5173\u95ed\u8fdb\u7a0b\u6c60\u7684\u5165\u53e3,\u5373\u4e0d\u80fd\u518d\u5f80\u8fdb\u7a0b\u6c60\u91cc\u63d0\u4ea4\u4efb\u52a1 # 2> wait=True \u539f\u5730\u7b49\u5f85\u6c60\u5185\u6240\u6709\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5\u56de\u6536\u5b8c\u8d44\u6e90\u540e\u624d\u7ee7\u7eed # So,`print(\"\u4e3b\")`\u80af\u5b9a\u662f\u5728\u8fdb\u7a0b\u6c60\u8fd0\u884c\u5b8c\u540e\u518d\u6267\u884c\u7684! pool . shutdown ( wait = True ) # -- \u6b64\u884c\u4ee3\u7801\u6267\u884c\u5b8c,\u610f\u5473\u8fd910\u4e2a\u4efb\u52a1\u5168\u90e8\u6267\u884c\u5b8c\u5566! task_over = time . time () print ( \"\u5b8c\u6210\u4efb\u52a1\u82b1\u8d39(s):\" , task_over - start ) for future in future_list : print ( future . result ()) # -- \u4f1a\u77ac\u95f4\u5f97\u523010\u4e2a\u4efb\u52a1\u7684\u8fd0\u884c\u7ed3\u679c! print ( \"\u5904\u7406\u7ed3\u679c\u82b1\u8d39(s):\" , time . time () - task_over ) print ( \"\u4e3b\" ) \u7ed3\u679c\u5206\u6790: \u53ef\u4ee5\u4ece\u4e0b\u9762\u7684\u8fd0\u884c\u7ed3\u679c\u4e2d\u770b\u5230, \u6bcf\u4e2a\u4efb\u52a1\u90fd\u9700\u898110\u79d2, \u8ba1\u7b97\u673a\u67094\u4e2a\u6838, \u521a\u597d\u662f\u6211\u4eec\u8bbe\u7f6e\u7684\u8fdb\u7a0b\u6c60\u6570, 4\u4e2a\u6838 \u5e76\u884c \u5904\u7406\u4efb\u52a1, \u5b8c\u6210\u4efb\u52a1\u82b1\u8d39\u4e8615\u79d2, 10/4=2.5 \u8981\u8fd0\u884c3\u4e2a5\u79d2.. \u6bcf\u4e2a\u4efb\u52a1\u5904\u7406\u7ed3\u679c\u9700\u82b1\u8d391s,\u82b1\u8d39\u4e8610s.. \u8fd9\u6837\u7684\u8bdd, \u4e00\u5171\u82b1\u8d39\u4e8615+10=25s. \u5f53\u7136\u53ef\u4ee5 \u518d\u542f\u75284\u4e2a\u8fdb\u7a0b\u5e76\u884c\u7684\u5bf9\u4efb\u52a1\u7ed3\u679c\u8fdb\u884c\u5904\u7406! \u8fd9\u6837\u5904\u7406\u4efb\u52a1\u7684\u7ed3\u679c\u4f1a\u4ece10s\u51cf\u4e3a3s.. \u8fd9\u4e00\u901a\u64cd\u4f5c\u4e0b\u6765,\u8be5\u7a0b\u5e8f\u5171\u8ba1\u8fd0\u884c18s, \u4e00\u5171\u7528\u4e869\u4e2a\u8fdb\u7a0b(\u5305\u62ec\u4e86\u4e3b\u8fdb\u7a0b). \u5f3a\u8026\u5408 \u00b6 \u4e0d\u8fd4\u56de n**2 \u5566,\u76f4\u63a5\u5b8c\u6210\u4efb\u52a1\u65f6\u628a\u4efb\u52a1\u7684\u7ed3\u679c\u4e00\u5e76\u8fdb\u884c\u5904\u7406, \u5c06\u751f\u4ea7\u4efb\u52a1\u548c\u5904\u7406\u4efb\u52a1\u7cc5\u5408\u5230\u4e00\u4e2a\u8fdb\u7a0b\u91cc. \u6709\u7ed3\u679c\u540e\u7acb\u9a6c\u5904\u7406\u7ed3\u679c, \u7a0b\u5e8f\u82b1\u8d39\u65f6\u95f4\u540c\u6837\u662f18s.. \u770b\u8d77\u6765\u8fd9\u6837\u505a\u4f1a\u66f4\u597d,\u56e0\u4e3a\u53ea\u4f1a\u7528\u52304\u4e2a\u8fdb\u7a0b,\u800c\u4e0d\u662f8\u4e2a..(\u6ca1\u6709\u7b97\u4e3b\u8fdb\u7a0b \u8282\u7701\u4e864\u4e2a\u5e76\u884c\u5904\u7406\u4efb\u52a1\u7ed3\u679c\u7684\u8fdb\u7a0b) import os import time from concurrent.futures import ProcessPoolExecutor def task ( n ): print ( \" %s run..\" % os . getpid ()) time . sleep ( 5 ) parse ( n ** 2 ) def parse ( res ): time . sleep ( 1 ) print ( \" %s \u5904\u7406\u4e86 %s \" % ( os . getpid (), res )) if __name__ == '__main__' : pool = ProcessPoolExecutor ( 4 ) start = time . time () for i in range ( 1 , 11 ): pool . submit ( task , i ) pool . shutdown ( wait = True ) print ( \"\u4e3b \u603b\u82b1\u8d39(s):\" , time . time () - start ) # \u4e3b \u603b\u82b1\u8d39(s): 18.28273892402649 \u6211\u4eec\u7684\u7a0b\u5e8f\u9700\u8981\u5728\u6709\u7ed3\u679c\u7684\u65f6\u5019\u7acb\u9a6c\u5904\u7406\u7ed3\u679c,\u4f46\u4e0d\u5e94\u8be5\u5c06\u751f\u4ea7\u4efb\u52a1\u8ddf\u5904\u7406\u4efb\u52a1\u5f3a\u8026\u5408\u5728\u4e00\u8d77!! \u5c06\u6240\u6709\u7684\u9700\u6c42\u653e\u5230\u540c\u4e00\u4e2a\u8fdb\u7a0b\u91cc\u4e0d\u5408\u7406! \u56de\u8c03\u673a\u5236 \u00b6 \u6700\u5408\u7406\u7684\u662f\u4ec0\u4e48\u65f6\u5019\u62ff\u7ed3\u679c? \u67d0\u4e2a\u4efb\u52a1\u4e00\u65e6\u8fd0\u884c\u5b8c,\u5c31\u7acb\u9a6c\u62ff\u5230\u7ed3\u679c\u53bb\u5904\u7406\u5b83.\u8fd9\u6837\u5904\u7406\u6700\u53ca\u65f6! \u56de\u8c03\u673a\u5236 -- \u63d0\u4ea4\u4e00\u4e2a\u4efb\u52a1\u5c31\u4e3a\u8be5\u4efb\u52a1\u7ed1\u5b9a\u4e00\u4e2a\u56de\u8c03\u51fd\u6570. \u6ce8\u610f: \u6700\u540e\u662f<\u63d0\u4ea4\u8005- \u4e3b\u8fdb\u7a0b >\u8c03\u7528parse()\u56de\u8c03\u51fd\u6570\u5904\u7406\u7684\u6570\u636e! \u5f0a\u7aef: \u82e5\u8be5\u7a0b\u5e8f\u662fIO\u5bc6\u96c6\u578b\u7684,\u7528\u8fdb\u7a0b\u6c60\u6548\u7387\u4e0d\u9ad8.. import os import time from concurrent.futures import ProcessPoolExecutor def task ( n ): print ( \" %s run..\" % os . getpid ()) time . sleep ( 5 ) return n ** 2 def parse ( future ): time . sleep ( 1 ) print ( \" %s \u5904\u7406\u4e86 %s \" % ( os . getpid (), future . result ())) if __name__ == '__main__' : pool = ProcessPoolExecutor ( 4 ) start = time . time () for i in range ( 1 , 11 ): future = pool . submit ( task , i ) # -- submit\u63d0\u4ea4\u5b8c\u4efb\u52a1\u540e,\u76f4\u63a5\u4e3afuture\u5bf9\u8c61\u7ed1\u5b9a\u4e00\u4e2a\u56de\u8c03\u51fd\u6570parse # \u8be5\u56de\u8c03\u51fd\u6570parse\u4f1a\u5728future\u5bf9\u8c61\u6709\u7ed3\u679c\u65f6\u7acb\u9a6c\u89e6\u53d1!! # \u5e76\u4e14\u4f1a\u5c06future\u5f53\u4f5c\u53c2\u6570\u4f20\u7ed9parse!! # \u8be5\u56de\u8c03\u51fd\u6570\u8c01\u6765\u8fd0\u884c\u5462?\u7531\u63d0\u4ea4\u8005-\"\u4e3b\u8fdb\u7a0b\"\u56de\u8fc7\u5934\u6765\u8c03\u7528! future . add_done_callback ( parse ) pool . shutdown ( wait = True ) # -- \u4fdd\u8bc1\u6240\u6709\u4efb\u52a1\u90fd\u5df2\u7ecf\u5904\u7406\u5b8c print ( \"\u4e3b \u603b\u82b1\u8d39(s):\" , time . time () - start ) \u7ebf\u7a0b\u6c60 \u00b6 IO\u5bc6\u96c6\u578b \u00b6 \u6bcf\u4e2a\u4efb\u52a1\u82b1\u8d395s\u65f6\u95f4\u6267\u884c\u5b8c,\u6bcf\u4e2a\u4efb\u52a1\u7684\u7ed3\u679c\u5904\u7406\u9700\u89811s. \u4e00\u5171\u67094\u4e2a\u4efb\u52a1. (\u8fd9\u91cc\u76844\u4e2a\u4efb\u52a1\u662fIO\u5bc6\u96c6\u578b) 1> \u82e5\u662f\u8fdb\u7a0b\u6c60(\u4e3b\u8fdb\u7a0b\u9020\u4e864\u4e2a\u8fdb\u7a0b), \u9700\u89815+4=9s!! 4\u4e2a\u8fdb\u7a0b \u5e76\u884c \u6267\u884c4\u4e2a\u4efb\u52a1\u9700\u89815s; 4\u4e2a\u56de\u8c03\u51fd\u6570\u4e3b\u8fdb\u7a0b \u201c\u4e32\u884c\u201d \u6267\u884c\u9700\u89814s. \u6ce8\u610f,\u8fd9\u91cc\u662f\u51d1\u9f50\u56db\u4e2a\u4efb\u52a1\u662f\u540c\u65f6\u6267\u884c\u5b8c, \u7279\u522b\u6ce8\u610f!! \u5b9e\u9645\u4e0a,\u6709\u4efb\u52a1\u6267\u884c\u5b8c, \u4e3b\u7ebf\u7a0b\u5c31\u4f1a\u53bb\u8fd0\u884c\u5b83\u7684\u56de\u8c03\u51fd\u6570!! \u4e5f\u5c31\u662f\u8bf4\u5b50\u8fdb\u7a0b\u6267\u884c\u4efb\u52a1\u7684\u65f6\u5019, \u4e3b\u8fdb\u7a0b\u4f1a\u6267\u884c\u5df2\u5b8c\u6210\u4efb\u52a1\u7684\u56de\u8c03\u51fd\u6570.. \u53ea\u6709\u5f53\u56db\u4e2a\u4efb\u52a1\u662f\u540c\u65f6\u6267\u884c\u5b8c\u7684,\u4e3b\u8fdb\u7a0b\u8fd9\u65f6\u6267\u884c\u56de\u8c03\u51fd\u6570\u5b58\u5728\u6548\u7387\u95ee\u9898,\u53ef\u4ee5\u8003\u8651\u518d\u5f004\u4e2a\u8fdb\u7a0b\u6765\u89e3\u51b3. \u7edd\u5927\u591a\u6570\u60c5\u51b54\u4e2a\u4efb\u52a1\u662f\u4e0d\u4f1a\u540c\u65f6\u6267\u884c\u5b8c\u7684.. import os import time from concurrent.futures import ProcessPoolExecutor def task ( n ): print ( \" %s run..\" % os . getpid ()) time . sleep ( 5 ) return n ** 2 def parse ( future ): time . sleep ( 1 ) print ( \" %s \u5904\u7406\u4e86 %s \" % ( os . getpid (), future . result ())) if __name__ == '__main__' : pool = ProcessPoolExecutor ( 4 ) start = time . time () for i in range ( 1 , 5 ): # -- \u7b80\u5199: pool.submit(task, i).add_done_callback(parse) future = pool . submit ( task , i ) future . add_done_callback ( parse ) pool . shutdown ( wait = True ) print ( \"\u4e3b \u603b\u82b1\u8d39(s):\" , time . time () - start ) # \u4e3b \u603b\u82b1\u8d39(s): 9.408581972122192 2> \u82e5\u662f\u7ebf\u7a0b\u6c60(\u7236\u7ebf\u7a0b\u9020\u4e864\u4e2a\u7ebf\u7a0b), \u9700\u89815+1=6s!! 4\u4e2a\u7ebf\u7a0b \u5e76\u53d1 \u6267\u884c4\u4e2a\u4efb\u52a1\u82b1\u8d39\u4e865s, 4\u4e2a\u7ebf\u7a0b\u4f1a \u5e76\u53d1 \u7684\u6267\u884c4\u4e2a\u56de\u8c03\u51fd\u6570! (\u7ebf\u7a0b\u6c60\u91cc\u8c01\u5148\u95f2\u4e0b\u6765\u8c01\u5c31\u5148\u53bb\u6267\u884c\u56de\u8c03\u51fd\u6570) import os import time from concurrent.futures import ThreadPoolExecutor from threading import current_thread def task ( n ): print ( \" %s run..\" % current_thread () . name ) time . sleep ( 5 ) return n ** 2 def parse ( future ): time . sleep ( 1 ) print ( \" %s \u5904\u7406\u4e86 %s \" % ( current_thread () . name , future . result ())) if __name__ == '__main__' : pool = ThreadPoolExecutor ( 4 ) start = time . time () for i in range ( 1 , 5 ): future = pool . submit ( task , i ) future . add_done_callback ( parse ) pool . shutdown ( wait = True ) print ( \"\u4e3b \u603b\u82b1\u8d39(s):\" , time . time () - start ) # \u4e3b \u603b\u82b1\u8d39(s): 9.408581972122192 \"\"\" ThreadPoolExecutor-0_0 run.. ThreadPoolExecutor-0_1 run.. ThreadPoolExecutor-0_2 run.. ThreadPoolExecutor-0_3 run.. ThreadPoolExecutor-0_0 \u5904\u7406\u4e86 1 ThreadPoolExecutor-0_3 \u5904\u7406\u4e86 16 ThreadPoolExecutor-0_2 \u5904\u7406\u4e86 9 ThreadPoolExecutor-0_1 \u5904\u7406\u4e86 4 \u4e3b \u603b\u82b1\u8d39(s): 6.002989053726196 \u8fdb\u7a0b\u5df2\u7ed3\u675f,\u9000\u51fa\u4ee3\u78010 \"\"\" \u8ba1\u7b97\u5bc6\u96c6\u578b \u00b6 \u6211\u4eec\u518d\u6765\u60f3\u60f3, \u5176\u5b83\u6761\u4ef6\u4e0d\u53d8, \u5047\u8bbe4\u4e2a\u4efb\u52a1\u662f\u8ba1\u7b97\u5bc6\u96c6\u578b! 1> \u82e5\u662f\u7ebf\u7a0b\u6c60,\u867d\u71364\u4e2a\u7ebf\u7a0b\u662f\u5e76\u53d1\u6267\u884c4\u4e2a\u4efb\u52a1,\u4f46\u540c\u4e00\u65f6\u95f4\u53ea\u80fd\u75281\u4e2aCPU.\u8be5\u7b97\u7684\u65f6\u95f4\u4e00\u4e2a\u90fd\u843d\u4e0d\u4e0b\u6765. \u6267\u884c\u5b8c\u4efb\u52a1\u9700\u89814*5=20s. \u5904\u7406\u56de\u8c03\u51fd\u6570\u9700\u89814s\u65f6\u95f4. -- \u5171\u8ba124s. 2> \u82e5\u662f\u8fdb\u7a0b\u6c60,4\u4e2a\u8fdb\u7a0b\u5e76\u53d1\u7684\u6267\u884c4\u4e2a\u4efb\u52a1,\u53ea\u9700\u89815s. \u8fdb\u7a0b\u6c60\u4f1a\u7528\u4e3b\u8fdb\u7a0b\u201c\u4e32\u884c\u201d\u5904\u7406\u56de\u8c03\u51fd\u6570. \u82b1\u8d394s. -- \u653b\u51fb9s. Ps: \u6240\u4ee5\u9762\u5bf9\u8ba1\u7b97\u5bc6\u96c6\u578b,\u8fdb\u7a0b\u6c60\u548c\u7ebf\u7a0b\u6c60\u5bf9\u4e8e\u56de\u8c03\u51fd\u6570\u7684\u5904\u7406\u65f6\u95f4\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u662f\u4e00\u6837\u7684!!","title":"\u8fdb\u7a0b\u6c60\u4e0e\u7ebf\u7a0b\u6c60"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/11_%E8%BF%9B%E7%A8%8B%E6%B1%A0%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/#_1","text":"","title":"\u5e76\u53d1\u7684\u5957\u63a5\u5b57\u901a\u4fe1"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/11_%E8%BF%9B%E7%A8%8B%E6%B1%A0%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/#_2","text":"from socket import * from threading import Thread def talk ( conn ): while True : try : data = conn . recv ( 1024 ) if len ( data ) == 0 : break conn . send ( data . upper ()) except ConnectionResetError : break conn . close () # -- \u7701\u7565\u4e86\u7c98\u5305\u95ee\u9898\u7684\u89e3\u51b3 def server ( ip , port , backlog = 5 ): s = socket ( AF_INET , SOCK_STREAM ) s . bind (( ip , port )) s . listen ( backlog ) while True : conn , addr = s . accept () t = Thread ( target = talk , args = ( conn ,)) t . start () if __name__ == '__main__' : server ( '127.0.0.1' , 8080 )","title":"\u670d\u52a1\u7aef"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/11_%E8%BF%9B%E7%A8%8B%E6%B1%A0%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/#_3","text":"import os from socket import * client = socket ( AF_INET , SOCK_STREAM ) client . connect (( \"127.0.0.1\" , 8080 )) while True : msg = \" %s say hello\" % os . getpid () client . send ( msg . encode ( 'utf-8' )) data = client . recv ( 1024 ) print ( data . decode ( 'utf-8' )) \u82e5\u540c\u65f6\u6709\u4e00\u4e07\u4e2a\u5ba2\u6237\u7aef\u8fde\u63a5\u670d\u52a1\u7aef,\u8fdc\u8fdc\u8d85\u8fc7\u4e86\u670d\u52a1\u7aef\u7684\u5e76\u53d1\u4e0a\u9650,\u670d\u52a1\u7aef\u57ae\u4e86,\u5c31\u6ca1\u6709\u6548\u7387\u4e00\u8bf4\u4e86. \u800c\u4e14Python\u7684\u7ebf\u7a0b\u4f7f\u7528\u7684\u662fOS\u7684\u539f\u751f\u7ebf\u7a0b. \u4e00\u6765OS\u8981\u8c03\u5ea6\u8fd9\u4e48\u591a\u7ebf\u7a0b\u538b\u529b\u5c71\u5927;\u4e8c\u6765\u7ebf\u7a0b\u5360\u7528\u7684\u5185\u5b58\u867d\u7136\u5c0f,\u4f46\u67b6\u4e0d\u4f4f\u91cf\u591a. \u90a3\u5982\u4f55\u89e3\u51b3\u5462? \u8fd9\u5c31\u4e0d\u5f97\u4e0d\u63d0\u53ca\u8fdb\u7a0b\u6c60\u4e0e\u7ebf\u7a0b\u6c60\u5566!","title":"\u5ba2\u6237\u7aef"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/11_%E8%BF%9B%E7%A8%8B%E6%B1%A0%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/#_4","text":"\u5f02\u6b65\u901a\u5e38\u548c\u56de\u8c03\u4e00\u8d77\u4f7f\u7528. Q: \u4ec0\u4e48\u65f6\u5019\u7528\u8fdb\u7a0b\u6c60,\u4ec0\u4e48\u65f6\u5019\u7528\u7ebf\u7a0b\u6c60? A: \u8fd9\u4e2a\u95ee\u9898\u8981\u5206\u89e3\u6210 \u4e24\u65b9\u9762 \u6765\u56de\u7b54. 1> \u4ec0\u4e48\u65f6\u5019\u7528\u7ebf\u7a0b,\u4ec0\u4e48\u65f6\u5019\u7528\u8fdb\u7a0b -- \u8ba1\u7b97\u578b\u7684\u7528\u591a\u8fdb\u7a0b,IO\u5bc6\u96c6\u578b\u7684\u7528\u591a\u7ebf\u7a0b. 2> \u4ec0\u4e48\u65f6\u5019\u7528\u6c60 -- \u6c60\u7684\u529f\u80fd\u662f \u9650\u5236 \u542f\u52a8\u7684\u8fdb\u7a0b\u6570\u6216\u7ebf\u7a0b\u6570. \u4ec0\u4e48\u65f6\u5019\u9650\u5236\u5462? \u5f53\u5e76\u53d1\u7684\u4efb\u52a1\u6570\u8fdc\u8fdc\u8d85\u8fc7\u4e86\u8ba1\u7b97\u673a\u7684\u627f\u53d7\u80fd\u529b, \u5373\u65e0\u6cd5\u4e00\u6b21\u6027\u5f00\u542f\u8fc7\u591a\u7684\u8fdb\u7a0b\u6570\u6216\u7ebf\u7a0b\u6570\u65f6, \u5c31\u5e94\u8be5\u7528\u6c60\u7684\u6982\u5ff5\u5c06\u5f00\u542f\u7684\u8fdb\u7a0b\u6570\u6216\u7ebf\u7a0b\u6570\u9650\u5236\u5728\u8ba1\u7b97\u673a\u53ef\u627f\u53d7\u7684\u8303\u56f4\u5185!! (\u901a\u5e38\u6765\u8bf4,\u6709\u51e0\u4e2acpu/\u6838\u5f00\u51e0\u4e2a\u8fdb\u7a0b,\u5f00\u7684\u7ebf\u7a0b\u6570\u662fcpu/\u6838\u76845\u500d) Q: \u540c\u6b65 vs \u5f02\u6b65!! \u2605 A: \u540c\u6b65\u4e0e\u5f02\u6b65\u6307\u7684\u7684\u662f \u63d0\u4ea4\u4efb\u52a1\u7684\u4e24\u79cd\u65b9\u5f0f. \u540c\u6b65: \u63d0\u4ea4\u5b8c\u4efb\u52a1\u540e\u5c31\u5728\u539f\u5730\u7b49\u5f85,\u76f4\u5230\u4efb\u52a1\u8fd0\u884c\u5b8c\u6bd5\u540e\u62ff\u5230\u4efb\u52a1\u7684\u8fd4\u56de\u503c,\u518d\u7ee7\u7eed\u8fd0\u884c\u4e0b\u4e00\u884c\u4ee3\u7801! \u867d\u7136\u540c\u6b65\u63d0\u4ea4\u4efb\u52a1\u540e,\u8be5\u4efb\u52a1\u7684\u8fd0\u884c\u786e\u5b9e\u662f\u4e32\u884c\u7684,\u4f46\u662f\u522b\u5c06\u540c\u6b65\u4e0e\u4e32\u884c\u753b\u4e0a\u7b49\u53f7,\u8981\u660e\u786e! \u540c\u6b65\u6307\u7684\u662f\u63d0\u4ea4\u4efb\u52a1\u7684\u65b9\u5f0f,\u4e32\u884c\u6307\u7684\u662f\u8fd0\u884c\u4efb\u52a1\u7684\u65f6\u5019\u7684\u4e00\u79cd\u6548\u679c! \u5f02\u6b65: \u63d0\u4ea4\u5b8c\u4efb\u52a1\uff08\u7ed1\u5b9a\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\uff09\u540e\u6839\u672c\u5c31\u4e0d\u5728\u539f\u5730\u7b49\u5f85.\u76f4\u63a5\u8fd0\u884c\u4e0b\u4e00\u884c\u4ee3\u7801! \u7b49\u5230\u4efb\u52a1\u6709\u8fd4\u56de\u503c\u540e\u4f1a \u81ea\u52a8 \u89e6\u53d1\u56de\u8c03\u51fd\u6570. (\u4efb\u52a1\u662f\u5426\u8d77\u6765\u4e0d\u7ba1\u3001\u662f\u5426\u8fd0\u884c\u5b8c\u4e0d\u7ba1\u3001\u8fd0\u884c\u5b8c\u540e\u4e5f\u4e0d\u7ba1, \u53ea\u7ba1\u63d0\u4ea4 ) \u8c01\u6765\u6267\u884c\u8fd9\u4e2a\u56de\u8c03\u51fd\u6570,\u8fdb\u7a0b\u6c60\u548c\u7ebf\u7a0b\u6c60\u4e5f\u4e0d\u5927\u4e00\u6837,\u8fdb\u7a0b\u6c60\u662f\u4e3b\u8fdb\u7a0b\u505a,\u7ebf\u7a0b\u6c60\u662f\u8c01\u95f2\u4e0b\u6765\u8c01\u505a! \u6ce8\u610f, \u5f02\u6b65\u662f\u63d0\u4ea4\u4efb\u52a1\u7684\u65b9\u5f0f, \u800c\u56de\u8c03\u662f\u5f02\u6b65\u62ff\u5230\u7ed3\u679c\u540e\u5904\u7406\u7684\u65b9\u5f0f! \u56de\u987e\u4e0b\u7a0b\u5e8f\u7684\u8fd0\u884c\u72b6\u6001.(\u963b\u585e\u3001\u975e\u963b\u585e) \u963b\u585e: IO\u963b\u585e \u975e\u963b\u585e: \u8fd0\u884c \u6216 \u5c31\u7eea.","title":"\u6982\u5ff5!!"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/11_%E8%BF%9B%E7%A8%8B%E6%B1%A0%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/#_5","text":"","title":"\u8fdb\u7a0b\u6c60"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/11_%E8%BF%9B%E7%A8%8B%E6%B1%A0%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/#_6","text":"pool.submit(task, i) import os import time # -- concurrent.futures\u6a21\u5757\u63d0\u4f9b\u4e86\u9ad8\u5ea6\u5c01\u88c5\u7684\u5f02\u6b65\u8c03\u7528\u63a5\u53e3 from concurrent.futures import ProcessPoolExecutor def task ( n ): print ( \" %s run..\" % os . getpid ()) # -- \u6807\u8bc6\u8fdb\u7a0b\u6c60\u91cc\u7684\u54ea\u4e2a\u8fdb\u7a0b\u5728\u6267\u884c\u4efb\u52a1 time . sleep ( n ) return n ** 2 if __name__ == '__main__' : # -- \u53c2\u6570max_workers:\u63d0\u4ea4\u7684\u6700\u5927\u4efb\u52a1\u6570,\u4e0d\u5199\u9ed8\u8ba4\u8d4b\u503cNone # \u82e5\u503c\u4e3aNone,\u521b\u5efa\u7684\u8fdb\u7a0b\u6570\u8ddf\u673a\u5668\u7684cpu\u7684\u6838\u6570\u4e00\u6837! # \u6267\u884c\u5b8c\u8be5\u8bed\u53e5\u540e,\u73b0\u76ee\u524d\u67095\u4e2a\u8fdb\u7a0b,\u4e3b\u8fdb\u7a0b+\u6c60\u5b50\u91cc\u76844\u4e2a\u8fdb\u7a0b pool = ProcessPoolExecutor ( 4 ) # -- \u9020\u6c60 # -- \u5f80\u8fdb\u7a0b\u6c60\u91cc<\u5f02\u6b65>\u63d0\u4ea4\u4e8610\u4e2a\u4efb\u52a1,\u8fdb\u7a0b\u6c60\u91cc\u76844\u4e2a\u8fdb\u7a0b\u9700\u8981\u54fc\u54e7\u54fc\u54e7\u7684\u5e72\u5b8c\u8fd910\u4e2a\u6d3b # \u5f02\u6b65\u63d0\u4ea4\u7684,10\u4e2a\u6d3b\u4f1a\u5feb\u901f\u7684\u63d0\u4ea4\u5230\u8fdb\u7a0b\u6c60\u91cc. # \u8fdb\u7a0b\u6c60\u76844\u4e2a\u8fdb\u7a0b\u5148\u4e00\u4eba\u9886\u4e00\u4e2a\u6d3b\u5e72,\u5e72\u5b8c\u540e\u518d\u9886\u4e00\u4e2a\u6d3b\u5e72,\u76f4\u523010\u4e2a\u6d3b\u5168\u90e8\u5e72\u5b8c # \u4ece\u59cb\u81f3\u7ec8\u5c31\u8fdb\u7a0b\u6c60\u91cc\u76844\u4e2a\u8fdb\u7a0b\u5728\u5e72\u6d3b,\u4e0d\u4f1a\u518d\u542f\u52a8\u5176\u5b83\u7684\u8fdb\u7a0b,\u7262\u7262\u7684\u5c06\u5b50\u8fdb\u7a0b\u6570\u63a7\u5236\u57284\u4e2a for i in range ( 1 , 11 ): # -- \u53c2\u6570: \u6307\u5b9a\u4efb\u52a1\u51fd\u6570\u3001\u7ed9\u6307\u5b9a\u7684\u4efb\u52a1\u51fd\u6570\u4f20\u53c2 pool . submit ( task , i ) # -- \u8be5\u884c\u4ee3\u7801\u53ea\u7ba1\u63d0\u4ea4,\u63d0\u4ea4\u540e\u5c31\u5565\u4e5f\u4e0d\u7ba1\u5566,\u4e0d\u4f1a\u539f\u5730\u7b49\u5f85 print ( \"\u4e3b\" ) Ps: \u6ce8\u610f,\u8fd0\u884c\u7ed3\u679c\u4e2d\u770b\u8d77\u6765\u56db\u4e2a\u8fdb\u7a0b\u662f\u4f9d\u6b21\u5faa\u73af\u505a\u4efb\u52a1,\u662f\u56e0\u4e3a10\u4e2a\u4efb\u52a1\u7684\u8fd0\u884c\u65f6\u95f4\u4f9d\u6b21\u9012\u589e\u5bfc\u81f4\u7684.. \u6211\u6ca1\u6709 random.randint() \u8bbe\u7f6e\u968f\u673a\u65f6\u95f4.","title":"\u5f02\u6b65\u63d0\u4ea4"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/11_%E8%BF%9B%E7%A8%8B%E6%B1%A0%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/#_7","text":"","title":"\u521d\u63a2\u5f02\u6b65\u7ed3\u679c"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/11_%E8%BF%9B%E7%A8%8B%E6%B1%A0%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/#futureresult","text":"\u8fd9\u79cd\u8981\u7ed3\u679c\u7684\u65b9\u5f0f\u662f\u4e0d\u6b63\u786e\u7684!! import os import time from concurrent.futures import ProcessPoolExecutor def task ( n ): print ( \" %s run..\" % os . getpid ()) time . sleep ( n ) return n ** 2 if __name__ == '__main__' : pool = ProcessPoolExecutor ( 4 ) for i in range ( 1 , 11 ): # -- \u5f02\u6b65\u63d0\u4ea4\u7684,\u4e0d\u80fd\u7acb\u9a6c\u62ff\u5230\u8fd4\u56de\u7ed3\u679c. So,\u6b64\u5904\u7684future\u62ff\u5230\u7684\u53ea\u662f\u4e00\u4e2a\u5bf9\u8c61 future = pool . submit ( task , i ) # -- \u8c03\u7528future\u5bf9\u8c61\u7684result\u65b9\u6cd5,\u5c31\u662f\u5728\u5411\u8be5\u5bf9\u8c61\u8981\u7ed3\u679c # \u6ca1\u6709\u5c31\u4f1a\u4e00\u76f4\u7b49\u7740/\u963b\u585e\u7740,\u76f4\u5230\u62ff\u5230\u7ed3\u679c\u540e,\u518d\u8fdb\u884c\u4e0b\u4e00\u6b21\u5faa\u73af print ( future . result ()) print ( \"\u4e3b\" ) \"\"\" 42565 run.. 1 42567 run.. 4 42568 run.. 9 42566 run.. 16 42565 run.. 25 42567 run.. 36 ... ... ... \"\"\" \u53ef\u4ee5\u770b\u5230\u4efb\u52a1\u7684\u8fd0\u884c\u7ed3\u679c\u5df2\u7ecf\u53d8\u6210\u4e32\u884c\u4e86.. So,\u867d\u8bf4\u4efb\u52a1\u662f\u5f02\u6b65\u63d0\u4ea4\u7684,\u4f46\u5faa\u73af\u91cc\u7684 future.result() \u8bed\u53e5 \u5bfc\u81f4 \u5e72\u6d3b\u8fc7\u7a0b\u8ddf\u540c\u6b65\u63d0\u4ea4\u7684\u5e72\u6d3b\u8fc7\u7a0b\u662f\u4e00\u6837. \u4e0d\u5e94\u8be5\u8fd9\u6837\u505a! \u8fd9\u6837\u505a\u8fd8\u4e0d\u5982\u7528\u4e3b\u8fdb\u7a0b \u4f9d\u6b21 \u5e72\u5b8c\u8fd910\u4e2a\u6d3b/\u8c03\u7528\u8fd910\u4e2a\u51fd\u6570.","title":"future.result()"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/11_%E8%BF%9B%E7%A8%8B%E6%B1%A0%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/#poolshutdown","text":"\u90a3\u600e\u4e48\u641e\u5462? \u7b49\u6240\u6709\u7684\u4efb\u52a1\u8fd0\u884c\u5b8c,\u7edf\u4e00\u7684\u62ff\u7ed3\u679c? \u8be5\u7a0b\u5e8f\u52a0\u4e86\u4e2a\u4efb\u52a1\u7ed3\u679c\u5904\u7406\u7684\u51fd\u6570. import os import time from concurrent.futures import ProcessPoolExecutor def task ( n ): print ( \" %s run..\" % os . getpid ()) time . sleep ( n ) # -- \u56fa\u5b9a\u6bcf\u4e2a\u4efb\u52a1\u7684\u5904\u7406\u65f6\u95f4\u4e3a5s return n ** 2 def parse ( res ): time . sleep ( 1 ) # -- \u6bcf\u4e2a\u4efb\u52a1\u7684\u5904\u7406\u65f6\u95f4\u90fd\u4e3a1s print ( res ) if __name__ == '__main__' : pool = ProcessPoolExecutor ( 4 ) future_list = [] for i in range ( 1 , 11 ): future_list . append ( pool . submit ( task , i )) start = time . time () # -- \u53c2\u6570wait\u7684\u9ed8\u8ba4\u503c\u5c31\u4e3aTrue! # -- \u8be5\u8bed\u53e5\u505a\u4e86\u4e24\u4ef6\u4e8b: \"\u76f8\u5f53\u4e8epool.close()+pool.join()\" # 1> shutdown\u4ee3\u8868\u5173\u95ed\u8fdb\u7a0b\u6c60\u7684\u5165\u53e3,\u5373\u4e0d\u80fd\u518d\u5f80\u8fdb\u7a0b\u6c60\u91cc\u63d0\u4ea4\u4efb\u52a1 # 2> wait=True \u539f\u5730\u7b49\u5f85\u6c60\u5185\u6240\u6709\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5\u56de\u6536\u5b8c\u8d44\u6e90\u540e\u624d\u7ee7\u7eed # So,`print(\"\u4e3b\")`\u80af\u5b9a\u662f\u5728\u8fdb\u7a0b\u6c60\u8fd0\u884c\u5b8c\u540e\u518d\u6267\u884c\u7684! pool . shutdown ( wait = True ) # -- \u6b64\u884c\u4ee3\u7801\u6267\u884c\u5b8c,\u610f\u5473\u8fd910\u4e2a\u4efb\u52a1\u5168\u90e8\u6267\u884c\u5b8c\u5566! task_over = time . time () print ( \"\u5b8c\u6210\u4efb\u52a1\u82b1\u8d39(s):\" , task_over - start ) for future in future_list : print ( future . result ()) # -- \u4f1a\u77ac\u95f4\u5f97\u523010\u4e2a\u4efb\u52a1\u7684\u8fd0\u884c\u7ed3\u679c! print ( \"\u5904\u7406\u7ed3\u679c\u82b1\u8d39(s):\" , time . time () - task_over ) print ( \"\u4e3b\" ) \u7ed3\u679c\u5206\u6790: \u53ef\u4ee5\u4ece\u4e0b\u9762\u7684\u8fd0\u884c\u7ed3\u679c\u4e2d\u770b\u5230, \u6bcf\u4e2a\u4efb\u52a1\u90fd\u9700\u898110\u79d2, \u8ba1\u7b97\u673a\u67094\u4e2a\u6838, \u521a\u597d\u662f\u6211\u4eec\u8bbe\u7f6e\u7684\u8fdb\u7a0b\u6c60\u6570, 4\u4e2a\u6838 \u5e76\u884c \u5904\u7406\u4efb\u52a1, \u5b8c\u6210\u4efb\u52a1\u82b1\u8d39\u4e8615\u79d2, 10/4=2.5 \u8981\u8fd0\u884c3\u4e2a5\u79d2.. \u6bcf\u4e2a\u4efb\u52a1\u5904\u7406\u7ed3\u679c\u9700\u82b1\u8d391s,\u82b1\u8d39\u4e8610s.. \u8fd9\u6837\u7684\u8bdd, \u4e00\u5171\u82b1\u8d39\u4e8615+10=25s. \u5f53\u7136\u53ef\u4ee5 \u518d\u542f\u75284\u4e2a\u8fdb\u7a0b\u5e76\u884c\u7684\u5bf9\u4efb\u52a1\u7ed3\u679c\u8fdb\u884c\u5904\u7406! \u8fd9\u6837\u5904\u7406\u4efb\u52a1\u7684\u7ed3\u679c\u4f1a\u4ece10s\u51cf\u4e3a3s.. \u8fd9\u4e00\u901a\u64cd\u4f5c\u4e0b\u6765,\u8be5\u7a0b\u5e8f\u5171\u8ba1\u8fd0\u884c18s, \u4e00\u5171\u7528\u4e869\u4e2a\u8fdb\u7a0b(\u5305\u62ec\u4e86\u4e3b\u8fdb\u7a0b).","title":"pool.shutdown()"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/11_%E8%BF%9B%E7%A8%8B%E6%B1%A0%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/#_8","text":"\u4e0d\u8fd4\u56de n**2 \u5566,\u76f4\u63a5\u5b8c\u6210\u4efb\u52a1\u65f6\u628a\u4efb\u52a1\u7684\u7ed3\u679c\u4e00\u5e76\u8fdb\u884c\u5904\u7406, \u5c06\u751f\u4ea7\u4efb\u52a1\u548c\u5904\u7406\u4efb\u52a1\u7cc5\u5408\u5230\u4e00\u4e2a\u8fdb\u7a0b\u91cc. \u6709\u7ed3\u679c\u540e\u7acb\u9a6c\u5904\u7406\u7ed3\u679c, \u7a0b\u5e8f\u82b1\u8d39\u65f6\u95f4\u540c\u6837\u662f18s.. \u770b\u8d77\u6765\u8fd9\u6837\u505a\u4f1a\u66f4\u597d,\u56e0\u4e3a\u53ea\u4f1a\u7528\u52304\u4e2a\u8fdb\u7a0b,\u800c\u4e0d\u662f8\u4e2a..(\u6ca1\u6709\u7b97\u4e3b\u8fdb\u7a0b \u8282\u7701\u4e864\u4e2a\u5e76\u884c\u5904\u7406\u4efb\u52a1\u7ed3\u679c\u7684\u8fdb\u7a0b) import os import time from concurrent.futures import ProcessPoolExecutor def task ( n ): print ( \" %s run..\" % os . getpid ()) time . sleep ( 5 ) parse ( n ** 2 ) def parse ( res ): time . sleep ( 1 ) print ( \" %s \u5904\u7406\u4e86 %s \" % ( os . getpid (), res )) if __name__ == '__main__' : pool = ProcessPoolExecutor ( 4 ) start = time . time () for i in range ( 1 , 11 ): pool . submit ( task , i ) pool . shutdown ( wait = True ) print ( \"\u4e3b \u603b\u82b1\u8d39(s):\" , time . time () - start ) # \u4e3b \u603b\u82b1\u8d39(s): 18.28273892402649 \u6211\u4eec\u7684\u7a0b\u5e8f\u9700\u8981\u5728\u6709\u7ed3\u679c\u7684\u65f6\u5019\u7acb\u9a6c\u5904\u7406\u7ed3\u679c,\u4f46\u4e0d\u5e94\u8be5\u5c06\u751f\u4ea7\u4efb\u52a1\u8ddf\u5904\u7406\u4efb\u52a1\u5f3a\u8026\u5408\u5728\u4e00\u8d77!! \u5c06\u6240\u6709\u7684\u9700\u6c42\u653e\u5230\u540c\u4e00\u4e2a\u8fdb\u7a0b\u91cc\u4e0d\u5408\u7406!","title":"\u5f3a\u8026\u5408"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/11_%E8%BF%9B%E7%A8%8B%E6%B1%A0%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/#_9","text":"\u6700\u5408\u7406\u7684\u662f\u4ec0\u4e48\u65f6\u5019\u62ff\u7ed3\u679c? \u67d0\u4e2a\u4efb\u52a1\u4e00\u65e6\u8fd0\u884c\u5b8c,\u5c31\u7acb\u9a6c\u62ff\u5230\u7ed3\u679c\u53bb\u5904\u7406\u5b83.\u8fd9\u6837\u5904\u7406\u6700\u53ca\u65f6! \u56de\u8c03\u673a\u5236 -- \u63d0\u4ea4\u4e00\u4e2a\u4efb\u52a1\u5c31\u4e3a\u8be5\u4efb\u52a1\u7ed1\u5b9a\u4e00\u4e2a\u56de\u8c03\u51fd\u6570. \u6ce8\u610f: \u6700\u540e\u662f<\u63d0\u4ea4\u8005- \u4e3b\u8fdb\u7a0b >\u8c03\u7528parse()\u56de\u8c03\u51fd\u6570\u5904\u7406\u7684\u6570\u636e! \u5f0a\u7aef: \u82e5\u8be5\u7a0b\u5e8f\u662fIO\u5bc6\u96c6\u578b\u7684,\u7528\u8fdb\u7a0b\u6c60\u6548\u7387\u4e0d\u9ad8.. import os import time from concurrent.futures import ProcessPoolExecutor def task ( n ): print ( \" %s run..\" % os . getpid ()) time . sleep ( 5 ) return n ** 2 def parse ( future ): time . sleep ( 1 ) print ( \" %s \u5904\u7406\u4e86 %s \" % ( os . getpid (), future . result ())) if __name__ == '__main__' : pool = ProcessPoolExecutor ( 4 ) start = time . time () for i in range ( 1 , 11 ): future = pool . submit ( task , i ) # -- submit\u63d0\u4ea4\u5b8c\u4efb\u52a1\u540e,\u76f4\u63a5\u4e3afuture\u5bf9\u8c61\u7ed1\u5b9a\u4e00\u4e2a\u56de\u8c03\u51fd\u6570parse # \u8be5\u56de\u8c03\u51fd\u6570parse\u4f1a\u5728future\u5bf9\u8c61\u6709\u7ed3\u679c\u65f6\u7acb\u9a6c\u89e6\u53d1!! # \u5e76\u4e14\u4f1a\u5c06future\u5f53\u4f5c\u53c2\u6570\u4f20\u7ed9parse!! # \u8be5\u56de\u8c03\u51fd\u6570\u8c01\u6765\u8fd0\u884c\u5462?\u7531\u63d0\u4ea4\u8005-\"\u4e3b\u8fdb\u7a0b\"\u56de\u8fc7\u5934\u6765\u8c03\u7528! future . add_done_callback ( parse ) pool . shutdown ( wait = True ) # -- \u4fdd\u8bc1\u6240\u6709\u4efb\u52a1\u90fd\u5df2\u7ecf\u5904\u7406\u5b8c print ( \"\u4e3b \u603b\u82b1\u8d39(s):\" , time . time () - start )","title":"\u56de\u8c03\u673a\u5236"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/11_%E8%BF%9B%E7%A8%8B%E6%B1%A0%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/#_10","text":"","title":"\u7ebf\u7a0b\u6c60"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/11_%E8%BF%9B%E7%A8%8B%E6%B1%A0%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/#io","text":"\u6bcf\u4e2a\u4efb\u52a1\u82b1\u8d395s\u65f6\u95f4\u6267\u884c\u5b8c,\u6bcf\u4e2a\u4efb\u52a1\u7684\u7ed3\u679c\u5904\u7406\u9700\u89811s. \u4e00\u5171\u67094\u4e2a\u4efb\u52a1. (\u8fd9\u91cc\u76844\u4e2a\u4efb\u52a1\u662fIO\u5bc6\u96c6\u578b) 1> \u82e5\u662f\u8fdb\u7a0b\u6c60(\u4e3b\u8fdb\u7a0b\u9020\u4e864\u4e2a\u8fdb\u7a0b), \u9700\u89815+4=9s!! 4\u4e2a\u8fdb\u7a0b \u5e76\u884c \u6267\u884c4\u4e2a\u4efb\u52a1\u9700\u89815s; 4\u4e2a\u56de\u8c03\u51fd\u6570\u4e3b\u8fdb\u7a0b \u201c\u4e32\u884c\u201d \u6267\u884c\u9700\u89814s. \u6ce8\u610f,\u8fd9\u91cc\u662f\u51d1\u9f50\u56db\u4e2a\u4efb\u52a1\u662f\u540c\u65f6\u6267\u884c\u5b8c, \u7279\u522b\u6ce8\u610f!! \u5b9e\u9645\u4e0a,\u6709\u4efb\u52a1\u6267\u884c\u5b8c, \u4e3b\u7ebf\u7a0b\u5c31\u4f1a\u53bb\u8fd0\u884c\u5b83\u7684\u56de\u8c03\u51fd\u6570!! \u4e5f\u5c31\u662f\u8bf4\u5b50\u8fdb\u7a0b\u6267\u884c\u4efb\u52a1\u7684\u65f6\u5019, \u4e3b\u8fdb\u7a0b\u4f1a\u6267\u884c\u5df2\u5b8c\u6210\u4efb\u52a1\u7684\u56de\u8c03\u51fd\u6570.. \u53ea\u6709\u5f53\u56db\u4e2a\u4efb\u52a1\u662f\u540c\u65f6\u6267\u884c\u5b8c\u7684,\u4e3b\u8fdb\u7a0b\u8fd9\u65f6\u6267\u884c\u56de\u8c03\u51fd\u6570\u5b58\u5728\u6548\u7387\u95ee\u9898,\u53ef\u4ee5\u8003\u8651\u518d\u5f004\u4e2a\u8fdb\u7a0b\u6765\u89e3\u51b3. \u7edd\u5927\u591a\u6570\u60c5\u51b54\u4e2a\u4efb\u52a1\u662f\u4e0d\u4f1a\u540c\u65f6\u6267\u884c\u5b8c\u7684.. import os import time from concurrent.futures import ProcessPoolExecutor def task ( n ): print ( \" %s run..\" % os . getpid ()) time . sleep ( 5 ) return n ** 2 def parse ( future ): time . sleep ( 1 ) print ( \" %s \u5904\u7406\u4e86 %s \" % ( os . getpid (), future . result ())) if __name__ == '__main__' : pool = ProcessPoolExecutor ( 4 ) start = time . time () for i in range ( 1 , 5 ): # -- \u7b80\u5199: pool.submit(task, i).add_done_callback(parse) future = pool . submit ( task , i ) future . add_done_callback ( parse ) pool . shutdown ( wait = True ) print ( \"\u4e3b \u603b\u82b1\u8d39(s):\" , time . time () - start ) # \u4e3b \u603b\u82b1\u8d39(s): 9.408581972122192 2> \u82e5\u662f\u7ebf\u7a0b\u6c60(\u7236\u7ebf\u7a0b\u9020\u4e864\u4e2a\u7ebf\u7a0b), \u9700\u89815+1=6s!! 4\u4e2a\u7ebf\u7a0b \u5e76\u53d1 \u6267\u884c4\u4e2a\u4efb\u52a1\u82b1\u8d39\u4e865s, 4\u4e2a\u7ebf\u7a0b\u4f1a \u5e76\u53d1 \u7684\u6267\u884c4\u4e2a\u56de\u8c03\u51fd\u6570! (\u7ebf\u7a0b\u6c60\u91cc\u8c01\u5148\u95f2\u4e0b\u6765\u8c01\u5c31\u5148\u53bb\u6267\u884c\u56de\u8c03\u51fd\u6570) import os import time from concurrent.futures import ThreadPoolExecutor from threading import current_thread def task ( n ): print ( \" %s run..\" % current_thread () . name ) time . sleep ( 5 ) return n ** 2 def parse ( future ): time . sleep ( 1 ) print ( \" %s \u5904\u7406\u4e86 %s \" % ( current_thread () . name , future . result ())) if __name__ == '__main__' : pool = ThreadPoolExecutor ( 4 ) start = time . time () for i in range ( 1 , 5 ): future = pool . submit ( task , i ) future . add_done_callback ( parse ) pool . shutdown ( wait = True ) print ( \"\u4e3b \u603b\u82b1\u8d39(s):\" , time . time () - start ) # \u4e3b \u603b\u82b1\u8d39(s): 9.408581972122192 \"\"\" ThreadPoolExecutor-0_0 run.. ThreadPoolExecutor-0_1 run.. ThreadPoolExecutor-0_2 run.. ThreadPoolExecutor-0_3 run.. ThreadPoolExecutor-0_0 \u5904\u7406\u4e86 1 ThreadPoolExecutor-0_3 \u5904\u7406\u4e86 16 ThreadPoolExecutor-0_2 \u5904\u7406\u4e86 9 ThreadPoolExecutor-0_1 \u5904\u7406\u4e86 4 \u4e3b \u603b\u82b1\u8d39(s): 6.002989053726196 \u8fdb\u7a0b\u5df2\u7ed3\u675f,\u9000\u51fa\u4ee3\u78010 \"\"\"","title":"IO\u5bc6\u96c6\u578b"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/11_%E8%BF%9B%E7%A8%8B%E6%B1%A0%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/#_11","text":"\u6211\u4eec\u518d\u6765\u60f3\u60f3, \u5176\u5b83\u6761\u4ef6\u4e0d\u53d8, \u5047\u8bbe4\u4e2a\u4efb\u52a1\u662f\u8ba1\u7b97\u5bc6\u96c6\u578b! 1> \u82e5\u662f\u7ebf\u7a0b\u6c60,\u867d\u71364\u4e2a\u7ebf\u7a0b\u662f\u5e76\u53d1\u6267\u884c4\u4e2a\u4efb\u52a1,\u4f46\u540c\u4e00\u65f6\u95f4\u53ea\u80fd\u75281\u4e2aCPU.\u8be5\u7b97\u7684\u65f6\u95f4\u4e00\u4e2a\u90fd\u843d\u4e0d\u4e0b\u6765. \u6267\u884c\u5b8c\u4efb\u52a1\u9700\u89814*5=20s. \u5904\u7406\u56de\u8c03\u51fd\u6570\u9700\u89814s\u65f6\u95f4. -- \u5171\u8ba124s. 2> \u82e5\u662f\u8fdb\u7a0b\u6c60,4\u4e2a\u8fdb\u7a0b\u5e76\u53d1\u7684\u6267\u884c4\u4e2a\u4efb\u52a1,\u53ea\u9700\u89815s. \u8fdb\u7a0b\u6c60\u4f1a\u7528\u4e3b\u8fdb\u7a0b\u201c\u4e32\u884c\u201d\u5904\u7406\u56de\u8c03\u51fd\u6570. \u82b1\u8d394s. -- \u653b\u51fb9s. Ps: \u6240\u4ee5\u9762\u5bf9\u8ba1\u7b97\u5bc6\u96c6\u578b,\u8fdb\u7a0b\u6c60\u548c\u7ebf\u7a0b\u6c60\u5bf9\u4e8e\u56de\u8c03\u51fd\u6570\u7684\u5904\u7406\u65f6\u95f4\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u662f\u4e00\u6837\u7684!!","title":"\u8ba1\u7b97\u5bc6\u96c6\u578b"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/12_%E5%8D%8F%E7%A8%8B/","text":"\u8fd0\u884c\u72b6\u6001 \u00b6 \u56de\u987e\u4e0b\u4efb\u52a1\u7684\u4e09\u79cd\u8fd0\u884c\u72b6\u6001.(\u963b\u585e\u3001\u975e\u963b\u585e) \u963b\u585e: IO\u963b\u585e \u975e\u963b\u585e: \u8fd0\u884c \u6216 \u5c31\u7eea. Ps: \u4e0a\u8ff0\u662f\u5728\u4ecb\u7ecd\u8fdb\u7a0b\u7406\u8bba\u65f6\u63d0\u53ca\u8fdb\u7a0b\u7684\u4e09\u79cd\u6267\u884c\u72b6\u6001. \u4f46\u8981\u77e5\u9053 \u7ebf\u7a0b\u624d\u662f\u6267\u884c\u5355\u4f4d, \u6240\u4ee5\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u7ebf\u7a0b\u7684\u4e09\u79cd\u72b6\u6001 cpu\u6b63\u5728\u8fd0\u884c\u4e00\u4e2a\u4efb\u52a1,\u4f1a\u5728\u4e24\u79cd\u60c5\u51b5\u4e0b\u5207\u8d70\u53bb\u6267\u884c\u5176\u4ed6\u7684\u4efb\u52a1 (\u6ce8\u610f! cpu\u5207\u6362\u4efb\u52a1\u6267\u884c\u8fd9\u4e00\u64cd\u4f5c\u662f\u7531 \u64cd\u4f5c\u7cfb\u7edf \u6765\u5f3a\u5236\u63a7\u5236\u7684) 1> \u4e00\u79cd\u60c5\u51b5\u662f\u8be5\u4efb\u52a1\u53d1\u751f\u4e86\u963b\u585e 2> \u53e6\u5916\u4e00\u79cd\u60c5\u51b5\u662f\u8be5\u4efb\u52a1\u8ba1\u7b97\u7684\u65f6\u95f4\u8fc7\u957f\u6216\u6709\u4e00\u4e2a\u4f18\u5148\u7ea7\u66f4\u9ad8\u7684\u7a0b\u5e8f\u66ff\u4ee3\u4e86\u5b83 \u7b2c\u4e00\u79cd\u60c5\u51b5 \u7684\u5207\u6362. \u5728\u4efb\u52a1\u4e00\u9047\u5230io\u60c5\u51b5\u4e0b\u5207\u5230\u4efb\u52a1\u4e8c\u53bb\u6267\u884c \u8fd9\u6837\u5c31\u53ef\u4ee5\u5229\u7528\u4efb\u52a1\u4e00\u963b\u585e\u7684\u65f6\u95f4\u5b8c\u6210\u4efb\u52a1\u4e8c\u7684\u8ba1\u7b97,\u6548\u7387\u7684\u63d0\u5347\u5c31\u5728\u4e8e\u6b64 \u7b2c\u4e8c\u79cd\u60c5\u51b5 \u5e76\u4e0d\u80fd\u63d0\u5347\u6548\u7387,\u53ea\u662f\u4e3a\u4e86\u8ba9cpu\u80fd\u591f\u96e8\u9732\u5747\u6cbe,\u5b9e\u73b0\u770b\u8d77\u6765\u6240\u6709\u4efb\u52a1\u90fd\u88ab\u201c\u540c\u65f6\u201d\u6267\u884c\u7684\u6548\u679c; \u82e5\u591a\u4e2a\u4efb\u52a1\u90fd\u662f\u7eaf\u8ba1\u7b97\u7684,(\u7b2c\u4e8c\u79cd\u60c5\u51b5)\u8fd9\u79cd\u5207\u6362\u53cd\u800c\u4f1a\u964d\u4f4e\u6548\u7387. \u534f\u7a0b \u00b6 \u672c\u8282\u7684\u4e3b\u9898\u662f \u57fa\u4e8e\u5355\u7ebf\u7a0b\u6765\u5b9e\u73b0\u5e76\u53d1, \u5373\u53ea\u7528\u4e00\u4e2a\u4e3b\u7ebf\u7a0b (\u5f88\u660e\u663e\u53ef\u5229\u7528\u7684cpu\u53ea\u6709\u4e00\u4e2a) \u60c5\u51b5\u4e0b\u5b9e\u73b0\u5e76\u53d1 \u6ce8\u610f\u54e6,\u5728OS\u770b\u6765,\u534f\u7a0b\u5c31\u662f\u4e00\u4e2a\u5355\u7ebf\u7a0b. \u5728\u64cd\u4f5c\u7cfb\u7edf\u8fd9\u95e8\u8bfe\u4e2d,\u53ea\u6709\u8fdb\u7a0b\u3001\u7ebf\u7a0b\u8fd9\u4e24\u4e2a\u6982\u5ff5,\u534f\u7a0b\u662f\u7a0b\u5e8f\u5458\u60f3\u51fa\u6765\u7684\u4e00\u4e2a\u4e1c\u897f.Hhh \u534f\u7a0b\u4ecb\u7ecd \u00b6 \u6982\u5ff5 \u00b6 \u534f\u7a0b: \u662f\u5355\u7ebf\u7a0b\u4e0b\u7684\u5e76\u53d1, \u53c8\u79f0\u5fae\u7ebf\u7a0b\u3001\u7ea4\u7a0b. \u82f1\u6587\u540dCoroutine. \u4e00\u53e5\u8bdd\u8bf4\u660e\u4ec0\u4e48\u662f\u534f\u7a0b: \u534f\u7a0b\u662f\u4e00\u79cd\u7528\u6237\u6001\u7684\u8f7b\u91cf\u7ea7\u7ebf\u7a0b, \u5373\u534f\u7a0b\u662f\u7531\u7528\u6237\u7a0b\u5e8f\u81ea\u5df1\u63a7\u5236\u8c03\u5ea6\u7684. \u518d\u6362\u4e2a\u8bf4\u6cd5 -- \u534f\u7a0b\u6307\u7684\u662f\u5355\u7ebf\u7a0b\u4e0b\u7531\u5e94\u7528\u7a0b\u5e8f\u7ea7\u522b\u5b9e\u73b0\u7684\u5e76\u53d1. \u5373\u628a\u672c\u6765\u7531\u64cd\u4f5c\u7cfb\u7edf\u63a7\u5236\u7684\u5207\u6362+\u4fdd\u5b58\u72b6\u6001,\u5728\u5e94\u7528\u7a0b\u5e8f\u91cc\u5b9e\u73b0\u4e86! \u7528\u534f\u7a0b\u7684\u76ee\u7684\u5728\u4e8e: \u628a\u5355\u4e2a\u7ebf\u7a0b\u7684io\u964d\u5230\u6700\u4f4e, \u6700\u5927\u9650\u5ea6\u7684\u63d0\u5347\u5355\u4e2a\u7ebf\u7a0b\u7684\u6267\u884c\u6548\u7387! \u5bf9\u4e8e\u5355\u7ebf\u7a0b\u4e0b, \u6211\u4eec\u4e0d\u53ef\u907f\u514d\u7a0b\u5e8f\u4e2d\u51fa\u73b0io\u64cd\u4f5c, \u4f46\u5982\u679c\u6211\u4eec\u80fd\u5728\u81ea\u5df1\u7684\u7a0b\u5e8f\u4e2d\uff08\u5373\u7528\u6237\u7a0b\u5e8f\u7ea7\u522b\u800c\u975e\u64cd\u4f5c\u7cfb\u7edf\u7ea7\u522b\uff09\u63a7\u5236\u5355\u7ebf\u7a0b\u4e0b\u7684\u591a\u4e2a\u4efb\u52a1\u80fd\u5728\u4e00\u4e2a\u4efb\u52a1\u9047\u5230io\u963b\u585e\u65f6\u5c31\u5207\u6362\u5230\u53e6\u5916\u4e00\u4e2a\u4efb\u52a1\u53bb\u8ba1\u7b97, \u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u8be5\u7ebf\u7a0b\u80fd\u591f\u6700\u5927\u9650\u5ea6\u5730\u5904\u4e8e\u5c31\u7eea\u6001, \u5373\u968f\u65f6\u90fd\u53ef\u4ee5\u88abcpu\u6267\u884c\u7684\u72b6\u6001, \u76f8\u5f53\u4e8e\u6211\u4eec\u5728\u7528\u6237\u7a0b\u5e8f\u7ea7\u522b\u5c06\u81ea\u5df1\u7684io\u64cd\u4f5c\u6700\u5927\u9650\u5ea6\u5730\u9690\u85cf\u8d77\u6765, \u4ece\u800c\u53ef\u4ee5\u8ff7\u60d1\u64cd\u4f5c\u7cfb\u7edf, \u8ba9\u5176\u770b\u5230: \u8be5\u7ebf\u7a0b\u597d\u50cf\u662f\u4e00\u76f4\u5728\u8ba1\u7b97, io\u6bd4\u8f83\u5c11, \u4ece\u800c\u66f4\u591a\u7684\u5c06cpu\u7684\u6267\u884c\u6743\u9650\u5206\u914d\u7ed9\u6211\u4eec\u7684\u7ebf\u7a0b!!! \u90a3\u5982\u4f55\u529e\u5230\u5462\uff1f\u534f\u7a0b\u5c31\u4e0d\u5f97\u4e0d\u95ea\u4eae\u767b\u573a\u5566!! (\u204e\u204d\u0334\u031b\u1d17\u204d\u0334\u031b\u204e) \u6211\u4eec\u5148\u6765\u56de\u60f3\u4e00\u4e0b\u5e76\u53d1\u7684\u672c\u8d28: \u5207\u6362 + \u4fdd\u5b58\u72b6\u6001 OS\u63a7\u5236cpu\u5207\u6362\u7ebf\u7a0b, cpu\u6765\u56de\u6267\u884c\u4e0d\u540c\u7ebf\u7a0b\u5bf9\u5e94\u7684\u4efb\u52a1 \u6362\u4e00\u4e2a\u8bf4\u6cd5,\u5728\u672a\u5b66\u4e60\u534f\u7a0b\u4e4b\u524d,\u6211\u4eec\u7684\u8ba4\u77e5\u91cc,\u4e00\u4e2a\u7ebf\u7a0b\u5bf9\u5e94\u7740\u4e00\u4e2a\u4efb\u52a1(\u5c31\u662f\u4e00\u6bb5\u51fd\u6570\u4ee3\u7801), OS\u63a7\u5236\u7740cpu\u5728\u8fd9\u591a\u4e2a\u7ebf\u7a0b\u4e4b\u95f4\u6765\u56de\u5207\u6362, \u5373cpu\u4e0d\u505c\u7684\u6765\u56de\u8fd0\u7b97 \u591a\u4e2a\u7ebf\u7a0b \u4e0a\u7684 \u5bf9\u5e94\u7684\u4efb\u52a1/\u5bf9\u5e94\u7684\u51fd\u6570\u4ee3\u7801.. \u5e76\u53d1\u7684\u5b9e\u73b0\u65b9\u6848: \u591a\u8fdb\u7a0b\u3001\u591a\u7ebf\u7a0b -- \u672c\u8d28\u90fd\u662f\u5728\u7ebf\u7a0b\u4e4b\u95f4\u6765\u56de\u5207\u6362(\u56e0\u4e3a\u7ebf\u7a0b\u624d\u662fcpu\u4e0a\u7684\u6267\u884c\u5355\u4f4d) \u534f\u7a0b\u4e5f\u5b9e\u73b0\u4e86\u5e76\u53d1, \u53ea\u4e0d\u8fc7\u5b83\u662f\u5728 \u5355\u7ebf\u7a0b \u4e0b, \u7531 \u7528\u6237/\u5e94\u7528\u7a0b\u5e8f \u81ea\u5df1\u63a7\u5236\u4e00\u4e2a\u4efb\u52a1\u9047\u5230io\u963b\u585e\u4e86\u5c31\u5207\u6362\u53e6\u5916\u4e00\u4e2a\u4efb\u52a1\u53bb\u6267\u884c( \u7b80\u5355\u7406\u89e3,\u5c31\u662f\u628a\u4e0d\u540c\u4efb\u52a1\u5bf9\u5e94\u7684\u4ee3\u7801\u5f80\u7ebf\u7a0b\u6240\u5728\u7684\u8fdb\u7a0b\u91cc\u653e,\u7136\u540e\u6267\u884c ), \u4ee5\u6b64\u6765\u63d0\u5347\u6548\u7387. \u5373 \u8ba9OS\u5206\u914d\u66f4\u591a\u7684CPU\u65f6\u95f4\u7247\u7ed9\u8be5\u5355\u7ebf\u7a0b!! \u5355\u7ebf\u7a0b\u4e0b\u4e09\u4e2a\u4efb\u52a1 , \u6bcf\u4e2a\u4efb\u52a1\u90fd\u662f3s\u7684IO\u65f6\u95f4 . \u8ba1\u7b97\u548c\u5207\u6362\u65f6\u95f4\u5ffd\u7565\u4e0d\u8ba1 . 1 > \u8fd9\u4e09\u4e2a\u4efb\u52a1\u5728\u4e00\u4e2a\u7ebf\u7a0b\u91cc\u5c31\u662f\u4e32\u7740\u6765\u7684 ( \u9047\u5230IO\u4e86 , OS\u5c06cpu\u5207\u7ed9\u8c01\u5462 \uff1f \u8fd8\u4e0d\u662f\u5f97\u7b49\u8be5\u7ebf\u7a0bIO\u505a\u5b8c ), \u5219\u9700\u89819s\u7684\u65f6\u95f4 . 2 > \u5047\u5982\u5728\u5e94\u7528\u7a0b\u5e8f\u91cc\u63a7\u5236\u4efb\u52a1\u7684\u5207\u6362 , \u5728\u8fd9\u671f\u95f4 , CPU\u4e00\u76f4\u5728\u8ba1\u7b97\u8be5\u5355\u7ebf\u7a0b\u4e0a\u7684\u4efb\u52a1 . \u5f53\u8be5\u7ebf\u7a0b\u9047\u5230IO\u5c31\u5207\u6362\u8be5\u7ebf\u7a0b\u6267\u884c\u7684\u4efb\u52a1 ( \u505aIO\u5c31\u662f\u8c03\u7528\u4e0b\u7cfb\u7edf\u63a5\u53e3 ) . \u5f53IO\u505a\u5b8c , \u5355\u7ebf\u7a0b\u4e5f\u5c06\u4e09\u4e2a\u4efb\u52a1\u90fd\u505a\u5b8c\u4e86 . \u9700\u89813s . \u7279\u522b\u5f3a\u8c03 \u00b6 OS\u63a7\u5236cpu\u5bf9\u7ebf\u7a0b\u7684\u5207\u6362; \u5e94\u7528\u7a0b\u5e8f\u81ea\u5df1\u63a7\u5236\u7ebf\u7a0b\u91cc\u591a\u4e2a\u4efb\u52a1\u7684\u5207\u6362 \u5373OS\u5207\u6362\u7684\u5355\u4f4d\u662f\u7ebf\u7a0b,\u534f\u7a0b\u5207\u6362\u7684\u5355\u4f4d\u662f\u7ebf\u7a0b\u5185\u7684\u4efb\u52a1.. python\u7684\u7ebf\u7a0b\u5c5e\u4e8e \u5185\u6838\u7ea7\u522b \u7684, \u5373\u7531\u64cd\u4f5c\u7cfb\u7edf\u63a7\u5236\u8c03\u5ea6 (\u5982\u5355\u7ebf\u7a0b\u9047\u5230io\u6216\u6267\u884c\u65f6\u95f4\u8fc7\u957f\u5c31\u4f1a\u88ab\u8feb\u4ea4\u51facpu\u6267\u884c\u6743\u9650,\u5207\u6362\u5176\u4ed6\u7ebf\u7a0b\u8fd0\u884c) \u5355\u7ebf\u7a0b\u5185\u5f00\u542f\u534f\u7a0b, \u4e00\u65e6\u9047\u5230io, \u5c31\u4f1a\u4ece \u5e94\u7528\u7a0b\u5e8f\u7ea7\u522b (\u800c\u975e\u64cd\u4f5c\u7cfb\u7edf) \u63a7\u5236\u5207\u6362, \u4ee5\u6b64\u6765\u63d0\u5347\u6548\u7387 (! ! !\u975eio\u64cd\u4f5c\u7684\u5207\u6362\u4e0e\u6548\u7387\u65e0\u5173) \u4f18\u7f3a\u70b9 \u00b6 \u5bf9\u6bd4\u64cd\u4f5c\u7cfb\u7edf\u63a7\u5236\u7ebf\u7a0b\u7684\u5207\u6362, \u7528\u6237\u5728\u5355\u7ebf\u7a0b\u5185\u63a7\u5236\u534f\u7a0b\u7684\u5207\u6362,\u4f18\u7f3a\u70b9\u5982\u4e0b: [\u4f18\u70b9] \u5e94\u7528\u7a0b\u5e8f\u7ea7\u522b\u7684\u5207\u6362\u901f\u5ea6\u8981 \u8fdc\u8fdc\u9ad8\u4e8e \u64cd\u4f5c\u7cfb\u7edf\u7684\u5207\u6362. \u56e0\u4e3aOS\u7ba1\u63a7\u7684\u53ef\u4e0d\u4ec5\u4ec5\u53ea\u662f\u5e94\u7528\u7a0b\u5e8f\u91cc\u7684\u90a3\u51e0\u4e2a\u4efb\u52a1 [\u7f3a\u70b9] \u591a\u4e2a\u4efb\u52a1\u4e00\u65e6\u6709\u4e00\u4e2a\u963b\u585e\u6ca1\u6709\u5207,\u6574\u4e2a\u7ebf\u7a0b\u90fd\u963b\u585e\u5728\u539f\u5730!!! \u8be5\u7ebf\u7a0b\u5185\u7684\u5176\u5b83\u7684\u4efb\u52a1\u90fd\u4e0d\u80fd\u6267\u884c\u5566!\u5c31\u6ca1\u4e86\u5e76\u53d1\u4e00\u8bf4\u5566. \u4e00\u65e6\u5f15\u5165\u534f\u7a0b,\u5c31\u9700\u8981\u76d1\u6d4b\u5355\u7ebf\u7a0b\u4e0b\u6240\u6709\u7684IO\u884c\u4e3a,\u5b9e\u73b0\u9047\u5230IO\u5c31\u5207\u6362! \u2605 os\u53ea\u4f1a\u5206\u914d\u7ed9\u5355\u7ebf\u7a0b\u4e00\u4e2acpu / \u6838 . \u6240\u4ee5\u5355\u7ebf\u7a0b\u4e0d\u80fd\u5b9e\u73b0\u5e76\u884c . \u2605 \u591a\u7ebf\u7a0b\u548c\u5355\u7ebf\u7a0b \u5b9e\u73b0\u7684\u5e76\u53d1 \u540c\u4e00\u65f6\u523b\u90fd\u53ea\u6709\u4e00\u4e2a\u4efb\u52a1\u5728\u8fd0\u884c . \u5047\u8bbecpu\u67093\u4e2a\u6838 - \u591a\u8fdb\u7a0b\u53ef\u4ee5\u5229\u7528\u591a\u6838 , \u5047\u8bbe\u5f00\u4e863\u4e2a\u8fdb\u7a0b , \u540c\u4e00\u65f6\u95f4\u53ef\u4ee5\u67093\u4e2a\u4efb\u52a1\u5728\u8fd0\u884c ( 3 \u4e2a\u4efb\u52a1\u5e76\u884c ) \u82e5\u5176\u4e2d\u4e00\u4e2a\u4efb\u52a1\u963b\u585e\u4e86 , \u5176\u5b83\u6838\u4e0a\u7684\u4efb\u52a1 / \u8fdb\u7a0b\u4e0d\u53d7\u5f71\u54cd , \u7ee7\u7eed\u8fd0\u884c . - \u82e5\u662f\u591a\u7ebf\u7a0b\u5462 \uff1f \u591a\u7ebf\u7a0b\u53ea\u80fd\u5b9e\u73b0\u5e76\u53d1 , \u540c\u4e00\u65f6\u95f4\u53ea\u6709\u4e00\u4e2a\u5728\u8fd0\u884c \u82e5\u5176\u4e2d\u4e00\u4e2a\u4efb\u52a1\u963b\u585e\u4e86 , OS\u4f1a\u8c03\u5ea6\u5207\u6362cpu\u6267\u884c\u7684\u7ebf\u7a0b , \u4e5f\u4e0d\u4f1a\u5f71\u54cd\u5176\u4ed6\u4efb\u52a1 / \u7ebf\u7a0b\u7ee7\u7eed\u8fd0\u884c . - \u90a3\u534f\u7a0b\u5462 \uff1f \u534f\u7a0b\u610f\u5473\u7740\u662f\u5355\u7ebf\u7a0b , \u4e00\u65e6\u4e00\u4e2a\u4efb\u52a1\u9047\u5230IO\u4e86 , \u5e94\u7528\u7a0b\u5e8f\u5e94\u8be5\u7acb\u9a6c\u5c06\u7ebf\u7a0b\u5bf9\u5e94\u7684\u4efb\u52a1\u5207\u6362\u5230\u53e6\u5916\u4e00\u4e2a . \u82e5\u963b\u5728\u539f\u5730\u4e86 , \u5e94\u7528\u7a0b\u5e8f\u6ca1\u6709\u5207 , \u4f1a\u5bfc\u81f4\u5176\u5b83\u4efb\u52a1\u90fd\u4e0d\u80fd\u8fd0\u884c , \u5168\u7b49\u5f85 . \u6240\u4ee5\u7528\u534f\u7a0b\u8981\u614e\u91cd , \u6240\u6709IO\u90fd\u4e0d\u80fd\u8ba9\u4ed6\u963b\u5728\u539f\u5730 , \u90fd\u9700\u8981\u5b8c\u6210\u5207\u6362 , \u4e00\u65e6\u7528\u4e86\u534f\u7a0b , \u5c31\u6ca1\u6709\u4e86\u56de\u5934\u8def !! \u4ee5\u4e0a\u5c31\u662f\u5bf9 \u4e0a\u65b9 \u201c \u7279\u522b\u5f3a\u8c03 \u201d \u7684\u4e00\u4e2a\u8865\u5145\u89e3\u91ca .. \u7cbe\u9ad3\u5728\u4e8e\u5207\u6362\u662f\u8c01\u5728\u5f04 , \u662fOS\u8fd8\u662f\u5e94\u7528\u7a0b\u5e8f ! \u4e24\u4e2a\u6761\u4ef6 \u00b6 \u4ece\u4e0a\u9762\u7684\u4ecb\u7ecd\u4e2d\u63d0\u53d6\u4e24\u4e2a\u5173\u952e\u5b57,\u5206\u6790\u5f97\u51fa\u8981\u7528\u4ee3\u7801\u5b9e\u73b0 \u6709\u610f\u4e49\u7684 \u534f\u7a0b,\u9700\u8981\u6ee1\u8db3\u7684\u4e24\u4e2a\u6761\u4ef6. 1> \u5e76\u53d1 -- \u53ef\u4ee5\u63a7\u5236\u591a\u4e2a\u4efb\u52a1\u4e4b\u95f4\u7684\u5207\u6362, \u5207\u6362\u4e4b\u524d\u5c06\u4efb\u52a1\u7684\u72b6\u6001\u4fdd\u5b58\u4e0b\u6765, \u4ee5\u4fbf\u91cd\u65b0\u8fd0\u884c\u65f6\u53ef\u4ee5\u57fa\u4e8e\u6682\u505c\u7684\u4f4d\u7f6e\u7ee7\u7eed\u6267\u884c. 2> \u63d0\u9ad8\u6548\u7387 -- \u53ef\u4ee5\u68c0\u6d4bio\u64cd\u4f5c, \u5728\u9047\u5230io\u64cd\u4f5c\u7684\u60c5\u51b5\u4e0b\u624d\u53d1\u751f\u5207\u6362! \u9047\u5230IO\u5207\u624d\u80fd\u63d0\u9ad8\u5355\u7ebf\u7a0b\u7684\u6267\u884c\u6548\u7387! \u534f\u7a0b\u4f1a\u63d0\u9ad8\u7a0b\u5e8f\u7684\u6548\u7387 . ( X ) -- \u8fd9\u662f\u4e00\u4e2a\u9519\u8bef\u7684\u8bf4\u6cd5 . \u76d1\u6d4b\u5355\u7ebf\u7a0b\u4e0b\u7684\u591a\u4e2a\u4efb\u52a1 , \u5f53\u5355\u7ebf\u7a0b\u4e0b\u9047\u5230IO\u624d\u5207\u6362\u5230\u53e6\u5916\u4e00\u4e2a\u4efb\u52a1 . \u5207\u4e4b\u524d\u4fdd\u5b58\u72b6\u6001 . \u8fd9\u624d\u662f\u5355\u7ebf\u7a0b\u4e0b\u63d0\u9ad8\u6548\u7387\u7684\u5e76\u53d1 . yield\u5b9e\u73b0\u534f\u7a0b \u00b6 yield\u662f\u4e00\u79cd\u53ef\u4ee5\u5728\u5355\u7ebf\u7a0b\u4e0b\u6765\u56de\u5207\u6362\u4efb\u52a1,\u5e76\u4e14\u53ef\u4ee5\u4fdd\u5b58\u4efb\u52a1\u8fd0\u884c\u72b6\u6001\u7684\u65b9\u6cd5 \u4f46\u662f\u56e0\u4e3ayield\u4e0d\u80fd\u68c0\u6d4bio\u64cd\u4f5c,\u6240\u4ee5\u901a\u8fc7yield\u5b9e\u73b0\u7684\u534f\u7a0b\u4e0d\u80fd\u63d0\u9ad8\u6548\u7387,\u662f\u6ca1\u6709\u610f\u4e49\u7684\u534f\u7a0b\uff01 \u57fa\u4e8eyield\u5e76\u53d1\u6267\u884c \u00b6 \u6267\u884c\u4ee3\u7801\u8be5\u8ba1\u7b97\u7684\u6d3b\u4e00\u4e2a\u6ca1\u5c11,\u8fd8\u8981\u52a0\u4e0a\u6765\u56de\u5207\u6362\u7684\u65f6\u95f4!! \u8fd8\u4e0d\u5982\u4e32\u7740\u6267\u884c\u6548\u7387\u9ad8. import time def func1 (): \"\"\"\u4efb\u52a11:\u63a5\u6536\u6570\u636e,\u5904\u7406\u6570\u636e\"\"\" while True : yield def func2 (): \"\"\"\u4efb\u52a12:\u751f\u4ea7\u6570\u636e\"\"\" g = func1 () for _ in range ( 10000000 ): next ( g ) start = time . time () func2 () stop = time . time () print ( stop - start ) # 1.3778510093688965 \"\"\" next(g)\u5207\u6362\u5230\u4efb\u52a11,\u5f97\u5230\u8fd4\u56de\u503c\u540e\u5207\u6362\u5230\u4efb\u52a12,\u4efb\u52a12\u7ee7\u7eedfor\u5faa\u73af.. \u5c31\u8fd9\u6837\u5728\u4efb\u52a12\u548c\u4efb\u52a11\u4e4b\u95f4\u6765\u56de\u5207\u6362!! \u4efb\u52a12\u548c\u4efb\u52a11\u90fd\u5404\u81ea\u505a\u4e86\u4e00\u5343\u4e07\u6b21. \"\"\" \u4e32\u884c\u6267\u884c \u00b6 import time def func1 (): for _ in range ( 10000000 ): pass def func2 (): for _ in range ( 10000000 ): pass start = time . time () func2 () func1 () stop = time . time () print ( stop - start ) # 0.5637822151184082 yield\u4e0d\u80fd\u76d1\u6d4bIO \u00b6 yield \u5b9e\u73b0\u7684\u534f\u7a0b\u4ee3\u7801 \u9047\u5230io\u4e0d\u4f1a\u5207\u6362,\u4f1a\u7b49\u7740io\u505a\u5b8c\u540e,\u7ee7\u7eed\u8fd0\u884c import time def func1 (): while True : print ( \"func1~\" ) yield def func2 (): g = func1 () for _ in range ( 10000000 ): print ( \"func2~\" ) time . sleep ( 3 ) next ( g ) func2 () \"\"\" \u9047\u5230time.sleep()\u8bed\u53e5,\u4e0d\u4f1a\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u4efb\u52a1,\u800c\u662f\u4f1a\u505c\u5728\u6b64\u5904,\u7b49IO\u505a\u5b8c. \"\"\" gevent\u7684\u4f7f\u7528 \u00b6 pip install gevent -i https://pypi.douban.com/simple spawn\u5f02\u6b65\u63d0\u4ea4 \u00b6 import gevent def eat ( name ): print ( \" %s eat 1\" % name ) gevent . sleep ( 2 ) print ( \" %s eat 2\" % name ) def play ( name ): print ( \" %s play 1\" % name ) gevent . sleep ( 3 ) print ( \" %s play 2\" % name ) # -- gevent.spawn() \u5f02\u6b65\u63d0\u4ea4\u4efb\u52a1 \u8fd4\u56de\u4e00\u4e2aGreenlet\u5bf9\u8c61 g1 = gevent . spawn ( eat , 'egon' ) # -- g1 <Greenlet at 0x7f9d4927d400: eat('egon')> g2 = gevent . spawn ( play , 'dc' ) # -- g2 <Greenlet at 0x7f9d493fb900: play('dc')> \"\"\" g1=gevent.spawn(func,1,,2,3,x=4,y=5)\u521b\u5efa\u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61g1 spawn\u62ec\u53f7\u5185\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u51fd\u6570\u540d,\u5982eat,\u540e\u9762\u53ef\u4ee5\u6709\u591a\u4e2a\u53c2\u6570(\u4f4d\u7f6e\u5b9e\u53c2\u6216\u5173\u952e\u5b57\u5b9e\u53c2),\u90fd\u662f\u4f20\u7ed9\u51fd\u6570eat\u7684. \"\"\" Q: \u4e00\u6267\u884c\u8be5\u6587\u4ef6\u4ee3\u7801,\u63a7\u5236\u53f0\u76f4\u63a5\u663e\u793a\u63d0\u793a\u4fe1\u606f \"\u8fdb\u7a0b\u5df2\u7ed3\u675f,\u9000\u51fa\u4ee3\u78010\" . \u4e5f\u5c31\u662f,eat\u548cplay\u4e24\u4e2a\u4efb\u52a1\u538b\u6839\u6ca1\u8fd0\u884c.\u8fdb\u7a0b\u5c31\u7ed3\u675f\u4e86.\u8fd9\u662f\u600e\u4e48\u4e00\u56de\u4e8b\u5462\uff1f A: \u56e0\u4e3a gevent.spawn() \u662f\u5f02\u6b65\u63d0\u4ea4\u4efb\u52a1\u7684\u65b9\u5f0f.\u63d0\u4ea4\u5b8c\u4efb\u52a1\u540e\u4e0d\u4f1a\u539f\u5730\u7b49\u5f85,\u4f1a\u76f4\u63a5\u8fd0\u884c\u4e0b\u4e00\u884c\u4ee3\u7801. \u8fd9\u91cc\u5f02\u6b65\u63d0\u4ea4\u5b8ceat\u548cplay\u4efb\u52a1\u540e,\u4e3b\u7ebf\u7a0b\u5c31\u7ed3\u675f\u5566.. \u6211\u4eec\u77e5\u9053\u8fdb\u7a0b\u4f1a\u7b49\u6240\u6709\u7684\u7ebf\u7a0b\u7ed3\u675f\u540e\u518d\u7ed3\u675f. \u534f\u7a0b\u662f\u5355\u7ebf\u7a0b, \u4e3b\u7ebf\u7a0b\u7ed3\u675f\u4e86,\u8fdb\u7a0b\u4e5f\u5c31\u7ed3\u675f\u4e86.. \u4f46eat\u548cplay\u4e24\u4e2a\u4efb\u52a1\u8fd8\u6ca1\u6765\u5f97\u53ca\u8d77\u6765!! join\u64cd\u4f5c \u00b6 \u90a3\u5982\u4f55\u662f\u597d?\u4e3b\u8981\u95ee\u9898\u5728\u4e8e\u534f\u7a0b\u662f\u5355\u7ebf\u7a0b,\u4e3b\u7ebf\u7a0b\u4e00\u6b7b,\u8fdb\u7a0b\u4e5f\u5c31\u6b7b\u4e86.. \u5355\u7ebf\u7a0b\u91cc\u7684\u4efb\u52a1\u4e5f\u5c31\u8fd0\u884c\u4e0d\u4e86\u5566. \u90a3\u5c31\u7b49\u4e3b\u7ebf\u7a0b\u91cc\u7684\u4efb\u52a1\u90fd\u8fd0\u884c\u5b8c\u6bd5\u540e,\u518d\u8ba9\u4e3b\u7ebf\u7a0b\u5b89\u8be6\u7684\u6b7b\u53bb..Hhh \u5728\u7a0b\u5e8f\u6700\u540e\u6dfb\u52a0\u4ee3\u7801 gevent.sleep(4) ??? \u4e0d\u59a5, \u4efb\u52a1\u91cc\u7684\u65f6\u95f4\u662f\u6211\u4eec\u6a21\u62df\u7684,\u73b0\u5b9e\u4e2d\u7684IO\u65f6\u95f4\u662f\u4e0d\u786e\u5b9a\u7684. \u6211\u4eec\u5e94\u8be5\u7528join\u64cd\u4f5c\u6765\u89e3\u51b3!! import time import gevent def eat ( name ): print ( \" %s eat 1\" % name ) gevent . sleep ( 2 ) print ( \" %s eat 2\" % name ) def play ( name ): print ( \" %s play 1\" % name ) gevent . sleep ( 3 ) print ( \" %s play 2\" % name ) start = time . time () g1 = gevent . spawn ( eat , 'egon' ) g2 = gevent . spawn ( play , 'dc' ) # gevent.sleep(4) g1 . join () g2 . join () print ( time . time () - start ) # 3.014798164367676 \"\"\" g1.join() g2.join() \u4e0a\u8ff0\u4e24\u884c\u4ee3\u7801\u53ef\u4ee5\u5408\u5e76\u4e3a\u4e00\u6b65 -- gevent.joinall([g1,g2]) Ps: g1.value # -- \u62ff\u5230eat\u7684\u8fd4\u56de\u503c \"\"\" \"\"\" \u9047\u5230IO\u963b\u585e\u65f6\u4f1a\u81ea\u52a8\u5207\u6362\u4efb\u52a1 \u8fd9\u91cc\u53ea\u6709\u4e24\u4e2a\u4efb\u52a1,\u9047\u5230IO\u5c31\u5207,\u6765\u6765\u56de\u56de\u7684\u5207,eat\u7684IO\u5148\u6267\u884c\u5b8c,\u6240\u4ee5\u63a5\u7740\u4f1a\u5148\u6253\u5370\u7684`egon eat 2`. \u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u7684\u8fd0\u884c\u65f6\u95f4\u662f3\u79d2\u591a\u4e00\u70b9\u70b9.\u5982\u679c\u4e24\u4e2a\u4efb\u52a1\u662f\u4e32\u884c\u6267\u884c\u7684\u8bdd,\u7528\u65f6\u4f1a\u662f5\u79d2\u591a\u4e00\u70b9\u70b9. SO,\u534f\u7a0b\u9047\u5230IO\u8fdb\u884c\u5207\u6362,\u7a0b\u5e8f\u7684\u6548\u7387\u5f97\u5230\u4e86\u63d0\u5347! \"\"\" monkey\u8865\u4e01 \u00b6 \u82e5\u5c06eat\u548cplay\u4e24\u4e2a\u4efb\u52a1\u4e2d\u7684gevent.sleep()\u8bed\u53e5\u6539\u6210time.sleep()\u8bed\u53e5,\u5c31\u4e0d\u4f1a\u6709\u9047IO\u5c31\u5207\u6362\u7684\u6548\u679c\u5566! \u770b\u6837\u5b50,gevent\u53ea\u80fd\u5b9e\u73b0\u81ea\u5df1\u901a\u8fc7gevent.sleep()\u8bed\u53e5\u6a21\u62df\u7684IO\u884c\u4e3a,\u5176\u4ed6\u7684IO\u884c\u4e3a\u8bc6\u522b\u4e0d\u4e86.. \u90a3\u6b64\u6a21\u5757\u4e0d\u5c31\u767d\u778e\u5566\uff1fno! \u53ef\u4ee5\u6253\u4e00\u4e2a\u8865\u4e01\u6765\u89e3\u51b3. \u7b80\u5355\u8bb0\u5fc6: \u5c06from gevent import monkey;monkey.patch_all()\u653e\u5230\u6587\u4ef6\u7684\u5f00\u5934!!! \u9a8c\u8bc1\u534f\u7a0b\u662f\u5355\u7ebf\u7a0b \u00b6 \u6211\u4eec\u53ef\u4ee5\u7528threading.current_thread().getName()\u6765\u67e5\u770b\u6bcf\u4e2ag1\u548cg2 \u67e5\u770b\u7684\u7ed3\u679c\u4e3aDummyThread-n,\u5373\u5047\u7ebf\u7a0b from gevent import monkey , spawn monkey . patch_all () from threading import current_thread import time def eat (): print ( \" %s eat 1\" % current_thread () . name ) time . sleep ( 2 ) print ( \" %s eat 2\" % current_thread () . name ) def play (): print ( \" %s play 1\" % current_thread () . name ) time . sleep ( 3 ) print ( \" %s play 2\" % current_thread () . name ) g1 = spawn ( eat ) g2 = spawn ( play ) print ( current_thread () . name ) g1 . join () g2 . join () gevent\u7684\u5e94\u7528 \u00b6 \u901a\u8fc7gevent\u5b9e\u73b0\u5355\u7ebf\u7a0b\u4e0b\u7684socket\u5e76\u53d1 \u6ce8\u610f: from gevent import monkey;monkey.patch_all() \u4e00\u5b9a\u8981\u653e\u5230\u5bfc\u5165socket\u6a21\u5757\u4e4b\u524d,\u5426\u5219gevent\u65e0\u6cd5\u8bc6\u522bsocket\u7684\u963b\u585e Ps: \u5f53\u7136\u53ef\u4ee5\u81ea\u5df1\u8fd0\u7528\u7f51\u7edcIO\u6a21\u578b\u5b9e\u73b0\u534f\u7a0b!! \u6709500\u4e2a\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u7aef\u5efa\u7acb\u8fde\u63a5,\u670d\u52a1\u7aef\u7528\u534f\u7a0b\u80af\u5b9a\u6bd4\u670d\u52a1\u7aef\u5f00\u542f500\u4e2a\u7ebf\u7a0b\u7684\u6548\u7387\u9ad8. \u5ba2\u6237\u7aef \u00b6 # -- \u4ee5\u591a\u7ebf\u7a0b\u7684\u5f62\u5f0f\u6a21\u62df\u591a\u4e2a\u5ba2\u6237\u7aef from socket import * from threading import Thread , current_thread def task (): client = socket ( AF_INET , SOCK_STREAM ) client . connect (( \"127.0.0.1\" , 8080 )) while True : msg = \" %s say hello\" % current_thread () . name client . send ( msg . encode ( 'utf-8' )) data = client . recv ( 1024 ) print ( data . decode ( 'utf-8' )) if __name__ == '__main__' : for i in range ( 500 ): t = Thread ( target = task ) t . start () \u670d\u52a1\u7aef \u00b6 from gevent import monkey , spawn monkey . patch_all () from socket import * def talk ( conn ): while True : try : data = conn . recv ( 1024 ) if len ( data ) == 0 : break conn . send ( data . upper ()) except ConnectionResetError : break conn . close () def server ( ip , port , backlog = 5 ): s = socket ( AF_INET , SOCK_STREAM ) s . bind (( ip , port )) s . listen ( backlog ) while True : conn , addr = s . accept () spawn ( talk , conn ) if __name__ == '__main__' : g = spawn ( server , '127.0.0.1' , 8080 ) g . join () \"\"\" main\u51fd\u6570\u91cc\u7684\u7b2c\u4e00\u884c\u4ee3\u7801\u5f02\u6b65\u63d0\u4ea4\u4e86\u4e00\u4e2a\u4efb\u52a11(\u4efb\u52a12\u5e72\u7684\u662f\u5efa\u8fde\u63a5\u7684\u6d3b),\u4e0d\u7b49\u5f85\u76f4\u63a5\u6267\u884c\u4e0b\u4e00\u884c\u4ee3\u7801`g.join()` \u63a5\u4e0b\u6765\u4f1a\u4f9d\u6b21\u6267\u884cserver\u51fd\u6570\u4f53\u7684\u4ee3\u7801,\u76f4\u5230\u9047\u5230\u4e86accept\u8bed\u53e5\u963b\u585e. gevent\u6a21\u5757\u7acb\u9a6c\u5f00\u59cb\u5c1d\u8bd5\u5207\u6362\u4efb\u52a1,\u4f46\u76ee\u524d\u53ea\u63d0\u4ea4\u4e86\u4e00\u4e2a\u4efb\u52a1.\u5207\u6362\u4e0d\u4e86. \u5f53\u6709\u4e2a\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u7aef\u5efa\u7acb\u4e86\u8fde\u63a5,\u963b\u585e\u7ed3\u675f,\u63a5\u7740\u6267\u884c`spawn(talk, conn)`\u53c8\u5f02\u6b65\u63d0\u4ea4\u4e86\u4e00\u4e2a\u4efb\u52a12 \u63d0\u4ea4\u5b8c\u540e(\u4efb\u52a12\u5e72\u7684\u662f\u901a\u4fe1\u5faa\u73af\u7684\u6d3b),\u56de\u8fc7\u5934(for\u5faa\u73af)\u53c8accept\u963b\u585e\u7b49\u5f85\u5176\u4ed6\u5ba2\u6237\u7aef\u5efa\u7acb\u8fde\u63a5. \u540c\u6837\u7684,\u6b64\u65f6\u9047\u5230\u963b\u585e,gevent\u6a21\u5757\u4f9d\u65e7\u4f1a\u5c1d\u8bd5\u5207\u6362\u4efb\u52a1. \u6b64\u65f6\u4f1a\u5207\u6362\u5230\u4efb\u52a12\u7684\u6267\u884c,\u4efb\u52a12\u4e2drecv\u4e5f\u4f1a\u963b\u585e\u4f4f\u7b49\u5f85\u5bf9\u5e94\u5ba2\u6237\u7aef\u7684\u6d88\u606f. \u63a5\u7740\u5207\u6362\u4efb\u52a1,\u82e5\u4efb\u52a11\u4efb\u52a12\u90fd\u963b\u585e,\u4f1a\u5728\u4efb\u52a11\u4efb\u52a12\u4e4b\u95f4\u6765\u56de\u5207\u6765\u56de\u5207 \u76f4\u5230\u6709\u65b0\u7684\u5ba2\u6237\u7aef\u8fde\u63a5\u8fdb\u6765\u6216\u8005\u6536\u5230\u65b0\u6d88\u606f.. \u4ee5\u6b64\u5faa\u73af,\u5f53\u670d\u52a1\u7aef\u8fde\u63a5\u7684\u5ba2\u6237\u7aef\u8d8a\u6765\u8d8a\u6765\u591a,\u534f\u7a0b\u4e2d\u7684\u4efb\u52a1\u6570\u4f1a\u8d8a\u6765\u8d8a\u591a(\u603b\u4efb\u52a1\u6570 = \u8fde\u63a5\u5ba2\u6237\u7aef\u6570 + 1) <\u63d0\u4ea4\u4e00\u4e2a\u4efb\u52a1\u4f1a\u5efa\u7acb\u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61,\u5bf9\u5e94\u4e00\u4e2a\u4efb\u52a1,\u4f46\u5f52\u6839\u5230\u5e95,\u771f\u6b63\u5b58\u5728\u7684\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b> \u5c31\u8fd9\u6837.\u534f\u7a0b\u5b9e\u73b0\u4e86\u591a\u4e2a\u4efb\u52a1\u7684\u5e76\u53d1!(\u5207\u7684\u901f\u5ea6\u5f88\u5feb!) \"\"\" \u534f\u7a0b\u7684\u5176\u5b83\u5e94\u7528\u4e3e\u4f8b: https://www.cnblogs.com/linhaifeng/articles/7429894.html#_label6 \u6d45\u8c08\u4e00\u4e0bnginx. nginx\u5957\u63a5\u5b57\u670d\u52a1\u7aef\u8f6f\u4ef6 -- \u8d1f\u8d23\u63a5\u6536\u6d4f\u89c8\u5668\u8bf7\u6c42 . \u7b80\u5355\u6765\u8bf4 , nginx\u5c06\u673a\u5668\u4e0a\u7684\u672c\u5730\u6587\u4ef6\u6253\u5f00 , \u5c06\u5185\u5bb9\u8bfb\u51fa\u6765\u53d1\u7ed9\u5ba2\u6237\u7aef . \u5c31\u662f\u4e00\u4e2a\u4e0b\u8f7d\u7684\u8fc7\u7a0b . nginx\u7684\u6548\u7387\u9ad8 , \u5b83\u7ed3\u5408\u4e86\u591a\u8fdb\u7a0b\u591a\u7ebf\u7a0b\u534f\u7a0b . ( \u5e95\u5c42\u7528C\u8bed\u8a00\u5199\u7684 ) \u5927\u4f53\u662f\u8fd9\u6837\u505a\u7684 , \u6709\u51e0\u4e2acpu\u5c31\u4f1a\u5148\u5f00\u51e0\u4e2a\u8fdb\u7a0b , \u4fdd\u8bc1\u6bcf\u4e2acpu\u90fd\u7528\u4e0a\u4e86 . \u6bcf\u4e2a\u8fdb\u7a0b\u5185\u53c8\u5f00\u4e86\u4e00\u5806\u7ebf\u7a0b , \u6bcf\u4e2a\u7ebf\u7a0b\u5185\u5b9e\u73b0\u4e86\u9047\u5230IO\u5c31\u5207\u6362\u7684\u534f\u7a0b .. \u628a\u5355\u4e2a\u7ebf\u7a0b\u7684IO\u964d\u5230\u6700\u4f4e , \u4fdd\u8bc1\u5355\u4e2a\u7ebf\u7a0b\u7684\u6548\u7387\u662f\u6700\u9ad8\u7684 !! \u6240\u4ee5nginx\u652f\u6301\u7684\u5e76\u53d1\u6570\u9ad8 !!","title":"\u534f\u7a0b"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/12_%E5%8D%8F%E7%A8%8B/#_1","text":"\u56de\u987e\u4e0b\u4efb\u52a1\u7684\u4e09\u79cd\u8fd0\u884c\u72b6\u6001.(\u963b\u585e\u3001\u975e\u963b\u585e) \u963b\u585e: IO\u963b\u585e \u975e\u963b\u585e: \u8fd0\u884c \u6216 \u5c31\u7eea. Ps: \u4e0a\u8ff0\u662f\u5728\u4ecb\u7ecd\u8fdb\u7a0b\u7406\u8bba\u65f6\u63d0\u53ca\u8fdb\u7a0b\u7684\u4e09\u79cd\u6267\u884c\u72b6\u6001. \u4f46\u8981\u77e5\u9053 \u7ebf\u7a0b\u624d\u662f\u6267\u884c\u5355\u4f4d, \u6240\u4ee5\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u7ebf\u7a0b\u7684\u4e09\u79cd\u72b6\u6001 cpu\u6b63\u5728\u8fd0\u884c\u4e00\u4e2a\u4efb\u52a1,\u4f1a\u5728\u4e24\u79cd\u60c5\u51b5\u4e0b\u5207\u8d70\u53bb\u6267\u884c\u5176\u4ed6\u7684\u4efb\u52a1 (\u6ce8\u610f! cpu\u5207\u6362\u4efb\u52a1\u6267\u884c\u8fd9\u4e00\u64cd\u4f5c\u662f\u7531 \u64cd\u4f5c\u7cfb\u7edf \u6765\u5f3a\u5236\u63a7\u5236\u7684) 1> \u4e00\u79cd\u60c5\u51b5\u662f\u8be5\u4efb\u52a1\u53d1\u751f\u4e86\u963b\u585e 2> \u53e6\u5916\u4e00\u79cd\u60c5\u51b5\u662f\u8be5\u4efb\u52a1\u8ba1\u7b97\u7684\u65f6\u95f4\u8fc7\u957f\u6216\u6709\u4e00\u4e2a\u4f18\u5148\u7ea7\u66f4\u9ad8\u7684\u7a0b\u5e8f\u66ff\u4ee3\u4e86\u5b83 \u7b2c\u4e00\u79cd\u60c5\u51b5 \u7684\u5207\u6362. \u5728\u4efb\u52a1\u4e00\u9047\u5230io\u60c5\u51b5\u4e0b\u5207\u5230\u4efb\u52a1\u4e8c\u53bb\u6267\u884c \u8fd9\u6837\u5c31\u53ef\u4ee5\u5229\u7528\u4efb\u52a1\u4e00\u963b\u585e\u7684\u65f6\u95f4\u5b8c\u6210\u4efb\u52a1\u4e8c\u7684\u8ba1\u7b97,\u6548\u7387\u7684\u63d0\u5347\u5c31\u5728\u4e8e\u6b64 \u7b2c\u4e8c\u79cd\u60c5\u51b5 \u5e76\u4e0d\u80fd\u63d0\u5347\u6548\u7387,\u53ea\u662f\u4e3a\u4e86\u8ba9cpu\u80fd\u591f\u96e8\u9732\u5747\u6cbe,\u5b9e\u73b0\u770b\u8d77\u6765\u6240\u6709\u4efb\u52a1\u90fd\u88ab\u201c\u540c\u65f6\u201d\u6267\u884c\u7684\u6548\u679c; \u82e5\u591a\u4e2a\u4efb\u52a1\u90fd\u662f\u7eaf\u8ba1\u7b97\u7684,(\u7b2c\u4e8c\u79cd\u60c5\u51b5)\u8fd9\u79cd\u5207\u6362\u53cd\u800c\u4f1a\u964d\u4f4e\u6548\u7387.","title":"\u8fd0\u884c\u72b6\u6001"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/12_%E5%8D%8F%E7%A8%8B/#_2","text":"\u672c\u8282\u7684\u4e3b\u9898\u662f \u57fa\u4e8e\u5355\u7ebf\u7a0b\u6765\u5b9e\u73b0\u5e76\u53d1, \u5373\u53ea\u7528\u4e00\u4e2a\u4e3b\u7ebf\u7a0b (\u5f88\u660e\u663e\u53ef\u5229\u7528\u7684cpu\u53ea\u6709\u4e00\u4e2a) \u60c5\u51b5\u4e0b\u5b9e\u73b0\u5e76\u53d1 \u6ce8\u610f\u54e6,\u5728OS\u770b\u6765,\u534f\u7a0b\u5c31\u662f\u4e00\u4e2a\u5355\u7ebf\u7a0b. \u5728\u64cd\u4f5c\u7cfb\u7edf\u8fd9\u95e8\u8bfe\u4e2d,\u53ea\u6709\u8fdb\u7a0b\u3001\u7ebf\u7a0b\u8fd9\u4e24\u4e2a\u6982\u5ff5,\u534f\u7a0b\u662f\u7a0b\u5e8f\u5458\u60f3\u51fa\u6765\u7684\u4e00\u4e2a\u4e1c\u897f.Hhh","title":"\u534f\u7a0b"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/12_%E5%8D%8F%E7%A8%8B/#_3","text":"","title":"\u534f\u7a0b\u4ecb\u7ecd"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/12_%E5%8D%8F%E7%A8%8B/#_4","text":"\u534f\u7a0b: \u662f\u5355\u7ebf\u7a0b\u4e0b\u7684\u5e76\u53d1, \u53c8\u79f0\u5fae\u7ebf\u7a0b\u3001\u7ea4\u7a0b. \u82f1\u6587\u540dCoroutine. \u4e00\u53e5\u8bdd\u8bf4\u660e\u4ec0\u4e48\u662f\u534f\u7a0b: \u534f\u7a0b\u662f\u4e00\u79cd\u7528\u6237\u6001\u7684\u8f7b\u91cf\u7ea7\u7ebf\u7a0b, \u5373\u534f\u7a0b\u662f\u7531\u7528\u6237\u7a0b\u5e8f\u81ea\u5df1\u63a7\u5236\u8c03\u5ea6\u7684. \u518d\u6362\u4e2a\u8bf4\u6cd5 -- \u534f\u7a0b\u6307\u7684\u662f\u5355\u7ebf\u7a0b\u4e0b\u7531\u5e94\u7528\u7a0b\u5e8f\u7ea7\u522b\u5b9e\u73b0\u7684\u5e76\u53d1. \u5373\u628a\u672c\u6765\u7531\u64cd\u4f5c\u7cfb\u7edf\u63a7\u5236\u7684\u5207\u6362+\u4fdd\u5b58\u72b6\u6001,\u5728\u5e94\u7528\u7a0b\u5e8f\u91cc\u5b9e\u73b0\u4e86! \u7528\u534f\u7a0b\u7684\u76ee\u7684\u5728\u4e8e: \u628a\u5355\u4e2a\u7ebf\u7a0b\u7684io\u964d\u5230\u6700\u4f4e, \u6700\u5927\u9650\u5ea6\u7684\u63d0\u5347\u5355\u4e2a\u7ebf\u7a0b\u7684\u6267\u884c\u6548\u7387! \u5bf9\u4e8e\u5355\u7ebf\u7a0b\u4e0b, \u6211\u4eec\u4e0d\u53ef\u907f\u514d\u7a0b\u5e8f\u4e2d\u51fa\u73b0io\u64cd\u4f5c, \u4f46\u5982\u679c\u6211\u4eec\u80fd\u5728\u81ea\u5df1\u7684\u7a0b\u5e8f\u4e2d\uff08\u5373\u7528\u6237\u7a0b\u5e8f\u7ea7\u522b\u800c\u975e\u64cd\u4f5c\u7cfb\u7edf\u7ea7\u522b\uff09\u63a7\u5236\u5355\u7ebf\u7a0b\u4e0b\u7684\u591a\u4e2a\u4efb\u52a1\u80fd\u5728\u4e00\u4e2a\u4efb\u52a1\u9047\u5230io\u963b\u585e\u65f6\u5c31\u5207\u6362\u5230\u53e6\u5916\u4e00\u4e2a\u4efb\u52a1\u53bb\u8ba1\u7b97, \u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u8be5\u7ebf\u7a0b\u80fd\u591f\u6700\u5927\u9650\u5ea6\u5730\u5904\u4e8e\u5c31\u7eea\u6001, \u5373\u968f\u65f6\u90fd\u53ef\u4ee5\u88abcpu\u6267\u884c\u7684\u72b6\u6001, \u76f8\u5f53\u4e8e\u6211\u4eec\u5728\u7528\u6237\u7a0b\u5e8f\u7ea7\u522b\u5c06\u81ea\u5df1\u7684io\u64cd\u4f5c\u6700\u5927\u9650\u5ea6\u5730\u9690\u85cf\u8d77\u6765, \u4ece\u800c\u53ef\u4ee5\u8ff7\u60d1\u64cd\u4f5c\u7cfb\u7edf, \u8ba9\u5176\u770b\u5230: \u8be5\u7ebf\u7a0b\u597d\u50cf\u662f\u4e00\u76f4\u5728\u8ba1\u7b97, io\u6bd4\u8f83\u5c11, \u4ece\u800c\u66f4\u591a\u7684\u5c06cpu\u7684\u6267\u884c\u6743\u9650\u5206\u914d\u7ed9\u6211\u4eec\u7684\u7ebf\u7a0b!!! \u90a3\u5982\u4f55\u529e\u5230\u5462\uff1f\u534f\u7a0b\u5c31\u4e0d\u5f97\u4e0d\u95ea\u4eae\u767b\u573a\u5566!! (\u204e\u204d\u0334\u031b\u1d17\u204d\u0334\u031b\u204e) \u6211\u4eec\u5148\u6765\u56de\u60f3\u4e00\u4e0b\u5e76\u53d1\u7684\u672c\u8d28: \u5207\u6362 + \u4fdd\u5b58\u72b6\u6001 OS\u63a7\u5236cpu\u5207\u6362\u7ebf\u7a0b, cpu\u6765\u56de\u6267\u884c\u4e0d\u540c\u7ebf\u7a0b\u5bf9\u5e94\u7684\u4efb\u52a1 \u6362\u4e00\u4e2a\u8bf4\u6cd5,\u5728\u672a\u5b66\u4e60\u534f\u7a0b\u4e4b\u524d,\u6211\u4eec\u7684\u8ba4\u77e5\u91cc,\u4e00\u4e2a\u7ebf\u7a0b\u5bf9\u5e94\u7740\u4e00\u4e2a\u4efb\u52a1(\u5c31\u662f\u4e00\u6bb5\u51fd\u6570\u4ee3\u7801), OS\u63a7\u5236\u7740cpu\u5728\u8fd9\u591a\u4e2a\u7ebf\u7a0b\u4e4b\u95f4\u6765\u56de\u5207\u6362, \u5373cpu\u4e0d\u505c\u7684\u6765\u56de\u8fd0\u7b97 \u591a\u4e2a\u7ebf\u7a0b \u4e0a\u7684 \u5bf9\u5e94\u7684\u4efb\u52a1/\u5bf9\u5e94\u7684\u51fd\u6570\u4ee3\u7801.. \u5e76\u53d1\u7684\u5b9e\u73b0\u65b9\u6848: \u591a\u8fdb\u7a0b\u3001\u591a\u7ebf\u7a0b -- \u672c\u8d28\u90fd\u662f\u5728\u7ebf\u7a0b\u4e4b\u95f4\u6765\u56de\u5207\u6362(\u56e0\u4e3a\u7ebf\u7a0b\u624d\u662fcpu\u4e0a\u7684\u6267\u884c\u5355\u4f4d) \u534f\u7a0b\u4e5f\u5b9e\u73b0\u4e86\u5e76\u53d1, \u53ea\u4e0d\u8fc7\u5b83\u662f\u5728 \u5355\u7ebf\u7a0b \u4e0b, \u7531 \u7528\u6237/\u5e94\u7528\u7a0b\u5e8f \u81ea\u5df1\u63a7\u5236\u4e00\u4e2a\u4efb\u52a1\u9047\u5230io\u963b\u585e\u4e86\u5c31\u5207\u6362\u53e6\u5916\u4e00\u4e2a\u4efb\u52a1\u53bb\u6267\u884c( \u7b80\u5355\u7406\u89e3,\u5c31\u662f\u628a\u4e0d\u540c\u4efb\u52a1\u5bf9\u5e94\u7684\u4ee3\u7801\u5f80\u7ebf\u7a0b\u6240\u5728\u7684\u8fdb\u7a0b\u91cc\u653e,\u7136\u540e\u6267\u884c ), \u4ee5\u6b64\u6765\u63d0\u5347\u6548\u7387. \u5373 \u8ba9OS\u5206\u914d\u66f4\u591a\u7684CPU\u65f6\u95f4\u7247\u7ed9\u8be5\u5355\u7ebf\u7a0b!! \u5355\u7ebf\u7a0b\u4e0b\u4e09\u4e2a\u4efb\u52a1 , \u6bcf\u4e2a\u4efb\u52a1\u90fd\u662f3s\u7684IO\u65f6\u95f4 . \u8ba1\u7b97\u548c\u5207\u6362\u65f6\u95f4\u5ffd\u7565\u4e0d\u8ba1 . 1 > \u8fd9\u4e09\u4e2a\u4efb\u52a1\u5728\u4e00\u4e2a\u7ebf\u7a0b\u91cc\u5c31\u662f\u4e32\u7740\u6765\u7684 ( \u9047\u5230IO\u4e86 , OS\u5c06cpu\u5207\u7ed9\u8c01\u5462 \uff1f \u8fd8\u4e0d\u662f\u5f97\u7b49\u8be5\u7ebf\u7a0bIO\u505a\u5b8c ), \u5219\u9700\u89819s\u7684\u65f6\u95f4 . 2 > \u5047\u5982\u5728\u5e94\u7528\u7a0b\u5e8f\u91cc\u63a7\u5236\u4efb\u52a1\u7684\u5207\u6362 , \u5728\u8fd9\u671f\u95f4 , CPU\u4e00\u76f4\u5728\u8ba1\u7b97\u8be5\u5355\u7ebf\u7a0b\u4e0a\u7684\u4efb\u52a1 . \u5f53\u8be5\u7ebf\u7a0b\u9047\u5230IO\u5c31\u5207\u6362\u8be5\u7ebf\u7a0b\u6267\u884c\u7684\u4efb\u52a1 ( \u505aIO\u5c31\u662f\u8c03\u7528\u4e0b\u7cfb\u7edf\u63a5\u53e3 ) . \u5f53IO\u505a\u5b8c , \u5355\u7ebf\u7a0b\u4e5f\u5c06\u4e09\u4e2a\u4efb\u52a1\u90fd\u505a\u5b8c\u4e86 . \u9700\u89813s .","title":"\u6982\u5ff5"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/12_%E5%8D%8F%E7%A8%8B/#_5","text":"OS\u63a7\u5236cpu\u5bf9\u7ebf\u7a0b\u7684\u5207\u6362; \u5e94\u7528\u7a0b\u5e8f\u81ea\u5df1\u63a7\u5236\u7ebf\u7a0b\u91cc\u591a\u4e2a\u4efb\u52a1\u7684\u5207\u6362 \u5373OS\u5207\u6362\u7684\u5355\u4f4d\u662f\u7ebf\u7a0b,\u534f\u7a0b\u5207\u6362\u7684\u5355\u4f4d\u662f\u7ebf\u7a0b\u5185\u7684\u4efb\u52a1.. python\u7684\u7ebf\u7a0b\u5c5e\u4e8e \u5185\u6838\u7ea7\u522b \u7684, \u5373\u7531\u64cd\u4f5c\u7cfb\u7edf\u63a7\u5236\u8c03\u5ea6 (\u5982\u5355\u7ebf\u7a0b\u9047\u5230io\u6216\u6267\u884c\u65f6\u95f4\u8fc7\u957f\u5c31\u4f1a\u88ab\u8feb\u4ea4\u51facpu\u6267\u884c\u6743\u9650,\u5207\u6362\u5176\u4ed6\u7ebf\u7a0b\u8fd0\u884c) \u5355\u7ebf\u7a0b\u5185\u5f00\u542f\u534f\u7a0b, \u4e00\u65e6\u9047\u5230io, \u5c31\u4f1a\u4ece \u5e94\u7528\u7a0b\u5e8f\u7ea7\u522b (\u800c\u975e\u64cd\u4f5c\u7cfb\u7edf) \u63a7\u5236\u5207\u6362, \u4ee5\u6b64\u6765\u63d0\u5347\u6548\u7387 (! ! !\u975eio\u64cd\u4f5c\u7684\u5207\u6362\u4e0e\u6548\u7387\u65e0\u5173)","title":"\u7279\u522b\u5f3a\u8c03"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/12_%E5%8D%8F%E7%A8%8B/#_6","text":"\u5bf9\u6bd4\u64cd\u4f5c\u7cfb\u7edf\u63a7\u5236\u7ebf\u7a0b\u7684\u5207\u6362, \u7528\u6237\u5728\u5355\u7ebf\u7a0b\u5185\u63a7\u5236\u534f\u7a0b\u7684\u5207\u6362,\u4f18\u7f3a\u70b9\u5982\u4e0b: [\u4f18\u70b9] \u5e94\u7528\u7a0b\u5e8f\u7ea7\u522b\u7684\u5207\u6362\u901f\u5ea6\u8981 \u8fdc\u8fdc\u9ad8\u4e8e \u64cd\u4f5c\u7cfb\u7edf\u7684\u5207\u6362. \u56e0\u4e3aOS\u7ba1\u63a7\u7684\u53ef\u4e0d\u4ec5\u4ec5\u53ea\u662f\u5e94\u7528\u7a0b\u5e8f\u91cc\u7684\u90a3\u51e0\u4e2a\u4efb\u52a1 [\u7f3a\u70b9] \u591a\u4e2a\u4efb\u52a1\u4e00\u65e6\u6709\u4e00\u4e2a\u963b\u585e\u6ca1\u6709\u5207,\u6574\u4e2a\u7ebf\u7a0b\u90fd\u963b\u585e\u5728\u539f\u5730!!! \u8be5\u7ebf\u7a0b\u5185\u7684\u5176\u5b83\u7684\u4efb\u52a1\u90fd\u4e0d\u80fd\u6267\u884c\u5566!\u5c31\u6ca1\u4e86\u5e76\u53d1\u4e00\u8bf4\u5566. \u4e00\u65e6\u5f15\u5165\u534f\u7a0b,\u5c31\u9700\u8981\u76d1\u6d4b\u5355\u7ebf\u7a0b\u4e0b\u6240\u6709\u7684IO\u884c\u4e3a,\u5b9e\u73b0\u9047\u5230IO\u5c31\u5207\u6362! \u2605 os\u53ea\u4f1a\u5206\u914d\u7ed9\u5355\u7ebf\u7a0b\u4e00\u4e2acpu / \u6838 . \u6240\u4ee5\u5355\u7ebf\u7a0b\u4e0d\u80fd\u5b9e\u73b0\u5e76\u884c . \u2605 \u591a\u7ebf\u7a0b\u548c\u5355\u7ebf\u7a0b \u5b9e\u73b0\u7684\u5e76\u53d1 \u540c\u4e00\u65f6\u523b\u90fd\u53ea\u6709\u4e00\u4e2a\u4efb\u52a1\u5728\u8fd0\u884c . \u5047\u8bbecpu\u67093\u4e2a\u6838 - \u591a\u8fdb\u7a0b\u53ef\u4ee5\u5229\u7528\u591a\u6838 , \u5047\u8bbe\u5f00\u4e863\u4e2a\u8fdb\u7a0b , \u540c\u4e00\u65f6\u95f4\u53ef\u4ee5\u67093\u4e2a\u4efb\u52a1\u5728\u8fd0\u884c ( 3 \u4e2a\u4efb\u52a1\u5e76\u884c ) \u82e5\u5176\u4e2d\u4e00\u4e2a\u4efb\u52a1\u963b\u585e\u4e86 , \u5176\u5b83\u6838\u4e0a\u7684\u4efb\u52a1 / \u8fdb\u7a0b\u4e0d\u53d7\u5f71\u54cd , \u7ee7\u7eed\u8fd0\u884c . - \u82e5\u662f\u591a\u7ebf\u7a0b\u5462 \uff1f \u591a\u7ebf\u7a0b\u53ea\u80fd\u5b9e\u73b0\u5e76\u53d1 , \u540c\u4e00\u65f6\u95f4\u53ea\u6709\u4e00\u4e2a\u5728\u8fd0\u884c \u82e5\u5176\u4e2d\u4e00\u4e2a\u4efb\u52a1\u963b\u585e\u4e86 , OS\u4f1a\u8c03\u5ea6\u5207\u6362cpu\u6267\u884c\u7684\u7ebf\u7a0b , \u4e5f\u4e0d\u4f1a\u5f71\u54cd\u5176\u4ed6\u4efb\u52a1 / \u7ebf\u7a0b\u7ee7\u7eed\u8fd0\u884c . - \u90a3\u534f\u7a0b\u5462 \uff1f \u534f\u7a0b\u610f\u5473\u7740\u662f\u5355\u7ebf\u7a0b , \u4e00\u65e6\u4e00\u4e2a\u4efb\u52a1\u9047\u5230IO\u4e86 , \u5e94\u7528\u7a0b\u5e8f\u5e94\u8be5\u7acb\u9a6c\u5c06\u7ebf\u7a0b\u5bf9\u5e94\u7684\u4efb\u52a1\u5207\u6362\u5230\u53e6\u5916\u4e00\u4e2a . \u82e5\u963b\u5728\u539f\u5730\u4e86 , \u5e94\u7528\u7a0b\u5e8f\u6ca1\u6709\u5207 , \u4f1a\u5bfc\u81f4\u5176\u5b83\u4efb\u52a1\u90fd\u4e0d\u80fd\u8fd0\u884c , \u5168\u7b49\u5f85 . \u6240\u4ee5\u7528\u534f\u7a0b\u8981\u614e\u91cd , \u6240\u6709IO\u90fd\u4e0d\u80fd\u8ba9\u4ed6\u963b\u5728\u539f\u5730 , \u90fd\u9700\u8981\u5b8c\u6210\u5207\u6362 , \u4e00\u65e6\u7528\u4e86\u534f\u7a0b , \u5c31\u6ca1\u6709\u4e86\u56de\u5934\u8def !! \u4ee5\u4e0a\u5c31\u662f\u5bf9 \u4e0a\u65b9 \u201c \u7279\u522b\u5f3a\u8c03 \u201d \u7684\u4e00\u4e2a\u8865\u5145\u89e3\u91ca .. \u7cbe\u9ad3\u5728\u4e8e\u5207\u6362\u662f\u8c01\u5728\u5f04 , \u662fOS\u8fd8\u662f\u5e94\u7528\u7a0b\u5e8f !","title":"\u4f18\u7f3a\u70b9"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/12_%E5%8D%8F%E7%A8%8B/#_7","text":"\u4ece\u4e0a\u9762\u7684\u4ecb\u7ecd\u4e2d\u63d0\u53d6\u4e24\u4e2a\u5173\u952e\u5b57,\u5206\u6790\u5f97\u51fa\u8981\u7528\u4ee3\u7801\u5b9e\u73b0 \u6709\u610f\u4e49\u7684 \u534f\u7a0b,\u9700\u8981\u6ee1\u8db3\u7684\u4e24\u4e2a\u6761\u4ef6. 1> \u5e76\u53d1 -- \u53ef\u4ee5\u63a7\u5236\u591a\u4e2a\u4efb\u52a1\u4e4b\u95f4\u7684\u5207\u6362, \u5207\u6362\u4e4b\u524d\u5c06\u4efb\u52a1\u7684\u72b6\u6001\u4fdd\u5b58\u4e0b\u6765, \u4ee5\u4fbf\u91cd\u65b0\u8fd0\u884c\u65f6\u53ef\u4ee5\u57fa\u4e8e\u6682\u505c\u7684\u4f4d\u7f6e\u7ee7\u7eed\u6267\u884c. 2> \u63d0\u9ad8\u6548\u7387 -- \u53ef\u4ee5\u68c0\u6d4bio\u64cd\u4f5c, \u5728\u9047\u5230io\u64cd\u4f5c\u7684\u60c5\u51b5\u4e0b\u624d\u53d1\u751f\u5207\u6362! \u9047\u5230IO\u5207\u624d\u80fd\u63d0\u9ad8\u5355\u7ebf\u7a0b\u7684\u6267\u884c\u6548\u7387! \u534f\u7a0b\u4f1a\u63d0\u9ad8\u7a0b\u5e8f\u7684\u6548\u7387 . ( X ) -- \u8fd9\u662f\u4e00\u4e2a\u9519\u8bef\u7684\u8bf4\u6cd5 . \u76d1\u6d4b\u5355\u7ebf\u7a0b\u4e0b\u7684\u591a\u4e2a\u4efb\u52a1 , \u5f53\u5355\u7ebf\u7a0b\u4e0b\u9047\u5230IO\u624d\u5207\u6362\u5230\u53e6\u5916\u4e00\u4e2a\u4efb\u52a1 . \u5207\u4e4b\u524d\u4fdd\u5b58\u72b6\u6001 . \u8fd9\u624d\u662f\u5355\u7ebf\u7a0b\u4e0b\u63d0\u9ad8\u6548\u7387\u7684\u5e76\u53d1 .","title":"\u4e24\u4e2a\u6761\u4ef6"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/12_%E5%8D%8F%E7%A8%8B/#yield","text":"yield\u662f\u4e00\u79cd\u53ef\u4ee5\u5728\u5355\u7ebf\u7a0b\u4e0b\u6765\u56de\u5207\u6362\u4efb\u52a1,\u5e76\u4e14\u53ef\u4ee5\u4fdd\u5b58\u4efb\u52a1\u8fd0\u884c\u72b6\u6001\u7684\u65b9\u6cd5 \u4f46\u662f\u56e0\u4e3ayield\u4e0d\u80fd\u68c0\u6d4bio\u64cd\u4f5c,\u6240\u4ee5\u901a\u8fc7yield\u5b9e\u73b0\u7684\u534f\u7a0b\u4e0d\u80fd\u63d0\u9ad8\u6548\u7387,\u662f\u6ca1\u6709\u610f\u4e49\u7684\u534f\u7a0b\uff01","title":"yield\u5b9e\u73b0\u534f\u7a0b"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/12_%E5%8D%8F%E7%A8%8B/#yield_1","text":"\u6267\u884c\u4ee3\u7801\u8be5\u8ba1\u7b97\u7684\u6d3b\u4e00\u4e2a\u6ca1\u5c11,\u8fd8\u8981\u52a0\u4e0a\u6765\u56de\u5207\u6362\u7684\u65f6\u95f4!! \u8fd8\u4e0d\u5982\u4e32\u7740\u6267\u884c\u6548\u7387\u9ad8. import time def func1 (): \"\"\"\u4efb\u52a11:\u63a5\u6536\u6570\u636e,\u5904\u7406\u6570\u636e\"\"\" while True : yield def func2 (): \"\"\"\u4efb\u52a12:\u751f\u4ea7\u6570\u636e\"\"\" g = func1 () for _ in range ( 10000000 ): next ( g ) start = time . time () func2 () stop = time . time () print ( stop - start ) # 1.3778510093688965 \"\"\" next(g)\u5207\u6362\u5230\u4efb\u52a11,\u5f97\u5230\u8fd4\u56de\u503c\u540e\u5207\u6362\u5230\u4efb\u52a12,\u4efb\u52a12\u7ee7\u7eedfor\u5faa\u73af.. \u5c31\u8fd9\u6837\u5728\u4efb\u52a12\u548c\u4efb\u52a11\u4e4b\u95f4\u6765\u56de\u5207\u6362!! \u4efb\u52a12\u548c\u4efb\u52a11\u90fd\u5404\u81ea\u505a\u4e86\u4e00\u5343\u4e07\u6b21. \"\"\"","title":"\u57fa\u4e8eyield\u5e76\u53d1\u6267\u884c"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/12_%E5%8D%8F%E7%A8%8B/#_8","text":"import time def func1 (): for _ in range ( 10000000 ): pass def func2 (): for _ in range ( 10000000 ): pass start = time . time () func2 () func1 () stop = time . time () print ( stop - start ) # 0.5637822151184082","title":"\u4e32\u884c\u6267\u884c"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/12_%E5%8D%8F%E7%A8%8B/#yieldio","text":"yield \u5b9e\u73b0\u7684\u534f\u7a0b\u4ee3\u7801 \u9047\u5230io\u4e0d\u4f1a\u5207\u6362,\u4f1a\u7b49\u7740io\u505a\u5b8c\u540e,\u7ee7\u7eed\u8fd0\u884c import time def func1 (): while True : print ( \"func1~\" ) yield def func2 (): g = func1 () for _ in range ( 10000000 ): print ( \"func2~\" ) time . sleep ( 3 ) next ( g ) func2 () \"\"\" \u9047\u5230time.sleep()\u8bed\u53e5,\u4e0d\u4f1a\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u4efb\u52a1,\u800c\u662f\u4f1a\u505c\u5728\u6b64\u5904,\u7b49IO\u505a\u5b8c. \"\"\"","title":"yield\u4e0d\u80fd\u76d1\u6d4bIO"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/12_%E5%8D%8F%E7%A8%8B/#gevent","text":"pip install gevent -i https://pypi.douban.com/simple","title":"gevent\u7684\u4f7f\u7528"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/12_%E5%8D%8F%E7%A8%8B/#spawn","text":"import gevent def eat ( name ): print ( \" %s eat 1\" % name ) gevent . sleep ( 2 ) print ( \" %s eat 2\" % name ) def play ( name ): print ( \" %s play 1\" % name ) gevent . sleep ( 3 ) print ( \" %s play 2\" % name ) # -- gevent.spawn() \u5f02\u6b65\u63d0\u4ea4\u4efb\u52a1 \u8fd4\u56de\u4e00\u4e2aGreenlet\u5bf9\u8c61 g1 = gevent . spawn ( eat , 'egon' ) # -- g1 <Greenlet at 0x7f9d4927d400: eat('egon')> g2 = gevent . spawn ( play , 'dc' ) # -- g2 <Greenlet at 0x7f9d493fb900: play('dc')> \"\"\" g1=gevent.spawn(func,1,,2,3,x=4,y=5)\u521b\u5efa\u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61g1 spawn\u62ec\u53f7\u5185\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u51fd\u6570\u540d,\u5982eat,\u540e\u9762\u53ef\u4ee5\u6709\u591a\u4e2a\u53c2\u6570(\u4f4d\u7f6e\u5b9e\u53c2\u6216\u5173\u952e\u5b57\u5b9e\u53c2),\u90fd\u662f\u4f20\u7ed9\u51fd\u6570eat\u7684. \"\"\" Q: \u4e00\u6267\u884c\u8be5\u6587\u4ef6\u4ee3\u7801,\u63a7\u5236\u53f0\u76f4\u63a5\u663e\u793a\u63d0\u793a\u4fe1\u606f \"\u8fdb\u7a0b\u5df2\u7ed3\u675f,\u9000\u51fa\u4ee3\u78010\" . \u4e5f\u5c31\u662f,eat\u548cplay\u4e24\u4e2a\u4efb\u52a1\u538b\u6839\u6ca1\u8fd0\u884c.\u8fdb\u7a0b\u5c31\u7ed3\u675f\u4e86.\u8fd9\u662f\u600e\u4e48\u4e00\u56de\u4e8b\u5462\uff1f A: \u56e0\u4e3a gevent.spawn() \u662f\u5f02\u6b65\u63d0\u4ea4\u4efb\u52a1\u7684\u65b9\u5f0f.\u63d0\u4ea4\u5b8c\u4efb\u52a1\u540e\u4e0d\u4f1a\u539f\u5730\u7b49\u5f85,\u4f1a\u76f4\u63a5\u8fd0\u884c\u4e0b\u4e00\u884c\u4ee3\u7801. \u8fd9\u91cc\u5f02\u6b65\u63d0\u4ea4\u5b8ceat\u548cplay\u4efb\u52a1\u540e,\u4e3b\u7ebf\u7a0b\u5c31\u7ed3\u675f\u5566.. \u6211\u4eec\u77e5\u9053\u8fdb\u7a0b\u4f1a\u7b49\u6240\u6709\u7684\u7ebf\u7a0b\u7ed3\u675f\u540e\u518d\u7ed3\u675f. \u534f\u7a0b\u662f\u5355\u7ebf\u7a0b, \u4e3b\u7ebf\u7a0b\u7ed3\u675f\u4e86,\u8fdb\u7a0b\u4e5f\u5c31\u7ed3\u675f\u4e86.. \u4f46eat\u548cplay\u4e24\u4e2a\u4efb\u52a1\u8fd8\u6ca1\u6765\u5f97\u53ca\u8d77\u6765!!","title":"spawn\u5f02\u6b65\u63d0\u4ea4"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/12_%E5%8D%8F%E7%A8%8B/#join","text":"\u90a3\u5982\u4f55\u662f\u597d?\u4e3b\u8981\u95ee\u9898\u5728\u4e8e\u534f\u7a0b\u662f\u5355\u7ebf\u7a0b,\u4e3b\u7ebf\u7a0b\u4e00\u6b7b,\u8fdb\u7a0b\u4e5f\u5c31\u6b7b\u4e86.. \u5355\u7ebf\u7a0b\u91cc\u7684\u4efb\u52a1\u4e5f\u5c31\u8fd0\u884c\u4e0d\u4e86\u5566. \u90a3\u5c31\u7b49\u4e3b\u7ebf\u7a0b\u91cc\u7684\u4efb\u52a1\u90fd\u8fd0\u884c\u5b8c\u6bd5\u540e,\u518d\u8ba9\u4e3b\u7ebf\u7a0b\u5b89\u8be6\u7684\u6b7b\u53bb..Hhh \u5728\u7a0b\u5e8f\u6700\u540e\u6dfb\u52a0\u4ee3\u7801 gevent.sleep(4) ??? \u4e0d\u59a5, \u4efb\u52a1\u91cc\u7684\u65f6\u95f4\u662f\u6211\u4eec\u6a21\u62df\u7684,\u73b0\u5b9e\u4e2d\u7684IO\u65f6\u95f4\u662f\u4e0d\u786e\u5b9a\u7684. \u6211\u4eec\u5e94\u8be5\u7528join\u64cd\u4f5c\u6765\u89e3\u51b3!! import time import gevent def eat ( name ): print ( \" %s eat 1\" % name ) gevent . sleep ( 2 ) print ( \" %s eat 2\" % name ) def play ( name ): print ( \" %s play 1\" % name ) gevent . sleep ( 3 ) print ( \" %s play 2\" % name ) start = time . time () g1 = gevent . spawn ( eat , 'egon' ) g2 = gevent . spawn ( play , 'dc' ) # gevent.sleep(4) g1 . join () g2 . join () print ( time . time () - start ) # 3.014798164367676 \"\"\" g1.join() g2.join() \u4e0a\u8ff0\u4e24\u884c\u4ee3\u7801\u53ef\u4ee5\u5408\u5e76\u4e3a\u4e00\u6b65 -- gevent.joinall([g1,g2]) Ps: g1.value # -- \u62ff\u5230eat\u7684\u8fd4\u56de\u503c \"\"\" \"\"\" \u9047\u5230IO\u963b\u585e\u65f6\u4f1a\u81ea\u52a8\u5207\u6362\u4efb\u52a1 \u8fd9\u91cc\u53ea\u6709\u4e24\u4e2a\u4efb\u52a1,\u9047\u5230IO\u5c31\u5207,\u6765\u6765\u56de\u56de\u7684\u5207,eat\u7684IO\u5148\u6267\u884c\u5b8c,\u6240\u4ee5\u63a5\u7740\u4f1a\u5148\u6253\u5370\u7684`egon eat 2`. \u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u7684\u8fd0\u884c\u65f6\u95f4\u662f3\u79d2\u591a\u4e00\u70b9\u70b9.\u5982\u679c\u4e24\u4e2a\u4efb\u52a1\u662f\u4e32\u884c\u6267\u884c\u7684\u8bdd,\u7528\u65f6\u4f1a\u662f5\u79d2\u591a\u4e00\u70b9\u70b9. SO,\u534f\u7a0b\u9047\u5230IO\u8fdb\u884c\u5207\u6362,\u7a0b\u5e8f\u7684\u6548\u7387\u5f97\u5230\u4e86\u63d0\u5347! \"\"\"","title":"join\u64cd\u4f5c"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/12_%E5%8D%8F%E7%A8%8B/#monkey","text":"\u82e5\u5c06eat\u548cplay\u4e24\u4e2a\u4efb\u52a1\u4e2d\u7684gevent.sleep()\u8bed\u53e5\u6539\u6210time.sleep()\u8bed\u53e5,\u5c31\u4e0d\u4f1a\u6709\u9047IO\u5c31\u5207\u6362\u7684\u6548\u679c\u5566! \u770b\u6837\u5b50,gevent\u53ea\u80fd\u5b9e\u73b0\u81ea\u5df1\u901a\u8fc7gevent.sleep()\u8bed\u53e5\u6a21\u62df\u7684IO\u884c\u4e3a,\u5176\u4ed6\u7684IO\u884c\u4e3a\u8bc6\u522b\u4e0d\u4e86.. \u90a3\u6b64\u6a21\u5757\u4e0d\u5c31\u767d\u778e\u5566\uff1fno! \u53ef\u4ee5\u6253\u4e00\u4e2a\u8865\u4e01\u6765\u89e3\u51b3. \u7b80\u5355\u8bb0\u5fc6: \u5c06from gevent import monkey;monkey.patch_all()\u653e\u5230\u6587\u4ef6\u7684\u5f00\u5934!!!","title":"monkey\u8865\u4e01"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/12_%E5%8D%8F%E7%A8%8B/#_9","text":"\u6211\u4eec\u53ef\u4ee5\u7528threading.current_thread().getName()\u6765\u67e5\u770b\u6bcf\u4e2ag1\u548cg2 \u67e5\u770b\u7684\u7ed3\u679c\u4e3aDummyThread-n,\u5373\u5047\u7ebf\u7a0b from gevent import monkey , spawn monkey . patch_all () from threading import current_thread import time def eat (): print ( \" %s eat 1\" % current_thread () . name ) time . sleep ( 2 ) print ( \" %s eat 2\" % current_thread () . name ) def play (): print ( \" %s play 1\" % current_thread () . name ) time . sleep ( 3 ) print ( \" %s play 2\" % current_thread () . name ) g1 = spawn ( eat ) g2 = spawn ( play ) print ( current_thread () . name ) g1 . join () g2 . join ()","title":"\u9a8c\u8bc1\u534f\u7a0b\u662f\u5355\u7ebf\u7a0b"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/12_%E5%8D%8F%E7%A8%8B/#gevent_1","text":"\u901a\u8fc7gevent\u5b9e\u73b0\u5355\u7ebf\u7a0b\u4e0b\u7684socket\u5e76\u53d1 \u6ce8\u610f: from gevent import monkey;monkey.patch_all() \u4e00\u5b9a\u8981\u653e\u5230\u5bfc\u5165socket\u6a21\u5757\u4e4b\u524d,\u5426\u5219gevent\u65e0\u6cd5\u8bc6\u522bsocket\u7684\u963b\u585e Ps: \u5f53\u7136\u53ef\u4ee5\u81ea\u5df1\u8fd0\u7528\u7f51\u7edcIO\u6a21\u578b\u5b9e\u73b0\u534f\u7a0b!! \u6709500\u4e2a\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u7aef\u5efa\u7acb\u8fde\u63a5,\u670d\u52a1\u7aef\u7528\u534f\u7a0b\u80af\u5b9a\u6bd4\u670d\u52a1\u7aef\u5f00\u542f500\u4e2a\u7ebf\u7a0b\u7684\u6548\u7387\u9ad8.","title":"gevent\u7684\u5e94\u7528"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/12_%E5%8D%8F%E7%A8%8B/#_10","text":"# -- \u4ee5\u591a\u7ebf\u7a0b\u7684\u5f62\u5f0f\u6a21\u62df\u591a\u4e2a\u5ba2\u6237\u7aef from socket import * from threading import Thread , current_thread def task (): client = socket ( AF_INET , SOCK_STREAM ) client . connect (( \"127.0.0.1\" , 8080 )) while True : msg = \" %s say hello\" % current_thread () . name client . send ( msg . encode ( 'utf-8' )) data = client . recv ( 1024 ) print ( data . decode ( 'utf-8' )) if __name__ == '__main__' : for i in range ( 500 ): t = Thread ( target = task ) t . start ()","title":"\u5ba2\u6237\u7aef"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/12_%E5%8D%8F%E7%A8%8B/#_11","text":"from gevent import monkey , spawn monkey . patch_all () from socket import * def talk ( conn ): while True : try : data = conn . recv ( 1024 ) if len ( data ) == 0 : break conn . send ( data . upper ()) except ConnectionResetError : break conn . close () def server ( ip , port , backlog = 5 ): s = socket ( AF_INET , SOCK_STREAM ) s . bind (( ip , port )) s . listen ( backlog ) while True : conn , addr = s . accept () spawn ( talk , conn ) if __name__ == '__main__' : g = spawn ( server , '127.0.0.1' , 8080 ) g . join () \"\"\" main\u51fd\u6570\u91cc\u7684\u7b2c\u4e00\u884c\u4ee3\u7801\u5f02\u6b65\u63d0\u4ea4\u4e86\u4e00\u4e2a\u4efb\u52a11(\u4efb\u52a12\u5e72\u7684\u662f\u5efa\u8fde\u63a5\u7684\u6d3b),\u4e0d\u7b49\u5f85\u76f4\u63a5\u6267\u884c\u4e0b\u4e00\u884c\u4ee3\u7801`g.join()` \u63a5\u4e0b\u6765\u4f1a\u4f9d\u6b21\u6267\u884cserver\u51fd\u6570\u4f53\u7684\u4ee3\u7801,\u76f4\u5230\u9047\u5230\u4e86accept\u8bed\u53e5\u963b\u585e. gevent\u6a21\u5757\u7acb\u9a6c\u5f00\u59cb\u5c1d\u8bd5\u5207\u6362\u4efb\u52a1,\u4f46\u76ee\u524d\u53ea\u63d0\u4ea4\u4e86\u4e00\u4e2a\u4efb\u52a1.\u5207\u6362\u4e0d\u4e86. \u5f53\u6709\u4e2a\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u7aef\u5efa\u7acb\u4e86\u8fde\u63a5,\u963b\u585e\u7ed3\u675f,\u63a5\u7740\u6267\u884c`spawn(talk, conn)`\u53c8\u5f02\u6b65\u63d0\u4ea4\u4e86\u4e00\u4e2a\u4efb\u52a12 \u63d0\u4ea4\u5b8c\u540e(\u4efb\u52a12\u5e72\u7684\u662f\u901a\u4fe1\u5faa\u73af\u7684\u6d3b),\u56de\u8fc7\u5934(for\u5faa\u73af)\u53c8accept\u963b\u585e\u7b49\u5f85\u5176\u4ed6\u5ba2\u6237\u7aef\u5efa\u7acb\u8fde\u63a5. \u540c\u6837\u7684,\u6b64\u65f6\u9047\u5230\u963b\u585e,gevent\u6a21\u5757\u4f9d\u65e7\u4f1a\u5c1d\u8bd5\u5207\u6362\u4efb\u52a1. \u6b64\u65f6\u4f1a\u5207\u6362\u5230\u4efb\u52a12\u7684\u6267\u884c,\u4efb\u52a12\u4e2drecv\u4e5f\u4f1a\u963b\u585e\u4f4f\u7b49\u5f85\u5bf9\u5e94\u5ba2\u6237\u7aef\u7684\u6d88\u606f. \u63a5\u7740\u5207\u6362\u4efb\u52a1,\u82e5\u4efb\u52a11\u4efb\u52a12\u90fd\u963b\u585e,\u4f1a\u5728\u4efb\u52a11\u4efb\u52a12\u4e4b\u95f4\u6765\u56de\u5207\u6765\u56de\u5207 \u76f4\u5230\u6709\u65b0\u7684\u5ba2\u6237\u7aef\u8fde\u63a5\u8fdb\u6765\u6216\u8005\u6536\u5230\u65b0\u6d88\u606f.. \u4ee5\u6b64\u5faa\u73af,\u5f53\u670d\u52a1\u7aef\u8fde\u63a5\u7684\u5ba2\u6237\u7aef\u8d8a\u6765\u8d8a\u6765\u591a,\u534f\u7a0b\u4e2d\u7684\u4efb\u52a1\u6570\u4f1a\u8d8a\u6765\u8d8a\u591a(\u603b\u4efb\u52a1\u6570 = \u8fde\u63a5\u5ba2\u6237\u7aef\u6570 + 1) <\u63d0\u4ea4\u4e00\u4e2a\u4efb\u52a1\u4f1a\u5efa\u7acb\u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61,\u5bf9\u5e94\u4e00\u4e2a\u4efb\u52a1,\u4f46\u5f52\u6839\u5230\u5e95,\u771f\u6b63\u5b58\u5728\u7684\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b> \u5c31\u8fd9\u6837.\u534f\u7a0b\u5b9e\u73b0\u4e86\u591a\u4e2a\u4efb\u52a1\u7684\u5e76\u53d1!(\u5207\u7684\u901f\u5ea6\u5f88\u5feb!) \"\"\" \u534f\u7a0b\u7684\u5176\u5b83\u5e94\u7528\u4e3e\u4f8b: https://www.cnblogs.com/linhaifeng/articles/7429894.html#_label6 \u6d45\u8c08\u4e00\u4e0bnginx. nginx\u5957\u63a5\u5b57\u670d\u52a1\u7aef\u8f6f\u4ef6 -- \u8d1f\u8d23\u63a5\u6536\u6d4f\u89c8\u5668\u8bf7\u6c42 . \u7b80\u5355\u6765\u8bf4 , nginx\u5c06\u673a\u5668\u4e0a\u7684\u672c\u5730\u6587\u4ef6\u6253\u5f00 , \u5c06\u5185\u5bb9\u8bfb\u51fa\u6765\u53d1\u7ed9\u5ba2\u6237\u7aef . \u5c31\u662f\u4e00\u4e2a\u4e0b\u8f7d\u7684\u8fc7\u7a0b . nginx\u7684\u6548\u7387\u9ad8 , \u5b83\u7ed3\u5408\u4e86\u591a\u8fdb\u7a0b\u591a\u7ebf\u7a0b\u534f\u7a0b . ( \u5e95\u5c42\u7528C\u8bed\u8a00\u5199\u7684 ) \u5927\u4f53\u662f\u8fd9\u6837\u505a\u7684 , \u6709\u51e0\u4e2acpu\u5c31\u4f1a\u5148\u5f00\u51e0\u4e2a\u8fdb\u7a0b , \u4fdd\u8bc1\u6bcf\u4e2acpu\u90fd\u7528\u4e0a\u4e86 . \u6bcf\u4e2a\u8fdb\u7a0b\u5185\u53c8\u5f00\u4e86\u4e00\u5806\u7ebf\u7a0b , \u6bcf\u4e2a\u7ebf\u7a0b\u5185\u5b9e\u73b0\u4e86\u9047\u5230IO\u5c31\u5207\u6362\u7684\u534f\u7a0b .. \u628a\u5355\u4e2a\u7ebf\u7a0b\u7684IO\u964d\u5230\u6700\u4f4e , \u4fdd\u8bc1\u5355\u4e2a\u7ebf\u7a0b\u7684\u6548\u7387\u662f\u6700\u9ad8\u7684 !! \u6240\u4ee5nginx\u652f\u6301\u7684\u5e76\u53d1\u6570\u9ad8 !!","title":"\u670d\u52a1\u7aef"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/13_%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B/","text":"\u672c\u8282\u9610\u8ff0\u7684IO\u6a21\u578b\u4e0d\u662f\u5355\u7ebf\u7a0b\u4e0b\u7684\u6240\u6709IO. \u9488\u5bf9\u7684\u662flinux\u5355\u7ebf\u7a0b\u4e0b\u7684network IO!!! \u7f51\u7edcIO\u8fdc\u6bd4\u672c\u5730IO\u6162\u7684\u591a! \u672c\u7ae0\u8282IO\u6a21\u578b\u7684\u4ee3\u7801\u53ef\u4ee5\u4e0d\u5199,\u56e0\u4e3a\u5728\u5f00\u53d1\u4e2d\u4e0d\u4f1a\u53bb\u5199\u8fd9\u4e9b\u4e1c\u897f,\u4f46\u6211\u4eec\u8981\u77e5\u9053\u5b83\u7684\u5e95\u5c42\u662f\u5982\u4f55\u5b9e\u73b0\u7684!!! IO\u6a21\u578b\u4ecb\u7ecd \u00b6 IO Model\u4e00\u5171\u53ef\u4ee5\u5206\u4e3a5\u79cd: 1> blocking IO \u963b\u585eIO 2> nonblocking IO \u975e\u963b\u585eIO 3> IO multiplexing IO\u591a\u8def\u590d\u7528 4> signal driven IO \u4fe1\u53f7\u9a71\u52a8IO (\u4e0d\u5e38\u7528,\u672c\u8282\u4e0d\u4f1a\u8fdb\u884c\u76f8\u5173\u9610\u8ff0) 5> asynchronous IO \u5f02\u6b65IO \u7f51\u7edc\u7f16\u7a0b(TCP\u3001UDP)\u4e2d\u6d89\u53ca\u5230\u7684IO\u64cd\u4f5c: I/O \u670d\u52a1\u7aef \u5ba2\u6237\u7aef \u6536/\u8f93\u5165/input \u4e0a:TCP \u4e0b:UDP accept\u3001recv recvfrom recv recvfrom \u53d1/\u8f93\u51fa/output \u4e0a:TCP \u4e0b:UDP send sendto connect\u3001send sendto \u5176\u5b83\u8f93\u5165\u64cd\u4f5c: read\u3001readv\u3001recvmsg; \u5176\u5b83\u8f93\u51fa\u64cd\u4f5c: write\u3001writev\u3001sendmsg \u5f53I/O\u53d1\u751f\u65f6,\u4f1a\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5: 1> wait data -- \u7b49\u5f85\u6570\u636e\u51c6\u5907 (Waiting for the data to be ready) 2> copy data -- \u5c06\u6570\u636e\u4ece\u5185\u6838\u62f7\u8d1d\u5230\u8fdb\u7a0b\u4e2d (Copying the data from the kernel to the process) \u5176\u4e2d,\u6536\u6d88\u606f\u7684IO\u64cd\u4f5c\u4f1a\u7ecf\u5386\u4e0a\u9762\u4e24\u4e2a\u9636\u6bb5,\u53d1\u6d88\u606f\u53ea\u4f1a\u7ecf\u5386\u7b2c\u4e8c\u4e2acopy data\u7684\u9636\u6bb5! wait data\u7ed3\u675f,\u610f\u5473\u7740OS\u7f13\u5b58\u4e2d\u62e5\u6709\u4e86\u8be5\u6570\u636e! \u4ee5\u670d\u52a1\u7aef\u7684recv\u64cd\u4f5c\u548csend\u64cd\u4f5c\u4e3a\u4f8b: \u25b3 recv: wait data: C\u7aef\u5e94\u7528\u7a0b\u5e8f\u4ea7\u751fmsg\u6570\u636e -- \u5c06C\u7aef\u5e94\u7528\u7a0b\u5e8f\u5185\u5b58\u4e2d\u7684mag\u6570\u636e\u62f7\u8d1d\u7ed9C\u7aefOS -- C\u7aefOS\u5c06\u6570\u636e\u6cbf\u7740\u7f51\u7edc\u4f20\u8f93\u7ed9S\u7aef\u7684OS -- S\u7aefOS\u6536\u5230\u540e\u56de\u590d\u4e00\u4e2a\u786e\u8ba4\u4fe1\u606f -- C\u7aefOS\u5c06\u7f13\u5b58\u4e2d\u7684msg\u6570\u636e\u6e05\u9664 copy data: \u5c06S\u7aefOS\u7f13\u5b58\u4e2d\u7684msg\u6570\u636e\u62f7\u8d1d\u4e00\u4efd\u5230S\u7aef\u5e94\u7528\u7a0b\u5e8f\u5185\u5b58\u4e2d -- \u62f7\u8d1d\u540e,S\u7aefOS\u7f13\u5b58\u4e2d\u7684msg\u6570\u636e\u81ea\u52a8\u9500\u6bc1 \u25b3 send: copy data: \u5c06S\u7aef\u5e94\u7528\u7a0b\u5e8f\u5185\u5b58\u4e2d\u7684\u6570\u636e\u62f7\u8d1d\u5230S\u7aefOS\u7f13\u5b58\u4e2d Q: \u4e3a\u4ec0\u4e48\u7528\u6237\u80fd\u660e\u663e\u4f53\u4f1a\u5230\u6536\u6d88\u606f\u7684\u7b49\u5f85,\u800c\u53d1\u6d88\u606f\u5219\u4e0d\u4f1a\uff1f A: wait data\u9636\u6bb5\u4f1a\u7ecf\u5386\u7f51\u7edc\u5ef6\u8fdf,\u8017\u65f6\u957f ; copy data\u9636\u6bb5\u662f\u672c\u5730\u62f7\u8d1d,\u901f\u5ea6\u5f88\u5feb,\u8017\u65f6\u77ed. \u7f51\u7edcIO\u6a21\u578b\u5c06\u56f4\u7ed5\u7740\u8fd9\u4e24\u4e2a\u9636\u6bb5\u5c55\u5f00\u9610\u8ff0! \u963b\u585eIO \u00b6 blocking IO -- \u4e0d\u80fd\u5b9e\u73b0\u5e76\u53d1 \u56fe6.1 \u963b\u585eI/O\u6a21\u578b. \u8fdb\u7a0b\u5728\u8c03\u7528recvfrom\u65f6\u963b\u585e.\u56fe\u4e2d\u662f\u4ee5UDP\u7684recvfrom\u64cd\u4f5c\u4e3a\u4f8b\u7684. 1> \u5e94\u7528\u7a0b\u5e8f\u8c03\u7528\u6536\u6d88\u606f\u7684recvfrom\u63a5\u53e3,\u8be5\u63a5\u53e3\u4f1a\u53d1\u9001\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\u7ed9\u64cd\u4f5c\u7cfb\u7edf..\u95ee\u64cd\u4f5c\u7cfb\u7edf\u6709\u6ca1\u6709\u6570\u636e\u7ed9\u6211. 2> \u64cd\u4f5c\u7cfb\u7edf\u6ca1\u6709\u6570\u636e\u7ed9\u5e94\u7528\u7a0b\u5e8f,\u5e94\u7528\u7a0b\u5e8f\u5f00\u59cb\u963b\u585e,\u8fdb\u5165wait data\u9636\u6bb5,OS\u8c03\u7528\u7f51\u5361\u63a5\u6536\u6d88\u606f 3> \u76f4\u5230wait data\u7ed3\u675f,\u6570\u636e\u6765\u5230\u4e86OS\u7f13\u5b58\u4e2d 4> \u63a5\u7740\u8fdb\u5165copy data\u9636\u6bb5.\u5c06\u6570\u636e\u4eceOS\u7f13\u5b58\u62f7\u8d1d\u5230\u5e94\u7528\u7a0b\u5e8f\u5185\u5b58\u4e2d 5> \u62f7\u8d1d\u5b8c\u6210\u540e,recvfrom\u64cd\u4f5c\u7ed3\u675f [ \u7f51\u7edc\u7f16\u7a0b\u5b66\u4e60\u5386\u7a0b ] 1 > \u4e24\u4e2a\u5faa\u73af \u6211\u4eec\u521a\u63a5\u89e6\u7f51\u7edc\u7f16\u7a0b\u65f6 , \u5199\u7684\u7a0b\u5e8f\u5c31\u662f\u963b\u585eIO\u7684 . \u9047\u5230IO\u5c31\u5728\u539f\u5730\u7b49 , \u4e0d\u80fd\u5b9e\u73b0\u5e76\u53d1 , \u6548\u7387\u975e\u5e38\u4f4e . \u5177\u4f53\u56de\u987e\u4e0b : \u5199\u4e86\u4e24\u4e2a\u5faa\u73af , \u5916\u5c42\u94fe\u63a5\u5faa\u73af , \u91cc\u5c42\u901a\u4fe1\u5faa\u73af ; accept\u963b\u585e\u7ed3\u675f\u540e\u624d\u80fd\u6267\u884c\u4e0b\u4e00\u884c\u4ee3\u7801 . recv\u540c\u7406 . \u5f0a\u7aef -- \u5efa\u5b8c\u94fe\u63a5\u540e\u4e0d\u80fd\u5e72\u901a\u4fe1 , \u901a\u4fe1\u5b8c\u540e\u624d\u80fd\u91cd\u65b0\u5efa\u7acb\u4e0b\u4e00\u4e2a\u94fe\u63a5 . \u6240\u4ee5\u7684\u6d3b\u90fd\u7531\u4e00\u4e2a\u7ebf\u7a0b\u5e72 ! \u9047\u963b\u585e\u5168\u6b47\u83dc . \u5982\u5728\u8c03\u7528recv ( 1024 ) \u65f6 , \u7ebf\u7a0b\u5c06\u88ab\u963b\u585e , \u5728\u6b64\u671f\u95f4 , \u7ebf\u7a0b\u5c06\u65e0\u6cd5\u6267\u884c\u4efb\u4f55\u8fd0\u7b97\u6216\u54cd\u5e94\u4efb\u4f55\u7684\u7f51\u7edc\u8bf7\u6c42 . 2 > \u5e76\u53d1\u89e3\u51b3\u65b9\u6848 : \u591a\u8fdb\u7a0b \u3001 \u591a\u7ebf\u7a0b \u6b64\u5904\u662fIO\u5bc6\u96c6\u578b\u7684 , \u4f7f\u7528\u591a\u7ebf\u7a0b . \u8ba9\u4e3b\u7ebf\u7a0b\u4e0d\u65ad\u7684\u5efa\u7acb\u94fe\u63a5 , \u6bcf\u5efa\u7acb\u4e00\u4e2a\u94fe\u63a5\u5c31\u542f\u7528\u4e00\u4e2a\u5b50\u7ebf\u7a0b\u8d1f\u8d23\u8be5\u94fe\u63a5\u7684\u901a\u4fe1 . \u6ce8\u610f -- \u6b64\u89e3\u51b3\u65b9\u6848\u5e76\u6ca1\u6709\u5c06IO\u95ee\u9898\u89e3\u51b3 ! \u5206\u6790 -- \u8be5\u601d\u8def\u7684I / O\u95ee\u9898\u9047\u5230\u963b\u585e\u8fd8\u662f\u4f1a\u7ecf\u5386wait data\u548ccopy data\u7684\u9636\u6bb5 . \u8be5\u963b\u7684\u4e00\u4e2a\u90fd\u4e0d\u4f1a\u843d\u4e0b . \u4f46\u67d0\u4e2a\u5b50\u7ebf\u7a0b\u963b\u585e\u4e86\u5e76\u4e0d\u5f71\u54cd\u5176\u5b83\u5b50\u7ebf\u7a0b\u7684\u6267\u884c . \u5373\u591a\u7ebf\u7a0b / \u591a\u8fdb\u7a0b\u7684\u76ee\u7684\u662f\u8ba9\u6bcf\u4e2a\u8fde\u63a5\u90fd\u62e5\u6709\u72ec\u7acb\u7684\u7ebf\u7a0b / \u8fdb\u7a0b , \u4f7f\u5f97\u4efb\u4f55\u4e00\u4e2a\u8fde\u63a5\u7684\u963b\u585e\u90fd\u4e0d\u4f1a\u5f71\u54cd\u5176\u4ed6\u7684\u8fde\u63a5 . \u5f0a\u7aef -- \u82e5\u5e76\u53d1\u7684\u5ba2\u6237\u7aef\u4e2a\u6570\u8fc7\u591a , \u4f1a\u5bfc\u81f4\u670d\u52a1\u7aef\u542f\u52a8\u7684\u7ebf\u7a0b\u6570\u8fc7\u591a . \u673a\u5668\u53d7\u4e0d\u4e86 . \u5177\u4f53\u6765\u8bf4 , \u5f00\u542f\u591a\u8fdb\u7a0b / \u591a\u7ebf\u7a0b , \u5728\u9047\u5230\u6210\u767e\u4e0a\u5343\u7684\u8fde\u63a5\u8bf7\u6c42\u65f6 . \u65e0\u8bba\u591a\u7ebf\u7a0b\u8fd8\u662f\u591a\u8fdb\u7a0b\u90fd\u4f1a\u4e25\u91cd\u5360\u636e\u7cfb\u7edf\u8d44\u6e90 \u964d\u4f4e\u7cfb\u7edf\u5bf9\u5916\u754c\u54cd\u5e94\u6548\u7387 , \u800c\u4e14\u7ebf\u7a0b\u4e0e\u8fdb\u7a0b\u672c\u8eab\u4e5f\u66f4\u5bb9\u6613\u8fdb\u5165\u5047\u6b7b\u72b6\u6001 ( OS\u5fd9\u4e8e\u5207\u6362\u5566 , \u4e0d\u4f1a\u771f\u6b63\u7684\u5e72\u6d3b ) 3 > \u6c60 : \u5bf9\u94fe\u63a5\u6570\u52a0\u4ee5\u9650\u5236 , \u63a7\u5236\u5728\u673a\u5668\u53ef\u627f\u53d7\u7684\u8303\u56f4\u5185 . \u8bf4\u5230\u6c60 , \u6211\u4eec\u5f80\u5f80\u4f1a\u60f3\u5230 \"\u7ebf\u7a0b\u6c60\" \u6216 \"\u8fde\u63a5\u6c60\" . \u201c \u7ebf\u7a0b\u6c60 \u201d \u65e8\u5728\u51cf\u5c11\u521b\u5efa\u548c\u9500\u6bc1\u7ebf\u7a0b\u7684\u9891\u7387 , \u5176\u7ef4\u6301\u4e00\u5b9a\u5408\u7406\u6570\u91cf\u7684\u7ebf\u7a0b , \u5e76\u8ba9\u7a7a\u95f2\u7684\u7ebf\u7a0b\u91cd\u65b0\u627f\u62c5\u65b0\u7684\u6267\u884c\u4efb\u52a1 . \u201c \u8fde\u63a5\u6c60 \u201d \u7ef4\u6301\u8fde\u63a5\u7684\u7f13\u5b58\u6c60 , \u5c3d\u91cf\u91cd\u7528\u5df2\u6709\u7684\u8fde\u63a5 \u3001 \u51cf\u5c11\u521b\u5efa\u548c\u5173\u95ed\u8fde\u63a5\u7684\u9891\u7387 . \u8fd9\u4e24\u79cd\u6280\u672f\u90fd\u53ef\u4ee5\u5f88\u597d\u7684\u964d\u4f4e\u7cfb\u7edf\u5f00\u9500 , \u90fd\u88ab\u5e7f\u6cdb\u5e94\u7528\u5f88\u591a\u5927\u578b\u7cfb\u7edf , \u5982websphere \u3001 tomcat\u548c\u5404\u79cd\u6570\u636e\u5e93\u7b49 . Ps : \u56de\u987e\u4e00\u4e0b\u8fd9\u53e5\u8bdd , \u534a\u8fde\u63a5\u6c60backlog\u9650\u5236\u7684\u662f < \u540c\u4e00\u65f6\u523b > \u7684\u8bf7\u6c42\u6570 ! \u7ebf\u7a0b\u6c60vs\u8fde\u63a5\u6c60\u8be6\u89e3\u53c2\u8003\u94fe\u63a5 : ` https : // www . jianshu . com / p / a25bc5ff7942 ` \u6ce8\u610f -- \u8fd0\u7528\u6c60 , \u8fd9\u4e0d\u662f\u63d0\u5347\u6548\u7387\u7684\u65b9\u6848 , \u53ea\u662f\u8ba9\u673a\u5668\u9762\u5bf9\u9ad8\u5e76\u53d1\u65f6\u4e0d\u5b95\u673a\u7684\u5219\u4e2d\u65b9\u6848 . \u95ee\u9898 -- \u201c \u7ebf\u7a0b\u6c60 \u201d \u548c \u201c \u8fde\u63a5\u6c60 \u201d \u6280\u672f\u4e5f\u53ea\u662f\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u7f13\u89e3\u4e86\u9891\u7e41\u8c03\u7528IO\u63a5\u53e3\u5e26\u6765\u7684\u8d44\u6e90\u5360\u7528 . \u5047\u8bbe\u673a\u5668\u53ea\u80fd\u625b\u4f4f100\u7684\u5e76\u53d1 , \u82e5\u676510\u4e2a\u4efb\u52a1 , \u6ca1\u5fc5\u8981\u7528\u6c60 . \u82e5\u6765200\u4e2a\u4efb\u52a1 , \u7528\u7ebf\u7a0b\u6c60\u9650\u5236\u8fde\u63a5\u6570 , \u8fd9\u6548\u7387\u5fc5\u7136\u4f1a\u6bd4\u76f4\u63a5\u5f00200\u4e2a\u7ebf\u7a0b\u4f4e . \u4f46\u56e0\u4e3a\u5207\u6362\u7684\u901f\u5ea6\u591f\u5feb . \u7528\u6237\u4e0d\u4f1a\u6709\u660e\u663e\u7684\u7b49\u5f85 . \u4f46\u662f\u5f53\u8bf7\u6c42\u5927\u5927\u8d85\u8fc7\u4e0a\u9650\u65f6 , \u6bd4\u59821\u5343\u4e07 , \u201c \u6c60 \u201d \u6784\u6210\u7684\u7cfb\u7edf\u5bf9\u5916\u754c\u7684\u54cd\u5e94\u5e76\u4e0d\u6bd4\u6ca1\u6709\u6c60\u7684\u65f6\u5019\u6548\u679c\u597d\u591a\u5c11 . \u6240\u4ee5\u4f7f\u7528 \u201c \u6c60 \u201d \u5fc5\u987b\u8003\u8651\u5176\u9762\u4e34\u7684\u54cd\u5e94\u89c4\u6a21 , \u5e76\u6839\u636e\u54cd\u5e94\u89c4\u6a21\u8c03\u6574 \u201c \u6c60 \u201d \u7684\u5927\u5c0f . \u5230\u8fd9\u91cc , \u4e0d\u7ba1\u662f\u591a\u8fdb\u7a0b / \u591a\u7ebf\u7a0b\u8fd8\u662f\u6c60 , \u90fd\u5bf9\u5355\u4e2a\u7ebf\u7a0b\u4e0b\u7684IO\u884c\u4e3a\u7f6e\u4e4b\u4e0d\u7406 . \u90a3\u5982\u4f55\u662f\u597d ? 4 > \u534f\u7a0b \u5c06\u5355\u4e2a\u7ebf\u7a0b\u4e0b\u7684IO\u964d\u5230\u6700\u4f4e , \u76d1\u6d4b\u5355\u7ebf\u7a0b\u4e0b\u7684IO , \u9047\u5230IO\u5c31\u5207 , \u6548\u7387\u4e5f\u5c31\u63d0\u5347\u4e0a\u53bb\u4e86 . \u5355\u4e2a\u7ebf\u7a0b\u80fd\u6297\u7684\u5e76\u53d1\u6570\u5c31\u591a\u8d77\u6765\u4e86 . \u591a\u7ebf\u7a0b + \u534f\u7a0b -- 1000 \u4e2a\u7ebf\u7a0b , \u6bcf\u4e2a\u7ebf\u7a0b\u80fd\u625b\u4f4f1000\u4e2a\u4efb\u52a1 , \u4e00\u767e\u4e07\u7684\u5e76\u53d1\u5c31\u641e\u5b9a\u4e86 . \u4e0d\u501f\u52a9\u5df2\u6709\u7684gevent\u6a21\u5757 , \u4f7f\u7528\u67d0\u79cdIO\u6a21\u578b\u81ea\u5df1\u5b9e\u73b0\u534f\u7a0b ( \u5355\u7ebf\u7a0b\u4e0b\u5b9e\u73b0\u5e76\u53d1 ) !! \u975e\u963b\u585eIO \u00b6 non-blocking IO \u5728\u975e\u963b\u585e\u5f0fIO\u4e2d, \u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u4e0d\u65ad\u7684\u4e3b\u52a8\u8be2\u95ee\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838(kernel)\u6570\u636e\u51c6\u5907\u597d\u4e86\u6ca1\u6709. \u539f\u7406 \u00b6 \u56fe6.2 \u975e\u963b\u585eI/O\u6a21\u578b. \u8fdb\u7a0b\u91cd\u590d\u8c03\u7528recvfrom, \u7b49\u5f85OK\u8fd4\u56de. (\u8f6e\u8be2) 1> \u540c\u6837\u7684, \u5e94\u7528\u7a0b\u5e8f\u4f1a\u8c03\u7528\u6536\u6d88\u606f\u7684recvfrom\u63a5\u53e3,\u8be5\u63a5\u53e3\u4f1a\u53d1\u9001\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\u7ed9\u64cd\u4f5c\u7cfb\u7edf.. 2> \u82e5kernel/\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684\u6570\u636e\u8fd8\u6ca1\u6709\u51c6\u5907\u597d,\u90a3\u4e48\u5b83\u5e76\u4e0d\u4f1ablock/\u963b\u585e\u7528\u6237\u8fdb\u7a0b, \u800c\u662f\u7acb\u523b\u8fd4\u56de\u4e00\u4e2aerror 3> \u7528\u6237\u8fdb\u7a0b\u5224\u65ad\u7ed3\u679c\u662f\u4e00\u4e2aerror\u65f6, \u5b83\u5c31\u77e5\u9053\u6570\u636e\u8fd8\u6ca1\u6709\u51c6\u5907\u597d, \u4e8e\u662f\u7528\u6237\u8fdb\u7a0b\u5c31\u53ef\u4ee5\u5728\u672c\u6b21\u5230\u4e0b\u6b21\u518d\u53d1\u8d77read\u8be2\u95ee\u7684\u65f6\u95f4\u95f4\u9694\u5185\u505a\u5176\u4ed6\u4e8b\u60c5, \u6216\u8005\u76f4\u63a5\u518d\u6b21\u53d1\u9001read\u64cd\u4f5c(recvfrom) 4> \u4e00\u65e6kernel\u4e2d\u7684\u6570\u636e\u51c6\u5907\u597d\u4e86,\u5e76\u4e14\u53c8\u518d\u6b21\u6536\u5230\u4e86\u7528\u6237\u8fdb\u7a0b\u7684system call, \u90a3\u4e48\u5b83\u9a6c\u4e0a\u5c31\u5c06\u6570\u636e\u62f7\u8d1d\u5230\u4e86\u5e94\u7528\u7a0b\u5e8f\u5185\u5b58 (\u8fd9\u4e00copy data\u9636\u6bb5\u662f\u963b\u585e\u7684,\u662f\u4e0d\u53ef\u907f\u514d\u7684,\u5728\u8fd9\u671f\u95f4\u662f\u4e0d\u80fd\u5e72\u5176\u5b83\u4e8b\u60c5\u7684). \u4e5f\u5c31\u662f\u8bf4 \u975e\u963b\u585e\u7684recvform\u7cfb\u7edf\u8c03\u7528\u8c03\u7528\u4e4b\u540e,\u8fdb\u7a0b\u5e76\u6ca1\u6709\u88ab\u963b\u585e, \u5185\u6838\u9a6c\u4e0a\u8fd4\u56de\u7ed9\u8fdb\u7a0b. \u82e5\u6570\u636e\u8fd8\u6ca1\u51c6\u5907\u597d,\u6b64\u65f6\u4f1a\u8fd4\u56de\u4e00\u4e2aerror. \u8fdb\u7a0b\u5728\u5f97\u5230\u8fd4\u56de\u4e4b\u540e,\u53ef\u4ee5\u5e72\u70b9\u522b\u7684\u4e8b\u60c5,\u7136\u540e\u518d\u53d1\u8d77recvform\u7cfb\u7edf\u8c03\u7528. \u91cd\u590d\u4e0a\u9762\u7684\u8fc7\u7a0b,\u5faa\u73af\u5f80\u590d\u7684\u8fdb\u884crecvform\u7cfb\u7edf\u8c03\u7528. \u8fd9\u4e2a\u8fc7\u7a0b\u901a\u5e38\u88ab\u79f0\u4e4b\u4e3a\u8f6e\u8be2. \u8f6e\u8be2\u68c0\u67e5\u5185\u6838\u6570\u636e,\u76f4\u5230\u6570\u636e\u51c6\u5907\u597d,\u518d\u62f7\u8d1d\u6570\u636e\u5230\u8fdb\u7a0b,\u8fdb\u884c\u6570\u636e\u5904\u7406. \u9700\u8981\u6ce8\u610f,\u62f7\u8d1d\u6570\u636e\u7684\u6574\u4e2a\u8fc7\u7a0b,\u8fdb\u7a0b\u4ecd\u7136\u662f\u5c5e\u4e8e\u963b\u585e\u7684\u72b6\u6001. \u8be5\u65b9\u6848\u5c06\u82b1\u65f6\u95f4\u6700\u957f\u7684wait data\u9636\u6bb5\u5229\u7528\u4e86\u8d77\u6765,\u5229\u7528\u6b64\u9636\u6bb5\u7684\u65f6\u95f4\u5e72\u5355\u7ebf\u7a0b\u4e0b\u5176\u5b83\u8ba1\u7b97\u7684\u6d3b. \u5355\u7ebf\u7a0b\u7684\u6548\u7387\u5f97\u5230\u4e86\u63d0\u5347. \u4ee3\u7801\u5b9e\u73b0 \u00b6 recvfrom\u539f\u672c\u662f\u963b\u585e\u64cd\u4f5c,\u8981\u7b49\u4e24\u4e2a\u9636\u6bb5\u5b8c\u5b8c\u6574\u6574\u505a\u5b8c\u540e\u518d\u6267\u884c\u4e0b\u4e00\u884c\u4ee3\u7801,\u6211\u4eec\u8981\u5c06\u5176\u53d8\u4e3a\u975e\u963b\u585e\u7684. \u5173\u952e\u4ee3\u7801 -- server.setblocking(False) \u975e\u963b\u585eIO\u7684\u7cbe\u9ad3\u5728\u4e8e\u5b8c\u5168\u6ca1\u6709\u963b\u585e! \u670d\u52a1\u7aef \u00b6 \u8fd0\u7528\u975e\u963b\u585eIO\u6a21\u578b,\u670d\u52a1\u7aef\u5728\u5355\u7ebf\u7a0b\u4e0b\u5c31\u5b9e\u73b0\u4e86\u5e76\u53d1. from socket import * server = socket ( AF_INET , SOCK_STREAM ) server . bind (( \"127.0.0.1\" , 8080 )) server . listen ( 5 ) # -- \u8bbe\u7f6e\u963b\u585e\u4e0e\u5426,\u9ed8\u8ba4flag\u53c2\u6570\u503c\u4e3aTrue,\u4ee3\u8868\u9ed8\u8ba4\u7684IO\u6a21\u578b\u662f\u963b\u585e\u7684 # -- \u6b64\u5904\u6211\u4eec\u8bbe\u7f6eflag\u7684\u53c2\u6570\u6307\u4e3aFalse \u5c06I/O\u6a21\u578b\u53d8\u4e3a\u975e\u963b\u585e\u7684 # \u975e\u963b\u585eIO\u6a21\u578b\u91cc,\u82e5\u7a0b\u5e8f\u7684IO\u64cd\u4f5c\u7684wait data\u9636\u6bb5\u6ca1\u6709\u505a\u5b8c,\u4f1a\u629bBlockingIOError\u5f02\u5e38 # \u8be5\u670d\u52a1\u7aef\u4e2d\u6d89\u53ca\u5230\u7684IO\u64cd\u4f5c\u6709 accept\u3001recv\u3001send server . setblocking ( False ) conn_l = [] while True : # -- \u5b9e\u73b0\u4e86\u9047\u5230IO\u5c31\u505a\u5176\u5b83\u4e8b\u60c5 # try\u91cc\u7684\u4ee3\u7801\u62a5\u9519\u5c31\u6267\u884cexcept\u91cc\u7684\u4ee3\u7801,except\u91cc\u7684\u4ee3\u7801\u6267\u884c\u5b8c\u540e,\u56e0\u4e3awhile True\u5faa\u73af. # \u5faa\u73af\u5f80\u590d\u8fd9\u4e00\u8fc7\u7a0b. \u5f53\u7136except\u5b50\u4ee3\u7801\u5757\u91cc\u7684\u4e5f\u6709\u53ef\u80fd\u9047\u5230IO,\u540c\u6837\u7684\u6355\u83b7\u5f02\u5e38. try : print ( \"\u603b\u8fde\u63a5\u6570[ %s ]\" % len ( conn_l )) # -- \u6bcf\u542f\u52a8\u4e00\u4e2a\u5ba2\u6237\u7aef,\u8fde\u63a5\u6570\u5c31\u4f1a\u52a01 conn , addr = server . accept () conn_l . append ( conn ) # -- \u82e5\u4e0d\u6267\u884c\u6b64\u64cd\u4f5c,\u6bcf\u6b21\u4e0e\u5ba2\u6237\u7aef\u65b0\u5efa\u7acb\u7684\u94fe\u63a5\u5c31\u4f1a\u88ab\u8986\u76d6\u6389 except BlockingIOError : # print(\"\u505a\u4e862s\u5176\u5b83\u7684\u4e8b\u60c5!\") # time.sleep(2) # -- \u6b64\u5904\u4e0d\u662f\u6a21\u62dfio,\u800c\u662f\u6a21\u62df\u505a\u5176\u5b83\u8ba1\u7b97\u7528\u4e862s\u7684\u65f6\u95f4 # -- \u8fdb\u4e00\u6b65\u660e\u786e,\u5176\u5b83\u4e8b\u60c5\u6307\u7684\u662f\u505a\u901a\u4fe1\u5faa\u73af\u7684\u6d3b # (\u82e5\u8981\u8003\u8651\u7c98\u5305\u95ee\u9898) \u4e00\u70b9\u63d0\u793a: conn\u4f5c\u4e3akey,value\u5bf9\u5e94\u4e0a\u6b64conn\u6536\u7684\u6570\u636e,\u6536\u7684\u6570\u636e\u505a\u4e00\u4e2a\u62fc\u63a5 # \u6bd4\u5982:conn_msg_l = [] conn_msg_l[conn] = data # conn_msg_l\u5217\u8868\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u662f\u5b57\u5178 {\u94fe\u63a5:\u8be5\u94fe\u63a5\u6536\u5230\u7684\u6d88\u606f\"\u62fc\u63a5\"} del_conn_l = [] for conn in conn_l : try : # -- \u8981\u77e5\u9053,conn_l\u91cc\u7684\u4e00\u5806\u94fe\u63a5\u662f\u5f52\u64cd\u4f5c\u7cfb\u7edf\u7ba1 # \u54ea\u6015\u8fd9\u4e00\u5806\u94fe\u63a5\u7684\u5ba2\u6237\u7aef\u540c\u65f6\u53d1\u6570\u636e\u8fc7\u6765,\u6536\u5230\u7684\u6570\u636e\u90fd\u4f1a\u5148\u5f80\u670d\u52a1\u7aef\u7684OS\u7f13\u5b58\u91cc\u5b58. # \u8be5\u7a0b\u5e8f\u8be2\u95ee\u5f53\u524d\u5faa\u73af\u5230\u7684\u94fe\u63a5\u5728OS\u7f13\u5b58\u4e2d\u6709\u65e0\u5bf9\u5e94\u7684\u6570\u636e # OS\u548c\u5e94\u7528\u7a0b\u5e8f\u662f\u4e92\u76f8\u4e0d\u5e72\u6270\u7684\u4e24\u4e2a\u8fdb\u7a0b,\u5404\u81ea\u53ef\u4ee5\u5e72\u5404\u81ea\u7684\u4e8b\u60c5 data = conn . recv ( 1024 ) if len ( data ) == 0 : # -- \u89e3\u51b3Linux\u4e0b\u5ba2\u6237\u7aef\u65ad\u5f00\u94fe\u63a5,\u670d\u52a1\u7aef\u4e00\u76f4\u63a5\u6536\u7a7a\u5b57\u7b26\u4e32\u7684\u95ee\u9898 conn . close () # -- \u4e3a\u5565\u4e0d\u76f4\u63a5conn_l.remove(conn)\u5462? \u56e0\u4e3a\u4e0d\u8981\u5728for\u5faa\u73af\u91cc\u6539\u53d8\u5faa\u73af\u5bf9\u8c61\u7684\u7ed3\u6784! del_conn_l . append ( conn ) continue conn . send ( data . upper ()) except BlockingIOError : continue # -- \u7b2c\u4e00\u4e2a\u8fde\u63a5\u8fdb\u884crecv\u64cd\u4f5c\u65f6\u6ca1\u6570\u636e,\u4e0d\u4ee3\u8868\u7b2c2\u4e2a\u6ca1\u6709 \u8fd9\u91cc\u5199\u6210pass\u4e5f\u884c except ConnectionResetError : # -- \u89e3\u51b3windows\u4e0b\u5ba2\u6237\u7aef\u65ad\u5f00\u94fe\u63a5\u7684\u95ee\u9898 conn . close () del_conn_l . append ( conn ) for conn in del_conn_l : conn_l . remove ( conn ) \u5ba2\u6237\u7aef \u00b6 import os from socket import * client = socket ( AF_INET , SOCK_STREAM ) client . connect (( \"127.0.0.1\" , 8080 )) while True : msg = \" %s hello\" % os . getpid () client . send ( msg . encode ( 'utf-8' )) data = client . recv ( 1024 ) print ( data . decode ( 'utf-8' )) \"\"\" \u5f53\u7136,\u53ef\u4ee5\u4ee5\u591a\u7ebf\u7a0b\u7684\u5f62\u5f0f\u6a21\u62df\u591a\u4e2a\u5ba2\u6237\u7aef \"\"\" \u5f0a\u7aef \u00b6 \u975e\u963b\u585eIO\u6a21\u578b\u662f\u4e0d\u88ab\u63a8\u8350\u7684! 1> \u975e\u963b\u585eIO,\u4e00\u70b9IO\u90fd\u6ca1\u6709.. \u867d\u7136\u5728\u5355\u7ebf\u7a0b\u4e0b\u5b9e\u73b0\u4e86\u5e76\u53d1,\u5185\u5b58\u5360\u7528\u5c11\u4e86,\u4f46 \u5bf9cpu\u7684\u65e0\u6548\u5360\u7528\u8fc7\u9ad8!! \u5faa\u73af\u8c03\u7528recv()\u5c06\u5927\u5e45\u5ea6\u63a8\u9ad8CPU\u5360\u7528\u7387.. \u800c\u4e14\u5927\u591a\u6570\u7684\u8f6e\u8be2\u662f\u6ca1\u6709\u610f\u4e49\u7684.\u767d\u5360cpu\u8fd8\u4e0d\u5e72\u6d3b. 2> \u82e5conn_l\u5217\u8868\u4e2d\u7684\u8fde\u63a5\u6570\u5f88\u591a,for\u5faa\u73af\u4e00\u6b21\u4e5f\u4f1a\u5f88\u6162. 3> \u6309\u7167\u670d\u52a1\u7aef\u4ee3\u7801\u7684\u8fd0\u884c\u903b\u8f91, accept\u8be2\u95eeOS\u6709\u65e0\u8fde\u63a5,\u82e5\u6ca1\u6709,\u5c31\u53bb\u5e72\u901a\u4fe1\u5faa\u73af\u7684\u6d3b\u4e86.. \u5728\u5e72\u901a\u8baf\u5faa\u73af\u7684\u6d3b\u7684\u8fc7\u7a0b\u4e2d,\u65b0\u7684\u8fde\u63a5\u6765\u5566,\u6ca1\u6709\u5f97\u5230\u53ca\u65f6\u7684\u5904\u7406!! \u5bfc\u81f4\u6574\u4f53\u6570\u636e\u541e\u5410\u91cf\u7684\u964d\u4f4e! \u4e0d\u80fd\u53ca\u65f6\u53cd\u9988\u5ba2\u6237\u7aef\u7684\u4fe1\u606f! \u6269\u5c55\u9605\u8bfb\u94fe\u63a5: `https://blog.csdn.net/pythontide/article/details/109242386 \u6ce8\u610fsend()\u89e6\u53d1BlockingIOError\u5f02\u5e38\u7684\u6761\u4ef6,\u5e76\u4e0d\u662f\u8bf4\u5199\u4e2asend\u4ee3\u7801\u5c31\u4f1a\u89e6\u53d1\u5f02\u5e38.. \u540e\u6587\u7684\u591a\u8def\u590d\u7528IO\u4e2d\u4e5f\u6709\u5bf9send\u64cd\u4f5c\u963b\u585e\u7684\u89e3\u91ca!! \u591a\u8def\u590d\u7528IO!! \u00b6 IO multiplexing; \u6709\u4e9b\u5730\u65b9\u4e5f\u79f0\u8fd9\u79cdIO\u65b9\u5f0f\u4e3a\u4e8b\u4ef6\u9a71\u52a8IO(event driven IO) \u539f\u7406 \u00b6 \u56fe6.3 I/O\u591a\u8def\u590d\u7528\u6a21\u578b \u8fdb\u7a0b\u5728select\u8c03\u7528\u4e2d\u963b\u585e,\u7b49\u5f85\u53ef\u80fd\u7684\u591a\u4e2a\u5957\u63a5\u5b57\u4e2d\u7684\u4e00\u4e2a\u53d8\u5f97\u53ef\u8bfb; \u5c06\u6570\u636e\u590d\u5236\u5230\u5e94\u7528\u7a0b\u5e8f\u7684\u7f13\u51b2\u533a. 1> wait data\u9636\u6bb5. \u5728\u963b\u585e\u4e0e\u975e\u963b\u585eIO\u6a21\u578b\u4e2d, \u662f\u5e94\u7528\u7a0b\u5e8f\u7684\u5957\u63a5\u5b57\u5bf9\u8c61\u76f4\u63a5\u8c03\u7528 recv\u3001recvfrom\u3001accept \u53d1\u8d77\u7cfb\u7edf\u8c03\u7528\u8bf7\u6c42\u7684, \u5728IO\u591a\u8def\u590d\u7528\u6a21\u578b\u4e2d, \u662f\u901a\u8fc7select\u6a21\u5757\u53d1\u8d77\u7684. \u8be5\u7cfb\u7edf\u8c03\u7528\u4f1a\u95ee\u64cd\u4f5c\u7cfb\u7edf\u6709\u65e0\u6570\u636e; 2> select\u6a21\u5757\u5e2e\u6211\u4eec\u7ba1\u7406\u7740\u4e00\u5806\u5957\u63a5\u5b57, select\u53d1\u8d77\u7cfb\u7edf\u8c03\u7528\u95eeOS,\u8fd9\u5806socket\u4e2d\u6709\u65e0\u51c6\u5907\u597d\u6570\u636e\u7684, \u4f1a\u963b\u585e\u4f4f! (\u53ef\u4ee5\u8bbe\u7f6etimeout) \u5f53\u6709\u6570\u636e\u5230\u8fbe\u4e86OS\u7f13\u5b58\u65f6, \u89e3\u9664\u963b\u585e, \u5c06\u51c6\u5907\u597d\u6570\u636e\u7684socket\u901a\u77e5\u7ed9 \u7528\u6237/\u5e94\u7528\u7a0b\u5e8f \u8fdb\u7a0b.. 3> \u63a5\u7740\u8fdb\u5165 copy data\u9636\u6bb5, \u5e94\u7528\u7a0b\u5e8f\u5c06\u90a3\u4e9b\u6709\u6570\u636e\u5230\u8fbe\u7684socket\u5bf9\u8c61\u901a\u8fc7recvfrom \u5e76\u53d1 \u7684\u53d1\u8d77\u7cfb\u7edf\u8c03\u7528, \u56e0\u4e3aselect\u5df2\u7ecf\u5e2e\u5fd9\u95ee\u4e86, \u6240\u4ee5 \u4e0d\u4f1a\u963b\u585e, \u8be5\u7cfb\u7edf\u8c03\u7528\u4f1a\u76f4\u63a5\u5c06\u6570\u636e\u4eceOS\u5185\u6838\u590d\u5236\u5230\u5e94\u7528\u7a0b\u5e8f\u5185\u5b58.\u901f\u5ea6\u4f1a\u5f88\u5feb. \u518d\u63d0\u9192\u4e00\u70b9 , \u5e94\u7528\u7a0b\u5e8f\u53d1\u8d77\u7684recv\u7b49\u6536\u6d88\u606f\u7684\u64cd\u4f5c : 1 > \u963b\u585e\u6a21\u578b\u7684IO\u64cd\u4f5c\u4f1a\u7ecf\u5386\u4e24\u4e2a\u9636\u6bb5 , \u4e24\u4e2a\u9636\u6bb5\u90fd\u4f1ablock . 2 > \u975e\u963b\u585e\u6a21\u578b\u5f53socket\u5bf9\u8c61\u7684IO\u64cd\u4f5c ( accept \u3001 recv ) \u5728OS\u7f13\u5b58\u4e2d\u6ca1\u6709\u76f8\u5e94\u7684\u6570\u636e\u65f6 , \u6682\u4e14\u53ea\u7ecf\u5386wait data\u9636\u6bb5 \u4f46\u4e0d\u4f1a\u963b\u585e . \u4f1a\u5728\u8fd9\u671f\u95f4\u505a\u5176\u5b83\u7684\u6d3b ! ( \u901a\u8fc7\u975e\u963b\u585eIO\u7684\u4ee3\u7801\u5b9e\u73b0 , \u53ef\u4ee5\u770b\u5230accept \u3001 recv\u505a\u7684\u5176\u5b83\u6d3b , \u5b9e\u9645\u4e0a\u6307\u7684\u90fd\u662f\u901a\u4fe1\u5faa\u73af ) . \u5f53\u6709\u76f8\u5e94\u7684\u6570\u636e\u540e , \u8be5IO\u64cd\u4f5c\u4f1a\u518d\u7ecf\u5386copy data\u9636\u6bb5 . copy data\u9636\u6bb5\u662fblock\u7684 , \u4e0d\u53ef\u907f\u514d\u7684 . \u4f46copy data\u9636\u6bb5\u901f\u5ea6\u5f88\u5feb ! So , \u975e\u963b\u585e\u6a21\u578b\u7684IO\u64cd\u4f5c\u4e5f\u4f1a\u7ecf\u5386\u4e24\u4e2a\u9636\u6bb5 . \u7b2c\u4e00\u4e2a\u9636\u6bb5\u4e0d\u963b\u585e , \u7b2c\u4e8c\u4e2a\u9636\u6bb5\u963b\u585e . 3 > IO\u591a\u8def\u590d\u7528\u7684select\u6a21\u5757\u53ea\u4f1a\u7ecf\u5386wait data\u9636\u6bb5 !! \u8be2\u95ee\u64cd\u4f5c\u7cfb\u7edf\u6709\u65e0\u6570\u636e . \u5e76\u4e0d\u4f1a\u771f\u6b63\u7684\u6536\u6570\u636e ! \u6548\u7387\u6bd4\u8f83 : \u975e\u963b\u585e > \u963b\u585e \u963b\u585e\u4e0e\u591a\u8def\u590d\u7528\u7684\u6548\u7387\u6bd4\u8f83\u5462 \uff1f 1 > \u5047\u8bbeselect\u53ea\u7ba1\u4e00\u4e2asocket , \u4e0e\u963b\u585e\u6a21\u578b\u76f8\u6bd4 , \u963b\u585e\u6a21\u578b\u7684\u6548\u7387\u9ad8 ! \u4ed6\u4eec\u90fd\u4f1a\u7ecf\u5386\u4e24\u4e2a\u9636\u6bb5 ( \u4e24\u4e2a\u9636\u6bb5\u90fd\u8981\u7b49 ), \u4f46\u591a\u8def\u590d\u7528\u6bd4\u963b\u585e\u591a\u4e86\u4e24\u4e2a\u8fc7\u7a0b . \u4e00\u4e2a\u662f\u6709\u6570\u636e\u5230\u8fbe\u540e , return readable\u8fd4\u56de\u7ed3\u679c , \u4ee5\u53ca recvfrom\u5728\u6570\u636e\u5230\u8fbe\u540e\u4f1a\u8fdb\u884c\u4e00\u6b21 system call . 2 > \u5047\u8bbeselect\u7ba1\u7406\u591a\u4e2asocket , \u4e0e\u963b\u585e\u6a21\u578b\u76f8\u6bd4 , IO\u591a\u8def\u590d\u7528\u6a21\u578b\u7684\u6548\u7387\u9ad8 ! \u56e0\u4e3a\u963b\u585eIO\u540c\u4e00\u65f6\u95f4\u53ea\u80fd\u95ee\u4e00\u4e2a , \u8fd9\u4e00\u4e2a\u963b\u585e\u4f4f\u4e86 , \u540e\u9762\u7684\u90fd\u8fd0\u884c\u4e0d\u4e86\u5566 . \u800c\u591a\u8def\u590d\u7528IO\u53ef\u4ee5\u4e00\u6b21\u6027\u7684\u95ee\u591a\u4e2a , \u662f\u5e76\u53d1\u7684 , \u6ca1\u6709\u6d88\u606f\u8fc7\u6765 , \u4f1a\u963b\u4f4f , \u4f46\u4e00\u4e2a\u5957\u63a5\u5b57\u963b\u4f4f\u5566 , \u4e0d\u4f1a\u5f71\u54cd\u5176\u5b83\u7684\u5957\u63a5\u5b57 . \u975e\u963b\u585e\u4e0e\u591a\u8def\u590d\u7528\u7684\u6548\u7387\u6bd4\u8f83\u5462 \uff1f \u975e\u963b\u585e\u7684\u6548\u7387\u9ad8 . \u53ef\u4ee5\u4ed4\u7ec6\u54c1\u4e00\u54c1 , \u975e\u963b\u585eIO\u4e0eselect\u7684\u5de5\u4f5c\u6d41\u7a0b\u5f88\u50cf ! \u4f46\u975e\u963b\u585eIO\u662f\u5e94\u7528\u7a0b\u5e8f\u5728\u95ee , \u591a\u8def\u590d\u7528\u662fselect\u5728\u95ee . IO\u591a\u8def\u590d\u7528\u8be2\u95ee\u5b8c\u540e , \u8981\u8fd4\u56de\u90a3\u4e9b\u6709\u6570\u636e\u7684\u5957\u63a5\u5b57 , \u57fa\u4e8e\u8fd9\u4e9b\u51c6\u5907\u597d\u7684\u5957\u63a5\u5b57\u518d\u53d1\u8d77\u8bf7\u6c42 . \u4f46\u4e3a\u4f55\u4e0d\u7528\u975e\u963b\u585eIO\u6a21\u578b\u5462 \uff1f \u56e0\u4e3a\u975e\u963b\u585e\u7684cpu\u5360\u7528\u7387\u5f88\u9ad8 . \u5b83\u4f1a\u4e0d\u95f4\u65ad\u7684\u8be2\u95ee ! \u800c\u591a\u8def\u590d\u7528IO\u4e2dselect . select () \u5904\u4f1a\u963b\u585e\u4f4f !! \u7b49\u5f85\u6570\u636e ( \u94fe\u63a5 \u3001 \u6d88\u606f ) \u53d1\u8fc7\u6765 . \u6211\u4eec\u4e5f\u53ef\u4ee5\u7ed9\u591a\u8def\u590d\u7528\u4e2d\u7684select\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4 . \u5728\u8d85\u65f6\u65f6\u95f4\u91cc\u6765\u6570\u636e\u4e86\u6216\u8005\u8d85\u65f6\u65f6\u95f4\u5230\u4e86 , \u90fd\u4f1a\u63a5\u89e6\u963b\u585e ! \u90a3\u975e\u963b\u585eIO\u6a21\u578b\u5728\u8be2\u95ee\u65f6\u52a0\u4e2atime . sleep ( 3 ) \u4e0d\u5c31\u884c\u4e86\u561b ? no , \u8fd9\u6837\u5199\u6b7b\u4e86\u554a , \u5426\u7ba1\u6709\u6ca1\u6709\u6570\u636e\u6765 , \u90fd\u4f1a\u7761\u591f3\u79d2 . \u53ef\u80fd\u521a\u7761\u4e0b\u53bb0 .01 s , \u5c31\u6765\u6570\u636e\u4e86 .. \u4ee3\u7801\u5b9e\u73b0 \u00b6 \u521d\u63a2select.select() \u00b6 select\u6a21\u5757\u8be2\u95ee\u64cd\u4f5c\u7cfb\u7edf\u6211\u7ef4\u62a4\u7684\u5217\u8868\u91cc\u54ea\u4e9b\u5957\u63a5\u5b57\u6709\u6d88\u606f/\u6570\u636e\u8fc7\u6765\u5566! \u6709\u56db\u4e2a\u53c2\u6570: 1> rlist -- \u4e0e\u6536\u6d88\u606f\u6709\u5173\u7684\u5957\u63a5\u5b57\u5bf9\u8c61 server\u4e13\u95e8\u5efa\u7acb\u94fe\u63a5\u3001\u4e00\u5806conn\u4e13\u95e8\u6536\u6d88\u606f socket()\u5b9e\u4f8b\u5316\u7684server\u53ef\u901a\u8fc7accept\u65b9\u6cd5\u5efa\u7acb\u94fe\u63a5conn; conn\u53ef\u4ee5\u8c03\u7528recv\u65b9\u6cd5\u6536\u5230\u6d88\u606f. Ps: \u53ef\u4ee5\u6253\u5370server\u548c\u94fe\u63a5conn,\u53ef\u4ee5\u770b\u5230\u5b83\u4eec\u90fd\u662f \u5957\u63a5\u5b57\u5bf9\u8c61 2> wlist -- \u4e0e\u5199\u6570\u636e\u76f8\u5173\u7684\u5957\u63a5\u5b57 conn conn.send() \u82e5\u6570\u636e\u91cf\u5c0fIO\u65f6\u95f4\u5ffd\u7565\u4e0d\u8ba1;\u82e5\u6570\u636e\u91cf\u5927\u4e5f\u4f1a\u611f\u89c9\u5230\u7b49\u5f85 3> xlist -- \u8ddf\u5f02\u5e38\u6709\u5173,\u7528\u4e0d\u5230 \u4f46\u8fd9\u91cc\u8fd8\u662f\u5f97\u4f20\u503c 4> timeout -- \u8d85\u65f6\u65f6\u95f4,\u662f\u53ef\u9009\u7684\u53c2\u6570,\u9ed8\u8ba4\u503c\u4e3aNone \u6307\u5b9a\u4e00\u4e2a\u65f6\u95f4(s),\u82e5\u5728\u8be5\u65f6\u95f4\u5185\u5f97\u5230\u4e86OS\u8fd4\u56de\u7ed3\u679c\u6216\u8005\u65f6\u95f4\u5230\u4e86\u6ca1\u7ed3\u679c,\u90fd\u4f1a\u7ee7\u7eed\u8fd0\u884c\u4e0b\u9762\u7684\u4ee3\u7801!! \u89e3\u51b3\u4e86\u975e\u963b\u585eIO\u6a21\u578b\u4e2d\u4e0d\u505c\u7684\u8be2\u95ee,\u4e2d\u95f4\u6ca1\u6709\u4efb\u4f55\u7684\u963b\u585e\u5bfc\u81f4cpu\u6709\u5927\u91cf\u65f6\u95f4\u662f\u65e0\u6548\u5360\u7528\u7684\u95ee\u9898! \u6ca1\u6709\u5fc5\u8981\u6307\u5b9atimeout\u53c2\u6570,select.select()\u662f\u7b49OS\u6709\u8fd4\u56de\u7ed3\u679c;\u4e0d\u662f\u4e0d\u95f4\u65ad\u7684\u8be2\u95ee.. select.select()\u4f1a\u963b\u585e\u4f46\u8be5\u963b\u585e\u662f\u5408\u7406\u7684, \u56e0\u4e3a\u6ca1\u6570\u636e\u5c31\u8be5\u539f\u5730\u7b49\u7740,\u4f46\u6709\u6570\u636e\u5c31\u4e0d\u4f1a\u963b\u585e\u4e86!! \u8fd4\u56de\u503c: \u8fd4\u56de\u4e09\u4e2a\u5217\u8868, \u91cc\u9762\u53ea\u5b58\u653e \u6709\u6570\u636e\u7684/\u51c6\u5907\u597d\u7684 \u5957\u63a5\u5b57\u5bf9\u8c61 \"\"\" \u2605 -- \u5ba2\u6237\u7aef\u4ee3\u7801 \"\"\" import os from socket import * client = socket ( AF_INET , SOCK_STREAM ) client . connect (( \"127.0.0.1\" , 8080 )) while True : msg = \" %s hello\" % os . getpid () client . send ( msg . encode ( 'utf-8' )) data = client . recv ( 1024 ) print ( data . decode ( 'utf-8' )) \"\"\" \u2605 -- \u670d\u52a1\u7aef\u4ee3\u7801 \"\"\" import select from socket import * server = socket ( AF_INET , SOCK_STREAM ) server . bind (( \"127.0.0.1\" , 8080 )) server . listen ( 5 ) server . setblocking ( False ) read_list = [ server , ] write_list = [] while True : # -- rl\u5217\u8868\u91cc\u7684\u5c31\u662fserver\u8fd9\u4e2a\u5957\u63a5\u5b57\u5bf9\u8c61,\u56e0\u4e3a\u53ea\u6709\u5b83\u6709\u5bf9\u5e94\u7684\u6570\u636e rl , wl , xl = select . select ( read_list , write_list , []) # print(rl[0] is server) # -- True # print(rl, wl, xl) # -- [<socket.socket fd=3, family=AddressFamily.AF_INET, # type=SocketKind.SOCK_STREAM, proto=0, # laddr=('127.0.0.1', 8080)>] [] [] print ( \"++++++\" ) \u542f\u52a8\u670d\u52a1\u7aef,\u518d\u542f\u52a8\u5ba2\u6237\u7aef.\u53ef\u4ee5\u53d1\u73b0 \u670d\u52a1\u7aef\u7684\u63a7\u5236\u53f0 \u4e00\u76f4\u4e0d\u505c\u7684\u6253\u5370 \"++++++\". \u4e3a\u4f55? 1> \u4e00\u5f00\u59cb\u542f\u52a8\u670d\u52a1\u7aef\u65f6,\u662f\u963b\u585e\u5728select.select()\u5904\u7684.. \u56e0\u4e3aselect\u76d1\u542c\u5230OS\u7f13\u5b58\u4e2d\u6ca1\u6709\u6570\u636e 2> \u63a5\u7740\u542f\u52a8\u5ba2\u6237\u7aef,\u53d1\u9001\u4e86\u4e00\u4e2a\u94fe\u63a5\u8bf7\u6c42\u5230\u670d\u52a1\u7aef\u6240\u5728\u673a\u5668\u7684OS\u7f13\u5b58\u4e2d. select\u6a21\u5757\u76d1\u542c\u5230read_list\u8bfb\u5217\u8868\u4e2d\u7684server\u5957\u63a5\u5b57\u6709\u6d88\u606f\u8fc7\u6765 (\u5728OS\u7f13\u5b58\u4e2d\u6709\u5bf9\u5e94\u7684\u94fe\u63a5\u6570\u636e) ,\u4e0d\u518d\u963b\u585e,\u7ee7\u7eed\u6267\u884c\u4e0b\u4e00\u884c\u4ee3\u7801. print(\"++++++\") 3> \u56e0\u4e3awhile True\u7684\u5b58\u5728.\u5faa\u73af\u5f80\u590d\u8fc7\u7a0b\u4e2d, \u56e0\u4e3a OS\u7f13\u5b58\u4e2d\u7684\u8bf7\u6c42\u94fe\u63a5\u6ca1\u6709\u88ab\u53d6\u8d70 (\u5e94\u8c03\u7528accept\u65b9\u6cd5\u53d6\u8d70server\u5957\u63a5\u5b57\u5bf9\u5e94\u7684\u94fe\u63a5\u6570\u636e) , OS\u7f13\u5b58\u4e2d\u4e00\u76f4\u6709\u6570\u636e, \u6240\u4ee5select.select()\u4e0d\u4f1a\u963b\u585e. \u5982\u679cselect.select()\u4e0d\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4,\u4ec0\u4e48\u65f6\u5019\u963b\u585e\u5728\u539f\u5730? select\u6a21\u5757\u7ef4\u62a4\u7740\u4e00\u5806\u5957\u63a5\u5b57,\u53bb\u95eeOS\u65f6,\u95ee\u8fd9\u4e9b\u5957\u63a5\u5b57\u6709\u65e0\u5bf9\u5e94\u7684\u6570\u636e\u51c6\u5907\u597d,\u82e5\u6ca1\u6709\u5c31\u4f1a\u4e00\u76f4\u5728\u539f\u5730\u7b49\u7740!select\u4f1a\u4e00\u76f4\u95ee.\u76f4\u5230\u6709\u6570\u636e\u51c6\u5907\u597d,\u4e0d\u518d\u963b\u585e. \u6ce8\u610f!!!!!! \u5e94\u7528\u7a0b\u5e8fselect.select()\u53d1\u8d77\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\u540e, \u662f\u64cd\u4f5c\u7cfb\u7edf\u5728 \u904d\u5386 read_list\u770b\u91cc\u9762\u7684\u5957\u63a5\u5b57\u5bf9\u8c61\u5728OS\u7f13\u5b58\u91cc\u6709\u65e0\u5bf9\u5e94\u6570\u636e,\u4f1a\u5c06\u51c6\u5907\u597d\u6570\u636e\u7684\u5957\u63a5\u5b57\u5bf9\u8c61\u8fd4\u56de!! \u76f8\u5f53\u4e8eselect.select()\u662f\u4e00\u4e2a\u8bfb\u64cd\u4f5c,OS\u7cfb\u7edf\u53bb\u95ee\u8fd9\u4e9b\u5957\u63a5\u5b57\u662f\u5426\u51c6\u5907\u597d\u6570\u636e..\u6709\u51c6\u5907\u597d\u7684\u624d\u4f1a\u6709\u8fd4\u56de\u7ed3\u679c... Q: select.select()\u91cc\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\u4e3a3\u79d2,\u4e0e\u975e\u963b\u585eIO\u6a21\u578b\u91cc\u8bbe\u7f6e\u4e00\u4e2atime.sleep(3)\u662f\u4e00\u56de\u4e8b\u5417? A: no! \u5047\u8bbe0.1s\u5c31\u6765\u6570\u636e\u4e86,\u524d\u8005\u53ea\u4f1a\u7b490.1; \u540e\u8005\u4f1a\u7b49\u6ee13s!! Ps \u90a3\u6267\u884c\u5b8cselect.select(),\u5728\u6267\u884c\u5176\u5b83\u4ee3\u7801\u65f6\u6765\u6570\u636e\u4e86\u548b\u6574? \u6ca1\u6709\u529e\u6cd5,\u673a\u5236\u5c31\u662f\u8fd9\u6837\u7684!!\u53ea\u4e0d\u8fc7\u5176\u5b83\u4ee3\u7801\u90fd\u662f\u5927\u91cf\u7684\u8ba1\u7b97,\u901f\u5ea6\u5f88\u5feb!! \u5b9e\u73b0\u4e0d\u505c\u7684\u5efa\u94fe\u63a5 \u00b6 \u80fd\u591f\u5b9e\u73b0\u4e0d\u505c\u7684\u5efa\u7acb\u94fe\u63a5,\u5efa\u7acb\u94fe\u63a5\u7684\u963b\u585e\u64cd\u4f5c\u4e0d\u4f1a\u5f71\u54cd\u901a\u4fe1(\u5373\u5df2\u5efa\u597d\u7684\u94fe\u63a5\u6536\u6d88\u606f\u7684\u64cd\u4f5c\u4e0d\u4f1a\u963b\u585e\u4f4f)!! \"\"\" \u2605 -- \u5ba2\u6237\u7aef\u4ee3\u7801 \"\"\" from socket import * client = socket ( AF_INET , SOCK_STREAM ) client . connect (( \"127.0.0.1\" , 8080 )) while True : msg = input ( \">>:\" ) . strip () # -- \u8fd9\u91cc\u6539\u52a8\u4e86\u4e0b,\u4fbf\u4e8e\u5b9e\u9a8c client . send ( msg . encode ( 'utf-8' )) data = client . recv ( 1024 ) print ( data . decode ( 'utf-8' )) \"\"\" \u2605 -- \u670d\u52a1\u7aef\u4ee3\u7801 \"\"\" import select from socket import * server = socket ( AF_INET , SOCK_STREAM ) server . bind (( \"127.0.0.1\" , 8080 )) server . listen ( 5 ) server . setblocking ( False ) read_list = [ server , ] write_list = [] while True : rl , wl , xl = select . select ( read_list , write_list , []) print ( \"read_list: %s rl: %s wl: %s \" % ( len ( read_list ), len ( rl ), len ( wl ))) for sk in rl : if sk == server : conn , addr = sk . accept () # -- \u53d6\u51faserver\u5bf9\u5e94\u7684\u94fe\u63a5\u6570\u636e,\u5b8c\u6210\u4e09\u6b21\u63e1\u624b\u5efa\u7acb\u94fe\u63a5 read_list . append ( conn ) # -- \u522b\u5fd8\u4e86\u5c06conn\u4ea4\u7ed9select\u76d1\u7ba1 else : # -- \u6536\u6d88\u606f pass 1> \u5148\u542f\u52a8\u670d\u52a1\u7aef,server\u5957\u63a5\u5b57\u6ca1\u6709\u6570\u636e\u51c6\u5907\u597d,\u963b\u585e\u5728select.select()\u5904; 2> \u542f\u52a8\u5ba2\u6237\u7aef0,\u53d1\u9001\u4e86\u4e00\u4e2aconnect\u94fe\u63a5\u8bf7\u6c42\u5230\u670d\u52a1\u7aef,select\u6a21\u5757\u76d1\u6d4b\u5230\u5566,\u89e3\u9664\u963b\u585e,\u5f80\u4e0b\u8fd0\u884c\u4ee3\u7801.\u6b64\u65f6read_list\u4e2d\u8fd8\u662f\u53ea\u6709server\u8fd9\u4e2a\u5957\u63a5\u5b57\u5bf9\u8c61,rl\u5217\u8868\u7684\u957f\u5ea6\u4e3a1,\u5b58\u653e\u7684\u5c31\u662f\u5957\u63a5\u5b57\u5bf9\u8c61server,\u8868\u660e\u5b83\u7684 \u6570\u636e \u51c6\u5907\u597d\u4e86; 3> server\u5957\u63a5\u5b57\u5bf9\u8c61\u8c03\u7528accept\u65b9\u6cd5\u53d6\u51faOS\u7f13\u5b58\u4e2d\u7684\u94fe\u63a5, \u5e76\u8fd4\u56de\u4e86\u4e00\u4e2aconn\u5957\u63a5\u5b57\u5bf9\u8c61. \u5c06conn\u5957\u63a5\u5b57\u5bf9\u8c61\u6dfb\u52a0\u5230read_list\u4e2d,\u4ee5\u4fbf\u5f97\u5230select\u6a21\u5757\u7684\u76d1\u542c; \u6b64\u65f6read_list\u5217\u8868\u7684\u957f\u5ea6\u4e3a2,rl\u5217\u8868\u7684\u957f\u5ea6\u4e3a0(\u88ab\u53d6\u8d70\u4e86).. 4> \u542f\u52a8\u5ba2\u6237\u7aef1,\u540c\u7406,rl\u5217\u8868\u7684\u957f\u5ea6\u91cd\u65b0\u53d8\u4e3a1.. \u518d\u542f\u52a8\u5ba2\u6237\u7aef2,\u4ee5\u6b64\u7c7b\u63a8.. \u6700\u540e,\u670d\u52a1\u7aef\u963b\u585e\u5728select.select()\u5904,\u6b64\u65f6, read_list = [server,conn0,conn1,conn2],rl = [] (\u8fd9\u662f\u4f2a\u4ee3\u7801) \u6ce8\u610f, \u7a0b\u5e8f\u4e2d\u7684conn\u8ddf\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u4e00\u6837,\u5360\u7528\u4e24\u65b9\u9762\u7684\u8d44\u6e90,\u5e94\u7528\u7a0b\u5e8f\u7684\u8d44\u6e90(conn\u53d8\u91cf\u540d)\u4ee5\u53ca\u64cd\u4f5c\u7cfb\u7edf\u7684\u8d44\u6e90(\u5bf9\u5e94OS\u91cc\u7ef4\u62a4\u7684\u4e00\u4e2aTCP\u94fe\u63a5)... server\u5957\u63a5\u5b57\u5bf9\u8c61\u540c\u7406. \u8be5\u7a0b\u5e8f\u4e2d\u670d\u52a1\u7aef\u8fdb\u6765\u7684\u53ea\u6709\u94fe\u63a5,\u6240\u4ee5rl\u7684\u957f\u5ea6\u4e00\u76f4\u662f1..(\u51c6\u5907\u597d\u7684\u5957\u63a5\u5b57\u5bf9\u8c61\u53ea\u6709\u4e00\u4e2a) Ps: \u5ba2\u6237\u7aef\u53d1\u5b8cconnect\u94fe\u63a5\u8bf7\u6c42\u540e,\u5c31\u963b\u585e\u5728input()\u5904\u4e86.. \u6536\u53d1\u6d88\u606f\u7684\u601d\u8003 \u00b6 ... ... while True : rl , wl , xl = select . select ( read_list , write_list , []) for sk in rl : if sk == server : conn , addr = sk . accept () read_list . append ( conn ) else : # -- \u6536\u6d88\u606f data = sk . recv ( 1024 ) sk . send ( data . upper ()) \u5efa\u7acb\u5b8c\u94fe\u63a5\u540e,\u5ba2\u6237\u7aef0-2\u4f9d\u6b21\u5411\u670d\u52a1\u7aef\u53d1\u6d88\u606f.. \u7ed3\u679c\u5982\u4e0b: Q: \u5ba2\u6237\u7aef\u6536\u53d1\u6d88\u606f\u8fd9\u6837\u5199,\u4e5f\u80fd\u5b9e\u73b0\u591a\u4e2a\u5ba2\u6237\u7aef\u7684\u5e76\u53d1!! \u4f46\u5b58\u5728\u4ec0\u4e48\u95ee\u9898\u5462? (\u5ba2\u6237\u7aef\u53d1\u7a7a\u6570\u636e\u3001\u5ba2\u6237\u7aef\u7a81\u7136\u65ad\u5f00\u3001\u7c98\u5305\u73b0\u8c61\u8fd9\u4e9b\u90fd\u6682\u4e14\u4e0d\u8003\u8651) A: \u8981\u7ed9\u4e00\u5806\u5957\u63a5\u5b57\u56de\u590d\u4fe1\u606f,send\u64cd\u4f5c\u4e5f\u5c5e\u4e8e\u4e00\u79cdIO\u884c\u4e3a,\u901f\u5ea6\u5f88\u5feb!\u5b83\u4f1a\u5c06\u5e94\u7528\u7a0b\u5e8f\u5185\u5b58\u7684\u6570\u636e\u62f7\u8d1d\u5230OS\u7f13\u5b58\u4e2d,OS\u7684\u7f13\u5b58\u5927\u5c0f\u603b\u5f52\u662f\u6709\u9650\u5236\u7684(\u5185\u5b58\u7684\u4e00\u5c0f\u90e8\u5206\u4f5c\u4e3a\u7f13\u5b58). \u82e5OS\u7f13\u5b58\u6ee1\u4e86,\u5c31send\u4e0d\u8fdb\u6570\u636e\u4e86.. \u5c31\u9700\u8981\u539f\u5730\u7b49\u7740,\u7b49OS\u5c06\u8fd9\u4e9b\u6570\u636e\u53d1\u9001\u540e,\u7f13\u5b58\u7a7a\u95f2\u4e86,\u624d\u80fd\u7ee7\u7eed\u8fdb\u884csend\u64cd\u4f5c!! \u4e0d\u5e94\u8be5\u56e0\u4e3asend\u64cd\u4f5c\u8ba9\u7a0b\u5e8f\u9677\u5165\u963b\u585e. \u5b8c\u6574\u7248 \u00b6 \u6709\u6ca1\u6709\u53ef\u80fd\u5bfc\u81f4cpu\u7684\u5360\u7528\u7387\u5f88\u9ad8? \u5ba2\u6237\u7aef\u4eec\u4e0d\u505c\u7684\u5411\u670d\u52a1\u7aef\u53d1\u6d88\u606f,\u670d\u52a1\u7aef\u4e0d\u505c\u7684\u53d6\u6570\u636e\u8ba1\u7b97.. \u4f46\u8fd9\u662f\u6709\u6548\u7684cpu\u5360\u7528!!! Ps: \u4ee5\u4e0b\u4ee3\u7801\u8fd0\u884c\u8d77\u6765,cpu\u98d9\u5347\u662f\u56e0\u4e3a,\u670d\u52a1\u7aef\u548c\u5ba2\u6237\u7aef\u90fd\u8fd0\u884c\u5728\u540c\u4e00\u53f0\u673a\u5668\u4e0a,\u5ba2\u6237\u7aef\u5728\u6b7b\u5faa\u73af\u7684\u53d1\u9001\u6d88\u606f. \"\"\" \u2605 -- \u5ba2\u6237\u7aef\u4ee3\u7801 \"\"\" import os from socket import * client = socket ( AF_INET , SOCK_STREAM ) client . connect (( \"127.0.0.1\" , 8080 )) while True : # -- \u4e0d\u505c\u7684\u7ed9\u670d\u52a1\u7aef\u53d1\u6d88\u606f Hhh msg = \" %s say hello\" % os . getpid () if not msg : continue client . send ( msg . encode ( 'utf-8' )) data = client . recv ( 1024 ) print ( data . decode ( 'utf-8' )) client . close () \"\"\" \u2605 -- \u670d\u52a1\u7aef\u4ee3\u7801 \"\"\" import select from socket import * server = socket ( AF_INET , SOCK_STREAM ) server . bind (( \"127.0.0.1\" , 8080 )) server . listen ( 5 ) server . setblocking ( False ) read_list = [ server , ] write_list = [] data_dic = {} while True : rl , wl , xl = select . select ( read_list , write_list , []) for sk in rl : if sk == server : conn , addr = sk . accept () read_list . append ( conn ) else : # -- \u6536\u6d88\u606f # data = sk.recv(1024) # write_list.append(sk) # data_dic[sk] = data try : data = sk . recv ( 1024 ) if not data : sk . close () read_list . remove ( sk ) continue write_list . append ( sk ) # -- \u6536\u5230\u6d88\u606f,\u51c6\u5907\u56de\u6d88\u606f\u624d\u52a0\u5230write_list\u4e2d\u7684! data_dic [ sk ] = data # -- \u7528\u5b57\u5178\u5efa\u7acb\u597d\u5173\u7cfb,\u5e76\u6ca1\u6709\u53d1 except ConnectionResetError : sk . close () read_list . remove ( sk ) # -- \u53d1\u6d88\u606f for sk in wl : sk . send ( data_dic [ sk ] . upper ()) data_dic . pop ( sk ) # -- \u53d1\u5b8c\u540e,\u6b64\u6570\u636e\u5c31\u6ca1\u610f\u4e49\u5566,\u5728\u6570\u636e\u5b57\u5178\u4e2d\u6e05\u9664 # -- \u56de\u5b8c\u6d88\u606f\u540e\u5220\u9664,\u4e0d\u7136\u968f\u7740\u5bf9\u540c\u4e00\u4e2a\u5ba2\u6237\u7aef\u6d88\u606f\u7684\u63a5\u6536,write_list\u4e2d\u4f1a\u6709\u5f88\u591a\u91cd\u590dsk write_list . remove ( sk ) epoll\u63a5\u53e3 \u00b6 \u9996\u5148\u8981\u660e\u767d\u4e00\u70b9, select\u6a21\u5757\u5e76\u4e0d\u80fd\u4ee3\u8868\u591a\u8def\u590d\u7528IO\u6a21\u578b.. \u5b83\u4ec5\u4ec5\u53ea\u662f\u4e00\u4e2a\u6a21\u5757! \u771f\u6b63\u652f\u6301 \u5229\u7528select\u6a21\u5757\u7684select\u63a5\u53e3\u53d1\u8d77\u7cfb\u7edf\u8c03\u7528\u7684\u591a\u8def\u590d\u7528IO\u6a21\u578b \u7684\u662f\u64cd\u4f5c\u7cfb\u7edf!! \u5305\u62ec\u524d\u9762\u7684\u975e\u963b\u585eIO\u6a21\u578b\u4e5f\u662fOS\u652f\u6301\u7684 (\u53d1\u8d77\u4e00\u4e2a\u8bf7\u6c42,OS\u8bf4\u6ca1\u6709,\u76f4\u63a5\u629b\u5f02\u5e38) . \u4f46\u8fd9\u79cd\u4f7f\u7528select\u63a5\u53e3\u7684\u591a\u8def\u590d\u7528IO\u6a21\u578b\u6709\u4e2a\u7f3a\u70b9!! \u82e5read_list\u4e2d\u6709\u4e00\u4e07\u4e2a\u5957\u63a5\u5b57,OS\u904d\u5386\u8be2\u95ee\u91cc\u9762\u7684\u5957\u63a5\u5b57\u7684\u6570\u636e\u51c6\u5907\u597d\u6ca1,\u524d9999\u4e2a\u90fd\u6ca1\u6709,\u90a3\u8be2\u95ee\u7684\u8fd99\u5343\u591a\u6b21\u90fd\u662f\u65e0\u7528\u7684,\u8fd9\u6837\u7684\u6548\u7387\u5f88\u4f4e\u5f88\u4f4e!! \u90a3\u5982\u4f55\u662f\u597d\u5462? select\u63a5\u53e3\u7684\u539f\u7406\u662fOS\u4e3b\u52a8\u53bb\u904d\u5386\u8fd9\u4e9b\u5957\u63a5\u5b57\u597d\u6ca1\u597d,\u5f97\u64cd\u4f5c\u7cfb\u7edf\u53bb\u95ee.\u8fd9\u6837\u6548\u7387\u4f4e. \u4f46\u5982\u679c\u8fd9\u4e9b\u5957\u63a5\u5b57\u597d\u4e86\u4e3b\u52a8\u544a\u8bc9OS,\u8fd9\u6837\u7684\u6548\u7387\u5c31\u9ad8\u4e86. \u600e\u4e48\u505a? \u7ed9\u6bcf\u4e2a\u5957\u63a5\u5b57\u5bf9\u8c61\u7ed1\u5b9a\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u56de\u8c03\u51fd\u6570\u7684\u4e1c\u897f.\u5728\u5957\u63a5\u5b57\u5bf9\u8c61\u6709\u6570\u636e\u65f6\u4e3b\u52a8\u53bb\u89e6\u53d1\u56de\u8c03\u51fd\u6570. \u6bd4\u5982list_1\u91cc\u9762\u7684\u67d0\u4e2a\u5957\u63a5\u5b57\u597d\u4e86,\u4f1a\u5c06\u5176\u5728list_1\u91cc\u7684\u7d22\u5f15\u653e\u5230list_2\u5217\u8868\u91cc. \u64cd\u4f5c\u7cfb\u7edf\u76f4\u63a5\u8fd4\u56delist_2\u5217\u8868\u7ed9\u5e94\u7528\u7a0b\u5e8f\u7528\u5c31\u884c\u5566! \u4e0d\u4f1a\u50cf\u4f7f\u7528select\u63a5\u53e3\u7684\u591a\u8def\u590d\u7528IO\u6a21\u578b\u968f\u7740\u5957\u63a5\u5b57\u4e2a\u6570\u7684\u589e\u591a\u6548\u7387\u53d8\u4f4e. --- \u8fd9\u5c31\u662fepoll\u6a21\u578b!! Ps: \u5728select\u548cepoll\u4e4b\u95f4\u8fd8\u6709\u4e00\u79cd\u63a5\u53e3,\u53eb\u505apoll.. poll\u8ddfselect\u534a\u65a4\u516b\u4e24,\u53ea\u4e0d\u8fc7poll\u6bd4select\u652f\u6301\u7684\u5957\u63a5\u5b57\u6570\u591a\u4e00\u70b9.\u4f9d\u65e7\u6ca1\u6709\u6539\u53d8select\u7684\u672c\u8d28,\u8fd8\u662fOS\u4e00\u4e2a\u4e2a\u7684\u53bb\u904d\u5386!! \u6ce8\u610f: epoll\u6a21\u578b windows\u4e0d\u652f\u6301! \u57fa\u4e8e\u7f51\u7edc\u901a\u4fe1\u7684\u8f6f\u4ef6\u5c31\u662f\u5957\u63a5\u5b57\u8f6f\u4ef6,\u901a\u5e38\u5957\u63a5\u5b57\u670d\u52a1\u7aef\u8f6f\u4ef6\u90fd\u662f\u8fd0\u884c\u5728linux\u4e4b\u4e0a!! linux\u652f\u6301epoll\u6a21\u578b. nginx\u91cc\u7684\u5355\u7ebf\u7a0b\u5c31\u662f\u57fa\u4e8eepoll\u6765\u89e3\u51b3IO\u95ee\u9898\u7684. \u6240\u4ee5,nginx\u8fd0\u884c\u5728window\u4e0a\u6548\u7387\u4f1a\u5927\u6253\u6298\u6263. \u6269\u5c55: \u57fa\u4e8eselectors\u6a21\u5757\u5199\u7684\u4ee3\u7801\u4f1a\u6839\u636e\u5f53\u524d\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e0d\u540c\u9009\u62e9\u64cd\u4f5c\u7cfb\u7edf\u6240\u652f\u6301\u7684\u63a5\u53e3(select/poll/epoll).. \u53c2\u8003\u94fe\u63a5 - https://www.cnblogs.com/linhaifeng/articles/7454717.html#_label7 \u5f02\u6b65IO \u00b6 Asynchronous I/O \u6548\u7387\u6700\u9ad8\u7684\u4e00\u79cd!! \u56fe6.5 \u5f02\u6b65I/O\u6a21\u578b \u8fdb\u7a0b\u7ee7\u7eed\u6267\u884c 1> \u7528\u6237\u8fdb\u7a0b\u53d1\u8d77read\u64cd\u4f5c\u4e4b\u540e(\u4ec5\u4ec5\u5c31\u53d1\u4e86\u4e2a\u4fe1\u53f7\u7ed9OS), \u7acb\u523b\u5c31\u53ef\u4ee5\u5f00\u59cb\u53bb\u505a\u5176\u5b83\u7684\u4e8b. 2> \u53e6\u4e00\u65b9\u9762, \u4ecekernel\u7684\u89d2\u5ea6, \u5f53\u5b83\u53d7\u5230\u4e00\u4e2aasynchronous read\u4e4b\u540e, \u9996\u5148\u5b83\u4f1a\u7acb\u523b\u8fd4\u56de. \u6240\u4ee5\u4e0d\u4f1a\u5bf9\u7528\u6237\u8fdb\u7a0b\u4ea7\u751f\u4efb\u4f55block. 3> kernel\u4f1a\u7ecf\u5386wait data\u3001copy data\u9636\u6bb5 -- \u7b49\u5f85\u6570\u636e\u51c6\u5907\u5b8c\u6210, \u7136\u540e\u5c06\u6570\u636e\u62f7\u8d1d\u5230\u7528\u6237\u5185\u5b58 4> \u5f53\u8fd9\u4e00\u5207\u90fd\u5b8c\u6210\u4e4b\u540e, kernel\u4f1a\u7ed9\u7528\u6237\u8fdb\u7a0b\u53d1\u9001\u4e00\u4e2asignal, \u544a\u8bc9\u5b83read\u64cd\u4f5c\u5b8c\u6210\u4e86!! Ps: \u524d\u7aef\u7684Ajax\u5c31\u662f\u5178\u578b\u7684\u5e94\u7528\u5f02\u6b65IO\u7684\u573a\u666f!! \u2605 -- \u6548\u7387\u6bd4\u8f83 \u963b\u585eIO : \u53d1\u5b8c\u8bf7\u6c42\u540e , \u5c31\u5728\u539f\u5730\u7b49\u7740 , \u6ca1\u4ec0\u4e48\u597d\u6bd4\u7684 \u975e\u963b\u585eIO : \u53ea\u662f\u89e3\u51b3\u4e86wait data\u9636\u6bb5\u7684IO\u95ee\u9898 , copy data\u9636\u6bb5\u7684IO\u662f\u6ca1\u6709\u89e3\u51b3\u7684 . IO\u591a\u8def\u590d\u7528 : \u4e0d\u8003\u8651cpu\u5360\u7528\u7387 , IO\u591a\u8def\u590d\u7528\u7684\u6548\u7387\u6bd4\u975e\u963b\u585eIO\u4f4e ; \u56e0\u4e3a\u76f8\u6bd4\u4e4b\u4e0b , IO\u591a\u8def\u590d\u7528\u8fd8\u591a\u4e86 return readable \u548c system call \u4e24\u4e2a\u6b65\u9aa4 . \u4f46\u4e0d\u4f7f\u7528\u975e\u963b\u585eIO , \u662f\u56e0\u4e3a\u975e\u963b\u585eIO\u5927\u91cf\u7684\u65e0\u6548\u5360\u7528CPU . \u5f02\u6b65IO : OS\u5e2e\u5fd9\u7ecf\u5386\u4e24\u4e2a\u9636\u6bb5 -- \u6548\u7387\u6700\u9ad8 !! \u6ce8\u610f ~ \u8fd9\u4e9bIO\u6a21\u578b\u7684\u5b9e\u73b0\u90fd\u5f97OS\u652f\u6301\u624d\u884c . \u5f02\u6b65IO\u7684\u4ee3\u7801\u5b9e\u73b0\u6682\u4e14\u7565\u8fc7,\u5728\u722c\u866b\u8bfe\u7a0b\u4e2d\u4f1a\u8be6\u7ec6\u8bb2\u89e3!","title":"\u7f51\u7edcIO\u6a21\u578b"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/13_%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B/#io","text":"IO Model\u4e00\u5171\u53ef\u4ee5\u5206\u4e3a5\u79cd: 1> blocking IO \u963b\u585eIO 2> nonblocking IO \u975e\u963b\u585eIO 3> IO multiplexing IO\u591a\u8def\u590d\u7528 4> signal driven IO \u4fe1\u53f7\u9a71\u52a8IO (\u4e0d\u5e38\u7528,\u672c\u8282\u4e0d\u4f1a\u8fdb\u884c\u76f8\u5173\u9610\u8ff0) 5> asynchronous IO \u5f02\u6b65IO \u7f51\u7edc\u7f16\u7a0b(TCP\u3001UDP)\u4e2d\u6d89\u53ca\u5230\u7684IO\u64cd\u4f5c: I/O \u670d\u52a1\u7aef \u5ba2\u6237\u7aef \u6536/\u8f93\u5165/input \u4e0a:TCP \u4e0b:UDP accept\u3001recv recvfrom recv recvfrom \u53d1/\u8f93\u51fa/output \u4e0a:TCP \u4e0b:UDP send sendto connect\u3001send sendto \u5176\u5b83\u8f93\u5165\u64cd\u4f5c: read\u3001readv\u3001recvmsg; \u5176\u5b83\u8f93\u51fa\u64cd\u4f5c: write\u3001writev\u3001sendmsg \u5f53I/O\u53d1\u751f\u65f6,\u4f1a\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5: 1> wait data -- \u7b49\u5f85\u6570\u636e\u51c6\u5907 (Waiting for the data to be ready) 2> copy data -- \u5c06\u6570\u636e\u4ece\u5185\u6838\u62f7\u8d1d\u5230\u8fdb\u7a0b\u4e2d (Copying the data from the kernel to the process) \u5176\u4e2d,\u6536\u6d88\u606f\u7684IO\u64cd\u4f5c\u4f1a\u7ecf\u5386\u4e0a\u9762\u4e24\u4e2a\u9636\u6bb5,\u53d1\u6d88\u606f\u53ea\u4f1a\u7ecf\u5386\u7b2c\u4e8c\u4e2acopy data\u7684\u9636\u6bb5! wait data\u7ed3\u675f,\u610f\u5473\u7740OS\u7f13\u5b58\u4e2d\u62e5\u6709\u4e86\u8be5\u6570\u636e! \u4ee5\u670d\u52a1\u7aef\u7684recv\u64cd\u4f5c\u548csend\u64cd\u4f5c\u4e3a\u4f8b: \u25b3 recv: wait data: C\u7aef\u5e94\u7528\u7a0b\u5e8f\u4ea7\u751fmsg\u6570\u636e -- \u5c06C\u7aef\u5e94\u7528\u7a0b\u5e8f\u5185\u5b58\u4e2d\u7684mag\u6570\u636e\u62f7\u8d1d\u7ed9C\u7aefOS -- C\u7aefOS\u5c06\u6570\u636e\u6cbf\u7740\u7f51\u7edc\u4f20\u8f93\u7ed9S\u7aef\u7684OS -- S\u7aefOS\u6536\u5230\u540e\u56de\u590d\u4e00\u4e2a\u786e\u8ba4\u4fe1\u606f -- C\u7aefOS\u5c06\u7f13\u5b58\u4e2d\u7684msg\u6570\u636e\u6e05\u9664 copy data: \u5c06S\u7aefOS\u7f13\u5b58\u4e2d\u7684msg\u6570\u636e\u62f7\u8d1d\u4e00\u4efd\u5230S\u7aef\u5e94\u7528\u7a0b\u5e8f\u5185\u5b58\u4e2d -- \u62f7\u8d1d\u540e,S\u7aefOS\u7f13\u5b58\u4e2d\u7684msg\u6570\u636e\u81ea\u52a8\u9500\u6bc1 \u25b3 send: copy data: \u5c06S\u7aef\u5e94\u7528\u7a0b\u5e8f\u5185\u5b58\u4e2d\u7684\u6570\u636e\u62f7\u8d1d\u5230S\u7aefOS\u7f13\u5b58\u4e2d Q: \u4e3a\u4ec0\u4e48\u7528\u6237\u80fd\u660e\u663e\u4f53\u4f1a\u5230\u6536\u6d88\u606f\u7684\u7b49\u5f85,\u800c\u53d1\u6d88\u606f\u5219\u4e0d\u4f1a\uff1f A: wait data\u9636\u6bb5\u4f1a\u7ecf\u5386\u7f51\u7edc\u5ef6\u8fdf,\u8017\u65f6\u957f ; copy data\u9636\u6bb5\u662f\u672c\u5730\u62f7\u8d1d,\u901f\u5ea6\u5f88\u5feb,\u8017\u65f6\u77ed. \u7f51\u7edcIO\u6a21\u578b\u5c06\u56f4\u7ed5\u7740\u8fd9\u4e24\u4e2a\u9636\u6bb5\u5c55\u5f00\u9610\u8ff0!","title":"IO\u6a21\u578b\u4ecb\u7ecd"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/13_%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B/#io_1","text":"blocking IO -- \u4e0d\u80fd\u5b9e\u73b0\u5e76\u53d1 \u56fe6.1 \u963b\u585eI/O\u6a21\u578b. \u8fdb\u7a0b\u5728\u8c03\u7528recvfrom\u65f6\u963b\u585e.\u56fe\u4e2d\u662f\u4ee5UDP\u7684recvfrom\u64cd\u4f5c\u4e3a\u4f8b\u7684. 1> \u5e94\u7528\u7a0b\u5e8f\u8c03\u7528\u6536\u6d88\u606f\u7684recvfrom\u63a5\u53e3,\u8be5\u63a5\u53e3\u4f1a\u53d1\u9001\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\u7ed9\u64cd\u4f5c\u7cfb\u7edf..\u95ee\u64cd\u4f5c\u7cfb\u7edf\u6709\u6ca1\u6709\u6570\u636e\u7ed9\u6211. 2> \u64cd\u4f5c\u7cfb\u7edf\u6ca1\u6709\u6570\u636e\u7ed9\u5e94\u7528\u7a0b\u5e8f,\u5e94\u7528\u7a0b\u5e8f\u5f00\u59cb\u963b\u585e,\u8fdb\u5165wait data\u9636\u6bb5,OS\u8c03\u7528\u7f51\u5361\u63a5\u6536\u6d88\u606f 3> \u76f4\u5230wait data\u7ed3\u675f,\u6570\u636e\u6765\u5230\u4e86OS\u7f13\u5b58\u4e2d 4> \u63a5\u7740\u8fdb\u5165copy data\u9636\u6bb5.\u5c06\u6570\u636e\u4eceOS\u7f13\u5b58\u62f7\u8d1d\u5230\u5e94\u7528\u7a0b\u5e8f\u5185\u5b58\u4e2d 5> \u62f7\u8d1d\u5b8c\u6210\u540e,recvfrom\u64cd\u4f5c\u7ed3\u675f [ \u7f51\u7edc\u7f16\u7a0b\u5b66\u4e60\u5386\u7a0b ] 1 > \u4e24\u4e2a\u5faa\u73af \u6211\u4eec\u521a\u63a5\u89e6\u7f51\u7edc\u7f16\u7a0b\u65f6 , \u5199\u7684\u7a0b\u5e8f\u5c31\u662f\u963b\u585eIO\u7684 . \u9047\u5230IO\u5c31\u5728\u539f\u5730\u7b49 , \u4e0d\u80fd\u5b9e\u73b0\u5e76\u53d1 , \u6548\u7387\u975e\u5e38\u4f4e . \u5177\u4f53\u56de\u987e\u4e0b : \u5199\u4e86\u4e24\u4e2a\u5faa\u73af , \u5916\u5c42\u94fe\u63a5\u5faa\u73af , \u91cc\u5c42\u901a\u4fe1\u5faa\u73af ; accept\u963b\u585e\u7ed3\u675f\u540e\u624d\u80fd\u6267\u884c\u4e0b\u4e00\u884c\u4ee3\u7801 . recv\u540c\u7406 . \u5f0a\u7aef -- \u5efa\u5b8c\u94fe\u63a5\u540e\u4e0d\u80fd\u5e72\u901a\u4fe1 , \u901a\u4fe1\u5b8c\u540e\u624d\u80fd\u91cd\u65b0\u5efa\u7acb\u4e0b\u4e00\u4e2a\u94fe\u63a5 . \u6240\u4ee5\u7684\u6d3b\u90fd\u7531\u4e00\u4e2a\u7ebf\u7a0b\u5e72 ! \u9047\u963b\u585e\u5168\u6b47\u83dc . \u5982\u5728\u8c03\u7528recv ( 1024 ) \u65f6 , \u7ebf\u7a0b\u5c06\u88ab\u963b\u585e , \u5728\u6b64\u671f\u95f4 , \u7ebf\u7a0b\u5c06\u65e0\u6cd5\u6267\u884c\u4efb\u4f55\u8fd0\u7b97\u6216\u54cd\u5e94\u4efb\u4f55\u7684\u7f51\u7edc\u8bf7\u6c42 . 2 > \u5e76\u53d1\u89e3\u51b3\u65b9\u6848 : \u591a\u8fdb\u7a0b \u3001 \u591a\u7ebf\u7a0b \u6b64\u5904\u662fIO\u5bc6\u96c6\u578b\u7684 , \u4f7f\u7528\u591a\u7ebf\u7a0b . \u8ba9\u4e3b\u7ebf\u7a0b\u4e0d\u65ad\u7684\u5efa\u7acb\u94fe\u63a5 , \u6bcf\u5efa\u7acb\u4e00\u4e2a\u94fe\u63a5\u5c31\u542f\u7528\u4e00\u4e2a\u5b50\u7ebf\u7a0b\u8d1f\u8d23\u8be5\u94fe\u63a5\u7684\u901a\u4fe1 . \u6ce8\u610f -- \u6b64\u89e3\u51b3\u65b9\u6848\u5e76\u6ca1\u6709\u5c06IO\u95ee\u9898\u89e3\u51b3 ! \u5206\u6790 -- \u8be5\u601d\u8def\u7684I / O\u95ee\u9898\u9047\u5230\u963b\u585e\u8fd8\u662f\u4f1a\u7ecf\u5386wait data\u548ccopy data\u7684\u9636\u6bb5 . \u8be5\u963b\u7684\u4e00\u4e2a\u90fd\u4e0d\u4f1a\u843d\u4e0b . \u4f46\u67d0\u4e2a\u5b50\u7ebf\u7a0b\u963b\u585e\u4e86\u5e76\u4e0d\u5f71\u54cd\u5176\u5b83\u5b50\u7ebf\u7a0b\u7684\u6267\u884c . \u5373\u591a\u7ebf\u7a0b / \u591a\u8fdb\u7a0b\u7684\u76ee\u7684\u662f\u8ba9\u6bcf\u4e2a\u8fde\u63a5\u90fd\u62e5\u6709\u72ec\u7acb\u7684\u7ebf\u7a0b / \u8fdb\u7a0b , \u4f7f\u5f97\u4efb\u4f55\u4e00\u4e2a\u8fde\u63a5\u7684\u963b\u585e\u90fd\u4e0d\u4f1a\u5f71\u54cd\u5176\u4ed6\u7684\u8fde\u63a5 . \u5f0a\u7aef -- \u82e5\u5e76\u53d1\u7684\u5ba2\u6237\u7aef\u4e2a\u6570\u8fc7\u591a , \u4f1a\u5bfc\u81f4\u670d\u52a1\u7aef\u542f\u52a8\u7684\u7ebf\u7a0b\u6570\u8fc7\u591a . \u673a\u5668\u53d7\u4e0d\u4e86 . \u5177\u4f53\u6765\u8bf4 , \u5f00\u542f\u591a\u8fdb\u7a0b / \u591a\u7ebf\u7a0b , \u5728\u9047\u5230\u6210\u767e\u4e0a\u5343\u7684\u8fde\u63a5\u8bf7\u6c42\u65f6 . \u65e0\u8bba\u591a\u7ebf\u7a0b\u8fd8\u662f\u591a\u8fdb\u7a0b\u90fd\u4f1a\u4e25\u91cd\u5360\u636e\u7cfb\u7edf\u8d44\u6e90 \u964d\u4f4e\u7cfb\u7edf\u5bf9\u5916\u754c\u54cd\u5e94\u6548\u7387 , \u800c\u4e14\u7ebf\u7a0b\u4e0e\u8fdb\u7a0b\u672c\u8eab\u4e5f\u66f4\u5bb9\u6613\u8fdb\u5165\u5047\u6b7b\u72b6\u6001 ( OS\u5fd9\u4e8e\u5207\u6362\u5566 , \u4e0d\u4f1a\u771f\u6b63\u7684\u5e72\u6d3b ) 3 > \u6c60 : \u5bf9\u94fe\u63a5\u6570\u52a0\u4ee5\u9650\u5236 , \u63a7\u5236\u5728\u673a\u5668\u53ef\u627f\u53d7\u7684\u8303\u56f4\u5185 . \u8bf4\u5230\u6c60 , \u6211\u4eec\u5f80\u5f80\u4f1a\u60f3\u5230 \"\u7ebf\u7a0b\u6c60\" \u6216 \"\u8fde\u63a5\u6c60\" . \u201c \u7ebf\u7a0b\u6c60 \u201d \u65e8\u5728\u51cf\u5c11\u521b\u5efa\u548c\u9500\u6bc1\u7ebf\u7a0b\u7684\u9891\u7387 , \u5176\u7ef4\u6301\u4e00\u5b9a\u5408\u7406\u6570\u91cf\u7684\u7ebf\u7a0b , \u5e76\u8ba9\u7a7a\u95f2\u7684\u7ebf\u7a0b\u91cd\u65b0\u627f\u62c5\u65b0\u7684\u6267\u884c\u4efb\u52a1 . \u201c \u8fde\u63a5\u6c60 \u201d \u7ef4\u6301\u8fde\u63a5\u7684\u7f13\u5b58\u6c60 , \u5c3d\u91cf\u91cd\u7528\u5df2\u6709\u7684\u8fde\u63a5 \u3001 \u51cf\u5c11\u521b\u5efa\u548c\u5173\u95ed\u8fde\u63a5\u7684\u9891\u7387 . \u8fd9\u4e24\u79cd\u6280\u672f\u90fd\u53ef\u4ee5\u5f88\u597d\u7684\u964d\u4f4e\u7cfb\u7edf\u5f00\u9500 , \u90fd\u88ab\u5e7f\u6cdb\u5e94\u7528\u5f88\u591a\u5927\u578b\u7cfb\u7edf , \u5982websphere \u3001 tomcat\u548c\u5404\u79cd\u6570\u636e\u5e93\u7b49 . Ps : \u56de\u987e\u4e00\u4e0b\u8fd9\u53e5\u8bdd , \u534a\u8fde\u63a5\u6c60backlog\u9650\u5236\u7684\u662f < \u540c\u4e00\u65f6\u523b > \u7684\u8bf7\u6c42\u6570 ! \u7ebf\u7a0b\u6c60vs\u8fde\u63a5\u6c60\u8be6\u89e3\u53c2\u8003\u94fe\u63a5 : ` https : // www . jianshu . com / p / a25bc5ff7942 ` \u6ce8\u610f -- \u8fd0\u7528\u6c60 , \u8fd9\u4e0d\u662f\u63d0\u5347\u6548\u7387\u7684\u65b9\u6848 , \u53ea\u662f\u8ba9\u673a\u5668\u9762\u5bf9\u9ad8\u5e76\u53d1\u65f6\u4e0d\u5b95\u673a\u7684\u5219\u4e2d\u65b9\u6848 . \u95ee\u9898 -- \u201c \u7ebf\u7a0b\u6c60 \u201d \u548c \u201c \u8fde\u63a5\u6c60 \u201d \u6280\u672f\u4e5f\u53ea\u662f\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u7f13\u89e3\u4e86\u9891\u7e41\u8c03\u7528IO\u63a5\u53e3\u5e26\u6765\u7684\u8d44\u6e90\u5360\u7528 . \u5047\u8bbe\u673a\u5668\u53ea\u80fd\u625b\u4f4f100\u7684\u5e76\u53d1 , \u82e5\u676510\u4e2a\u4efb\u52a1 , \u6ca1\u5fc5\u8981\u7528\u6c60 . \u82e5\u6765200\u4e2a\u4efb\u52a1 , \u7528\u7ebf\u7a0b\u6c60\u9650\u5236\u8fde\u63a5\u6570 , \u8fd9\u6548\u7387\u5fc5\u7136\u4f1a\u6bd4\u76f4\u63a5\u5f00200\u4e2a\u7ebf\u7a0b\u4f4e . \u4f46\u56e0\u4e3a\u5207\u6362\u7684\u901f\u5ea6\u591f\u5feb . \u7528\u6237\u4e0d\u4f1a\u6709\u660e\u663e\u7684\u7b49\u5f85 . \u4f46\u662f\u5f53\u8bf7\u6c42\u5927\u5927\u8d85\u8fc7\u4e0a\u9650\u65f6 , \u6bd4\u59821\u5343\u4e07 , \u201c \u6c60 \u201d \u6784\u6210\u7684\u7cfb\u7edf\u5bf9\u5916\u754c\u7684\u54cd\u5e94\u5e76\u4e0d\u6bd4\u6ca1\u6709\u6c60\u7684\u65f6\u5019\u6548\u679c\u597d\u591a\u5c11 . \u6240\u4ee5\u4f7f\u7528 \u201c \u6c60 \u201d \u5fc5\u987b\u8003\u8651\u5176\u9762\u4e34\u7684\u54cd\u5e94\u89c4\u6a21 , \u5e76\u6839\u636e\u54cd\u5e94\u89c4\u6a21\u8c03\u6574 \u201c \u6c60 \u201d \u7684\u5927\u5c0f . \u5230\u8fd9\u91cc , \u4e0d\u7ba1\u662f\u591a\u8fdb\u7a0b / \u591a\u7ebf\u7a0b\u8fd8\u662f\u6c60 , \u90fd\u5bf9\u5355\u4e2a\u7ebf\u7a0b\u4e0b\u7684IO\u884c\u4e3a\u7f6e\u4e4b\u4e0d\u7406 . \u90a3\u5982\u4f55\u662f\u597d ? 4 > \u534f\u7a0b \u5c06\u5355\u4e2a\u7ebf\u7a0b\u4e0b\u7684IO\u964d\u5230\u6700\u4f4e , \u76d1\u6d4b\u5355\u7ebf\u7a0b\u4e0b\u7684IO , \u9047\u5230IO\u5c31\u5207 , \u6548\u7387\u4e5f\u5c31\u63d0\u5347\u4e0a\u53bb\u4e86 . \u5355\u4e2a\u7ebf\u7a0b\u80fd\u6297\u7684\u5e76\u53d1\u6570\u5c31\u591a\u8d77\u6765\u4e86 . \u591a\u7ebf\u7a0b + \u534f\u7a0b -- 1000 \u4e2a\u7ebf\u7a0b , \u6bcf\u4e2a\u7ebf\u7a0b\u80fd\u625b\u4f4f1000\u4e2a\u4efb\u52a1 , \u4e00\u767e\u4e07\u7684\u5e76\u53d1\u5c31\u641e\u5b9a\u4e86 . \u4e0d\u501f\u52a9\u5df2\u6709\u7684gevent\u6a21\u5757 , \u4f7f\u7528\u67d0\u79cdIO\u6a21\u578b\u81ea\u5df1\u5b9e\u73b0\u534f\u7a0b ( \u5355\u7ebf\u7a0b\u4e0b\u5b9e\u73b0\u5e76\u53d1 ) !!","title":"\u963b\u585eIO"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/13_%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B/#io_2","text":"non-blocking IO \u5728\u975e\u963b\u585e\u5f0fIO\u4e2d, \u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u4e0d\u65ad\u7684\u4e3b\u52a8\u8be2\u95ee\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838(kernel)\u6570\u636e\u51c6\u5907\u597d\u4e86\u6ca1\u6709.","title":"\u975e\u963b\u585eIO"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/13_%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B/#_1","text":"\u56fe6.2 \u975e\u963b\u585eI/O\u6a21\u578b. \u8fdb\u7a0b\u91cd\u590d\u8c03\u7528recvfrom, \u7b49\u5f85OK\u8fd4\u56de. (\u8f6e\u8be2) 1> \u540c\u6837\u7684, \u5e94\u7528\u7a0b\u5e8f\u4f1a\u8c03\u7528\u6536\u6d88\u606f\u7684recvfrom\u63a5\u53e3,\u8be5\u63a5\u53e3\u4f1a\u53d1\u9001\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\u7ed9\u64cd\u4f5c\u7cfb\u7edf.. 2> \u82e5kernel/\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684\u6570\u636e\u8fd8\u6ca1\u6709\u51c6\u5907\u597d,\u90a3\u4e48\u5b83\u5e76\u4e0d\u4f1ablock/\u963b\u585e\u7528\u6237\u8fdb\u7a0b, \u800c\u662f\u7acb\u523b\u8fd4\u56de\u4e00\u4e2aerror 3> \u7528\u6237\u8fdb\u7a0b\u5224\u65ad\u7ed3\u679c\u662f\u4e00\u4e2aerror\u65f6, \u5b83\u5c31\u77e5\u9053\u6570\u636e\u8fd8\u6ca1\u6709\u51c6\u5907\u597d, \u4e8e\u662f\u7528\u6237\u8fdb\u7a0b\u5c31\u53ef\u4ee5\u5728\u672c\u6b21\u5230\u4e0b\u6b21\u518d\u53d1\u8d77read\u8be2\u95ee\u7684\u65f6\u95f4\u95f4\u9694\u5185\u505a\u5176\u4ed6\u4e8b\u60c5, \u6216\u8005\u76f4\u63a5\u518d\u6b21\u53d1\u9001read\u64cd\u4f5c(recvfrom) 4> \u4e00\u65e6kernel\u4e2d\u7684\u6570\u636e\u51c6\u5907\u597d\u4e86,\u5e76\u4e14\u53c8\u518d\u6b21\u6536\u5230\u4e86\u7528\u6237\u8fdb\u7a0b\u7684system call, \u90a3\u4e48\u5b83\u9a6c\u4e0a\u5c31\u5c06\u6570\u636e\u62f7\u8d1d\u5230\u4e86\u5e94\u7528\u7a0b\u5e8f\u5185\u5b58 (\u8fd9\u4e00copy data\u9636\u6bb5\u662f\u963b\u585e\u7684,\u662f\u4e0d\u53ef\u907f\u514d\u7684,\u5728\u8fd9\u671f\u95f4\u662f\u4e0d\u80fd\u5e72\u5176\u5b83\u4e8b\u60c5\u7684). \u4e5f\u5c31\u662f\u8bf4 \u975e\u963b\u585e\u7684recvform\u7cfb\u7edf\u8c03\u7528\u8c03\u7528\u4e4b\u540e,\u8fdb\u7a0b\u5e76\u6ca1\u6709\u88ab\u963b\u585e, \u5185\u6838\u9a6c\u4e0a\u8fd4\u56de\u7ed9\u8fdb\u7a0b. \u82e5\u6570\u636e\u8fd8\u6ca1\u51c6\u5907\u597d,\u6b64\u65f6\u4f1a\u8fd4\u56de\u4e00\u4e2aerror. \u8fdb\u7a0b\u5728\u5f97\u5230\u8fd4\u56de\u4e4b\u540e,\u53ef\u4ee5\u5e72\u70b9\u522b\u7684\u4e8b\u60c5,\u7136\u540e\u518d\u53d1\u8d77recvform\u7cfb\u7edf\u8c03\u7528. \u91cd\u590d\u4e0a\u9762\u7684\u8fc7\u7a0b,\u5faa\u73af\u5f80\u590d\u7684\u8fdb\u884crecvform\u7cfb\u7edf\u8c03\u7528. \u8fd9\u4e2a\u8fc7\u7a0b\u901a\u5e38\u88ab\u79f0\u4e4b\u4e3a\u8f6e\u8be2. \u8f6e\u8be2\u68c0\u67e5\u5185\u6838\u6570\u636e,\u76f4\u5230\u6570\u636e\u51c6\u5907\u597d,\u518d\u62f7\u8d1d\u6570\u636e\u5230\u8fdb\u7a0b,\u8fdb\u884c\u6570\u636e\u5904\u7406. \u9700\u8981\u6ce8\u610f,\u62f7\u8d1d\u6570\u636e\u7684\u6574\u4e2a\u8fc7\u7a0b,\u8fdb\u7a0b\u4ecd\u7136\u662f\u5c5e\u4e8e\u963b\u585e\u7684\u72b6\u6001. \u8be5\u65b9\u6848\u5c06\u82b1\u65f6\u95f4\u6700\u957f\u7684wait data\u9636\u6bb5\u5229\u7528\u4e86\u8d77\u6765,\u5229\u7528\u6b64\u9636\u6bb5\u7684\u65f6\u95f4\u5e72\u5355\u7ebf\u7a0b\u4e0b\u5176\u5b83\u8ba1\u7b97\u7684\u6d3b. \u5355\u7ebf\u7a0b\u7684\u6548\u7387\u5f97\u5230\u4e86\u63d0\u5347.","title":"\u539f\u7406"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/13_%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B/#_2","text":"recvfrom\u539f\u672c\u662f\u963b\u585e\u64cd\u4f5c,\u8981\u7b49\u4e24\u4e2a\u9636\u6bb5\u5b8c\u5b8c\u6574\u6574\u505a\u5b8c\u540e\u518d\u6267\u884c\u4e0b\u4e00\u884c\u4ee3\u7801,\u6211\u4eec\u8981\u5c06\u5176\u53d8\u4e3a\u975e\u963b\u585e\u7684. \u5173\u952e\u4ee3\u7801 -- server.setblocking(False) \u975e\u963b\u585eIO\u7684\u7cbe\u9ad3\u5728\u4e8e\u5b8c\u5168\u6ca1\u6709\u963b\u585e!","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/13_%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B/#_3","text":"\u8fd0\u7528\u975e\u963b\u585eIO\u6a21\u578b,\u670d\u52a1\u7aef\u5728\u5355\u7ebf\u7a0b\u4e0b\u5c31\u5b9e\u73b0\u4e86\u5e76\u53d1. from socket import * server = socket ( AF_INET , SOCK_STREAM ) server . bind (( \"127.0.0.1\" , 8080 )) server . listen ( 5 ) # -- \u8bbe\u7f6e\u963b\u585e\u4e0e\u5426,\u9ed8\u8ba4flag\u53c2\u6570\u503c\u4e3aTrue,\u4ee3\u8868\u9ed8\u8ba4\u7684IO\u6a21\u578b\u662f\u963b\u585e\u7684 # -- \u6b64\u5904\u6211\u4eec\u8bbe\u7f6eflag\u7684\u53c2\u6570\u6307\u4e3aFalse \u5c06I/O\u6a21\u578b\u53d8\u4e3a\u975e\u963b\u585e\u7684 # \u975e\u963b\u585eIO\u6a21\u578b\u91cc,\u82e5\u7a0b\u5e8f\u7684IO\u64cd\u4f5c\u7684wait data\u9636\u6bb5\u6ca1\u6709\u505a\u5b8c,\u4f1a\u629bBlockingIOError\u5f02\u5e38 # \u8be5\u670d\u52a1\u7aef\u4e2d\u6d89\u53ca\u5230\u7684IO\u64cd\u4f5c\u6709 accept\u3001recv\u3001send server . setblocking ( False ) conn_l = [] while True : # -- \u5b9e\u73b0\u4e86\u9047\u5230IO\u5c31\u505a\u5176\u5b83\u4e8b\u60c5 # try\u91cc\u7684\u4ee3\u7801\u62a5\u9519\u5c31\u6267\u884cexcept\u91cc\u7684\u4ee3\u7801,except\u91cc\u7684\u4ee3\u7801\u6267\u884c\u5b8c\u540e,\u56e0\u4e3awhile True\u5faa\u73af. # \u5faa\u73af\u5f80\u590d\u8fd9\u4e00\u8fc7\u7a0b. \u5f53\u7136except\u5b50\u4ee3\u7801\u5757\u91cc\u7684\u4e5f\u6709\u53ef\u80fd\u9047\u5230IO,\u540c\u6837\u7684\u6355\u83b7\u5f02\u5e38. try : print ( \"\u603b\u8fde\u63a5\u6570[ %s ]\" % len ( conn_l )) # -- \u6bcf\u542f\u52a8\u4e00\u4e2a\u5ba2\u6237\u7aef,\u8fde\u63a5\u6570\u5c31\u4f1a\u52a01 conn , addr = server . accept () conn_l . append ( conn ) # -- \u82e5\u4e0d\u6267\u884c\u6b64\u64cd\u4f5c,\u6bcf\u6b21\u4e0e\u5ba2\u6237\u7aef\u65b0\u5efa\u7acb\u7684\u94fe\u63a5\u5c31\u4f1a\u88ab\u8986\u76d6\u6389 except BlockingIOError : # print(\"\u505a\u4e862s\u5176\u5b83\u7684\u4e8b\u60c5!\") # time.sleep(2) # -- \u6b64\u5904\u4e0d\u662f\u6a21\u62dfio,\u800c\u662f\u6a21\u62df\u505a\u5176\u5b83\u8ba1\u7b97\u7528\u4e862s\u7684\u65f6\u95f4 # -- \u8fdb\u4e00\u6b65\u660e\u786e,\u5176\u5b83\u4e8b\u60c5\u6307\u7684\u662f\u505a\u901a\u4fe1\u5faa\u73af\u7684\u6d3b # (\u82e5\u8981\u8003\u8651\u7c98\u5305\u95ee\u9898) \u4e00\u70b9\u63d0\u793a: conn\u4f5c\u4e3akey,value\u5bf9\u5e94\u4e0a\u6b64conn\u6536\u7684\u6570\u636e,\u6536\u7684\u6570\u636e\u505a\u4e00\u4e2a\u62fc\u63a5 # \u6bd4\u5982:conn_msg_l = [] conn_msg_l[conn] = data # conn_msg_l\u5217\u8868\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u662f\u5b57\u5178 {\u94fe\u63a5:\u8be5\u94fe\u63a5\u6536\u5230\u7684\u6d88\u606f\"\u62fc\u63a5\"} del_conn_l = [] for conn in conn_l : try : # -- \u8981\u77e5\u9053,conn_l\u91cc\u7684\u4e00\u5806\u94fe\u63a5\u662f\u5f52\u64cd\u4f5c\u7cfb\u7edf\u7ba1 # \u54ea\u6015\u8fd9\u4e00\u5806\u94fe\u63a5\u7684\u5ba2\u6237\u7aef\u540c\u65f6\u53d1\u6570\u636e\u8fc7\u6765,\u6536\u5230\u7684\u6570\u636e\u90fd\u4f1a\u5148\u5f80\u670d\u52a1\u7aef\u7684OS\u7f13\u5b58\u91cc\u5b58. # \u8be5\u7a0b\u5e8f\u8be2\u95ee\u5f53\u524d\u5faa\u73af\u5230\u7684\u94fe\u63a5\u5728OS\u7f13\u5b58\u4e2d\u6709\u65e0\u5bf9\u5e94\u7684\u6570\u636e # OS\u548c\u5e94\u7528\u7a0b\u5e8f\u662f\u4e92\u76f8\u4e0d\u5e72\u6270\u7684\u4e24\u4e2a\u8fdb\u7a0b,\u5404\u81ea\u53ef\u4ee5\u5e72\u5404\u81ea\u7684\u4e8b\u60c5 data = conn . recv ( 1024 ) if len ( data ) == 0 : # -- \u89e3\u51b3Linux\u4e0b\u5ba2\u6237\u7aef\u65ad\u5f00\u94fe\u63a5,\u670d\u52a1\u7aef\u4e00\u76f4\u63a5\u6536\u7a7a\u5b57\u7b26\u4e32\u7684\u95ee\u9898 conn . close () # -- \u4e3a\u5565\u4e0d\u76f4\u63a5conn_l.remove(conn)\u5462? \u56e0\u4e3a\u4e0d\u8981\u5728for\u5faa\u73af\u91cc\u6539\u53d8\u5faa\u73af\u5bf9\u8c61\u7684\u7ed3\u6784! del_conn_l . append ( conn ) continue conn . send ( data . upper ()) except BlockingIOError : continue # -- \u7b2c\u4e00\u4e2a\u8fde\u63a5\u8fdb\u884crecv\u64cd\u4f5c\u65f6\u6ca1\u6570\u636e,\u4e0d\u4ee3\u8868\u7b2c2\u4e2a\u6ca1\u6709 \u8fd9\u91cc\u5199\u6210pass\u4e5f\u884c except ConnectionResetError : # -- \u89e3\u51b3windows\u4e0b\u5ba2\u6237\u7aef\u65ad\u5f00\u94fe\u63a5\u7684\u95ee\u9898 conn . close () del_conn_l . append ( conn ) for conn in del_conn_l : conn_l . remove ( conn )","title":"\u670d\u52a1\u7aef"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/13_%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B/#_4","text":"import os from socket import * client = socket ( AF_INET , SOCK_STREAM ) client . connect (( \"127.0.0.1\" , 8080 )) while True : msg = \" %s hello\" % os . getpid () client . send ( msg . encode ( 'utf-8' )) data = client . recv ( 1024 ) print ( data . decode ( 'utf-8' )) \"\"\" \u5f53\u7136,\u53ef\u4ee5\u4ee5\u591a\u7ebf\u7a0b\u7684\u5f62\u5f0f\u6a21\u62df\u591a\u4e2a\u5ba2\u6237\u7aef \"\"\"","title":"\u5ba2\u6237\u7aef"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/13_%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B/#_5","text":"\u975e\u963b\u585eIO\u6a21\u578b\u662f\u4e0d\u88ab\u63a8\u8350\u7684! 1> \u975e\u963b\u585eIO,\u4e00\u70b9IO\u90fd\u6ca1\u6709.. \u867d\u7136\u5728\u5355\u7ebf\u7a0b\u4e0b\u5b9e\u73b0\u4e86\u5e76\u53d1,\u5185\u5b58\u5360\u7528\u5c11\u4e86,\u4f46 \u5bf9cpu\u7684\u65e0\u6548\u5360\u7528\u8fc7\u9ad8!! \u5faa\u73af\u8c03\u7528recv()\u5c06\u5927\u5e45\u5ea6\u63a8\u9ad8CPU\u5360\u7528\u7387.. \u800c\u4e14\u5927\u591a\u6570\u7684\u8f6e\u8be2\u662f\u6ca1\u6709\u610f\u4e49\u7684.\u767d\u5360cpu\u8fd8\u4e0d\u5e72\u6d3b. 2> \u82e5conn_l\u5217\u8868\u4e2d\u7684\u8fde\u63a5\u6570\u5f88\u591a,for\u5faa\u73af\u4e00\u6b21\u4e5f\u4f1a\u5f88\u6162. 3> \u6309\u7167\u670d\u52a1\u7aef\u4ee3\u7801\u7684\u8fd0\u884c\u903b\u8f91, accept\u8be2\u95eeOS\u6709\u65e0\u8fde\u63a5,\u82e5\u6ca1\u6709,\u5c31\u53bb\u5e72\u901a\u4fe1\u5faa\u73af\u7684\u6d3b\u4e86.. \u5728\u5e72\u901a\u8baf\u5faa\u73af\u7684\u6d3b\u7684\u8fc7\u7a0b\u4e2d,\u65b0\u7684\u8fde\u63a5\u6765\u5566,\u6ca1\u6709\u5f97\u5230\u53ca\u65f6\u7684\u5904\u7406!! \u5bfc\u81f4\u6574\u4f53\u6570\u636e\u541e\u5410\u91cf\u7684\u964d\u4f4e! \u4e0d\u80fd\u53ca\u65f6\u53cd\u9988\u5ba2\u6237\u7aef\u7684\u4fe1\u606f! \u6269\u5c55\u9605\u8bfb\u94fe\u63a5: `https://blog.csdn.net/pythontide/article/details/109242386 \u6ce8\u610fsend()\u89e6\u53d1BlockingIOError\u5f02\u5e38\u7684\u6761\u4ef6,\u5e76\u4e0d\u662f\u8bf4\u5199\u4e2asend\u4ee3\u7801\u5c31\u4f1a\u89e6\u53d1\u5f02\u5e38.. \u540e\u6587\u7684\u591a\u8def\u590d\u7528IO\u4e2d\u4e5f\u6709\u5bf9send\u64cd\u4f5c\u963b\u585e\u7684\u89e3\u91ca!!","title":"\u5f0a\u7aef"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/13_%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B/#io_3","text":"IO multiplexing; \u6709\u4e9b\u5730\u65b9\u4e5f\u79f0\u8fd9\u79cdIO\u65b9\u5f0f\u4e3a\u4e8b\u4ef6\u9a71\u52a8IO(event driven IO)","title":"\u591a\u8def\u590d\u7528IO!!"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/13_%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B/#_6","text":"\u56fe6.3 I/O\u591a\u8def\u590d\u7528\u6a21\u578b \u8fdb\u7a0b\u5728select\u8c03\u7528\u4e2d\u963b\u585e,\u7b49\u5f85\u53ef\u80fd\u7684\u591a\u4e2a\u5957\u63a5\u5b57\u4e2d\u7684\u4e00\u4e2a\u53d8\u5f97\u53ef\u8bfb; \u5c06\u6570\u636e\u590d\u5236\u5230\u5e94\u7528\u7a0b\u5e8f\u7684\u7f13\u51b2\u533a. 1> wait data\u9636\u6bb5. \u5728\u963b\u585e\u4e0e\u975e\u963b\u585eIO\u6a21\u578b\u4e2d, \u662f\u5e94\u7528\u7a0b\u5e8f\u7684\u5957\u63a5\u5b57\u5bf9\u8c61\u76f4\u63a5\u8c03\u7528 recv\u3001recvfrom\u3001accept \u53d1\u8d77\u7cfb\u7edf\u8c03\u7528\u8bf7\u6c42\u7684, \u5728IO\u591a\u8def\u590d\u7528\u6a21\u578b\u4e2d, \u662f\u901a\u8fc7select\u6a21\u5757\u53d1\u8d77\u7684. \u8be5\u7cfb\u7edf\u8c03\u7528\u4f1a\u95ee\u64cd\u4f5c\u7cfb\u7edf\u6709\u65e0\u6570\u636e; 2> select\u6a21\u5757\u5e2e\u6211\u4eec\u7ba1\u7406\u7740\u4e00\u5806\u5957\u63a5\u5b57, select\u53d1\u8d77\u7cfb\u7edf\u8c03\u7528\u95eeOS,\u8fd9\u5806socket\u4e2d\u6709\u65e0\u51c6\u5907\u597d\u6570\u636e\u7684, \u4f1a\u963b\u585e\u4f4f! (\u53ef\u4ee5\u8bbe\u7f6etimeout) \u5f53\u6709\u6570\u636e\u5230\u8fbe\u4e86OS\u7f13\u5b58\u65f6, \u89e3\u9664\u963b\u585e, \u5c06\u51c6\u5907\u597d\u6570\u636e\u7684socket\u901a\u77e5\u7ed9 \u7528\u6237/\u5e94\u7528\u7a0b\u5e8f \u8fdb\u7a0b.. 3> \u63a5\u7740\u8fdb\u5165 copy data\u9636\u6bb5, \u5e94\u7528\u7a0b\u5e8f\u5c06\u90a3\u4e9b\u6709\u6570\u636e\u5230\u8fbe\u7684socket\u5bf9\u8c61\u901a\u8fc7recvfrom \u5e76\u53d1 \u7684\u53d1\u8d77\u7cfb\u7edf\u8c03\u7528, \u56e0\u4e3aselect\u5df2\u7ecf\u5e2e\u5fd9\u95ee\u4e86, \u6240\u4ee5 \u4e0d\u4f1a\u963b\u585e, \u8be5\u7cfb\u7edf\u8c03\u7528\u4f1a\u76f4\u63a5\u5c06\u6570\u636e\u4eceOS\u5185\u6838\u590d\u5236\u5230\u5e94\u7528\u7a0b\u5e8f\u5185\u5b58.\u901f\u5ea6\u4f1a\u5f88\u5feb. \u518d\u63d0\u9192\u4e00\u70b9 , \u5e94\u7528\u7a0b\u5e8f\u53d1\u8d77\u7684recv\u7b49\u6536\u6d88\u606f\u7684\u64cd\u4f5c : 1 > \u963b\u585e\u6a21\u578b\u7684IO\u64cd\u4f5c\u4f1a\u7ecf\u5386\u4e24\u4e2a\u9636\u6bb5 , \u4e24\u4e2a\u9636\u6bb5\u90fd\u4f1ablock . 2 > \u975e\u963b\u585e\u6a21\u578b\u5f53socket\u5bf9\u8c61\u7684IO\u64cd\u4f5c ( accept \u3001 recv ) \u5728OS\u7f13\u5b58\u4e2d\u6ca1\u6709\u76f8\u5e94\u7684\u6570\u636e\u65f6 , \u6682\u4e14\u53ea\u7ecf\u5386wait data\u9636\u6bb5 \u4f46\u4e0d\u4f1a\u963b\u585e . \u4f1a\u5728\u8fd9\u671f\u95f4\u505a\u5176\u5b83\u7684\u6d3b ! ( \u901a\u8fc7\u975e\u963b\u585eIO\u7684\u4ee3\u7801\u5b9e\u73b0 , \u53ef\u4ee5\u770b\u5230accept \u3001 recv\u505a\u7684\u5176\u5b83\u6d3b , \u5b9e\u9645\u4e0a\u6307\u7684\u90fd\u662f\u901a\u4fe1\u5faa\u73af ) . \u5f53\u6709\u76f8\u5e94\u7684\u6570\u636e\u540e , \u8be5IO\u64cd\u4f5c\u4f1a\u518d\u7ecf\u5386copy data\u9636\u6bb5 . copy data\u9636\u6bb5\u662fblock\u7684 , \u4e0d\u53ef\u907f\u514d\u7684 . \u4f46copy data\u9636\u6bb5\u901f\u5ea6\u5f88\u5feb ! So , \u975e\u963b\u585e\u6a21\u578b\u7684IO\u64cd\u4f5c\u4e5f\u4f1a\u7ecf\u5386\u4e24\u4e2a\u9636\u6bb5 . \u7b2c\u4e00\u4e2a\u9636\u6bb5\u4e0d\u963b\u585e , \u7b2c\u4e8c\u4e2a\u9636\u6bb5\u963b\u585e . 3 > IO\u591a\u8def\u590d\u7528\u7684select\u6a21\u5757\u53ea\u4f1a\u7ecf\u5386wait data\u9636\u6bb5 !! \u8be2\u95ee\u64cd\u4f5c\u7cfb\u7edf\u6709\u65e0\u6570\u636e . \u5e76\u4e0d\u4f1a\u771f\u6b63\u7684\u6536\u6570\u636e ! \u6548\u7387\u6bd4\u8f83 : \u975e\u963b\u585e > \u963b\u585e \u963b\u585e\u4e0e\u591a\u8def\u590d\u7528\u7684\u6548\u7387\u6bd4\u8f83\u5462 \uff1f 1 > \u5047\u8bbeselect\u53ea\u7ba1\u4e00\u4e2asocket , \u4e0e\u963b\u585e\u6a21\u578b\u76f8\u6bd4 , \u963b\u585e\u6a21\u578b\u7684\u6548\u7387\u9ad8 ! \u4ed6\u4eec\u90fd\u4f1a\u7ecf\u5386\u4e24\u4e2a\u9636\u6bb5 ( \u4e24\u4e2a\u9636\u6bb5\u90fd\u8981\u7b49 ), \u4f46\u591a\u8def\u590d\u7528\u6bd4\u963b\u585e\u591a\u4e86\u4e24\u4e2a\u8fc7\u7a0b . \u4e00\u4e2a\u662f\u6709\u6570\u636e\u5230\u8fbe\u540e , return readable\u8fd4\u56de\u7ed3\u679c , \u4ee5\u53ca recvfrom\u5728\u6570\u636e\u5230\u8fbe\u540e\u4f1a\u8fdb\u884c\u4e00\u6b21 system call . 2 > \u5047\u8bbeselect\u7ba1\u7406\u591a\u4e2asocket , \u4e0e\u963b\u585e\u6a21\u578b\u76f8\u6bd4 , IO\u591a\u8def\u590d\u7528\u6a21\u578b\u7684\u6548\u7387\u9ad8 ! \u56e0\u4e3a\u963b\u585eIO\u540c\u4e00\u65f6\u95f4\u53ea\u80fd\u95ee\u4e00\u4e2a , \u8fd9\u4e00\u4e2a\u963b\u585e\u4f4f\u4e86 , \u540e\u9762\u7684\u90fd\u8fd0\u884c\u4e0d\u4e86\u5566 . \u800c\u591a\u8def\u590d\u7528IO\u53ef\u4ee5\u4e00\u6b21\u6027\u7684\u95ee\u591a\u4e2a , \u662f\u5e76\u53d1\u7684 , \u6ca1\u6709\u6d88\u606f\u8fc7\u6765 , \u4f1a\u963b\u4f4f , \u4f46\u4e00\u4e2a\u5957\u63a5\u5b57\u963b\u4f4f\u5566 , \u4e0d\u4f1a\u5f71\u54cd\u5176\u5b83\u7684\u5957\u63a5\u5b57 . \u975e\u963b\u585e\u4e0e\u591a\u8def\u590d\u7528\u7684\u6548\u7387\u6bd4\u8f83\u5462 \uff1f \u975e\u963b\u585e\u7684\u6548\u7387\u9ad8 . \u53ef\u4ee5\u4ed4\u7ec6\u54c1\u4e00\u54c1 , \u975e\u963b\u585eIO\u4e0eselect\u7684\u5de5\u4f5c\u6d41\u7a0b\u5f88\u50cf ! \u4f46\u975e\u963b\u585eIO\u662f\u5e94\u7528\u7a0b\u5e8f\u5728\u95ee , \u591a\u8def\u590d\u7528\u662fselect\u5728\u95ee . IO\u591a\u8def\u590d\u7528\u8be2\u95ee\u5b8c\u540e , \u8981\u8fd4\u56de\u90a3\u4e9b\u6709\u6570\u636e\u7684\u5957\u63a5\u5b57 , \u57fa\u4e8e\u8fd9\u4e9b\u51c6\u5907\u597d\u7684\u5957\u63a5\u5b57\u518d\u53d1\u8d77\u8bf7\u6c42 . \u4f46\u4e3a\u4f55\u4e0d\u7528\u975e\u963b\u585eIO\u6a21\u578b\u5462 \uff1f \u56e0\u4e3a\u975e\u963b\u585e\u7684cpu\u5360\u7528\u7387\u5f88\u9ad8 . \u5b83\u4f1a\u4e0d\u95f4\u65ad\u7684\u8be2\u95ee ! \u800c\u591a\u8def\u590d\u7528IO\u4e2dselect . select () \u5904\u4f1a\u963b\u585e\u4f4f !! \u7b49\u5f85\u6570\u636e ( \u94fe\u63a5 \u3001 \u6d88\u606f ) \u53d1\u8fc7\u6765 . \u6211\u4eec\u4e5f\u53ef\u4ee5\u7ed9\u591a\u8def\u590d\u7528\u4e2d\u7684select\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4 . \u5728\u8d85\u65f6\u65f6\u95f4\u91cc\u6765\u6570\u636e\u4e86\u6216\u8005\u8d85\u65f6\u65f6\u95f4\u5230\u4e86 , \u90fd\u4f1a\u63a5\u89e6\u963b\u585e ! \u90a3\u975e\u963b\u585eIO\u6a21\u578b\u5728\u8be2\u95ee\u65f6\u52a0\u4e2atime . sleep ( 3 ) \u4e0d\u5c31\u884c\u4e86\u561b ? no , \u8fd9\u6837\u5199\u6b7b\u4e86\u554a , \u5426\u7ba1\u6709\u6ca1\u6709\u6570\u636e\u6765 , \u90fd\u4f1a\u7761\u591f3\u79d2 . \u53ef\u80fd\u521a\u7761\u4e0b\u53bb0 .01 s , \u5c31\u6765\u6570\u636e\u4e86 ..","title":"\u539f\u7406"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/13_%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B/#_7","text":"","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/13_%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B/#selectselect","text":"select\u6a21\u5757\u8be2\u95ee\u64cd\u4f5c\u7cfb\u7edf\u6211\u7ef4\u62a4\u7684\u5217\u8868\u91cc\u54ea\u4e9b\u5957\u63a5\u5b57\u6709\u6d88\u606f/\u6570\u636e\u8fc7\u6765\u5566! \u6709\u56db\u4e2a\u53c2\u6570: 1> rlist -- \u4e0e\u6536\u6d88\u606f\u6709\u5173\u7684\u5957\u63a5\u5b57\u5bf9\u8c61 server\u4e13\u95e8\u5efa\u7acb\u94fe\u63a5\u3001\u4e00\u5806conn\u4e13\u95e8\u6536\u6d88\u606f socket()\u5b9e\u4f8b\u5316\u7684server\u53ef\u901a\u8fc7accept\u65b9\u6cd5\u5efa\u7acb\u94fe\u63a5conn; conn\u53ef\u4ee5\u8c03\u7528recv\u65b9\u6cd5\u6536\u5230\u6d88\u606f. Ps: \u53ef\u4ee5\u6253\u5370server\u548c\u94fe\u63a5conn,\u53ef\u4ee5\u770b\u5230\u5b83\u4eec\u90fd\u662f \u5957\u63a5\u5b57\u5bf9\u8c61 2> wlist -- \u4e0e\u5199\u6570\u636e\u76f8\u5173\u7684\u5957\u63a5\u5b57 conn conn.send() \u82e5\u6570\u636e\u91cf\u5c0fIO\u65f6\u95f4\u5ffd\u7565\u4e0d\u8ba1;\u82e5\u6570\u636e\u91cf\u5927\u4e5f\u4f1a\u611f\u89c9\u5230\u7b49\u5f85 3> xlist -- \u8ddf\u5f02\u5e38\u6709\u5173,\u7528\u4e0d\u5230 \u4f46\u8fd9\u91cc\u8fd8\u662f\u5f97\u4f20\u503c 4> timeout -- \u8d85\u65f6\u65f6\u95f4,\u662f\u53ef\u9009\u7684\u53c2\u6570,\u9ed8\u8ba4\u503c\u4e3aNone \u6307\u5b9a\u4e00\u4e2a\u65f6\u95f4(s),\u82e5\u5728\u8be5\u65f6\u95f4\u5185\u5f97\u5230\u4e86OS\u8fd4\u56de\u7ed3\u679c\u6216\u8005\u65f6\u95f4\u5230\u4e86\u6ca1\u7ed3\u679c,\u90fd\u4f1a\u7ee7\u7eed\u8fd0\u884c\u4e0b\u9762\u7684\u4ee3\u7801!! \u89e3\u51b3\u4e86\u975e\u963b\u585eIO\u6a21\u578b\u4e2d\u4e0d\u505c\u7684\u8be2\u95ee,\u4e2d\u95f4\u6ca1\u6709\u4efb\u4f55\u7684\u963b\u585e\u5bfc\u81f4cpu\u6709\u5927\u91cf\u65f6\u95f4\u662f\u65e0\u6548\u5360\u7528\u7684\u95ee\u9898! \u6ca1\u6709\u5fc5\u8981\u6307\u5b9atimeout\u53c2\u6570,select.select()\u662f\u7b49OS\u6709\u8fd4\u56de\u7ed3\u679c;\u4e0d\u662f\u4e0d\u95f4\u65ad\u7684\u8be2\u95ee.. select.select()\u4f1a\u963b\u585e\u4f46\u8be5\u963b\u585e\u662f\u5408\u7406\u7684, \u56e0\u4e3a\u6ca1\u6570\u636e\u5c31\u8be5\u539f\u5730\u7b49\u7740,\u4f46\u6709\u6570\u636e\u5c31\u4e0d\u4f1a\u963b\u585e\u4e86!! \u8fd4\u56de\u503c: \u8fd4\u56de\u4e09\u4e2a\u5217\u8868, \u91cc\u9762\u53ea\u5b58\u653e \u6709\u6570\u636e\u7684/\u51c6\u5907\u597d\u7684 \u5957\u63a5\u5b57\u5bf9\u8c61 \"\"\" \u2605 -- \u5ba2\u6237\u7aef\u4ee3\u7801 \"\"\" import os from socket import * client = socket ( AF_INET , SOCK_STREAM ) client . connect (( \"127.0.0.1\" , 8080 )) while True : msg = \" %s hello\" % os . getpid () client . send ( msg . encode ( 'utf-8' )) data = client . recv ( 1024 ) print ( data . decode ( 'utf-8' )) \"\"\" \u2605 -- \u670d\u52a1\u7aef\u4ee3\u7801 \"\"\" import select from socket import * server = socket ( AF_INET , SOCK_STREAM ) server . bind (( \"127.0.0.1\" , 8080 )) server . listen ( 5 ) server . setblocking ( False ) read_list = [ server , ] write_list = [] while True : # -- rl\u5217\u8868\u91cc\u7684\u5c31\u662fserver\u8fd9\u4e2a\u5957\u63a5\u5b57\u5bf9\u8c61,\u56e0\u4e3a\u53ea\u6709\u5b83\u6709\u5bf9\u5e94\u7684\u6570\u636e rl , wl , xl = select . select ( read_list , write_list , []) # print(rl[0] is server) # -- True # print(rl, wl, xl) # -- [<socket.socket fd=3, family=AddressFamily.AF_INET, # type=SocketKind.SOCK_STREAM, proto=0, # laddr=('127.0.0.1', 8080)>] [] [] print ( \"++++++\" ) \u542f\u52a8\u670d\u52a1\u7aef,\u518d\u542f\u52a8\u5ba2\u6237\u7aef.\u53ef\u4ee5\u53d1\u73b0 \u670d\u52a1\u7aef\u7684\u63a7\u5236\u53f0 \u4e00\u76f4\u4e0d\u505c\u7684\u6253\u5370 \"++++++\". \u4e3a\u4f55? 1> \u4e00\u5f00\u59cb\u542f\u52a8\u670d\u52a1\u7aef\u65f6,\u662f\u963b\u585e\u5728select.select()\u5904\u7684.. \u56e0\u4e3aselect\u76d1\u542c\u5230OS\u7f13\u5b58\u4e2d\u6ca1\u6709\u6570\u636e 2> \u63a5\u7740\u542f\u52a8\u5ba2\u6237\u7aef,\u53d1\u9001\u4e86\u4e00\u4e2a\u94fe\u63a5\u8bf7\u6c42\u5230\u670d\u52a1\u7aef\u6240\u5728\u673a\u5668\u7684OS\u7f13\u5b58\u4e2d. select\u6a21\u5757\u76d1\u542c\u5230read_list\u8bfb\u5217\u8868\u4e2d\u7684server\u5957\u63a5\u5b57\u6709\u6d88\u606f\u8fc7\u6765 (\u5728OS\u7f13\u5b58\u4e2d\u6709\u5bf9\u5e94\u7684\u94fe\u63a5\u6570\u636e) ,\u4e0d\u518d\u963b\u585e,\u7ee7\u7eed\u6267\u884c\u4e0b\u4e00\u884c\u4ee3\u7801. print(\"++++++\") 3> \u56e0\u4e3awhile True\u7684\u5b58\u5728.\u5faa\u73af\u5f80\u590d\u8fc7\u7a0b\u4e2d, \u56e0\u4e3a OS\u7f13\u5b58\u4e2d\u7684\u8bf7\u6c42\u94fe\u63a5\u6ca1\u6709\u88ab\u53d6\u8d70 (\u5e94\u8c03\u7528accept\u65b9\u6cd5\u53d6\u8d70server\u5957\u63a5\u5b57\u5bf9\u5e94\u7684\u94fe\u63a5\u6570\u636e) , OS\u7f13\u5b58\u4e2d\u4e00\u76f4\u6709\u6570\u636e, \u6240\u4ee5select.select()\u4e0d\u4f1a\u963b\u585e. \u5982\u679cselect.select()\u4e0d\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4,\u4ec0\u4e48\u65f6\u5019\u963b\u585e\u5728\u539f\u5730? select\u6a21\u5757\u7ef4\u62a4\u7740\u4e00\u5806\u5957\u63a5\u5b57,\u53bb\u95eeOS\u65f6,\u95ee\u8fd9\u4e9b\u5957\u63a5\u5b57\u6709\u65e0\u5bf9\u5e94\u7684\u6570\u636e\u51c6\u5907\u597d,\u82e5\u6ca1\u6709\u5c31\u4f1a\u4e00\u76f4\u5728\u539f\u5730\u7b49\u7740!select\u4f1a\u4e00\u76f4\u95ee.\u76f4\u5230\u6709\u6570\u636e\u51c6\u5907\u597d,\u4e0d\u518d\u963b\u585e. \u6ce8\u610f!!!!!! \u5e94\u7528\u7a0b\u5e8fselect.select()\u53d1\u8d77\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\u540e, \u662f\u64cd\u4f5c\u7cfb\u7edf\u5728 \u904d\u5386 read_list\u770b\u91cc\u9762\u7684\u5957\u63a5\u5b57\u5bf9\u8c61\u5728OS\u7f13\u5b58\u91cc\u6709\u65e0\u5bf9\u5e94\u6570\u636e,\u4f1a\u5c06\u51c6\u5907\u597d\u6570\u636e\u7684\u5957\u63a5\u5b57\u5bf9\u8c61\u8fd4\u56de!! \u76f8\u5f53\u4e8eselect.select()\u662f\u4e00\u4e2a\u8bfb\u64cd\u4f5c,OS\u7cfb\u7edf\u53bb\u95ee\u8fd9\u4e9b\u5957\u63a5\u5b57\u662f\u5426\u51c6\u5907\u597d\u6570\u636e..\u6709\u51c6\u5907\u597d\u7684\u624d\u4f1a\u6709\u8fd4\u56de\u7ed3\u679c... Q: select.select()\u91cc\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\u4e3a3\u79d2,\u4e0e\u975e\u963b\u585eIO\u6a21\u578b\u91cc\u8bbe\u7f6e\u4e00\u4e2atime.sleep(3)\u662f\u4e00\u56de\u4e8b\u5417? A: no! \u5047\u8bbe0.1s\u5c31\u6765\u6570\u636e\u4e86,\u524d\u8005\u53ea\u4f1a\u7b490.1; \u540e\u8005\u4f1a\u7b49\u6ee13s!! Ps \u90a3\u6267\u884c\u5b8cselect.select(),\u5728\u6267\u884c\u5176\u5b83\u4ee3\u7801\u65f6\u6765\u6570\u636e\u4e86\u548b\u6574? \u6ca1\u6709\u529e\u6cd5,\u673a\u5236\u5c31\u662f\u8fd9\u6837\u7684!!\u53ea\u4e0d\u8fc7\u5176\u5b83\u4ee3\u7801\u90fd\u662f\u5927\u91cf\u7684\u8ba1\u7b97,\u901f\u5ea6\u5f88\u5feb!!","title":"\u521d\u63a2select.select()"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/13_%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B/#_8","text":"\u80fd\u591f\u5b9e\u73b0\u4e0d\u505c\u7684\u5efa\u7acb\u94fe\u63a5,\u5efa\u7acb\u94fe\u63a5\u7684\u963b\u585e\u64cd\u4f5c\u4e0d\u4f1a\u5f71\u54cd\u901a\u4fe1(\u5373\u5df2\u5efa\u597d\u7684\u94fe\u63a5\u6536\u6d88\u606f\u7684\u64cd\u4f5c\u4e0d\u4f1a\u963b\u585e\u4f4f)!! \"\"\" \u2605 -- \u5ba2\u6237\u7aef\u4ee3\u7801 \"\"\" from socket import * client = socket ( AF_INET , SOCK_STREAM ) client . connect (( \"127.0.0.1\" , 8080 )) while True : msg = input ( \">>:\" ) . strip () # -- \u8fd9\u91cc\u6539\u52a8\u4e86\u4e0b,\u4fbf\u4e8e\u5b9e\u9a8c client . send ( msg . encode ( 'utf-8' )) data = client . recv ( 1024 ) print ( data . decode ( 'utf-8' )) \"\"\" \u2605 -- \u670d\u52a1\u7aef\u4ee3\u7801 \"\"\" import select from socket import * server = socket ( AF_INET , SOCK_STREAM ) server . bind (( \"127.0.0.1\" , 8080 )) server . listen ( 5 ) server . setblocking ( False ) read_list = [ server , ] write_list = [] while True : rl , wl , xl = select . select ( read_list , write_list , []) print ( \"read_list: %s rl: %s wl: %s \" % ( len ( read_list ), len ( rl ), len ( wl ))) for sk in rl : if sk == server : conn , addr = sk . accept () # -- \u53d6\u51faserver\u5bf9\u5e94\u7684\u94fe\u63a5\u6570\u636e,\u5b8c\u6210\u4e09\u6b21\u63e1\u624b\u5efa\u7acb\u94fe\u63a5 read_list . append ( conn ) # -- \u522b\u5fd8\u4e86\u5c06conn\u4ea4\u7ed9select\u76d1\u7ba1 else : # -- \u6536\u6d88\u606f pass 1> \u5148\u542f\u52a8\u670d\u52a1\u7aef,server\u5957\u63a5\u5b57\u6ca1\u6709\u6570\u636e\u51c6\u5907\u597d,\u963b\u585e\u5728select.select()\u5904; 2> \u542f\u52a8\u5ba2\u6237\u7aef0,\u53d1\u9001\u4e86\u4e00\u4e2aconnect\u94fe\u63a5\u8bf7\u6c42\u5230\u670d\u52a1\u7aef,select\u6a21\u5757\u76d1\u6d4b\u5230\u5566,\u89e3\u9664\u963b\u585e,\u5f80\u4e0b\u8fd0\u884c\u4ee3\u7801.\u6b64\u65f6read_list\u4e2d\u8fd8\u662f\u53ea\u6709server\u8fd9\u4e2a\u5957\u63a5\u5b57\u5bf9\u8c61,rl\u5217\u8868\u7684\u957f\u5ea6\u4e3a1,\u5b58\u653e\u7684\u5c31\u662f\u5957\u63a5\u5b57\u5bf9\u8c61server,\u8868\u660e\u5b83\u7684 \u6570\u636e \u51c6\u5907\u597d\u4e86; 3> server\u5957\u63a5\u5b57\u5bf9\u8c61\u8c03\u7528accept\u65b9\u6cd5\u53d6\u51faOS\u7f13\u5b58\u4e2d\u7684\u94fe\u63a5, \u5e76\u8fd4\u56de\u4e86\u4e00\u4e2aconn\u5957\u63a5\u5b57\u5bf9\u8c61. \u5c06conn\u5957\u63a5\u5b57\u5bf9\u8c61\u6dfb\u52a0\u5230read_list\u4e2d,\u4ee5\u4fbf\u5f97\u5230select\u6a21\u5757\u7684\u76d1\u542c; \u6b64\u65f6read_list\u5217\u8868\u7684\u957f\u5ea6\u4e3a2,rl\u5217\u8868\u7684\u957f\u5ea6\u4e3a0(\u88ab\u53d6\u8d70\u4e86).. 4> \u542f\u52a8\u5ba2\u6237\u7aef1,\u540c\u7406,rl\u5217\u8868\u7684\u957f\u5ea6\u91cd\u65b0\u53d8\u4e3a1.. \u518d\u542f\u52a8\u5ba2\u6237\u7aef2,\u4ee5\u6b64\u7c7b\u63a8.. \u6700\u540e,\u670d\u52a1\u7aef\u963b\u585e\u5728select.select()\u5904,\u6b64\u65f6, read_list = [server,conn0,conn1,conn2],rl = [] (\u8fd9\u662f\u4f2a\u4ee3\u7801) \u6ce8\u610f, \u7a0b\u5e8f\u4e2d\u7684conn\u8ddf\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u4e00\u6837,\u5360\u7528\u4e24\u65b9\u9762\u7684\u8d44\u6e90,\u5e94\u7528\u7a0b\u5e8f\u7684\u8d44\u6e90(conn\u53d8\u91cf\u540d)\u4ee5\u53ca\u64cd\u4f5c\u7cfb\u7edf\u7684\u8d44\u6e90(\u5bf9\u5e94OS\u91cc\u7ef4\u62a4\u7684\u4e00\u4e2aTCP\u94fe\u63a5)... server\u5957\u63a5\u5b57\u5bf9\u8c61\u540c\u7406. \u8be5\u7a0b\u5e8f\u4e2d\u670d\u52a1\u7aef\u8fdb\u6765\u7684\u53ea\u6709\u94fe\u63a5,\u6240\u4ee5rl\u7684\u957f\u5ea6\u4e00\u76f4\u662f1..(\u51c6\u5907\u597d\u7684\u5957\u63a5\u5b57\u5bf9\u8c61\u53ea\u6709\u4e00\u4e2a) Ps: \u5ba2\u6237\u7aef\u53d1\u5b8cconnect\u94fe\u63a5\u8bf7\u6c42\u540e,\u5c31\u963b\u585e\u5728input()\u5904\u4e86..","title":"\u5b9e\u73b0\u4e0d\u505c\u7684\u5efa\u94fe\u63a5"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/13_%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B/#_9","text":"... ... while True : rl , wl , xl = select . select ( read_list , write_list , []) for sk in rl : if sk == server : conn , addr = sk . accept () read_list . append ( conn ) else : # -- \u6536\u6d88\u606f data = sk . recv ( 1024 ) sk . send ( data . upper ()) \u5efa\u7acb\u5b8c\u94fe\u63a5\u540e,\u5ba2\u6237\u7aef0-2\u4f9d\u6b21\u5411\u670d\u52a1\u7aef\u53d1\u6d88\u606f.. \u7ed3\u679c\u5982\u4e0b: Q: \u5ba2\u6237\u7aef\u6536\u53d1\u6d88\u606f\u8fd9\u6837\u5199,\u4e5f\u80fd\u5b9e\u73b0\u591a\u4e2a\u5ba2\u6237\u7aef\u7684\u5e76\u53d1!! \u4f46\u5b58\u5728\u4ec0\u4e48\u95ee\u9898\u5462? (\u5ba2\u6237\u7aef\u53d1\u7a7a\u6570\u636e\u3001\u5ba2\u6237\u7aef\u7a81\u7136\u65ad\u5f00\u3001\u7c98\u5305\u73b0\u8c61\u8fd9\u4e9b\u90fd\u6682\u4e14\u4e0d\u8003\u8651) A: \u8981\u7ed9\u4e00\u5806\u5957\u63a5\u5b57\u56de\u590d\u4fe1\u606f,send\u64cd\u4f5c\u4e5f\u5c5e\u4e8e\u4e00\u79cdIO\u884c\u4e3a,\u901f\u5ea6\u5f88\u5feb!\u5b83\u4f1a\u5c06\u5e94\u7528\u7a0b\u5e8f\u5185\u5b58\u7684\u6570\u636e\u62f7\u8d1d\u5230OS\u7f13\u5b58\u4e2d,OS\u7684\u7f13\u5b58\u5927\u5c0f\u603b\u5f52\u662f\u6709\u9650\u5236\u7684(\u5185\u5b58\u7684\u4e00\u5c0f\u90e8\u5206\u4f5c\u4e3a\u7f13\u5b58). \u82e5OS\u7f13\u5b58\u6ee1\u4e86,\u5c31send\u4e0d\u8fdb\u6570\u636e\u4e86.. \u5c31\u9700\u8981\u539f\u5730\u7b49\u7740,\u7b49OS\u5c06\u8fd9\u4e9b\u6570\u636e\u53d1\u9001\u540e,\u7f13\u5b58\u7a7a\u95f2\u4e86,\u624d\u80fd\u7ee7\u7eed\u8fdb\u884csend\u64cd\u4f5c!! \u4e0d\u5e94\u8be5\u56e0\u4e3asend\u64cd\u4f5c\u8ba9\u7a0b\u5e8f\u9677\u5165\u963b\u585e.","title":"\u6536\u53d1\u6d88\u606f\u7684\u601d\u8003"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/13_%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B/#_10","text":"\u6709\u6ca1\u6709\u53ef\u80fd\u5bfc\u81f4cpu\u7684\u5360\u7528\u7387\u5f88\u9ad8? \u5ba2\u6237\u7aef\u4eec\u4e0d\u505c\u7684\u5411\u670d\u52a1\u7aef\u53d1\u6d88\u606f,\u670d\u52a1\u7aef\u4e0d\u505c\u7684\u53d6\u6570\u636e\u8ba1\u7b97.. \u4f46\u8fd9\u662f\u6709\u6548\u7684cpu\u5360\u7528!!! Ps: \u4ee5\u4e0b\u4ee3\u7801\u8fd0\u884c\u8d77\u6765,cpu\u98d9\u5347\u662f\u56e0\u4e3a,\u670d\u52a1\u7aef\u548c\u5ba2\u6237\u7aef\u90fd\u8fd0\u884c\u5728\u540c\u4e00\u53f0\u673a\u5668\u4e0a,\u5ba2\u6237\u7aef\u5728\u6b7b\u5faa\u73af\u7684\u53d1\u9001\u6d88\u606f. \"\"\" \u2605 -- \u5ba2\u6237\u7aef\u4ee3\u7801 \"\"\" import os from socket import * client = socket ( AF_INET , SOCK_STREAM ) client . connect (( \"127.0.0.1\" , 8080 )) while True : # -- \u4e0d\u505c\u7684\u7ed9\u670d\u52a1\u7aef\u53d1\u6d88\u606f Hhh msg = \" %s say hello\" % os . getpid () if not msg : continue client . send ( msg . encode ( 'utf-8' )) data = client . recv ( 1024 ) print ( data . decode ( 'utf-8' )) client . close () \"\"\" \u2605 -- \u670d\u52a1\u7aef\u4ee3\u7801 \"\"\" import select from socket import * server = socket ( AF_INET , SOCK_STREAM ) server . bind (( \"127.0.0.1\" , 8080 )) server . listen ( 5 ) server . setblocking ( False ) read_list = [ server , ] write_list = [] data_dic = {} while True : rl , wl , xl = select . select ( read_list , write_list , []) for sk in rl : if sk == server : conn , addr = sk . accept () read_list . append ( conn ) else : # -- \u6536\u6d88\u606f # data = sk.recv(1024) # write_list.append(sk) # data_dic[sk] = data try : data = sk . recv ( 1024 ) if not data : sk . close () read_list . remove ( sk ) continue write_list . append ( sk ) # -- \u6536\u5230\u6d88\u606f,\u51c6\u5907\u56de\u6d88\u606f\u624d\u52a0\u5230write_list\u4e2d\u7684! data_dic [ sk ] = data # -- \u7528\u5b57\u5178\u5efa\u7acb\u597d\u5173\u7cfb,\u5e76\u6ca1\u6709\u53d1 except ConnectionResetError : sk . close () read_list . remove ( sk ) # -- \u53d1\u6d88\u606f for sk in wl : sk . send ( data_dic [ sk ] . upper ()) data_dic . pop ( sk ) # -- \u53d1\u5b8c\u540e,\u6b64\u6570\u636e\u5c31\u6ca1\u610f\u4e49\u5566,\u5728\u6570\u636e\u5b57\u5178\u4e2d\u6e05\u9664 # -- \u56de\u5b8c\u6d88\u606f\u540e\u5220\u9664,\u4e0d\u7136\u968f\u7740\u5bf9\u540c\u4e00\u4e2a\u5ba2\u6237\u7aef\u6d88\u606f\u7684\u63a5\u6536,write_list\u4e2d\u4f1a\u6709\u5f88\u591a\u91cd\u590dsk write_list . remove ( sk )","title":"\u5b8c\u6574\u7248"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/13_%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B/#epoll","text":"\u9996\u5148\u8981\u660e\u767d\u4e00\u70b9, select\u6a21\u5757\u5e76\u4e0d\u80fd\u4ee3\u8868\u591a\u8def\u590d\u7528IO\u6a21\u578b.. \u5b83\u4ec5\u4ec5\u53ea\u662f\u4e00\u4e2a\u6a21\u5757! \u771f\u6b63\u652f\u6301 \u5229\u7528select\u6a21\u5757\u7684select\u63a5\u53e3\u53d1\u8d77\u7cfb\u7edf\u8c03\u7528\u7684\u591a\u8def\u590d\u7528IO\u6a21\u578b \u7684\u662f\u64cd\u4f5c\u7cfb\u7edf!! \u5305\u62ec\u524d\u9762\u7684\u975e\u963b\u585eIO\u6a21\u578b\u4e5f\u662fOS\u652f\u6301\u7684 (\u53d1\u8d77\u4e00\u4e2a\u8bf7\u6c42,OS\u8bf4\u6ca1\u6709,\u76f4\u63a5\u629b\u5f02\u5e38) . \u4f46\u8fd9\u79cd\u4f7f\u7528select\u63a5\u53e3\u7684\u591a\u8def\u590d\u7528IO\u6a21\u578b\u6709\u4e2a\u7f3a\u70b9!! \u82e5read_list\u4e2d\u6709\u4e00\u4e07\u4e2a\u5957\u63a5\u5b57,OS\u904d\u5386\u8be2\u95ee\u91cc\u9762\u7684\u5957\u63a5\u5b57\u7684\u6570\u636e\u51c6\u5907\u597d\u6ca1,\u524d9999\u4e2a\u90fd\u6ca1\u6709,\u90a3\u8be2\u95ee\u7684\u8fd99\u5343\u591a\u6b21\u90fd\u662f\u65e0\u7528\u7684,\u8fd9\u6837\u7684\u6548\u7387\u5f88\u4f4e\u5f88\u4f4e!! \u90a3\u5982\u4f55\u662f\u597d\u5462? select\u63a5\u53e3\u7684\u539f\u7406\u662fOS\u4e3b\u52a8\u53bb\u904d\u5386\u8fd9\u4e9b\u5957\u63a5\u5b57\u597d\u6ca1\u597d,\u5f97\u64cd\u4f5c\u7cfb\u7edf\u53bb\u95ee.\u8fd9\u6837\u6548\u7387\u4f4e. \u4f46\u5982\u679c\u8fd9\u4e9b\u5957\u63a5\u5b57\u597d\u4e86\u4e3b\u52a8\u544a\u8bc9OS,\u8fd9\u6837\u7684\u6548\u7387\u5c31\u9ad8\u4e86. \u600e\u4e48\u505a? \u7ed9\u6bcf\u4e2a\u5957\u63a5\u5b57\u5bf9\u8c61\u7ed1\u5b9a\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u56de\u8c03\u51fd\u6570\u7684\u4e1c\u897f.\u5728\u5957\u63a5\u5b57\u5bf9\u8c61\u6709\u6570\u636e\u65f6\u4e3b\u52a8\u53bb\u89e6\u53d1\u56de\u8c03\u51fd\u6570. \u6bd4\u5982list_1\u91cc\u9762\u7684\u67d0\u4e2a\u5957\u63a5\u5b57\u597d\u4e86,\u4f1a\u5c06\u5176\u5728list_1\u91cc\u7684\u7d22\u5f15\u653e\u5230list_2\u5217\u8868\u91cc. \u64cd\u4f5c\u7cfb\u7edf\u76f4\u63a5\u8fd4\u56delist_2\u5217\u8868\u7ed9\u5e94\u7528\u7a0b\u5e8f\u7528\u5c31\u884c\u5566! \u4e0d\u4f1a\u50cf\u4f7f\u7528select\u63a5\u53e3\u7684\u591a\u8def\u590d\u7528IO\u6a21\u578b\u968f\u7740\u5957\u63a5\u5b57\u4e2a\u6570\u7684\u589e\u591a\u6548\u7387\u53d8\u4f4e. --- \u8fd9\u5c31\u662fepoll\u6a21\u578b!! Ps: \u5728select\u548cepoll\u4e4b\u95f4\u8fd8\u6709\u4e00\u79cd\u63a5\u53e3,\u53eb\u505apoll.. poll\u8ddfselect\u534a\u65a4\u516b\u4e24,\u53ea\u4e0d\u8fc7poll\u6bd4select\u652f\u6301\u7684\u5957\u63a5\u5b57\u6570\u591a\u4e00\u70b9.\u4f9d\u65e7\u6ca1\u6709\u6539\u53d8select\u7684\u672c\u8d28,\u8fd8\u662fOS\u4e00\u4e2a\u4e2a\u7684\u53bb\u904d\u5386!! \u6ce8\u610f: epoll\u6a21\u578b windows\u4e0d\u652f\u6301! \u57fa\u4e8e\u7f51\u7edc\u901a\u4fe1\u7684\u8f6f\u4ef6\u5c31\u662f\u5957\u63a5\u5b57\u8f6f\u4ef6,\u901a\u5e38\u5957\u63a5\u5b57\u670d\u52a1\u7aef\u8f6f\u4ef6\u90fd\u662f\u8fd0\u884c\u5728linux\u4e4b\u4e0a!! linux\u652f\u6301epoll\u6a21\u578b. nginx\u91cc\u7684\u5355\u7ebf\u7a0b\u5c31\u662f\u57fa\u4e8eepoll\u6765\u89e3\u51b3IO\u95ee\u9898\u7684. \u6240\u4ee5,nginx\u8fd0\u884c\u5728window\u4e0a\u6548\u7387\u4f1a\u5927\u6253\u6298\u6263. \u6269\u5c55: \u57fa\u4e8eselectors\u6a21\u5757\u5199\u7684\u4ee3\u7801\u4f1a\u6839\u636e\u5f53\u524d\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e0d\u540c\u9009\u62e9\u64cd\u4f5c\u7cfb\u7edf\u6240\u652f\u6301\u7684\u63a5\u53e3(select/poll/epoll).. \u53c2\u8003\u94fe\u63a5 - https://www.cnblogs.com/linhaifeng/articles/7454717.html#_label7","title":"epoll\u63a5\u53e3"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/13_%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B/#io_4","text":"Asynchronous I/O \u6548\u7387\u6700\u9ad8\u7684\u4e00\u79cd!! \u56fe6.5 \u5f02\u6b65I/O\u6a21\u578b \u8fdb\u7a0b\u7ee7\u7eed\u6267\u884c 1> \u7528\u6237\u8fdb\u7a0b\u53d1\u8d77read\u64cd\u4f5c\u4e4b\u540e(\u4ec5\u4ec5\u5c31\u53d1\u4e86\u4e2a\u4fe1\u53f7\u7ed9OS), \u7acb\u523b\u5c31\u53ef\u4ee5\u5f00\u59cb\u53bb\u505a\u5176\u5b83\u7684\u4e8b. 2> \u53e6\u4e00\u65b9\u9762, \u4ecekernel\u7684\u89d2\u5ea6, \u5f53\u5b83\u53d7\u5230\u4e00\u4e2aasynchronous read\u4e4b\u540e, \u9996\u5148\u5b83\u4f1a\u7acb\u523b\u8fd4\u56de. \u6240\u4ee5\u4e0d\u4f1a\u5bf9\u7528\u6237\u8fdb\u7a0b\u4ea7\u751f\u4efb\u4f55block. 3> kernel\u4f1a\u7ecf\u5386wait data\u3001copy data\u9636\u6bb5 -- \u7b49\u5f85\u6570\u636e\u51c6\u5907\u5b8c\u6210, \u7136\u540e\u5c06\u6570\u636e\u62f7\u8d1d\u5230\u7528\u6237\u5185\u5b58 4> \u5f53\u8fd9\u4e00\u5207\u90fd\u5b8c\u6210\u4e4b\u540e, kernel\u4f1a\u7ed9\u7528\u6237\u8fdb\u7a0b\u53d1\u9001\u4e00\u4e2asignal, \u544a\u8bc9\u5b83read\u64cd\u4f5c\u5b8c\u6210\u4e86!! Ps: \u524d\u7aef\u7684Ajax\u5c31\u662f\u5178\u578b\u7684\u5e94\u7528\u5f02\u6b65IO\u7684\u573a\u666f!! \u2605 -- \u6548\u7387\u6bd4\u8f83 \u963b\u585eIO : \u53d1\u5b8c\u8bf7\u6c42\u540e , \u5c31\u5728\u539f\u5730\u7b49\u7740 , \u6ca1\u4ec0\u4e48\u597d\u6bd4\u7684 \u975e\u963b\u585eIO : \u53ea\u662f\u89e3\u51b3\u4e86wait data\u9636\u6bb5\u7684IO\u95ee\u9898 , copy data\u9636\u6bb5\u7684IO\u662f\u6ca1\u6709\u89e3\u51b3\u7684 . IO\u591a\u8def\u590d\u7528 : \u4e0d\u8003\u8651cpu\u5360\u7528\u7387 , IO\u591a\u8def\u590d\u7528\u7684\u6548\u7387\u6bd4\u975e\u963b\u585eIO\u4f4e ; \u56e0\u4e3a\u76f8\u6bd4\u4e4b\u4e0b , IO\u591a\u8def\u590d\u7528\u8fd8\u591a\u4e86 return readable \u548c system call \u4e24\u4e2a\u6b65\u9aa4 . \u4f46\u4e0d\u4f7f\u7528\u975e\u963b\u585eIO , \u662f\u56e0\u4e3a\u975e\u963b\u585eIO\u5927\u91cf\u7684\u65e0\u6548\u5360\u7528CPU . \u5f02\u6b65IO : OS\u5e2e\u5fd9\u7ecf\u5386\u4e24\u4e2a\u9636\u6bb5 -- \u6548\u7387\u6700\u9ad8 !! \u6ce8\u610f ~ \u8fd9\u4e9bIO\u6a21\u578b\u7684\u5b9e\u73b0\u90fd\u5f97OS\u652f\u6301\u624d\u884c . \u5f02\u6b65IO\u7684\u4ee3\u7801\u5b9e\u73b0\u6682\u4e14\u7565\u8fc7,\u5728\u722c\u866b\u8bfe\u7a0b\u4e2d\u4f1a\u8be6\u7ec6\u8bb2\u89e3!","title":"\u5f02\u6b65IO"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/14_%E6%89%8B%E6%92%B8ORM/","text":"\u77e5\u8bc6\u50a8\u5907 \u00b6 \u62e6\u622a\u70b9\u53f7\u8fd0\u7b97 \u00b6 __setattr__() : \u5728\u5bf9\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684\u5c5e\u6027\u8fdb\u884c \u8d4b\u503c/\u4fee\u6539 \u5b9e\u4f8b.\u5c5e\u6027=\u503c \u65f6,\u9996\u5148\u4f1a\u8c03\u7528\u8be5\u65b9\u6cd5 \u5e76\u5728\u8be5\u65b9\u6cd5\u4e2d\u5c06\u5c5e\u6027\u540d\u548c\u5c5e\u6027\u503c\u6dfb\u52a0\u5230\u5b9e\u4f8b\u7684 __dict__ \u5c5e\u6027\u4e2d __getattr__(): \u5b9e\u4f8b\u5f15\u7528\u5c5e\u6027 \u5b9e\u4f8b.\u5c5e\u6027 \u65f6,\u6309\u7167\u6b63\u5e38\u7684\u89c4\u5219\u8fdb\u884c\u5c5e\u6027\u67e5\u627e, \u6ca1\u627e\u5230\u65f6\u7684\u515c\u5e95\u51fd\u6570. Ps: \u7c7b\u7684\u5c5e\u6027\u5f15\u7528\u548c\u8d4b\u503c\u7a0d\u5fae\u5b9e\u9a8c\u4e86\u4e0b,\u6709\u4e9b\u8bb8\u4e0d\u540c,\u4e0d\u60f3\u6df1\u7a76\u5566,\u9047\u5230\u4e86\u518d\u8bf4. \u76ee\u524d,\u53ef\u4ee5\u786e\u5b9a\u4e00\u70b9,\u7c7b\u5728\u8c03\u7528\u81ea\u8eab\u5c5e\u6027\u7684\u65f6\u5019, \u662f\u4e0d\u4f1a\u89e6\u53d1 __getattribute__ \u65b9\u6cd5 class Foo : a = 0 def __setattr__ ( self , key , value ): self . __dict__ [ key ] = value def __getattr__ ( self , key ): raise AttributeError ( \"' %s ' object has no attribute ' %s '\" \\ % ( self . __class__ . __name__ , key )) f = Foo () f . name = 'dc' # -- \u8d4b\u503c\u64cd\u4f5c\u76f4\u63a5\u8c03\u7528__setattr__ setattr ( f , 'age' , 18 ) # -- \u540c\u4e0a print ( f . a , f . age , f . name ) # 0 18 dc print ( getattr ( f , \"a\" , None )) # 0 print ( getattr ( f , \"xxx\" , None )) # None -- xxx\u5728f\u4e2d\u6ca1\u6709,\u5728Foo\u4e2d\u4e5f\u6ca1\u6709,\u8c03\u7528__getattr__ # \u53ea\u4e0d\u8fc7,\u8c03\u7528__getattr__\u5f97\u5230error\u540e,\u4f1a\u81ea\u52a8\u5904\u7406\u8fd4\u56deNone print ( f . xxx ) # -- \u540c\u4e0a \u6309\u7167\u5c5e\u6027\u67e5\u627e\u987a\u5e8f\u6ca1\u627e\u5230,\u4f1a\u8c03\u7528__getattr__,\u62a5\u9519 print ( f . __dict__ ) # {'name': 'dc', 'age': 18} \u5143\u7c7b\u7684\u590d\u4e60 \u00b6 metaclass\u5143\u7c7b\u5bf9\u7c7b\u7684\u64cd\u4f5c\u4e00\u822c\u90fd\u4f1a\u5728\u5143\u7c7bnew\u65b9\u6cd5\u91cc\u5b9e\u73b0 \u6ce8\u610f\u7406\u89e3\u8fd9\u4e00\u53e5\u8bdd: \u5728 __init__ \u7684\u65f6\u5019, \u7c7b\u5df2\u7ecf\u88ab\u521b\u5efa\u4e86, \u5728\u5143\u7c7b\u7684 __init__ \u65b9\u6cd5\u4e2d\u5bf9\u7c7b\u7684\u547d\u540d\u7a7a\u95f4\u7684\u4fee\u6539\u64cd\u4f5c\u5e76\u4e0d\u4f1a\u751f\u6548. # -- type\u7684\u4f2a\u4ee3\u7801! class type : def __call__ ( self , * args , ** kwargs ): obj = self . __new__ ( self , * args , ** kwargs ) self . __init__ ( obj , * args , ** kwargs ) return obj \u9700\u6c42: \u5728\u81ea\u5b9a\u4e49\u5143\u7c7bMymeta\u4e2d\u628a\u81ea\u5b9a\u4e49\u7c7bPeople\u7684\u6570\u636e\u5c5e\u6027\u90fd\u53d8\u6210\u5927\u5199 \u89e3\u51b3\u65b9\u6848: \u5728 __new__ \u4e2d\u5bf9\u672a\u5b9e\u4f8b\u5316\u7684\u7c7b\u8fdb\u884c\u4fee\u6539 class Mymeta ( type ): def __new__ ( mcs , name , bases , attrs ): update_dic = {} for k , v in attrs . items (): # -- \u6570\u636e\u5c5e\u6027\u4e0d\u53ef\u88ab\u8c03\u7528\u4e14\u4e0d\u4ee5\u53cc\u4e0b\u5212\u7ebf\u5f00\u5934 if not callable ( v ) and not k . startswith ( '__' ): update_dic [ k . upper ()] = v else : update_dic [ k ] = v return super () . __new__ ( mcs , name , bases , update_dic ) def __init__ ( cls , name , bases , attrs ): # -- \u53ef\u4ee5\u770b\u5230\u5728__new__\u4e2d\u521b\u5efa\u5bf9\u8c61\u65f6,\u4fee\u6539\u4e86attrs,\u4f46__init__\u6536\u5230\u7684\u662f\u4fee\u6539\u524d\u7684. # \u8fd9\u53ef\u4ee5\u4f7f\u7528type\u7684\u4f2a\u4ee3\u7801\u6765\u89e3\u91ca! # {'__module__': '__main__', '__qualname__': 'People', 'country': 'china'} print ( attrs ) super () . __init__ ( name , bases , attrs ) class People ( object , metaclass = Mymeta ): country = \"china\" if __name__ == '__main__' : p = People () print ( p . __dict__ ) # {} print ( hasattr ( People , 'country' )) # False print ( hasattr ( People , 'COUNTRY' )) # True print ( getattr ( p , \"COUNTRY\" , None )) # china \u4e00\u70b9\u5c0f\u60f3\u6cd5: \u66f2\u7ebf\u6551\u56fd, \u5728 __init__ \u4e2d, \u7ed9People\u7c7b\u7684\u547d\u540d\u7a7a\u95f4\u6dfb\u52a0\u5927\u5199\u7684\u6570\u636e\u5c5e\u6027, \u4f46\u5c0f\u5199\u7684\u6570\u636e\u5c5e\u6027\u4f9d\u7136\u5b58\u5728.. from copy import deepcopy class Mymeta ( type ): def __init__ ( cls , name , bases , attrs ): # -- \u5355\u4e2a\u4e0b\u5212\u7ebf\u662f\u4e00\u4e2aPython\u547d\u540d\u7ea6\u5b9a,\u8868\u793a\u8fd9\u4e2a\u540d\u79f0\u662f\u4f9b\u5185\u90e8\u4f7f\u7528\u7684 _attrs = deepcopy ( attrs ) # -- \u7528_attrs,\u662f\u56e0\u4e3a\u5728\u5faa\u73af\u4f53\u91cc\u4f1a\u5bf9attrs\u8fdb\u884c\u6539\u53d8 for k , v in _attrs . items (): if not callable ( v ) and not k . startswith ( '__' ): \"\"\" super(Mymeta, cls).__setattr__(k.upper(), v) -- \u53ef\u4ee5\u5f97\u5230\u6b63\u786e\u7ed3\u679c,\u5f88\u795e\u5947. \u90a3\u4e48\u4e0a\u9762\u8fd9\u4e2asuper().__setattr__()\u8bed\u53e5\u53c8\u7b49\u540c\u4e8e\u4ec0\u4e48\uff1f\u60f3\u4e86\u60f3.\u4e0d\u6df1\u7a76\u4e86. \u9519\u8bef\u7684\u5b9e\u8df5 attrs[k.upper()] = v # -- \u4e0d\u4f1a\u5728People\u7684__dict__\u4e2d\u751f\u6548 cls.__setattr__(k.upper(), v) # -- \u62a5\u9519 cls.__dict__[k.upper()] = v # -- \u62a5\u9519 \u4f46\u77e5\u9053\u4e86 \u5b9e\u4f8b\u4f7f\u7528\u53cd\u5c04setattr\u4f1a\u8c03\u7528__setattr__,\u4f46\u7c7b\u4f7f\u7528\u53cd\u5c04setattr\u4e0d\u4f1a.. (\u5728\u62e6\u622a\u70b9\u53f7\u8fd0\u7b97\u4e2d\u6253\u65ad\u70b9\u5b9e\u8df5\u51fa\u6765\u7684!) \u7d2f\u4e86,\u8bb0\u4f4f\u4e00\u70b9\u5c31\u597d,\u5bf9\u7c7b\u7684\u64cd\u4f5c\u5728\u5143\u7c7b\u7684__new__\u4e2d\u5b9e\u73b0!(\u3064\u0414`)\u30ce \u6211\u76f4\u63a5\u53cd\u624b\u4e00\u4e2a\u8eba\u5e73. \"\"\" setattr ( cls , k . upper (), v ) # -- \u7528\u53cd\u5c04\u5c31\u4f1a\u751f\u6548 \u7ed9People\u7c7b\u6dfb\u52a0\u5c5e\u6027 # -- \u5373type\u91cc\u7684__init__\u4e0d\u4f1a\u5bf9attrs\u6709\u4efb\u4f55\u7684\u64cd\u4f5c!! super () . __init__ ( name , bases , attrs ) class People ( object , metaclass = Mymeta ): country = \"china\" if __name__ == '__main__' : p = People () print ( p . __dict__ ) # {} print ( hasattr ( People , 'country' )) # True print ( hasattr ( People , 'COUNTRY' )) # True print ( getattr ( p , \"COUNTRY\" , None )) # china ORM\u5bf9\u8c61\u5173\u7cfb\u6620\u5c04 \u00b6 \u53c2\u8003\u94fe\u63a5: https://www.cnblogs.com/liuqingzheng/articles/9006025.html \u9700\u6c42: \u6570\u636e\u5e93\u4e2d\u7684user\u8868\u5bf9\u5e94\u7a0b\u5e8f\u5f53\u4e2d\u7684User\u7c7b. user\u8868\u4e2d\u6709\u6761\u6570\u636e, id:1 name:lqz password:123 \u5e0c\u671b\u53ef\u4ee5\u5b9e\u73b0\u4e2aselect\u65b9\u6cd5,\u901a\u8fc7User.select(id=1)\u62ff\u5230\u8fd9\u6761\u6570\u636e.. \u56e0\u4e3aUser\u7684\u4e00\u4e2a\u5b9e\u4f8b\u5e94\u8be5\u5bf9\u5e94user\u8868\u4e2d\u7684\u4e00\u6761\u6570\u636e, \u6240\u4ee5\u8fd4\u56de\u7684\u7ed3\u679c\u5e94\u5f53\u662fUser\u7684\u4e00\u4e2a\u5b9e\u4f8b. \u4e5f\u5e0c\u671b\u5b9e\u4f8bobj\u80fd\u901a\u8fc7 obj.name \u3001obj.password \u62ff\u5230\u5bf9\u5e94\u7684\u5b57\u6bb5\u503c! \u5f53\u7136,\u5e0c\u671b\u901a\u8fc7User\u7c7b\u5b9e\u73b0\u5bf9user\u8868\u7684\u67e5\u8be2\u3001\u589e\u52a0\u3001\u4fee\u6539.. \u256e(\u256f\u25bd\u2570)\u256d \u8fd9\u6837\u4e00\u6765, \u5c31\u4e0d\u7528\u5199sql\u6765\u64cd\u4f5c\u5566!! \u5927\u4f53\u7684\u521d\u6b65\u601d\u8003: 1> \u6570\u636e\u8868\u4e2d\u7684\u6bcf\u79cd\u5b57\u6bb5\u7c7b\u578b\u90fd\u5305\u542b\u4f17\u591a\u5c5e\u6027, \u6bcf\u79cd\u5b57\u6bb5\u7c7b\u578b\u90fd\u6620\u5c04\u4e00\u4e2a\u5b57\u6bb5\u7c7b; 2> \u6570\u636e\u8868\u6620\u5c04\u4e00\u4e2a\u8868\u7c7b,\u8be5\u7c7b\u4f1a\u7528\u7c7b\u7684\u6570\u636e\u5c5e\u6027\u8868\u793a\u8fd9\u4e9b\u5b57\u6bb5\u7c7b\u7684\u5b9e\u4f8b,\u6765\u6620\u5c04\u6570\u636e\u8868\u4e2d\u7684\u5b57\u6bb5/\u6bcf\u4e00\u5217. \u5e76\u4e14\u8be5\u8868\u7c7b\u7684\u5b9e\u4f8b\u6620\u5c04\u8868\u4e2d\u7684\u4e00\u6761\u6570\u636e; \u7b80\u6613\u7684ORM\u6846\u67b6,\u8981\u5b9e\u73b0\u7684\u5927\u4f53\u6548\u679c\u5982\u4e0b: class User ( ORM ): # -- \u5b9a\u4e49\u6570\u636e\u8868\u7684\u5b57\u6bb5 name = CharField () age = IntField () if __name__ == '__main__' : # -- \u6839\u636e\u6761\u4ef6\u67e5\u8be2\u5230\u7528\u6237\u8868\u4e2d\u7684\u67d0\u6761\u6570\u636e user0 = User . select ( id = 1 ) print ( user0 . name ) # -- \u4fee\u6539 user0 . name = 'lqz_0' user0 . update () # -- \u63d2\u5165\u6570\u636e # user = User(name='dc',name='dc',password='321') \u53ef\u4ee5\u62c6\u5206\u4e3a\u4ee5\u4e0b\u4e09\u884c\u4ee3\u7801. user = User () user . name = \"dc\" user . password = 321 user . insert () # -- \u8c03\u7528insert\u51fd\u6570\u81ea\u52a8\u5c06\u6570\u636e\u63d2\u5165\u5230\u6570\u636e\u5e93\u4e2d ps : \u5b57\u5178\u53ef\u4ee5\u5929\u7136\u7684\u5b58\u50a8\u6570\u636e . \u539f\u7406\u770b\u4f3c\u4e5f\u4e0d\u7b80\u5355,\u5f88\u7ed5,\u5177\u4f53\u5b9e\u73b0\u8fc7\u7a0b\u66f4\u7ed5.. orz \u9700\u8c28\u614e,\u6b65\u6b65\u4e3a\u8425!!\u53cd\u590d\u63a8\u6572! \u57f9\u517b\u601d\u7ef4\u6a21\u5f0f\u5c24\u4e3a\u91cd\u8981! Field\u7c7b \u00b6 \u5b9a\u4e49\u4e00\u4e2aField\u7c7b\u8868\u793a\u6570\u636e\u8868\u7684 \u5b57\u6bb5/\u5217 \u5177\u6709\u54ea\u4e9b\u5c5e\u6027. ( name \u5217\u540d/\u5b57\u6bb5\u540d\u3001column_type\u5b57\u6bb5\u7c7b\u578b\u3001primary_key\u8be5\u5b57\u6bb5\u662f\u5426\u662f\u4e3b\u5065\u3001default\u5b57\u6bb5\u7684\u9ed8\u8ba4\u503c ) \u5e76\u884d\u751f\u51fa\u4e24\u4e2a\u5b50\u7c7b StringField\u548cIntegerField. Models\u7c7b \u00b6 \u5b9a\u4e49\u4e86\u4e00\u4e2aModels\u7c7b 1 > \u7ee7\u627f\u4e86dict\u7c7b.\u4f7f\u5f97Model\u7c7b\u5177\u5907\u5b57\u5178\u7684\u7279\u6027. \u5b57\u5178\u53ef\u4ee5\u5929\u7136\u7684\u5b58\u50a8\u6570\u636e. \u518d\u4ed4\u7ec6\u60f3\u4e00\u60f3,\u4e00\u822c\u7c7b\u5b9e\u4f8b\u5316\u6709\u53c2\u6570\u65f6,\u90fd\u4f1a\u901a\u8fc7\u7c7b\u4e2d\u7684__init__\u7ed9\u5b9e\u4f8b\u589e\u6dfb\u72ec\u6709\u7684\u6570\u636e\u5c5e\u6027. \u4f46\u8fd9\u91cc\u901a\u8fc7Models ( k1 = v1,k2 = v2 ) \u5b9e\u4f8b\u5316\u5f97\u5230\u5bf9\u8c61obj,\u5e76\u4e0d\u4f1a\u6709\u72ec\u6709\u5c5e\u6027k1\u3001k2 Models\u5b9e\u4f8b\u5316\u7684\u5bf9\u8c61obj\u672c\u8d28\u5c31\u662f\u4e00\u4e2a\u5b57\u5178! \u6253\u5370obj. \u7ed3\u679c\u4e3a { k1:v1,k2:v2 } \u4f46\u5b83\u4e5f\u5177\u5907\u5b9e\u4f8b\u7684\u7279\u6027,\u53ef\u4ee5\u8fdb\u884c\u5c5e\u6027\u5f15\u7528! ( \u5c3d\u7ba1obj.__dict__\u4e3a\u7a7a ) Ps: Models\u7c7b\u91cc\u7684__init__\u65b9\u6cd5\u5199\u4e0d\u5199\u90fd\u4e0d\u5f71\u54cd,\u6309\u7167\u67e5\u627e\u89c4\u5219 \u7ee7\u627fModels\u7684User\u7c7b\u7684\u5b9e\u4f8b\u90fd\u4f1a\u53bb\u8c03\u7528dict\u91cc\u7684__init__\u5b8c\u6210\u521d\u59cb\u5316. 2 > \u5b57\u5178\u662f\u4e0d\u80fd\u901a\u8fc7 ` . ` \u53d6\u5230value\u7684!! \u4f46\u8fd9\u91cc\u7684\u5b9e\u4f8b\u5177\u5907\u5b57\u5178\u7684\u7279\u6027,\u53ef\u4ee5\u901a\u8fc7 '.' \u8fdb\u884c\u5c5e\u6027\u5f15\u7528.. ` \u5b9e\u4f8b.\u5c5e\u6027 ` \u7684\u64cd\u4f5c\u5c5e\u6027\u67e5\u627e\u5931\u8d25 ( \u5728\u5b9e\u4f8b\u548c\u7c7b\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u90fd\u6ca1\u6709\u8be5\u5c5e\u6027 ) ,\u4f1a\u81ea\u52a8\u8bbf\u95ee\u7c7b\u4e2d\u7684__getattr__\u65b9\u6cd5! \u5728Models\u7c7b\u4e2d\u91cd\u5199\u4e86__getattr__, \"self[key]\" \u4f1a\u53bb\u770b\u770b\u5b57\u5178\u5b9e\u4f8b\u672c\u8eab\u6709\u6ca1\u6709\u8fd9\u4e2a\u952e! \u4f7f\u5f97Models\u7684\u5b9e\u4f8b\u53ef\u4ee5\u901a\u8fc7obj.k\u7684\u5f62\u5f0f\u53d6\u5230obj\u5b57\u5178\u5bf9\u8c61\u672c\u8eab\u5bf9\u5e94\u7684v try..except.. \u518d\u6b21\u8bf4\u660e,\u5b57\u5178\u5b9e\u4f8b\u7684\u547d\u540d\u7a7a\u95f4\u4e3a\u7a7a! 3 > ` \u5b9e\u4f8b.\u5c5e\u6027 = \u503c ` \u7684\u64cd\u4f5c \u4f1a\u81ea\u52a8\u8bbf\u95ee\u7c7b\u4e2d\u7684__setattr__ \u5728Models\u7c7b\u4e2d\u91cd\u5199\u4e86__setattr__, \"self[key] = value\" \u4f7f\u5f97Models\u7684\u5b9e\u4f8b\u53ef\u4ee5\u901a\u8fc7 obj.k = v \u7684\u65b9\u5f0f\u7ed9\u5b57\u5178\u5bf9\u8c61\u81ea\u8eab\u6dfb\u52a0\u952e\u503c\u5bf9. \u518d\u6b21\u5f3a\u8c03,\u7ee7\u627f\u4e86dict,\u91cd\u5199\u4e86\u4e24\u4e2a\u65b9\u6cd5 \u256e ( \uffe3\u25bd\uffe3 \"\" ) \u256d \u4f1a\u4f7f\u5f97 \"\u65e0\u8bba\u600e\u4e48\u5bf9obj\u589e\u5220\u6539\u67e5(\u4e24\u79cd\u65b9\u5f0f .\u3001[]),obj.__dict__\u90fd\u4e3a\u7a7a!!\u64cd\u4f5c\u7684\u90fd\u662f\u5b57\u5178\u5bf9\u8c61obj\u672c\u8eab!\" 4 > Model\u7c7b\u4f7f\u7528\u5143\u7c7bModelsMetaclass,\u8fd9\u6837\u5c31\u53ef\u4ee5\u62e6\u622aModel\u7c7b\u4ee5\u53ca\u7ee7\u627fModel\u7c7b\u7684\u5b50\u7c7b\u7684\u521b\u5efa\u8fc7\u7a0b!! \u7b80\u5355\u6765\u8bf4: Models\u7ee7\u627fdict\u5b57\u5178\u7c7b,\u91cd\u5199__setattr__\u548c__getattr__,\u662f\u4e3a\u4ec0\u4e48? \u5148\u8981\u660e\u767d \u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61obj [ k ] \u62a5\u9519 ; \u5b57\u5178my_dict.k\u62a5\u9519 -- \u524d\u8005\u662f\u4e3a\u4e86Model\u7684\u5b50\u7c7bUser\u5728\u5b9e\u4f8b\u5316\u540e,\u5177\u5907\u5b57\u5178\u7684\u7279\u6027,\u80fd\u50cf\u5b57\u5178\u4e00\u6837obj [ k ]= v\u5f80\u5b57\u5178\u91cc\u6dfb\u52a0k-v \u4e5f\u53ef\u4ee5\u5728User\u5b9e\u4f8b\u5316\u65f6\u4f20\u9012\u4e00\u5806 k = v \u5b8c\u6210\u5b9e\u4f8b\u5316. -- \u540e\u8005\u662f\u4e3a\u4e86\u80fd\u901a\u8fc7obj.k = v \u5f80\u5b57\u5178\u91cc\u6dfb\u52a0\u4fee\u6539k-v ; \u5f53\u7136\u4e5f\u53ef\u4ee5\u901a\u8fc7obj.k\u6210\u529f\u53d6\u503c. \u6ce8\u610f: \u5b9e\u4f8b obj.__dict__ \u662f\u7a7a\u7684!! User\u7c7b \u00b6 \u521b\u5efa\u4e00\u4e2aUser\u7c7b\u7ee7\u627fModels\u7c7b -- \u4fbf\u4e8e\u5b9e\u9a8c \u8be5\u7c7b\u5b9a\u4e49\u4e864\u4e2a\u7c7b\u5c5e\u6027 1 > table_name\u8868\u540d >> \u5b57\u7b26\u4e32\u7c7b\u578b 2 > id\u7f16\u53f7\u3001name\u59d3\u540d\u3001password\u5bc6\u7801 >> \u90fd\u662fField\u5b57\u6bb5\u7c7b\u578b,\u6bcf\u4e2a\u5b57\u6bb5\u90fd\u5305\u542b\u591a\u4e2a\u5c5e\u6027 ( name\u3001column_type\u7b49 ) User\u7c7b -- \u7528\u6237\u8868 User\u7c7b\u91cc\u7c7b\u5c5e\u6027table_name -- \u8868\u540d User\u7c7b\u91cc\u7c7b\u5c5e\u6027id\u3001name\u3001password -- \u7528\u6237\u8868\u6bcf\u4e00\u5217\u7684\u540d\u5b57,\u4e5f\u5c31\u662f\u5b57\u6bb5\u540d User\u7c7b\u5b9e\u4f8b\u5316\u5f97\u5230\u7684\u5b9e\u4f8b\u5bf9\u8c61 -- \u7528\u6237\u8868\u91cc\u7684\u4e00\u6761/\u4e00\u884c\u6570\u636e ( \u9700\u8981User\u7c7b\u5b9e\u4f8b\u5316\u7684\u65f6\u5019,\u53ef\u4ee5\u4f20\u4efb\u610f k = v \u7684\u6570\u636e!\u8fd9\u4e5f\u5c31\u662f\u4e3a\u5565Models\u7c7b\u8981\u7ee7\u627fdict\u7c7b! ) \u2605 +++ <\u5f53\u65f6\u6211\u7279\u522b\u7591\u60d1,\u600e\u4e48\u5c31\u5c06User\u7684\u5b9e\u4f8bobj\u53d8\u6210\u7528\u6237\u8868\u4e2d\u7684\u6570\u636e\u5566???\u600e\u4e48\u60f3\u90fd\u60f3\u4e0d\u901a.> \"\u7834\u89e3\u7684\u5173\u952e\u5728\u4e8eUser\u7c7b\u7684\u5b9e\u4f8bobj,\u672c\u8d28\u662f\u4e00\u4e2a\u5b57\u5178\" ,\u6211\u4eec\u53ef\u4ee5\u53d6\u5230\u5b57\u5178\u672c\u8eab\u91cc\u7684\u952e\u503c\u5bf9\u6784\u5efasql\u8bed\u53e5, \u901a\u8fc7\u7b2c\u4e09\u65b9\u5e93pymysql\u5b9e\u73b0\u5bf9\u7528\u6237\u8868\u6570\u636e\u7684\u64cd\u4f5c. \u5f53\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u53cd\u8fc7\u6765\u901a\u8fc7pymysql\u5c06\u67e5\u5230\u7684\u6570\u636e,\u6784\u5efaUser\u7684\u5b9e\u4f8b! \"\u4e00\u6761\u6570\u636e \u5bf9\u5e94 \u4e00\u4e2a\u5b9e\u4f8b\" \u7b80\u5355\u6765\u8bf4,\u82e5pymysql\u7684\u67e5\u8be2\u7ed3\u679c\u662f [{ id:1,name: 'dc' } , { id:2,name: 'lqz' }] \u5bf9\u7ed3\u679cfor\u5faa\u73af,\u5bf9\u5faa\u73af\u5f97\u5230\u7684\u6bcf\u4e00\u9879\u62c6\u5305, [ User ( **item ) for item in res ] \u5217\u8868\u4e2d\u7684\u4e24\u4e2a\u5143\u7d20\u662f\u4e24\u4e2aUser\u7c7b\u7684\u5b9e\u4f8b -- User ( id = 1 ,name = 'dc' ) \u3001User ( id = 2 ,name = 'lqz' ) \u5373 '\u2605 \u5c06\u4e00\u6761\u6761\u7684\u6570\u636e\u8f6c\u5316\u6210User\u7c7b\u7684\u5b9e\u4f8b\u5bf9\u8c61!!'' ==> \u6ce8\u610f: \u5bf9\u5b9e\u4f8b\u7684\u6253\u5370\u7ed3\u679c\u662f{id:1,name:' dc '},{id:2,name:' lqz ' } \u770b\u8d77\u6765\u662f\u5b57\u5178,\u4f46\u4e0d\u4ec5\u4ec5\u662f\u5b57\u5178! \u601d\u8003\uff1f\u82e5User\u7c7b\u7684\u7236\u7c7bModels\u4e0d\u7ee7\u627fdict\u80fd\u5426\u5b9e\u73b0\u8fd9\u4e9b\u529f\u80fd?\u6709\u4f55\u533a\u522b?\u6682\u4e14\u653e\u4e0b.\u505a\u5b8c\u6574\u4e2a\u9879\u76ee\u540e\u518d\u601d\u8003! \u4e0d\u540c\u7684\u5b9e\u73b0: https://seanlee97.github.io/2018/08/23/\u8c08\u8c08python\u4e2d\u7684\u5143\u7c7b\u4ee5\u53ca\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684ORM\u6846\u67b6/ (\u8fd9\u4e2a\u91cc\u9762\u5c31\u6ca1\u6709\u7528\u5b57\u5178!! \u5b83\u7684\u89e3\u51b3\u65b9\u6848\u662f\u5728Models\u7c7b\u7684 __init__ \u91cc\u4f7f\u7528\u4e86setattr\u5b8c\u6210\u4e86\u521d\u59cb\u5316) ModelsMetaclass\u5143\u7c7b \u00b6 \u81ea\u5b9a\u4e49\u4e00\u4e2aModelsMetaclass\u5143\u7c7b \u9700\u6c42: \u6570\u636e\u5e93\u4e2d\u7684\u6bcf\u4e2a\u8868,\u90fd\u6709\u8868\u540d\u3001\u6bcf\u4e00\u5217\u7684\u5217\u540d\u3001\u4ee5\u53ca\u4e3b\u952e\u662f\u54ea\u4e00\u5217 \u6211\u4eec\u9700\u8981\u5c06\u6570\u636e\u5e93\u4e2d\u7684\u4e00\u5f20\u8868\u4e0e\u4e00\u4e2a\u7c7b\u76f8\u5bf9\u5e94,\u7c7b\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u5e94\u8be5\u6709\u5c5e\u6027\u6765\u6620\u5c04\u6570\u636e\u8868\u4e2d\u7684\u8fd9\u4e9b\u5c5e\u6027 \u5206\u6790: \u4f7f\u7528\u5143\u7c7b\u7684\u7c7b\u5728\u521b\u5efa\u5b8c\u6210\u540e,\u7c7b\u7684\u547d\u540d\u7a7a\u95f4\u91cc\u5fc5\u987b\u6709table_name\u3001primary_key\u3001mappings\u5c5e\u6027! table_name -- \u8868\u540d primary_key -- \u4e3b\u952e\u540d mappings -- \u8868\u4e2d\u7684\u6bcf\u4e00\u5217/\u8868\u4e2d\u6240\u6709\u7684\u5b57\u6bb5 \u5373\u4e00\u5806Field\u5bf9\u8c61 \"\u76f8\u5f53\u4e8e\u5c06\u4e00\u5f20\u6570\u636e\u8868\u7684\u5173\u952e\u4fe1\u606f\u6574\u7406\u597d!\" Ps:\u6574\u7406\u5b8c\u6bd5\u540e,\u7c7b\u5b9a\u4e49\u8fc7\u7a0b\u4e2d\u6267\u884c\u7c7b\u4ee3\u7801\u5f97\u5230\u7684\u653e\u5728\u7c7b\u547d\u540d\u7a7a\u95f4\u91cc\u7684\u90a3\u4e9b\u5185\u5bb9\u5c31\u53ef\u4ee5\u4e22\u5f03\u5566. \u89e3\u51b3: \u9700\u8981\u91cd\u5199\u5143\u7c7b\u91cc\u7684__new__\u65b9\u6cd5. \u7b80\u5355\u6765\u8bf4: Q:\u8bbe\u7f6eModels\u7684\u5143\u7c7b\u662fModelsMetaclass,\u662f\u4e3a\u4ec0\u4e48? A:\u662f\u4e3a\u4e86Model\u7684\u5b50\u7c7bUser\u5728\u521b\u5efa\u65f6,\u88ab\u62e6\u622a. \u6574\u7406\u597d\u6570\u636e,\u5c06table_name\u3001primary_key\u548c\u4e00\u5806Field\u5bf9\u8c61 \u653e\u5230User\u7c7b\u7684__dict__\u4e2d User\u53ef\u4ee5\u901a\u8fc7.\u7684\u65b9\u5f0f\u53ef\u4ee5\u5bf9__dict__\u4e2d\u7684\u5c5e\u6027\u8fdb\u884c\u5f15\u7528!! \u5177\u4f53\u5b9e\u73b0\u8fc7\u7a0b: 1 > \u6570\u636e\u5e93\u8868\u7684\u7236\u7c7bModels\u4e0d\u9700\u8981\u62e6\u622a,\u8d70\u6b63\u5e38\u7684\u6d41\u7a0b ` if name == \"Models\" : ` 2 > -- \u62ff\u5230\u8868\u540d attrs\u662f\u4e00\u4e2a\u5b57\u5178,\u91cc\u9762\u5b58\u653e\u7684\u662f\u7c7b\u5b9a\u4e49\u6267\u884c\u7c7b\u4ee3\u7801\u7684\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u952e\u503c\u5bf9 table_name = attrs.get ( 'table_name' ) # -- \u5b57\u5178\u7684\u83b7\u53d6\u503c\u7684\u65b9\u6cd5,\u83b7\u53d6\u4e0d\u5230\u9ed8\u8ba4\u8fd4\u56deNone \u82e5attrs\u4e2d\u6ca1\u6709\u952e \"table_name\" ,\u7528\u7c7b\u540d\u5f53\u4f5c\u8868\u540d 3 > -- \u5c06\u6570\u636e\u8868\u7684\u6bcf\u4e2a\u5b57\u6bb5\u653e\u5230mappings\u5b57\u5178\u4e2d \u4ee5\u53ca \u62ff\u5230primary_key\u4e3b\u952e\u540d/\u8bbe\u7f6e\u4e86\u4e3b\u952e\u7684\u5b57\u6bb5\u7684\u540d\u5b57 mappings\u5b57\u5178\u4e2d\u7684k\u662fUser\u7c7b\u4e2d\u8bbe\u7f6e\u7684\u5b57\u6bb5\u540d,v\u662f\u8be5\u5b57\u6bb5\u540d\u5bf9\u5e94\u7684Field\u5b57\u6bb5\u5b9e\u4f8b\u5bf9\u8c61 { 'id' :<__main__.IntegerField object at 0x7..>, 'name' :<__main__.StringField ...>... } attrs\u4e2d\u8fd8\u6709__doc__\u3001__module__..\u8fd9\u4e9b\u4e1c\u897f.\u4e0d\u662f\u6211\u4eec\u9700\u8981\u7684! So,\u8981\u5bf9attrs\u4e2d\u7684k-v\u8fdb\u884c\u5224\u65ad,v\u662fField\u7c7b\u578b\u7684\u653e\u8fdb\u53bb,\u5373\u628aattrs\u4e2d\u4e0e\u6570\u636e\u5e93\u8868\u5b57\u6bb5\u6709\u5173\u7684\u5217\u63d0\u53d6\u51fa\u6765. \u82e5v\u662fField\u7c7b\u578b,\u8fd8\u53ef\u4ee5\u6839\u636ev\u7684primary_key\u5c5e\u6027\u5224\u65ad\u8be5\u5b57\u6bb5\u662f\u5426\u662f\u4e3b\u952e! \u6ce8\u610f,\u5065\u58ee\u6027\u7684\u5224\u65ad,\u53ea\u80fd\u6709\u4e00\u4e2a\u4e3b\u952e!\u4e00\u5f00\u59cbprimary_key\u8bbe\u7f6e\u7684\u521d\u59cb\u503c\u662fNone. 4 > -- \u4e00\u70b9\u4f18\u5316 mappings\u5b57\u5178\u4f1a\u5b58\u5165User.__dict__\u4e2d\u7684,So,\u653e\u5165mappings\u7684\u5c5e\u6027,User.__dict__\u4e2d\u6ca1\u5fc5\u8981\u518d\u5b58\u4e00\u4efd. \u60f3\u4e00\u60f3,\u4e0dpop\u6389\u7684\u8bdd new_user = User ( name = 'egon' , password = '666' ) getattr ( user, name, None ) \u62ff\u5230\u7684\u5c31\u662f\u7c7b\u7684\u547d\u540d\u7a7a\u95f4\u91ccname\u5bf9\u5e94\u7684Field\u5bf9\u8c61\u5566,\u4e0d\u662fname\u7684\u503c! \u82e5User\u7c7b/\u8868\u4e2d\u6ca1\u6709\u4e3b\u952e,\u629b\u5f02\u5e38 5 > -- \u5c06table_name\u3001 primary_key\u3001mappings\u653e\u5165User.__dict__\u4e2d!! \u5e76\u5b8c\u6210User\u7c7b\u7684\u521b\u5efa. \"\u63d0\u9192\u4e00\u70b9,User\u7684\u547d\u540d\u7a7a\u95f4\u91cc\u7684\u4e1c\u897f,User\u7c7b\u7684\u5b9e\u4f8b\u662f\u5171\u4eab\u7684!!\" \u4e3a\u4e86\u540e\u9762\u7684\u67e5\u8be2\u66f4\u65b0\u548c\u63d2\u5165\u529f\u80fd\u7684\u5b9e\u73b0! \"\u8fd9\u6837\u4e00\u6298\u817e,\u53ea\u8981\u7c7b\u88ab\u8be5\u5143\u7c7b\u4e00\u62e6\u622a,\u8fd9\u4e9b\u88ab\u62e6\u622a\u7684\u7c7b\u7684\u547d\u540d\u7a7a\u95f4\u91cc\u90fd\u6709\u4e00\u6837\u7684key\u503c!!\" Mysql\u7c7b \u00b6 \u901a\u8fc7\u7b2c\u4e09\u65b9pymysql\u6a21\u5757,\u5b9e\u73b0\u4e86Mysql\u7c7b,\u4e3a\u521b\u5efa\u7684sql\u94fe\u63a5\u63d0\u4f9b\u4e86\u67e5\u8be2\u3001\u66f4\u65b0\u7684\u63a5\u53e3! ms = Mysql () \u67e5\u8be2\u63a5\u53e3 -- ms.select () \u66f4\u65b0\u3001\u4fdd\u5b58\u63a5\u53e3 -- ms.execute () \u6ce8\u610f\u51e0\u70b9: 1 > \u67e5\u8be2\u7684\u7ed3\u679c\u96c6\u662f\u5217\u8868\u5d4c\u5957\u5b57\u5178\u7684\u683c\u5f0f [{ k:v,k:v } , { k:v }] 2 > autocommit = True 3 > \u7528\u7c7b\u65b9\u6cd5\u5b9e\u73b0\u5355\u4f8b\u6a21\u5f0f,\u907f\u514d\u6bcf\u6b21\u67e5\u8be2\u90fd\u4f1aMysql () \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u94fe\u63a5 \u67e5\u8be2\u3001\u66f4\u65b0\u3001\u63d2\u5165\u7684\u64cd\u4f5c\u90fd\u7528\u7684\u540c\u4e00\u4e2a\u6570\u636e\u5e93\u94fe\u63a5!! 4 > '\u2605\u2605\u2605' \u7279\u522b\u6ce8\u610f!! \u7528 ` cursor.execute ( sql, []) ` \u5bf9sql\u81ea\u52a8\u8fdb\u884c\u62fc\u63a5\u5e76\u6267\u884c,\u53ef\u4ee5\u9632\u6b62sql\u6ce8\u5165. '\u4f46\u53ea\u4f1a\u62fc\u63a5\u5b57\u6bb5\u503c!!\u4e0d\u4f1a\u5bf9\u8868\u540d\u548c\u5b57\u6bb5\u540d\u8fdb\u884c\u62fc\u63a5!!' import pymysql class Mysql: __instance = None def __init__ ( self ) : self.conn = pymysql.connect ( host = \"127.0.0.1\" , port = 3306 , user = \"root\" , password = \"123456\" , charset = \"utf8\" , database = \"youku\" , autocommit = True # -- \u81ea\u52a8\u63d0\u4ea4 ) self.cursor = self.conn.cursor ( cursor = pymysql.cursors.DictCursor ) # -- \u5173\u95ed def close_db ( self ) : self.cursor.close () self.conn.close () # -- \u67e5\u8be2 def select ( self, sql, args = None ) : pass # -- \u66f4\u65b0\u3001\u4fdd\u5b58 update\u3001insert def execute ( self, sql, args ) : pass # -- \u4f7f\u7528\u7c7b\u65b9\u6cd5\u5b9e\u73b0\u5355\u4f8b\u6a21\u5f0f @classmethod def singleton ( cls ) : if not cls.__instance: cls.__instance = cls () return cls.__instance if __name__ == '__main__' : ms = Mysql () res = ms.select ( \"select * from user where id=%s\" , [ 1 ]) print ( res ) ms.close_db () \u5b8c\u5584Model\u7c7b \u00b6 # -- \u6bcf\u4e2a\u6570\u636e\u8868\u90fd\u5e94\u8be5\u5177\u5907\u67e5\u8be2\u3001\u63d2\u5165\u3001\u4fdd\u5b58\u7b49\u65b9\u6cd5!! 1 > def select_res ( cls, **kwargs ) : -- \u9759\u6001\u65b9\u6cd5<\u8fd9\u91cc\u624b\u52a8\u4f20\u4e86\u4e00\u4e2a\u7c7b\u5bf9\u8c61\u8fdb\u53bb \u8c03\u7528\u67e5\u8be2\u63a5\u53e3\u53d6\u5230\u6570\u636e 2 > def select_one ( cls, **kwargs ) : -- \u7c7b\u65b9\u6cd5 \u53ea\u4f1a\u5f97\u5230\u4e00\u6761\u6570\u636e \u8be5\u65b9\u6cd5\u91cc\u9762\u4f1a\u8c03\u7528\u9759\u6001\u65b9\u6cd5select_res \u62ff\u5230\u7ed3\u679c\u540e,\u4f1a\u5c06\u8be5\u6761\u6570\u636e\u8f6c\u5316\u6210User\u7c7b\u7684\u5b9e\u4f8b\u5bf9\u8c61!! 3 > def select_many ( cls, **kwargs ) : -- \u7c7b\u65b9\u6cd5 \u5f97\u5230\u4e00\u6761\u6216\u8005\u591a\u6761\u6570\u636e \u540c\u7406,\u8be5\u65b9\u6cd5\u4e5f\u4f1a\u8c03\u7528\u9759\u6001\u65b9\u6cd5select_res '\u2605 \u62ff\u5230\u7ed3\u679c\u540e,\u4f1a\u5c06\u4e00\u6761\u6761\u7684\u6570\u636e\u8f6c\u5316\u6210User\u7c7b\u7684\u5b9e\u4f8b\u5bf9\u8c61!!' \u6ce8\u610f!\u8be5\u65b9\u6cd5\u91cc\u6709\u4e2a\u5224\u65ad,\u5f53kwargs\u4e3a\u7a7a\u65f6,\u4f1a\u91cd\u65b0\u62fc\u63a5\u4e00\u4e2asql\u8bed\u53e5,\u67e5\u8be2\u8be5\u8868\u4e2d\u7684\u6240\u6709\u6570\u636e! \u4f53\u4f1a\u4e0b,\u7ec6\u54c1 ` [ cls ( **r ) for r in res ] ` 4 > def update ( self ) : -- \u5b9e\u4f8b\u65b9\u6cd5/\u5bf9\u8c61\u7684\u7ed1\u5b9a\u65b9\u6cd5 \u5bf9\u6570\u636e\u8fdb\u884c\u66f4\u65b0 \u8be5\u65b9\u6cd5\u662f\u771f\u7684\u7ed5!!-_- \u6211\u4eec\u9ed8\u8ba4\u7528\u4e3b\u952e\u8fdb\u884c\u66f4\u65b0!! \u2605 \u6ce8\u610f:\u6709\u4e86\u771f\u6b63\u7684\u5b9e\u4f8b/\u62ff\u5230\u4e00\u6761\u6570\u636e\u624d\u80fd\u771f\u6b63\u7684\u8fdb\u884c\u66f4\u65b0,\u5e94\u5177\u4f53\u5230\u67d0\u4e2a\u5b9e\u4f8b\u5bf9\u8c61,\u6240\u4ee5\u8be5\u65b9\u6cd5\u4e0d\u80fd\u662f\u7c7b\u65b9\u6cd5! \u601d\u8003\u5206\u6790,\u9996\u5148\u6211\u4eec\u8981\u62fc\u63a5\u4e00\u4e2asql ` update user set name = 'lqz' ,password = 123 where id = 1 ` \u62c6\u5206\u5f00\u6765,\u6211\u4eec\u8981\u62ff\u5230 >> \u8868\u540duser >> name = 'lqz' ,password = 123 name\u3001password\u8fd9\u4e9b\u6570\u636e\u5e93\u5b57\u6bb5\u5728User\u7c7b\u7684\u547d\u540d\u7a7a\u95f4\u7684mappings\u91cc\u653e\u7740\u5462!! \u547d\u540d\u7a7a\u95f4\u91cc\u7684\u952emappings\u5bf9\u5e94\u7684\u503c\u662f\u4e00\u4e2a\u5b57\u5178. \u8be5\u5b57\u5178\u7684\u952e\u662f\u5b57\u6bb5\u540d,\u503c\u662fField\u5bf9\u8c61. User\u7c7b\u7684\u547d\u540d\u7a7a\u95f4 User.__dict__ \u662f\u80fd\u88abUser\u7684\u5b9e\u4f8b\u8bbf\u95ee\u5230\u7684!!! fields\u5217\u8868\u91cc\u653e\u9664\u4e86\u4e3b\u952e\u7684\u6240\u6709\u5b57\u6bb5,\u5b57\u6bb5\u7ecf\u8fc7\u4e86\u5904\u7406 ` \u5b57\u6bb5 + '=?' ` >> \u4e3b\u952e\u5b57\u6bb5id\u4ee5\u53ca\u8be5\u5b57\u6bb5\u7684\u503c \u6ce8\u610f\u8fd9\u53e5\u4ee3\u7801! pr = getattr ( self, k, None ) -- \u5c06\u4e3b\u952e\u7684\u503c\u7ed9\u4e86pr\u53d8\u91cf User\u5b9e\u4f8b\u548cUser\u7c7b\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u90fd\u6ca1\u6709\u540d\u4e3aid\u7684\u952e '\u2605\u2605\u2605' \u5c31\u4f1a\u53bb\u8c03\u7528Models\u91cc\u91cd\u5199\u7684__getattr__\u65b9\u6cd5!! \u901a\u8fc7 self [ k ] \u62ff\u5230\u8be5\u6761\u6570\u636e\u5b57\u6bb5id\u5bf9\u5e94\u7684\u503c! \u90fd\u5f97\u5230\u540e,\u62fc\u63a5\u6210\u4e00\u4e2asql!! ms.execute ( sql, args ) \u9700\u8981args! '\u2605\u2605\u2605' ` args.append ( getattr ( self, k, None )) ` \u5176\u5b9e\u5c31\u662f\u53d6self\u8fd9\u4e2a\u5b57\u5178\u672c\u8eab\u9664\u4e86\u4e3b\u952e\u5916\u5176\u5b83\u5b57\u6bb5\u7684\u503c!! update\u8be5\u65b9\u6cd5\u600e\u4e48\u7528? user = User.select_one ( id = 3 ) user.name = 'dc0' user.update () 5 > def insert ( self ) : -- \u5b9e\u4f8b\u65b9\u6cd5/\u5bf9\u8c61\u7684\u7ed1\u5b9a\u65b9\u6cd5 \u63d2\u5165\u65b0\u6570\u636e \u6ce8\u610f\u4e00\u70b9,\u6784\u5efasql\u8bed\u53e5,sql\u8bed\u53e5\u4e2d\u6709\u591a\u5c11\u4e2a\u5b57\u6bb5,sql\u8bed\u53e5\u7684valuse\u540e\u9762\u5c31\u8981\u8ddf\u591a\u5c11\u4e2a\u503c. ORM\u6846\u67b6\u601d\u8def\u603b\u7ed3 \u00b6 \u7528\u6237\u8868 -- User\u7c7b \u7528\u6237\u8868\u7684\u4e00\u884c\u6570\u636e -- User\u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8bobj User\u7c7b\u4e2d\u7684\u7c7b\u5c5e\u6027, ` \u5b57\u6bb5\u540d = Field\u5b57\u6bb5\u5bf9\u8c61 ` User\u7c7b\u7684\u57fa\u7c7bModels\u7ee7\u627fdict,User\u7684\u5b9e\u4f8bobj\u5c31\u662f\u4e00\u4e2a\u5b57\u5178,User\u7c7b\u5b9e\u4f8b\u5316\u7684\u8fc7\u7a0b\u91cc\u5c31\u4f1a\u5f80\u5b57\u5178\u91cc\u4f20\u503c.. \u867d\u7136obj\u662f\u4e00\u4e2a\u5b9e\u4f8b,\u4f46\u901a\u8fc7obj.attr\u662f\u62ff\u4e0d\u5230\u503c\u7684,\u56e0\u4e3aobj\u4ee5\u53caUser\u7684__dict__\u4e2d\u6ca1\u6709.. So,\u91cd\u5199__getattr__\u548c__setattr__\u65b9\u6cd5!! \u8ba9obj.attr\u4eceobj\u8fd9\u4e2a\u5b57\u5178\u672c\u8eab\u91cc\u53d6\u503c,\u4ee5\u53caobj.attr = value,\u5f80obj\u5b57\u5178\u91cc\u6dfb\u52a0\u503c!! Models\u4e0d\u4ec5\u7ee7\u627fdict,\u8fd8\u4f1a\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684\u5143\u7c7bModelMetaclass.. \u4f7f\u5f97User\u7c7b\u5728\u521b\u5efa\u8fc7\u7a0b,\u5c31\u5c06\u6570\u636e\u7ec4\u7ec7\u597d\u653e\u5230User\u7c7b\u7684__dict__\u4e2d,\u5e76\u5c06\u90a3\u4e9b\u91cd\u590d\u7684\u6570\u636e\u5220\u9664 ( \u5220\u9664\u662f\u4e3a\u4e86\u4fdd\u8bc1\u4f7f\u7528\u53cd\u5c04\u65f6\u62ff\u5230\u7684\u662f\u5b57\u5178\u672c\u8eab\u7684\u6570\u636e ) ! \u7ec4\u7ec7\u7684\u6570\u636e\u5305\u542btable_name\u3001primary_key\u548c\u4e00\u5806Field\u5bf9\u8c61 -- \u4e3b\u8981\u5c31\u662f\u5728\u64cd\u4f5c\u5143\u7c7b\u7684\u53c2\u6570attrs \u67e5\u8be2\u901a\u8fc7User\u7c7b\u6765\u67e5\u8be2,\u662f\u7c7b\u65b9\u6cd5 \u66f4\u65b0\u7684user\u7c7b\u7684\u5b9e\u4f8b,\u6dfb\u52a0\u7684\u4e5f\u662fuser\u7c7b\u7684\u5b9e\u4f8b!! \u67e5\u8be2\u3001\u66f4\u65b0\u3001\u6dfb\u52a0 \u5927\u4f53\u601d\u8def\u5c31\u662f \u6784\u5efasql\u8bed\u53e5,\u521b\u5efamysql\u94fe\u63a5,\u8c03\u7528\u76f8\u5e94\u7684\u63a5\u53e3! \u6709\u4e2a\u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u5730\u65b9: \u5bf9User\u7684\u5b9e\u4f8bobj\u4f7f\u7528\u53cd\u5c04 getattr \u4f1a\u8c03\u7528__getattr__\u6700\u7ec8\u62ff\u5230\u7684\u662fobj\u8fd9\u4e2a\u5b57\u5178\u672c\u8eab\u7684\u5185\u5bb9. \u6570\u636e\u5e93\u63a5\u53e3\u7684\u5b9e\u73b0\u5c31\u662f\u4f7f\u7528\u7b2c\u4e09\u65b9\u6a21\u5757pymysql\u6784\u5efa\u7684,\u8fd4\u56de\u7ed3\u679c\u662f\u5217\u8868\u5b57\u5178\u3001\u7528\u5355\u4f8b\u4f7f\u5f97\u67e5\u8be2\u66f4\u65b0\u6dfb\u52a0\u7528\u7684\u540c\u4e00\u4e2a\u94fe\u63a5! \u6570\u636e\u5e93\u8fde\u63a5\u6c60 \u00b6 \u7a0b\u5e8f\u64cd\u4f5c\u6570\u636e\u5e93\u9700\u8981\u5efa\u7acb\u94fe\u63a5 , \u6765\u4e00\u4e2a\u67e5\u8be2\u5efa\u7acb\u4e00\u4e2a\u94fe\u63a5 \u3001 \u6765\u4e00\u4e2a\u66f4\u65b0\u5efa\u7acb\u4e00\u4e2a\u94fe\u63a5 .. \u4e0d\u4e00\u4f1a , \u6570\u636e\u5e93\u7684\u8fde\u63a5\u6570\u5c31\u6ee1\u4e86 ! \u6240\u4ee5\u6211\u4eec\u4f7f\u7528\u4e86\u5355\u4f8b , \u4f7f\u5f97\u8be5\u7a0b\u5e8f\u5bf9\u6570\u636e\u5e93\u7684\u67e5\u8be2\u66f4\u65b0\u6dfb\u52a0\u7b49\u64cd\u4f5c\u7528\u7684\u662f\u540c\u4e00\u4e2a\u94fe\u63a5 ! \"\u6570\u636e\u5e93\u8fde\u63a5\u5355\u4f8b\u662f\u6307\u5728\u9879\u76ee\u8fd0\u884c\u671f\u95f4,\u59cb\u7ec8\u53ea\u6709\u4e00\u4e2a\u6570\u636e\u5e93\u94fe\u63a5!\u5373\u8fd9\u4e2a\u94fe\u63a5\u5728\u8be5\u9879\u76ee\u7a0b\u5e8f\u4e2d\u662f\u590d\u7528\u7684!\" \u4f46\u5982\u679c\u67091000\u4e2a\u5ba2\u6237\u7aef\u5e76\u53d1\u8fc7\u6765 , \u8981\u5efa\u7acb1000\u4e2a\u94fe\u63a5 \uff1f \u4f9d\u65e7\u4f7f\u7528\u5355\u4f8b\u6a21\u5f0f\u7684\u6570\u636e\u5e93 \uff1f Ps : \u4e00\u70b9\u5c0f\u601d\u8003 \u8be5\u573a\u666f\u4e0b , \u82e5\u4f7f\u7528\u5355\u4f8b\u6570\u636e\u5e93 , \u6709\u70b9\u534f\u7a0b\u7684\u5473\u9053 ! -- \u8be5\u94fe\u63a5\u5728\u591a\u4e2a\u5ba2\u6237\u7aef\u4e4b\u95f4\u6765\u56de\u5207 , \u5207\u6362 + \u4fdd\u5b58\u72b6\u6001 \u5177\u4f53\u5982\u4f55\u5b9e\u73b0 , \u4e0d\u6653\u5f97 \u4f46\u4e00\u822c\u60c5\u51b5\u4e0b , \u534f\u7a0b\u7684\u94fe\u63a5\u6570\u6ca1\u8bb0\u9519\u7684\u8bdd\u6700\u597d\u4e0d\u8d85\u8fc7500\u4e2a . \u89e3\u51b3\u65b9\u6848 : \u5efa\u7acb\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u63a7\u5236\u7f51\u7ad9\u6700\u591a\u8fde\u63a5\u6570\u636e\u5e93\u7684\u6570\u91cf , \u591f\u4e86\u540e\u6765\u8005\u5c31\u6392\u961f ; \u521b\u5efa\u8fde\u63a5\u540e\u4e0d\u7528\u6b64\u8fde\u63a5\u4e86\u4f46\u4e0d\u65ad\u5f00\u6682\u65f6\u5b58\u8d77\u6765 , \u4ee5\u4fbf\u8fde\u63a5\u7684\u91cd\u7528 ! dbutils\u662fpython\u7684\u4e00\u4e2a\u7528\u4e8e\u5b9e\u73b0\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u7684\u6a21\u5757! dbutils\u63d0\u4f9b\u4e86\u4e24\u79cd\u5916\u90e8\u63a5\u53e3: PersistentDB -- \u63d0\u4f9b\u7ebf\u7a0b\u4e13\u7528\u7684\u6570\u636e\u5e93\u8fde\u63a5,\u5e76\u81ea\u52a8\u7ba1\u7406\u8fde\u63a5; PooledDB -- \u63d0\u4f9b\u7ebf\u7a0b\u95f4\u53ef\u5171\u4eab\u7684\u6570\u636e\u5e93\u8fde\u63a5,\u5e76\u81ea\u52a8\u7ba1\u7406\u8fde\u63a5. (\u6211\u4eec\u4e00\u822c\u4f7f\u7528\u8fd9\u79cd\u6a21\u5f0f!) import pymysql from dbutils.pooled_db import PooledDB POOL = PooledDB ( creator = pymysql , maxconnections = 10 , mincached = 3 , maxcached = 5 , maxshared = 3 , blocking = True , maxusage = None , setsession = [], ping = 0 , host = '127.0.0.1' , port = 3306 , user = 'root' , password = '123456' , database = 'youku' , charset = 'utf8' ) if __name__ == '__main__' : conn = POOL . connection () cursor = conn . cursor () cursor . execute ( 'select * from user' ) result = cursor . fetchall () print ( result ) cursor . close () conn . close () \u529f\u80fd\u6d4b\u8bd5 \u00b6 user\u7528\u6237\u8868\u8bbe\u8ba1 user\u7528\u6237\u8868\u6570\u636e class Notic ( Models ): table_name = \"notice\" id = IntegerField ( 'id' , primary_key = True ) name = StringField ( 'name' ) content = StringField ( 'content' ) user_id = IntegerField ( 'user_id' ) # -- create_time \u5b83\u4f1a\u81ea\u52a8\u586b\u5145\u4e0a, \u8fd9\u91cc\u7701\u4e8b\u5c31\u4e0d\u5199\u5566! notice\u516c\u544a\u8868\u8bbe\u8ba1 \u516c\u544a\u8868\u6570\u636e","title":"\u624b\u64b8ORM(\u7b80\u6613\u7248)"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/14_%E6%89%8B%E6%92%B8ORM/#_1","text":"","title":"\u77e5\u8bc6\u50a8\u5907"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/14_%E6%89%8B%E6%92%B8ORM/#_2","text":"__setattr__() : \u5728\u5bf9\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684\u5c5e\u6027\u8fdb\u884c \u8d4b\u503c/\u4fee\u6539 \u5b9e\u4f8b.\u5c5e\u6027=\u503c \u65f6,\u9996\u5148\u4f1a\u8c03\u7528\u8be5\u65b9\u6cd5 \u5e76\u5728\u8be5\u65b9\u6cd5\u4e2d\u5c06\u5c5e\u6027\u540d\u548c\u5c5e\u6027\u503c\u6dfb\u52a0\u5230\u5b9e\u4f8b\u7684 __dict__ \u5c5e\u6027\u4e2d __getattr__(): \u5b9e\u4f8b\u5f15\u7528\u5c5e\u6027 \u5b9e\u4f8b.\u5c5e\u6027 \u65f6,\u6309\u7167\u6b63\u5e38\u7684\u89c4\u5219\u8fdb\u884c\u5c5e\u6027\u67e5\u627e, \u6ca1\u627e\u5230\u65f6\u7684\u515c\u5e95\u51fd\u6570. Ps: \u7c7b\u7684\u5c5e\u6027\u5f15\u7528\u548c\u8d4b\u503c\u7a0d\u5fae\u5b9e\u9a8c\u4e86\u4e0b,\u6709\u4e9b\u8bb8\u4e0d\u540c,\u4e0d\u60f3\u6df1\u7a76\u5566,\u9047\u5230\u4e86\u518d\u8bf4. \u76ee\u524d,\u53ef\u4ee5\u786e\u5b9a\u4e00\u70b9,\u7c7b\u5728\u8c03\u7528\u81ea\u8eab\u5c5e\u6027\u7684\u65f6\u5019, \u662f\u4e0d\u4f1a\u89e6\u53d1 __getattribute__ \u65b9\u6cd5 class Foo : a = 0 def __setattr__ ( self , key , value ): self . __dict__ [ key ] = value def __getattr__ ( self , key ): raise AttributeError ( \"' %s ' object has no attribute ' %s '\" \\ % ( self . __class__ . __name__ , key )) f = Foo () f . name = 'dc' # -- \u8d4b\u503c\u64cd\u4f5c\u76f4\u63a5\u8c03\u7528__setattr__ setattr ( f , 'age' , 18 ) # -- \u540c\u4e0a print ( f . a , f . age , f . name ) # 0 18 dc print ( getattr ( f , \"a\" , None )) # 0 print ( getattr ( f , \"xxx\" , None )) # None -- xxx\u5728f\u4e2d\u6ca1\u6709,\u5728Foo\u4e2d\u4e5f\u6ca1\u6709,\u8c03\u7528__getattr__ # \u53ea\u4e0d\u8fc7,\u8c03\u7528__getattr__\u5f97\u5230error\u540e,\u4f1a\u81ea\u52a8\u5904\u7406\u8fd4\u56deNone print ( f . xxx ) # -- \u540c\u4e0a \u6309\u7167\u5c5e\u6027\u67e5\u627e\u987a\u5e8f\u6ca1\u627e\u5230,\u4f1a\u8c03\u7528__getattr__,\u62a5\u9519 print ( f . __dict__ ) # {'name': 'dc', 'age': 18}","title":"\u62e6\u622a\u70b9\u53f7\u8fd0\u7b97"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/14_%E6%89%8B%E6%92%B8ORM/#_3","text":"metaclass\u5143\u7c7b\u5bf9\u7c7b\u7684\u64cd\u4f5c\u4e00\u822c\u90fd\u4f1a\u5728\u5143\u7c7bnew\u65b9\u6cd5\u91cc\u5b9e\u73b0 \u6ce8\u610f\u7406\u89e3\u8fd9\u4e00\u53e5\u8bdd: \u5728 __init__ \u7684\u65f6\u5019, \u7c7b\u5df2\u7ecf\u88ab\u521b\u5efa\u4e86, \u5728\u5143\u7c7b\u7684 __init__ \u65b9\u6cd5\u4e2d\u5bf9\u7c7b\u7684\u547d\u540d\u7a7a\u95f4\u7684\u4fee\u6539\u64cd\u4f5c\u5e76\u4e0d\u4f1a\u751f\u6548. # -- type\u7684\u4f2a\u4ee3\u7801! class type : def __call__ ( self , * args , ** kwargs ): obj = self . __new__ ( self , * args , ** kwargs ) self . __init__ ( obj , * args , ** kwargs ) return obj \u9700\u6c42: \u5728\u81ea\u5b9a\u4e49\u5143\u7c7bMymeta\u4e2d\u628a\u81ea\u5b9a\u4e49\u7c7bPeople\u7684\u6570\u636e\u5c5e\u6027\u90fd\u53d8\u6210\u5927\u5199 \u89e3\u51b3\u65b9\u6848: \u5728 __new__ \u4e2d\u5bf9\u672a\u5b9e\u4f8b\u5316\u7684\u7c7b\u8fdb\u884c\u4fee\u6539 class Mymeta ( type ): def __new__ ( mcs , name , bases , attrs ): update_dic = {} for k , v in attrs . items (): # -- \u6570\u636e\u5c5e\u6027\u4e0d\u53ef\u88ab\u8c03\u7528\u4e14\u4e0d\u4ee5\u53cc\u4e0b\u5212\u7ebf\u5f00\u5934 if not callable ( v ) and not k . startswith ( '__' ): update_dic [ k . upper ()] = v else : update_dic [ k ] = v return super () . __new__ ( mcs , name , bases , update_dic ) def __init__ ( cls , name , bases , attrs ): # -- \u53ef\u4ee5\u770b\u5230\u5728__new__\u4e2d\u521b\u5efa\u5bf9\u8c61\u65f6,\u4fee\u6539\u4e86attrs,\u4f46__init__\u6536\u5230\u7684\u662f\u4fee\u6539\u524d\u7684. # \u8fd9\u53ef\u4ee5\u4f7f\u7528type\u7684\u4f2a\u4ee3\u7801\u6765\u89e3\u91ca! # {'__module__': '__main__', '__qualname__': 'People', 'country': 'china'} print ( attrs ) super () . __init__ ( name , bases , attrs ) class People ( object , metaclass = Mymeta ): country = \"china\" if __name__ == '__main__' : p = People () print ( p . __dict__ ) # {} print ( hasattr ( People , 'country' )) # False print ( hasattr ( People , 'COUNTRY' )) # True print ( getattr ( p , \"COUNTRY\" , None )) # china \u4e00\u70b9\u5c0f\u60f3\u6cd5: \u66f2\u7ebf\u6551\u56fd, \u5728 __init__ \u4e2d, \u7ed9People\u7c7b\u7684\u547d\u540d\u7a7a\u95f4\u6dfb\u52a0\u5927\u5199\u7684\u6570\u636e\u5c5e\u6027, \u4f46\u5c0f\u5199\u7684\u6570\u636e\u5c5e\u6027\u4f9d\u7136\u5b58\u5728.. from copy import deepcopy class Mymeta ( type ): def __init__ ( cls , name , bases , attrs ): # -- \u5355\u4e2a\u4e0b\u5212\u7ebf\u662f\u4e00\u4e2aPython\u547d\u540d\u7ea6\u5b9a,\u8868\u793a\u8fd9\u4e2a\u540d\u79f0\u662f\u4f9b\u5185\u90e8\u4f7f\u7528\u7684 _attrs = deepcopy ( attrs ) # -- \u7528_attrs,\u662f\u56e0\u4e3a\u5728\u5faa\u73af\u4f53\u91cc\u4f1a\u5bf9attrs\u8fdb\u884c\u6539\u53d8 for k , v in _attrs . items (): if not callable ( v ) and not k . startswith ( '__' ): \"\"\" super(Mymeta, cls).__setattr__(k.upper(), v) -- \u53ef\u4ee5\u5f97\u5230\u6b63\u786e\u7ed3\u679c,\u5f88\u795e\u5947. \u90a3\u4e48\u4e0a\u9762\u8fd9\u4e2asuper().__setattr__()\u8bed\u53e5\u53c8\u7b49\u540c\u4e8e\u4ec0\u4e48\uff1f\u60f3\u4e86\u60f3.\u4e0d\u6df1\u7a76\u4e86. \u9519\u8bef\u7684\u5b9e\u8df5 attrs[k.upper()] = v # -- \u4e0d\u4f1a\u5728People\u7684__dict__\u4e2d\u751f\u6548 cls.__setattr__(k.upper(), v) # -- \u62a5\u9519 cls.__dict__[k.upper()] = v # -- \u62a5\u9519 \u4f46\u77e5\u9053\u4e86 \u5b9e\u4f8b\u4f7f\u7528\u53cd\u5c04setattr\u4f1a\u8c03\u7528__setattr__,\u4f46\u7c7b\u4f7f\u7528\u53cd\u5c04setattr\u4e0d\u4f1a.. (\u5728\u62e6\u622a\u70b9\u53f7\u8fd0\u7b97\u4e2d\u6253\u65ad\u70b9\u5b9e\u8df5\u51fa\u6765\u7684!) \u7d2f\u4e86,\u8bb0\u4f4f\u4e00\u70b9\u5c31\u597d,\u5bf9\u7c7b\u7684\u64cd\u4f5c\u5728\u5143\u7c7b\u7684__new__\u4e2d\u5b9e\u73b0!(\u3064\u0414`)\u30ce \u6211\u76f4\u63a5\u53cd\u624b\u4e00\u4e2a\u8eba\u5e73. \"\"\" setattr ( cls , k . upper (), v ) # -- \u7528\u53cd\u5c04\u5c31\u4f1a\u751f\u6548 \u7ed9People\u7c7b\u6dfb\u52a0\u5c5e\u6027 # -- \u5373type\u91cc\u7684__init__\u4e0d\u4f1a\u5bf9attrs\u6709\u4efb\u4f55\u7684\u64cd\u4f5c!! super () . __init__ ( name , bases , attrs ) class People ( object , metaclass = Mymeta ): country = \"china\" if __name__ == '__main__' : p = People () print ( p . __dict__ ) # {} print ( hasattr ( People , 'country' )) # True print ( hasattr ( People , 'COUNTRY' )) # True print ( getattr ( p , \"COUNTRY\" , None )) # china","title":"\u5143\u7c7b\u7684\u590d\u4e60"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/14_%E6%89%8B%E6%92%B8ORM/#orm","text":"\u53c2\u8003\u94fe\u63a5: https://www.cnblogs.com/liuqingzheng/articles/9006025.html \u9700\u6c42: \u6570\u636e\u5e93\u4e2d\u7684user\u8868\u5bf9\u5e94\u7a0b\u5e8f\u5f53\u4e2d\u7684User\u7c7b. user\u8868\u4e2d\u6709\u6761\u6570\u636e, id:1 name:lqz password:123 \u5e0c\u671b\u53ef\u4ee5\u5b9e\u73b0\u4e2aselect\u65b9\u6cd5,\u901a\u8fc7User.select(id=1)\u62ff\u5230\u8fd9\u6761\u6570\u636e.. \u56e0\u4e3aUser\u7684\u4e00\u4e2a\u5b9e\u4f8b\u5e94\u8be5\u5bf9\u5e94user\u8868\u4e2d\u7684\u4e00\u6761\u6570\u636e, \u6240\u4ee5\u8fd4\u56de\u7684\u7ed3\u679c\u5e94\u5f53\u662fUser\u7684\u4e00\u4e2a\u5b9e\u4f8b. \u4e5f\u5e0c\u671b\u5b9e\u4f8bobj\u80fd\u901a\u8fc7 obj.name \u3001obj.password \u62ff\u5230\u5bf9\u5e94\u7684\u5b57\u6bb5\u503c! \u5f53\u7136,\u5e0c\u671b\u901a\u8fc7User\u7c7b\u5b9e\u73b0\u5bf9user\u8868\u7684\u67e5\u8be2\u3001\u589e\u52a0\u3001\u4fee\u6539.. \u256e(\u256f\u25bd\u2570)\u256d \u8fd9\u6837\u4e00\u6765, \u5c31\u4e0d\u7528\u5199sql\u6765\u64cd\u4f5c\u5566!! \u5927\u4f53\u7684\u521d\u6b65\u601d\u8003: 1> \u6570\u636e\u8868\u4e2d\u7684\u6bcf\u79cd\u5b57\u6bb5\u7c7b\u578b\u90fd\u5305\u542b\u4f17\u591a\u5c5e\u6027, \u6bcf\u79cd\u5b57\u6bb5\u7c7b\u578b\u90fd\u6620\u5c04\u4e00\u4e2a\u5b57\u6bb5\u7c7b; 2> \u6570\u636e\u8868\u6620\u5c04\u4e00\u4e2a\u8868\u7c7b,\u8be5\u7c7b\u4f1a\u7528\u7c7b\u7684\u6570\u636e\u5c5e\u6027\u8868\u793a\u8fd9\u4e9b\u5b57\u6bb5\u7c7b\u7684\u5b9e\u4f8b,\u6765\u6620\u5c04\u6570\u636e\u8868\u4e2d\u7684\u5b57\u6bb5/\u6bcf\u4e00\u5217. \u5e76\u4e14\u8be5\u8868\u7c7b\u7684\u5b9e\u4f8b\u6620\u5c04\u8868\u4e2d\u7684\u4e00\u6761\u6570\u636e; \u7b80\u6613\u7684ORM\u6846\u67b6,\u8981\u5b9e\u73b0\u7684\u5927\u4f53\u6548\u679c\u5982\u4e0b: class User ( ORM ): # -- \u5b9a\u4e49\u6570\u636e\u8868\u7684\u5b57\u6bb5 name = CharField () age = IntField () if __name__ == '__main__' : # -- \u6839\u636e\u6761\u4ef6\u67e5\u8be2\u5230\u7528\u6237\u8868\u4e2d\u7684\u67d0\u6761\u6570\u636e user0 = User . select ( id = 1 ) print ( user0 . name ) # -- \u4fee\u6539 user0 . name = 'lqz_0' user0 . update () # -- \u63d2\u5165\u6570\u636e # user = User(name='dc',name='dc',password='321') \u53ef\u4ee5\u62c6\u5206\u4e3a\u4ee5\u4e0b\u4e09\u884c\u4ee3\u7801. user = User () user . name = \"dc\" user . password = 321 user . insert () # -- \u8c03\u7528insert\u51fd\u6570\u81ea\u52a8\u5c06\u6570\u636e\u63d2\u5165\u5230\u6570\u636e\u5e93\u4e2d ps : \u5b57\u5178\u53ef\u4ee5\u5929\u7136\u7684\u5b58\u50a8\u6570\u636e . \u539f\u7406\u770b\u4f3c\u4e5f\u4e0d\u7b80\u5355,\u5f88\u7ed5,\u5177\u4f53\u5b9e\u73b0\u8fc7\u7a0b\u66f4\u7ed5.. orz \u9700\u8c28\u614e,\u6b65\u6b65\u4e3a\u8425!!\u53cd\u590d\u63a8\u6572! \u57f9\u517b\u601d\u7ef4\u6a21\u5f0f\u5c24\u4e3a\u91cd\u8981!","title":"ORM\u5bf9\u8c61\u5173\u7cfb\u6620\u5c04"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/14_%E6%89%8B%E6%92%B8ORM/#field","text":"\u5b9a\u4e49\u4e00\u4e2aField\u7c7b\u8868\u793a\u6570\u636e\u8868\u7684 \u5b57\u6bb5/\u5217 \u5177\u6709\u54ea\u4e9b\u5c5e\u6027. ( name \u5217\u540d/\u5b57\u6bb5\u540d\u3001column_type\u5b57\u6bb5\u7c7b\u578b\u3001primary_key\u8be5\u5b57\u6bb5\u662f\u5426\u662f\u4e3b\u5065\u3001default\u5b57\u6bb5\u7684\u9ed8\u8ba4\u503c ) \u5e76\u884d\u751f\u51fa\u4e24\u4e2a\u5b50\u7c7b StringField\u548cIntegerField.","title":"Field\u7c7b"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/14_%E6%89%8B%E6%92%B8ORM/#models","text":"\u5b9a\u4e49\u4e86\u4e00\u4e2aModels\u7c7b 1 > \u7ee7\u627f\u4e86dict\u7c7b.\u4f7f\u5f97Model\u7c7b\u5177\u5907\u5b57\u5178\u7684\u7279\u6027. \u5b57\u5178\u53ef\u4ee5\u5929\u7136\u7684\u5b58\u50a8\u6570\u636e. \u518d\u4ed4\u7ec6\u60f3\u4e00\u60f3,\u4e00\u822c\u7c7b\u5b9e\u4f8b\u5316\u6709\u53c2\u6570\u65f6,\u90fd\u4f1a\u901a\u8fc7\u7c7b\u4e2d\u7684__init__\u7ed9\u5b9e\u4f8b\u589e\u6dfb\u72ec\u6709\u7684\u6570\u636e\u5c5e\u6027. \u4f46\u8fd9\u91cc\u901a\u8fc7Models ( k1 = v1,k2 = v2 ) \u5b9e\u4f8b\u5316\u5f97\u5230\u5bf9\u8c61obj,\u5e76\u4e0d\u4f1a\u6709\u72ec\u6709\u5c5e\u6027k1\u3001k2 Models\u5b9e\u4f8b\u5316\u7684\u5bf9\u8c61obj\u672c\u8d28\u5c31\u662f\u4e00\u4e2a\u5b57\u5178! \u6253\u5370obj. \u7ed3\u679c\u4e3a { k1:v1,k2:v2 } \u4f46\u5b83\u4e5f\u5177\u5907\u5b9e\u4f8b\u7684\u7279\u6027,\u53ef\u4ee5\u8fdb\u884c\u5c5e\u6027\u5f15\u7528! ( \u5c3d\u7ba1obj.__dict__\u4e3a\u7a7a ) Ps: Models\u7c7b\u91cc\u7684__init__\u65b9\u6cd5\u5199\u4e0d\u5199\u90fd\u4e0d\u5f71\u54cd,\u6309\u7167\u67e5\u627e\u89c4\u5219 \u7ee7\u627fModels\u7684User\u7c7b\u7684\u5b9e\u4f8b\u90fd\u4f1a\u53bb\u8c03\u7528dict\u91cc\u7684__init__\u5b8c\u6210\u521d\u59cb\u5316. 2 > \u5b57\u5178\u662f\u4e0d\u80fd\u901a\u8fc7 ` . ` \u53d6\u5230value\u7684!! \u4f46\u8fd9\u91cc\u7684\u5b9e\u4f8b\u5177\u5907\u5b57\u5178\u7684\u7279\u6027,\u53ef\u4ee5\u901a\u8fc7 '.' \u8fdb\u884c\u5c5e\u6027\u5f15\u7528.. ` \u5b9e\u4f8b.\u5c5e\u6027 ` \u7684\u64cd\u4f5c\u5c5e\u6027\u67e5\u627e\u5931\u8d25 ( \u5728\u5b9e\u4f8b\u548c\u7c7b\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u90fd\u6ca1\u6709\u8be5\u5c5e\u6027 ) ,\u4f1a\u81ea\u52a8\u8bbf\u95ee\u7c7b\u4e2d\u7684__getattr__\u65b9\u6cd5! \u5728Models\u7c7b\u4e2d\u91cd\u5199\u4e86__getattr__, \"self[key]\" \u4f1a\u53bb\u770b\u770b\u5b57\u5178\u5b9e\u4f8b\u672c\u8eab\u6709\u6ca1\u6709\u8fd9\u4e2a\u952e! \u4f7f\u5f97Models\u7684\u5b9e\u4f8b\u53ef\u4ee5\u901a\u8fc7obj.k\u7684\u5f62\u5f0f\u53d6\u5230obj\u5b57\u5178\u5bf9\u8c61\u672c\u8eab\u5bf9\u5e94\u7684v try..except.. \u518d\u6b21\u8bf4\u660e,\u5b57\u5178\u5b9e\u4f8b\u7684\u547d\u540d\u7a7a\u95f4\u4e3a\u7a7a! 3 > ` \u5b9e\u4f8b.\u5c5e\u6027 = \u503c ` \u7684\u64cd\u4f5c \u4f1a\u81ea\u52a8\u8bbf\u95ee\u7c7b\u4e2d\u7684__setattr__ \u5728Models\u7c7b\u4e2d\u91cd\u5199\u4e86__setattr__, \"self[key] = value\" \u4f7f\u5f97Models\u7684\u5b9e\u4f8b\u53ef\u4ee5\u901a\u8fc7 obj.k = v \u7684\u65b9\u5f0f\u7ed9\u5b57\u5178\u5bf9\u8c61\u81ea\u8eab\u6dfb\u52a0\u952e\u503c\u5bf9. \u518d\u6b21\u5f3a\u8c03,\u7ee7\u627f\u4e86dict,\u91cd\u5199\u4e86\u4e24\u4e2a\u65b9\u6cd5 \u256e ( \uffe3\u25bd\uffe3 \"\" ) \u256d \u4f1a\u4f7f\u5f97 \"\u65e0\u8bba\u600e\u4e48\u5bf9obj\u589e\u5220\u6539\u67e5(\u4e24\u79cd\u65b9\u5f0f .\u3001[]),obj.__dict__\u90fd\u4e3a\u7a7a!!\u64cd\u4f5c\u7684\u90fd\u662f\u5b57\u5178\u5bf9\u8c61obj\u672c\u8eab!\" 4 > Model\u7c7b\u4f7f\u7528\u5143\u7c7bModelsMetaclass,\u8fd9\u6837\u5c31\u53ef\u4ee5\u62e6\u622aModel\u7c7b\u4ee5\u53ca\u7ee7\u627fModel\u7c7b\u7684\u5b50\u7c7b\u7684\u521b\u5efa\u8fc7\u7a0b!! \u7b80\u5355\u6765\u8bf4: Models\u7ee7\u627fdict\u5b57\u5178\u7c7b,\u91cd\u5199__setattr__\u548c__getattr__,\u662f\u4e3a\u4ec0\u4e48? \u5148\u8981\u660e\u767d \u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61obj [ k ] \u62a5\u9519 ; \u5b57\u5178my_dict.k\u62a5\u9519 -- \u524d\u8005\u662f\u4e3a\u4e86Model\u7684\u5b50\u7c7bUser\u5728\u5b9e\u4f8b\u5316\u540e,\u5177\u5907\u5b57\u5178\u7684\u7279\u6027,\u80fd\u50cf\u5b57\u5178\u4e00\u6837obj [ k ]= v\u5f80\u5b57\u5178\u91cc\u6dfb\u52a0k-v \u4e5f\u53ef\u4ee5\u5728User\u5b9e\u4f8b\u5316\u65f6\u4f20\u9012\u4e00\u5806 k = v \u5b8c\u6210\u5b9e\u4f8b\u5316. -- \u540e\u8005\u662f\u4e3a\u4e86\u80fd\u901a\u8fc7obj.k = v \u5f80\u5b57\u5178\u91cc\u6dfb\u52a0\u4fee\u6539k-v ; \u5f53\u7136\u4e5f\u53ef\u4ee5\u901a\u8fc7obj.k\u6210\u529f\u53d6\u503c. \u6ce8\u610f: \u5b9e\u4f8b obj.__dict__ \u662f\u7a7a\u7684!!","title":"Models\u7c7b"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/14_%E6%89%8B%E6%92%B8ORM/#user","text":"\u521b\u5efa\u4e00\u4e2aUser\u7c7b\u7ee7\u627fModels\u7c7b -- \u4fbf\u4e8e\u5b9e\u9a8c \u8be5\u7c7b\u5b9a\u4e49\u4e864\u4e2a\u7c7b\u5c5e\u6027 1 > table_name\u8868\u540d >> \u5b57\u7b26\u4e32\u7c7b\u578b 2 > id\u7f16\u53f7\u3001name\u59d3\u540d\u3001password\u5bc6\u7801 >> \u90fd\u662fField\u5b57\u6bb5\u7c7b\u578b,\u6bcf\u4e2a\u5b57\u6bb5\u90fd\u5305\u542b\u591a\u4e2a\u5c5e\u6027 ( name\u3001column_type\u7b49 ) User\u7c7b -- \u7528\u6237\u8868 User\u7c7b\u91cc\u7c7b\u5c5e\u6027table_name -- \u8868\u540d User\u7c7b\u91cc\u7c7b\u5c5e\u6027id\u3001name\u3001password -- \u7528\u6237\u8868\u6bcf\u4e00\u5217\u7684\u540d\u5b57,\u4e5f\u5c31\u662f\u5b57\u6bb5\u540d User\u7c7b\u5b9e\u4f8b\u5316\u5f97\u5230\u7684\u5b9e\u4f8b\u5bf9\u8c61 -- \u7528\u6237\u8868\u91cc\u7684\u4e00\u6761/\u4e00\u884c\u6570\u636e ( \u9700\u8981User\u7c7b\u5b9e\u4f8b\u5316\u7684\u65f6\u5019,\u53ef\u4ee5\u4f20\u4efb\u610f k = v \u7684\u6570\u636e!\u8fd9\u4e5f\u5c31\u662f\u4e3a\u5565Models\u7c7b\u8981\u7ee7\u627fdict\u7c7b! ) \u2605 +++ <\u5f53\u65f6\u6211\u7279\u522b\u7591\u60d1,\u600e\u4e48\u5c31\u5c06User\u7684\u5b9e\u4f8bobj\u53d8\u6210\u7528\u6237\u8868\u4e2d\u7684\u6570\u636e\u5566???\u600e\u4e48\u60f3\u90fd\u60f3\u4e0d\u901a.> \"\u7834\u89e3\u7684\u5173\u952e\u5728\u4e8eUser\u7c7b\u7684\u5b9e\u4f8bobj,\u672c\u8d28\u662f\u4e00\u4e2a\u5b57\u5178\" ,\u6211\u4eec\u53ef\u4ee5\u53d6\u5230\u5b57\u5178\u672c\u8eab\u91cc\u7684\u952e\u503c\u5bf9\u6784\u5efasql\u8bed\u53e5, \u901a\u8fc7\u7b2c\u4e09\u65b9\u5e93pymysql\u5b9e\u73b0\u5bf9\u7528\u6237\u8868\u6570\u636e\u7684\u64cd\u4f5c. \u5f53\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u53cd\u8fc7\u6765\u901a\u8fc7pymysql\u5c06\u67e5\u5230\u7684\u6570\u636e,\u6784\u5efaUser\u7684\u5b9e\u4f8b! \"\u4e00\u6761\u6570\u636e \u5bf9\u5e94 \u4e00\u4e2a\u5b9e\u4f8b\" \u7b80\u5355\u6765\u8bf4,\u82e5pymysql\u7684\u67e5\u8be2\u7ed3\u679c\u662f [{ id:1,name: 'dc' } , { id:2,name: 'lqz' }] \u5bf9\u7ed3\u679cfor\u5faa\u73af,\u5bf9\u5faa\u73af\u5f97\u5230\u7684\u6bcf\u4e00\u9879\u62c6\u5305, [ User ( **item ) for item in res ] \u5217\u8868\u4e2d\u7684\u4e24\u4e2a\u5143\u7d20\u662f\u4e24\u4e2aUser\u7c7b\u7684\u5b9e\u4f8b -- User ( id = 1 ,name = 'dc' ) \u3001User ( id = 2 ,name = 'lqz' ) \u5373 '\u2605 \u5c06\u4e00\u6761\u6761\u7684\u6570\u636e\u8f6c\u5316\u6210User\u7c7b\u7684\u5b9e\u4f8b\u5bf9\u8c61!!'' ==> \u6ce8\u610f: \u5bf9\u5b9e\u4f8b\u7684\u6253\u5370\u7ed3\u679c\u662f{id:1,name:' dc '},{id:2,name:' lqz ' } \u770b\u8d77\u6765\u662f\u5b57\u5178,\u4f46\u4e0d\u4ec5\u4ec5\u662f\u5b57\u5178! \u601d\u8003\uff1f\u82e5User\u7c7b\u7684\u7236\u7c7bModels\u4e0d\u7ee7\u627fdict\u80fd\u5426\u5b9e\u73b0\u8fd9\u4e9b\u529f\u80fd?\u6709\u4f55\u533a\u522b?\u6682\u4e14\u653e\u4e0b.\u505a\u5b8c\u6574\u4e2a\u9879\u76ee\u540e\u518d\u601d\u8003! \u4e0d\u540c\u7684\u5b9e\u73b0: https://seanlee97.github.io/2018/08/23/\u8c08\u8c08python\u4e2d\u7684\u5143\u7c7b\u4ee5\u53ca\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684ORM\u6846\u67b6/ (\u8fd9\u4e2a\u91cc\u9762\u5c31\u6ca1\u6709\u7528\u5b57\u5178!! \u5b83\u7684\u89e3\u51b3\u65b9\u6848\u662f\u5728Models\u7c7b\u7684 __init__ \u91cc\u4f7f\u7528\u4e86setattr\u5b8c\u6210\u4e86\u521d\u59cb\u5316)","title":"User\u7c7b"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/14_%E6%89%8B%E6%92%B8ORM/#modelsmetaclass","text":"\u81ea\u5b9a\u4e49\u4e00\u4e2aModelsMetaclass\u5143\u7c7b \u9700\u6c42: \u6570\u636e\u5e93\u4e2d\u7684\u6bcf\u4e2a\u8868,\u90fd\u6709\u8868\u540d\u3001\u6bcf\u4e00\u5217\u7684\u5217\u540d\u3001\u4ee5\u53ca\u4e3b\u952e\u662f\u54ea\u4e00\u5217 \u6211\u4eec\u9700\u8981\u5c06\u6570\u636e\u5e93\u4e2d\u7684\u4e00\u5f20\u8868\u4e0e\u4e00\u4e2a\u7c7b\u76f8\u5bf9\u5e94,\u7c7b\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u5e94\u8be5\u6709\u5c5e\u6027\u6765\u6620\u5c04\u6570\u636e\u8868\u4e2d\u7684\u8fd9\u4e9b\u5c5e\u6027 \u5206\u6790: \u4f7f\u7528\u5143\u7c7b\u7684\u7c7b\u5728\u521b\u5efa\u5b8c\u6210\u540e,\u7c7b\u7684\u547d\u540d\u7a7a\u95f4\u91cc\u5fc5\u987b\u6709table_name\u3001primary_key\u3001mappings\u5c5e\u6027! table_name -- \u8868\u540d primary_key -- \u4e3b\u952e\u540d mappings -- \u8868\u4e2d\u7684\u6bcf\u4e00\u5217/\u8868\u4e2d\u6240\u6709\u7684\u5b57\u6bb5 \u5373\u4e00\u5806Field\u5bf9\u8c61 \"\u76f8\u5f53\u4e8e\u5c06\u4e00\u5f20\u6570\u636e\u8868\u7684\u5173\u952e\u4fe1\u606f\u6574\u7406\u597d!\" Ps:\u6574\u7406\u5b8c\u6bd5\u540e,\u7c7b\u5b9a\u4e49\u8fc7\u7a0b\u4e2d\u6267\u884c\u7c7b\u4ee3\u7801\u5f97\u5230\u7684\u653e\u5728\u7c7b\u547d\u540d\u7a7a\u95f4\u91cc\u7684\u90a3\u4e9b\u5185\u5bb9\u5c31\u53ef\u4ee5\u4e22\u5f03\u5566. \u89e3\u51b3: \u9700\u8981\u91cd\u5199\u5143\u7c7b\u91cc\u7684__new__\u65b9\u6cd5. \u7b80\u5355\u6765\u8bf4: Q:\u8bbe\u7f6eModels\u7684\u5143\u7c7b\u662fModelsMetaclass,\u662f\u4e3a\u4ec0\u4e48? A:\u662f\u4e3a\u4e86Model\u7684\u5b50\u7c7bUser\u5728\u521b\u5efa\u65f6,\u88ab\u62e6\u622a. \u6574\u7406\u597d\u6570\u636e,\u5c06table_name\u3001primary_key\u548c\u4e00\u5806Field\u5bf9\u8c61 \u653e\u5230User\u7c7b\u7684__dict__\u4e2d User\u53ef\u4ee5\u901a\u8fc7.\u7684\u65b9\u5f0f\u53ef\u4ee5\u5bf9__dict__\u4e2d\u7684\u5c5e\u6027\u8fdb\u884c\u5f15\u7528!! \u5177\u4f53\u5b9e\u73b0\u8fc7\u7a0b: 1 > \u6570\u636e\u5e93\u8868\u7684\u7236\u7c7bModels\u4e0d\u9700\u8981\u62e6\u622a,\u8d70\u6b63\u5e38\u7684\u6d41\u7a0b ` if name == \"Models\" : ` 2 > -- \u62ff\u5230\u8868\u540d attrs\u662f\u4e00\u4e2a\u5b57\u5178,\u91cc\u9762\u5b58\u653e\u7684\u662f\u7c7b\u5b9a\u4e49\u6267\u884c\u7c7b\u4ee3\u7801\u7684\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u952e\u503c\u5bf9 table_name = attrs.get ( 'table_name' ) # -- \u5b57\u5178\u7684\u83b7\u53d6\u503c\u7684\u65b9\u6cd5,\u83b7\u53d6\u4e0d\u5230\u9ed8\u8ba4\u8fd4\u56deNone \u82e5attrs\u4e2d\u6ca1\u6709\u952e \"table_name\" ,\u7528\u7c7b\u540d\u5f53\u4f5c\u8868\u540d 3 > -- \u5c06\u6570\u636e\u8868\u7684\u6bcf\u4e2a\u5b57\u6bb5\u653e\u5230mappings\u5b57\u5178\u4e2d \u4ee5\u53ca \u62ff\u5230primary_key\u4e3b\u952e\u540d/\u8bbe\u7f6e\u4e86\u4e3b\u952e\u7684\u5b57\u6bb5\u7684\u540d\u5b57 mappings\u5b57\u5178\u4e2d\u7684k\u662fUser\u7c7b\u4e2d\u8bbe\u7f6e\u7684\u5b57\u6bb5\u540d,v\u662f\u8be5\u5b57\u6bb5\u540d\u5bf9\u5e94\u7684Field\u5b57\u6bb5\u5b9e\u4f8b\u5bf9\u8c61 { 'id' :<__main__.IntegerField object at 0x7..>, 'name' :<__main__.StringField ...>... } attrs\u4e2d\u8fd8\u6709__doc__\u3001__module__..\u8fd9\u4e9b\u4e1c\u897f.\u4e0d\u662f\u6211\u4eec\u9700\u8981\u7684! So,\u8981\u5bf9attrs\u4e2d\u7684k-v\u8fdb\u884c\u5224\u65ad,v\u662fField\u7c7b\u578b\u7684\u653e\u8fdb\u53bb,\u5373\u628aattrs\u4e2d\u4e0e\u6570\u636e\u5e93\u8868\u5b57\u6bb5\u6709\u5173\u7684\u5217\u63d0\u53d6\u51fa\u6765. \u82e5v\u662fField\u7c7b\u578b,\u8fd8\u53ef\u4ee5\u6839\u636ev\u7684primary_key\u5c5e\u6027\u5224\u65ad\u8be5\u5b57\u6bb5\u662f\u5426\u662f\u4e3b\u952e! \u6ce8\u610f,\u5065\u58ee\u6027\u7684\u5224\u65ad,\u53ea\u80fd\u6709\u4e00\u4e2a\u4e3b\u952e!\u4e00\u5f00\u59cbprimary_key\u8bbe\u7f6e\u7684\u521d\u59cb\u503c\u662fNone. 4 > -- \u4e00\u70b9\u4f18\u5316 mappings\u5b57\u5178\u4f1a\u5b58\u5165User.__dict__\u4e2d\u7684,So,\u653e\u5165mappings\u7684\u5c5e\u6027,User.__dict__\u4e2d\u6ca1\u5fc5\u8981\u518d\u5b58\u4e00\u4efd. \u60f3\u4e00\u60f3,\u4e0dpop\u6389\u7684\u8bdd new_user = User ( name = 'egon' , password = '666' ) getattr ( user, name, None ) \u62ff\u5230\u7684\u5c31\u662f\u7c7b\u7684\u547d\u540d\u7a7a\u95f4\u91ccname\u5bf9\u5e94\u7684Field\u5bf9\u8c61\u5566,\u4e0d\u662fname\u7684\u503c! \u82e5User\u7c7b/\u8868\u4e2d\u6ca1\u6709\u4e3b\u952e,\u629b\u5f02\u5e38 5 > -- \u5c06table_name\u3001 primary_key\u3001mappings\u653e\u5165User.__dict__\u4e2d!! \u5e76\u5b8c\u6210User\u7c7b\u7684\u521b\u5efa. \"\u63d0\u9192\u4e00\u70b9,User\u7684\u547d\u540d\u7a7a\u95f4\u91cc\u7684\u4e1c\u897f,User\u7c7b\u7684\u5b9e\u4f8b\u662f\u5171\u4eab\u7684!!\" \u4e3a\u4e86\u540e\u9762\u7684\u67e5\u8be2\u66f4\u65b0\u548c\u63d2\u5165\u529f\u80fd\u7684\u5b9e\u73b0! \"\u8fd9\u6837\u4e00\u6298\u817e,\u53ea\u8981\u7c7b\u88ab\u8be5\u5143\u7c7b\u4e00\u62e6\u622a,\u8fd9\u4e9b\u88ab\u62e6\u622a\u7684\u7c7b\u7684\u547d\u540d\u7a7a\u95f4\u91cc\u90fd\u6709\u4e00\u6837\u7684key\u503c!!\"","title":"ModelsMetaclass\u5143\u7c7b"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/14_%E6%89%8B%E6%92%B8ORM/#mysql","text":"\u901a\u8fc7\u7b2c\u4e09\u65b9pymysql\u6a21\u5757,\u5b9e\u73b0\u4e86Mysql\u7c7b,\u4e3a\u521b\u5efa\u7684sql\u94fe\u63a5\u63d0\u4f9b\u4e86\u67e5\u8be2\u3001\u66f4\u65b0\u7684\u63a5\u53e3! ms = Mysql () \u67e5\u8be2\u63a5\u53e3 -- ms.select () \u66f4\u65b0\u3001\u4fdd\u5b58\u63a5\u53e3 -- ms.execute () \u6ce8\u610f\u51e0\u70b9: 1 > \u67e5\u8be2\u7684\u7ed3\u679c\u96c6\u662f\u5217\u8868\u5d4c\u5957\u5b57\u5178\u7684\u683c\u5f0f [{ k:v,k:v } , { k:v }] 2 > autocommit = True 3 > \u7528\u7c7b\u65b9\u6cd5\u5b9e\u73b0\u5355\u4f8b\u6a21\u5f0f,\u907f\u514d\u6bcf\u6b21\u67e5\u8be2\u90fd\u4f1aMysql () \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u94fe\u63a5 \u67e5\u8be2\u3001\u66f4\u65b0\u3001\u63d2\u5165\u7684\u64cd\u4f5c\u90fd\u7528\u7684\u540c\u4e00\u4e2a\u6570\u636e\u5e93\u94fe\u63a5!! 4 > '\u2605\u2605\u2605' \u7279\u522b\u6ce8\u610f!! \u7528 ` cursor.execute ( sql, []) ` \u5bf9sql\u81ea\u52a8\u8fdb\u884c\u62fc\u63a5\u5e76\u6267\u884c,\u53ef\u4ee5\u9632\u6b62sql\u6ce8\u5165. '\u4f46\u53ea\u4f1a\u62fc\u63a5\u5b57\u6bb5\u503c!!\u4e0d\u4f1a\u5bf9\u8868\u540d\u548c\u5b57\u6bb5\u540d\u8fdb\u884c\u62fc\u63a5!!' import pymysql class Mysql: __instance = None def __init__ ( self ) : self.conn = pymysql.connect ( host = \"127.0.0.1\" , port = 3306 , user = \"root\" , password = \"123456\" , charset = \"utf8\" , database = \"youku\" , autocommit = True # -- \u81ea\u52a8\u63d0\u4ea4 ) self.cursor = self.conn.cursor ( cursor = pymysql.cursors.DictCursor ) # -- \u5173\u95ed def close_db ( self ) : self.cursor.close () self.conn.close () # -- \u67e5\u8be2 def select ( self, sql, args = None ) : pass # -- \u66f4\u65b0\u3001\u4fdd\u5b58 update\u3001insert def execute ( self, sql, args ) : pass # -- \u4f7f\u7528\u7c7b\u65b9\u6cd5\u5b9e\u73b0\u5355\u4f8b\u6a21\u5f0f @classmethod def singleton ( cls ) : if not cls.__instance: cls.__instance = cls () return cls.__instance if __name__ == '__main__' : ms = Mysql () res = ms.select ( \"select * from user where id=%s\" , [ 1 ]) print ( res ) ms.close_db ()","title":"Mysql\u7c7b"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/14_%E6%89%8B%E6%92%B8ORM/#model","text":"# -- \u6bcf\u4e2a\u6570\u636e\u8868\u90fd\u5e94\u8be5\u5177\u5907\u67e5\u8be2\u3001\u63d2\u5165\u3001\u4fdd\u5b58\u7b49\u65b9\u6cd5!! 1 > def select_res ( cls, **kwargs ) : -- \u9759\u6001\u65b9\u6cd5<\u8fd9\u91cc\u624b\u52a8\u4f20\u4e86\u4e00\u4e2a\u7c7b\u5bf9\u8c61\u8fdb\u53bb \u8c03\u7528\u67e5\u8be2\u63a5\u53e3\u53d6\u5230\u6570\u636e 2 > def select_one ( cls, **kwargs ) : -- \u7c7b\u65b9\u6cd5 \u53ea\u4f1a\u5f97\u5230\u4e00\u6761\u6570\u636e \u8be5\u65b9\u6cd5\u91cc\u9762\u4f1a\u8c03\u7528\u9759\u6001\u65b9\u6cd5select_res \u62ff\u5230\u7ed3\u679c\u540e,\u4f1a\u5c06\u8be5\u6761\u6570\u636e\u8f6c\u5316\u6210User\u7c7b\u7684\u5b9e\u4f8b\u5bf9\u8c61!! 3 > def select_many ( cls, **kwargs ) : -- \u7c7b\u65b9\u6cd5 \u5f97\u5230\u4e00\u6761\u6216\u8005\u591a\u6761\u6570\u636e \u540c\u7406,\u8be5\u65b9\u6cd5\u4e5f\u4f1a\u8c03\u7528\u9759\u6001\u65b9\u6cd5select_res '\u2605 \u62ff\u5230\u7ed3\u679c\u540e,\u4f1a\u5c06\u4e00\u6761\u6761\u7684\u6570\u636e\u8f6c\u5316\u6210User\u7c7b\u7684\u5b9e\u4f8b\u5bf9\u8c61!!' \u6ce8\u610f!\u8be5\u65b9\u6cd5\u91cc\u6709\u4e2a\u5224\u65ad,\u5f53kwargs\u4e3a\u7a7a\u65f6,\u4f1a\u91cd\u65b0\u62fc\u63a5\u4e00\u4e2asql\u8bed\u53e5,\u67e5\u8be2\u8be5\u8868\u4e2d\u7684\u6240\u6709\u6570\u636e! \u4f53\u4f1a\u4e0b,\u7ec6\u54c1 ` [ cls ( **r ) for r in res ] ` 4 > def update ( self ) : -- \u5b9e\u4f8b\u65b9\u6cd5/\u5bf9\u8c61\u7684\u7ed1\u5b9a\u65b9\u6cd5 \u5bf9\u6570\u636e\u8fdb\u884c\u66f4\u65b0 \u8be5\u65b9\u6cd5\u662f\u771f\u7684\u7ed5!!-_- \u6211\u4eec\u9ed8\u8ba4\u7528\u4e3b\u952e\u8fdb\u884c\u66f4\u65b0!! \u2605 \u6ce8\u610f:\u6709\u4e86\u771f\u6b63\u7684\u5b9e\u4f8b/\u62ff\u5230\u4e00\u6761\u6570\u636e\u624d\u80fd\u771f\u6b63\u7684\u8fdb\u884c\u66f4\u65b0,\u5e94\u5177\u4f53\u5230\u67d0\u4e2a\u5b9e\u4f8b\u5bf9\u8c61,\u6240\u4ee5\u8be5\u65b9\u6cd5\u4e0d\u80fd\u662f\u7c7b\u65b9\u6cd5! \u601d\u8003\u5206\u6790,\u9996\u5148\u6211\u4eec\u8981\u62fc\u63a5\u4e00\u4e2asql ` update user set name = 'lqz' ,password = 123 where id = 1 ` \u62c6\u5206\u5f00\u6765,\u6211\u4eec\u8981\u62ff\u5230 >> \u8868\u540duser >> name = 'lqz' ,password = 123 name\u3001password\u8fd9\u4e9b\u6570\u636e\u5e93\u5b57\u6bb5\u5728User\u7c7b\u7684\u547d\u540d\u7a7a\u95f4\u7684mappings\u91cc\u653e\u7740\u5462!! \u547d\u540d\u7a7a\u95f4\u91cc\u7684\u952emappings\u5bf9\u5e94\u7684\u503c\u662f\u4e00\u4e2a\u5b57\u5178. \u8be5\u5b57\u5178\u7684\u952e\u662f\u5b57\u6bb5\u540d,\u503c\u662fField\u5bf9\u8c61. User\u7c7b\u7684\u547d\u540d\u7a7a\u95f4 User.__dict__ \u662f\u80fd\u88abUser\u7684\u5b9e\u4f8b\u8bbf\u95ee\u5230\u7684!!! fields\u5217\u8868\u91cc\u653e\u9664\u4e86\u4e3b\u952e\u7684\u6240\u6709\u5b57\u6bb5,\u5b57\u6bb5\u7ecf\u8fc7\u4e86\u5904\u7406 ` \u5b57\u6bb5 + '=?' ` >> \u4e3b\u952e\u5b57\u6bb5id\u4ee5\u53ca\u8be5\u5b57\u6bb5\u7684\u503c \u6ce8\u610f\u8fd9\u53e5\u4ee3\u7801! pr = getattr ( self, k, None ) -- \u5c06\u4e3b\u952e\u7684\u503c\u7ed9\u4e86pr\u53d8\u91cf User\u5b9e\u4f8b\u548cUser\u7c7b\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u90fd\u6ca1\u6709\u540d\u4e3aid\u7684\u952e '\u2605\u2605\u2605' \u5c31\u4f1a\u53bb\u8c03\u7528Models\u91cc\u91cd\u5199\u7684__getattr__\u65b9\u6cd5!! \u901a\u8fc7 self [ k ] \u62ff\u5230\u8be5\u6761\u6570\u636e\u5b57\u6bb5id\u5bf9\u5e94\u7684\u503c! \u90fd\u5f97\u5230\u540e,\u62fc\u63a5\u6210\u4e00\u4e2asql!! ms.execute ( sql, args ) \u9700\u8981args! '\u2605\u2605\u2605' ` args.append ( getattr ( self, k, None )) ` \u5176\u5b9e\u5c31\u662f\u53d6self\u8fd9\u4e2a\u5b57\u5178\u672c\u8eab\u9664\u4e86\u4e3b\u952e\u5916\u5176\u5b83\u5b57\u6bb5\u7684\u503c!! update\u8be5\u65b9\u6cd5\u600e\u4e48\u7528? user = User.select_one ( id = 3 ) user.name = 'dc0' user.update () 5 > def insert ( self ) : -- \u5b9e\u4f8b\u65b9\u6cd5/\u5bf9\u8c61\u7684\u7ed1\u5b9a\u65b9\u6cd5 \u63d2\u5165\u65b0\u6570\u636e \u6ce8\u610f\u4e00\u70b9,\u6784\u5efasql\u8bed\u53e5,sql\u8bed\u53e5\u4e2d\u6709\u591a\u5c11\u4e2a\u5b57\u6bb5,sql\u8bed\u53e5\u7684valuse\u540e\u9762\u5c31\u8981\u8ddf\u591a\u5c11\u4e2a\u503c.","title":"\u5b8c\u5584Model\u7c7b"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/14_%E6%89%8B%E6%92%B8ORM/#orm_1","text":"\u7528\u6237\u8868 -- User\u7c7b \u7528\u6237\u8868\u7684\u4e00\u884c\u6570\u636e -- User\u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8bobj User\u7c7b\u4e2d\u7684\u7c7b\u5c5e\u6027, ` \u5b57\u6bb5\u540d = Field\u5b57\u6bb5\u5bf9\u8c61 ` User\u7c7b\u7684\u57fa\u7c7bModels\u7ee7\u627fdict,User\u7684\u5b9e\u4f8bobj\u5c31\u662f\u4e00\u4e2a\u5b57\u5178,User\u7c7b\u5b9e\u4f8b\u5316\u7684\u8fc7\u7a0b\u91cc\u5c31\u4f1a\u5f80\u5b57\u5178\u91cc\u4f20\u503c.. \u867d\u7136obj\u662f\u4e00\u4e2a\u5b9e\u4f8b,\u4f46\u901a\u8fc7obj.attr\u662f\u62ff\u4e0d\u5230\u503c\u7684,\u56e0\u4e3aobj\u4ee5\u53caUser\u7684__dict__\u4e2d\u6ca1\u6709.. So,\u91cd\u5199__getattr__\u548c__setattr__\u65b9\u6cd5!! \u8ba9obj.attr\u4eceobj\u8fd9\u4e2a\u5b57\u5178\u672c\u8eab\u91cc\u53d6\u503c,\u4ee5\u53caobj.attr = value,\u5f80obj\u5b57\u5178\u91cc\u6dfb\u52a0\u503c!! Models\u4e0d\u4ec5\u7ee7\u627fdict,\u8fd8\u4f1a\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684\u5143\u7c7bModelMetaclass.. \u4f7f\u5f97User\u7c7b\u5728\u521b\u5efa\u8fc7\u7a0b,\u5c31\u5c06\u6570\u636e\u7ec4\u7ec7\u597d\u653e\u5230User\u7c7b\u7684__dict__\u4e2d,\u5e76\u5c06\u90a3\u4e9b\u91cd\u590d\u7684\u6570\u636e\u5220\u9664 ( \u5220\u9664\u662f\u4e3a\u4e86\u4fdd\u8bc1\u4f7f\u7528\u53cd\u5c04\u65f6\u62ff\u5230\u7684\u662f\u5b57\u5178\u672c\u8eab\u7684\u6570\u636e ) ! \u7ec4\u7ec7\u7684\u6570\u636e\u5305\u542btable_name\u3001primary_key\u548c\u4e00\u5806Field\u5bf9\u8c61 -- \u4e3b\u8981\u5c31\u662f\u5728\u64cd\u4f5c\u5143\u7c7b\u7684\u53c2\u6570attrs \u67e5\u8be2\u901a\u8fc7User\u7c7b\u6765\u67e5\u8be2,\u662f\u7c7b\u65b9\u6cd5 \u66f4\u65b0\u7684user\u7c7b\u7684\u5b9e\u4f8b,\u6dfb\u52a0\u7684\u4e5f\u662fuser\u7c7b\u7684\u5b9e\u4f8b!! \u67e5\u8be2\u3001\u66f4\u65b0\u3001\u6dfb\u52a0 \u5927\u4f53\u601d\u8def\u5c31\u662f \u6784\u5efasql\u8bed\u53e5,\u521b\u5efamysql\u94fe\u63a5,\u8c03\u7528\u76f8\u5e94\u7684\u63a5\u53e3! \u6709\u4e2a\u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u5730\u65b9: \u5bf9User\u7684\u5b9e\u4f8bobj\u4f7f\u7528\u53cd\u5c04 getattr \u4f1a\u8c03\u7528__getattr__\u6700\u7ec8\u62ff\u5230\u7684\u662fobj\u8fd9\u4e2a\u5b57\u5178\u672c\u8eab\u7684\u5185\u5bb9. \u6570\u636e\u5e93\u63a5\u53e3\u7684\u5b9e\u73b0\u5c31\u662f\u4f7f\u7528\u7b2c\u4e09\u65b9\u6a21\u5757pymysql\u6784\u5efa\u7684,\u8fd4\u56de\u7ed3\u679c\u662f\u5217\u8868\u5b57\u5178\u3001\u7528\u5355\u4f8b\u4f7f\u5f97\u67e5\u8be2\u66f4\u65b0\u6dfb\u52a0\u7528\u7684\u540c\u4e00\u4e2a\u94fe\u63a5!","title":"ORM\u6846\u67b6\u601d\u8def\u603b\u7ed3"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/14_%E6%89%8B%E6%92%B8ORM/#_4","text":"\u7a0b\u5e8f\u64cd\u4f5c\u6570\u636e\u5e93\u9700\u8981\u5efa\u7acb\u94fe\u63a5 , \u6765\u4e00\u4e2a\u67e5\u8be2\u5efa\u7acb\u4e00\u4e2a\u94fe\u63a5 \u3001 \u6765\u4e00\u4e2a\u66f4\u65b0\u5efa\u7acb\u4e00\u4e2a\u94fe\u63a5 .. \u4e0d\u4e00\u4f1a , \u6570\u636e\u5e93\u7684\u8fde\u63a5\u6570\u5c31\u6ee1\u4e86 ! \u6240\u4ee5\u6211\u4eec\u4f7f\u7528\u4e86\u5355\u4f8b , \u4f7f\u5f97\u8be5\u7a0b\u5e8f\u5bf9\u6570\u636e\u5e93\u7684\u67e5\u8be2\u66f4\u65b0\u6dfb\u52a0\u7b49\u64cd\u4f5c\u7528\u7684\u662f\u540c\u4e00\u4e2a\u94fe\u63a5 ! \"\u6570\u636e\u5e93\u8fde\u63a5\u5355\u4f8b\u662f\u6307\u5728\u9879\u76ee\u8fd0\u884c\u671f\u95f4,\u59cb\u7ec8\u53ea\u6709\u4e00\u4e2a\u6570\u636e\u5e93\u94fe\u63a5!\u5373\u8fd9\u4e2a\u94fe\u63a5\u5728\u8be5\u9879\u76ee\u7a0b\u5e8f\u4e2d\u662f\u590d\u7528\u7684!\" \u4f46\u5982\u679c\u67091000\u4e2a\u5ba2\u6237\u7aef\u5e76\u53d1\u8fc7\u6765 , \u8981\u5efa\u7acb1000\u4e2a\u94fe\u63a5 \uff1f \u4f9d\u65e7\u4f7f\u7528\u5355\u4f8b\u6a21\u5f0f\u7684\u6570\u636e\u5e93 \uff1f Ps : \u4e00\u70b9\u5c0f\u601d\u8003 \u8be5\u573a\u666f\u4e0b , \u82e5\u4f7f\u7528\u5355\u4f8b\u6570\u636e\u5e93 , \u6709\u70b9\u534f\u7a0b\u7684\u5473\u9053 ! -- \u8be5\u94fe\u63a5\u5728\u591a\u4e2a\u5ba2\u6237\u7aef\u4e4b\u95f4\u6765\u56de\u5207 , \u5207\u6362 + \u4fdd\u5b58\u72b6\u6001 \u5177\u4f53\u5982\u4f55\u5b9e\u73b0 , \u4e0d\u6653\u5f97 \u4f46\u4e00\u822c\u60c5\u51b5\u4e0b , \u534f\u7a0b\u7684\u94fe\u63a5\u6570\u6ca1\u8bb0\u9519\u7684\u8bdd\u6700\u597d\u4e0d\u8d85\u8fc7500\u4e2a . \u89e3\u51b3\u65b9\u6848 : \u5efa\u7acb\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u63a7\u5236\u7f51\u7ad9\u6700\u591a\u8fde\u63a5\u6570\u636e\u5e93\u7684\u6570\u91cf , \u591f\u4e86\u540e\u6765\u8005\u5c31\u6392\u961f ; \u521b\u5efa\u8fde\u63a5\u540e\u4e0d\u7528\u6b64\u8fde\u63a5\u4e86\u4f46\u4e0d\u65ad\u5f00\u6682\u65f6\u5b58\u8d77\u6765 , \u4ee5\u4fbf\u8fde\u63a5\u7684\u91cd\u7528 ! dbutils\u662fpython\u7684\u4e00\u4e2a\u7528\u4e8e\u5b9e\u73b0\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u7684\u6a21\u5757! dbutils\u63d0\u4f9b\u4e86\u4e24\u79cd\u5916\u90e8\u63a5\u53e3: PersistentDB -- \u63d0\u4f9b\u7ebf\u7a0b\u4e13\u7528\u7684\u6570\u636e\u5e93\u8fde\u63a5,\u5e76\u81ea\u52a8\u7ba1\u7406\u8fde\u63a5; PooledDB -- \u63d0\u4f9b\u7ebf\u7a0b\u95f4\u53ef\u5171\u4eab\u7684\u6570\u636e\u5e93\u8fde\u63a5,\u5e76\u81ea\u52a8\u7ba1\u7406\u8fde\u63a5. (\u6211\u4eec\u4e00\u822c\u4f7f\u7528\u8fd9\u79cd\u6a21\u5f0f!) import pymysql from dbutils.pooled_db import PooledDB POOL = PooledDB ( creator = pymysql , maxconnections = 10 , mincached = 3 , maxcached = 5 , maxshared = 3 , blocking = True , maxusage = None , setsession = [], ping = 0 , host = '127.0.0.1' , port = 3306 , user = 'root' , password = '123456' , database = 'youku' , charset = 'utf8' ) if __name__ == '__main__' : conn = POOL . connection () cursor = conn . cursor () cursor . execute ( 'select * from user' ) result = cursor . fetchall () print ( result ) cursor . close () conn . close ()","title":"\u6570\u636e\u5e93\u8fde\u63a5\u6c60"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/14_%E6%89%8B%E6%92%B8ORM/#_5","text":"user\u7528\u6237\u8868\u8bbe\u8ba1 user\u7528\u6237\u8868\u6570\u636e class Notic ( Models ): table_name = \"notice\" id = IntegerField ( 'id' , primary_key = True ) name = StringField ( 'name' ) content = StringField ( 'content' ) user_id = IntegerField ( 'user_id' ) # -- create_time \u5b83\u4f1a\u81ea\u52a8\u586b\u5145\u4e0a, \u8fd9\u91cc\u7701\u4e8b\u5c31\u4e0d\u5199\u5566! notice\u516c\u544a\u8868\u8bbe\u8ba1 \u516c\u544a\u8868\u6570\u636e","title":"\u529f\u80fd\u6d4b\u8bd5"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/15_%E4%BB%BF%E4%BC%98%E9%85%B7/","text":"\u50a8\u5907\u77e5\u8bc6 \u00b6 \u6211\u4eec\u5f97\u5f04\u6e05 cookies\u3001session\u3001token \u5230\u5e95\u662f\u4ec0\u4e48\uff1f! \u53c2\u8003\u6587\u6863: https://www.cnblogs.com/liuqingzheng/articles/8990027.html \u4f55\u4e3a\u4f1a\u8bdd ? \u4f1a\u8bdd , \u5e7f\u4e49\u7684\u542b\u4e49\u662f\u6307\u6709\u59cb\u6709\u7ec8\u7684\u4e00\u7cfb\u5217\u52a8\u4f5c / \u6d88\u606f . \u5728web\u4e2d , \u4f1a\u8bdd\u5bf9\u8c61\u7528\u6765\u5b58\u50a8\u7279\u5b9a\u7528\u6237\u4f1a\u8bdd\u6240\u9700\u7684\u5c5e\u6027\u53ca\u914d\u7f6e\u4fe1\u606f ! HTTP\u534f\u8bae\u662f\u65e0\u72b6\u6001\u534f\u8bae ? \u65e0\u72b6\u6001\u534f\u8bae\u5373\u65e0\u6cd5\u4fdd\u6301\u4f1a\u8bdd\u4e4b\u95f4\u7684\u72b6\u6001 . \u670d\u52a1\u7aef\u4e0d\u6653\u5f97\u5ba2\u6237\u7aef\u662f\u4ec0\u4e48\u72b6\u6001 . HTTP\u8bf7\u6c42\u662f\u65e0\u72b6\u6001\u7684 , \u6bcf\u6b21\u90fd\u662f\u65b0\u7684\u8bf7\u6c42 ! \u4e3e\u4e2a\u4f8b\u5b50 , \u6210\u529f\u767b\u9646\u4e00\u4e2a\u7f51\u7ad9 , \u5f53\u8bbf\u95ee\u8be5\u7f51\u7ad9\u7684\u5176\u5b83\u7f51\u9875\u65f6 , \u8be5\u767b\u9646\u72b6\u6001\u4f1a\u6d88\u5931 ! \u9700\u8981\u91cd\u65b0\u767b\u9646\u4e00\u6b21 . \u6b64\u65f6 , \u6211\u4eec\u9700\u8981\u5c06\u5bf9\u5e94\u7684\u4f1a\u8bdd\u4fe1\u606f ( eg : \u767b\u9646\u6210\u529f\u7684\u4fe1\u606f\u7b49 ) \u4fdd\u5b58\u4e0b\u6765 -- Cookie \u6216 Session ! \u4f1a\u8bdd\u4fe1\u606f\u7684\u4fdd\u5b58 : cookie \u5ba2\u6237\u7aef ; session \u670d\u52a1\u7aef ; token \u5ba2\u6237\u7aef \u6ce8\u610f . \u4e0d\u7ba1\u662fcookie\u8fd8\u662ftoken , \u53ea\u8981\u4fdd\u5b58\u5728\u5ba2\u6237\u7aef\u7684\u4fe1\u606f , \u6211\u4eec\u90fd\u7edf\u79f0\u4e3acookie\u4fe1\u606f . \u65e0cookie\u65f6\u671f -- \u9759\u6001\u7f51\u7ad9 cookie\u8ba4\u8bc1\u65f6\u671f -- \u5728\u7ebf\u8d2d\u7269\u7f51\u7ad9 \u3001 \u9700\u8981\u767b\u5f55\u7684\u7f51\u7ad9\u7b49 \u5f53\u4e00\u4e2a\u6d4f\u89c8\u5668\u8bbf\u95ee\u67d0web\u670d\u52a1\u5668\u65f6 web\u670d\u52a1\u5668\u4f1a\u5728\u54cd\u5e94\u5934\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u540d\u53ebSet - Cookie\u7684\u54cd\u5e94\u5b57\u6bb5 , \u7528\u4e8e\u5c06Cookie\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668 \u5f53\u6d4f\u89c8\u5668\u7b2c\u4e8c\u6b21\u8bbf\u95ee\u8be5web\u670d\u52a1\u5668\u65f6\u4f1a\u81ea\u52a8\u7684\u5c06\u8be5cookie\u56de\u4f20\u7ed9\u670d\u52a1\u5668 , \u6765\u5b9e\u73b0\u7528\u6237\u72b6\u6001\u8ddf\u8e2a !! \u5f0a\u7aef : \u5c3d\u7ba1\u6d4f\u89c8\u5668\u53d1\u9001\u767b\u9646\u4fe1\u606f ( pwd ) \u4f1a\u52a0\u5bc6\u53d1\u9001\u5230\u670d\u52a1\u7aef , \u8fdb\u800c\u670d\u52a1\u7aef\u8fd4\u8fd8\u7ed9\u5ba2\u6237\u7aef\u7684cookie\u4e2d\u5305\u542b\u7684\u662f\u5ba2\u6237\u7aef / \u6d4f\u89c8\u5668\u52a0\u5bc6\u7684\u5bc6\u7801 .. \u4f46cookie\u4e2d\u59cb\u7ec8\u5305\u542b\u7740pwd\u8fd9\u4e9b\u7528\u6237\u7684\u654f\u611f\u4fe1\u606f . \u4e0d\u7ba1\u662f\u7528\u6237\u9996\u6b21\u767b\u9646\u53d1\u9001\u7ed9S\u7aef\u7684\u6570\u636e\u5305 , \u8fd8\u662fC --> S\u7684cookie , \u9ed1\u5ba2\u622a\u83b7\u540e\u53ef\u4ee5\u901a\u8fc7\u649e\u5e93\u7834\u89e3 . \u4e3a\u4e86\u964d\u4f4e\u98ce\u9669 , \u6211\u4eec\u53ef\u4ee5\u5c06C --> S\u7684cookie\u4fe1\u606f\u4e2d\u4e0d\u5305\u542bpwd\u7b49\u7528\u6237\u7684\u654f\u611f\u4fe1\u606f cookie + session\u8ba4\u8bc1\u65f6\u671f \u6253\u4e2a\u6bd4\u65b9 , \u5c06\u81ea\u5df1\u6bd4\u4f5c\u670d\u52a1\u7aef , \u7ed9\u5927\u5bb6\u53d1\u4e00\u4e2a\u4f1a\u8bdd\u6807\u8bc6 ( session id ), \u8bf4\u767d\u4e86\u5c31\u662f\u4e00\u4e2a\u968f\u673a\u7684\u5b57\u4e32 \u6bcf\u4e2a\u4eba\u6536\u5230\u7684\u90fd\u4e0d\u4e00\u6837 , \u6bcf\u6b21\u5927\u5bb6\u5411\u6211\u53d1\u8d77HTTP\u8bf7\u6c42\u7684\u65f6\u5019 , \u628a\u8fd9\u4e2asession\u5b57\u4e32\u653e\u5230cookie\u4e2d\u4e00\u5e76\u634e\u8fc7\u6765 \u6211\u5728\u670d\u52a1\u7aef\u5c06\u5176\u4e0e\u5b58\u50a8\u7684session\u8fdb\u884c\u6bd4\u5bf9 , \u8fd9\u6837\u6211\u5c31\u80fd\u533a\u5206\u5f00\u8c01\u662f\u8c01\u4e86 ! \u5f0a\u7aef : 1 > \u6bcf\u4e2a\u4eba\u53ea\u9700\u8981\u4fdd\u5b58\u81ea\u5df1\u7684session id , \u800c\u670d\u52a1\u5668\u8981\u4fdd\u5b58\u6240\u6709\u4eba\u7684session id \uff01 \u968f\u7740\u8bbf\u95ee\u670d\u52a1\u7aef\u7684\u7528\u6237\u589e\u591a , S\u7aef\u5b58\u50a8\u7684session\u4e5f\u4f1a\u53d8\u591a ! 2 > \u82e5\u540c\u65f6\u670910\u4e07\u4e2a\u5e76\u53d1\u8bbf\u95eeS\u7aef , S\u7aef\u6536\u5230\u4e8610\u4e07\u4efd\u5305\u542b\u4e86session\u7684cookie , \u9700\u8981\u4e00\u4e00\u8fdb\u884c\u6bd4\u5bf9 .. 3 > \u5018\u82e5\u7528\u4e24\u4e2a\u673a\u5668\u7ec4\u6210\u4e86\u4e00\u4e2a\u96c6\u7fa4 , \u5c0fF\u901a\u8fc7\u673a\u5668A\u767b\u5f55\u4e86\u7cfb\u7edf , \u90a3session id\u4f1a\u4fdd\u5b58\u5728\u673a\u5668A\u4e0a \u5047\u8bbe\u5c0fF\u7684\u4e0b\u4e00\u6b21\u8bf7\u6c42\u88ab\u8f6c\u53d1\u5230\u673a\u5668B\u600e\u4e48\u529e ? \u673a\u5668B\u53ef\u6ca1\u6709\u5c0fF\u7684 session id\u554a . \u9650\u5236\u4e86\u96c6\u7fa4\u7684\u6c34\u5e73\u6269\u5c55 . \u89e3\u51b3\u529e\u6cd5 : session sticky \u5c31\u662f\u8ba9\u5c0fF\u7684\u8bf7\u6c42\u4e00\u76f4\u7c98\u8fde\u5728\u673a\u5668A\u4e0a , \u4f46\u662f\u8fd9\u4e5f\u4e0d\u7ba1\u7528 , \u8981\u662f\u673a\u5668A\u6302\u6389\u4e86 , \u8fd8\u5f97\u8f6c\u5230\u673a\u5668B\u53bb . session\u7684\u590d\u5236 \u628asession id\u5728\u4e24\u4e2a\u673a\u5668\u4e4b\u95f4\u642c\u6765\u642c\u53bb ! session\u7684\u96c6\u7fa4 \u5c06\u591a\u53f0\u670d\u52a1\u5668\u7684session\u96c6\u4e2d\u7ba1\u7406 , \u653e\u5230\u4e00\u5904 , \u5e76\u5bf9\u8be5session\u505a\u96c6\u7fa4 , \u907f\u514d\u5355\u70b9\u6545\u969c . Token \u670d\u52a1\u7aef\u4e3a\u4ec0\u4e48\u8981\u4fdd\u5b58\u8fd9\u53ef\u6076\u7684session\u5462 , \u53ea\u8ba9\u6bcf\u4e2a\u5ba2\u6237\u7aef\u53bb\u4fdd\u5b58\u8be5\u591a\u597d ! So , Token\u7528\u8ba1\u7b97\u6362\u53d6\u4e86\u7a7a\u95f4 ! \u5c0fF\u5df2\u7ecf\u6210\u529f\u767b\u5f55\u7cfb\u7edf , \u6211\u7ed9\u4ed6\u53d1\u4e00\u4e2a\u4ee4\u724c ( token ), \u91cc\u8fb9\u5305\u542b\u4e86\u5c0fF\u7684user id , \u5e76\u5bf9\u8be5\u6570\u636e\u505a\u4e00\u4e2a\u7b7e\u540d \u6bd4\u5982\u8bf4\u6211\u7528HMAC - SHA256\u7b97\u6cd5 , \u52a0\u4e0a\u4e00\u4e2a\u53ea\u6709\u6211\u624d\u77e5\u9053\u7684\u5bc6\u94a5 , \u5bf9\u6570\u636e\u505a\u4e00\u4e2a\u7b7e\u540d \u628a \u8fd9\u4e2a\u7b7e\u540d\u548c\u6570\u636e\u4e00\u8d77\u4f5c\u4e3atoken ` \u5373\u7b7e\u540d + \u6570\u636e = token ` \u53d1\u9001\u7ed9C\u7aef , \u7531\u4e8e\u5bc6\u94a5\u522b\u4eba\u4e0d\u77e5\u9053 , \u5c31\u65e0\u6cd5\u4f2a\u9020token\u4e86 !! \u8fd9\u4e2atoken\u6211\u4e0d\u4fdd\u5b58 , \u5f53\u5c0fF\u628a\u8fd9\u4e2atoken\u7ed9\u6211\u53d1\u8fc7\u6765\u7684\u65f6\u5019 , \u6211\u518d\u7528\u540c\u6837\u7684HMAC - SHA256\u7b97\u6cd5\u548c\u540c\u6837\u7684\u5bc6\u94a5 \u5bf9\u6570\u636e\u518d\u8ba1\u7b97\u4e00\u6b21\u7b7e\u540d\u548ctoken\u4e2d\u7684\u7b7e\u540d\u505a\u4e2a\u6bd4\u8f83 \u82e5\u76f8\u540c , \u6211\u5c31\u77e5\u9053\u5c0fF\u5df2\u7ecf\u767b\u5f55\u8fc7\u4e86 , \u5e76\u4e14\u53ef\u4ee5\u76f4\u63a5\u53d6\u5230\u5c0fF\u7684user id ; \u82e5\u4e0d\u76f8\u540c , \u6570\u636e\u90e8\u5206\u80af\u5b9a\u88ab\u4eba\u7be1\u6539\u8fc7 , \u6211\u5c31\u544a\u8bc9\u53d1\u9001\u8005 : \u5bf9\u4e0d\u8d77 , \u6ca1\u6709\u8ba4\u8bc1 ! Ps : Token\u79fb\u52a8\u7aef\u4e5f\u53ef\u4ee5\u7528 ! \u4eff\u4f18\u9177\u9879\u76ee \u00b6 \u8be5\u9879\u76ee\u6db5\u76d6\u5185\u5bb9: \u7ebf\u7a0b\u6c60, \u9501\u673a\u5236, session\u9a8c\u8bc1\u673a\u5236, \u7b80\u6613\u7248orm, \u5927\u6587\u4ef6md5\u6821\u9a8c, \u6570\u636e\u5e93\u64cd\u4f5c \u7cfb\u7edf\u67b6\u6784 \u00b6 Ps: \u5077\u4e2a\u61d2\u5427,\u4e0d\u60f3\u753b\u56fe!!\u76f4\u63a5\u62cd\u7167\u5b8c\u4e8b. \u968f\u7f18\u753b\u6cd5. \u521b\u5efa\u8868 \u00b6 \u7528sql\u8bed\u53e5 or \u7528\u5de5\u5177\u521b\u5efa\u8868 Ps: \u52a0` `\u662f\u4e3a\u4e86\u8868\u660e\u5b83\u4e0d\u662f\u5173\u952e\u5b57,\u82e5\u4e0d\u52a0,\u7f8e\u5316\u540e,\u5b83\u5c31\u53d8\u6210\u5927\u5199\u7684\u4e86! \u7528\u5de5\u5177\u521b\u5efa\u7c7b\u578b\u4e3atimestamp\u7684\u5b57\u6bb5\u65f6,\u82e5\u52fe\u9009\"\u6839\u636e\u5f53\u524d\u65f6\u95f4\u66f4\u65b0\",\u6dfb\u52a0\u548c\u4fee\u6539\u6570\u636e\u65f6,\u90fd\u4f1a\u66f4\u65b0\u65f6\u95f4! -- \u5173\u6389\u5916\u952e\u7ea6\u675f,\u8868\u660e\u4e0d\u7528\u505a\u5916\u952e\u68c0\u67e5,\u4e24\u8868\u6709\u5916\u952e\u5173\u8054,\u4e5f\u80fd\u5220\u9664! set foreign_key_checks = 0 ; -- \u82e5\u8868\u5df2\u5b58\u5728,\u5220\u9664. drop table if exists user_info , movie , notice , download_record ; -- \u7528\u6237\u8868 CREATE TABLE user_info ( id INT PRIMARY KEY NOT NULL auto_increment , ` name ` VARCHAR ( 32 ), ` password ` VARCHAR ( 64 ), is_vip INT , -- \u662f\u5426\u662f\u4f1a\u5458 locked INT , -- \u662f\u5426\u9501\u5b9a user_type VARCHAR ( 32 ) -- \u7ba1\u7406\u5458\u8fd8\u662f\u666e\u901a\u7528\u6237 ) ENGINE = INNODB , charset = 'utf8' ; -- \u89c6\u9891\u8868 CREATE TABLE movie ( id INT PRIMARY KEY NOT NULL auto_increment , ` name ` VARCHAR ( 32 ), ` path ` VARCHAR ( 255 ), is_free INT DEFAULT 0 , -- \u662f\u5426\u6536\u8d39 is_delete INT DEFAULT 0 , create_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP , -- \u81ea\u52a8\u6dfb\u52a0\u5f53\u524d\u65f6\u95f4\u6233\u4e3a\u4e0a\u4f20\u65f6\u95f4. user_id INT , -- \u8c01\u4e0a\u4f20\u7684\u89c6\u9891 file_md5 VARCHAR ( 64 ) ) charset = 'utf8' ; -- \u516c\u544a\u8868 CREATE TABLE notice ( id INT PRIMARY KEY NOT NULL auto_increment , ` name ` VARCHAR ( 64 ), content VARCHAR ( 255 ), create_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP , user_id INT ) charset = 'utf8' ; -- \u4e0b\u8f7d\u8bb0\u5f55\u8868 CREATE TABLE download_record ( id INT NOT NULL PRIMARY KEY auto_increment , user_id INT , movie_id INT ) charset = 'utf8' ; \u642d\u5efa\u9879\u76ee\u76ee\u5f55 \u00b6 . \u251c\u2500\u2500 youkuClient \u2502 \u251c\u2500\u2500 conf \u2502 \u2502 \u2514\u2500\u2500 setting . py \u2502 \u251c\u2500\u2500 core \u2502 \u2502 \u251c\u2500\u2500 admin . py # -- \u7ba1\u7406\u5458\u89c6\u56fe\u76f8\u5173\u529f\u80fd\u51fd\u6570 \u2502 \u2502 \u251c\u2500\u2500 src . py # -- \u4e3b\u89c6\u56fe \u2502 \u2502 \u2514\u2500\u2500 user . py # -- \u7528\u6237\u89c6\u56fe\u76f8\u5173\u529f\u80fd\u51fd\u6570 \u2502 \u251c\u2500\u2500 lib \u2502 \u2502 \u2514\u2500\u2500 common . py # -- \u5b58\u653e\u516c\u5171\u65b9\u6cd5 \u2502 \u251c\u2500\u2500 start . py # -- \u542f\u52a8\u6587\u4ef6 \u2502 \u2514\u2500\u2500 tcpClient \u2502 \u2514\u2500\u2500 tcp_client . py # -- \u5ba2\u6237\u7aef\u8fde\u63a5 \u2514\u2500\u2500 youkuServer \u251c\u2500\u2500 conf \u2502 \u2514\u2500\u2500 setting . py \u251c\u2500\u2500 db \u2502 \u2514\u2500\u2500 models . py # -- \u6570\u636e\u5e93\u8868\u5bf9\u5e94\u7a0b\u5e8f\u4e2d\u7684\u7c7b \u251c\u2500\u2500 interface \u2502 \u251c\u2500\u2500 admin_interface . py # -- \u7ba1\u7406\u5458\u76f8\u5173\u64cd\u4f5c\u7684\u63a5\u53e3 \u2502 \u251c\u2500\u2500 common_interface . py # -- \u516c\u5171\u64cd\u4f5c\u7684\u76f8\u5173\u63a5\u53e3(\u767b\u5f55,\u6ce8\u518c) \u2502 \u2514\u2500\u2500 user_interface . py # -- \u7528\u6237\u76f8\u5173\u64cd\u4f5c\u7684\u63a5\u53e3 \u251c\u2500\u2500 lib \u2502 \u2514\u2500\u2500 common . py \u251c\u2500\u2500 start . py \u2514\u2500\u2500 tcpServer \u2514\u2500\u2500 tcp_server . py . \u251c\u2500\u2500 youkuClient \u2502 \u251c\u2500\u2500 conf \u2502 \u2502 \u2514\u2500\u2500 setting . py # -- \u914d\u7f6e\u4fe1\u606f\u76f8\u5173 \u2502 \u251c\u2500\u2500 core \u2502 \u2502 \u251c\u2500\u2500 admin . py # -- \u7ba1\u7406\u5458\u89c6\u56fe\u76f8\u5173\u529f\u80fd\u51fd\u6570 \u2502 \u2502 \u251c\u2500\u2500 src . py # -- \u4e3b\u89c6\u56fe \u2502 \u2502 \u2514\u2500\u2500 user . py # -- \u7528\u6237\u89c6\u56fe\u76f8\u5173\u529f\u80fd\u51fd\u6570 \u2502 \u251c\u2500\u2500 download_movie # -- \u5b58\u653e\u4e0b\u8f7d\u5b8c\u7684\u7535\u5f71 \u2502 \u251c\u2500\u2500 lib \u2502 \u2502 \u2514\u2500\u2500 common . py # -- \u5b58\u653e\u516c\u5171\u65b9\u6cd5 \u2502 \u251c\u2500\u2500 start . py # -- \u542f\u52a8\u6587\u4ef6 \u2502 \u251c\u2500\u2500 tcpClient # -- \u5b58\u653e\u8981\u4e0a\u4f20\u7684\u7535\u5f71 \u2502 \u2502 \u2514\u2500\u2500 tcp_client . py # -- \u5ba2\u6237\u7aef\u8fde\u63a5 \u2502 \u2514\u2500\u2500 upload_movie \u2514\u2500\u2500 youkuServer \u251c\u2500\u2500 conf \u2502 \u2514\u2500\u2500 setting . py \u251c\u2500\u2500 db \u2502 \u2514\u2500\u2500 models . py \u251c\u2500\u2500 interface \u2502 \u251c\u2500\u2500 admin_interface . py # -- \u7ba1\u7406\u5458\u76f8\u5173\u64cd\u4f5c\u7684\u63a5\u53e3 \u2502 \u251c\u2500\u2500 common_interface . py # -- \u516c\u5171\u64cd\u4f5c\u7684\u76f8\u5173\u63a5\u53e3(\u767b\u5f55,\u6ce8\u518c) \u2502 \u2514\u2500\u2500 user_interface . py # -- \u7528\u6237\u76f8\u5173\u64cd\u4f5c\u7684\u63a5\u53e3 \u251c\u2500\u2500 lib \u2502 \u2514\u2500\u2500 common . py \u251c\u2500\u2500 movie_list \u251c\u2500\u2500 orm_pool # -- \u7b80\u6613\u7248\u7684ORM\u6846\u67b6 \u2502 \u251c\u2500\u2500 db_pool . py \u2502 \u251c\u2500\u2500 mysql_conn . py \u2502 \u2514\u2500\u2500 todo_orm . py \u251c\u2500\u2500 start . py \u2514\u2500\u2500 tcpServer \u251c\u2500\u2500 tcp_server . py # -- \u670d\u52a1\u7aef\u6838\u5fc3\u4ee3\u7801 \u2514\u2500\u2500 use_data . py # -- \u5b58\u653e\u7528\u6237\u4fe1\u606f\u548c\u5168\u5c40\u9501 ORM\u6846\u67b6 > \u5b9a\u4e49\u5b57\u6bb5\u7c7b\u8868\u793a\u8868\u4e2d\u7684\u5217 > \u5b9e\u73b0\u4e0d\u7528\u5199__init__ , \u7c7b\u5b9e\u4f8b\u5316\u65f6\u53ef\u4ee5\u4f20\u4efb\u610f\u7c7b\u578b\u7684k = v , \u628a\u53c2\u6570\u653e\u5230\u5b9e\u4f8b\u5bf9\u8c61\u7684\u4f53\u5185 -- \u5b57\u5178 > \u5b9e\u73b0\u5b57\u5178\u5bf9\u8c61\u901a\u8fc7 . \u8bbf\u95ee\u5230\u5c5e\u6027 -- __getattr__ \u3001 __setattr__ > \u7528\u4e00\u4e2a\u7c7b\u8868\u793a\u6570\u636e\u5e93\u5f53\u4e2d\u7684\u4e00\u4e2a\u8868 , \u6240\u6709\u7684\u7c7b\u90fd\u5f97\u5177\u5907\u8868\u7684\u51e0\u4e2a\u5c5e\u6027 ( \u8868\u540d \u3001 \u4e3b\u952e \u3001 \u4e00\u5806\u5b57\u6bb5 ) \u4f46\u8fd9\u4e9b\u5c5e\u6027\u7684\u503c\u6bcf\u5f20\u8868\u90fd\u4e0d\u76f8\u540c . \u901a\u8fc7\u63a7\u5236\u7c7b\u7684\u521b\u5efa\u8fc7\u7a0b , \u8ba9\u7c7b\u521b\u5efa\u597d\u540e\u5c31\u6709\u8fd9\u51e0\u4e2a\u4e1c\u897f -- \u5143\u7c7b > \u4e0d\u5199sql \u7c7b\u5bf9\u5e94\u6570\u636e\u5e93\u5f53\u4e2d\u7684\u8868 , \u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u5bf9\u5e94\u8868\u4e2d\u7684\u4e00\u6761\u6570\u636e \u67e5\u8be2\u6240\u6709\u6570\u636e -- \u7c7b\u65b9\u6cd5 \u66f4\u65b0 \u3001 \u65b0\u589e -- \u5b9e\u4f8b\u7ed1\u5b9a\u65b9\u6cd5 ( \u6784\u5efasql\u8bed\u53e5 \u3001 pymysql\u63a5\u53e3\u8fd4\u56de\u7ed3\u679c ) > \u6570\u636e\u5e93\u8fde\u63a5\u6c60","title":"\u4eff\u4f18\u9177"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/15_%E4%BB%BF%E4%BC%98%E9%85%B7/#_1","text":"\u6211\u4eec\u5f97\u5f04\u6e05 cookies\u3001session\u3001token \u5230\u5e95\u662f\u4ec0\u4e48\uff1f! \u53c2\u8003\u6587\u6863: https://www.cnblogs.com/liuqingzheng/articles/8990027.html \u4f55\u4e3a\u4f1a\u8bdd ? \u4f1a\u8bdd , \u5e7f\u4e49\u7684\u542b\u4e49\u662f\u6307\u6709\u59cb\u6709\u7ec8\u7684\u4e00\u7cfb\u5217\u52a8\u4f5c / \u6d88\u606f . \u5728web\u4e2d , \u4f1a\u8bdd\u5bf9\u8c61\u7528\u6765\u5b58\u50a8\u7279\u5b9a\u7528\u6237\u4f1a\u8bdd\u6240\u9700\u7684\u5c5e\u6027\u53ca\u914d\u7f6e\u4fe1\u606f ! HTTP\u534f\u8bae\u662f\u65e0\u72b6\u6001\u534f\u8bae ? \u65e0\u72b6\u6001\u534f\u8bae\u5373\u65e0\u6cd5\u4fdd\u6301\u4f1a\u8bdd\u4e4b\u95f4\u7684\u72b6\u6001 . \u670d\u52a1\u7aef\u4e0d\u6653\u5f97\u5ba2\u6237\u7aef\u662f\u4ec0\u4e48\u72b6\u6001 . HTTP\u8bf7\u6c42\u662f\u65e0\u72b6\u6001\u7684 , \u6bcf\u6b21\u90fd\u662f\u65b0\u7684\u8bf7\u6c42 ! \u4e3e\u4e2a\u4f8b\u5b50 , \u6210\u529f\u767b\u9646\u4e00\u4e2a\u7f51\u7ad9 , \u5f53\u8bbf\u95ee\u8be5\u7f51\u7ad9\u7684\u5176\u5b83\u7f51\u9875\u65f6 , \u8be5\u767b\u9646\u72b6\u6001\u4f1a\u6d88\u5931 ! \u9700\u8981\u91cd\u65b0\u767b\u9646\u4e00\u6b21 . \u6b64\u65f6 , \u6211\u4eec\u9700\u8981\u5c06\u5bf9\u5e94\u7684\u4f1a\u8bdd\u4fe1\u606f ( eg : \u767b\u9646\u6210\u529f\u7684\u4fe1\u606f\u7b49 ) \u4fdd\u5b58\u4e0b\u6765 -- Cookie \u6216 Session ! \u4f1a\u8bdd\u4fe1\u606f\u7684\u4fdd\u5b58 : cookie \u5ba2\u6237\u7aef ; session \u670d\u52a1\u7aef ; token \u5ba2\u6237\u7aef \u6ce8\u610f . \u4e0d\u7ba1\u662fcookie\u8fd8\u662ftoken , \u53ea\u8981\u4fdd\u5b58\u5728\u5ba2\u6237\u7aef\u7684\u4fe1\u606f , \u6211\u4eec\u90fd\u7edf\u79f0\u4e3acookie\u4fe1\u606f . \u65e0cookie\u65f6\u671f -- \u9759\u6001\u7f51\u7ad9 cookie\u8ba4\u8bc1\u65f6\u671f -- \u5728\u7ebf\u8d2d\u7269\u7f51\u7ad9 \u3001 \u9700\u8981\u767b\u5f55\u7684\u7f51\u7ad9\u7b49 \u5f53\u4e00\u4e2a\u6d4f\u89c8\u5668\u8bbf\u95ee\u67d0web\u670d\u52a1\u5668\u65f6 web\u670d\u52a1\u5668\u4f1a\u5728\u54cd\u5e94\u5934\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u540d\u53ebSet - Cookie\u7684\u54cd\u5e94\u5b57\u6bb5 , \u7528\u4e8e\u5c06Cookie\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668 \u5f53\u6d4f\u89c8\u5668\u7b2c\u4e8c\u6b21\u8bbf\u95ee\u8be5web\u670d\u52a1\u5668\u65f6\u4f1a\u81ea\u52a8\u7684\u5c06\u8be5cookie\u56de\u4f20\u7ed9\u670d\u52a1\u5668 , \u6765\u5b9e\u73b0\u7528\u6237\u72b6\u6001\u8ddf\u8e2a !! \u5f0a\u7aef : \u5c3d\u7ba1\u6d4f\u89c8\u5668\u53d1\u9001\u767b\u9646\u4fe1\u606f ( pwd ) \u4f1a\u52a0\u5bc6\u53d1\u9001\u5230\u670d\u52a1\u7aef , \u8fdb\u800c\u670d\u52a1\u7aef\u8fd4\u8fd8\u7ed9\u5ba2\u6237\u7aef\u7684cookie\u4e2d\u5305\u542b\u7684\u662f\u5ba2\u6237\u7aef / \u6d4f\u89c8\u5668\u52a0\u5bc6\u7684\u5bc6\u7801 .. \u4f46cookie\u4e2d\u59cb\u7ec8\u5305\u542b\u7740pwd\u8fd9\u4e9b\u7528\u6237\u7684\u654f\u611f\u4fe1\u606f . \u4e0d\u7ba1\u662f\u7528\u6237\u9996\u6b21\u767b\u9646\u53d1\u9001\u7ed9S\u7aef\u7684\u6570\u636e\u5305 , \u8fd8\u662fC --> S\u7684cookie , \u9ed1\u5ba2\u622a\u83b7\u540e\u53ef\u4ee5\u901a\u8fc7\u649e\u5e93\u7834\u89e3 . \u4e3a\u4e86\u964d\u4f4e\u98ce\u9669 , \u6211\u4eec\u53ef\u4ee5\u5c06C --> S\u7684cookie\u4fe1\u606f\u4e2d\u4e0d\u5305\u542bpwd\u7b49\u7528\u6237\u7684\u654f\u611f\u4fe1\u606f cookie + session\u8ba4\u8bc1\u65f6\u671f \u6253\u4e2a\u6bd4\u65b9 , \u5c06\u81ea\u5df1\u6bd4\u4f5c\u670d\u52a1\u7aef , \u7ed9\u5927\u5bb6\u53d1\u4e00\u4e2a\u4f1a\u8bdd\u6807\u8bc6 ( session id ), \u8bf4\u767d\u4e86\u5c31\u662f\u4e00\u4e2a\u968f\u673a\u7684\u5b57\u4e32 \u6bcf\u4e2a\u4eba\u6536\u5230\u7684\u90fd\u4e0d\u4e00\u6837 , \u6bcf\u6b21\u5927\u5bb6\u5411\u6211\u53d1\u8d77HTTP\u8bf7\u6c42\u7684\u65f6\u5019 , \u628a\u8fd9\u4e2asession\u5b57\u4e32\u653e\u5230cookie\u4e2d\u4e00\u5e76\u634e\u8fc7\u6765 \u6211\u5728\u670d\u52a1\u7aef\u5c06\u5176\u4e0e\u5b58\u50a8\u7684session\u8fdb\u884c\u6bd4\u5bf9 , \u8fd9\u6837\u6211\u5c31\u80fd\u533a\u5206\u5f00\u8c01\u662f\u8c01\u4e86 ! \u5f0a\u7aef : 1 > \u6bcf\u4e2a\u4eba\u53ea\u9700\u8981\u4fdd\u5b58\u81ea\u5df1\u7684session id , \u800c\u670d\u52a1\u5668\u8981\u4fdd\u5b58\u6240\u6709\u4eba\u7684session id \uff01 \u968f\u7740\u8bbf\u95ee\u670d\u52a1\u7aef\u7684\u7528\u6237\u589e\u591a , S\u7aef\u5b58\u50a8\u7684session\u4e5f\u4f1a\u53d8\u591a ! 2 > \u82e5\u540c\u65f6\u670910\u4e07\u4e2a\u5e76\u53d1\u8bbf\u95eeS\u7aef , S\u7aef\u6536\u5230\u4e8610\u4e07\u4efd\u5305\u542b\u4e86session\u7684cookie , \u9700\u8981\u4e00\u4e00\u8fdb\u884c\u6bd4\u5bf9 .. 3 > \u5018\u82e5\u7528\u4e24\u4e2a\u673a\u5668\u7ec4\u6210\u4e86\u4e00\u4e2a\u96c6\u7fa4 , \u5c0fF\u901a\u8fc7\u673a\u5668A\u767b\u5f55\u4e86\u7cfb\u7edf , \u90a3session id\u4f1a\u4fdd\u5b58\u5728\u673a\u5668A\u4e0a \u5047\u8bbe\u5c0fF\u7684\u4e0b\u4e00\u6b21\u8bf7\u6c42\u88ab\u8f6c\u53d1\u5230\u673a\u5668B\u600e\u4e48\u529e ? \u673a\u5668B\u53ef\u6ca1\u6709\u5c0fF\u7684 session id\u554a . \u9650\u5236\u4e86\u96c6\u7fa4\u7684\u6c34\u5e73\u6269\u5c55 . \u89e3\u51b3\u529e\u6cd5 : session sticky \u5c31\u662f\u8ba9\u5c0fF\u7684\u8bf7\u6c42\u4e00\u76f4\u7c98\u8fde\u5728\u673a\u5668A\u4e0a , \u4f46\u662f\u8fd9\u4e5f\u4e0d\u7ba1\u7528 , \u8981\u662f\u673a\u5668A\u6302\u6389\u4e86 , \u8fd8\u5f97\u8f6c\u5230\u673a\u5668B\u53bb . session\u7684\u590d\u5236 \u628asession id\u5728\u4e24\u4e2a\u673a\u5668\u4e4b\u95f4\u642c\u6765\u642c\u53bb ! session\u7684\u96c6\u7fa4 \u5c06\u591a\u53f0\u670d\u52a1\u5668\u7684session\u96c6\u4e2d\u7ba1\u7406 , \u653e\u5230\u4e00\u5904 , \u5e76\u5bf9\u8be5session\u505a\u96c6\u7fa4 , \u907f\u514d\u5355\u70b9\u6545\u969c . Token \u670d\u52a1\u7aef\u4e3a\u4ec0\u4e48\u8981\u4fdd\u5b58\u8fd9\u53ef\u6076\u7684session\u5462 , \u53ea\u8ba9\u6bcf\u4e2a\u5ba2\u6237\u7aef\u53bb\u4fdd\u5b58\u8be5\u591a\u597d ! So , Token\u7528\u8ba1\u7b97\u6362\u53d6\u4e86\u7a7a\u95f4 ! \u5c0fF\u5df2\u7ecf\u6210\u529f\u767b\u5f55\u7cfb\u7edf , \u6211\u7ed9\u4ed6\u53d1\u4e00\u4e2a\u4ee4\u724c ( token ), \u91cc\u8fb9\u5305\u542b\u4e86\u5c0fF\u7684user id , \u5e76\u5bf9\u8be5\u6570\u636e\u505a\u4e00\u4e2a\u7b7e\u540d \u6bd4\u5982\u8bf4\u6211\u7528HMAC - SHA256\u7b97\u6cd5 , \u52a0\u4e0a\u4e00\u4e2a\u53ea\u6709\u6211\u624d\u77e5\u9053\u7684\u5bc6\u94a5 , \u5bf9\u6570\u636e\u505a\u4e00\u4e2a\u7b7e\u540d \u628a \u8fd9\u4e2a\u7b7e\u540d\u548c\u6570\u636e\u4e00\u8d77\u4f5c\u4e3atoken ` \u5373\u7b7e\u540d + \u6570\u636e = token ` \u53d1\u9001\u7ed9C\u7aef , \u7531\u4e8e\u5bc6\u94a5\u522b\u4eba\u4e0d\u77e5\u9053 , \u5c31\u65e0\u6cd5\u4f2a\u9020token\u4e86 !! \u8fd9\u4e2atoken\u6211\u4e0d\u4fdd\u5b58 , \u5f53\u5c0fF\u628a\u8fd9\u4e2atoken\u7ed9\u6211\u53d1\u8fc7\u6765\u7684\u65f6\u5019 , \u6211\u518d\u7528\u540c\u6837\u7684HMAC - SHA256\u7b97\u6cd5\u548c\u540c\u6837\u7684\u5bc6\u94a5 \u5bf9\u6570\u636e\u518d\u8ba1\u7b97\u4e00\u6b21\u7b7e\u540d\u548ctoken\u4e2d\u7684\u7b7e\u540d\u505a\u4e2a\u6bd4\u8f83 \u82e5\u76f8\u540c , \u6211\u5c31\u77e5\u9053\u5c0fF\u5df2\u7ecf\u767b\u5f55\u8fc7\u4e86 , \u5e76\u4e14\u53ef\u4ee5\u76f4\u63a5\u53d6\u5230\u5c0fF\u7684user id ; \u82e5\u4e0d\u76f8\u540c , \u6570\u636e\u90e8\u5206\u80af\u5b9a\u88ab\u4eba\u7be1\u6539\u8fc7 , \u6211\u5c31\u544a\u8bc9\u53d1\u9001\u8005 : \u5bf9\u4e0d\u8d77 , \u6ca1\u6709\u8ba4\u8bc1 ! Ps : Token\u79fb\u52a8\u7aef\u4e5f\u53ef\u4ee5\u7528 !","title":"\u50a8\u5907\u77e5\u8bc6"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/15_%E4%BB%BF%E4%BC%98%E9%85%B7/#_2","text":"\u8be5\u9879\u76ee\u6db5\u76d6\u5185\u5bb9: \u7ebf\u7a0b\u6c60, \u9501\u673a\u5236, session\u9a8c\u8bc1\u673a\u5236, \u7b80\u6613\u7248orm, \u5927\u6587\u4ef6md5\u6821\u9a8c, \u6570\u636e\u5e93\u64cd\u4f5c","title":"\u4eff\u4f18\u9177\u9879\u76ee"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/15_%E4%BB%BF%E4%BC%98%E9%85%B7/#_3","text":"Ps: \u5077\u4e2a\u61d2\u5427,\u4e0d\u60f3\u753b\u56fe!!\u76f4\u63a5\u62cd\u7167\u5b8c\u4e8b. \u968f\u7f18\u753b\u6cd5.","title":"\u7cfb\u7edf\u67b6\u6784"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/15_%E4%BB%BF%E4%BC%98%E9%85%B7/#_4","text":"\u7528sql\u8bed\u53e5 or \u7528\u5de5\u5177\u521b\u5efa\u8868 Ps: \u52a0` `\u662f\u4e3a\u4e86\u8868\u660e\u5b83\u4e0d\u662f\u5173\u952e\u5b57,\u82e5\u4e0d\u52a0,\u7f8e\u5316\u540e,\u5b83\u5c31\u53d8\u6210\u5927\u5199\u7684\u4e86! \u7528\u5de5\u5177\u521b\u5efa\u7c7b\u578b\u4e3atimestamp\u7684\u5b57\u6bb5\u65f6,\u82e5\u52fe\u9009\"\u6839\u636e\u5f53\u524d\u65f6\u95f4\u66f4\u65b0\",\u6dfb\u52a0\u548c\u4fee\u6539\u6570\u636e\u65f6,\u90fd\u4f1a\u66f4\u65b0\u65f6\u95f4! -- \u5173\u6389\u5916\u952e\u7ea6\u675f,\u8868\u660e\u4e0d\u7528\u505a\u5916\u952e\u68c0\u67e5,\u4e24\u8868\u6709\u5916\u952e\u5173\u8054,\u4e5f\u80fd\u5220\u9664! set foreign_key_checks = 0 ; -- \u82e5\u8868\u5df2\u5b58\u5728,\u5220\u9664. drop table if exists user_info , movie , notice , download_record ; -- \u7528\u6237\u8868 CREATE TABLE user_info ( id INT PRIMARY KEY NOT NULL auto_increment , ` name ` VARCHAR ( 32 ), ` password ` VARCHAR ( 64 ), is_vip INT , -- \u662f\u5426\u662f\u4f1a\u5458 locked INT , -- \u662f\u5426\u9501\u5b9a user_type VARCHAR ( 32 ) -- \u7ba1\u7406\u5458\u8fd8\u662f\u666e\u901a\u7528\u6237 ) ENGINE = INNODB , charset = 'utf8' ; -- \u89c6\u9891\u8868 CREATE TABLE movie ( id INT PRIMARY KEY NOT NULL auto_increment , ` name ` VARCHAR ( 32 ), ` path ` VARCHAR ( 255 ), is_free INT DEFAULT 0 , -- \u662f\u5426\u6536\u8d39 is_delete INT DEFAULT 0 , create_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP , -- \u81ea\u52a8\u6dfb\u52a0\u5f53\u524d\u65f6\u95f4\u6233\u4e3a\u4e0a\u4f20\u65f6\u95f4. user_id INT , -- \u8c01\u4e0a\u4f20\u7684\u89c6\u9891 file_md5 VARCHAR ( 64 ) ) charset = 'utf8' ; -- \u516c\u544a\u8868 CREATE TABLE notice ( id INT PRIMARY KEY NOT NULL auto_increment , ` name ` VARCHAR ( 64 ), content VARCHAR ( 255 ), create_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP , user_id INT ) charset = 'utf8' ; -- \u4e0b\u8f7d\u8bb0\u5f55\u8868 CREATE TABLE download_record ( id INT NOT NULL PRIMARY KEY auto_increment , user_id INT , movie_id INT ) charset = 'utf8' ;","title":"\u521b\u5efa\u8868"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/15_%E4%BB%BF%E4%BC%98%E9%85%B7/#_5","text":". \u251c\u2500\u2500 youkuClient \u2502 \u251c\u2500\u2500 conf \u2502 \u2502 \u2514\u2500\u2500 setting . py \u2502 \u251c\u2500\u2500 core \u2502 \u2502 \u251c\u2500\u2500 admin . py # -- \u7ba1\u7406\u5458\u89c6\u56fe\u76f8\u5173\u529f\u80fd\u51fd\u6570 \u2502 \u2502 \u251c\u2500\u2500 src . py # -- \u4e3b\u89c6\u56fe \u2502 \u2502 \u2514\u2500\u2500 user . py # -- \u7528\u6237\u89c6\u56fe\u76f8\u5173\u529f\u80fd\u51fd\u6570 \u2502 \u251c\u2500\u2500 lib \u2502 \u2502 \u2514\u2500\u2500 common . py # -- \u5b58\u653e\u516c\u5171\u65b9\u6cd5 \u2502 \u251c\u2500\u2500 start . py # -- \u542f\u52a8\u6587\u4ef6 \u2502 \u2514\u2500\u2500 tcpClient \u2502 \u2514\u2500\u2500 tcp_client . py # -- \u5ba2\u6237\u7aef\u8fde\u63a5 \u2514\u2500\u2500 youkuServer \u251c\u2500\u2500 conf \u2502 \u2514\u2500\u2500 setting . py \u251c\u2500\u2500 db \u2502 \u2514\u2500\u2500 models . py # -- \u6570\u636e\u5e93\u8868\u5bf9\u5e94\u7a0b\u5e8f\u4e2d\u7684\u7c7b \u251c\u2500\u2500 interface \u2502 \u251c\u2500\u2500 admin_interface . py # -- \u7ba1\u7406\u5458\u76f8\u5173\u64cd\u4f5c\u7684\u63a5\u53e3 \u2502 \u251c\u2500\u2500 common_interface . py # -- \u516c\u5171\u64cd\u4f5c\u7684\u76f8\u5173\u63a5\u53e3(\u767b\u5f55,\u6ce8\u518c) \u2502 \u2514\u2500\u2500 user_interface . py # -- \u7528\u6237\u76f8\u5173\u64cd\u4f5c\u7684\u63a5\u53e3 \u251c\u2500\u2500 lib \u2502 \u2514\u2500\u2500 common . py \u251c\u2500\u2500 start . py \u2514\u2500\u2500 tcpServer \u2514\u2500\u2500 tcp_server . py . \u251c\u2500\u2500 youkuClient \u2502 \u251c\u2500\u2500 conf \u2502 \u2502 \u2514\u2500\u2500 setting . py # -- \u914d\u7f6e\u4fe1\u606f\u76f8\u5173 \u2502 \u251c\u2500\u2500 core \u2502 \u2502 \u251c\u2500\u2500 admin . py # -- \u7ba1\u7406\u5458\u89c6\u56fe\u76f8\u5173\u529f\u80fd\u51fd\u6570 \u2502 \u2502 \u251c\u2500\u2500 src . py # -- \u4e3b\u89c6\u56fe \u2502 \u2502 \u2514\u2500\u2500 user . py # -- \u7528\u6237\u89c6\u56fe\u76f8\u5173\u529f\u80fd\u51fd\u6570 \u2502 \u251c\u2500\u2500 download_movie # -- \u5b58\u653e\u4e0b\u8f7d\u5b8c\u7684\u7535\u5f71 \u2502 \u251c\u2500\u2500 lib \u2502 \u2502 \u2514\u2500\u2500 common . py # -- \u5b58\u653e\u516c\u5171\u65b9\u6cd5 \u2502 \u251c\u2500\u2500 start . py # -- \u542f\u52a8\u6587\u4ef6 \u2502 \u251c\u2500\u2500 tcpClient # -- \u5b58\u653e\u8981\u4e0a\u4f20\u7684\u7535\u5f71 \u2502 \u2502 \u2514\u2500\u2500 tcp_client . py # -- \u5ba2\u6237\u7aef\u8fde\u63a5 \u2502 \u2514\u2500\u2500 upload_movie \u2514\u2500\u2500 youkuServer \u251c\u2500\u2500 conf \u2502 \u2514\u2500\u2500 setting . py \u251c\u2500\u2500 db \u2502 \u2514\u2500\u2500 models . py \u251c\u2500\u2500 interface \u2502 \u251c\u2500\u2500 admin_interface . py # -- \u7ba1\u7406\u5458\u76f8\u5173\u64cd\u4f5c\u7684\u63a5\u53e3 \u2502 \u251c\u2500\u2500 common_interface . py # -- \u516c\u5171\u64cd\u4f5c\u7684\u76f8\u5173\u63a5\u53e3(\u767b\u5f55,\u6ce8\u518c) \u2502 \u2514\u2500\u2500 user_interface . py # -- \u7528\u6237\u76f8\u5173\u64cd\u4f5c\u7684\u63a5\u53e3 \u251c\u2500\u2500 lib \u2502 \u2514\u2500\u2500 common . py \u251c\u2500\u2500 movie_list \u251c\u2500\u2500 orm_pool # -- \u7b80\u6613\u7248\u7684ORM\u6846\u67b6 \u2502 \u251c\u2500\u2500 db_pool . py \u2502 \u251c\u2500\u2500 mysql_conn . py \u2502 \u2514\u2500\u2500 todo_orm . py \u251c\u2500\u2500 start . py \u2514\u2500\u2500 tcpServer \u251c\u2500\u2500 tcp_server . py # -- \u670d\u52a1\u7aef\u6838\u5fc3\u4ee3\u7801 \u2514\u2500\u2500 use_data . py # -- \u5b58\u653e\u7528\u6237\u4fe1\u606f\u548c\u5168\u5c40\u9501 ORM\u6846\u67b6 > \u5b9a\u4e49\u5b57\u6bb5\u7c7b\u8868\u793a\u8868\u4e2d\u7684\u5217 > \u5b9e\u73b0\u4e0d\u7528\u5199__init__ , \u7c7b\u5b9e\u4f8b\u5316\u65f6\u53ef\u4ee5\u4f20\u4efb\u610f\u7c7b\u578b\u7684k = v , \u628a\u53c2\u6570\u653e\u5230\u5b9e\u4f8b\u5bf9\u8c61\u7684\u4f53\u5185 -- \u5b57\u5178 > \u5b9e\u73b0\u5b57\u5178\u5bf9\u8c61\u901a\u8fc7 . \u8bbf\u95ee\u5230\u5c5e\u6027 -- __getattr__ \u3001 __setattr__ > \u7528\u4e00\u4e2a\u7c7b\u8868\u793a\u6570\u636e\u5e93\u5f53\u4e2d\u7684\u4e00\u4e2a\u8868 , \u6240\u6709\u7684\u7c7b\u90fd\u5f97\u5177\u5907\u8868\u7684\u51e0\u4e2a\u5c5e\u6027 ( \u8868\u540d \u3001 \u4e3b\u952e \u3001 \u4e00\u5806\u5b57\u6bb5 ) \u4f46\u8fd9\u4e9b\u5c5e\u6027\u7684\u503c\u6bcf\u5f20\u8868\u90fd\u4e0d\u76f8\u540c . \u901a\u8fc7\u63a7\u5236\u7c7b\u7684\u521b\u5efa\u8fc7\u7a0b , \u8ba9\u7c7b\u521b\u5efa\u597d\u540e\u5c31\u6709\u8fd9\u51e0\u4e2a\u4e1c\u897f -- \u5143\u7c7b > \u4e0d\u5199sql \u7c7b\u5bf9\u5e94\u6570\u636e\u5e93\u5f53\u4e2d\u7684\u8868 , \u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u5bf9\u5e94\u8868\u4e2d\u7684\u4e00\u6761\u6570\u636e \u67e5\u8be2\u6240\u6709\u6570\u636e -- \u7c7b\u65b9\u6cd5 \u66f4\u65b0 \u3001 \u65b0\u589e -- \u5b9e\u4f8b\u7ed1\u5b9a\u65b9\u6cd5 ( \u6784\u5efasql\u8bed\u53e5 \u3001 pymysql\u63a5\u53e3\u8fd4\u56de\u7ed3\u679c ) > \u6570\u636e\u5e93\u8fde\u63a5\u6c60","title":"\u642d\u5efa\u9879\u76ee\u76ee\u5f55"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/16_%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99/","text":"\u811a\u672c\u7684\u7f16\u5199 \u00b6 \u4e3e\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50 \u80cc\u666f: \u67d0\u5e73\u53f0\u9884\u7ea6\u8305\u53f0\u7a0b\u5e8f,5000\u4e2a\u8d26\u53f7 \u6d41\u7a0b: 1.\u5faa\u73af5000\u4e2a\u8d26\u53f7 2.\u83b7\u53d6\u6bcf\u4e2a\u624b\u673a\u53f7 3.\u6ed1\u52a8\u9a8c\u8bc1 4.\u53d1\u9001\u77ed\u4fe1 5.\u767b\u9646 6.\u83b7\u53d6\u5b9e\u540d\u4fe1\u606f&\u8d44\u683c 7.\u9884\u7ea6,\u9884\u7ea6\u7801 \u6ce8\u610f\u4e8b\u9879 : 1 > \u82e5\u8981\u5199\u811a\u672c , \u7b2c\u4e00\u6b65\u5199 . def run (): pass if __name__ == \"__main__\" : run () 2 > \u6253\u5f00\u6587\u4ef6\u5355\u72ec\u5199\u4e2a\u51fd\u6570 , \u8fd4\u56de\u751f\u6210\u5668\u5bf9\u8c61 3 > 5000 \u4e2a\u8d26\u53f7\u4f7f\u7528 10 \u4e2a\u591a\u7ebf\u7a0b , 10 \u4e2a10\u4e2a\u7684\u5e76\u53d1\u6267\u884c\u4efb\u52a1 4 > \u7279\u522b\u6ce8\u610f , \u82e5\u4f7f\u7528\u591a\u7ebf\u7a0b\u7684\u8bdd , \u5728\u6267\u884c\u7684\u4efb\u52a1\u4e2d\u5207\u8bb0\u52a0\u4e0a try .. except .. \u82e5\u4e0d\u52a0 , \u5728\u7ebf\u7a0b\u6c60\u4e2d\u9047\u5230\u9519\u8bef , \u5b83\u5c31\u76f4\u63a5\u5ffd\u7565\u4e86 ! \u7a0b\u5e8f\u4e5f\u4e0d\u4f1a\u62a5\u4efb\u4f55\u9519 . 5 > \u5728task\u51fd\u6570\u4e2d\u4f9d\u6b21\u6267\u884c\u4e1a\u52a1\u7684 \u6ed1\u52a8\u9a8c\u8bc1 \u3001 \u53d1\u9001\u77ed\u4fe1 \u3001 \u767b\u9646 \u82e5\u67d0\u4e00\u6b65\u5931\u8d25\u4e86 , \u5c31\u4e0d\u5f80\u4e0b\u9762\u8d70\u4e86 , \u4f46\u9700\u8981\u8bb0\u5f55\u4e00\u6761\u65e5\u5fd7 !! 6 > < \u82e5\u6d89\u53ca\u5230\u7f51\u7edcIO > , \u8ba9\u5b83\u91cd\u8bd5\u51e0\u6b21 , \u90fd\u51fa\u9519\u4e86 , \u5c31\u8fd4\u56deFalse \u4ee3\u7801\u6846\u67b6\u5982\u4e0b: from concurrent.futures import ThreadPoolExecutor def geetest (): \"\"\"\u5b9e\u73b0\u6ed1\u52a8\u9a8c\u8bc1\"\"\" try : # ... \u5199\u5177\u4f53\u7684\u4e1a\u52a1\u4ee3\u7801 return True , 123 # \u6210\u529f\u540e\u8fd4\u56de True\u548c\u60f3\u8981\u7684\u7ed3\u679c except Exception as e : return False , str ( e ) # \u51fa\u9519\u4e86\u8fd4\u56de False\u548c\u9519\u8bef\u7684\u4fe1\u606f def send_sms (): \"\"\"\u53d1\u9001\u77ed\u4fe1 <\u82e5\u6d89\u53ca\u5230\u7f51\u7edcIO>,\u8ba9\u5b83\u91cd\u8bd5\u51e0\u6b21,\u90fd\u51fa\u9519\u4e86,\u5c31\u8fd4\u56deFalse\"\"\" for i in range ( 5 ): try : # \u53d1\u9001\u77ed\u4fe1 return True , 123 except Exception as e : print ( str ( e )) return False , \"\u77ed\u4fe1\u53d1\u9001\u5f02\u5e38\u4e86\" def login (): \"\"\"\u767b\u9646 \u82e5\u4f60\u4fdd\u8bc1\u7a0b\u5e8f\u6ca1\u95ee\u9898,\u5c31\u662f\u56e0\u4e3a\u7f51\u7edc\u7684\u539f\u56e0,\u90a3\u5c31\u6b7b\u5faa\u73af,\u76f4\u5230\u6210\u529f\"\"\" while True : try : return True , 123 except Exception as e : print ( str ( e )) def task ( mobile , pwd ): try : # 1.\u6ed1\u52a8\u9a8c\u8bc1 2.\u53d1\u9001\u77ed\u4fe1 3.\u767b\u5f55 func_list = [ geetest , send_sms , login ] for func in func_list : status , data = func () if not status : # ... \u8bb0\u5f55\u9519\u8bef\u65e5\u5fd7 eg:\"mobile+pwd+data_or_error + \u6ed1\u52a8\u9a8c\u8bc1\" # \u8868\u660e\u8be5\u6b65\u9aa4\u62a5\u9519\u4e86,return\u4e0d\u7ee7\u7eed\u5f80\u4e0b\u8d70,\u4f46\u9700\u8981\u8bb0\u5f55\u9519\u8bef\u8bb0\u5f55 return except Exception as e : print ( \"\u5f02\u5e38\" , e ) # \u8bb0\u5f55\u4e0b\u6765 def read_file (): \"\"\"\u8bfb\u53d6\u6587\u4ef6\"\"\" # \u5047\u8bbe\u6587\u4ef6\u4e2d,\u6bcf\u4e00\u884c\u662f \u624b\u673a\u53f7,\u5bc6\u7801 with open ( 'account.txt' , mode = 'r' , encoding = 'utf-8' ) as f : for line in f : line = line . strip () mobile , pwd = line . split ( ',' ) # \u5e76\u4e0d\u4f1a\u5c06\u5faa\u73af\u7ed3\u679c\u653e\u5230\u5217\u8868\u4e2d\u8fd4\u56de,\u800c\u662f\u8fd4\u56de\u4e00\u4e2a\u751f\u6210\u5668 yield mobile , pwd def run (): pool = ThreadPoolExecutor ( 10 ) # \u7ebf\u7a0b\u6c60\u4e2d\u7ef4\u62a410\u4e2a\u7ebf\u7a0b gen = read_file () for mobile , pwd in gen : pool . submit ( task , mobile , pwd ) pool . shutdown () # \u4e3b\u7ebf\u7a0b\u7b49\u5f85 print ( \"--5000\u4e2a\u4efb\u52a1\u5168\u90e8\u6267\u884c\u5b8c\u6bd5--\" ) if __name__ == '__main__' : run ()","title":"\u811a\u672c\u7f16\u5199"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/16_%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99/#_1","text":"\u4e3e\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50 \u80cc\u666f: \u67d0\u5e73\u53f0\u9884\u7ea6\u8305\u53f0\u7a0b\u5e8f,5000\u4e2a\u8d26\u53f7 \u6d41\u7a0b: 1.\u5faa\u73af5000\u4e2a\u8d26\u53f7 2.\u83b7\u53d6\u6bcf\u4e2a\u624b\u673a\u53f7 3.\u6ed1\u52a8\u9a8c\u8bc1 4.\u53d1\u9001\u77ed\u4fe1 5.\u767b\u9646 6.\u83b7\u53d6\u5b9e\u540d\u4fe1\u606f&\u8d44\u683c 7.\u9884\u7ea6,\u9884\u7ea6\u7801 \u6ce8\u610f\u4e8b\u9879 : 1 > \u82e5\u8981\u5199\u811a\u672c , \u7b2c\u4e00\u6b65\u5199 . def run (): pass if __name__ == \"__main__\" : run () 2 > \u6253\u5f00\u6587\u4ef6\u5355\u72ec\u5199\u4e2a\u51fd\u6570 , \u8fd4\u56de\u751f\u6210\u5668\u5bf9\u8c61 3 > 5000 \u4e2a\u8d26\u53f7\u4f7f\u7528 10 \u4e2a\u591a\u7ebf\u7a0b , 10 \u4e2a10\u4e2a\u7684\u5e76\u53d1\u6267\u884c\u4efb\u52a1 4 > \u7279\u522b\u6ce8\u610f , \u82e5\u4f7f\u7528\u591a\u7ebf\u7a0b\u7684\u8bdd , \u5728\u6267\u884c\u7684\u4efb\u52a1\u4e2d\u5207\u8bb0\u52a0\u4e0a try .. except .. \u82e5\u4e0d\u52a0 , \u5728\u7ebf\u7a0b\u6c60\u4e2d\u9047\u5230\u9519\u8bef , \u5b83\u5c31\u76f4\u63a5\u5ffd\u7565\u4e86 ! \u7a0b\u5e8f\u4e5f\u4e0d\u4f1a\u62a5\u4efb\u4f55\u9519 . 5 > \u5728task\u51fd\u6570\u4e2d\u4f9d\u6b21\u6267\u884c\u4e1a\u52a1\u7684 \u6ed1\u52a8\u9a8c\u8bc1 \u3001 \u53d1\u9001\u77ed\u4fe1 \u3001 \u767b\u9646 \u82e5\u67d0\u4e00\u6b65\u5931\u8d25\u4e86 , \u5c31\u4e0d\u5f80\u4e0b\u9762\u8d70\u4e86 , \u4f46\u9700\u8981\u8bb0\u5f55\u4e00\u6761\u65e5\u5fd7 !! 6 > < \u82e5\u6d89\u53ca\u5230\u7f51\u7edcIO > , \u8ba9\u5b83\u91cd\u8bd5\u51e0\u6b21 , \u90fd\u51fa\u9519\u4e86 , \u5c31\u8fd4\u56deFalse \u4ee3\u7801\u6846\u67b6\u5982\u4e0b: from concurrent.futures import ThreadPoolExecutor def geetest (): \"\"\"\u5b9e\u73b0\u6ed1\u52a8\u9a8c\u8bc1\"\"\" try : # ... \u5199\u5177\u4f53\u7684\u4e1a\u52a1\u4ee3\u7801 return True , 123 # \u6210\u529f\u540e\u8fd4\u56de True\u548c\u60f3\u8981\u7684\u7ed3\u679c except Exception as e : return False , str ( e ) # \u51fa\u9519\u4e86\u8fd4\u56de False\u548c\u9519\u8bef\u7684\u4fe1\u606f def send_sms (): \"\"\"\u53d1\u9001\u77ed\u4fe1 <\u82e5\u6d89\u53ca\u5230\u7f51\u7edcIO>,\u8ba9\u5b83\u91cd\u8bd5\u51e0\u6b21,\u90fd\u51fa\u9519\u4e86,\u5c31\u8fd4\u56deFalse\"\"\" for i in range ( 5 ): try : # \u53d1\u9001\u77ed\u4fe1 return True , 123 except Exception as e : print ( str ( e )) return False , \"\u77ed\u4fe1\u53d1\u9001\u5f02\u5e38\u4e86\" def login (): \"\"\"\u767b\u9646 \u82e5\u4f60\u4fdd\u8bc1\u7a0b\u5e8f\u6ca1\u95ee\u9898,\u5c31\u662f\u56e0\u4e3a\u7f51\u7edc\u7684\u539f\u56e0,\u90a3\u5c31\u6b7b\u5faa\u73af,\u76f4\u5230\u6210\u529f\"\"\" while True : try : return True , 123 except Exception as e : print ( str ( e )) def task ( mobile , pwd ): try : # 1.\u6ed1\u52a8\u9a8c\u8bc1 2.\u53d1\u9001\u77ed\u4fe1 3.\u767b\u5f55 func_list = [ geetest , send_sms , login ] for func in func_list : status , data = func () if not status : # ... \u8bb0\u5f55\u9519\u8bef\u65e5\u5fd7 eg:\"mobile+pwd+data_or_error + \u6ed1\u52a8\u9a8c\u8bc1\" # \u8868\u660e\u8be5\u6b65\u9aa4\u62a5\u9519\u4e86,return\u4e0d\u7ee7\u7eed\u5f80\u4e0b\u8d70,\u4f46\u9700\u8981\u8bb0\u5f55\u9519\u8bef\u8bb0\u5f55 return except Exception as e : print ( \"\u5f02\u5e38\" , e ) # \u8bb0\u5f55\u4e0b\u6765 def read_file (): \"\"\"\u8bfb\u53d6\u6587\u4ef6\"\"\" # \u5047\u8bbe\u6587\u4ef6\u4e2d,\u6bcf\u4e00\u884c\u662f \u624b\u673a\u53f7,\u5bc6\u7801 with open ( 'account.txt' , mode = 'r' , encoding = 'utf-8' ) as f : for line in f : line = line . strip () mobile , pwd = line . split ( ',' ) # \u5e76\u4e0d\u4f1a\u5c06\u5faa\u73af\u7ed3\u679c\u653e\u5230\u5217\u8868\u4e2d\u8fd4\u56de,\u800c\u662f\u8fd4\u56de\u4e00\u4e2a\u751f\u6210\u5668 yield mobile , pwd def run (): pool = ThreadPoolExecutor ( 10 ) # \u7ebf\u7a0b\u6c60\u4e2d\u7ef4\u62a410\u4e2a\u7ebf\u7a0b gen = read_file () for mobile , pwd in gen : pool . submit ( task , mobile , pwd ) pool . shutdown () # \u4e3b\u7ebf\u7a0b\u7b49\u5f85 print ( \"--5000\u4e2a\u4efb\u52a1\u5168\u90e8\u6267\u884c\u5b8c\u6bd5--\" ) if __name__ == '__main__' : run ()","title":"\u811a\u672c\u7684\u7f16\u5199"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/1_TCP%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/","text":"\u53c2\u8003\u6587\u6863: https://www.cnblogs.com/linhaifeng/articles/6129246.html socket\u5c42 \u00b6 Socket\u662f\u5e94\u7528\u5c42\u4e0eTCP/IP\u534f\u8bae\u65cf\u901a\u4fe1\u7684\u4e2d\u95f4\u8f6f\u4ef6\u62bd\u8c61\u5c42, \u5b83\u662f\u4e00\u7ec4\u63a5\u53e3. \u7b80\u5355\u4ecb\u7ecd \u00b6 socket\u5c31\u662f\u4e00\u4e2a\u5957\u63a5\u5b57\u8f6f\u4ef6\u7a0b\u5e8f. \u662f\u5bf9\u4f20\u8f93\u5c42\u53ca\u4ee5\u4e0b\u7684\u5c01\u88c5. \u7f51\u7edc\u7f16\u7a0b,\u7f51\u7edc\u5305\u542b\u4e24\u65b9\u9762\u7269\u7406\u8fde\u63a5\u4ecb\u8d28\u548c\u534f\u8bae..\u6211\u4eec\u53ea\u9700\u5173\u6ce8\u534f\u8bae\u5373\u53ef.. \u6211\u4eec\u65e0\u9700\u6df1\u5165\u7406\u89e3tcp/udp\u534f\u8bae, \u5957\u63a5\u5b57\u4f4d\u4e8e\u5e94\u7528\u5c42\u548c\u4f20\u8f93\u5c42\u4e4b\u95f4,\u5c06\u4f20\u8f93\u5c42\u4ee5\u4e0b\u7684\u534f\u8bae\u90fd\u5c01\u88c5\u6210\u4e86\u63a5\u53e3!!! \u6211\u4eec\u53ea\u9700\u8981\u9075\u5faasocket\u7684\u89c4\u5b9a\u53bb\u7f16\u7a0b, \u5199\u51fa\u7684\u7a0b\u5e8f\u81ea\u7136\u5c31\u662f\u9075\u5faatcp/udp\u6807\u51c6\u7684! \u4e5f\u5c31\u662f\u8bf4,\u5b83\u7ed9\u5e94\u7528\u5c42\u5e94\u7528\u7a0b\u5e8f\u7684\u5f00\u53d1\u63d0\u4f9b\u4e86\u4f20\u8f93\u5c42\u53ca\u4ee5\u4e0b\u7684\u4e00\u4e2a\u4e2a\u63a5\u53e3.. [ \u626b\u76f2\u7bc7 ] -- \u4e86\u89e3\u5373\u53ef \u4e00\u5f00\u59cb , \u5957\u63a5\u5b57\u88ab\u8bbe\u8ba1\u7528\u5728\u540c\u4e00\u53f0\u4e3b\u673a\u4e0a\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u7684\u901a\u8baf . \u8fd9\u4e5f\u88ab\u79f0\u8fdb\u7a0b\u95f4\u901a\u8baf , \u6216IPC . \u5957\u63a5\u5b57\u6709\u4e24\u79cd ( \u6216\u8005\u79f0\u4e3a\u6709\u4e24\u4e2a\u79cd\u65cf ), \u5206\u522b\u662f\u57fa\u4e8e\u6587\u4ef6\u578b\u7684\u548c\u57fa\u4e8e\u7f51\u7edc\u578b\u7684 . \u25b3 \u57fa\u4e8e\u6587\u4ef6\u7c7b\u578b\u7684\u5957\u63a5\u5b57\u5bb6\u65cf \u540d\u5b57 : AF_UNIX \u4e24\u4e2a\u5957\u63a5\u5b57\u8fdb\u7a0b\u8fd0\u884c\u5728\u540c\u4e00\u673a\u5668 \uff0c \u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee\u540c\u4e00\u4e2a\u6587\u4ef6\u7cfb\u7edf\u95f4\u63a5\u5b8c\u6210\u901a\u4fe1 \u25b3 \u57fa\u4e8e\u7f51\u7edc\u7c7b\u578b\u7684\u5957\u63a5\u5b57\u5bb6\u65cf \u540d\u5b57 : AF_INET python\u652f\u6301\u5f88\u591a\u79cd\u5730\u5740\u5bb6\u65cf , \u7531\u4e8e\u6211\u4eec\u53ea\u5173\u5fc3\u7f51\u7edc\u7f16\u7a0b , \u6240\u4ee5\u5927\u90e8\u5206\u65f6\u5019\u6211\u4e48\u53ea\u4f7f\u7528AF_INET ! \u5de5\u4f5c\u6d41\u7a0b \u00b6 \u4ee5\u4e0b\u662f\u5957\u63a5\u5b57\u5b9e\u73b0\u7684TCP\u534f\u8bae\u7684\u6d41\u7a0b! \"\u2605 \u670d\u52a1\u7aef\u5957\u63a5\u5b57\u51fd\u6570\" socket () -- \u8fd4\u56de\u5957\u63a5\u5b57\u5bf9\u8c61 bind () -- S\u7aef\u7ed1\u5b9aIP\u548c\u7aef\u53e3 listen () -- \u76d1\u542cC\u7aef\u7684\u8fde\u63a5\u8bf7\u6c42 accept () -- \u963b\u585e\u7b49\u5f85C\u7aef\u7684\u8fde\u63a5\u8bf7\u6c42 , \u63a5\u6536\u540e\u4e09\u6b21\u63e1\u624b\u5efa\u7acb\u6210\u529f \"\u2605 \u5ba2\u6237\u7aef\u5957\u63a5\u5b57\u51fd\u6570\" socket () -- \u8fd4\u56de\u5957\u63a5\u5b57\u5bf9\u8c61 connect () -- C\u7aef\u53d1\u9001\u8fde\u63a5\u8bf7\u6c42 \"\u2605 \u901a\u4fe1\u5faa\u73af\" read () write () server\u5fc5\u987b\u9075\u5faa: 1> \u7a33\u5b9a\u8fd0\u884c, \u5bf9\u5916\u4e00\u81f4\u63d0\u4f9b\u670d\u52a1! 2> \u670d\u52a1\u5fc5\u987b\u7ed1\u5b9a\u56fa\u5b9a\u7684IP\u548c\u7aef\u53e3! Ps: url\u662f\u5728ip\u548cport\u4e4b\u4e0a\u6807\u8bc6\u552f\u4e00\u7684\u8d44\u6e90\u7684. \u7b80\u5355\u7684socket\u7a0b\u5e8f \u00b6 \u5148\u542f\u52a8\u670d\u52a1\u7aef,\u518d\u542f\u52a8\u5ba2\u6237\u7aef \u4e09\u62a5\u6587\u8fde\u63a5\u5efa\u7acb \u00b6 \u5ba2\u6237\u7aef\u7684connect\u5bf9\u5e94\u670d\u52a1\u7aef\u7684accept !!! \u2606 \u6ce8\u610f\u54e6! S\u7aef\u6709\u4e24\u79cd\u5957\u63a5\u5b57\u5bf9\u8c61.phone\u548cconn. phone\u8c03\u7528bind\u3001listen\u4e3aaccept\u505a\u51c6\u5907,\u662f\u7528\u4e8e\u5efa\u7acbTCP\u8fde\u63a5\u7684! conn\u662f\u5efa\u7acb\u8fde\u63a5\u7684\u6210\u679c.\u7528\u4e8e\u4f20\u8f93\u6570\u636e\u7684! C\u7aef\u53ea\u6709\u4e00\u79cd\u5957\u63a5\u5b57\u5bf9\u8c61.phone. Q: \u534a\u8fde\u63a5\u6c60backlog \u9650\u5236\u7684\u662f<\u540c\u4e00\u65f6\u523b>\u7684\u8bf7\u6c42\u6570!\u5982\u4f55\u7406\u89e3\uff1f A: \u670d\u52a1\u7aef\u53ef\u4ee5\u670d\u52a1\u4e8e\u591a\u4e2a\u5ba2\u6237\u7aef. C\u7aef\u5411S\u7aef\u53d1\u9001\u7684\u8fde\u63a5\u8bf7\u6c42,\u8981\u5148\u4ece\u534a\u8fde\u63a5\u6c60\u91cc\u8d70\u4e00\u906d,\u5efa\u7acb\u597dTCP\u8fde\u63a5\u540e,\u8be5\u8fde\u63a5\u4f1a\u8fdb\u5165\u5168\u8fde\u63a5\u6c60. (\u8be5\u8fc7\u7a0b\u7279\u522b\u5feb.) CPU\u4f1a\u4ee5\u65f6\u95f4\u7247\u7684\u5f62\u5f0f\u5728\u5168\u8fde\u63a5\u6c60\u91cc\u7684\u4efb\u52a1/\u8fde\u63a5\u4e4b\u95f4\u6765\u56de\u5207\u6362.. \u5373\u670d\u52a1\u7aef\u201c\u5e76\u53d1\u201d\u7684\u670d\u52a1\u8fd9\u4e9b\u5df2\u7ecf\u5efa\u7acb\u597d\u8fde\u63a5\u7684\u5ba2\u6237\u7aef. \u53d7\u9650\u4e8ecpu\u6027\u80fd\u548c\u5185\u5b58\u5927\u5c0f,\u5168\u8fde\u63a5\u6c60\u91cc\u7684\u8fde\u63a5\u6570\u91cf\u6709\u9650(\u5373\u5e76\u53d1\u80fd\u529b\u6709\u9650). \u9ad8\u5e76\u53d1\u7684\u60c5\u51b5\u4e0b.\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u8fde\u63a5\u4f1a\u957f\u65f6\u95f4\u505c\u5728\u534a\u8fde\u63a5\u6c60\u91cc..\u73b0\u5b9e\u4e2d\u7684\u4f53\u73b0\u5c31\u662f\u7f51\u9875\u4e00\u76f4\u5728\u52a0\u8f7d. \u534a\u8fde\u63a5\u6c60\u6ee1\u4e86,\u5f80\u540e\u7684\u8fde\u63a5\u8bf7\u6c42\u76f4\u63a5\u8fde\u63a5\u4e0d\u4e0a,\u8d85\u65f6.. (\u5f53\u7136\u534a\u8fde\u63a5\u6c60\u8ddf\u5168\u8fde\u63a5\u6c60\u4e00\u6837\u5360\u7528\u7684\u662f\u5185\u5b58\u7a7a\u95f4,\u8bbe\u7f6e\u7684\u8fde\u63a5\u6570\u91cf\u53d7\u9650\u4e8e\u5185\u5b58\u7684\u5927\u5c0f.) \u670d\u52a1\u7aef.py \u00b6 import socket \"\"\" socket.socket() \u8c03\u7528socket\u6a21\u5757\u7684socket\u7c7b\u5f97\u5230\u4e00\u4e2a\u5957\u63a5\u5b57\u5bf9\u8c61 \u5176\u53c2\u6570\u4e3a: \u5957\u63a5\u5b57\u7684\u79cd\u7c7b socket.AF_INET # -- \u4e0d\u4f20\u53c2\u9ed8\u8ba4\u4e3a\u7f51\u7edc\u7c7b\u578b \u5957\u63a5\u5b57\u7684\u534f\u8bae socket.SOCK_STREAM # -- \u4e0d\u4f20\u53c2\u9ed8\u8ba4\u4e3a\u6d41\u5f0f\u534f\u8bae,\u5373TCP\u534f\u8bae socket.SOCK_DGRAM # -- \u6570\u636e\u62a5\u534f\u8bae,\u5373UDP\u534f\u8bae \"\"\" phone = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) # -- \u4e70\u8bfa\u57fa\u4e9a\u624b\u673a # <socket.socket fd=3, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('0.0.0.0', 0)> print ( phone ) \"\"\" \u7528(\u5143\u7956) \u7ed1\u5b9aIP+\u7aef\u53e3 127.0.0.1\u672c\u5730\u56de\u73af\u5730\u5740\u7528\u4e8e\u5f00\u53d1\u6d4b\u8bd5(c/s\u7aef \u8fd0\u884c\u5728\u540c\u4e00\u53f0\u673a\u5668\u4e0a) \"\"\" phone . bind (( \"127.0.0.1\" , 8080 )) # -- \u63d2\u5165/\u7ed1\u5b9a\u624b\u673a\u5361 \"\"\" \u534a\u8fde\u63a5\u6c60backlog \u9650\u5236\u7684\u662f<\u540c\u4e00\u65f6\u523b>\u7684\u8bf7\u6c42\u6570! Ps:\u610f\u601d\u5c31\u662f\u63a5\u6536\u7684\u5ba2\u6237\u7aef\u8fde\u63a5\u90fd\u8981\u4ece\u534a\u8fde\u63a5\u6c60\u961f\u5217\u91cc\u8d70\u4e00\u906d.Hhh \"\"\" phone . listen ( 5 ) # -- \u5f00\u673a,'\u76d1\u542c\u8fde\u63a5\u8bf7\u6c42' \"\"\" \u8c03\u7528\u5957\u63a5\u5b57\u5bf9\u8c61phone\u7684accept()\u65b9\u6cd5,\u8fd4\u56de\u4e86\u4e00\u4e2a\u5143\u7956 -- (\u4e09\u6b21\u63e1\u624b\u5efa\u7acb\u7684\u53cc\u5411\u8fde\u63a5,(\u5ba2\u6237\u7aef\u7684IP,\u5ba2\u6237\u7aef\u7684\u7aef\u53e3)) \u6ce8\u610f\u4e24\u70b9: 1> \u670d\u52a1\u7aef\u7684accept\u5bf9\u5e94\u5ba2\u6237\u7aef\u7684connect\u64cd\u4f5c \u5b83\u4eec\u5728\u5e95\u5c42\u5b8c\u6210\u4e86\u4e09\u6b21\u63e1\u624b! 2> \u901a\u8fc7\u4e09\u6b21\u63e1\u624b\u5f62\u6210\u4e86\u4e24\u6761\u9053 \u4e00\u6761\u9053\u5ba2\u6237\u7aef\u5230\u670d\u52a1\u7aef;\u4e00\u6761\u9053\u670d\u52a1\u7aef\u5230\u5ba2\u6237\u7aef. conn\u5bf9\u8c61\u65e2\u53ef\u4ee5\u6536\u6d88\u606f\u4e5f\u53ef\u4ee5\u53d1\u6d88\u606f,\u90fd\u5e94\u8be5\u662fbytes\u683c\u5f0f \"\"\" print ( \"start wait..\" ) conn , client_addr = phone . accept () # -- \u963b\u585e\u7b49\u5f85,\u63a5\u6536\u7535\u8bdd\u8fde\u63a5 # <socket.socket fd=4, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('127.0.0.1', 8080), raddr=('127.0.0.1', 49978)> # -- fd\u6587\u4ef6\u63cf\u8ff0\u7b26,\u5bf9\u5e94\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u6253\u5f00\u6587\u4ef6\u7684\u7f16\u53f7;family\u7f51\u7edc\u5957\u63a5\u5b57;type\u6d41\u5f0f\u534f\u8bae; # laddr\u672c\u5730\u7684\"\u6b64\u5904\u662f\u670d\u52a1\u7aef\",raddr\u8fdc\u7a0b\u7684\"\u8fd9\u91cc\u662f\u5ba2\u6237\u7aef\". print ( conn ) # ('127.0.0.1', 49978) -- \u6bcf\u6b21\u8fde\u63a5\u7684\u5ba2\u6237\u7aef\u7aef\u53e3\u53f7\u90fd\u662f\u4e0d\u4e00\u6837\u7684,\u662f\u5ba2\u6237\u7aef\u7684\u64cd\u4f5c\u7cfb\u7edf\u968f\u673a\u5206\u914d\u7684 print ( client_addr ) \u5ba2\u6237\u7aef.py \u00b6 import socket phone = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) # <socket.socket fd=3, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('0.0.0.0', 0)> print ( phone ) phone . connect (( '127.0.0.1' , 8080 )) # -- \u6307\u5b9a\u670d\u52a1\u7aef\u7684IP\u548c\u7aef\u53e3 # <socket.socket fd=3, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('127.0.0.1', 49978), raddr=('127.0.0.1', 8080)> # -- laddr\u672c\u5730\u7684\"\u6b64\u5904\u662f\u5ba2\u6237\u7aef\",raddr\u8fdc\u7a0b\u7684\"\u8fd9\u91cc\u662f\u670d\u52a1\u7aef\". print ( phone ) \u6536\u53d1\u6d88\u606f/\u963b\u585e\u4e4b\u5904 \u00b6 \u6536\u53d1\u7684\u5f97\u662f\u57fa\u4e8e\u7f51\u7edc\u4f20\u8f93\u7684\u4e8c\u8fdb\u5236\u6570\u636e!! bytes\u7c7b\u578b\u7684\u6570\u636e. \"\"\" \u2605 -- \u670d\u52a1\u7aef \u4f1a\u963b\u585e\u7684\u5730\u65b9\u6709\u4e24\u4e2a: phone.accept() conn.recv(1024) \"\"\" import socket phone = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) phone . bind (( \"127.0.0.1\" , 8080 )) phone . listen ( 5 ) conn , client_addr = phone . accept () # -- \u901a\u4fe1: \u6536\u3001\u53d1\u6d88\u606f data = conn . recv ( 1024 ) # -- \u6700\u5927\u63a5\u6536\u7684\u5b57\u8282\u6570 print ( '\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u6570\u636e:' , data ) # \u6765\u81ea\u5ba2\u6237\u7aef\u7684\u6570\u636e: b'hello' conn . send ( data . upper ()) # -- \u56de\u6570\u636e # -- \u5173\u95ed conn . close () phone . close () \"\"\" \u2605 -- \u5ba2\u6237\u7aef \u4f1a\u963b\u585e\u7684\u5730\u65b9\u53ea\u6709\u4e00\u4e2a: phone.recv(1024) \"\"\" import socket phone = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) phone . connect (( '127.0.0.1' , 8080 )) # -- \u901a\u4fe1: \u53d1\u3001\u6536\u6d88\u606f # phone.send(bytes('hello', encoding='utf-8')) phone . send ( 'hello' . encode ( 'utf-8' )) # -- \u57fa\u4e8e\u7f51\u7edc\u4f20\u8f93\u5f97\u662f\u4e8c\u8fdb\u5236\u7684\u6570\u636e bytes\u7c7b\u578b\u7684\u6570\u636e data = phone . recv ( 1024 ) print ( '\u6765\u81ea\u670d\u52a1\u7aef\u7684\u6570\u636e:' , data ) # \u6765\u81ea\u670d\u52a1\u7aef\u7684\u6570\u636e: b'HELLO' # -- \u5173\u95ed phone . close () \u670d\u52a1\u7aef\u91cd\u542f\u7aef\u53e3\u62a5\u9519 \u00b6 \u62a5\u9519\u4fe1\u606f: OSError: [Errno 48] Address already in use \u8fd9\u4e2a\u662f\u7531\u4e8e\u670d\u52a1\u7aef\u4ecd\u7136\u5b58\u5728\u56db\u6b21\u6325\u624b\u7684time_wait\u72b6\u6001\u5728\u5360\u7528\u5730\u5740!!! Ps: 1.tcp\u4e09\u6b21\u63e1\u624b,\u56db\u6b21\u6325\u624b 2.syn\u6d2a\u6c34\u653b\u51fb 3.\u670d\u52a1\u5668\u9ad8\u5e76\u53d1\u60c5\u51b5\u4e0b\u4f1a\u6709\u5927\u91cf\u7684time_wait\u72b6\u6001 One_Piece @DCdeMacBook - Air ~ % netstat - an | grep 8080 tcp4 0 0 127.0.0.1.8080 127.0.0.1.49978 TIME_WAIT 1> \u6539\u7aef\u53e3\u53f7, \u670d\u52a1\u7aefbin\u548c\u5ba2\u6237\u7aefconnect\u91cc\u7684\u7aef\u53e3\u53f7\u6539\u7684\u4e00\u81f4 2> \u8bbe\u7f6esocket\u901a\u4fe1\u7684\u914d\u7f6e\u9879 <\u89e3\u51b3\u7aef\u53e3\u5360\u7528\u7684\u95ee\u9898> \u8bbe\u7f6e\u540e\u6b63\u5728\u56de\u6536\u7684\u8bdd\u91cd\u7528,\u91cd\u7528ip\u548c\u7aef\u53e3 phone=socket(AF_INET,SOCK_STREAM) # -- \u542f\u52a8\u670d\u52a1\u7aef\u518d\u5173\u95ed\u64cd\u4f5c\u7cfb\u7edf\u56de\u6536IP\u548c\u7aef\u53e3\u9700\u8981\u65f6\u95f4, \u518d\u6b21\u542f\u52a8\u5c31\u4f1a\u51fa\u73b0\u51b2\u7a81\u7684\u95ee\u9898 # -- REUSEADDR\u91cd\u590d\u4f7f\u7528\u5730\u5740 phone.setsockopt(SOL_SOCKET,SO_REUSEADDR,1) # -- \u5c31\u662f\u5b83,\u5728bind\u524d\u52a0 phone.bind(('127.0.0.1',8080)) 3> \u53d1\u73b0\u7cfb\u7edf\u5b58\u5728\u5927\u91cfTIME_WAIT\u72b6\u6001\u7684\u8fde\u63a5, \u901a\u8fc7\u8c03\u6574linux\u5185\u6838\u53c2\u6570\u89e3\u51b3 \u8be6\u89c1\u8fde\u63a5: https://www.cnblogs.com/linhaifeng/articles/6129246.html#_label7 \u52a0\u4e0a\u901a\u4fe1\u5faa\u73af \u00b6 \u6536\u53d1\u6d88\u606f\u8fdb\u884c\u5faa\u73af \u00b6 \"\"\" \u2605 -- \u670d\u52a1\u7aef \"\"\" import socket phone = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) phone . bind (( '127.0.0.1' , 8080 )) phone . listen ( 5 ) conn , client_addr = phone . accept () while True : # -- \u901a\u4fe1\u5faa\u73af data = conn . recv ( 1024 ) print ( '\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u6570\u636e:' , data ) conn . send ( data . upper ()) conn . close () phone . close () \"\"\" \u2605 -- \u5ba2\u6237\u7aef \"\"\" import socket phone = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) phone . connect (( '127.0.0.1' , 8080 )) while True : # -- \u901a\u4fe1\u5faa\u73af msg = input ( '>>: ' ) . strip () phone . send ( msg . encode ( 'utf8' )) data = phone . recv ( 1024 ) print ( '\u6765\u81ea\u670d\u52a1\u7aef\u7684\u6570\u636e:' , data ) phone . close () \u67e5\u770b\u72b6\u6001 \u00b6 \"\"\" \u2605 -- \u5148\u5173\u95ed\u5ba2\u6237\u7aef,\u518d\u5173\u95ed\u670d\u52a1\u7aef \"\"\" # -- \u542f\u52a8\u670d\u52a1\u7aef One_Piece@DCdeMacBook-Air ~ % netstat -an | grep 8080 tcp4 0 0 127 .0.0.1.8080 *.* LISTEN # -- \u542f\u52a8\u5ba2\u6237\u7aef One_Piece@DCdeMacBook-Air ~ % netstat -an | grep 8080 tcp4 0 0 127 .0.0.1.8080 127 .0.0.1.51398 ESTABLISHED tcp4 0 0 127 .0.0.1.51398 127 .0.0.1.8080 ESTABLISHED tcp4 0 0 127 .0.0.1.8080 *.* LISTEN # -- \u5148\u5728\u63a7\u5236\u53f0\u5f3a\u884c\u5173\u95ed\u5ba2\u6237\u7aef One_Piece@DCdeMacBook-Air ~ % netstat -an | grep 8080 tcp4 0 0 127 .0.0.1.8080 127 .0.0.1.51398 CLOSE_WAIT # \u670d\u52a1\u7aef tcp4 0 0 127 .0.0.1.51398 127 .0.0.1.8080 FIN_WAIT_2 # \u5ba2\u6237\u7aef tcp4 0 0 127 .0.0.1.8080 *.* LISTEN # -- \u5728\u63a7\u5236\u53f0\u5f3a\u884c\u5173\u95ed\u670d\u52a1\u7aef tcp4 0 0 127 .0.0.1.51398 127 .0.0.1.8080 TIME_WAIT # \u5ba2\u6237\u7aef \"\"\" \u2605 -- \u5148\u5173\u95ed\u670d\u52a1\u7aef,\u518d\u5173\u95ed\u5ba2\u6237\u7aef \"\"\" # -- \u542f\u52a8\u670d\u52a1\u7aef One_Piece@DCdeMacBook-Air ~ % netstat -an | grep 8080 tcp4 0 0 127 .0.0.1.8080 *.* LISTEN # -- \u542f\u52a8\u5ba2\u6237\u7aef One_Piece@DCdeMacBook-Air ~ % netstat -an | grep 8080 tcp4 0 0 127 .0.0.1.8080 127 .0.0.1.51518 ESTABLISHED tcp4 0 0 127 .0.0.1.51518 127 .0.0.1.8080 ESTABLISHED tcp4 0 0 127 .0.0.1.8080 *.* LISTEN # -- \u5148\u5728\u63a7\u5236\u53f0\u5f3a\u884c\u5173\u95ed\u670d\u52a1\u7aef One_Piece@DCdeMacBook-Air ~ % netstat -an | grep 8080 tcp4 0 0 127 .0.0.1.8080 127 .0.0.1.51518 FIN_WAIT_2 # \u670d\u52a1\u7aef tcp4 0 0 127 .0.0.1.51518 127 .0.0.1.8080 CLOSE_WAIT # \u5ba2\u6237\u7aef # -- \u5728\u63a7\u5236\u53f0\u5f3a\u884c\u5173\u95ed\u5ba2\u6237\u7aef One_Piece@DCdeMacBook-Air ~ % netstat -an | grep 8080 tcp4 0 0 127 .0.0.1.8080 127 .0.0.1.51518 TIME_WAIT # \u670d\u52a1\u7aef \u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5BUG \u00b6 \u5728\u8fdb\u884c\u67e5\u770b\u72b6\u6001\u7684\u5b9e\u9a8c\u4e2d, \u6211\u4eec\u5355\u65b9\u9762\u7684\u5148\u65ad\u5f00\u5ba2\u6237\u7aef, \u53d1\u73b0\u670d\u52a1\u7aef\u4f1a\u4e00\u76f4\u6253\u5370 \u6765\u81ea\u5ba2\u6237\u7aef\u7684\u6570\u636e: b'' \u81f3\u4e8e\u4e3a\u4f55\u4f1a\u5faa\u73af\u6253\u5370 b'' .. \u522b\u95ee,\u95ee\u5c31\u662flinux\u7cfb\u7edf\u7684\u673a\u5236,\u4e0d\u6653\u5f97..\u256e(\uffe3\u25bd\uffe3\"\")\u256d \u89e3\u51b3\u65b9\u6848: \u670d\u52a1\u7aef\u8fdb\u884c\u5982\u4e0b\u4fee\u6539. \u6211\u4eec\u8bf4conn\u662f\u4e09\u6b21\u63e1\u624b\u5efa\u7acb\u53cc\u5411\u901a\u9053\u7684\u4ea7\u7269 \u5ba2\u6237\u7aef\u5355\u65b9\u9762\u6302\u6389\u4e86. conn.recv(1024) \u4f1a\u4e00\u76f4\u963b\u585e. 1> \u670d\u52a1\u7aeflinux\u7cfb\u7edf\u4e0b\u4f1a\u5f02\u5e38 ,\u4e00\u76f4\u63a5\u53d7\u7a7a\u5b57\u7b26\u4e32\u2018\u6b7b\u5faa\u73af\u2019,cpu\u7684\u5360\u7528\u7387\u4f1a\u5f88\u9ad8(top\u547d\u4ee4\u67e5\u770b). 2> \u670d\u52a1\u7aefwindows\u4e0a\u4f1a\u76f4\u63a5\u62a5\u9519 . \"\"\" \u2605 -- \u670d\u52a1\u7aef \"\"\" import socket phone = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) phone . bind (( '127.0.0.1' , 8080 )) phone . listen ( 5 ) conn , client_addr = phone . accept () while True : # -- \u901a\u4fe1\u5faa\u73af try : data = conn . recv ( 1024 ) if not data : break # -- \u9002\u7528\u4e8elinux\u64cd\u4f5c\u7cfb\u7edf # \u5728\u5ba2\u6237\u7aef\u5355\u65b9\u9762\u65ad\u5f00\u8fde\u63a5,\u670d\u52a1\u7aef\u624d\u4f1a\u51fa\u73b0\u6536\u7a7a\u6570\u636e\u7684\u60c5\u51b5!!! print ( '\u5ba2\u6237\u7aef\u7684\u6570\u636e:' , data ) conn . send ( data . upper ()) except ConnectionResetError : # -- \u9002\u7528\u4e8ewindows\u64cd\u4f5c\u7cfb\u7edf break conn . close () phone . close () \u534a\u8fde\u63a5\u6c60\u7684\u6548\u679c \u00b6 \u73b0\u5728\u67091\u4e2a\u5b9e\u73b0\u4e86\"\u901a\u4fe1\u5faa\u73af\"\u7684\u670d\u52a1\u7aefA, 6\u4e2a\u5b9e\u73b0\u4e86\"\u901a\u4fe1\u5faa\u73af\"\u7684\u5ba2\u6237\u7aefb\u3001c\u3001d\u3001e\u3001f\u3001g... \u5148\u542f\u52a8A,\u518d\u542f\u52a8b,b\u6210\u529f\u4e0eA\u5efa\u7acb\u8fde\u63a5.. \u6b64\u65f6A\u7684\u4ee3\u7801\u505c\u7559\u5728while True\u901a\u4fe1\u5faa\u73af\u91cc;b\u7684\u4ee3\u7801\u4e5f\u8fd0\u884c\u5230\u4e86\u901a\u4fe1\u5faa\u73af\u5904! \u542f\u52a8c\u3001d\u3001e\u3001f\u3001g, \u53d1\u73b0\u5b83\u4eec\u90fd\u6ca1\u6709\u6210\u529f\u4e0eA\u6210\u529f\u5efa\u7acb\u8fde\u63a5 \u76f4\u63a5\u4f53\u73b0\u5728: \u8f93\u5165\"hello\",\u6ca1\u6709\u6765\u81ea\u670d\u52a1\u7aefA\u7684\u53cd\u9988.. c\u3001d\u3001e\u3001f\u3001g\u6b64\u65f6\u6b63\u5904\u4e8eA\u7684\u534a\u8fde\u63a5\u6c60\u91cc.. \u8981\u642d\u7406c\u3001d\u3001e...\u5b83\u4eec\u7684\u8bf7\u6c42\u8fde\u63a5\u9700\u8981\u6267\u884c A\u4e2d\u7684 phone.accept() \u4ee3\u7801.. \u53ef\u73b0\u5728A\u7684\u4ee3\u7801\u8fd0\u884c\u505c\u7559\u5728\u901a\u4fe1\u5faa\u73af\u5904!! \u82e5\u8fd9\u65f6\u8fd8\u6709\u4e2a\u5ba2\u6237\u7aefh\u8bd5\u56fe\u4e0e\u670d\u52a1\u7aefA\u5efa\u7acb\u8fde\u63a5.. \u4f1a\u76f4\u63a5\u62a5\u9519\u8fde\u63a5\u8d85\u65f6: TimeoutError \u56e0\u4e3a\u670d\u52a1\u7aefA\u8bbe\u7f6e\u7684\u534a\u8fde\u63a5\u6c60\u4e2a\u6570\u4e3a5 phone.listen(5) Ps: \u622a\u56fe\u4e2d\u6211\u4eec\u8bbe\u7f6e\u7684\u5ba2\u6237\u7aef\u7684\u534a\u8fde\u63a5\u6c60\u5927\u5c0f\u4e3a1.. \u8bbe\u7f6e\u5927\u4e86\u5c31\u5c55\u793a\u4e0d\u5b8c\u6574\u5566...Hhhh \u5373b\u6210\u529f\u8fde\u63a5,c\u5728\u534a\u8fde\u63a5\u6c60\u91cc,d\u76f4\u63a5\u8fde\u63a5\u5931\u8d25.. \u52a0\u4e0a\u8fde\u63a5\u5faa\u73af \u00b6 \u524d\u9762\"\u534a\u8fde\u63a5\u6c60\u7684\u6548\u679c\"\u7684\u5b9e\u9a8c\u4e2d, \u56e0\u4e3a\u670d\u52a1\u7aef\u53ea\u6709\u901a\u4fe1\u5faa\u73af,\u670d\u52a1\u7aef\u4e00\u65e6\u901a\u8fc7 phone.accept() \u4e0e\u67d0\u4e2a\u5ba2\u6237\u7aef\u5efa\u7acb\u8fde\u63a5\u540e,\u5c31\u4e0d\u4f1a\u4e0e\u5176\u5b83\u5ba2\u6237\u7aef\u5efa\u7acb\u8fde\u63a5\u4e86,\u56e0\u4e3a\u670d\u52a1\u7aef\u7684\u4ee3\u7801\u4ece\u4e0a\u5230\u4e0b\u6267\u884c,\u5efa\u7acb\u8fde\u63a5\u540e,\u5ba2\u6237\u7aef\u7684\u4ee3\u7801\u4f1a\u505c\u7559\u5728\u4e86while True\u7684\u901a\u4fe1\u5faa\u73af\u91cc... \u65e0\u6cd5\u4ece\u534a\u8fde\u63a5\u6c60\u91cc\u53d6\u5176\u5b83\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u8bf7\u6c42!! \u5ba2\u6237\u7aef\u5173\u95ed\u540e,\u670d\u52a1\u7aef\u4f1a\u5904\u4e8eTIME_WAIT\u72b6\u6001,\u4e0d\u518d\u5f80\u5916\u63d0\u4f9b\u670d\u52a1. \u8fde\u63a5\u901a\u4fe1\u53cc\u5faa\u73af \u00b6 \u4e0d\u80fd\u56e0\u4e3a\u5ba2\u6237\u7aef\u7684\u7ec8\u6b62\u5f71\u54cd\u670d\u52a1\u7aef\u4e00\u76f4\u5f80\u5916\u7a33\u5b9a\u63d0\u4f9b\u670d\u52a1!!! \u5c0f\u58f0BB: \u524d\u9762\u7684BUG\u89e3\u51b3\u7684\u662f\u7a33\u5b9a\u95ee\u9898,\u8fde\u63a5\u5faa\u73af\u89e3\u51b3\u7684\u662f\u4e00\u76f4\u63d0\u4f9b\u670d\u52a1\u7684\u95ee\u9898.. import socket phone = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) phone . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) phone . bind (( '127.0.0.1' , 8080 )) phone . listen ( 5 ) while True : # -- \u8fde\u63a5\u5faa\u73af(\u5219\u4e2d\u7684\u65b9\u6848) conn , client_addr = phone . accept () while True : # -- \u901a\u4fe1\u5faa\u73af try : data = conn . recv ( 1024 ) if not data : break print ( '\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u6570\u636e:' , data ) conn . send ( data . upper ()) except ConnectionResetError : break conn . close () phone . close () \u5206\u6790\u8be5\u670d\u52a1\u7aef\u4ee3\u7801\u7684\u6d41\u7a0b: 1> \u542f\u52a8\u670d\u52a1\u7aef\u62ff\u5230\u5957\u63a5\u5b57\u5bf9\u8c61, \u7ed1\u5b9a\u3001\u76d1\u542c; 2> \u8fdb\u5165\u8fde\u63a5\u5faa\u73af,\u63a5\u6536\u4e00\u4e2a\u5ba2\u6237\u7aef\u5957\u63a5\u5b57\u5bf9\u8c61\u7684connect()\u8fde\u63a5\u8bf7\u6c42,\u53cc\u65b9\u5efa\u7acbTCP\u8fde\u63a5! 3> \u670d\u52a1\u7aef\u57fa\u4e8e\u8fd9\u4e2a\u8fde\u63a5\u8fdb\u884c\u901a\u4fe1\u5faa\u73af; 4> \u76f4\u5230\u6b64\u6b21\u901a\u4fe1\u7ed3\u675f,conn.close()\u5173\u95ed\u6b64\u6b21\u8fde\u63a5.. \u670d\u52a1\u7aef\u5957\u63a5\u5b57\u518d\u4ece\u534a\u8fde\u63a5\u6c60\u91cc\u53d6\u4e00\u4e2a\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u8bf7\u6c42,\u5efa\u7acb\u53cc\u65b9\u7684\u8fde\u63a5.. \u5982\u6b64\u5f80\u590d. \u73b0\u76ee\u524d\u7684\u5c40\u9650 \u00b6 \u670d\u52a1\u7aef\u5e94\u8be5\u6ee1\u8db3\u4e24\u70b9, 1> \u4e00\u76f4\u5f80\u5916 \u7a33\u5b9a \u63d0\u4f9b\u670d\u52a1 ; 2> \u5e76\u53d1\u7684\u63d0\u4f9b\u670d\u52a1!\u5373\u540c\u65f6\u670d\u52a1\u591a\u4e2a\u5ba2\u6237\u7aef. \u4f46\u73b0\u76ee\u524d\u7684\u4ee3\u7801,\u670d\u52a1\u7aef\u5efa\u8fde\u63a5\u548c\u901a\u4fe1\u662f\u4e00\u6b65\u4e00\u6b65\u6765\u7684.\u53ea\u80fd\u5b9e\u73b0\u7b2c\u4e00\u70b9! \u901a\u4fe1\u7684\u65f6\u5019\u4e0d\u80fd\u518d\u6b21\u5efa\u7acb\u8fde\u63a5.\u53ea\u6709\u6b64\u6b21\u901a\u4fe1\u7ed3\u675f,\u518d\u5efa\u7acb\u53e6\u5916\u4e00\u4e2a\u8fde\u63a5.. \u8981\u60f3\u5b9e\u73b0\u7b2c\u4e8c\u70b9,\u5e76\u53d1\u7684\u63d0\u4f9b\u670d\u52a1,\u9700\u8981\u591a\u7ebf\u7a0b\u591a\u8fdb\u7a0b\u7684\u77e5\u8bc6\u52a0\u4ee5\u4f18\u5316\u89e3\u51b3.. \u540e\u7eed\u7f51\u7edc\u5e76\u53d1\u7f16\u7a0b\u4f1a\u8be6\u7ec6\u9610\u8ff0!!! \u600e\u4e48\u4e2a\u5e76\u53d1\u6cd5\u5462? \u6253\u4e2a\u6bd4\u65b9,\u670d\u52a1\u7aef\u5c31\u662f\u4e2a\u996d\u5e97,\u95e8\u53e3\u6709\u4e2a\u5c0f\u4e8c,\u4e00\u76f4\u4e0d\u505c\u7684\u62db\u63fd\u5ba2\u4eba( \u4e0d\u505c\u7684\u4ece\u534a\u8fde\u63a5\u6c60\u91cc\u53d6\u8fde\u63a5 ),\u5ba2\u4eba\u8fdb\u5e97\u540e(TCP\u8fde\u63a5\u5efa\u7acb\u6210\u529f),\u996d\u5e97\u4f1a\u62db\u4e00\u4e2a\u670d\u52a1\u5458\u4e00\u5bf9\u4e00\u7684\u670d\u52a1\u8fd9\u540d\u5ba2\u4eba( \u5e72\u901a\u4fe1\u5faa\u73af\u7684\u6d3b ).. \u540c\u7406,\u5c0f\u4e8c\u62db\u63fd\u7684\u7b2c\u4e8c\u4e2a\u5ba2\u4eba\u8fdb\u6765\u540e,\u996d\u5e97\u4f1a\u518d\u62db\u4e00\u4e2a\u670d\u52a1\u5458\u4e00\u5bf9\u4e00\u7684\u670d\u52a1\u8be5\u5ba2\u4eba.. socket\u901a\u4fe1\u5e95\u5c42\u539f\u7406 \u00b6 \u5ba2\u6237\u7aef\u53d1\u7a7aBUG \u00b6 \u524d\u9762\u7684\u5ba2\u6237\u7aef\u7a0b\u5e8f\u8fd8\u6709\u4e2abug!! \u5ba2\u6237\u7aefphone.send(b'')\u53d1\u9001\u7a7a\u5b57\u7b26\u540e,\u4f1a\u963b\u585e\u4f4f,\u4e3a\u4ec0\u4e48\u5462? \u5148\u627e\u95ee\u9898\u51fa\u73b0\u5728\u54ea\u91cc!! \u5728\u5ba2\u6237\u7aef\u91cc\u4f7f\u7528print\u6253\u5370\u5927\u6cd5..Hhh \"\"\" \u2605 -- \u670d\u52a1\u7aef \"\"\" import socket phone = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) phone . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) phone . bind (( '127.0.0.1' , 8080 )) phone . listen ( 5 ) while True : conn , client_addr = phone . accept () while True : try : # -- \u6b63\u5e38\u60c5\u51b5\u4e0b,\u5ba2\u6237\u7aef\u53d1\u9001\u8fc7\u6765\u7684\u6570\u636e\u5927\u5c0f\u5fc5\u987b\u5927\u4e8e0bytes\u624d\u4f1a\u88ab\u670d\u52a1\u7aef\u63a5\u6536!! # \u5ba2\u6237\u7aef\u63a5\u6536\u6570\u636e\u540c\u7406! data = conn . recv ( 1024 ) if not data : break # -- \u5728\u5ba2\u6237\u7aef\u5355\u65b9\u9762\u65ad\u5f00\u8fde\u63a5,\u51fa\u73b0\u5f02\u5e38,\u670d\u52a1\u7aef\u624d\u4f1a\u51fa\u73b0\u6536\u7a7a\u6570\u636e\u7684\u60c5\u51b5!!! print ( '\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u6570\u636e:' , data ) conn . send ( data . upper ()) except ConnectionResetError : break conn . close () phone . close () \"\"\" \u2605 -- \u5ba2\u6237\u7aef \"\"\" import socket phone = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) phone . connect (( '127.0.0.1' , 8080 )) while True : msg = input ( '>>: ' ) . strip () # -- \u76f4\u63a5\u56de\u8f66,\u8f93\u5165\u7a7a\u5b57\u7b26\u4e32 phone . send ( msg . encode ( 'utf8' )) print ( \"has send ...\" ) # -- \u4f1a\u6253\u5370 data = phone . recv ( 1024 ) print ( \"has recv ...\" ) # -- \u4e0d\u4f1a\u6253\u5370 print ( '\u6765\u81ea\u670d\u52a1\u7aef\u7684\u6570\u636e:' , data ) phone . close () \u8bf4\u660e,\u5ba2\u6237\u7aef\u6ca1\u6709recv()\u6536\u5230\u670d\u52a1\u7aef\u53d1\u9001\u8fc7\u6765\u7684\u6d88\u606f!! \u5927\u80c6\u63a8\u6d4b\u662f\u670d\u52a1\u7aef\u6ca1\u6709\u53d1\u6d88\u606f\u7ed9\u5ba2\u6237\u7aef!!! \u7ee7\u7eed\u5206\u6790 , <\u6b63\u5e38\u60c5\u51b5\u4e0b> \u670d\u52a1\u7aef\u6c38\u8fdc\u90fd\u6536\u4e0d\u5230\"\u7a7a\"\u7684\u6570\u636e!! \u901a\u8fc7\u524d\u9762\u7684\u5b9e\u9a8c,\u6211\u4eec\u77e5\u9053\u670d\u52a1\u7aef\u6536\u5230\u7a7a\u7684\u6570\u636e\u4ee3\u8868\u51fa\u73b0\u5f02\u5e38\u4e86,\u5ba2\u6237\u7aef\u5355\u65b9\u9762\u65ad\u5f00\u8fde\u63a5\u670d\u52a1\u7aef\u624d\u4f1a\u6536\u5230\u7a7a!! \u6240\u4ee5<\u6b63\u5e38\u60c5\u51b5\u4e0b>\u5ba2\u6237\u7aef\u53d1\u9001\u7684 b\"\" \u7a7a\u6570\u636e, \u670d\u52a1\u7aef\u662f\u6536\u4e0d\u5230\u7684, \u670d\u52a1\u7aef\u5c31\u4f1a\u4e00\u76f4\u963b\u585e\u5728 conn.recv(1024) \u6b64\u5904, \u50bb\u4e0d\u62c9\u51e0\u7684\u7b49\u5f85\u5ba2\u6237\u7aef\u53d1\u6d88\u606f\u8fc7\u6765,\u4e5f\u5c31\u4e0d\u4f1a\u53d1\u6d88\u606f\u7ed9\u5ba2\u6237\u7aef!! \u7b80\u5355\u6765\u8bf4, \u6b63\u5e38\u60c5\u51b5\u4e0b ,\u5ba2\u6237\u7aef\u53d1\u9001\u7684 b\"\" \u6570\u636e,\u670d\u52a1\u7aef\u63a5\u6536\u4e0d\u5230, \u670d\u52a1\u7aef\u53ea\u4f1a \u201c\u63a5\u6536\u5230\u201d \u5927\u4e8e0bytes\u7684\u6570\u636e!! !! \u770b\u6837\u5b50\u662f\u670d\u52a1\u7aef\u6ca1\u53d1\u6570\u636e,\u5b9e\u5219\u8be5\u95ee\u9898bug\u7684\u89e6\u53d1\u8005/\u6839\u6e90\u5728\u4e8e\u5ba2\u6237\u7aef...Hhh \u89e3\u51b3\u65b9\u6848: send\u4e4b\u524d\u52a0\u4e2a\u5224\u65ad,\u675c\u7edd\u5ba2\u6237\u7aef\u53d1\u7a7a\u6570\u636e \"\"\" \u2605 -- \u5ba2\u6237\u7aef \"\"\" import socket phone = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) phone . connect (( '127.0.0.1' , 8080 )) while True : msg = input ( '>>: ' ) . strip () if not msg : continue # -- \u5224\u65ad phone . send ( msg . encode ( 'utf8' )) data = phone . recv ( 1024 ) print ( '\u6765\u81ea\u670d\u52a1\u7aef\u7684\u6570\u636e:' , data ) phone . close () \u5e95\u5c42\u539f\u7406 \u00b6 \u5148\u660e\u767d\u4e24\u70b9: msg\u6570\u636e\u662f\u5b58\u5728\u4e8e\u5e94\u7528\u7a0b\u5e8f\u81ea\u4e2a\u513f\u7684\u5185\u5b58\u4e2d\u7684! \u5ba2\u6237\u7aef\u8f6f\u4ef6\u9700\u8c03\u7528 '\u786c\u4ef6'\u7f51\u5361\u5c06msg\u6570\u636e\u6cbf\u7740\u7f51\u7ebf\u9001\u5230\u670d\u52a1\u7aef,\u4f46\u5e94\u7528\u7a0b\u5e8f/\u5ba2\u6237\u7aef\u4e0d\u80fd\u76f4\u63a5\u64cd\u4f5c\u786c\u4ef6.. 1> \u5ba2\u6237\u7aef\u6267\u884c send()\u65b9\u6cd5 \u5c06< \u81ea\u5df1\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5185\u5b58 \u91cc\u7684msg\u6570\u636e> \u62f7\u8d1d\u7ed9 <\u64cd\u4f5c\u7cfb\u7edf \u7f13\u5b58 \"cache?\"> \u7531\u5ba2\u6237\u7aef\u64cd\u4f5c\u7cfb\u7edf\u57fa\u4e8eTCP\u534f\u8bae\u8c03\u7f51\u5361\u901a\u8fc7\u7f51\u7edc\u4f20\u8f93\u6570\u636e\u7ed9\u670d\u52a1\u7aef. \u670d\u52a1\u7aef\u7684OS\u6536\u5230\u4f1a\u57fa\u4e8eTCP\u534f\u8bae\u56de\u4e00\u4e2a\u4fe1\u606f,\u5ba2\u6237\u7aefOS\u91cc\u7684msg\u6570\u636e\u5c31\u53ef\u4ee5\u6e05\u9664\u6389\u5566! 2> \u670d\u52a1\u7aef\u7684recv()\u4f1a\u4ece\u670d\u52a1\u7aef\u7684\u64cd\u4f5c\u7cfb\u7edf\u7f13\u5b58\u4e2d\u526a\u5207/\u76f4\u63a5\u62ff\u4ece\u5ba2\u6237\u7aef\u4f20\u9001\u8fc7\u6765\u7684msg\u6570\u636e. \u51c6\u786e\u70b9\u6765\u8bf4,\u670d\u52a1\u7aef\u8f6f\u4ef6\u662f\u4e00\u4e2a\u8fdb\u7a0b,OS\u8f6f\u4ef6\u4e5f\u662f\u4e00\u4e2a\u8fdb\u7a0b,OS\u662f\u62f7\u8d1d\u6570\u636e\u7ed9\u5ba2\u6237\u7aef,\u62f7\u8d1d\u540eOS\u4f1a\u81ea\u52a8\u5c06\u62f7\u8d1d\u7684\u8fd9\u90e8\u5206\u6570\u636e\u9500\u6bc1.. \u6240\u4ee5\u770b\u8d77\u6765\u662f\u76f4\u63a5\u62ff\u7684. \u5e94\u7528\u7a0b\u5e8f\u91cc\u7684\u6570\u636e (\u5ba2\u6237\u7aef\u4ea7\u751f\u7684/\u670d\u52a1\u7aef\u63a5\u6536\u7684 msg\u6570\u636e) ,\u82e5\u6ca1\u6709\u7ed1\u5b9a\u4efb\u4f55\u7684\u53d8\u91cf\u540d,gc\u673a\u5236\u4f1a\u81ea\u52a8\u56de\u6536! \u6ce8\u610f: \u57fa\u4e8eTCP\u534f\u8bae,\u5ba2\u6237\u7aef\u64cd\u4f5c\u7cfb\u7edf\u7f13\u5b58\u4e2d\u7684msg\u6570\u636e\u8981\u7b49\u670d\u52a1\u7aef\u56de\u590d\u76f8\u5e94\u7684\u786e\u8ba4\u53f7\u540e\u624d\u4f1a\u6e05\u9664..\u6240\u4ee5TCP\u53ef\u9760. \u7279\u522b\u5f3a\u8c03! \u4e0d\u662f\u4e00\u53d1\u5bf9\u5e94\u4e00\u6536,\u53d1\u6536\u90fd\u8ddf\u5bf9\u65b9\u4e0d\u6cbe\u8fb9!\u53d1\u662f\u53d1\u7ed9\u81ea\u5df1\u7684\u64cd\u4f5c\u7cfb\u7edf,\u6536\u4e5f\u662f\u4ece\u81ea\u5df1\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u6536! Ps: UDP\u53d1\u6536\u4e5f\u662f\u4e0eOS\u4ea4\u4e92,\u4f46\u4e0eTCP\u4e0d\u540c\u7684\u4e00\u70b9\u5728\u4e8e,UDP\u4e0d\u53ef\u9760,OS\u5c06\u6570\u636e\u53d1\u9001\u4e86,OS\u7f13\u5b58\u4e2d\u7684\u8be5\u6570\u636e\u5c31\u76f4\u63a5\u5220\u9664\u4e86..\u53ef\u4e0d\u4f1a\u7ba1\u8be5\u6570\u636e\u53ef\u4e0d\u53ef\u8fbe.. \u518d\u6b21\u5206\u6790, \"\u5ba2\u6237\u7aef\u53d1\u7a7aBUG\".. \u5ba2\u6237\u7aefsend\u62f7\u8d1d\u4e00\u4e2a\u7a7a\u7684bytes\u5b57\u7b26\u4e32\u7ed9\u5ba2\u6237\u7aef\u7684\u64cd\u4f5c\u7cfb\u7edf\u5185\u5b58.. \u5ba2\u6237\u7aefOS\u76f4\u63a5\u539f\u5730\u95ee\u53f7..\u6709\u4e1c\u897f\u5417?\u6ca1\u6709,\u538b\u6839\u4e0d\u4f1a\u8fdb\u884c\u4efb\u4f55\u7f51\u7edc\u4f20\u8f93\u7684\u64cd\u4f5c.. \u670d\u52a1\u7aef\u4e00\u76f4\u82e6\u82e6\u7b49\u5f85\u670d\u52a1\u7aef\u64cd\u4f5c\u7cfb\u7edf\u5185\u5b58\u63a5\u6536\u5230\u7684\u6570\u636e.. \u670d\u52a1\u7aef\u7eaf\u7eaf\u5927\u6028\u79cdHhhh","title":"TCP\u7b80\u5355\u5b9e\u73b0"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/1_TCP%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/#socket","text":"Socket\u662f\u5e94\u7528\u5c42\u4e0eTCP/IP\u534f\u8bae\u65cf\u901a\u4fe1\u7684\u4e2d\u95f4\u8f6f\u4ef6\u62bd\u8c61\u5c42, \u5b83\u662f\u4e00\u7ec4\u63a5\u53e3.","title":"socket\u5c42"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/1_TCP%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/#_1","text":"socket\u5c31\u662f\u4e00\u4e2a\u5957\u63a5\u5b57\u8f6f\u4ef6\u7a0b\u5e8f. \u662f\u5bf9\u4f20\u8f93\u5c42\u53ca\u4ee5\u4e0b\u7684\u5c01\u88c5. \u7f51\u7edc\u7f16\u7a0b,\u7f51\u7edc\u5305\u542b\u4e24\u65b9\u9762\u7269\u7406\u8fde\u63a5\u4ecb\u8d28\u548c\u534f\u8bae..\u6211\u4eec\u53ea\u9700\u5173\u6ce8\u534f\u8bae\u5373\u53ef.. \u6211\u4eec\u65e0\u9700\u6df1\u5165\u7406\u89e3tcp/udp\u534f\u8bae, \u5957\u63a5\u5b57\u4f4d\u4e8e\u5e94\u7528\u5c42\u548c\u4f20\u8f93\u5c42\u4e4b\u95f4,\u5c06\u4f20\u8f93\u5c42\u4ee5\u4e0b\u7684\u534f\u8bae\u90fd\u5c01\u88c5\u6210\u4e86\u63a5\u53e3!!! \u6211\u4eec\u53ea\u9700\u8981\u9075\u5faasocket\u7684\u89c4\u5b9a\u53bb\u7f16\u7a0b, \u5199\u51fa\u7684\u7a0b\u5e8f\u81ea\u7136\u5c31\u662f\u9075\u5faatcp/udp\u6807\u51c6\u7684! \u4e5f\u5c31\u662f\u8bf4,\u5b83\u7ed9\u5e94\u7528\u5c42\u5e94\u7528\u7a0b\u5e8f\u7684\u5f00\u53d1\u63d0\u4f9b\u4e86\u4f20\u8f93\u5c42\u53ca\u4ee5\u4e0b\u7684\u4e00\u4e2a\u4e2a\u63a5\u53e3.. [ \u626b\u76f2\u7bc7 ] -- \u4e86\u89e3\u5373\u53ef \u4e00\u5f00\u59cb , \u5957\u63a5\u5b57\u88ab\u8bbe\u8ba1\u7528\u5728\u540c\u4e00\u53f0\u4e3b\u673a\u4e0a\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u7684\u901a\u8baf . \u8fd9\u4e5f\u88ab\u79f0\u8fdb\u7a0b\u95f4\u901a\u8baf , \u6216IPC . \u5957\u63a5\u5b57\u6709\u4e24\u79cd ( \u6216\u8005\u79f0\u4e3a\u6709\u4e24\u4e2a\u79cd\u65cf ), \u5206\u522b\u662f\u57fa\u4e8e\u6587\u4ef6\u578b\u7684\u548c\u57fa\u4e8e\u7f51\u7edc\u578b\u7684 . \u25b3 \u57fa\u4e8e\u6587\u4ef6\u7c7b\u578b\u7684\u5957\u63a5\u5b57\u5bb6\u65cf \u540d\u5b57 : AF_UNIX \u4e24\u4e2a\u5957\u63a5\u5b57\u8fdb\u7a0b\u8fd0\u884c\u5728\u540c\u4e00\u673a\u5668 \uff0c \u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee\u540c\u4e00\u4e2a\u6587\u4ef6\u7cfb\u7edf\u95f4\u63a5\u5b8c\u6210\u901a\u4fe1 \u25b3 \u57fa\u4e8e\u7f51\u7edc\u7c7b\u578b\u7684\u5957\u63a5\u5b57\u5bb6\u65cf \u540d\u5b57 : AF_INET python\u652f\u6301\u5f88\u591a\u79cd\u5730\u5740\u5bb6\u65cf , \u7531\u4e8e\u6211\u4eec\u53ea\u5173\u5fc3\u7f51\u7edc\u7f16\u7a0b , \u6240\u4ee5\u5927\u90e8\u5206\u65f6\u5019\u6211\u4e48\u53ea\u4f7f\u7528AF_INET !","title":"\u7b80\u5355\u4ecb\u7ecd"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/1_TCP%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/#_2","text":"\u4ee5\u4e0b\u662f\u5957\u63a5\u5b57\u5b9e\u73b0\u7684TCP\u534f\u8bae\u7684\u6d41\u7a0b! \"\u2605 \u670d\u52a1\u7aef\u5957\u63a5\u5b57\u51fd\u6570\" socket () -- \u8fd4\u56de\u5957\u63a5\u5b57\u5bf9\u8c61 bind () -- S\u7aef\u7ed1\u5b9aIP\u548c\u7aef\u53e3 listen () -- \u76d1\u542cC\u7aef\u7684\u8fde\u63a5\u8bf7\u6c42 accept () -- \u963b\u585e\u7b49\u5f85C\u7aef\u7684\u8fde\u63a5\u8bf7\u6c42 , \u63a5\u6536\u540e\u4e09\u6b21\u63e1\u624b\u5efa\u7acb\u6210\u529f \"\u2605 \u5ba2\u6237\u7aef\u5957\u63a5\u5b57\u51fd\u6570\" socket () -- \u8fd4\u56de\u5957\u63a5\u5b57\u5bf9\u8c61 connect () -- C\u7aef\u53d1\u9001\u8fde\u63a5\u8bf7\u6c42 \"\u2605 \u901a\u4fe1\u5faa\u73af\" read () write () server\u5fc5\u987b\u9075\u5faa: 1> \u7a33\u5b9a\u8fd0\u884c, \u5bf9\u5916\u4e00\u81f4\u63d0\u4f9b\u670d\u52a1! 2> \u670d\u52a1\u5fc5\u987b\u7ed1\u5b9a\u56fa\u5b9a\u7684IP\u548c\u7aef\u53e3! Ps: url\u662f\u5728ip\u548cport\u4e4b\u4e0a\u6807\u8bc6\u552f\u4e00\u7684\u8d44\u6e90\u7684.","title":"\u5de5\u4f5c\u6d41\u7a0b"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/1_TCP%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/#socket_1","text":"\u5148\u542f\u52a8\u670d\u52a1\u7aef,\u518d\u542f\u52a8\u5ba2\u6237\u7aef","title":"\u7b80\u5355\u7684socket\u7a0b\u5e8f"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/1_TCP%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/#_3","text":"\u5ba2\u6237\u7aef\u7684connect\u5bf9\u5e94\u670d\u52a1\u7aef\u7684accept !!! \u2606 \u6ce8\u610f\u54e6! S\u7aef\u6709\u4e24\u79cd\u5957\u63a5\u5b57\u5bf9\u8c61.phone\u548cconn. phone\u8c03\u7528bind\u3001listen\u4e3aaccept\u505a\u51c6\u5907,\u662f\u7528\u4e8e\u5efa\u7acbTCP\u8fde\u63a5\u7684! conn\u662f\u5efa\u7acb\u8fde\u63a5\u7684\u6210\u679c.\u7528\u4e8e\u4f20\u8f93\u6570\u636e\u7684! C\u7aef\u53ea\u6709\u4e00\u79cd\u5957\u63a5\u5b57\u5bf9\u8c61.phone. Q: \u534a\u8fde\u63a5\u6c60backlog \u9650\u5236\u7684\u662f<\u540c\u4e00\u65f6\u523b>\u7684\u8bf7\u6c42\u6570!\u5982\u4f55\u7406\u89e3\uff1f A: \u670d\u52a1\u7aef\u53ef\u4ee5\u670d\u52a1\u4e8e\u591a\u4e2a\u5ba2\u6237\u7aef. C\u7aef\u5411S\u7aef\u53d1\u9001\u7684\u8fde\u63a5\u8bf7\u6c42,\u8981\u5148\u4ece\u534a\u8fde\u63a5\u6c60\u91cc\u8d70\u4e00\u906d,\u5efa\u7acb\u597dTCP\u8fde\u63a5\u540e,\u8be5\u8fde\u63a5\u4f1a\u8fdb\u5165\u5168\u8fde\u63a5\u6c60. (\u8be5\u8fc7\u7a0b\u7279\u522b\u5feb.) CPU\u4f1a\u4ee5\u65f6\u95f4\u7247\u7684\u5f62\u5f0f\u5728\u5168\u8fde\u63a5\u6c60\u91cc\u7684\u4efb\u52a1/\u8fde\u63a5\u4e4b\u95f4\u6765\u56de\u5207\u6362.. \u5373\u670d\u52a1\u7aef\u201c\u5e76\u53d1\u201d\u7684\u670d\u52a1\u8fd9\u4e9b\u5df2\u7ecf\u5efa\u7acb\u597d\u8fde\u63a5\u7684\u5ba2\u6237\u7aef. \u53d7\u9650\u4e8ecpu\u6027\u80fd\u548c\u5185\u5b58\u5927\u5c0f,\u5168\u8fde\u63a5\u6c60\u91cc\u7684\u8fde\u63a5\u6570\u91cf\u6709\u9650(\u5373\u5e76\u53d1\u80fd\u529b\u6709\u9650). \u9ad8\u5e76\u53d1\u7684\u60c5\u51b5\u4e0b.\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u8fde\u63a5\u4f1a\u957f\u65f6\u95f4\u505c\u5728\u534a\u8fde\u63a5\u6c60\u91cc..\u73b0\u5b9e\u4e2d\u7684\u4f53\u73b0\u5c31\u662f\u7f51\u9875\u4e00\u76f4\u5728\u52a0\u8f7d. \u534a\u8fde\u63a5\u6c60\u6ee1\u4e86,\u5f80\u540e\u7684\u8fde\u63a5\u8bf7\u6c42\u76f4\u63a5\u8fde\u63a5\u4e0d\u4e0a,\u8d85\u65f6.. (\u5f53\u7136\u534a\u8fde\u63a5\u6c60\u8ddf\u5168\u8fde\u63a5\u6c60\u4e00\u6837\u5360\u7528\u7684\u662f\u5185\u5b58\u7a7a\u95f4,\u8bbe\u7f6e\u7684\u8fde\u63a5\u6570\u91cf\u53d7\u9650\u4e8e\u5185\u5b58\u7684\u5927\u5c0f.)","title":"\u4e09\u62a5\u6587\u8fde\u63a5\u5efa\u7acb"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/1_TCP%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/#py","text":"import socket \"\"\" socket.socket() \u8c03\u7528socket\u6a21\u5757\u7684socket\u7c7b\u5f97\u5230\u4e00\u4e2a\u5957\u63a5\u5b57\u5bf9\u8c61 \u5176\u53c2\u6570\u4e3a: \u5957\u63a5\u5b57\u7684\u79cd\u7c7b socket.AF_INET # -- \u4e0d\u4f20\u53c2\u9ed8\u8ba4\u4e3a\u7f51\u7edc\u7c7b\u578b \u5957\u63a5\u5b57\u7684\u534f\u8bae socket.SOCK_STREAM # -- \u4e0d\u4f20\u53c2\u9ed8\u8ba4\u4e3a\u6d41\u5f0f\u534f\u8bae,\u5373TCP\u534f\u8bae socket.SOCK_DGRAM # -- \u6570\u636e\u62a5\u534f\u8bae,\u5373UDP\u534f\u8bae \"\"\" phone = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) # -- \u4e70\u8bfa\u57fa\u4e9a\u624b\u673a # <socket.socket fd=3, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('0.0.0.0', 0)> print ( phone ) \"\"\" \u7528(\u5143\u7956) \u7ed1\u5b9aIP+\u7aef\u53e3 127.0.0.1\u672c\u5730\u56de\u73af\u5730\u5740\u7528\u4e8e\u5f00\u53d1\u6d4b\u8bd5(c/s\u7aef \u8fd0\u884c\u5728\u540c\u4e00\u53f0\u673a\u5668\u4e0a) \"\"\" phone . bind (( \"127.0.0.1\" , 8080 )) # -- \u63d2\u5165/\u7ed1\u5b9a\u624b\u673a\u5361 \"\"\" \u534a\u8fde\u63a5\u6c60backlog \u9650\u5236\u7684\u662f<\u540c\u4e00\u65f6\u523b>\u7684\u8bf7\u6c42\u6570! Ps:\u610f\u601d\u5c31\u662f\u63a5\u6536\u7684\u5ba2\u6237\u7aef\u8fde\u63a5\u90fd\u8981\u4ece\u534a\u8fde\u63a5\u6c60\u961f\u5217\u91cc\u8d70\u4e00\u906d.Hhh \"\"\" phone . listen ( 5 ) # -- \u5f00\u673a,'\u76d1\u542c\u8fde\u63a5\u8bf7\u6c42' \"\"\" \u8c03\u7528\u5957\u63a5\u5b57\u5bf9\u8c61phone\u7684accept()\u65b9\u6cd5,\u8fd4\u56de\u4e86\u4e00\u4e2a\u5143\u7956 -- (\u4e09\u6b21\u63e1\u624b\u5efa\u7acb\u7684\u53cc\u5411\u8fde\u63a5,(\u5ba2\u6237\u7aef\u7684IP,\u5ba2\u6237\u7aef\u7684\u7aef\u53e3)) \u6ce8\u610f\u4e24\u70b9: 1> \u670d\u52a1\u7aef\u7684accept\u5bf9\u5e94\u5ba2\u6237\u7aef\u7684connect\u64cd\u4f5c \u5b83\u4eec\u5728\u5e95\u5c42\u5b8c\u6210\u4e86\u4e09\u6b21\u63e1\u624b! 2> \u901a\u8fc7\u4e09\u6b21\u63e1\u624b\u5f62\u6210\u4e86\u4e24\u6761\u9053 \u4e00\u6761\u9053\u5ba2\u6237\u7aef\u5230\u670d\u52a1\u7aef;\u4e00\u6761\u9053\u670d\u52a1\u7aef\u5230\u5ba2\u6237\u7aef. conn\u5bf9\u8c61\u65e2\u53ef\u4ee5\u6536\u6d88\u606f\u4e5f\u53ef\u4ee5\u53d1\u6d88\u606f,\u90fd\u5e94\u8be5\u662fbytes\u683c\u5f0f \"\"\" print ( \"start wait..\" ) conn , client_addr = phone . accept () # -- \u963b\u585e\u7b49\u5f85,\u63a5\u6536\u7535\u8bdd\u8fde\u63a5 # <socket.socket fd=4, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('127.0.0.1', 8080), raddr=('127.0.0.1', 49978)> # -- fd\u6587\u4ef6\u63cf\u8ff0\u7b26,\u5bf9\u5e94\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u6253\u5f00\u6587\u4ef6\u7684\u7f16\u53f7;family\u7f51\u7edc\u5957\u63a5\u5b57;type\u6d41\u5f0f\u534f\u8bae; # laddr\u672c\u5730\u7684\"\u6b64\u5904\u662f\u670d\u52a1\u7aef\",raddr\u8fdc\u7a0b\u7684\"\u8fd9\u91cc\u662f\u5ba2\u6237\u7aef\". print ( conn ) # ('127.0.0.1', 49978) -- \u6bcf\u6b21\u8fde\u63a5\u7684\u5ba2\u6237\u7aef\u7aef\u53e3\u53f7\u90fd\u662f\u4e0d\u4e00\u6837\u7684,\u662f\u5ba2\u6237\u7aef\u7684\u64cd\u4f5c\u7cfb\u7edf\u968f\u673a\u5206\u914d\u7684 print ( client_addr )","title":"\u670d\u52a1\u7aef.py"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/1_TCP%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/#py_1","text":"import socket phone = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) # <socket.socket fd=3, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('0.0.0.0', 0)> print ( phone ) phone . connect (( '127.0.0.1' , 8080 )) # -- \u6307\u5b9a\u670d\u52a1\u7aef\u7684IP\u548c\u7aef\u53e3 # <socket.socket fd=3, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('127.0.0.1', 49978), raddr=('127.0.0.1', 8080)> # -- laddr\u672c\u5730\u7684\"\u6b64\u5904\u662f\u5ba2\u6237\u7aef\",raddr\u8fdc\u7a0b\u7684\"\u8fd9\u91cc\u662f\u670d\u52a1\u7aef\". print ( phone )","title":"\u5ba2\u6237\u7aef.py"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/1_TCP%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/#_4","text":"\u6536\u53d1\u7684\u5f97\u662f\u57fa\u4e8e\u7f51\u7edc\u4f20\u8f93\u7684\u4e8c\u8fdb\u5236\u6570\u636e!! bytes\u7c7b\u578b\u7684\u6570\u636e. \"\"\" \u2605 -- \u670d\u52a1\u7aef \u4f1a\u963b\u585e\u7684\u5730\u65b9\u6709\u4e24\u4e2a: phone.accept() conn.recv(1024) \"\"\" import socket phone = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) phone . bind (( \"127.0.0.1\" , 8080 )) phone . listen ( 5 ) conn , client_addr = phone . accept () # -- \u901a\u4fe1: \u6536\u3001\u53d1\u6d88\u606f data = conn . recv ( 1024 ) # -- \u6700\u5927\u63a5\u6536\u7684\u5b57\u8282\u6570 print ( '\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u6570\u636e:' , data ) # \u6765\u81ea\u5ba2\u6237\u7aef\u7684\u6570\u636e: b'hello' conn . send ( data . upper ()) # -- \u56de\u6570\u636e # -- \u5173\u95ed conn . close () phone . close () \"\"\" \u2605 -- \u5ba2\u6237\u7aef \u4f1a\u963b\u585e\u7684\u5730\u65b9\u53ea\u6709\u4e00\u4e2a: phone.recv(1024) \"\"\" import socket phone = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) phone . connect (( '127.0.0.1' , 8080 )) # -- \u901a\u4fe1: \u53d1\u3001\u6536\u6d88\u606f # phone.send(bytes('hello', encoding='utf-8')) phone . send ( 'hello' . encode ( 'utf-8' )) # -- \u57fa\u4e8e\u7f51\u7edc\u4f20\u8f93\u5f97\u662f\u4e8c\u8fdb\u5236\u7684\u6570\u636e bytes\u7c7b\u578b\u7684\u6570\u636e data = phone . recv ( 1024 ) print ( '\u6765\u81ea\u670d\u52a1\u7aef\u7684\u6570\u636e:' , data ) # \u6765\u81ea\u670d\u52a1\u7aef\u7684\u6570\u636e: b'HELLO' # -- \u5173\u95ed phone . close ()","title":"\u6536\u53d1\u6d88\u606f/\u963b\u585e\u4e4b\u5904"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/1_TCP%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/#_5","text":"\u62a5\u9519\u4fe1\u606f: OSError: [Errno 48] Address already in use \u8fd9\u4e2a\u662f\u7531\u4e8e\u670d\u52a1\u7aef\u4ecd\u7136\u5b58\u5728\u56db\u6b21\u6325\u624b\u7684time_wait\u72b6\u6001\u5728\u5360\u7528\u5730\u5740!!! Ps: 1.tcp\u4e09\u6b21\u63e1\u624b,\u56db\u6b21\u6325\u624b 2.syn\u6d2a\u6c34\u653b\u51fb 3.\u670d\u52a1\u5668\u9ad8\u5e76\u53d1\u60c5\u51b5\u4e0b\u4f1a\u6709\u5927\u91cf\u7684time_wait\u72b6\u6001 One_Piece @DCdeMacBook - Air ~ % netstat - an | grep 8080 tcp4 0 0 127.0.0.1.8080 127.0.0.1.49978 TIME_WAIT 1> \u6539\u7aef\u53e3\u53f7, \u670d\u52a1\u7aefbin\u548c\u5ba2\u6237\u7aefconnect\u91cc\u7684\u7aef\u53e3\u53f7\u6539\u7684\u4e00\u81f4 2> \u8bbe\u7f6esocket\u901a\u4fe1\u7684\u914d\u7f6e\u9879 <\u89e3\u51b3\u7aef\u53e3\u5360\u7528\u7684\u95ee\u9898> \u8bbe\u7f6e\u540e\u6b63\u5728\u56de\u6536\u7684\u8bdd\u91cd\u7528,\u91cd\u7528ip\u548c\u7aef\u53e3 phone=socket(AF_INET,SOCK_STREAM) # -- \u542f\u52a8\u670d\u52a1\u7aef\u518d\u5173\u95ed\u64cd\u4f5c\u7cfb\u7edf\u56de\u6536IP\u548c\u7aef\u53e3\u9700\u8981\u65f6\u95f4, \u518d\u6b21\u542f\u52a8\u5c31\u4f1a\u51fa\u73b0\u51b2\u7a81\u7684\u95ee\u9898 # -- REUSEADDR\u91cd\u590d\u4f7f\u7528\u5730\u5740 phone.setsockopt(SOL_SOCKET,SO_REUSEADDR,1) # -- \u5c31\u662f\u5b83,\u5728bind\u524d\u52a0 phone.bind(('127.0.0.1',8080)) 3> \u53d1\u73b0\u7cfb\u7edf\u5b58\u5728\u5927\u91cfTIME_WAIT\u72b6\u6001\u7684\u8fde\u63a5, \u901a\u8fc7\u8c03\u6574linux\u5185\u6838\u53c2\u6570\u89e3\u51b3 \u8be6\u89c1\u8fde\u63a5: https://www.cnblogs.com/linhaifeng/articles/6129246.html#_label7","title":"\u670d\u52a1\u7aef\u91cd\u542f\u7aef\u53e3\u62a5\u9519"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/1_TCP%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/#_6","text":"","title":"\u52a0\u4e0a\u901a\u4fe1\u5faa\u73af"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/1_TCP%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/#_7","text":"\"\"\" \u2605 -- \u670d\u52a1\u7aef \"\"\" import socket phone = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) phone . bind (( '127.0.0.1' , 8080 )) phone . listen ( 5 ) conn , client_addr = phone . accept () while True : # -- \u901a\u4fe1\u5faa\u73af data = conn . recv ( 1024 ) print ( '\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u6570\u636e:' , data ) conn . send ( data . upper ()) conn . close () phone . close () \"\"\" \u2605 -- \u5ba2\u6237\u7aef \"\"\" import socket phone = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) phone . connect (( '127.0.0.1' , 8080 )) while True : # -- \u901a\u4fe1\u5faa\u73af msg = input ( '>>: ' ) . strip () phone . send ( msg . encode ( 'utf8' )) data = phone . recv ( 1024 ) print ( '\u6765\u81ea\u670d\u52a1\u7aef\u7684\u6570\u636e:' , data ) phone . close ()","title":"\u6536\u53d1\u6d88\u606f\u8fdb\u884c\u5faa\u73af"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/1_TCP%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/#_8","text":"\"\"\" \u2605 -- \u5148\u5173\u95ed\u5ba2\u6237\u7aef,\u518d\u5173\u95ed\u670d\u52a1\u7aef \"\"\" # -- \u542f\u52a8\u670d\u52a1\u7aef One_Piece@DCdeMacBook-Air ~ % netstat -an | grep 8080 tcp4 0 0 127 .0.0.1.8080 *.* LISTEN # -- \u542f\u52a8\u5ba2\u6237\u7aef One_Piece@DCdeMacBook-Air ~ % netstat -an | grep 8080 tcp4 0 0 127 .0.0.1.8080 127 .0.0.1.51398 ESTABLISHED tcp4 0 0 127 .0.0.1.51398 127 .0.0.1.8080 ESTABLISHED tcp4 0 0 127 .0.0.1.8080 *.* LISTEN # -- \u5148\u5728\u63a7\u5236\u53f0\u5f3a\u884c\u5173\u95ed\u5ba2\u6237\u7aef One_Piece@DCdeMacBook-Air ~ % netstat -an | grep 8080 tcp4 0 0 127 .0.0.1.8080 127 .0.0.1.51398 CLOSE_WAIT # \u670d\u52a1\u7aef tcp4 0 0 127 .0.0.1.51398 127 .0.0.1.8080 FIN_WAIT_2 # \u5ba2\u6237\u7aef tcp4 0 0 127 .0.0.1.8080 *.* LISTEN # -- \u5728\u63a7\u5236\u53f0\u5f3a\u884c\u5173\u95ed\u670d\u52a1\u7aef tcp4 0 0 127 .0.0.1.51398 127 .0.0.1.8080 TIME_WAIT # \u5ba2\u6237\u7aef \"\"\" \u2605 -- \u5148\u5173\u95ed\u670d\u52a1\u7aef,\u518d\u5173\u95ed\u5ba2\u6237\u7aef \"\"\" # -- \u542f\u52a8\u670d\u52a1\u7aef One_Piece@DCdeMacBook-Air ~ % netstat -an | grep 8080 tcp4 0 0 127 .0.0.1.8080 *.* LISTEN # -- \u542f\u52a8\u5ba2\u6237\u7aef One_Piece@DCdeMacBook-Air ~ % netstat -an | grep 8080 tcp4 0 0 127 .0.0.1.8080 127 .0.0.1.51518 ESTABLISHED tcp4 0 0 127 .0.0.1.51518 127 .0.0.1.8080 ESTABLISHED tcp4 0 0 127 .0.0.1.8080 *.* LISTEN # -- \u5148\u5728\u63a7\u5236\u53f0\u5f3a\u884c\u5173\u95ed\u670d\u52a1\u7aef One_Piece@DCdeMacBook-Air ~ % netstat -an | grep 8080 tcp4 0 0 127 .0.0.1.8080 127 .0.0.1.51518 FIN_WAIT_2 # \u670d\u52a1\u7aef tcp4 0 0 127 .0.0.1.51518 127 .0.0.1.8080 CLOSE_WAIT # \u5ba2\u6237\u7aef # -- \u5728\u63a7\u5236\u53f0\u5f3a\u884c\u5173\u95ed\u5ba2\u6237\u7aef One_Piece@DCdeMacBook-Air ~ % netstat -an | grep 8080 tcp4 0 0 127 .0.0.1.8080 127 .0.0.1.51518 TIME_WAIT # \u670d\u52a1\u7aef","title":"\u67e5\u770b\u72b6\u6001"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/1_TCP%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/#bug","text":"\u5728\u8fdb\u884c\u67e5\u770b\u72b6\u6001\u7684\u5b9e\u9a8c\u4e2d, \u6211\u4eec\u5355\u65b9\u9762\u7684\u5148\u65ad\u5f00\u5ba2\u6237\u7aef, \u53d1\u73b0\u670d\u52a1\u7aef\u4f1a\u4e00\u76f4\u6253\u5370 \u6765\u81ea\u5ba2\u6237\u7aef\u7684\u6570\u636e: b'' \u81f3\u4e8e\u4e3a\u4f55\u4f1a\u5faa\u73af\u6253\u5370 b'' .. \u522b\u95ee,\u95ee\u5c31\u662flinux\u7cfb\u7edf\u7684\u673a\u5236,\u4e0d\u6653\u5f97..\u256e(\uffe3\u25bd\uffe3\"\")\u256d \u89e3\u51b3\u65b9\u6848: \u670d\u52a1\u7aef\u8fdb\u884c\u5982\u4e0b\u4fee\u6539. \u6211\u4eec\u8bf4conn\u662f\u4e09\u6b21\u63e1\u624b\u5efa\u7acb\u53cc\u5411\u901a\u9053\u7684\u4ea7\u7269 \u5ba2\u6237\u7aef\u5355\u65b9\u9762\u6302\u6389\u4e86. conn.recv(1024) \u4f1a\u4e00\u76f4\u963b\u585e. 1> \u670d\u52a1\u7aeflinux\u7cfb\u7edf\u4e0b\u4f1a\u5f02\u5e38 ,\u4e00\u76f4\u63a5\u53d7\u7a7a\u5b57\u7b26\u4e32\u2018\u6b7b\u5faa\u73af\u2019,cpu\u7684\u5360\u7528\u7387\u4f1a\u5f88\u9ad8(top\u547d\u4ee4\u67e5\u770b). 2> \u670d\u52a1\u7aefwindows\u4e0a\u4f1a\u76f4\u63a5\u62a5\u9519 . \"\"\" \u2605 -- \u670d\u52a1\u7aef \"\"\" import socket phone = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) phone . bind (( '127.0.0.1' , 8080 )) phone . listen ( 5 ) conn , client_addr = phone . accept () while True : # -- \u901a\u4fe1\u5faa\u73af try : data = conn . recv ( 1024 ) if not data : break # -- \u9002\u7528\u4e8elinux\u64cd\u4f5c\u7cfb\u7edf # \u5728\u5ba2\u6237\u7aef\u5355\u65b9\u9762\u65ad\u5f00\u8fde\u63a5,\u670d\u52a1\u7aef\u624d\u4f1a\u51fa\u73b0\u6536\u7a7a\u6570\u636e\u7684\u60c5\u51b5!!! print ( '\u5ba2\u6237\u7aef\u7684\u6570\u636e:' , data ) conn . send ( data . upper ()) except ConnectionResetError : # -- \u9002\u7528\u4e8ewindows\u64cd\u4f5c\u7cfb\u7edf break conn . close () phone . close ()","title":"\u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5BUG"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/1_TCP%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/#_9","text":"\u73b0\u5728\u67091\u4e2a\u5b9e\u73b0\u4e86\"\u901a\u4fe1\u5faa\u73af\"\u7684\u670d\u52a1\u7aefA, 6\u4e2a\u5b9e\u73b0\u4e86\"\u901a\u4fe1\u5faa\u73af\"\u7684\u5ba2\u6237\u7aefb\u3001c\u3001d\u3001e\u3001f\u3001g... \u5148\u542f\u52a8A,\u518d\u542f\u52a8b,b\u6210\u529f\u4e0eA\u5efa\u7acb\u8fde\u63a5.. \u6b64\u65f6A\u7684\u4ee3\u7801\u505c\u7559\u5728while True\u901a\u4fe1\u5faa\u73af\u91cc;b\u7684\u4ee3\u7801\u4e5f\u8fd0\u884c\u5230\u4e86\u901a\u4fe1\u5faa\u73af\u5904! \u542f\u52a8c\u3001d\u3001e\u3001f\u3001g, \u53d1\u73b0\u5b83\u4eec\u90fd\u6ca1\u6709\u6210\u529f\u4e0eA\u6210\u529f\u5efa\u7acb\u8fde\u63a5 \u76f4\u63a5\u4f53\u73b0\u5728: \u8f93\u5165\"hello\",\u6ca1\u6709\u6765\u81ea\u670d\u52a1\u7aefA\u7684\u53cd\u9988.. c\u3001d\u3001e\u3001f\u3001g\u6b64\u65f6\u6b63\u5904\u4e8eA\u7684\u534a\u8fde\u63a5\u6c60\u91cc.. \u8981\u642d\u7406c\u3001d\u3001e...\u5b83\u4eec\u7684\u8bf7\u6c42\u8fde\u63a5\u9700\u8981\u6267\u884c A\u4e2d\u7684 phone.accept() \u4ee3\u7801.. \u53ef\u73b0\u5728A\u7684\u4ee3\u7801\u8fd0\u884c\u505c\u7559\u5728\u901a\u4fe1\u5faa\u73af\u5904!! \u82e5\u8fd9\u65f6\u8fd8\u6709\u4e2a\u5ba2\u6237\u7aefh\u8bd5\u56fe\u4e0e\u670d\u52a1\u7aefA\u5efa\u7acb\u8fde\u63a5.. \u4f1a\u76f4\u63a5\u62a5\u9519\u8fde\u63a5\u8d85\u65f6: TimeoutError \u56e0\u4e3a\u670d\u52a1\u7aefA\u8bbe\u7f6e\u7684\u534a\u8fde\u63a5\u6c60\u4e2a\u6570\u4e3a5 phone.listen(5) Ps: \u622a\u56fe\u4e2d\u6211\u4eec\u8bbe\u7f6e\u7684\u5ba2\u6237\u7aef\u7684\u534a\u8fde\u63a5\u6c60\u5927\u5c0f\u4e3a1.. \u8bbe\u7f6e\u5927\u4e86\u5c31\u5c55\u793a\u4e0d\u5b8c\u6574\u5566...Hhhh \u5373b\u6210\u529f\u8fde\u63a5,c\u5728\u534a\u8fde\u63a5\u6c60\u91cc,d\u76f4\u63a5\u8fde\u63a5\u5931\u8d25..","title":"\u534a\u8fde\u63a5\u6c60\u7684\u6548\u679c"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/1_TCP%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/#_10","text":"\u524d\u9762\"\u534a\u8fde\u63a5\u6c60\u7684\u6548\u679c\"\u7684\u5b9e\u9a8c\u4e2d, \u56e0\u4e3a\u670d\u52a1\u7aef\u53ea\u6709\u901a\u4fe1\u5faa\u73af,\u670d\u52a1\u7aef\u4e00\u65e6\u901a\u8fc7 phone.accept() \u4e0e\u67d0\u4e2a\u5ba2\u6237\u7aef\u5efa\u7acb\u8fde\u63a5\u540e,\u5c31\u4e0d\u4f1a\u4e0e\u5176\u5b83\u5ba2\u6237\u7aef\u5efa\u7acb\u8fde\u63a5\u4e86,\u56e0\u4e3a\u670d\u52a1\u7aef\u7684\u4ee3\u7801\u4ece\u4e0a\u5230\u4e0b\u6267\u884c,\u5efa\u7acb\u8fde\u63a5\u540e,\u5ba2\u6237\u7aef\u7684\u4ee3\u7801\u4f1a\u505c\u7559\u5728\u4e86while True\u7684\u901a\u4fe1\u5faa\u73af\u91cc... \u65e0\u6cd5\u4ece\u534a\u8fde\u63a5\u6c60\u91cc\u53d6\u5176\u5b83\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u8bf7\u6c42!! \u5ba2\u6237\u7aef\u5173\u95ed\u540e,\u670d\u52a1\u7aef\u4f1a\u5904\u4e8eTIME_WAIT\u72b6\u6001,\u4e0d\u518d\u5f80\u5916\u63d0\u4f9b\u670d\u52a1.","title":"\u52a0\u4e0a\u8fde\u63a5\u5faa\u73af"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/1_TCP%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/#_11","text":"\u4e0d\u80fd\u56e0\u4e3a\u5ba2\u6237\u7aef\u7684\u7ec8\u6b62\u5f71\u54cd\u670d\u52a1\u7aef\u4e00\u76f4\u5f80\u5916\u7a33\u5b9a\u63d0\u4f9b\u670d\u52a1!!! \u5c0f\u58f0BB: \u524d\u9762\u7684BUG\u89e3\u51b3\u7684\u662f\u7a33\u5b9a\u95ee\u9898,\u8fde\u63a5\u5faa\u73af\u89e3\u51b3\u7684\u662f\u4e00\u76f4\u63d0\u4f9b\u670d\u52a1\u7684\u95ee\u9898.. import socket phone = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) phone . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) phone . bind (( '127.0.0.1' , 8080 )) phone . listen ( 5 ) while True : # -- \u8fde\u63a5\u5faa\u73af(\u5219\u4e2d\u7684\u65b9\u6848) conn , client_addr = phone . accept () while True : # -- \u901a\u4fe1\u5faa\u73af try : data = conn . recv ( 1024 ) if not data : break print ( '\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u6570\u636e:' , data ) conn . send ( data . upper ()) except ConnectionResetError : break conn . close () phone . close () \u5206\u6790\u8be5\u670d\u52a1\u7aef\u4ee3\u7801\u7684\u6d41\u7a0b: 1> \u542f\u52a8\u670d\u52a1\u7aef\u62ff\u5230\u5957\u63a5\u5b57\u5bf9\u8c61, \u7ed1\u5b9a\u3001\u76d1\u542c; 2> \u8fdb\u5165\u8fde\u63a5\u5faa\u73af,\u63a5\u6536\u4e00\u4e2a\u5ba2\u6237\u7aef\u5957\u63a5\u5b57\u5bf9\u8c61\u7684connect()\u8fde\u63a5\u8bf7\u6c42,\u53cc\u65b9\u5efa\u7acbTCP\u8fde\u63a5! 3> \u670d\u52a1\u7aef\u57fa\u4e8e\u8fd9\u4e2a\u8fde\u63a5\u8fdb\u884c\u901a\u4fe1\u5faa\u73af; 4> \u76f4\u5230\u6b64\u6b21\u901a\u4fe1\u7ed3\u675f,conn.close()\u5173\u95ed\u6b64\u6b21\u8fde\u63a5.. \u670d\u52a1\u7aef\u5957\u63a5\u5b57\u518d\u4ece\u534a\u8fde\u63a5\u6c60\u91cc\u53d6\u4e00\u4e2a\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u8bf7\u6c42,\u5efa\u7acb\u53cc\u65b9\u7684\u8fde\u63a5.. \u5982\u6b64\u5f80\u590d.","title":"\u8fde\u63a5\u901a\u4fe1\u53cc\u5faa\u73af"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/1_TCP%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/#_12","text":"\u670d\u52a1\u7aef\u5e94\u8be5\u6ee1\u8db3\u4e24\u70b9, 1> \u4e00\u76f4\u5f80\u5916 \u7a33\u5b9a \u63d0\u4f9b\u670d\u52a1 ; 2> \u5e76\u53d1\u7684\u63d0\u4f9b\u670d\u52a1!\u5373\u540c\u65f6\u670d\u52a1\u591a\u4e2a\u5ba2\u6237\u7aef. \u4f46\u73b0\u76ee\u524d\u7684\u4ee3\u7801,\u670d\u52a1\u7aef\u5efa\u8fde\u63a5\u548c\u901a\u4fe1\u662f\u4e00\u6b65\u4e00\u6b65\u6765\u7684.\u53ea\u80fd\u5b9e\u73b0\u7b2c\u4e00\u70b9! \u901a\u4fe1\u7684\u65f6\u5019\u4e0d\u80fd\u518d\u6b21\u5efa\u7acb\u8fde\u63a5.\u53ea\u6709\u6b64\u6b21\u901a\u4fe1\u7ed3\u675f,\u518d\u5efa\u7acb\u53e6\u5916\u4e00\u4e2a\u8fde\u63a5.. \u8981\u60f3\u5b9e\u73b0\u7b2c\u4e8c\u70b9,\u5e76\u53d1\u7684\u63d0\u4f9b\u670d\u52a1,\u9700\u8981\u591a\u7ebf\u7a0b\u591a\u8fdb\u7a0b\u7684\u77e5\u8bc6\u52a0\u4ee5\u4f18\u5316\u89e3\u51b3.. \u540e\u7eed\u7f51\u7edc\u5e76\u53d1\u7f16\u7a0b\u4f1a\u8be6\u7ec6\u9610\u8ff0!!! \u600e\u4e48\u4e2a\u5e76\u53d1\u6cd5\u5462? \u6253\u4e2a\u6bd4\u65b9,\u670d\u52a1\u7aef\u5c31\u662f\u4e2a\u996d\u5e97,\u95e8\u53e3\u6709\u4e2a\u5c0f\u4e8c,\u4e00\u76f4\u4e0d\u505c\u7684\u62db\u63fd\u5ba2\u4eba( \u4e0d\u505c\u7684\u4ece\u534a\u8fde\u63a5\u6c60\u91cc\u53d6\u8fde\u63a5 ),\u5ba2\u4eba\u8fdb\u5e97\u540e(TCP\u8fde\u63a5\u5efa\u7acb\u6210\u529f),\u996d\u5e97\u4f1a\u62db\u4e00\u4e2a\u670d\u52a1\u5458\u4e00\u5bf9\u4e00\u7684\u670d\u52a1\u8fd9\u540d\u5ba2\u4eba( \u5e72\u901a\u4fe1\u5faa\u73af\u7684\u6d3b ).. \u540c\u7406,\u5c0f\u4e8c\u62db\u63fd\u7684\u7b2c\u4e8c\u4e2a\u5ba2\u4eba\u8fdb\u6765\u540e,\u996d\u5e97\u4f1a\u518d\u62db\u4e00\u4e2a\u670d\u52a1\u5458\u4e00\u5bf9\u4e00\u7684\u670d\u52a1\u8be5\u5ba2\u4eba..","title":"\u73b0\u76ee\u524d\u7684\u5c40\u9650"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/1_TCP%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/#socket_2","text":"","title":"socket\u901a\u4fe1\u5e95\u5c42\u539f\u7406"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/1_TCP%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/#bug_1","text":"\u524d\u9762\u7684\u5ba2\u6237\u7aef\u7a0b\u5e8f\u8fd8\u6709\u4e2abug!! \u5ba2\u6237\u7aefphone.send(b'')\u53d1\u9001\u7a7a\u5b57\u7b26\u540e,\u4f1a\u963b\u585e\u4f4f,\u4e3a\u4ec0\u4e48\u5462? \u5148\u627e\u95ee\u9898\u51fa\u73b0\u5728\u54ea\u91cc!! \u5728\u5ba2\u6237\u7aef\u91cc\u4f7f\u7528print\u6253\u5370\u5927\u6cd5..Hhh \"\"\" \u2605 -- \u670d\u52a1\u7aef \"\"\" import socket phone = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) phone . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) phone . bind (( '127.0.0.1' , 8080 )) phone . listen ( 5 ) while True : conn , client_addr = phone . accept () while True : try : # -- \u6b63\u5e38\u60c5\u51b5\u4e0b,\u5ba2\u6237\u7aef\u53d1\u9001\u8fc7\u6765\u7684\u6570\u636e\u5927\u5c0f\u5fc5\u987b\u5927\u4e8e0bytes\u624d\u4f1a\u88ab\u670d\u52a1\u7aef\u63a5\u6536!! # \u5ba2\u6237\u7aef\u63a5\u6536\u6570\u636e\u540c\u7406! data = conn . recv ( 1024 ) if not data : break # -- \u5728\u5ba2\u6237\u7aef\u5355\u65b9\u9762\u65ad\u5f00\u8fde\u63a5,\u51fa\u73b0\u5f02\u5e38,\u670d\u52a1\u7aef\u624d\u4f1a\u51fa\u73b0\u6536\u7a7a\u6570\u636e\u7684\u60c5\u51b5!!! print ( '\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u6570\u636e:' , data ) conn . send ( data . upper ()) except ConnectionResetError : break conn . close () phone . close () \"\"\" \u2605 -- \u5ba2\u6237\u7aef \"\"\" import socket phone = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) phone . connect (( '127.0.0.1' , 8080 )) while True : msg = input ( '>>: ' ) . strip () # -- \u76f4\u63a5\u56de\u8f66,\u8f93\u5165\u7a7a\u5b57\u7b26\u4e32 phone . send ( msg . encode ( 'utf8' )) print ( \"has send ...\" ) # -- \u4f1a\u6253\u5370 data = phone . recv ( 1024 ) print ( \"has recv ...\" ) # -- \u4e0d\u4f1a\u6253\u5370 print ( '\u6765\u81ea\u670d\u52a1\u7aef\u7684\u6570\u636e:' , data ) phone . close () \u8bf4\u660e,\u5ba2\u6237\u7aef\u6ca1\u6709recv()\u6536\u5230\u670d\u52a1\u7aef\u53d1\u9001\u8fc7\u6765\u7684\u6d88\u606f!! \u5927\u80c6\u63a8\u6d4b\u662f\u670d\u52a1\u7aef\u6ca1\u6709\u53d1\u6d88\u606f\u7ed9\u5ba2\u6237\u7aef!!! \u7ee7\u7eed\u5206\u6790 , <\u6b63\u5e38\u60c5\u51b5\u4e0b> \u670d\u52a1\u7aef\u6c38\u8fdc\u90fd\u6536\u4e0d\u5230\"\u7a7a\"\u7684\u6570\u636e!! \u901a\u8fc7\u524d\u9762\u7684\u5b9e\u9a8c,\u6211\u4eec\u77e5\u9053\u670d\u52a1\u7aef\u6536\u5230\u7a7a\u7684\u6570\u636e\u4ee3\u8868\u51fa\u73b0\u5f02\u5e38\u4e86,\u5ba2\u6237\u7aef\u5355\u65b9\u9762\u65ad\u5f00\u8fde\u63a5\u670d\u52a1\u7aef\u624d\u4f1a\u6536\u5230\u7a7a!! \u6240\u4ee5<\u6b63\u5e38\u60c5\u51b5\u4e0b>\u5ba2\u6237\u7aef\u53d1\u9001\u7684 b\"\" \u7a7a\u6570\u636e, \u670d\u52a1\u7aef\u662f\u6536\u4e0d\u5230\u7684, \u670d\u52a1\u7aef\u5c31\u4f1a\u4e00\u76f4\u963b\u585e\u5728 conn.recv(1024) \u6b64\u5904, \u50bb\u4e0d\u62c9\u51e0\u7684\u7b49\u5f85\u5ba2\u6237\u7aef\u53d1\u6d88\u606f\u8fc7\u6765,\u4e5f\u5c31\u4e0d\u4f1a\u53d1\u6d88\u606f\u7ed9\u5ba2\u6237\u7aef!! \u7b80\u5355\u6765\u8bf4, \u6b63\u5e38\u60c5\u51b5\u4e0b ,\u5ba2\u6237\u7aef\u53d1\u9001\u7684 b\"\" \u6570\u636e,\u670d\u52a1\u7aef\u63a5\u6536\u4e0d\u5230, \u670d\u52a1\u7aef\u53ea\u4f1a \u201c\u63a5\u6536\u5230\u201d \u5927\u4e8e0bytes\u7684\u6570\u636e!! !! \u770b\u6837\u5b50\u662f\u670d\u52a1\u7aef\u6ca1\u53d1\u6570\u636e,\u5b9e\u5219\u8be5\u95ee\u9898bug\u7684\u89e6\u53d1\u8005/\u6839\u6e90\u5728\u4e8e\u5ba2\u6237\u7aef...Hhh \u89e3\u51b3\u65b9\u6848: send\u4e4b\u524d\u52a0\u4e2a\u5224\u65ad,\u675c\u7edd\u5ba2\u6237\u7aef\u53d1\u7a7a\u6570\u636e \"\"\" \u2605 -- \u5ba2\u6237\u7aef \"\"\" import socket phone = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) phone . connect (( '127.0.0.1' , 8080 )) while True : msg = input ( '>>: ' ) . strip () if not msg : continue # -- \u5224\u65ad phone . send ( msg . encode ( 'utf8' )) data = phone . recv ( 1024 ) print ( '\u6765\u81ea\u670d\u52a1\u7aef\u7684\u6570\u636e:' , data ) phone . close ()","title":"\u5ba2\u6237\u7aef\u53d1\u7a7aBUG"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/1_TCP%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/#_13","text":"\u5148\u660e\u767d\u4e24\u70b9: msg\u6570\u636e\u662f\u5b58\u5728\u4e8e\u5e94\u7528\u7a0b\u5e8f\u81ea\u4e2a\u513f\u7684\u5185\u5b58\u4e2d\u7684! \u5ba2\u6237\u7aef\u8f6f\u4ef6\u9700\u8c03\u7528 '\u786c\u4ef6'\u7f51\u5361\u5c06msg\u6570\u636e\u6cbf\u7740\u7f51\u7ebf\u9001\u5230\u670d\u52a1\u7aef,\u4f46\u5e94\u7528\u7a0b\u5e8f/\u5ba2\u6237\u7aef\u4e0d\u80fd\u76f4\u63a5\u64cd\u4f5c\u786c\u4ef6.. 1> \u5ba2\u6237\u7aef\u6267\u884c send()\u65b9\u6cd5 \u5c06< \u81ea\u5df1\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5185\u5b58 \u91cc\u7684msg\u6570\u636e> \u62f7\u8d1d\u7ed9 <\u64cd\u4f5c\u7cfb\u7edf \u7f13\u5b58 \"cache?\"> \u7531\u5ba2\u6237\u7aef\u64cd\u4f5c\u7cfb\u7edf\u57fa\u4e8eTCP\u534f\u8bae\u8c03\u7f51\u5361\u901a\u8fc7\u7f51\u7edc\u4f20\u8f93\u6570\u636e\u7ed9\u670d\u52a1\u7aef. \u670d\u52a1\u7aef\u7684OS\u6536\u5230\u4f1a\u57fa\u4e8eTCP\u534f\u8bae\u56de\u4e00\u4e2a\u4fe1\u606f,\u5ba2\u6237\u7aefOS\u91cc\u7684msg\u6570\u636e\u5c31\u53ef\u4ee5\u6e05\u9664\u6389\u5566! 2> \u670d\u52a1\u7aef\u7684recv()\u4f1a\u4ece\u670d\u52a1\u7aef\u7684\u64cd\u4f5c\u7cfb\u7edf\u7f13\u5b58\u4e2d\u526a\u5207/\u76f4\u63a5\u62ff\u4ece\u5ba2\u6237\u7aef\u4f20\u9001\u8fc7\u6765\u7684msg\u6570\u636e. \u51c6\u786e\u70b9\u6765\u8bf4,\u670d\u52a1\u7aef\u8f6f\u4ef6\u662f\u4e00\u4e2a\u8fdb\u7a0b,OS\u8f6f\u4ef6\u4e5f\u662f\u4e00\u4e2a\u8fdb\u7a0b,OS\u662f\u62f7\u8d1d\u6570\u636e\u7ed9\u5ba2\u6237\u7aef,\u62f7\u8d1d\u540eOS\u4f1a\u81ea\u52a8\u5c06\u62f7\u8d1d\u7684\u8fd9\u90e8\u5206\u6570\u636e\u9500\u6bc1.. \u6240\u4ee5\u770b\u8d77\u6765\u662f\u76f4\u63a5\u62ff\u7684. \u5e94\u7528\u7a0b\u5e8f\u91cc\u7684\u6570\u636e (\u5ba2\u6237\u7aef\u4ea7\u751f\u7684/\u670d\u52a1\u7aef\u63a5\u6536\u7684 msg\u6570\u636e) ,\u82e5\u6ca1\u6709\u7ed1\u5b9a\u4efb\u4f55\u7684\u53d8\u91cf\u540d,gc\u673a\u5236\u4f1a\u81ea\u52a8\u56de\u6536! \u6ce8\u610f: \u57fa\u4e8eTCP\u534f\u8bae,\u5ba2\u6237\u7aef\u64cd\u4f5c\u7cfb\u7edf\u7f13\u5b58\u4e2d\u7684msg\u6570\u636e\u8981\u7b49\u670d\u52a1\u7aef\u56de\u590d\u76f8\u5e94\u7684\u786e\u8ba4\u53f7\u540e\u624d\u4f1a\u6e05\u9664..\u6240\u4ee5TCP\u53ef\u9760. \u7279\u522b\u5f3a\u8c03! \u4e0d\u662f\u4e00\u53d1\u5bf9\u5e94\u4e00\u6536,\u53d1\u6536\u90fd\u8ddf\u5bf9\u65b9\u4e0d\u6cbe\u8fb9!\u53d1\u662f\u53d1\u7ed9\u81ea\u5df1\u7684\u64cd\u4f5c\u7cfb\u7edf,\u6536\u4e5f\u662f\u4ece\u81ea\u5df1\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u6536! Ps: UDP\u53d1\u6536\u4e5f\u662f\u4e0eOS\u4ea4\u4e92,\u4f46\u4e0eTCP\u4e0d\u540c\u7684\u4e00\u70b9\u5728\u4e8e,UDP\u4e0d\u53ef\u9760,OS\u5c06\u6570\u636e\u53d1\u9001\u4e86,OS\u7f13\u5b58\u4e2d\u7684\u8be5\u6570\u636e\u5c31\u76f4\u63a5\u5220\u9664\u4e86..\u53ef\u4e0d\u4f1a\u7ba1\u8be5\u6570\u636e\u53ef\u4e0d\u53ef\u8fbe.. \u518d\u6b21\u5206\u6790, \"\u5ba2\u6237\u7aef\u53d1\u7a7aBUG\".. \u5ba2\u6237\u7aefsend\u62f7\u8d1d\u4e00\u4e2a\u7a7a\u7684bytes\u5b57\u7b26\u4e32\u7ed9\u5ba2\u6237\u7aef\u7684\u64cd\u4f5c\u7cfb\u7edf\u5185\u5b58.. \u5ba2\u6237\u7aefOS\u76f4\u63a5\u539f\u5730\u95ee\u53f7..\u6709\u4e1c\u897f\u5417?\u6ca1\u6709,\u538b\u6839\u4e0d\u4f1a\u8fdb\u884c\u4efb\u4f55\u7f51\u7edc\u4f20\u8f93\u7684\u64cd\u4f5c.. \u670d\u52a1\u7aef\u4e00\u76f4\u82e6\u82e6\u7b49\u5f85\u670d\u52a1\u7aef\u64cd\u4f5c\u7cfb\u7edf\u5185\u5b58\u63a5\u6536\u5230\u7684\u6570\u636e.. \u670d\u52a1\u7aef\u7eaf\u7eaf\u5927\u6028\u79cdHhhh","title":"\u5e95\u5c42\u539f\u7406"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2_TCP%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/","text":"\u5148\u7779\u4e3a\u5feb! TCP\u534f\u8bae\u7684nagle\u7b97\u6cd5\u4f1a\u5c06\u6570\u636e\u91cf\u8f83\u5c0f,\u5e76\u4e14\u53d1\u9001\u65f6\u95f4\u95f4\u9694\u8f83\u77ed\u7684\u591a\u4e2a\u6570\u636e\u5305\u5408\u5e76\u4e3a\u4e00\u4e2a\u53d1\u9001! \u8be5\u7b97\u6cd5\u4f18\u5316\u4e86\u4f20\u8f93\u6548\u7387,\u51cf\u5c11\u4e86\u7f51\u7edcIO..\u4f46\u4ea7\u751f\u4e86\u7c98\u5305\u95ee\u9898. \u63a5\u6536\u7aef\u65e0\u6cd5\u533a\u5206\u5408\u5728\u4e00\u8d77\u7684\u591a\u4e2a\u6570\u636e\u5305\u7684\u754c\u9650. \u5982\u4f55\u89e3\u51b3\u7c98\u5305\u95ee\u9898? \u81ea\u5b9a\u4e49\u62a5\u5934 \u6709\u5f88\u591a\u79cd\u65b9\u5f0f\u81ea\u5b9a\u4e49\u62a5\u5934(\u4e5f\u4e0d\u4e00\u5b9a\u56fa\u5b9a\u957f\u5ea6) \u628a\u63e1\u4e00\u4e2a\u6838\u5fc3\u7cbe\u9ad3,\u5728\u53d1\u9001\u771f\u5b9e\u6570\u636e\u4e4b\u524d\u8981\u628a\u62a5\u5934\u9001\u5230\u5bf9\u65b9. \u2605\u2606\u2605\u2606\u2605\u2606 \"\u62a5\u5934 + \u6570\u636e\" \u63a5\u6536\u7aef\u5e94\u8be5\u60f3\u65b9\u8bbe\u6cd5\u5148\u628a\u62a5\u5934\u90e8\u5206\u7cbe\u51c6\u62ff\u5230!!! \u5177\u4f53\u6765\u8bf4,\u7531\u4e8e\u62a5\u5934\u548c\u8981\u53d1\u9001\u7684\u6570\u636e\u90fd\u662f\u5c5e\u4e8eTCP\u534f\u8bae\u7684\u4e00\u90e8\u5206.\u4e5f\u662f\u4f1a\u7c98\u5230\u4e00\u8d77\u7684. \u5236\u4f5c\u62a5\u5934,\u5c06\u62a5\u5934\u8f6c\u6362\u6210bytes\u7c7b\u578b\u53d1\u9001\u5f88\u5bb9\u6613\u5b9e\u73b0,\u5173\u952e\u662f\u63a5\u6536\u7aef\u8981\u5148\u5c06\u62a5\u5934\u51c6\u786e\u7684\u63a5\u6536\u5230.. \u5728\u672c\u7ae0\u8282\u4e2d\u662f\u5c06\u62a5\u5934\u7684\u957f\u5ea6\u505a\u62104\u4e2abytes\u53d1\u9001\u7ed9\u5bf9\u65b9,\u63a5\u6536\u7aef\u5148\u63a5\u6536\u8fd94\u4e2abytes\u7684\u6570\u636e,\u89e3\u51fa\u62a5\u5934\u7684\u957f\u5ea6..\u518d\u63a5\u6536\u62a5\u5934. HTTP\u534f\u8bae\u7684\u5b9e\u73b0\u8fc7\u7a0b\u4e0d\u5927\u4e00\u6837,\u4f46\u6838\u5fc3\u601d\u60f3\u662f\u4e00\u6837\u7684!\u5148\u6765\u4e00\u4e2a\u62a5\u5934(\u91cc\u9762\u5305\u542b\u4e86\u6570\u636e\u6709\u591a\u957f),\u518d\u6765\u771f\u5b9e\u7684\u6570\u636e. HTTP\u534f\u8bae\u5982\u4f55\u5b9e\u73b0\u7684\u5462\uff1f\u5047\u5982\u4e0b\u8f7d\u4e00\u4e2aA\u6587\u4ef6. \u5148\u628a\u62a5\u5934\u548c\u6570\u636e\u7c98\u5728\u4e00\u8d77\u5f80\u63a5\u6536\u7aef\u53d1,\u53ea\u4e0d\u8fc7\u62a5\u5934\u8ddf\u771f\u5b9e\u6570\u636e\u4e4b\u95f4\u6765\u4e86\u4e24\u4e2a\u56de\u8f66. \u63a5\u6536\u7aef\u53ef\u4ee5\u5148\u4e00\u4e2a\u5b57\u8282\u4e00\u4e2a\u5b57\u8282\u7684\u6536,\u76f4\u5230\u6536\u5230\u8fde\u7eed\u4e24\u4e2a\u5b57\u8282\u90fd\u662f\u56de\u8f66,\u90a3\u5c31\u8bc1\u660e\u62a5\u5934\u5df2\u7ecf\u6536\u5b8c\u4e86. \u518d\u6839\u636e\u62a5\u5934\u4fe1\u606f(\u91cc\u9762\u6709A\u6587\u4ef6\u7684\u957f\u5ea6\u4fe1\u606f)\u628aA\u6587\u4ef6\u5b8c\u6574\u7684\u6570\u636e\u4e00\u6b21\u6027\u6536\u5e72\u51c0. TCP\u534f\u8bae\u79f0\u4e3a\u6d41\u5f0f\u534f\u8bae.\u7cbe\u9ad3\u5728\u4e8e\u6d41stream!!\u987e\u540d\u601d\u4e49,\u50cf\u6d41\u6c34\u4e00\u6837\u4f20\u8f93\u6570\u636e. TCP\u5c31\u4e00\u80a1\u8111\u7684\u4f20\u771f\u5b9e\u6570\u636e. \u4f20\u8f93\u8fc7\u7a0b\u6d89\u53ca\u6ed1\u52a8\u7a97\u53e3\u673a\u5236\u3001\u5e8f\u5217\u53f7\u3001\u505c\u6b62\u7b49\u5f85\u8fd4\u56deACK\u7b49\u7b49. \u53d1\u9001\u65b9\u5f15\u8d77\u7684\u7c98\u5305\u662f\u7531TCP\u534f\u8bae\u672c\u8eab\u9020\u6210\u7684,TCP\u4e3a\u63d0\u9ad8\u4f20\u8f93\u6548\u7387,\u53d1\u9001\u65b9\u5f80\u5f80\u8981\u6536\u96c6\u5230\u8db3\u591f\u591a\u7684\u6570\u636e\u540e\u624d\u53d1\u9001\u4e00\u4e2aTCP\u6bb5. 1> \u82e5\u8fde\u7eed\u5bf9\u6b64send\u7684\u6570\u636e\u91cf\u5c0f\u4e14\u95f4\u9694\u77ed,\u4f1a\u7528nagle\u7b97\u6cd5.\u63a5\u6536\u7aef\u6536\u5230\u7684\u662f\u7c98\u5305\u6570\u636e. 2> \u82e5\u4f20\u8f93\u4e00\u4e2a\u5927\u6587\u4ef6,\u4f1a\u5206\u6bb5.\u53d1\u9001\u65f6\u6587\u4ef6\u5185\u5bb9\u662f\u6309\u7167\u4e00\u6bb5\u4e00\u6bb5\u7684\u5b57\u8282\u6d41\u53d1\u9001\u7684, \u5728\u63a5\u6536\u65b9\u770b\u6765,\u6839\u672c\u4e0d\u77e5\u9053\u8be5\u6587\u4ef6\u7684\u5b57\u8282\u6d41\u4ece\u4f55\u5904\u5f00\u59cb,\u5728\u4f55\u5904\u7ed3\u675f \u63d0\u9192:\u7c98\u5305\u95ee\u9898,\u6ce8\u610f\u601d\u8003\u4e0bTCP\u4e24\u7aef\u6536\u53d1\u7684\u6570\u636e\u91cf. -- <\u4e24\u79cd\u7c98\u5305\u60c5\u51b5>!! \u89e3\u51b3\u7c98\u5305,\u4f1a\u4eba\u4e3a\u7684\u52a0\u62a5\u5934. \u6a21\u62dfssh\u8fdc\u7a0b\u6267\u884c\u547d\u4ee4 \u00b6 SSH\u662f\u4e00\u79cd\u7f51\u7edc\u534f\u8bae \u53ef\u5b9e\u73b0\u4e24\u4e2a\u8bbe\u5907\u4e4b\u95f4\u7684\u5b89\u5168\u901a\u4fe1, \u901a\u5e38\u7528\u4e8e\u8bbf\u95ee\u8fdc\u7a0b\u670d\u52a1\u5668\u4ee5\u53ca\u4f20\u8f93\u6587\u4ef6\u6216\u6267\u884c\u547d\u4ee4.. \u57fa\u672c\u5b9e\u73b0 \u00b6 \"\"\" \u2605 -- \u670d\u52a1\u7aef \"\"\" import subprocess from socket import * IP_PORT = ( '127.0.0.1' , 8080 ) BUFSIZE = 1024 server = socket ( AF_INET , SOCK_STREAM ) server . setsockopt ( SOL_SOCKET , SO_REUSEADDR , 1 ) server . bind ( IP_PORT ) server . listen ( 5 ) while True : conn , client_addr = server . accept () print ( \"\u8fde\u63a5\u7684C\u7aef:\" , client_addr ) while True : try : cmd = conn . recv ( BUFSIZE ) if not cmd : break print ( \"\u6765\u81eaC\u7aef\u7684\u6d88\u606f:\" , cmd ) obj = subprocess . Popen ( # -- \u63a5\u53d7\u5ba2\u6237\u7aef\u53d1\u8fc7\u6765\u7684\u5b57\u7b26\u4e32\u662fbytes\u6a21\u5f0f,\u56e0\u800c\u9700\u8981\u89e3\u7801; # \u5ba2\u6237\u7aef\u7528\u4ec0\u4e48\u7f16\u5c31\u7528\u4ec0\u4e48\u89e3(\u81ea\u5df1\u89c4\u5b9a\u7684\u554a) cmd . decode ( 'utf-8' ), shell = True , stderr = subprocess . PIPE , stdout = subprocess . PIPE ) # -- \u7cfb\u7edf\u547d\u4ee4\u7684\u8fd0\u884c\u7ed3\u679c\u5c31\u662fbytes\u7c7b\u578b\u7684,\u56fa\u5b9a\u4e86\u7684. stdout_res = obj . stdout . read () stderr_res = obj . stderr . read () print ( len ( stdout_res + stderr_res )) conn . send ( stdout_res + stderr_res ) # -- \u56de\u590dcmd\u547d\u4ee4\u7684\u6267\u884c\u7ed3\u679c except ConnectionResetError : break conn . close () server . close () \"\"\" \u2605 -- \u5ba2\u6237\u7aef \"\"\" from socket import * IP_PORT = ( '127.0.0.1' , 8080 ) BUFSIZE = 1024 client = socket ( AF_INET , SOCK_STREAM ) client . connect ( IP_PORT ) while True : cmd = input ( \">>: \" ) . strip () if not cmd : continue client . send ( cmd . encode ( 'utf-8' )) data = client . recv ( BUFSIZE ) # -- \u62ff\u5230subprocess\u6267\u884c\u7684\u7cfb\u7edf\u547d\u4ee4.. # \u7cfb\u7edf\u547d\u4ee4\u9700\u8981\u89e3\u7801(\u8ddf\u5e73\u53f0\u6709\u5173).windows gbk; mac utf-8 print ( data . decode ( 'utf-8' )) \"\"\" \u4e24\u4e2a\u6267\u884c\u6587\u4ef6\u6240\u5728\u7684\u76ee\u5f55\u7ed3\u6784 train \u251c\u2500\u2500 C \u2502 \u2514\u2500\u2500 \u5ba2\u6237\u7aef.py \u2514\u2500\u2500 S \u2514\u2500\u2500 \u670d\u52a1\u7aef.py \"\"\" \u6ce8\u610f\u54e6! \u5ba2\u6237\u7aef\u8f93\u5165\u7684\"pwd\"\u547d\u4ee4\u662f\u5728\u670d\u52a1\u7aef\u6267\u884c\u7684!! \u6240\u4ee5\u6253\u5370\u7684\u662f\"\u670d\u52a1\u7aef.py\"\u6240\u5728\u8def\u5f84!! \u800c\u4e0d\u662f\"\u5ba2\u6237\u7aef.py\"\u6240\u5728\u8def\u5f84!!! \u4e00\u4e9bBUG \u00b6 cd\u547d\u4ee4 \u00b6 \u5ba2\u6237\u7aef\u4e0d\u80fd\u8f93\u5165cd\u547d\u4ee4.. \u8f93\u5165\u540e,\u4f1a\u5728\u670d\u52a1\u7aef\u771f\u6b63\u7684\u6267\u884ccd\u547d\u4ee4.. \u5373\u670d\u52a1\u7aef\u4e0d\u80fd\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u6267\u884ccd\u547d\u4ee4 \u8981\u77e5\u9053, \u9879\u76ee\u4f1a\u4ee5\u6267\u884c\u6587\u4ef6\u5f53\u524d\u76ee\u5f55\u4e3a\u57fa\u51c6\u53bb\u751f\u6210\u73af\u5883\u53d8\u91cf.. \u5ba2\u6237\u7aef\u8f93\u5165\u7684cd\u547d\u4ee4\u4f1a\u8ba9\u670d\u52a1\u7aef\u7684\u6267\u884c\u6587\u4ef6\u628a\u81ea\u5df1\u7684\u5f53\u524d\u8def\u5f84\u7ed9\u5207\u6362\u6389.. \u7a0b\u5e8f\u4e2d\u6709\u5f88\u591a\u5730\u65b9\u7528\u7684\u662f\u6267\u884ccd\u547d\u4ee4\u4e4b\u524d\u7684\u73af\u5883\u53d8\u91cf,\u4e00\u65e6\u6267\u884ccd\u547d\u4ee4,\u7a0b\u5e8f\u5c31\u5d29\u4e86.. \u5b9e\u9a8c\u540e\u7684\u6548\u679c\u5c31\u662f\u5ba2\u6237\u7aef\u5728\u8f93\u5165cd\u547d\u4ee4\u540e,\u6ca1\u6709\u54cd\u5e94,\u8f93\u5165\u5176\u5b83\u4e5f\u4e0d\u4f1a\u6709\u4efb\u4f55\u54cd\u5e94,\u670d\u52a1\u7aef\u5d29\u6e83\u6389\u4e86.. \u89e3\u51b3\u65b9\u6848: \u670d\u52a1\u7aef\u65e0\u9700\u771f\u7684\u5207\u6362\u76ee\u5f55.\u4e5f\u80fd\u6a21\u62df\u51facd\u547d\u4ee4\u7684\u6548\u679c. \u5f53\u5ba2\u6237\u7aef\u6572cd\u547d\u4ee4\u65f6,\u670d\u52a1\u7aef\u53ef\u4ee5\u7528 current_dir\u53d8\u91cf \u8bb0\u5f55\u4e0b\u8981\u5207\u6362\u7684\u5230\u7684\u76ee\u5f55; \u5f53\u5ba2\u6237\u7aef\u6572ls\u547d\u4ee4\u7684\u65f6\u5019, \u670d\u52a1\u7aef\u8fd4\u56de \u67e5\u770bcurrent_dir\u8def\u5f84\u4e0b\u6587\u4ef6\u7ed3\u679c \u5373\u53ef.. \u5b9e\u65f6\u53cd\u9988\u7684\u547d\u4ee4 \u00b6 \u6bd4\u5982: linux\u4e0a\u7684top\u547d\u4ee4,\u9ed8\u8ba4\u6bcf\u96945\u79d2\u5237\u65b0\u4e00\u6b21. \u5f53\u524d\u8bbe\u8ba1\u7684\u7a0b\u5e8f\u53ea\u80fd\u6267\u884c\u7acb\u9a6c\u6709\u7ed3\u679c\u7684\u547d\u4ee4... top\u547d\u4ee4\u6bcf\u96945s\u5237\u65b0\u4e00\u6b21, \u610f\u5473\u7740\u6b64\u547d\u4ee4\u4e00\u76f4\u5728\u8fd0\u884c,\u6c38\u8fdc\u6267\u884c\u4e0d\u5b8c.. \u670d\u52a1\u7aef\u5c31\u62ff\u4e0d\u5230\u547d\u4ee4\u4ea7\u751f\u7684\u7ed3\u679c! \u5ba2\u6237\u7aef\u8f93\u5165 python \u8fd9\u79cd \u4e0d\u80fd\u4ea7\u751f\u7ed3\u679c\u7684\u547d\u4ee4 \u4e5f\u662f\u4e0dok\u7684.. \u6211\u4eec\u76ee\u524d\u8bbe\u8ba1\u7684\u7a0b\u5e8f\u4e5f\u65e0\u6cd5\u6267\u884c!!! \u6682\u4e14\u4e0d\u8981\u8003\u8651\u600e\u4e48\u89e3\u51b3\u5566, \u6211\u4eec\u91cd\u70b9\u5728\u4e8e\u89e3\u51b3\u8be5\u7a0b\u5e8f\u7684\u7c98\u5305\u95ee\u9898!! \u5236\u9020\u7c98\u5305\u73b0\u8c61 \u00b6 \u7c98\u5305\u95ee\u9898\u4e3b\u8981\u8fd8\u662f\u56e0\u4e3a\u63a5\u6536\u65b9\u4e0d\u77e5\u9053\u6d88\u606f\u4e4b\u95f4\u7684\u754c\u9650,\u4e0d\u77e5\u9053\u4e00\u6b21\u6027\u63d0\u53d6\u591a\u5c11\u5b57\u8282\u7684\u6570\u636e\u6240\u9020\u6210\u7684 \u8fde\u63a5\u7684C\u7aef : ( '127.0.0.1' , 58299 ) \u6765\u81eaC\u7aef\u7684\u6d88\u606f : b 'ifconfig' 2348 \u6765\u81eaC\u7aef\u7684\u6d88\u606f : b 'ls' 13 Ps: \u8be5\u5b9e\u9a8c\u9ed8\u8ba4\u547d\u4ee4\u7684\u5927\u5c0f\u4e0d\u4f1a\u8d85\u8fc71024bytes.. \u7c98\u5305\u73b0\u8c61,\u5ba2\u6237\u7aef\u5148\u8f93\u5165\u547d\u4ee4 ifconfig , \u518d\u8f93\u5165\u547d\u4ee4\u547d\u4ee4 ls \u4f1a\u53d1\u73b0\u5ba2\u6237\u7aef\u6253\u5370\u7684\u7ed3\u679c\u4e0d\u662fls\u547d\u4ee4\u7684\u7ed3\u679c!! \u800c\u662f\u4e0a\u4e00\u6b21\u6ca1\u6253\u5370\u5b8c\u7684 ifconfig \u547d\u4ee4\u7684\u7ed3\u679c!! Hhh \u5f97\u5230\u7684\u547d\u4ee4\u7ed3\u679c\u76f4\u63a5\u4e71\u5957 ugly\u7684\u9519\u8bef\u60f3\u6cd5 \u00b6 \u63a5\u6536\u5b57\u8282\u6570\u65e0\u9650\u5927 \u00b6 \u6211\u4eec\u5f88\u5bb9\u6613\u60f3\u5230\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848, \u5c06C\u5ba2\u6237\u7aef\u7684\u5957\u63a5\u5b57\u5bf9\u8c61client\u7684recv()\u65b9\u6cd5\u63a5\u6536\u7684\u5b57\u8282\u6570\u8c03\u5927.. \u4fee\u6539\u4ee3\u7801 client.recv(1024) \u4e3a client.recv(1024000000) , \u63a5\u6536\u6570\u636e\u7684\u5927\u5c0f\u76f4\u63a5\u4ece1024\u5b57\u8282\u957f\u52301\u4e2aG!! \u547d\u4ee4\u7684\u7ed3\u679c\u51e0\u4e4e\u4e0d\u53ef\u80fd\u4f1a\u8d85\u8fc71\u4e2aG\u7684\u5927\u5c0f,\u8be5\u7a0b\u5e8f\u7684\u7c98\u5305\u95ee\u9898\u5f97\u5230\u4e86\u5b8c\u7f8e\u89e3\u51b3!! \u4f46\u662f \u4f20\u6587\u4ef6\u7684\u539f\u7406\u8ddf\u6267\u884c\u547d\u4ee4\u7684\u539f\u7406\u57fa\u672c\u662f\u4e00\u81f4\u7684!! \u6587\u4ef6\u7684\u5927\u5c0f\u662f\u6781\u6709\u53ef\u80fd\u8d85\u8fc71\u4e2aG\u7684.. \u600e\u4e48\u529e\u5462\uff1f\u7ee7\u7eed\u8c03\u6574recv()\u7684\u63a5\u6536\u5b57\u8282\u7684\u5927\u5c0f\u5417? \u5f53\u6211\u4eec\u4fee\u6539\u7a0b\u5e8f\u4e3a client.recv(1024000000). \u8c03\u6574\u5ba2\u6237\u7aef\u63a5\u6536\u7684\u6570\u636e\u5927\u5c0f\u4e3a10G.. \u6267\u884c\u5ba2\u6237\u7aef\u7a0b\u5e8f\u65f6\u62a5\u9519: Traceback ( most recent call last ): File \"/Users/One_Piece/Desktop/train/\u6a21\u62dfssh/C/\u5ba2\u6237\u7aef.py\" , line 10 , in < module > data = client . recv ( 10240000000 ) OSError : [ Errno 22 ] Invalid argument # -- windows\u4e0a\u4f1a\u62a5MemoryError\u7684\u9519\u8bef!! \u62a5\u9519\u5206\u6790: recv\u672c\u8d28\u662f\u5728\u5411\u81ea\u5df1\u7684OS\u7f13\u5b58\u8981\u6570\u636e,OS\u7f13\u5b58\u5360\u7528\u7684\u662f\u5185\u5b58\u7a7a\u95f4, OS\u7f13\u5b58\u7684\u5927\u5c0f\u518d\u5927\u4e5f\u4e0d\u4f1a\u8d85\u8fc7\u5185\u5b58\u7684\u5927\u5c0f.. \u8fd8\u8981\u6ce8\u610f,\u4e4b\u6240\u4ee5\u53eb\u7f13\u5b58\u662f\u56e0\u4e3a\u5185\u5b58\u4e0d\u53ef\u80fd\u5c06\u5168\u90e8\u7a7a\u95f4\u7528\u4e8e\u6536\u6570\u636e\u8fd9\u4ef6\u4e8b\u60c5..\u5185\u5b58\u8fd8\u8981\u817e\u51fa\u7a7a\u95f4\u8fd0\u884c\u8f6f\u4ef6\u7b49. \u6240\u4ee5 client.recv() \u8bbe\u7f6e\u7684\u5b57\u8282\u6570\u65e0\u9650\u5927\u662f\u6ca1\u6709\u610f\u4e49\u7684, \u662f\u65e0\u6548\u7684!! \u5355\u7eaf\u7684\u5faa\u73af\u63a5\u6536 \u00b6 Q: \u90a3\u4e48\u6211\u4eec\u8bbe\u7f6e\u4e2a\u5faa\u73af,\u4e00\u76f4\u6536,\u76f4\u5230\u6536\u5e72\u51c0\u4e3a\u6b62. \u53ef\u884c\u5417\uff1f(\u4ee3\u7801\u5982\u4e0b) A: \u5ba2\u6237\u7aef\u4e00\u76f4recv\u4eceOS\u7f13\u5b58\u4e2d\u53d6\u6570\u636e,\u5f53recv\u53d1\u73b0OS\u7f13\u5b58\u4e2d\u6ca1\u6709\u6570\u636e\u540e,\u4f1a\u4e00\u76f4\u5728\u90a3\u6b7b\u7b49.. Ps: \u5f53\u670d\u52a1\u7aef\u7ec8\u6b62\u8fd0\u884c\u540e,\u5ba2\u6237\u7aef\u4f1a\u6536\u5230\u4e00\u4e2a b\" \" \u7684\u5b57\u8282\u6570\u636e. from socket import * client = socket ( AF_INET , SOCK_STREAM ) client . connect (( '127.0.0.1' , 8080 )) while True : cmd = input ( \">>: \" ) . strip () if not cmd : continue client . send ( cmd . encode ( 'utf-8' )) while True : # -- \u6b64\u5faa\u73af\u51fa\u4e0d\u6765,\u4e00\u76f4\u6b7b\u7b49. data = client . recv ( 1024 ) print ( data . decode ( 'utf-8' )) if len ( data ) == 0 : break \u63d0\u9192\u4e00\u4e0b, client.recv(1024) \u5e76\u4e0d\u610f\u5473\u7740\u4e00\u76f4\u4eceOS\u5185\u5b58\u4e2d\u5faa\u73af\u53d61024\u4e2a\u5b57\u8282\u6570\u636e,\u76f4\u5230\u6700\u540e\u4e00\u6b21\u53d6\u7684\u6570\u636e\u5c0f\u4e8e1024\u5b57\u8282,\u5c06OS\u7f13\u5b58\u4e2d\u7684\u6570\u636e\u53d6\u5b8c.. \u8fd9\u6837\u7406\u89e3\u662f\u9519\u8bef\u7684!! 1024\u53ea\u610f\u5473\u7740\u4e00\u6b21\u4eceOS\u7f13\u5b58\u4e2d\u53d6\u6570\u636e\u5927\u5c0f\u7684 \u6700\u5927\u9650\u5236 \u662f1024\u5b57\u8282. TCP\u662f\u6d41\u5f0f\u534f\u8bae,TCP\u53ef\u4ee5\u8fde\u7eed\u53d1\u9001\u591a\u4e2a\u6570\u636e\u6bb5,\u5177\u4f53\u53d1\u9001\u6570\u636e\u6bb5\u7684\u591a\u5c11\u53d6\u51b3\u4e8e\u5bf9\u65b9\u8fd4\u56de\u7684\u7a97\u53e3\u5927\u5c0f.. \u5047\u5982\u670d\u52a1\u7aef\u7684\u547d\u4ee4\u7ed3\u679c\u4f1a\u5206\u4e3a\u4e09\u4e2a\u6570\u636e\u6bb5\u4f20\u7ed9\u5ba2\u6237\u7aef,\u4f9d\u6b21\u662f800bytes\u3001500bytes\u30011300bytes.\u56e0\u4e3a\u7f51\u7edc\u539f\u56e0\u5230\u8fbe\u5ba2\u6237\u7aefOS\u7f13\u5b58\u7684\u65f6\u95f4\u6709\u95f4\u9694. \u90a3\u4e48\u524d\u9762\u4e24\u6b21\u5ba2\u6237\u7aef\u4eceOS\u7f13\u5b58\u4e2d\u53d6\u7684\u6570\u636e\u5c31\u4f1a\u5c0f\u4e8e1024\u5b57\u8282.. (\u8fc7\u7a0b\u4e0d\u4e25\u8c28,\u8ddfTCP\u5177\u4f53\u7684\u7a97\u53e3\u673a\u5236\u6709\u5173,\u4e0d\u6df1\u7a76,\u4f46\u60f3\u8868\u8fbe\u7684\u610f\u601d\u662f\u5230\u4f4d\u4e86\u7684.) \u4e0d\u5b8c\u7f8e\u7684\u89e3\u51b3\u65b9\u6848 \u00b6 \u89e3\u51b3\u7c98\u5305\u73b0\u8c61\u7684\u5173\u952e\u5728\u4e8e: \u5728\u53d1\u9001\u771f\u5b9e\u6570\u636e\u4e4b\u524d\u5148\u628a\u6b64\u6b21\u6570\u636e\u7684\u76f8\u5173\u4fe1\u606f(\u957f\u5ea6)\u901a\u77e5\u7ed9\u5bf9\u65b9 \u5148\u4f20\u8f93\u4e00\u4e2a \u56fa\u5b9a\u957f\u5ea6\u7684\u62a5\u5934 !!! \u8865\u5145: struct\u6a21\u5757 \u00b6 struct\u6a21\u5757 \u53ef\u4ee5\u5c06<\u6574\u5f62\u7684\u6570\u636e>\u8f6c\u6210<\u56fa\u5b9a\u957f\u5ea6\u7684bytes\u7c7b\u578b\u7684\u6570\u636e> import struct # -- pack\u6253\u5305 \u5176\u53c2\u6570: (\u683c\u5f0f,\u6574\u578b\u6570\u5b57) # i\u683c\u5f0f \u8868\u793a\u5c06\u540e\u9762\u7684\u6574\u578b\u6570\u5b57\u8f6c\u6210bytes\u7c7b\u578b \u5e76\u4e14\u8fd9\u4e2abytes\u7c7b\u578b\u6570\u636e\u7684\u56fa\u5b9a\u957f\u5ea6\u4e3a4 header = struct . pack ( 'i' , 128 ) # b'\\x80\\x00\\x00\\x00' <class 'bytes'> 4 print ( header , type ( header ), len ( header )) # -- unpack\u89e3\u5305 \u5176\u53c2\u6570: (\u683c\u5f0f,\u5b57\u8282\u4e32) obj = struct . unpack ( 'i' , header ) # (128,) -- \u5176\u7ed3\u679c\u662f\u5143\u7956 print ( obj ) total_size = struct . unpack ( 'i' , header )[ 0 ] # -- \u6211\u4eec\u9700\u8981\u7684\u662f\u5143\u7956\u91cc\u7684\u7b2c\u4e00\u4e2a\u6570\u636e \u6572\u9ed1\u677f: \u683c\u5f0f\u4e0d\u540c,\u6240\u80fd\u652f\u6301\u7684\u6574\u578b\u6570\u5b57\u7684\u5927\u5c0f\u4e5f\u4e0d\u4e00\u6837!\u8d85\u51fa\u8303\u56f4\u4f1a\u62a5\u9519 (\u6b64\u65b9\u6848\u4e0d\u5b8c\u7f8e\u7684\u5730\u65b9\u4e4b\u4e00) struct.error:argument out of range \u62a5\u5934+\u8f83\u5c0f\u5355\u4f4d\u5faa\u73af \u00b6 \u5148\u63a5\u53d7 \u56fa\u5b9a\u957f\u5ea6 \u7684bytes\u7c7b\u578b\u7684\u62a5\u5934, \u518d\u4ee5\u8f83\u5c0f\u7684\u5355\u4f4d\u5faa\u73af\u6536,\u76f4\u5230\u6536\u5e72\u51c0\u4e3a\u6b62.. \u670d\u52a1\u7aef \u00b6 import struct import subprocess from socket import * server = socket ( AF_INET , SOCK_STREAM ) server . setsockopt ( SOL_SOCKET , SO_REUSEADDR , 1 ) server . bind (( '127.0.0.1' , 8080 )) server . listen ( 5 ) while True : conn , client_addr = server . accept () print ( \"\u8fde\u63a5\u7684C\u7aef:\" , client_addr ) while True : try : \"\"\" \u63d0\u9192\u4e00\u4e0b\u4e0b: recv()\u7684\u53c2\u6570\u503c\u901a\u5e38\u8bbe\u7f6e\u4e00\u6b21\u4eceOS\u7f13\u5b58\u4e2d\u53d6\u6570\u636e\u7684\u5927\u5c0f\u4e3a1024bytes. \u8bbe\u7f6e\u7684\u503c\u6700\u597d\u4e0d\u8981\u8d85\u8fc78096,\u4e00\u822c\u6765\u8bf4\u64cd\u4f5c\u7cfb\u7edf\u7684\u7f13\u5b588096\u5c31\u662f\u6781\u9650\u5566.. \"\"\" cmd = conn . recv ( 1024 ) if not cmd : break print ( \"\u6765\u81eaC\u7aef\u7684\u6d88\u606f:\" , cmd ) obj = subprocess . Popen ( cmd . decode ( 'utf-8' ), shell = True , stderr = subprocess . PIPE , stdout = subprocess . PIPE ) stdout_res = obj . stdout . read () stderr_res = obj . stderr . read () \"\"\" TCP\u662f\u6d41\u5f0f\u534f\u8bae \u4e09\u6761send\u8bed\u53e5\u7684\u6570\u636e\u4f1a\u4f9d\u6b21\u6d41\u5230\u81ea\u5df1\u7684OS\u7f13\u5b58\u4e2d <\"\u7c98\u5230\u4e00\u8d77\">\u50cf\u6c34\u6d41\u4e00\u6837<\"\u6e90\u6e90\u4e0d\u65ad\">\u7684\u6d41\u5411\u5ba2\u6237\u7aef \"\"\" # -- step1:\u5148\u5236\u4f5c\u62a5\u5934,\u56fa\u5b9a\u957f\u5ea6 # \u5c06\u6574\u5f62\u7684total_size\u6570\u636e\u8f6c\u6210\u56fa\u5b9a\u957f\u5ea6\u7684bytes\u7c7b\u578b\u7684\u6570\u636e total_size = len ( stdout_res + stderr_res ) print ( total_size ) header = struct . pack ( 'i' , total_size ) # -- step2:\u5148\u53d1\u56fa\u5b9a\u957f\u5ea6\u7684\u62a5\u5934 conn . send ( header ) # -- step3:\u518d\u53d1\u771f\u5b9e\u7684\u6570\u636e # -- conn.send(stdout_res + stderr_res) # +\u53f7\u8868\u660e\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u5185\u5b58\u7a7a\u95f4\u5c06\u52a0\u53f7\u5de6\u53f3\u7684\u5185\u5bb9\u62ff\u8fc7\u6765,\u76f8\u5f53\u4e8e\u62f7\u8d1d\u4e86\u4e00\u904d,\u6548\u7387\u95ee\u9898 # \u4f18\u5316\u4e0b,\u89e3\u51b3\u65b9\u6848:\u8fde\u7eed\u53d1\u4e24\u6b21 conn . send ( stdout_res ) # -- \u53d1\u9001\u771f\u5b9e\u7684\u6570\u636e conn . send ( stderr_res ) # -- \u53d1\u9001\u771f\u5b9e\u7684\u6570\u636e except ConnectionResetError : break conn . close () server . close () \u5ba2\u6237\u7aef \u00b6 import struct from socket import * client = socket ( AF_INET , SOCK_STREAM ) client . connect (( '127.0.0.1' , 8080 )) while True : cmd = input ( \">>: \" ) . strip () if not cmd : continue client . send ( cmd . encode ( 'utf-8' )) # -- step1:\u5148\u6536\u56fa\u5b9a\u957f\u5ea6\u7684\u62a5\u5934 header = client . recv ( 4 ) # -- step2:\u4ece\u62a5\u5934\u4e2d \u89e3\u6790/\u53cd\u89e3 \u51fa\u5bf9\u6570\u636e\u7684\u63cf\u8ff0\u4fe1\u606f total_size = struct . unpack ( 'i' , header )[ 0 ] # -- step3:\u518d\u6536\u771f\u5b9e\u7684\u6570\u636e recv_size = 0 res_data = b \"\" while recv_size < total_size : data = client . recv ( 1024 ) res_data += data recv_size += len ( data ) print ( res_data . decode ( 'utf-8' )) perfect\u7684\u89e3\u51b3\u65b9\u6848 \u00b6 \u62a5\u5934\u7684\u5236\u4f5c \u00b6 \u4e0a\u9762\u7684\u89e3\u51b3\u65b9\u6848\u6709\u4e24\u4e2a\u5f0a\u7aef: 1> struct.pack('i', \u6574\u578b\u6570\u5b57) \u53c2\u6570\u4e2d\u6574\u578b\u6570\u5b57\u7684\u5927\u5c0f,\u53ef\u80fd\u975e\u5e38\u5927, i q\u683c\u5f0f\u90fd\u4e0d\u597d\u4f7f. 2> \u62a5\u5934\u662f\u5bf9\u6570\u636e\u6709\u63cf\u8ff0\u6027\u7684\u529f\u80fd, \u4e0a\u9762\u7684\u89e3\u51b3\u65b9\u6848\u4e2d\u62a5\u5934\u91cc\u53ea\u5305\u542b\u6570\u636e\u603b\u957f\u5ea6..\u4e0d\u5408\u7406! \u73b0\u5b9e\u4e2d, \u82e5\u662f\u4e00\u4e2a\u6587\u4ef6, \u8fd8\u4f1a\u5305\u542b\u5176\u5b83\u76f8\u5173\u4fe1\u606f, \u6bd4\u5982\u6587\u4ef6\u7684\u540d\u5b57\u3001\u6587\u4ef6\u7684md5\u503c\u7b49... \u4e14\u542c\u6211\u5a13\u5a13\u9053\u6765!! import json import struct \"\"\" \u4e0b\u8f7d\u7684\u6587\u4ef6\u901a\u5e38\u4f1a\u5305\u542b\u6587\u4ef6\u540d\u3001\u6587\u4ef6\u5927\u5c0f\u3001md5\u503c \u5217\u8868\u53ef\u4ee5\u5b58\u50a8,\u4f46\u5b58\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u6700\u597d\u7528\u5b57\u5178!!! \"\"\" header_json = { 'filename' : 'a.txt' , 'total_size' : 12313123124875981723895718257812538912353411234 , 'hash' : 'sfadfa1231ksdfakhf8fASDS829rjkjhJJKLJSDHAHD' } \"\"\" Q:\u5957\u63a5\u5b57\u53ea\u80fd\u53d1bytes\u7c7b\u578b\u7684\u6570\u636e. \u5b57\u5178\u7684\u6570\u636e\u7c7b\u578b\u662f <class 'dict'> \u5982\u4f55\u662f\u597d\u5462? A:\u5c06\u5b57\u5178\u683c\u5f0f\u7684\u62a5\u5934\u5236\u4f5c\u6210\u53ef\u4ee5\u88ab\u5957\u63a5\u5b57\u4f20\u8f93\u7684bytes\u7c7b\u578b\u7684\u6570\u636e \u89e3\u51b3\u65b9\u6848\u5982\u4e0b: dict -- json -- \u8fdb\u884cencode \u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u6570\u636e\u53ef\u4ee5\u8fdb\u884cencode\u7f16\u7801\u6210bytes\u4e8c\u8fdb\u5236\u7684\u6570\u636e. json\u683c\u5f0f\u7684\u6570\u636e\u7684\u7c7b\u578b\u5c31\u662f\u5b57\u7b26\u4e32. \"\"\" header_json = json . dumps ( header_json ) print ( type ( header_json )) # <class 'str'> header_bytes = header_json . encode ( 'utf-8' ) print ( type ( header_bytes )) # <class 'bytes'> \"\"\" Q:\u5728\u771f\u5b9e\u60c5\u51b5\u4e0b,\u6211\u4eec\u6709bytes\u7c7b\u578b\u7684\u62a5\u5934\u5566,\u4e5f\u6709\u4e86\u771f\u5b9e\u6570\u636e \u5728\u53d1\u9001\u7684\u65f6\u5019,\u62a5\u5934\u4f1a\u4e0e\u771f\u5b9e\u6570\u636e\u7c98\u5728\u4e00\u8d77.. \u5e76\u4e14\u62a5\u5934\u4fe1\u606f\u6539\u52a8\u4e00\u70b9\u957f\u5ea6\u5c31\u53d8\u4e86,\u62a5\u5934\u957f\u5ea6\u662f\u4e0d\u56fa\u5b9a\u7684. \u63a5\u6536\u7aef\u5728\u6536\u6570\u636e\u7684\u65f6\u5019,\u4e0d\u77e5\u9053\u8be5\u6536\u591a\u5c11\u4e2a\u5b57\u8282\u7684\u6570\u636e\u8868\u793a\u62a5\u5934,\u5982\u4f55\u662f\u597d? A:\u91cd\u70b9\u5728\u4e8e\u8ba9\u63a5\u6536\u7aef\u5148\u77e5\u9053\u62a5\u5934\u7684\u957f\u5ea6! So,\u4f7f\u7528struct\u5148pack\u6253\u5305\u62a5\u5934\u7684\u957f\u5ea6\u7ed9\u63a5\u6536\u7aef,\u518d\u53d1\u9001\u62a5\u5934\u7684\u6570\u636e\u548c\u771f\u5b9e\u6570\u636e. then,\u63a5\u6536\u7aef\u5148\u6536\u53d6\u5305\u542b\u62a5\u5934\u957f\u5ea6\u76844\u4e2a\u5b57\u8282\u7684\u6570\u636e,\u5bf9\u5176unpack\u89e3\u5305\u89e3\u5305\u540e\u62ff\u5230\u62a5\u5934\u7684\u957f\u5ea6; \u518d\u53d6\u62a5\u5934\u957f\u5ea6\u7684\u5b57\u8282\u6570\u636e,\u89e3\u7801\u540e\u5f97\u5230json\u4e32,\u518d\u53cd\u5e8f\u5217\u5316\u62ff\u5230\u6587\u4ef6\u6240\u6709\u7684\u63cf\u8ff0\u4fe1\u606f; \u518d\u5faa\u73af\u53d6\u771f\u5b9e\u7684\u6570\u636e. \"\"\" print ( len ( header_bytes )) # 139 -- \u8fd9\u4e2a\u957f\u5ea6\u53ef\u8fdc\u8fdc\u5c0f\u4e8etotal_size\u7684\u957f\u5ea6 header_bytes_len_pack = struct . pack ( 'i' , len ( header_bytes )) # -- \u6b64\u65f6,i\u683c\u5f0f\u5df2\u7ecf\u8db3\u591f\u6211\u4eec\u4f7f\u7528\u4e86 # -- \u5c06\u62a5\u5934\u7684\u957f\u5ea6\u8f6c\u6210\u4e86\u4e00\u4e2a4\u5b57\u8282(\"i\u683c\u5f0f\")\u957f\u5ea6\u7684bytes\u5bf9\u8c61 print ( type ( header_bytes_len_pack ), len ( header_bytes_len_pack )) # <class 'bytes'> 4 header_bytes_len = struct . unpack ( 'i' , header_bytes_len_pack )[ 0 ] print ( header_bytes_len ) # 139 -- \u63a5\u6536\u7aef\u89e3\u5305\u5f97\u5230bytes\u7c7b\u578b\u7684\u62a5\u5934\u7684\u5b57\u8282\u957f\u5ea6\u5927\u5c0f \u7ec8\u6781\u65b9\u6848 \u00b6 \u670d\u52a1\u7aef \u00b6 \u6587\u4ef6\u4fe1\u606f\u5b58\u653e\u5230\u5b57\u5178\u4e2d -- \u5e8f\u5217\u5316 -- \u7f16\u7801 -- \u5148\u53d1\u9001\u62a5\u5934\u957f\u5ea6 -- \u518d\u53d1\u9001\u62a5\u5934 -- \u518d\u53d1\u9001\u771f\u5b9e\u6570\u636e import json import struct import subprocess from socket import * server = socket ( AF_INET , SOCK_STREAM ) server . setsockopt ( SOL_SOCKET , SO_REUSEADDR , 1 ) server . bind (( '127.0.0.1' , 8080 )) server . listen ( 5 ) while True : conn , client_addr = server . accept () print ( \"\u8fde\u63a5\u7684C\u7aef:\" , client_addr ) while True : try : cmd = conn . recv ( 1024 ) if not cmd : break print ( \"\u6765\u81eaC\u7aef\u7684\u6d88\u606f:\" , cmd ) obj = subprocess . Popen ( cmd . decode ( 'utf-8' ), shell = True , stderr = subprocess . PIPE , stdout = subprocess . PIPE ) stdout_res = obj . stdout . read () stderr_res = obj . stderr . read () # -- step1:\u5148\u5236\u4f5c\u62a5\u5934 header_dic = { 'filename' : 'a.txt' , 'total_size' : len ( stdout_res + stderr_res ), 'hash' : 'helloHKSD775SOne' # -- \u6b64hash\u503c\u662f\u778e\u5199\u6a21\u62df\u7684 } header_json = json . dumps ( header_dic ) # -- \u5e8f\u5217\u5316 header_bytes = header_json . encode ( 'utf-8' ) # -- \u7f16\u7801 # -- step2:\u5148\u53d1\u9001\u62a5\u5934\u7684\u957f\u5ea6 # \"pack\u5c06\u62a5\u5934\u957f\u5ea6len(header_bytes)\u6253\u5305\u62104\u4e2abytes,\u7136\u540e\u53d1\u9001!!\" conn . send ( struct . pack ( 'i' , len ( header_bytes ))) # -- step3:\u53d1\u9001\u62a5\u5934\u7684\u6570\u636e conn . send ( header_bytes ) # -- step4:\u518d\u53d1\u771f\u5b9e\u7684\u6570\u636e conn . send ( stdout_res ) conn . send ( stderr_res ) except ConnectionResetError : break conn . close () server . close () \u5ba2\u6237\u7aef \u00b6 \u5148\u63a5\u65364\u5b57\u8282\u5305\u542b\u62a5\u5934\u957f\u5ea6\u7684\u6570\u636e -- \u63a5\u6536\u62a5\u5934,\u53d6\u51fa\u60f3\u8981\u7684\u6587\u4ef6\u4fe1\u606f -- \u5faa\u73af\u53d6\u771f\u5b9e\u6570\u636e import json import struct from socket import * client = socket ( AF_INET , SOCK_STREAM ) client . connect (( '127.0.0.1' , 8080 )) while True : cmd = input ( \">>: \" ) . strip () if not cmd : continue client . send ( cmd . encode ( 'utf-8' )) # -- step1:\u5148\u65364\u4e2a\u5b57\u8282,4\u4e2a\u5b57\u8282\u4e2d\u5305\u542b\u4e86\u62a5\u5934\u7684\u957f\u5ea6 header_len = struct . unpack ( 'i' , client . recv ( 4 ))[ 0 ] # -- \u89e3\u5305\u540e\u662f\u5143\u7956,\u53d6\u7b2c\u4e00\u4e2a\u5143\u7d20 # -- step2:\u518d\u63a5\u6536\u62a5\u5934,\u53d6\u51fa\u6211\u4eec\u60f3\u8981\u7684\u4fe1\u606f header_bytes = client . recv ( header_len ) header_json = header_bytes . decode ( 'utf-8' ) # -- \u89e3\u7801 header_dic = json . loads ( header_json ) # -- \u53cd\u5e8f\u5217\u5316 print ( header_dic ) total_size = header_dic [ 'total_size' ] # -- \u53d6\u51fa\u62a5\u5934\u4e2d\u6587\u4ef6\u7684\u957f\u5ea6\u4fe1\u606f # -- step3:\u518d\u6536\u771f\u5b9e\u7684\u6570\u636e recv_size = 0 res_data = b \"\" while recv_size < total_size : data = client . recv ( 1024 ) res_data += data recv_size += len ( data ) print ( res_data . decode ( 'utf-8' )) TCP\u7c98\u5305\u5e95\u5c42\u539f\u7406\u5206\u6790 \u00b6 nagle\u7b97\u6cd5 \u00b6 send\u4e00\u6b21\u5c31\u8d70\u4e00\u6b21\u7f51\u7edcIO/\u7f51\u7edc\u5ef6\u8fdf? No,\u7b2c\u4e00\u6b21send\u7684\u6570\u636e\u53ea\u67090.1kb,\u95f4\u96940.01s\u540e,\u53c8send\u4e86\u4e00\u4e2a0.2kb\u7684\u6570\u636e.. \u8d70\u4e24\u6b21\u7f51\u7edcIO\u662f\u4e0d\u5408\u7406\u7684!! \u7f51\u7edcIO\u8d8a\u591a,\u7a0b\u5e8f\u6548\u7387\u8d8a\u4f4e. \u4e00\u6b21\u7f51\u7edcIO\u5c3d\u53ef\u80fd\u7684\u4f20\u8f93\u7f51\u7edc\u5e26\u5bbd\u80fd\u627f\u53d7\u7684\u6570\u636e\u91cf.. Don't worry!! \u4f60\u60f3\u5230\u4e86\u7684,TCP\u5f53\u7136\u4e5f\u60f3\u5230\u5566!! \u7b97\u6cd5\u89c4\u5219 \u00b6 TCP\u534f\u8bae\u4f1a\u544a\u8bc9OS\u5728\u7ec4\u7ec7\u6570\u636e\u4f20\u9001\u65f6,\u5e94\u8be5\u6309\u7167 nagle\u7b97\u6cd5 \u5c06 \"[\u6570\u636e\u91cf\u8f83\u5c0f]\" \u5e76\u4e14 \"[\u65f6\u95f4\u95f4\u9694\u8f83\u77ed]\" \u7684 \"[\u591a\u6761\u6570\u636e\u5408\u5e76\u6210\u4e00\u6761]\" \u6cbf\u7740\u7f51\u7edc\u53d1\u9001!!! \u8fd9\u591a\u6761\u6570\u636e\u662f\u5e94\u7528\u7a0b\u5e8f\u4f1a\u4e0d\u65adsend\u7ed9OS\u7684\u7f13\u5b58.. \u4e24\u79cd\u60c5\u51b5\u7c98\u5305 \u00b6 \u4e24\u79cd\u60c5\u51b5\u4e0b\u4f1a\u53d1\u751f\u7c98\u5305 1> \u53d1\u9001\u6570\u636e\u65f6\u95f4\u95f4\u9694\u5f88\u77ed, \u6570\u636e\u5f88\u5c0f, \u4f1a\u5408\u5230\u4e00\u8d77,\u4ea7\u751f\u7c98\u5305 -- nagle\u7b97\u6cd5\u7684\u7c98\u5305 2> \u53d1\u9001\u65b9\u53d1\u9001\u4e86\u4e00\u6bb5\u6570\u636e, \u63a5\u6536\u65b9\u53ea\u6536\u4e86\u4e00\u5c0f\u90e8\u5206, \u63a5\u6536\u65b9\u4e0b\u6b21\u518d\u53d6\u7684\u65f6\u5019\u8fd8\u662f\u4ece\u7f13\u51b2\u533a\u62ff\u4e0a\u6b21\u9057\u7559\u7684\u6570\u636e,\u4ea7\u751f\u7c98\u5305 -- \u6a21\u62dfssh\u8fdc\u7a0b\u6267\u884c\u547d\u4ee4\u7684\u7c98\u5305 \u8fd9\u91cc\u9a8c\u8bc1\u7684\u662f \u7b2c\u4e00\u79cd\u60c5\u51b5 \u7684\u7c98\u5305.. \u9488\u5bf9\u5ba2\u6237\u7aef\u6b63\u5e38\u7ed3\u675f\u540e,\u670d\u52a1\u7aef\u6536\u5230\u7a7a\u6570\u636e\u8fdb\u884c\u7279\u522b\u8bf4\u660e: Ps: \u6ce8\u610f! \u5ba2\u6237\u7aef.py\u4e2d\u76f8\u8f83\u4e8e\u4e0a\u65b9\u7684\u622a\u56fe\u4e2d\u6ca1\u6709\u4e86 while True:pass \u4ee3\u7801.. \u89e3\u51b3\u7c98\u5305 \u00b6 \u7cbe\u51c6\u63a5\u6536 \u00b6 \u9075\u5faa \"perfect\u7684\u89e3\u51b3\u65b9\u6848\"\u7684\u6838\u5fc3\u601d\u60f3, \u53ea\u8981\u670d\u52a1\u7aef\u77e5\u9053\u6bcf\u4e2a\u5305\u7684\u957f\u5ea6,\u6bcf\u6b21\u6309\u7167\u957f\u5ea6\u6536\u5e72\u51c0/\u7cbe\u51c6\u63a5\u6536\u5c31\u884c\u5566!! So, \u518d\u6b21\u8bf4\u4e00\u6b21, \u89e3\u51b3\u7c98\u5305\u73b0\u8c61\u7684\u5173\u952e\u5728\u4e8e:\u5728\u53d1\u9001\u771f\u5b9e\u6570\u636e\u4e4b\u524d\u5148\u628a\u6b64\u6b21\u6570\u636e\u7684\u76f8\u5173\u4fe1\u606f(\u957f\u5ea6)\u901a\u77e5\u7ed9\u5bf9\u65b9. \u51c6\u786e\u6765\u8bf4,\u4e0d\u662f\u7cbe\u51c6\u5230\u6bcf\u4e2a\u6570\u636e\u5305(\u53d1\u9001\u7684\u6587\u4ef6\u4f1a\u88ab\u5206\u6210n\u4e2a\u6570\u636e\u6bb5\u50cf\u6c34\u6d41\u4e00\u6837\u6e90\u6e90\u4e0d\u65ad\u7684\u6d41\u5411\u5bf9\u65b9).. \u800c\u662f\u5728\u53d1\u9001\u4e00\u4e2a\u5b8c\u6574\u7684\u6587\u4ef6\u4e4b\u524d,\u5148\u5c06\u62a5\u5934\"\u5305\u542b\u6709\u6587\u4ef6\u7684\u957f\u5ea6\"\u901a\u77e5\u7ed9\u5bf9\u65b9.. \"\"\" \u2605 -- \u670d\u52a1\u7aef \"\"\" from socket import * server = socket ( AF_INET , SOCK_STREAM ) server . setsockopt ( SOL_SOCKET , SO_REUSEADDR , 1 ) server . bind (( \"127.0.0.1\" , 8080 )) server . listen ( 5 ) # -- \u5047\u8bbe\u670d\u52a1\u7aef\u5df2\u7ecf\u77e5\u9053\u4e86\u6bcf\u4e2a\u5305\u7684\u957f\u5ea6/\u6570\u636e\u91cf\u7684\u5927\u5c0f! conn , client_addr = server . accept () res1 = conn . recv ( 5 ) print ( \"S\u7aef\u7b2c\u4e00\u6b21\u4eceS\u7aefOS\u7f13\u5b58\u4e2d\u53d6\u7684\u6570\u636e:\" , res1 ) # S\u7aef\u7b2c\u4e00\u6b21\u4eceS\u7aefOS\u7f13\u5b58\u4e2d\u53d6\u7684\u6570\u636e: b'hello' res2 = conn . recv ( 5 ) print ( \"\u7b2c\u4e8c\u6b21\" , res2 ) # \u7b2c\u4e8c\u6b21 b'world' res3 = conn . recv ( 4 ) print ( \"\u7b2c\u4e09\u6b21\" , res3 ) # \u7b2c\u4e09\u6b21 b'egon' \"\"\" \u2605 -- \u5ba2\u6237\u7aef \"\"\" from socket import * client = socket ( AF_INET , SOCK_STREAM ) client . connect (( \"127.0.0.1\" , 8080 )) client . send ( b 'hello' ) client . send ( b 'world' ) client . send ( b 'egon' ) low_B\u65b9\u6848 \u00b6 \u5ba2\u6237\u7aef\u5728send\u6570\u636e\u7684\u8fc7\u7a0b\u4e2d\u4f7f\u7528time.sleep(3)\u95f4\u9694\u77613\u79d2.. \u662f\u901a\u8fc7\u4eba\u4e3a\u5236\u9020\u5ef6\u8fdf\u89e3\u51b3\u7684,\u4e0d\u8981\u8fd9\u6837\u505a!!! \"\"\" \u2605 -- \u670d\u52a1\u7aef \"\"\" from socket import * server = socket ( AF_INET , SOCK_STREAM ) server . setsockopt ( SOL_SOCKET , SO_REUSEADDR , 1 ) server . bind (( \"127.0.0.1\" , 8080 )) server . listen ( 5 ) conn , client_addr = server . accept () res1 = conn . recv ( 1024 ) print ( \"S\u7aef\u7b2c\u4e00\u6b21\u4eceS\u7aefOS\u7f13\u5b58\u4e2d\u53d6\u7684\u6570\u636e:\" , res1 ) # S\u7aef\u7b2c\u4e00\u6b21\u4eceS\u7aefOS\u7f13\u5b58\u4e2d\u53d6\u7684\u6570\u636e: b'hello' res2 = conn . recv ( 1024 ) print ( \"\u7b2c\u4e8c\u6b21\" , res2 ) # \u7b2c\u4e8c\u6b21 b'world' res3 = conn . recv ( 1024 ) print ( \"\u7b2c\u4e09\u6b21\" , res3 ) # \u7b2c\u4e09\u6b21 b'egon' \"\"\" \u2605 -- \u5ba2\u6237\u7aef \"\"\" from socket import * import time client = socket ( AF_INET , SOCK_STREAM ) client . connect (( \"127.0.0.1\" , 8080 )) # -- \u52a0\u5165\u65f6\u95f4\u95f4\u9694\u6761\u4ef6\u6d4b\u8bd5 \u8868\u660e\u7c98\u5305\u53d1\u751f\u7684\u6761\u4ef6 \u6570\u636e\u91cf\u5c0f+\u65f6\u95f4\u95f4\u9694\u77ed # \u867d\u7136\u7b2c\u4e00\u4e2a\u6570\u636e\u5305'hello'\u6570\u636e\u91cf\u5f88\u5c0f,\u4f46\u5ba2\u6237\u7aefos\u4f1a\u7b490.2\u79d2\u5417\uff1f\u4e0d,\u76f8\u5bf9\u4e8e\u4e00\u6b21\u7f51\u7edcIO/\u5ef6\u8fdf\u6765\u8bf4\u592a\u957f\u4e86 # \u5ba2\u6237\u7aef\u7684OS\u4e0d\u4f1a\u7b49\u8fd90.2s,\u76f4\u63a5\u8c03\u7528\u7f51\u5361\u53d1\u9001\u7ed9\u670d\u52a1\u7aefos\u7f13\u5b58 client . send ( b 'hello' ) time . sleep ( 0.2 ) client . send ( b 'world' ) time . sleep ( 0.2 ) client . send ( b 'egon' ) \u8865\u5145!! \u00b6 TCP\u5206\u6bb5\u4e0eIP\u5206\u7247\u7684\u533a\u522b\u4e0e\u8054\u7cfb\u53c2\u8003: https://cloud.tencent.com/developer/article/1173790 \u25bc MTU = MSS + TCP\u9996\u90e8\u957f\u5ea6 + IP\u9996\u90e8\u957f\u5ea6 TCP\u5206\u6bb5\u7684\u539f\u56e0\u662f\u56e0\u4e3aTCP\u62a5\u6587\u6bb5\u5927\u5c0f\u53d7MSS\u9650\u5236 IP\u5206\u7247\u7684\u539f\u56e0\u5219\u662f\u56e0\u4e3aIP\u6570\u636e\u62a5\u5927\u5c0f\u53d7MTU\u9650\u5236 UDP\u4e0d\u4f1a\u5206\u6bb5 , \u5c31\u7531IP\u6765\u5206\u7247 . TCP\u4f1a\u5206\u6bb5 , \u5f53\u7136\u5c31\u4e0d\u7528IP\u6765\u5206\u4e86 ! \u25bc \u53d1\u9001\u7aef\u8fdb\u884cTCP\u5206\u6bb5\u540e\u5c31\u4e00\u5b9a\u4e0d\u4f1a\u5728IP\u5c42\u8fdb\u884c\u5206\u7247 , \u56e0\u4e3aMSS\u672c\u8eab\u5c31\u662f\u57fa\u4e8eMTU\u63a8\u5bfc\u800c\u6765 , TCP\u5c42\u5206\u6bb5\u6ee1\u8db3\u4e86MSS\u9650\u5236 , \u4e5f\u5c31\u6ee1\u8db3\u4e86MTU\u7684\u7269\u7406\u9650\u5236 . \u4f46\u5728TCP\u5206\u6bb5\u53d1\u751f\u540e\u4ecd\u7136\u53ef\u80fd\u53d1\u751fIP\u5206\u7247 , \u8fd9\u662f\u56e0\u4e3aTCP\u5206\u6bb5\u4ec5\u6ee1\u8db3\u4e86\u901a\u4fe1\u4e24\u7aef\u7684MTU\u8981\u6c42 , \u4f20\u8f93\u8def\u5f84\u4e0a\u5982\u7ecf\u8fc7MTU\u503c\u6bd4\u8be5MTU\u503c\u66f4\u5c0f\u7684\u94fe\u8def , \u90a3\u4e48\u5728\u8f6c\u53d1\u5206\u7247\u5230\u8be5\u6761\u94fe\u8def\u7684\u8bbe\u5907\u4e2d\u4ecd\u4f1a\u4ee5\u66f4\u5c0f\u7684MTU\u503c\u4f5c\u4e3a\u4f9d\u636e\u518d\u6b21\u5206\u7247 . \u25bc \u5206\u6bb5\u4ec5\u53ef\u80fd\u53d1\u751f\u5728\u53d1\u9001\u7aef , \u5206\u7247\u4e0d\u4ec5\u53ef\u80fd\u53d1\u751f\u5728\u53d1\u9001\u7aef , \u66f4\u8fd8\u53ef\u80fd\u53d1\u751f\u5728\u8def\u5f84\u4e0a\u4efb\u4f55\u4e00\u53f0\u5de5\u4f5c\u5728\u4e09\u5c42\u6216\u4ee5\u4e0a\u7684\u8bbe\u5907\u4e2d , \u800c\u4e24\u8005\u7684\u91cd\u7ec4\u90fd\u53ea\u4f1a\u53d1\u751f\u5728\u63a5\u6536\u7aef . 1> \u5f53\u53d1\u9001\u7aef\u7f13\u51b2\u533a\u7684\u957f\u5ea6\u5927\u4e8e\u7f51\u5361\u7684MTU\u65f6, tcp\u4f1a\u5c06\u8fd9\u6b21\u8981\u53d1\u9001\u7684\u6570\u636e\u62c6\u6210\u51e0\u4e2a\u6570\u636e\u5305\u53d1\u9001\u51fa\u53bb. 2> tcp\u5728\u6570\u636e\u4f20\u8f93\u65f6, \u53d1\u9001\u7aef\u5148\u628a\u6570\u636e\u53d1\u9001\u5230\u81ea\u5df1\u7684\u7f13\u5b58\u4e2d, \u7136\u540e\u534f\u8bae\u63a7\u5236\u5c06\u7f13\u5b58\u4e2d\u7684\u6570\u636e\u53d1\u5f80\u5bf9\u7aef, \u5bf9\u7aef\u8fd4\u56de\u4e00\u4e2aack=1, \u53d1\u9001\u7aef\u5219\u6e05\u7406\u7f13\u5b58\u4e2d\u7684\u6570\u636e, \u5bf9\u7aef\u8fd4\u56deack=0, \u5219\u91cd\u65b0\u53d1\u9001\u6570\u636e, \u6240\u4ee5tcp\u662f\u53ef\u9760\u7684.. 3> recv\u91cc\u6307\u5b9a\u76841024\u610f\u601d\u662f\u4ece\u7f13\u5b58\u91cc\u4e00\u6b21\u6700\u591a\u62ff\u51fa1024\u4e2a\u5b57\u8282\u7684\u6570\u636e 4> send \u7684\u5b57\u8282\u6d41\u662f\u5148\u653e\u5165\u5df1\u7aef\u7f13\u5b58, \u7136\u540e\u7531\u534f\u8bae\u63a7\u5236\u5c06\u7f13\u5b58\u5185\u5bb9\u53d1\u5f80\u5bf9\u7aef, \u82e5\u5f85\u53d1\u9001\u7684\u5b57\u8282\u6d41\u5927\u5c0f\u5927\u4e8e\u7f13\u5b58\u5269\u4f59\u7a7a\u95f4, \u7f13\u5b58\u7a7a\u95f4\u4e0d\u8db3, \u90a3\u4e48\u6570\u636e\u4e22\u5931, \u7528 sendall \u5c31\u4f1a\u5faa\u73af\u8c03\u7528send, \u6570\u636e\u4e0d\u4f1a\u4e22\u5931.","title":"TCP\u7c98\u5305\u95ee\u9898"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2_TCP%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/#ssh","text":"SSH\u662f\u4e00\u79cd\u7f51\u7edc\u534f\u8bae \u53ef\u5b9e\u73b0\u4e24\u4e2a\u8bbe\u5907\u4e4b\u95f4\u7684\u5b89\u5168\u901a\u4fe1, \u901a\u5e38\u7528\u4e8e\u8bbf\u95ee\u8fdc\u7a0b\u670d\u52a1\u5668\u4ee5\u53ca\u4f20\u8f93\u6587\u4ef6\u6216\u6267\u884c\u547d\u4ee4..","title":"\u6a21\u62dfssh\u8fdc\u7a0b\u6267\u884c\u547d\u4ee4"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2_TCP%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/#_1","text":"\"\"\" \u2605 -- \u670d\u52a1\u7aef \"\"\" import subprocess from socket import * IP_PORT = ( '127.0.0.1' , 8080 ) BUFSIZE = 1024 server = socket ( AF_INET , SOCK_STREAM ) server . setsockopt ( SOL_SOCKET , SO_REUSEADDR , 1 ) server . bind ( IP_PORT ) server . listen ( 5 ) while True : conn , client_addr = server . accept () print ( \"\u8fde\u63a5\u7684C\u7aef:\" , client_addr ) while True : try : cmd = conn . recv ( BUFSIZE ) if not cmd : break print ( \"\u6765\u81eaC\u7aef\u7684\u6d88\u606f:\" , cmd ) obj = subprocess . Popen ( # -- \u63a5\u53d7\u5ba2\u6237\u7aef\u53d1\u8fc7\u6765\u7684\u5b57\u7b26\u4e32\u662fbytes\u6a21\u5f0f,\u56e0\u800c\u9700\u8981\u89e3\u7801; # \u5ba2\u6237\u7aef\u7528\u4ec0\u4e48\u7f16\u5c31\u7528\u4ec0\u4e48\u89e3(\u81ea\u5df1\u89c4\u5b9a\u7684\u554a) cmd . decode ( 'utf-8' ), shell = True , stderr = subprocess . PIPE , stdout = subprocess . PIPE ) # -- \u7cfb\u7edf\u547d\u4ee4\u7684\u8fd0\u884c\u7ed3\u679c\u5c31\u662fbytes\u7c7b\u578b\u7684,\u56fa\u5b9a\u4e86\u7684. stdout_res = obj . stdout . read () stderr_res = obj . stderr . read () print ( len ( stdout_res + stderr_res )) conn . send ( stdout_res + stderr_res ) # -- \u56de\u590dcmd\u547d\u4ee4\u7684\u6267\u884c\u7ed3\u679c except ConnectionResetError : break conn . close () server . close () \"\"\" \u2605 -- \u5ba2\u6237\u7aef \"\"\" from socket import * IP_PORT = ( '127.0.0.1' , 8080 ) BUFSIZE = 1024 client = socket ( AF_INET , SOCK_STREAM ) client . connect ( IP_PORT ) while True : cmd = input ( \">>: \" ) . strip () if not cmd : continue client . send ( cmd . encode ( 'utf-8' )) data = client . recv ( BUFSIZE ) # -- \u62ff\u5230subprocess\u6267\u884c\u7684\u7cfb\u7edf\u547d\u4ee4.. # \u7cfb\u7edf\u547d\u4ee4\u9700\u8981\u89e3\u7801(\u8ddf\u5e73\u53f0\u6709\u5173).windows gbk; mac utf-8 print ( data . decode ( 'utf-8' )) \"\"\" \u4e24\u4e2a\u6267\u884c\u6587\u4ef6\u6240\u5728\u7684\u76ee\u5f55\u7ed3\u6784 train \u251c\u2500\u2500 C \u2502 \u2514\u2500\u2500 \u5ba2\u6237\u7aef.py \u2514\u2500\u2500 S \u2514\u2500\u2500 \u670d\u52a1\u7aef.py \"\"\" \u6ce8\u610f\u54e6! \u5ba2\u6237\u7aef\u8f93\u5165\u7684\"pwd\"\u547d\u4ee4\u662f\u5728\u670d\u52a1\u7aef\u6267\u884c\u7684!! \u6240\u4ee5\u6253\u5370\u7684\u662f\"\u670d\u52a1\u7aef.py\"\u6240\u5728\u8def\u5f84!! \u800c\u4e0d\u662f\"\u5ba2\u6237\u7aef.py\"\u6240\u5728\u8def\u5f84!!!","title":"\u57fa\u672c\u5b9e\u73b0"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2_TCP%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/#bug","text":"","title":"\u4e00\u4e9bBUG"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2_TCP%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/#cd","text":"\u5ba2\u6237\u7aef\u4e0d\u80fd\u8f93\u5165cd\u547d\u4ee4.. \u8f93\u5165\u540e,\u4f1a\u5728\u670d\u52a1\u7aef\u771f\u6b63\u7684\u6267\u884ccd\u547d\u4ee4.. \u5373\u670d\u52a1\u7aef\u4e0d\u80fd\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u6267\u884ccd\u547d\u4ee4 \u8981\u77e5\u9053, \u9879\u76ee\u4f1a\u4ee5\u6267\u884c\u6587\u4ef6\u5f53\u524d\u76ee\u5f55\u4e3a\u57fa\u51c6\u53bb\u751f\u6210\u73af\u5883\u53d8\u91cf.. \u5ba2\u6237\u7aef\u8f93\u5165\u7684cd\u547d\u4ee4\u4f1a\u8ba9\u670d\u52a1\u7aef\u7684\u6267\u884c\u6587\u4ef6\u628a\u81ea\u5df1\u7684\u5f53\u524d\u8def\u5f84\u7ed9\u5207\u6362\u6389.. \u7a0b\u5e8f\u4e2d\u6709\u5f88\u591a\u5730\u65b9\u7528\u7684\u662f\u6267\u884ccd\u547d\u4ee4\u4e4b\u524d\u7684\u73af\u5883\u53d8\u91cf,\u4e00\u65e6\u6267\u884ccd\u547d\u4ee4,\u7a0b\u5e8f\u5c31\u5d29\u4e86.. \u5b9e\u9a8c\u540e\u7684\u6548\u679c\u5c31\u662f\u5ba2\u6237\u7aef\u5728\u8f93\u5165cd\u547d\u4ee4\u540e,\u6ca1\u6709\u54cd\u5e94,\u8f93\u5165\u5176\u5b83\u4e5f\u4e0d\u4f1a\u6709\u4efb\u4f55\u54cd\u5e94,\u670d\u52a1\u7aef\u5d29\u6e83\u6389\u4e86.. \u89e3\u51b3\u65b9\u6848: \u670d\u52a1\u7aef\u65e0\u9700\u771f\u7684\u5207\u6362\u76ee\u5f55.\u4e5f\u80fd\u6a21\u62df\u51facd\u547d\u4ee4\u7684\u6548\u679c. \u5f53\u5ba2\u6237\u7aef\u6572cd\u547d\u4ee4\u65f6,\u670d\u52a1\u7aef\u53ef\u4ee5\u7528 current_dir\u53d8\u91cf \u8bb0\u5f55\u4e0b\u8981\u5207\u6362\u7684\u5230\u7684\u76ee\u5f55; \u5f53\u5ba2\u6237\u7aef\u6572ls\u547d\u4ee4\u7684\u65f6\u5019, \u670d\u52a1\u7aef\u8fd4\u56de \u67e5\u770bcurrent_dir\u8def\u5f84\u4e0b\u6587\u4ef6\u7ed3\u679c \u5373\u53ef..","title":"cd\u547d\u4ee4"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2_TCP%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/#_2","text":"\u6bd4\u5982: linux\u4e0a\u7684top\u547d\u4ee4,\u9ed8\u8ba4\u6bcf\u96945\u79d2\u5237\u65b0\u4e00\u6b21. \u5f53\u524d\u8bbe\u8ba1\u7684\u7a0b\u5e8f\u53ea\u80fd\u6267\u884c\u7acb\u9a6c\u6709\u7ed3\u679c\u7684\u547d\u4ee4... top\u547d\u4ee4\u6bcf\u96945s\u5237\u65b0\u4e00\u6b21, \u610f\u5473\u7740\u6b64\u547d\u4ee4\u4e00\u76f4\u5728\u8fd0\u884c,\u6c38\u8fdc\u6267\u884c\u4e0d\u5b8c.. \u670d\u52a1\u7aef\u5c31\u62ff\u4e0d\u5230\u547d\u4ee4\u4ea7\u751f\u7684\u7ed3\u679c! \u5ba2\u6237\u7aef\u8f93\u5165 python \u8fd9\u79cd \u4e0d\u80fd\u4ea7\u751f\u7ed3\u679c\u7684\u547d\u4ee4 \u4e5f\u662f\u4e0dok\u7684.. \u6211\u4eec\u76ee\u524d\u8bbe\u8ba1\u7684\u7a0b\u5e8f\u4e5f\u65e0\u6cd5\u6267\u884c!!! \u6682\u4e14\u4e0d\u8981\u8003\u8651\u600e\u4e48\u89e3\u51b3\u5566, \u6211\u4eec\u91cd\u70b9\u5728\u4e8e\u89e3\u51b3\u8be5\u7a0b\u5e8f\u7684\u7c98\u5305\u95ee\u9898!!","title":"\u5b9e\u65f6\u53cd\u9988\u7684\u547d\u4ee4"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2_TCP%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/#_3","text":"\u7c98\u5305\u95ee\u9898\u4e3b\u8981\u8fd8\u662f\u56e0\u4e3a\u63a5\u6536\u65b9\u4e0d\u77e5\u9053\u6d88\u606f\u4e4b\u95f4\u7684\u754c\u9650,\u4e0d\u77e5\u9053\u4e00\u6b21\u6027\u63d0\u53d6\u591a\u5c11\u5b57\u8282\u7684\u6570\u636e\u6240\u9020\u6210\u7684 \u8fde\u63a5\u7684C\u7aef : ( '127.0.0.1' , 58299 ) \u6765\u81eaC\u7aef\u7684\u6d88\u606f : b 'ifconfig' 2348 \u6765\u81eaC\u7aef\u7684\u6d88\u606f : b 'ls' 13 Ps: \u8be5\u5b9e\u9a8c\u9ed8\u8ba4\u547d\u4ee4\u7684\u5927\u5c0f\u4e0d\u4f1a\u8d85\u8fc71024bytes.. \u7c98\u5305\u73b0\u8c61,\u5ba2\u6237\u7aef\u5148\u8f93\u5165\u547d\u4ee4 ifconfig , \u518d\u8f93\u5165\u547d\u4ee4\u547d\u4ee4 ls \u4f1a\u53d1\u73b0\u5ba2\u6237\u7aef\u6253\u5370\u7684\u7ed3\u679c\u4e0d\u662fls\u547d\u4ee4\u7684\u7ed3\u679c!! \u800c\u662f\u4e0a\u4e00\u6b21\u6ca1\u6253\u5370\u5b8c\u7684 ifconfig \u547d\u4ee4\u7684\u7ed3\u679c!! Hhh \u5f97\u5230\u7684\u547d\u4ee4\u7ed3\u679c\u76f4\u63a5\u4e71\u5957","title":"\u5236\u9020\u7c98\u5305\u73b0\u8c61"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2_TCP%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/#ugly","text":"","title":"ugly\u7684\u9519\u8bef\u60f3\u6cd5"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2_TCP%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/#_4","text":"\u6211\u4eec\u5f88\u5bb9\u6613\u60f3\u5230\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848, \u5c06C\u5ba2\u6237\u7aef\u7684\u5957\u63a5\u5b57\u5bf9\u8c61client\u7684recv()\u65b9\u6cd5\u63a5\u6536\u7684\u5b57\u8282\u6570\u8c03\u5927.. \u4fee\u6539\u4ee3\u7801 client.recv(1024) \u4e3a client.recv(1024000000) , \u63a5\u6536\u6570\u636e\u7684\u5927\u5c0f\u76f4\u63a5\u4ece1024\u5b57\u8282\u957f\u52301\u4e2aG!! \u547d\u4ee4\u7684\u7ed3\u679c\u51e0\u4e4e\u4e0d\u53ef\u80fd\u4f1a\u8d85\u8fc71\u4e2aG\u7684\u5927\u5c0f,\u8be5\u7a0b\u5e8f\u7684\u7c98\u5305\u95ee\u9898\u5f97\u5230\u4e86\u5b8c\u7f8e\u89e3\u51b3!! \u4f46\u662f \u4f20\u6587\u4ef6\u7684\u539f\u7406\u8ddf\u6267\u884c\u547d\u4ee4\u7684\u539f\u7406\u57fa\u672c\u662f\u4e00\u81f4\u7684!! \u6587\u4ef6\u7684\u5927\u5c0f\u662f\u6781\u6709\u53ef\u80fd\u8d85\u8fc71\u4e2aG\u7684.. \u600e\u4e48\u529e\u5462\uff1f\u7ee7\u7eed\u8c03\u6574recv()\u7684\u63a5\u6536\u5b57\u8282\u7684\u5927\u5c0f\u5417? \u5f53\u6211\u4eec\u4fee\u6539\u7a0b\u5e8f\u4e3a client.recv(1024000000). \u8c03\u6574\u5ba2\u6237\u7aef\u63a5\u6536\u7684\u6570\u636e\u5927\u5c0f\u4e3a10G.. \u6267\u884c\u5ba2\u6237\u7aef\u7a0b\u5e8f\u65f6\u62a5\u9519: Traceback ( most recent call last ): File \"/Users/One_Piece/Desktop/train/\u6a21\u62dfssh/C/\u5ba2\u6237\u7aef.py\" , line 10 , in < module > data = client . recv ( 10240000000 ) OSError : [ Errno 22 ] Invalid argument # -- windows\u4e0a\u4f1a\u62a5MemoryError\u7684\u9519\u8bef!! \u62a5\u9519\u5206\u6790: recv\u672c\u8d28\u662f\u5728\u5411\u81ea\u5df1\u7684OS\u7f13\u5b58\u8981\u6570\u636e,OS\u7f13\u5b58\u5360\u7528\u7684\u662f\u5185\u5b58\u7a7a\u95f4, OS\u7f13\u5b58\u7684\u5927\u5c0f\u518d\u5927\u4e5f\u4e0d\u4f1a\u8d85\u8fc7\u5185\u5b58\u7684\u5927\u5c0f.. \u8fd8\u8981\u6ce8\u610f,\u4e4b\u6240\u4ee5\u53eb\u7f13\u5b58\u662f\u56e0\u4e3a\u5185\u5b58\u4e0d\u53ef\u80fd\u5c06\u5168\u90e8\u7a7a\u95f4\u7528\u4e8e\u6536\u6570\u636e\u8fd9\u4ef6\u4e8b\u60c5..\u5185\u5b58\u8fd8\u8981\u817e\u51fa\u7a7a\u95f4\u8fd0\u884c\u8f6f\u4ef6\u7b49. \u6240\u4ee5 client.recv() \u8bbe\u7f6e\u7684\u5b57\u8282\u6570\u65e0\u9650\u5927\u662f\u6ca1\u6709\u610f\u4e49\u7684, \u662f\u65e0\u6548\u7684!!","title":"\u63a5\u6536\u5b57\u8282\u6570\u65e0\u9650\u5927"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2_TCP%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/#_5","text":"Q: \u90a3\u4e48\u6211\u4eec\u8bbe\u7f6e\u4e2a\u5faa\u73af,\u4e00\u76f4\u6536,\u76f4\u5230\u6536\u5e72\u51c0\u4e3a\u6b62. \u53ef\u884c\u5417\uff1f(\u4ee3\u7801\u5982\u4e0b) A: \u5ba2\u6237\u7aef\u4e00\u76f4recv\u4eceOS\u7f13\u5b58\u4e2d\u53d6\u6570\u636e,\u5f53recv\u53d1\u73b0OS\u7f13\u5b58\u4e2d\u6ca1\u6709\u6570\u636e\u540e,\u4f1a\u4e00\u76f4\u5728\u90a3\u6b7b\u7b49.. Ps: \u5f53\u670d\u52a1\u7aef\u7ec8\u6b62\u8fd0\u884c\u540e,\u5ba2\u6237\u7aef\u4f1a\u6536\u5230\u4e00\u4e2a b\" \" \u7684\u5b57\u8282\u6570\u636e. from socket import * client = socket ( AF_INET , SOCK_STREAM ) client . connect (( '127.0.0.1' , 8080 )) while True : cmd = input ( \">>: \" ) . strip () if not cmd : continue client . send ( cmd . encode ( 'utf-8' )) while True : # -- \u6b64\u5faa\u73af\u51fa\u4e0d\u6765,\u4e00\u76f4\u6b7b\u7b49. data = client . recv ( 1024 ) print ( data . decode ( 'utf-8' )) if len ( data ) == 0 : break \u63d0\u9192\u4e00\u4e0b, client.recv(1024) \u5e76\u4e0d\u610f\u5473\u7740\u4e00\u76f4\u4eceOS\u5185\u5b58\u4e2d\u5faa\u73af\u53d61024\u4e2a\u5b57\u8282\u6570\u636e,\u76f4\u5230\u6700\u540e\u4e00\u6b21\u53d6\u7684\u6570\u636e\u5c0f\u4e8e1024\u5b57\u8282,\u5c06OS\u7f13\u5b58\u4e2d\u7684\u6570\u636e\u53d6\u5b8c.. \u8fd9\u6837\u7406\u89e3\u662f\u9519\u8bef\u7684!! 1024\u53ea\u610f\u5473\u7740\u4e00\u6b21\u4eceOS\u7f13\u5b58\u4e2d\u53d6\u6570\u636e\u5927\u5c0f\u7684 \u6700\u5927\u9650\u5236 \u662f1024\u5b57\u8282. TCP\u662f\u6d41\u5f0f\u534f\u8bae,TCP\u53ef\u4ee5\u8fde\u7eed\u53d1\u9001\u591a\u4e2a\u6570\u636e\u6bb5,\u5177\u4f53\u53d1\u9001\u6570\u636e\u6bb5\u7684\u591a\u5c11\u53d6\u51b3\u4e8e\u5bf9\u65b9\u8fd4\u56de\u7684\u7a97\u53e3\u5927\u5c0f.. \u5047\u5982\u670d\u52a1\u7aef\u7684\u547d\u4ee4\u7ed3\u679c\u4f1a\u5206\u4e3a\u4e09\u4e2a\u6570\u636e\u6bb5\u4f20\u7ed9\u5ba2\u6237\u7aef,\u4f9d\u6b21\u662f800bytes\u3001500bytes\u30011300bytes.\u56e0\u4e3a\u7f51\u7edc\u539f\u56e0\u5230\u8fbe\u5ba2\u6237\u7aefOS\u7f13\u5b58\u7684\u65f6\u95f4\u6709\u95f4\u9694. \u90a3\u4e48\u524d\u9762\u4e24\u6b21\u5ba2\u6237\u7aef\u4eceOS\u7f13\u5b58\u4e2d\u53d6\u7684\u6570\u636e\u5c31\u4f1a\u5c0f\u4e8e1024\u5b57\u8282.. (\u8fc7\u7a0b\u4e0d\u4e25\u8c28,\u8ddfTCP\u5177\u4f53\u7684\u7a97\u53e3\u673a\u5236\u6709\u5173,\u4e0d\u6df1\u7a76,\u4f46\u60f3\u8868\u8fbe\u7684\u610f\u601d\u662f\u5230\u4f4d\u4e86\u7684.)","title":"\u5355\u7eaf\u7684\u5faa\u73af\u63a5\u6536"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2_TCP%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/#_6","text":"\u89e3\u51b3\u7c98\u5305\u73b0\u8c61\u7684\u5173\u952e\u5728\u4e8e: \u5728\u53d1\u9001\u771f\u5b9e\u6570\u636e\u4e4b\u524d\u5148\u628a\u6b64\u6b21\u6570\u636e\u7684\u76f8\u5173\u4fe1\u606f(\u957f\u5ea6)\u901a\u77e5\u7ed9\u5bf9\u65b9 \u5148\u4f20\u8f93\u4e00\u4e2a \u56fa\u5b9a\u957f\u5ea6\u7684\u62a5\u5934 !!!","title":"\u4e0d\u5b8c\u7f8e\u7684\u89e3\u51b3\u65b9\u6848"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2_TCP%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/#struct","text":"struct\u6a21\u5757 \u53ef\u4ee5\u5c06<\u6574\u5f62\u7684\u6570\u636e>\u8f6c\u6210<\u56fa\u5b9a\u957f\u5ea6\u7684bytes\u7c7b\u578b\u7684\u6570\u636e> import struct # -- pack\u6253\u5305 \u5176\u53c2\u6570: (\u683c\u5f0f,\u6574\u578b\u6570\u5b57) # i\u683c\u5f0f \u8868\u793a\u5c06\u540e\u9762\u7684\u6574\u578b\u6570\u5b57\u8f6c\u6210bytes\u7c7b\u578b \u5e76\u4e14\u8fd9\u4e2abytes\u7c7b\u578b\u6570\u636e\u7684\u56fa\u5b9a\u957f\u5ea6\u4e3a4 header = struct . pack ( 'i' , 128 ) # b'\\x80\\x00\\x00\\x00' <class 'bytes'> 4 print ( header , type ( header ), len ( header )) # -- unpack\u89e3\u5305 \u5176\u53c2\u6570: (\u683c\u5f0f,\u5b57\u8282\u4e32) obj = struct . unpack ( 'i' , header ) # (128,) -- \u5176\u7ed3\u679c\u662f\u5143\u7956 print ( obj ) total_size = struct . unpack ( 'i' , header )[ 0 ] # -- \u6211\u4eec\u9700\u8981\u7684\u662f\u5143\u7956\u91cc\u7684\u7b2c\u4e00\u4e2a\u6570\u636e \u6572\u9ed1\u677f: \u683c\u5f0f\u4e0d\u540c,\u6240\u80fd\u652f\u6301\u7684\u6574\u578b\u6570\u5b57\u7684\u5927\u5c0f\u4e5f\u4e0d\u4e00\u6837!\u8d85\u51fa\u8303\u56f4\u4f1a\u62a5\u9519 (\u6b64\u65b9\u6848\u4e0d\u5b8c\u7f8e\u7684\u5730\u65b9\u4e4b\u4e00) struct.error:argument out of range","title":"\u8865\u5145: struct\u6a21\u5757"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2_TCP%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/#_7","text":"\u5148\u63a5\u53d7 \u56fa\u5b9a\u957f\u5ea6 \u7684bytes\u7c7b\u578b\u7684\u62a5\u5934, \u518d\u4ee5\u8f83\u5c0f\u7684\u5355\u4f4d\u5faa\u73af\u6536,\u76f4\u5230\u6536\u5e72\u51c0\u4e3a\u6b62..","title":"\u62a5\u5934+\u8f83\u5c0f\u5355\u4f4d\u5faa\u73af"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2_TCP%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/#_8","text":"import struct import subprocess from socket import * server = socket ( AF_INET , SOCK_STREAM ) server . setsockopt ( SOL_SOCKET , SO_REUSEADDR , 1 ) server . bind (( '127.0.0.1' , 8080 )) server . listen ( 5 ) while True : conn , client_addr = server . accept () print ( \"\u8fde\u63a5\u7684C\u7aef:\" , client_addr ) while True : try : \"\"\" \u63d0\u9192\u4e00\u4e0b\u4e0b: recv()\u7684\u53c2\u6570\u503c\u901a\u5e38\u8bbe\u7f6e\u4e00\u6b21\u4eceOS\u7f13\u5b58\u4e2d\u53d6\u6570\u636e\u7684\u5927\u5c0f\u4e3a1024bytes. \u8bbe\u7f6e\u7684\u503c\u6700\u597d\u4e0d\u8981\u8d85\u8fc78096,\u4e00\u822c\u6765\u8bf4\u64cd\u4f5c\u7cfb\u7edf\u7684\u7f13\u5b588096\u5c31\u662f\u6781\u9650\u5566.. \"\"\" cmd = conn . recv ( 1024 ) if not cmd : break print ( \"\u6765\u81eaC\u7aef\u7684\u6d88\u606f:\" , cmd ) obj = subprocess . Popen ( cmd . decode ( 'utf-8' ), shell = True , stderr = subprocess . PIPE , stdout = subprocess . PIPE ) stdout_res = obj . stdout . read () stderr_res = obj . stderr . read () \"\"\" TCP\u662f\u6d41\u5f0f\u534f\u8bae \u4e09\u6761send\u8bed\u53e5\u7684\u6570\u636e\u4f1a\u4f9d\u6b21\u6d41\u5230\u81ea\u5df1\u7684OS\u7f13\u5b58\u4e2d <\"\u7c98\u5230\u4e00\u8d77\">\u50cf\u6c34\u6d41\u4e00\u6837<\"\u6e90\u6e90\u4e0d\u65ad\">\u7684\u6d41\u5411\u5ba2\u6237\u7aef \"\"\" # -- step1:\u5148\u5236\u4f5c\u62a5\u5934,\u56fa\u5b9a\u957f\u5ea6 # \u5c06\u6574\u5f62\u7684total_size\u6570\u636e\u8f6c\u6210\u56fa\u5b9a\u957f\u5ea6\u7684bytes\u7c7b\u578b\u7684\u6570\u636e total_size = len ( stdout_res + stderr_res ) print ( total_size ) header = struct . pack ( 'i' , total_size ) # -- step2:\u5148\u53d1\u56fa\u5b9a\u957f\u5ea6\u7684\u62a5\u5934 conn . send ( header ) # -- step3:\u518d\u53d1\u771f\u5b9e\u7684\u6570\u636e # -- conn.send(stdout_res + stderr_res) # +\u53f7\u8868\u660e\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u5185\u5b58\u7a7a\u95f4\u5c06\u52a0\u53f7\u5de6\u53f3\u7684\u5185\u5bb9\u62ff\u8fc7\u6765,\u76f8\u5f53\u4e8e\u62f7\u8d1d\u4e86\u4e00\u904d,\u6548\u7387\u95ee\u9898 # \u4f18\u5316\u4e0b,\u89e3\u51b3\u65b9\u6848:\u8fde\u7eed\u53d1\u4e24\u6b21 conn . send ( stdout_res ) # -- \u53d1\u9001\u771f\u5b9e\u7684\u6570\u636e conn . send ( stderr_res ) # -- \u53d1\u9001\u771f\u5b9e\u7684\u6570\u636e except ConnectionResetError : break conn . close () server . close ()","title":"\u670d\u52a1\u7aef"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2_TCP%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/#_9","text":"import struct from socket import * client = socket ( AF_INET , SOCK_STREAM ) client . connect (( '127.0.0.1' , 8080 )) while True : cmd = input ( \">>: \" ) . strip () if not cmd : continue client . send ( cmd . encode ( 'utf-8' )) # -- step1:\u5148\u6536\u56fa\u5b9a\u957f\u5ea6\u7684\u62a5\u5934 header = client . recv ( 4 ) # -- step2:\u4ece\u62a5\u5934\u4e2d \u89e3\u6790/\u53cd\u89e3 \u51fa\u5bf9\u6570\u636e\u7684\u63cf\u8ff0\u4fe1\u606f total_size = struct . unpack ( 'i' , header )[ 0 ] # -- step3:\u518d\u6536\u771f\u5b9e\u7684\u6570\u636e recv_size = 0 res_data = b \"\" while recv_size < total_size : data = client . recv ( 1024 ) res_data += data recv_size += len ( data ) print ( res_data . decode ( 'utf-8' ))","title":"\u5ba2\u6237\u7aef"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2_TCP%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/#perfect","text":"","title":"perfect\u7684\u89e3\u51b3\u65b9\u6848"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2_TCP%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/#_10","text":"\u4e0a\u9762\u7684\u89e3\u51b3\u65b9\u6848\u6709\u4e24\u4e2a\u5f0a\u7aef: 1> struct.pack('i', \u6574\u578b\u6570\u5b57) \u53c2\u6570\u4e2d\u6574\u578b\u6570\u5b57\u7684\u5927\u5c0f,\u53ef\u80fd\u975e\u5e38\u5927, i q\u683c\u5f0f\u90fd\u4e0d\u597d\u4f7f. 2> \u62a5\u5934\u662f\u5bf9\u6570\u636e\u6709\u63cf\u8ff0\u6027\u7684\u529f\u80fd, \u4e0a\u9762\u7684\u89e3\u51b3\u65b9\u6848\u4e2d\u62a5\u5934\u91cc\u53ea\u5305\u542b\u6570\u636e\u603b\u957f\u5ea6..\u4e0d\u5408\u7406! \u73b0\u5b9e\u4e2d, \u82e5\u662f\u4e00\u4e2a\u6587\u4ef6, \u8fd8\u4f1a\u5305\u542b\u5176\u5b83\u76f8\u5173\u4fe1\u606f, \u6bd4\u5982\u6587\u4ef6\u7684\u540d\u5b57\u3001\u6587\u4ef6\u7684md5\u503c\u7b49... \u4e14\u542c\u6211\u5a13\u5a13\u9053\u6765!! import json import struct \"\"\" \u4e0b\u8f7d\u7684\u6587\u4ef6\u901a\u5e38\u4f1a\u5305\u542b\u6587\u4ef6\u540d\u3001\u6587\u4ef6\u5927\u5c0f\u3001md5\u503c \u5217\u8868\u53ef\u4ee5\u5b58\u50a8,\u4f46\u5b58\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u6700\u597d\u7528\u5b57\u5178!!! \"\"\" header_json = { 'filename' : 'a.txt' , 'total_size' : 12313123124875981723895718257812538912353411234 , 'hash' : 'sfadfa1231ksdfakhf8fASDS829rjkjhJJKLJSDHAHD' } \"\"\" Q:\u5957\u63a5\u5b57\u53ea\u80fd\u53d1bytes\u7c7b\u578b\u7684\u6570\u636e. \u5b57\u5178\u7684\u6570\u636e\u7c7b\u578b\u662f <class 'dict'> \u5982\u4f55\u662f\u597d\u5462? A:\u5c06\u5b57\u5178\u683c\u5f0f\u7684\u62a5\u5934\u5236\u4f5c\u6210\u53ef\u4ee5\u88ab\u5957\u63a5\u5b57\u4f20\u8f93\u7684bytes\u7c7b\u578b\u7684\u6570\u636e \u89e3\u51b3\u65b9\u6848\u5982\u4e0b: dict -- json -- \u8fdb\u884cencode \u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u6570\u636e\u53ef\u4ee5\u8fdb\u884cencode\u7f16\u7801\u6210bytes\u4e8c\u8fdb\u5236\u7684\u6570\u636e. json\u683c\u5f0f\u7684\u6570\u636e\u7684\u7c7b\u578b\u5c31\u662f\u5b57\u7b26\u4e32. \"\"\" header_json = json . dumps ( header_json ) print ( type ( header_json )) # <class 'str'> header_bytes = header_json . encode ( 'utf-8' ) print ( type ( header_bytes )) # <class 'bytes'> \"\"\" Q:\u5728\u771f\u5b9e\u60c5\u51b5\u4e0b,\u6211\u4eec\u6709bytes\u7c7b\u578b\u7684\u62a5\u5934\u5566,\u4e5f\u6709\u4e86\u771f\u5b9e\u6570\u636e \u5728\u53d1\u9001\u7684\u65f6\u5019,\u62a5\u5934\u4f1a\u4e0e\u771f\u5b9e\u6570\u636e\u7c98\u5728\u4e00\u8d77.. \u5e76\u4e14\u62a5\u5934\u4fe1\u606f\u6539\u52a8\u4e00\u70b9\u957f\u5ea6\u5c31\u53d8\u4e86,\u62a5\u5934\u957f\u5ea6\u662f\u4e0d\u56fa\u5b9a\u7684. \u63a5\u6536\u7aef\u5728\u6536\u6570\u636e\u7684\u65f6\u5019,\u4e0d\u77e5\u9053\u8be5\u6536\u591a\u5c11\u4e2a\u5b57\u8282\u7684\u6570\u636e\u8868\u793a\u62a5\u5934,\u5982\u4f55\u662f\u597d? A:\u91cd\u70b9\u5728\u4e8e\u8ba9\u63a5\u6536\u7aef\u5148\u77e5\u9053\u62a5\u5934\u7684\u957f\u5ea6! So,\u4f7f\u7528struct\u5148pack\u6253\u5305\u62a5\u5934\u7684\u957f\u5ea6\u7ed9\u63a5\u6536\u7aef,\u518d\u53d1\u9001\u62a5\u5934\u7684\u6570\u636e\u548c\u771f\u5b9e\u6570\u636e. then,\u63a5\u6536\u7aef\u5148\u6536\u53d6\u5305\u542b\u62a5\u5934\u957f\u5ea6\u76844\u4e2a\u5b57\u8282\u7684\u6570\u636e,\u5bf9\u5176unpack\u89e3\u5305\u89e3\u5305\u540e\u62ff\u5230\u62a5\u5934\u7684\u957f\u5ea6; \u518d\u53d6\u62a5\u5934\u957f\u5ea6\u7684\u5b57\u8282\u6570\u636e,\u89e3\u7801\u540e\u5f97\u5230json\u4e32,\u518d\u53cd\u5e8f\u5217\u5316\u62ff\u5230\u6587\u4ef6\u6240\u6709\u7684\u63cf\u8ff0\u4fe1\u606f; \u518d\u5faa\u73af\u53d6\u771f\u5b9e\u7684\u6570\u636e. \"\"\" print ( len ( header_bytes )) # 139 -- \u8fd9\u4e2a\u957f\u5ea6\u53ef\u8fdc\u8fdc\u5c0f\u4e8etotal_size\u7684\u957f\u5ea6 header_bytes_len_pack = struct . pack ( 'i' , len ( header_bytes )) # -- \u6b64\u65f6,i\u683c\u5f0f\u5df2\u7ecf\u8db3\u591f\u6211\u4eec\u4f7f\u7528\u4e86 # -- \u5c06\u62a5\u5934\u7684\u957f\u5ea6\u8f6c\u6210\u4e86\u4e00\u4e2a4\u5b57\u8282(\"i\u683c\u5f0f\")\u957f\u5ea6\u7684bytes\u5bf9\u8c61 print ( type ( header_bytes_len_pack ), len ( header_bytes_len_pack )) # <class 'bytes'> 4 header_bytes_len = struct . unpack ( 'i' , header_bytes_len_pack )[ 0 ] print ( header_bytes_len ) # 139 -- \u63a5\u6536\u7aef\u89e3\u5305\u5f97\u5230bytes\u7c7b\u578b\u7684\u62a5\u5934\u7684\u5b57\u8282\u957f\u5ea6\u5927\u5c0f","title":"\u62a5\u5934\u7684\u5236\u4f5c"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2_TCP%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/#_11","text":"","title":"\u7ec8\u6781\u65b9\u6848"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2_TCP%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/#_12","text":"\u6587\u4ef6\u4fe1\u606f\u5b58\u653e\u5230\u5b57\u5178\u4e2d -- \u5e8f\u5217\u5316 -- \u7f16\u7801 -- \u5148\u53d1\u9001\u62a5\u5934\u957f\u5ea6 -- \u518d\u53d1\u9001\u62a5\u5934 -- \u518d\u53d1\u9001\u771f\u5b9e\u6570\u636e import json import struct import subprocess from socket import * server = socket ( AF_INET , SOCK_STREAM ) server . setsockopt ( SOL_SOCKET , SO_REUSEADDR , 1 ) server . bind (( '127.0.0.1' , 8080 )) server . listen ( 5 ) while True : conn , client_addr = server . accept () print ( \"\u8fde\u63a5\u7684C\u7aef:\" , client_addr ) while True : try : cmd = conn . recv ( 1024 ) if not cmd : break print ( \"\u6765\u81eaC\u7aef\u7684\u6d88\u606f:\" , cmd ) obj = subprocess . Popen ( cmd . decode ( 'utf-8' ), shell = True , stderr = subprocess . PIPE , stdout = subprocess . PIPE ) stdout_res = obj . stdout . read () stderr_res = obj . stderr . read () # -- step1:\u5148\u5236\u4f5c\u62a5\u5934 header_dic = { 'filename' : 'a.txt' , 'total_size' : len ( stdout_res + stderr_res ), 'hash' : 'helloHKSD775SOne' # -- \u6b64hash\u503c\u662f\u778e\u5199\u6a21\u62df\u7684 } header_json = json . dumps ( header_dic ) # -- \u5e8f\u5217\u5316 header_bytes = header_json . encode ( 'utf-8' ) # -- \u7f16\u7801 # -- step2:\u5148\u53d1\u9001\u62a5\u5934\u7684\u957f\u5ea6 # \"pack\u5c06\u62a5\u5934\u957f\u5ea6len(header_bytes)\u6253\u5305\u62104\u4e2abytes,\u7136\u540e\u53d1\u9001!!\" conn . send ( struct . pack ( 'i' , len ( header_bytes ))) # -- step3:\u53d1\u9001\u62a5\u5934\u7684\u6570\u636e conn . send ( header_bytes ) # -- step4:\u518d\u53d1\u771f\u5b9e\u7684\u6570\u636e conn . send ( stdout_res ) conn . send ( stderr_res ) except ConnectionResetError : break conn . close () server . close ()","title":"\u670d\u52a1\u7aef"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2_TCP%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/#_13","text":"\u5148\u63a5\u65364\u5b57\u8282\u5305\u542b\u62a5\u5934\u957f\u5ea6\u7684\u6570\u636e -- \u63a5\u6536\u62a5\u5934,\u53d6\u51fa\u60f3\u8981\u7684\u6587\u4ef6\u4fe1\u606f -- \u5faa\u73af\u53d6\u771f\u5b9e\u6570\u636e import json import struct from socket import * client = socket ( AF_INET , SOCK_STREAM ) client . connect (( '127.0.0.1' , 8080 )) while True : cmd = input ( \">>: \" ) . strip () if not cmd : continue client . send ( cmd . encode ( 'utf-8' )) # -- step1:\u5148\u65364\u4e2a\u5b57\u8282,4\u4e2a\u5b57\u8282\u4e2d\u5305\u542b\u4e86\u62a5\u5934\u7684\u957f\u5ea6 header_len = struct . unpack ( 'i' , client . recv ( 4 ))[ 0 ] # -- \u89e3\u5305\u540e\u662f\u5143\u7956,\u53d6\u7b2c\u4e00\u4e2a\u5143\u7d20 # -- step2:\u518d\u63a5\u6536\u62a5\u5934,\u53d6\u51fa\u6211\u4eec\u60f3\u8981\u7684\u4fe1\u606f header_bytes = client . recv ( header_len ) header_json = header_bytes . decode ( 'utf-8' ) # -- \u89e3\u7801 header_dic = json . loads ( header_json ) # -- \u53cd\u5e8f\u5217\u5316 print ( header_dic ) total_size = header_dic [ 'total_size' ] # -- \u53d6\u51fa\u62a5\u5934\u4e2d\u6587\u4ef6\u7684\u957f\u5ea6\u4fe1\u606f # -- step3:\u518d\u6536\u771f\u5b9e\u7684\u6570\u636e recv_size = 0 res_data = b \"\" while recv_size < total_size : data = client . recv ( 1024 ) res_data += data recv_size += len ( data ) print ( res_data . decode ( 'utf-8' ))","title":"\u5ba2\u6237\u7aef"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2_TCP%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/#tcp","text":"","title":"TCP\u7c98\u5305\u5e95\u5c42\u539f\u7406\u5206\u6790"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2_TCP%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/#nagle","text":"send\u4e00\u6b21\u5c31\u8d70\u4e00\u6b21\u7f51\u7edcIO/\u7f51\u7edc\u5ef6\u8fdf? No,\u7b2c\u4e00\u6b21send\u7684\u6570\u636e\u53ea\u67090.1kb,\u95f4\u96940.01s\u540e,\u53c8send\u4e86\u4e00\u4e2a0.2kb\u7684\u6570\u636e.. \u8d70\u4e24\u6b21\u7f51\u7edcIO\u662f\u4e0d\u5408\u7406\u7684!! \u7f51\u7edcIO\u8d8a\u591a,\u7a0b\u5e8f\u6548\u7387\u8d8a\u4f4e. \u4e00\u6b21\u7f51\u7edcIO\u5c3d\u53ef\u80fd\u7684\u4f20\u8f93\u7f51\u7edc\u5e26\u5bbd\u80fd\u627f\u53d7\u7684\u6570\u636e\u91cf.. Don't worry!! \u4f60\u60f3\u5230\u4e86\u7684,TCP\u5f53\u7136\u4e5f\u60f3\u5230\u5566!!","title":"nagle\u7b97\u6cd5"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2_TCP%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/#_14","text":"TCP\u534f\u8bae\u4f1a\u544a\u8bc9OS\u5728\u7ec4\u7ec7\u6570\u636e\u4f20\u9001\u65f6,\u5e94\u8be5\u6309\u7167 nagle\u7b97\u6cd5 \u5c06 \"[\u6570\u636e\u91cf\u8f83\u5c0f]\" \u5e76\u4e14 \"[\u65f6\u95f4\u95f4\u9694\u8f83\u77ed]\" \u7684 \"[\u591a\u6761\u6570\u636e\u5408\u5e76\u6210\u4e00\u6761]\" \u6cbf\u7740\u7f51\u7edc\u53d1\u9001!!! \u8fd9\u591a\u6761\u6570\u636e\u662f\u5e94\u7528\u7a0b\u5e8f\u4f1a\u4e0d\u65adsend\u7ed9OS\u7684\u7f13\u5b58..","title":"\u7b97\u6cd5\u89c4\u5219"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2_TCP%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/#_15","text":"\u4e24\u79cd\u60c5\u51b5\u4e0b\u4f1a\u53d1\u751f\u7c98\u5305 1> \u53d1\u9001\u6570\u636e\u65f6\u95f4\u95f4\u9694\u5f88\u77ed, \u6570\u636e\u5f88\u5c0f, \u4f1a\u5408\u5230\u4e00\u8d77,\u4ea7\u751f\u7c98\u5305 -- nagle\u7b97\u6cd5\u7684\u7c98\u5305 2> \u53d1\u9001\u65b9\u53d1\u9001\u4e86\u4e00\u6bb5\u6570\u636e, \u63a5\u6536\u65b9\u53ea\u6536\u4e86\u4e00\u5c0f\u90e8\u5206, \u63a5\u6536\u65b9\u4e0b\u6b21\u518d\u53d6\u7684\u65f6\u5019\u8fd8\u662f\u4ece\u7f13\u51b2\u533a\u62ff\u4e0a\u6b21\u9057\u7559\u7684\u6570\u636e,\u4ea7\u751f\u7c98\u5305 -- \u6a21\u62dfssh\u8fdc\u7a0b\u6267\u884c\u547d\u4ee4\u7684\u7c98\u5305 \u8fd9\u91cc\u9a8c\u8bc1\u7684\u662f \u7b2c\u4e00\u79cd\u60c5\u51b5 \u7684\u7c98\u5305.. \u9488\u5bf9\u5ba2\u6237\u7aef\u6b63\u5e38\u7ed3\u675f\u540e,\u670d\u52a1\u7aef\u6536\u5230\u7a7a\u6570\u636e\u8fdb\u884c\u7279\u522b\u8bf4\u660e: Ps: \u6ce8\u610f! \u5ba2\u6237\u7aef.py\u4e2d\u76f8\u8f83\u4e8e\u4e0a\u65b9\u7684\u622a\u56fe\u4e2d\u6ca1\u6709\u4e86 while True:pass \u4ee3\u7801..","title":"\u4e24\u79cd\u60c5\u51b5\u7c98\u5305"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2_TCP%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/#_16","text":"","title":"\u89e3\u51b3\u7c98\u5305"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2_TCP%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/#_17","text":"\u9075\u5faa \"perfect\u7684\u89e3\u51b3\u65b9\u6848\"\u7684\u6838\u5fc3\u601d\u60f3, \u53ea\u8981\u670d\u52a1\u7aef\u77e5\u9053\u6bcf\u4e2a\u5305\u7684\u957f\u5ea6,\u6bcf\u6b21\u6309\u7167\u957f\u5ea6\u6536\u5e72\u51c0/\u7cbe\u51c6\u63a5\u6536\u5c31\u884c\u5566!! So, \u518d\u6b21\u8bf4\u4e00\u6b21, \u89e3\u51b3\u7c98\u5305\u73b0\u8c61\u7684\u5173\u952e\u5728\u4e8e:\u5728\u53d1\u9001\u771f\u5b9e\u6570\u636e\u4e4b\u524d\u5148\u628a\u6b64\u6b21\u6570\u636e\u7684\u76f8\u5173\u4fe1\u606f(\u957f\u5ea6)\u901a\u77e5\u7ed9\u5bf9\u65b9. \u51c6\u786e\u6765\u8bf4,\u4e0d\u662f\u7cbe\u51c6\u5230\u6bcf\u4e2a\u6570\u636e\u5305(\u53d1\u9001\u7684\u6587\u4ef6\u4f1a\u88ab\u5206\u6210n\u4e2a\u6570\u636e\u6bb5\u50cf\u6c34\u6d41\u4e00\u6837\u6e90\u6e90\u4e0d\u65ad\u7684\u6d41\u5411\u5bf9\u65b9).. \u800c\u662f\u5728\u53d1\u9001\u4e00\u4e2a\u5b8c\u6574\u7684\u6587\u4ef6\u4e4b\u524d,\u5148\u5c06\u62a5\u5934\"\u5305\u542b\u6709\u6587\u4ef6\u7684\u957f\u5ea6\"\u901a\u77e5\u7ed9\u5bf9\u65b9.. \"\"\" \u2605 -- \u670d\u52a1\u7aef \"\"\" from socket import * server = socket ( AF_INET , SOCK_STREAM ) server . setsockopt ( SOL_SOCKET , SO_REUSEADDR , 1 ) server . bind (( \"127.0.0.1\" , 8080 )) server . listen ( 5 ) # -- \u5047\u8bbe\u670d\u52a1\u7aef\u5df2\u7ecf\u77e5\u9053\u4e86\u6bcf\u4e2a\u5305\u7684\u957f\u5ea6/\u6570\u636e\u91cf\u7684\u5927\u5c0f! conn , client_addr = server . accept () res1 = conn . recv ( 5 ) print ( \"S\u7aef\u7b2c\u4e00\u6b21\u4eceS\u7aefOS\u7f13\u5b58\u4e2d\u53d6\u7684\u6570\u636e:\" , res1 ) # S\u7aef\u7b2c\u4e00\u6b21\u4eceS\u7aefOS\u7f13\u5b58\u4e2d\u53d6\u7684\u6570\u636e: b'hello' res2 = conn . recv ( 5 ) print ( \"\u7b2c\u4e8c\u6b21\" , res2 ) # \u7b2c\u4e8c\u6b21 b'world' res3 = conn . recv ( 4 ) print ( \"\u7b2c\u4e09\u6b21\" , res3 ) # \u7b2c\u4e09\u6b21 b'egon' \"\"\" \u2605 -- \u5ba2\u6237\u7aef \"\"\" from socket import * client = socket ( AF_INET , SOCK_STREAM ) client . connect (( \"127.0.0.1\" , 8080 )) client . send ( b 'hello' ) client . send ( b 'world' ) client . send ( b 'egon' )","title":"\u7cbe\u51c6\u63a5\u6536"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2_TCP%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/#low_b","text":"\u5ba2\u6237\u7aef\u5728send\u6570\u636e\u7684\u8fc7\u7a0b\u4e2d\u4f7f\u7528time.sleep(3)\u95f4\u9694\u77613\u79d2.. \u662f\u901a\u8fc7\u4eba\u4e3a\u5236\u9020\u5ef6\u8fdf\u89e3\u51b3\u7684,\u4e0d\u8981\u8fd9\u6837\u505a!!! \"\"\" \u2605 -- \u670d\u52a1\u7aef \"\"\" from socket import * server = socket ( AF_INET , SOCK_STREAM ) server . setsockopt ( SOL_SOCKET , SO_REUSEADDR , 1 ) server . bind (( \"127.0.0.1\" , 8080 )) server . listen ( 5 ) conn , client_addr = server . accept () res1 = conn . recv ( 1024 ) print ( \"S\u7aef\u7b2c\u4e00\u6b21\u4eceS\u7aefOS\u7f13\u5b58\u4e2d\u53d6\u7684\u6570\u636e:\" , res1 ) # S\u7aef\u7b2c\u4e00\u6b21\u4eceS\u7aefOS\u7f13\u5b58\u4e2d\u53d6\u7684\u6570\u636e: b'hello' res2 = conn . recv ( 1024 ) print ( \"\u7b2c\u4e8c\u6b21\" , res2 ) # \u7b2c\u4e8c\u6b21 b'world' res3 = conn . recv ( 1024 ) print ( \"\u7b2c\u4e09\u6b21\" , res3 ) # \u7b2c\u4e09\u6b21 b'egon' \"\"\" \u2605 -- \u5ba2\u6237\u7aef \"\"\" from socket import * import time client = socket ( AF_INET , SOCK_STREAM ) client . connect (( \"127.0.0.1\" , 8080 )) # -- \u52a0\u5165\u65f6\u95f4\u95f4\u9694\u6761\u4ef6\u6d4b\u8bd5 \u8868\u660e\u7c98\u5305\u53d1\u751f\u7684\u6761\u4ef6 \u6570\u636e\u91cf\u5c0f+\u65f6\u95f4\u95f4\u9694\u77ed # \u867d\u7136\u7b2c\u4e00\u4e2a\u6570\u636e\u5305'hello'\u6570\u636e\u91cf\u5f88\u5c0f,\u4f46\u5ba2\u6237\u7aefos\u4f1a\u7b490.2\u79d2\u5417\uff1f\u4e0d,\u76f8\u5bf9\u4e8e\u4e00\u6b21\u7f51\u7edcIO/\u5ef6\u8fdf\u6765\u8bf4\u592a\u957f\u4e86 # \u5ba2\u6237\u7aef\u7684OS\u4e0d\u4f1a\u7b49\u8fd90.2s,\u76f4\u63a5\u8c03\u7528\u7f51\u5361\u53d1\u9001\u7ed9\u670d\u52a1\u7aefos\u7f13\u5b58 client . send ( b 'hello' ) time . sleep ( 0.2 ) client . send ( b 'world' ) time . sleep ( 0.2 ) client . send ( b 'egon' )","title":"low_B\u65b9\u6848"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2_TCP%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/#_18","text":"TCP\u5206\u6bb5\u4e0eIP\u5206\u7247\u7684\u533a\u522b\u4e0e\u8054\u7cfb\u53c2\u8003: https://cloud.tencent.com/developer/article/1173790 \u25bc MTU = MSS + TCP\u9996\u90e8\u957f\u5ea6 + IP\u9996\u90e8\u957f\u5ea6 TCP\u5206\u6bb5\u7684\u539f\u56e0\u662f\u56e0\u4e3aTCP\u62a5\u6587\u6bb5\u5927\u5c0f\u53d7MSS\u9650\u5236 IP\u5206\u7247\u7684\u539f\u56e0\u5219\u662f\u56e0\u4e3aIP\u6570\u636e\u62a5\u5927\u5c0f\u53d7MTU\u9650\u5236 UDP\u4e0d\u4f1a\u5206\u6bb5 , \u5c31\u7531IP\u6765\u5206\u7247 . TCP\u4f1a\u5206\u6bb5 , \u5f53\u7136\u5c31\u4e0d\u7528IP\u6765\u5206\u4e86 ! \u25bc \u53d1\u9001\u7aef\u8fdb\u884cTCP\u5206\u6bb5\u540e\u5c31\u4e00\u5b9a\u4e0d\u4f1a\u5728IP\u5c42\u8fdb\u884c\u5206\u7247 , \u56e0\u4e3aMSS\u672c\u8eab\u5c31\u662f\u57fa\u4e8eMTU\u63a8\u5bfc\u800c\u6765 , TCP\u5c42\u5206\u6bb5\u6ee1\u8db3\u4e86MSS\u9650\u5236 , \u4e5f\u5c31\u6ee1\u8db3\u4e86MTU\u7684\u7269\u7406\u9650\u5236 . \u4f46\u5728TCP\u5206\u6bb5\u53d1\u751f\u540e\u4ecd\u7136\u53ef\u80fd\u53d1\u751fIP\u5206\u7247 , \u8fd9\u662f\u56e0\u4e3aTCP\u5206\u6bb5\u4ec5\u6ee1\u8db3\u4e86\u901a\u4fe1\u4e24\u7aef\u7684MTU\u8981\u6c42 , \u4f20\u8f93\u8def\u5f84\u4e0a\u5982\u7ecf\u8fc7MTU\u503c\u6bd4\u8be5MTU\u503c\u66f4\u5c0f\u7684\u94fe\u8def , \u90a3\u4e48\u5728\u8f6c\u53d1\u5206\u7247\u5230\u8be5\u6761\u94fe\u8def\u7684\u8bbe\u5907\u4e2d\u4ecd\u4f1a\u4ee5\u66f4\u5c0f\u7684MTU\u503c\u4f5c\u4e3a\u4f9d\u636e\u518d\u6b21\u5206\u7247 . \u25bc \u5206\u6bb5\u4ec5\u53ef\u80fd\u53d1\u751f\u5728\u53d1\u9001\u7aef , \u5206\u7247\u4e0d\u4ec5\u53ef\u80fd\u53d1\u751f\u5728\u53d1\u9001\u7aef , \u66f4\u8fd8\u53ef\u80fd\u53d1\u751f\u5728\u8def\u5f84\u4e0a\u4efb\u4f55\u4e00\u53f0\u5de5\u4f5c\u5728\u4e09\u5c42\u6216\u4ee5\u4e0a\u7684\u8bbe\u5907\u4e2d , \u800c\u4e24\u8005\u7684\u91cd\u7ec4\u90fd\u53ea\u4f1a\u53d1\u751f\u5728\u63a5\u6536\u7aef . 1> \u5f53\u53d1\u9001\u7aef\u7f13\u51b2\u533a\u7684\u957f\u5ea6\u5927\u4e8e\u7f51\u5361\u7684MTU\u65f6, tcp\u4f1a\u5c06\u8fd9\u6b21\u8981\u53d1\u9001\u7684\u6570\u636e\u62c6\u6210\u51e0\u4e2a\u6570\u636e\u5305\u53d1\u9001\u51fa\u53bb. 2> tcp\u5728\u6570\u636e\u4f20\u8f93\u65f6, \u53d1\u9001\u7aef\u5148\u628a\u6570\u636e\u53d1\u9001\u5230\u81ea\u5df1\u7684\u7f13\u5b58\u4e2d, \u7136\u540e\u534f\u8bae\u63a7\u5236\u5c06\u7f13\u5b58\u4e2d\u7684\u6570\u636e\u53d1\u5f80\u5bf9\u7aef, \u5bf9\u7aef\u8fd4\u56de\u4e00\u4e2aack=1, \u53d1\u9001\u7aef\u5219\u6e05\u7406\u7f13\u5b58\u4e2d\u7684\u6570\u636e, \u5bf9\u7aef\u8fd4\u56deack=0, \u5219\u91cd\u65b0\u53d1\u9001\u6570\u636e, \u6240\u4ee5tcp\u662f\u53ef\u9760\u7684.. 3> recv\u91cc\u6307\u5b9a\u76841024\u610f\u601d\u662f\u4ece\u7f13\u5b58\u91cc\u4e00\u6b21\u6700\u591a\u62ff\u51fa1024\u4e2a\u5b57\u8282\u7684\u6570\u636e 4> send \u7684\u5b57\u8282\u6d41\u662f\u5148\u653e\u5165\u5df1\u7aef\u7f13\u5b58, \u7136\u540e\u7531\u534f\u8bae\u63a7\u5236\u5c06\u7f13\u5b58\u5185\u5bb9\u53d1\u5f80\u5bf9\u7aef, \u82e5\u5f85\u53d1\u9001\u7684\u5b57\u8282\u6d41\u5927\u5c0f\u5927\u4e8e\u7f13\u5b58\u5269\u4f59\u7a7a\u95f4, \u7f13\u5b58\u7a7a\u95f4\u4e0d\u8db3, \u90a3\u4e48\u6570\u636e\u4e22\u5931, \u7528 sendall \u5c31\u4f1a\u5faa\u73af\u8c03\u7528send, \u6570\u636e\u4e0d\u4f1a\u4e22\u5931.","title":"\u8865\u5145!!"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/3_%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E3%80%81UDP/","text":"\u6587\u4ef6\u4f20\u8f93\u529f\u80fd \u00b6 \u4f7f\u7528TCP\u5957\u63a5\u5b57\u7a0b\u5e8f\u5b9e\u73b0\u6587\u4ef6\u7684\u4e0b\u8f7d\u529f\u80fd!! \u5ba2\u6237\u7aef\u4e0b\u8f7d\u6587\u4ef6\u90fd\u5b9e\u73b0\u4e86,\u4e0a\u4f20\u6587\u4ef6\u7684\u903b\u8f91\u98a0\u5012\u8fc7\u6765\u5c31\u884c\u4e86.. \u6587\u4ef6\u4f20\u8f93 \u251c\u2500\u2500 client \u2502 \u251c\u2500\u2500 download \u2502 \u2514\u2500\u2500 \u5ba2\u6237\u7aef . py \u2514\u2500\u2500 server \u251c\u2500\u2500 share \u2502 \u2514\u2500\u2500 a . txt \u2514\u2500\u2500 \u670d\u52a1\u7aef . py \u9700\u6c42: \u670d\u52a1\u7aef\u7684\u8d44\u6e90\u5728share\u6587\u4ef6\u5939\u4e0b,\u5ba2\u6237\u7aef\u9700\u4e0b\u8f7da.txt\u5230download\u6587\u4ef6\u5939\u4e0b!! Ps - \u4e4b\u6240\u4ee5\u6307\u5b9a\u670d\u52a1\u7aef\u7684\u8d44\u6e90\u76ee\u5f55,\u4ee5\u53ca\u5ba2\u6237\u7aef\u4e0b\u8f7d\u6587\u4ef6\u540e\u5b58\u653e\u7684\u76ee\u5f55,\u662f\u907f\u514d\u540c\u65f6\u8bfb\u5199\u540c\u4e00\u4e2a\u6587\u4ef6(\u505a\u8fd9\u4e2a\u5b9e\u9a8c\u65f6,\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u90fd\u8fd0\u884c\u5728\u540c\u4e00\u53f0\u673a\u5668\u4e0a\u7684\u561b) \u9762\u5411\u8fc7\u7a0b\u7248\u672c \u00b6 \u54ea\u6015\u52a0\u4e0a\u4e86\u6ce8\u91ca\u53ef\u8bfb\u6027\u4f9d\u65e7\u5f88\u5dee,\u4e0d\u63a8\u8350! \u5ba2\u6237\u7aef \u00b6 import json import os import struct from socket import * download_dir = os . getcwd () + r '/download' # -- \u5ba2\u6237\u7aef\u4e0b\u8f7d\u6587\u4ef6\u7684\u8def\u5f84 (\u5e94\u5199\u5230\u914d\u7f6e\u6587\u4ef6\u4e2d) client = socket ( AF_INET , SOCK_STREAM ) client . connect (( '127.0.0.1' , 8080 )) while True : # -- 1.\u53d1\u547d\u4ee4!! cmd = input ( \">>: \" ) . strip () if not cmd : continue client . send ( cmd . encode ( 'utf-8' )) # -- 2.\u4ee5\u5199\u7684\u65b9\u5f0f\u6253\u5f00\u4e00\u4e2a\u65b0\u6587\u4ef6,\u63a5\u6536\u5ba2\u6237\u7aef\u53d1\u6765\u7684\u6587\u4ef6\u5185\u5bb9\u5e76\u5199\u5165\u65b0\u6587\u4ef6 # -- step1:\u5148\u65364\u4e2a\u5b57\u8282,4\u4e2a\u5b57\u8282\u4e2d\u5305\u542b\u4e86\u62a5\u5934\u7684\u957f\u5ea6 header_len = struct . unpack ( 'i' , client . recv ( 4 ))[ 0 ] # -- \u89e3\u5305\u540e\u662f\u5143\u7956,\u53d6\u7b2c\u4e00\u4e2a\u5143\u7d20 # -- step2:\u518d\u63a5\u6536\u62a5\u5934\u5e76\u89e3\u6790,\u53d6\u51fa\u6211\u4eec\u60f3\u8981\u7684\u4fe1\u606f header_bytes = client . recv ( header_len ) header_json = header_bytes . decode ( 'utf-8' ) # -- \u89e3\u7801 header_dic = json . loads ( header_json ) # -- \u53cd\u5e8f\u5217\u5316 total_size = header_dic [ 'file_size' ] # -- \u53d6\u51fa\u62a5\u5934\u4e2d\u6587\u4ef6\u7684\u957f\u5ea6\u4fe1\u606f file_name = header_dic [ 'filename' ] # -- \u53d6\u51fa\u6587\u4ef6\u540d # -- step3:\u518d\u6536\u771f\u5b9e\u7684\u6570\u636e\u5e76\u5b58\u5165\u65b0\u6587\u4ef6(\u4ee5\u5199\u7684\u65b9\u5f0f\u6253\u5f00)\u4e2d with open ( f \" { download_dir } / { file_name } \" , 'wb' ) as f : recv_size = 0 while recv_size < total_size : # -- \u4e00\u8fb9\u6536\u4e00\u8fb9\u5f80\u6587\u4ef6\u4e2d\u5199 line_data = client . recv ( 1024 ) f . write ( line_data ) recv_size += len ( line_data ) # -- \u82e5\u6587\u4ef6\u5f88\u5927,\u5e94\u8be5\u7ed9\u7528\u6237\u5c55\u793a\u8fdb\u5ea6\u6761.. \u8fd9\u91cc\u5c31\u7b80\u5355\u5904\u7406\u4e0b. print ( \"\u603b\u5927\u5c0f: %s \u5df2\u4e0b\u8f7d\u5927\u5c0f: %s \" % ( total_size , recv_size )) client . close () \u670d\u52a1\u7aef \u00b6 import json import os import struct from socket import * share_dir = os . getcwd () + r \"/share\" # -- \u670d\u52a1\u7aef\u8d44\u6e90\u6587\u4ef6\u7684\u76ee\u5f55 (\u5e94\u5199\u5230\u914d\u7f6e\u6587\u4ef6\u4e2d) server = socket ( AF_INET , SOCK_STREAM ) server . setsockopt ( SOL_SOCKET , SO_REUSEADDR , 1 ) server . bind (( '127.0.0.1' , 8080 )) server . listen ( 5 ) while True : conn , client_addr = server . accept () while True : try : # -- >> 1.\u63a5\u6536\u547d\u4ee4!! res = conn . recv ( 1024 ) # -- b\"get \u6587\u4ef6\u540d\" if not res : break # -- subprocess\u6a21\u5757\u662f\u6267\u884c\u7cfb\u7edf\u547d\u4ee4,\u62ff\u5230\u7cfb\u7edf\u547d\u4ee4\u7684\u7ed3\u679c # \u800c\u6587\u4ef6\u4f20\u8f93\u7684\u547d\u4ee4b\"get a.txt\"\u4e0d\u662f\u7cfb\u7edf\u547d\u4ee4,\u662f\u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u7684 # \u6240\u4ee5\u4e0d\u80fd\u7528subprocess\u6a21\u5757 # -- >> 2.\u89e3\u6790\u547d\u4ee4,\u63d0\u53d6\u76f8\u5e94\u547d\u4ee4\u53c2\u6570!! filename = res . decode ( 'utf-8' ) . split ()[ 1 ] # -- >> 3.\u4ee5\u8bfb\u7684\u65b9\u5f0f\u6253\u5f00\u6587\u4ef6,\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\u53d1\u9001\u7ed9\u5ba2\u6237\u7aef!! # -- step1:\u5148\u5236\u4f5c\u62a5\u5934 header_dic = { 'filename' : filename , 'file_size' : os . path . getsize ( f \" { share_dir } / { filename } \" ), 'hash' : 'helloHKSD775SOne' # -- \u6b64hash\u503c\u662f\u778e\u5199\u6a21\u62df\u7684 } header_json = json . dumps ( header_dic ) # -- \u5e8f\u5217\u5316 header_bytes = header_json . encode ( 'utf-8' ) # -- \u7f16\u7801 # -- step2:\u5148\u53d1\u9001\u62a5\u5934\u7684\u957f\u5ea6 # \"pack\u5c06\u62a5\u5934\u957f\u5ea6len(header_bytes)\u6253\u5305\u62104\u4e2abytes,\u7136\u540e\u53d1\u9001!!\" conn . send ( struct . pack ( 'i' , len ( header_bytes ))) # -- step3:\u53d1\u9001\u62a5\u5934\u7684\u6570\u636e conn . send ( header_bytes ) # -- step4:\u518d\u53d1\u771f\u5b9e\u7684\u6570\u636e,\u5373\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\u53d1\u9001 with open ( f \" { share_dir } / { filename } \" , 'rb' ) as f : # conn.send(f.read()) \u82e5\u6587\u4ef6\u5185\u5bb9\u5f88\u5927,\u4e00\u4e0b\u5b50\u8bfb\u51fa\u6765\u5c31\u4f1a\u5c06\u5185\u5b58\u5360\u6ee1!! for line in f : # -- \u540c\u4e00\u65f6\u523b\u53ea\u6709\u4e00\u884c\u5185\u5bb9\u5728\u5185\u5b58\u4e2d conn . send ( line ) except ConnectionResetError : break conn . close () server . close () \u51fd\u6570\u7248\u672c \u00b6 \u53ef\u8bfb\u6027\u66f4\u5f3a, \u8fd8\u4fbf\u4e8e\u6269\u5c55\u4e0a\u4f20\u529f\u80fd. \u5ba2\u6237\u7aef \u00b6 import json import os import struct from socket import * download_dir = os . getcwd () + r '/download' # -- \u5ba2\u6237\u7aef\u4e0b\u8f7d\u6587\u4ef6\u7684\u8def\u5f84 (\u5e94\u5199\u5230\u914d\u7f6e\u6587\u4ef6\u4e2d) def get ( client ): header_len = struct . unpack ( 'i' , client . recv ( 4 ))[ 0 ] header_bytes = client . recv ( header_len ) header_json = header_bytes . decode ( 'utf-8' ) header_dic = json . loads ( header_json ) total_size = header_dic [ 'file_size' ] file_name = header_dic [ 'filename' ] with open ( f \" { download_dir } / { file_name } \" , 'wb' ) as f : recv_size = 0 while recv_size < total_size : line_data = client . recv ( 1024 ) f . write ( line_data ) recv_size += len ( line_data ) print ( \"\u603b\u5927\u5c0f: %s \u5df2\u4e0b\u8f7d\u5927\u5c0f: %s \" % ( total_size , recv_size )) def run (): client = socket ( AF_INET , SOCK_STREAM ) client . connect (( '127.0.0.1' , 8080 )) while True : inp = input ( \">>: \" ) . strip () if not inp : continue client . send ( inp . encode ( 'utf-8' )) cmds = inp . split () if cmds [ 0 ] == \"get\" : # -- \u4e0b\u8f7d get ( client ) elif cmds [ 1 ] == \"put\" : # -- \u4e0a\u4f20 pass client . close () if __name__ == '__main__' : run () \u670d\u52a1\u7aef \u00b6 import json import os import struct from socket import * share_dir = os . getcwd () + r \"/share\" # -- \u670d\u52a1\u7aef\u8d44\u6e90\u6587\u4ef6\u7684\u76ee\u5f55 (\u5e94\u5199\u5230\u914d\u7f6e\u6587\u4ef6\u4e2d) # -- \u4ece\u670d\u52a1\u7aef\u4e0b\u8f7d\u6587\u4ef6 def data_to_client ( conn , cmds ): filename = cmds [ 1 ] header_dic = { 'filename' : filename , 'file_size' : os . path . getsize ( f \" { share_dir } / { filename } \" ), 'hash' : 'helloHKSD775SOne' # -- \u6b64hash\u503c\u662f\u778e\u5199\u6a21\u62df\u7684 } header_json = json . dumps ( header_dic ) # -- \u5e8f\u5217\u5316 header_bytes = header_json . encode ( 'utf-8' ) # -- \u7f16\u7801 conn . send ( struct . pack ( 'i' , len ( header_bytes ))) conn . send ( header_bytes ) with open ( f \" { share_dir } / { filename } \" , 'rb' ) as f : for line in f : conn . send ( line ) def run (): server = socket ( AF_INET , SOCK_STREAM ) server . setsockopt ( SOL_SOCKET , SO_REUSEADDR , 1 ) server . bind (( '127.0.0.1' , 8080 )) server . listen ( 5 ) while True : conn , client_addr = server . accept () while True : try : res = conn . recv ( 1024 ) if not res : break cmds = res . decode ( 'utf-8' ) . split () if cmds [ 0 ] == \"get\" : data_to_client ( conn , cmds ) elif cmds [ 0 ] == \"put\" : # -- \u5ba2\u6237\u7aef\u4e0a\u4f20\u6587\u4ef6\u5230\u670d\u52a1\u7aef pass except ConnectionResetError : break conn . close () server . close () if __name__ == '__main__' : run () \u9762\u5411\u5bf9\u8c61\u7248\u672c \u00b6 \u5c06\u6570\u636e\u548c\u64cd\u4f5c\u6570\u636e\u7684\u65b9\u6cd5\u6574\u5408\u5230\u4e00\u8d77! \u63a8\u8350! ... ... UDP\u5957\u63a5\u5b57\u7a0b\u5e8f \u00b6 UDP\u5957\u63a5\u5b57\u7a0b\u5e8f,\u901a\u5e38\u7528\u5728 \u67e5\u8be2 \u65b9\u9762,QQ\u901a\u4fe1\u4e5f\u7528\u7684UDP.. \u8981\u7279\u522b\u6ce8\u610f\u7684\u662f! UDP\u7a33\u5b9a\u4f20\u8f93\u7684\u6570\u636e\u91cf\u4e3a512\u5b57\u8282! \u4e0d\u80fd\u7528\u5b83\u6765\u4f20\u5927\u6570\u636e!!\u5047\u8bbe\u6587\u4ef6\u6709\u4e00\u4e2aT,\u4f1a\u5206\u591a\u6b21\u53d1\u9001,\u4f7f\u7528UDP\u7684\u8bdd,\u4f46\u51e1\u4e2d\u95f4\u4e22\u4e00\u6b21,\u6574\u4e2a\u6587\u4ef6\u62a5\u5e9f. \u7f51\u4e0a\u8d2d\u7269,\u8f6c\u8d26\u7b49\u4ea4\u6613\u90fd\u4e0d\u80fd\u7528UDP\u534f\u8bae!! \u5b9e\u73b0\u4ee3\u7801 \u00b6 \u670d\u52a1\u7aef \u00b6 import socket # -- \u65e0listen\u3001accept \u56e0\u4e3aUDP\u65e0\u9700\u5efa\u7acb\u8fde\u63a5 <UDP[\u65e0]\u534a\u8fde\u63a5\u6c60\u7684\u6982\u5ff5> server = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) server . bind (( \"127.0.0.1\" , 8080 )) while True : data , client_addr = server . recvfrom ( 1024 ) # -- (b'hello', ('127.0.0.1', 51650)) print ( data ) server . sendto ( data . upper (), client_addr ) server . close () \u5ba2\u6237\u7aef \u00b6 import socket # -- \u65e0connect \u56e0\u4e3aUDP\u65e0\u9700\u5efa\u7acb\u8fde\u63a5 client = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) while True : msg = input ( \">>:\" ) . strip () client . sendto ( msg . encode ( 'utf-8' ), ( \"127.0.0.1\" , 8080 )) # -- \u6b64\u5904\u7684server_addr\u6ca1\u6709\u7528 \u53ef\u4ee5\u7528_\u4ee3\u66ff\u8bf4\u660e data , server_addr = client . recvfrom ( 1024 ) # -- (b'HELLO', ('127.0.0.1', 8080)) print ( data ) client . close () \u4ee3\u7801\u5206\u6790 \u00b6 \u5bf9UDP\u5957\u63a5\u5b57\u7684\u4ee3\u7801\u8fdb\u884c\u4e00\u901a\u5206\u6790, \u4e0eTCP\u7684\u5b9e\u73b0\u4f5c\u4e00\u4f5c\u6bd4\u8f83!!! \u542f\u52a8\u987a\u5e8f \u00b6 \u57fa\u4e8eTCP\u534f\u8bae\u7684\u901a\u4fe1, \u5fc5\u987b\u5148\u542f\u52a8\u670d\u52a1\u7aef\u518d\u542f\u52a8\u5ba2\u6237\u7aef. \u57fa\u4e8eUDP\u534f\u8bae,\u968f\u4fbf\u5148\u542f\u52a8\u54ea\u7aef\u90fd\u53ef\u4ee5.. \u5ba2\u6237\u7aef\u542f\u52a8\u540e,\u76f4\u63a5\u53d1,\u5b83\u53ef\u4e0d\u7ba1\u670d\u52a1\u7aef\u542f\u52a8\u4e0e\u5426,\u6570\u636e\u662f\u5426\u6210\u529f\u5230\u8fbe.. \u5ba2\u6237\u7aef\u56de\u7a7a \u00b6 TCP\u5ba2\u6237\u7aef\u76f4\u63a5\u56de\u8f66\u8f93\u7a7a,\u5ba2\u6237\u7aef\u76f4\u63a5\u5361\u4f4f.. \u662f\u56e0\u4e3a\u5ba2\u6237\u7aefsend\u7ed9\u81ea\u4e2a\u513f\u7684OS\u7f13\u5b58\u7684\u662f\u7a7a\u5b57\u8282..OS\u4e0d\u4f1a\u6709\u4efb\u4f55\u53cd\u5e94,\u4e0d\u4f1a\u6709\u4efb\u4f55\u7f51\u7edc\u4f20\u8f93\u7684\u884c\u4e3a.. \u670d\u52a1\u7aef\u5728\u7b49\u5ba2\u6237\u7aef\u53d1,\u5ba2\u6237\u7aef\u5728\u7b49\u670d\u52a1\u7aef\u53d1,\u5c2c\u4f4f\u4e86.. UDP\u5ba2\u6237\u7aef client.sendto(b\"\") \u770b\u4f3c\u662f\u7ed9\u5ba2\u6237\u7aefOS\u7f13\u5b58\u4e00\u4e2a\u7a7a\u5b57\u8282, \u5b9e\u5219\u8fd8\u7ed9\u4e86\u4e2a\u62a5\u5934!! \u662f\u6709\u6570\u636e\u7684!! UDP\u6570\u636e\u62a5\u534f\u8bae,\u6bcf\u4e2a\u6570\u636e\u62a5\u90fd\u6709\u4e00\u4e2a\u62a5\u5934! \u662f\u5426\u5e76\u53d1 \u00b6 \u626b\u76f2(\u4e86\u89e3): \u7531\u4e8eUDP\u652f\u6301\u7684\u662f\u4e00\u5bf9\u591a\u7684\u6a21\u5f0f \u6240\u4ee5\u63a5\u6536\u7aef\u7684skbuff(\u5957\u63a5\u5b57\u7f13\u51b2\u533a)\u91c7\u7528\u4e86\u94fe\u5f0f\u7ed3\u6784\u6765\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u5230\u8fbe\u7684UDP\u5305 \u5728\u6bcf\u4e2aUDP\u5305\u4e2d\u5c31\u6709\u4e86\u6d88\u606f\u5934(\u6d88\u606f\u6765\u6e90\u5730\u5740\uff0c\u7aef\u53e3\u7b49\u4fe1\u606f) \u8fd9\u6837,\u5bf9\u4e8e\u63a5\u6536\u7aef\u6765\u8bf4,\u5c31\u5bb9\u6613\u8fdb\u884c\u533a\u5206\u5904\u7406\u4e86!! \u524d\u9762\u7684TCP\u5957\u63a5\u5b57\u7a0b\u5e8f\u56e0\u4e3a\u6ca1\u6709\u5b9e\u73b0\u591a\u8fdb\u7a0b\u591a\u7ebf\u7a0b,\u6240\u4ee5\u662f\u4e0d\u5177\u5907\u5e76\u53d1\u7684\u6548\u679c\u7684!! \u8fd9\u91cc\u7684UDP\u5957\u63a5\u5b57\u7a0b\u5e8f,\u5f00\u542f\u591a\u4e2a\u5ba2\u6237\u7aef.. \u5b9e\u9a8c\u4e0b\u662f\u6709\u5e76\u53d1\u7684\u6548\u679c\u7684. \u9996\u5148\u8981\u5bdf\u89c9\u5230, UDP\u7684C\u7aef\u548cS\u7aef\u6536\u6d88\u606f\u65f6\u90fd\u4f1a\u6536\u5230\u5bf9\u65b9\u7684\u4fe1\u606f(\u5305\u542b\u5bf9\u65b9\u7684IP\u548cport); UDP\u670d\u52a1\u7aef,recvfrom\u4e00\u4e0b,\u518dsendto\u4e00\u4e0b.. \u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u56de\u5408\u4e00\u4e2a\u56de\u5408\u7684\u54cd\u5e94\u591a\u4e2a\u5ba2\u6237\u7aef\u7684\u4e00\u6761\u6761\u6d88\u606f\u7684. \u4f46\u54cd\u5e94\u7684\u901f\u5ea6\u592a\u5feb\u4e86,\u7ed9\u64cd\u4f5c\u5ba2\u6237\u7aef\u7684\u4eba\u4eec\u7684\u611f\u89c9\u5c31\u662f\u540c\u65f6\u54cd\u5e94\u7684!! \u8fd9\u79cd\u5e76\u53d1\u662f\u6709\u5c40\u9650\u6027\u7684, \u5047\u5982\u6709\u4e00\u4e07\u4e2a\u5ba2\u6237\u7aef\u540c\u65f6\u5728\u4e0e\u670d\u52a1\u7aef\u8fdb\u884cUDP\u901a\u4fe1\u5462\uff1f \u7ed9\u4eba\u7684\u611f\u89c9\u5c31\u4e0d\u662f\u540c\u65f6\u54cd\u5e94\u7684\u5566. \u670d\u52a1\u7aef\u5faa\u73af\u4e00\u4e07\u6b21\u591a\u5c11\u90fd\u9700\u8981\u70b9\u65f6\u95f4\u7684\u5427!!\u4e00\u4e07\u4e2a\u5ba2\u6237\u7aef\u5c31\u80fd\u611f\u53d7\u5230\u5148\u540e. (\u82e5\u8003\u8651\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u6d88\u606f\u6570\u636e\u91cf\u6bd4\u8f83\u5927\u7684\u8bdd,\u5ba2\u6237\u7b49\u5f85\u7684\u611f\u89c9\u66f4\u660e\u663e..) So, UDP\u5e76\u6ca1\u6709\u5b9e\u73b0\u5e76\u53d1!!! \u65e0\u7c98\u5305\u95ee\u9898 \u00b6 \u63a5\u6536\u5927\u4e8e\u53d1\u9001 \u00b6 \u5728TCP\u91cc,\u5ba2\u6237\u7aefsend\u4e09\u4e2a\u6570\u636e\u5305\u5230\u5ba2\u6237\u7aefOS\u7f13\u5b58,\u4f1a\u4f9d\u7167nagle\u7b97\u6cd5\u7ec4\u7ec7\u6570\u636e\u5408\u6210\u4e00\u4e2ab\"helloworld\" (\u7b2c\u4e09\u4e2asend\u7684\u662fb\"\",OS\u538b\u6839\u4e0d\u4f1a\u53fc\u5b83) \u53d1\u9001\u7ed9\u670d\u52a1\u7aef.. \u670d\u52a1\u7aefrecv(1024)\u4e00\u6b21\u5c31\u80fd\u63a5\u6536\u5b8c.. \u5728UDP\u91cc,\u8be5\u7a0b\u5e8f\u91cc,\u5ba2\u6237\u7aef\u7684\u6bcf\u4e00\u4e2asendto\u90fd\u4f1a\u4f9d\u6b21\u5bf9\u5e94\u670d\u52a1\u7aef\u7684recvfrom!! \u6536\u53d1\u4e00\u4e00\u5bf9\u5e94!! 1> \u5ba2\u6237\u7aef\u53ea\u53d1\u4e09\u6b21,\u670d\u52a1\u7aef\u5c31\u53ea\u6536\u4e09\u6b21,\u670d\u52a1\u7aef\u7b2c\u56db\u6b21\u7684recvfrom\u82e6\u82e6\u7b49\u5f85ing.. 2> \u54ea\u6015\u7b2c\u4e09\u6b21C\u7aef\u53d1\u7a7a\u5b57\u8282\u6570\u636e,S\u7aef\u4e5f\u80fd\u6536\u5230!!! \u63d0\u9192\u4e00\u4e0b!! UDP\u6536\u53d1\u8ddfTCP\u4e00\u6837,\u90fd\u662f\u53d1\u9001\u7aef\u5148\u7ed9\u81ea\u5df1\u7684OS\u7f13\u5b58,\u63a5\u6536\u7aef\u518d\u4ece\u81ea\u5df1\u7684OS\u7f13\u5b58\u91cc\u53d6.. \u63a5\u6536\u5c0f\u4e8e\u53d1\u9001 \u00b6 \u5728TCP\u4e2d,\u7b2c\u4e00\u6b21\u7ed9\u4e86\u4f605\u5b57\u8282,\u4f46\u4f60\u53ea\u6536\u4e861\u4e2a\u5b57\u8282,\u8fd8\u67094\u4e2a\u5728\u4f60\u81ea\u5df1\u7684OS\u7f13\u5b58\u91cc\u653e\u7740,\u4e0b\u6b21\u53d6\u65f6\u4f1a\u5148\u62ff! \u5728UDP\u4e2d,\u5206\u7cfb\u7edf: \u65e0\u9700\u5173\u6ce8window\u7684\u60c5\u51b5,\u4e86\u89e3\u5373\u53ef,\u6211\u4eec\u90fd\u662f\u7528linux linux -- \u7ed9\u4f604\u4e2a,\u4f60\u53ea\u65361\u4e2a,\u90a3\u4e48\u5269\u4e0b4\u4e2a\u76f4\u63a5\u4e22\u4e86.\u4e0d\u4f1a\u6709\u6b8b\u7559! windows -- \u76f4\u63a5\u62a5\u9519! OSError: \u8be5\u7528\u6237\u7528\u4e8e\u63a5\u6536\u6570\u636e\u62a5\u7684\u7f13\u51b2\u533a\u6bd4\u6570\u636e\u62a5\u5c0f.. So,UDP\u7684\u53d1\u9001\u6570\u636e\u91cf\u8981\u5c0f\u4e8e\u63a5\u6536\u6570\u636e\u91cf\u7684\u5927\u5c0f!! \u4f46\u6bcf\u6b21\u53d1\u9001\u7684\u6570\u636e\u91cf\u4e0d\u8981\u8d85\u8fc7512bytes..(\u8d85\u8fc7\u4e86\u4e22\u5305\u4e25\u91cd) TCP\u4e0eUDP\u7684\u5f02\u540c \u00b6 TCP\u662f\u9762\u5411\u8fde\u63a5\u7684 , \u9762\u5411\u6d41\u7684 , \u63d0\u4f9b\u9ad8\u53ef\u9760\u6027\u670d\u52a1 . UDP\u662f\u65e0\u8fde\u63a5\u7684 , \u9762\u5411\u6d88\u606f\u7684 , \u63d0\u4f9b\u9ad8\u6548\u7387\u670d\u52a1 . 1 > TCP\u9762\u5411\u6d41\u7684\u901a\u4fe1\u662f\u65e0\u6d88\u606f\u4fdd\u62a4\u8fb9\u754c\u7684 ; -- \u7c98\u5305\u95ee\u9898 UDP\u9762\u5411\u6d88\u606f\u7684\u901a\u4fe1\u662f\u6709\u6d88\u606f\u4fdd\u62a4\u8fb9\u754c\u7684 . -- UDP\u6570\u636e\u62a5\u534f\u8bae\u81ea\u5e26\u62a5\u5934 ! 2 > tcp\u662f\u57fa\u4e8e\u6570\u636e\u6d41\u7684 , \u4e8e\u662f\u6536\u53d1\u7684\u6d88\u606f\u4e0d\u80fd\u4e3a\u7a7a , \u8fd9\u5c31\u9700\u8981\u5728\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u90fd\u6dfb\u52a0\u7a7a\u6d88\u606f\u7684\u5904\u7406\u673a\u5236 , \u9632\u6b62\u7a0b\u5e8f\u5361\u4f4f \u800cudp\u662f\u57fa\u4e8e\u6570\u636e\u62a5\u7684 , \u5373\u4fbf\u662f\u4f60\u8f93\u5165\u7684\u662f\u7a7a\u5185\u5bb9 ( \u76f4\u63a5\u56de\u8f66 ), \u90a3\u4e5f\u4e0d\u662f\u7a7a\u6d88\u606f , udp\u534f\u8bae\u4f1a\u5e2e\u4f60\u5c01\u88c5\u4e0a\u6d88\u606f\u5934 3 > -- udp\u7684recvfrom\u662f\u963b\u585e\u7684 , \u4e00\u4e2arecvfrom ( x ) \u5fc5\u987b\u5bf9\u552f\u4e00\u4e00\u4e2asendinto ( y ), \u6536\u5b8c\u4e86x\u4e2a\u5b57\u8282\u7684\u6570\u636e\u5c31\u7b97\u5b8c\u6210 ; \u5373UDP\u6536\u53d1\u662f\u4e00\u4e00\u5bf9\u5e94\u7684 !! \u82e5\u662fy > x\u6570\u636e\u5c31\u4e22\u5931 , \u8fd9\u610f\u5473\u7740udp\u6839\u672c\u4e0d\u4f1a\u7c98\u5305 , \u4f46\u662f\u4f1a\u4e22\u6570\u636e , \u4e0d\u53ef\u9760 . -- tcp\u7684\u534f\u8bae\u6570\u636e\u4e0d\u4f1a\u4e22 , \u6ca1\u6709\u6536\u5b8c\u5305 , \u4e0b\u6b21\u63a5\u6536 , \u4f1a\u7ee7\u7eed\u4e0a\u6b21\u7ee7\u7eed\u63a5\u6536 , \u5df1\u7aef\u603b\u662f\u5728\u6536\u5230ack\u65f6\u624d\u4f1a\u6e05\u9664\u7f13\u51b2\u533a\u5185\u5bb9 . TCP\u6536\u53d1\u4e0d\u662f\u4e00\u4e00\u5bf9\u5e94\u7684 , \u6bd4\u5982\u53ef5\u6b21send , 2 \u6b21recv . \u4f46TCP\u6709\u4e00\u4e00\u5bf9\u5e94\u7684socket . \u6570\u636e\u662f\u53ef\u9760\u7684 , \u4f46\u662f\u4f1a\u7c98\u5305 .","title":"\u6587\u4ef6\u4f20\u8f93\u3001UDP"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/3_%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E3%80%81UDP/#_1","text":"\u4f7f\u7528TCP\u5957\u63a5\u5b57\u7a0b\u5e8f\u5b9e\u73b0\u6587\u4ef6\u7684\u4e0b\u8f7d\u529f\u80fd!! \u5ba2\u6237\u7aef\u4e0b\u8f7d\u6587\u4ef6\u90fd\u5b9e\u73b0\u4e86,\u4e0a\u4f20\u6587\u4ef6\u7684\u903b\u8f91\u98a0\u5012\u8fc7\u6765\u5c31\u884c\u4e86.. \u6587\u4ef6\u4f20\u8f93 \u251c\u2500\u2500 client \u2502 \u251c\u2500\u2500 download \u2502 \u2514\u2500\u2500 \u5ba2\u6237\u7aef . py \u2514\u2500\u2500 server \u251c\u2500\u2500 share \u2502 \u2514\u2500\u2500 a . txt \u2514\u2500\u2500 \u670d\u52a1\u7aef . py \u9700\u6c42: \u670d\u52a1\u7aef\u7684\u8d44\u6e90\u5728share\u6587\u4ef6\u5939\u4e0b,\u5ba2\u6237\u7aef\u9700\u4e0b\u8f7da.txt\u5230download\u6587\u4ef6\u5939\u4e0b!! Ps - \u4e4b\u6240\u4ee5\u6307\u5b9a\u670d\u52a1\u7aef\u7684\u8d44\u6e90\u76ee\u5f55,\u4ee5\u53ca\u5ba2\u6237\u7aef\u4e0b\u8f7d\u6587\u4ef6\u540e\u5b58\u653e\u7684\u76ee\u5f55,\u662f\u907f\u514d\u540c\u65f6\u8bfb\u5199\u540c\u4e00\u4e2a\u6587\u4ef6(\u505a\u8fd9\u4e2a\u5b9e\u9a8c\u65f6,\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u90fd\u8fd0\u884c\u5728\u540c\u4e00\u53f0\u673a\u5668\u4e0a\u7684\u561b)","title":"\u6587\u4ef6\u4f20\u8f93\u529f\u80fd"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/3_%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E3%80%81UDP/#_2","text":"\u54ea\u6015\u52a0\u4e0a\u4e86\u6ce8\u91ca\u53ef\u8bfb\u6027\u4f9d\u65e7\u5f88\u5dee,\u4e0d\u63a8\u8350!","title":"\u9762\u5411\u8fc7\u7a0b\u7248\u672c"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/3_%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E3%80%81UDP/#_3","text":"import json import os import struct from socket import * download_dir = os . getcwd () + r '/download' # -- \u5ba2\u6237\u7aef\u4e0b\u8f7d\u6587\u4ef6\u7684\u8def\u5f84 (\u5e94\u5199\u5230\u914d\u7f6e\u6587\u4ef6\u4e2d) client = socket ( AF_INET , SOCK_STREAM ) client . connect (( '127.0.0.1' , 8080 )) while True : # -- 1.\u53d1\u547d\u4ee4!! cmd = input ( \">>: \" ) . strip () if not cmd : continue client . send ( cmd . encode ( 'utf-8' )) # -- 2.\u4ee5\u5199\u7684\u65b9\u5f0f\u6253\u5f00\u4e00\u4e2a\u65b0\u6587\u4ef6,\u63a5\u6536\u5ba2\u6237\u7aef\u53d1\u6765\u7684\u6587\u4ef6\u5185\u5bb9\u5e76\u5199\u5165\u65b0\u6587\u4ef6 # -- step1:\u5148\u65364\u4e2a\u5b57\u8282,4\u4e2a\u5b57\u8282\u4e2d\u5305\u542b\u4e86\u62a5\u5934\u7684\u957f\u5ea6 header_len = struct . unpack ( 'i' , client . recv ( 4 ))[ 0 ] # -- \u89e3\u5305\u540e\u662f\u5143\u7956,\u53d6\u7b2c\u4e00\u4e2a\u5143\u7d20 # -- step2:\u518d\u63a5\u6536\u62a5\u5934\u5e76\u89e3\u6790,\u53d6\u51fa\u6211\u4eec\u60f3\u8981\u7684\u4fe1\u606f header_bytes = client . recv ( header_len ) header_json = header_bytes . decode ( 'utf-8' ) # -- \u89e3\u7801 header_dic = json . loads ( header_json ) # -- \u53cd\u5e8f\u5217\u5316 total_size = header_dic [ 'file_size' ] # -- \u53d6\u51fa\u62a5\u5934\u4e2d\u6587\u4ef6\u7684\u957f\u5ea6\u4fe1\u606f file_name = header_dic [ 'filename' ] # -- \u53d6\u51fa\u6587\u4ef6\u540d # -- step3:\u518d\u6536\u771f\u5b9e\u7684\u6570\u636e\u5e76\u5b58\u5165\u65b0\u6587\u4ef6(\u4ee5\u5199\u7684\u65b9\u5f0f\u6253\u5f00)\u4e2d with open ( f \" { download_dir } / { file_name } \" , 'wb' ) as f : recv_size = 0 while recv_size < total_size : # -- \u4e00\u8fb9\u6536\u4e00\u8fb9\u5f80\u6587\u4ef6\u4e2d\u5199 line_data = client . recv ( 1024 ) f . write ( line_data ) recv_size += len ( line_data ) # -- \u82e5\u6587\u4ef6\u5f88\u5927,\u5e94\u8be5\u7ed9\u7528\u6237\u5c55\u793a\u8fdb\u5ea6\u6761.. \u8fd9\u91cc\u5c31\u7b80\u5355\u5904\u7406\u4e0b. print ( \"\u603b\u5927\u5c0f: %s \u5df2\u4e0b\u8f7d\u5927\u5c0f: %s \" % ( total_size , recv_size )) client . close ()","title":"\u5ba2\u6237\u7aef"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/3_%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E3%80%81UDP/#_4","text":"import json import os import struct from socket import * share_dir = os . getcwd () + r \"/share\" # -- \u670d\u52a1\u7aef\u8d44\u6e90\u6587\u4ef6\u7684\u76ee\u5f55 (\u5e94\u5199\u5230\u914d\u7f6e\u6587\u4ef6\u4e2d) server = socket ( AF_INET , SOCK_STREAM ) server . setsockopt ( SOL_SOCKET , SO_REUSEADDR , 1 ) server . bind (( '127.0.0.1' , 8080 )) server . listen ( 5 ) while True : conn , client_addr = server . accept () while True : try : # -- >> 1.\u63a5\u6536\u547d\u4ee4!! res = conn . recv ( 1024 ) # -- b\"get \u6587\u4ef6\u540d\" if not res : break # -- subprocess\u6a21\u5757\u662f\u6267\u884c\u7cfb\u7edf\u547d\u4ee4,\u62ff\u5230\u7cfb\u7edf\u547d\u4ee4\u7684\u7ed3\u679c # \u800c\u6587\u4ef6\u4f20\u8f93\u7684\u547d\u4ee4b\"get a.txt\"\u4e0d\u662f\u7cfb\u7edf\u547d\u4ee4,\u662f\u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u7684 # \u6240\u4ee5\u4e0d\u80fd\u7528subprocess\u6a21\u5757 # -- >> 2.\u89e3\u6790\u547d\u4ee4,\u63d0\u53d6\u76f8\u5e94\u547d\u4ee4\u53c2\u6570!! filename = res . decode ( 'utf-8' ) . split ()[ 1 ] # -- >> 3.\u4ee5\u8bfb\u7684\u65b9\u5f0f\u6253\u5f00\u6587\u4ef6,\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\u53d1\u9001\u7ed9\u5ba2\u6237\u7aef!! # -- step1:\u5148\u5236\u4f5c\u62a5\u5934 header_dic = { 'filename' : filename , 'file_size' : os . path . getsize ( f \" { share_dir } / { filename } \" ), 'hash' : 'helloHKSD775SOne' # -- \u6b64hash\u503c\u662f\u778e\u5199\u6a21\u62df\u7684 } header_json = json . dumps ( header_dic ) # -- \u5e8f\u5217\u5316 header_bytes = header_json . encode ( 'utf-8' ) # -- \u7f16\u7801 # -- step2:\u5148\u53d1\u9001\u62a5\u5934\u7684\u957f\u5ea6 # \"pack\u5c06\u62a5\u5934\u957f\u5ea6len(header_bytes)\u6253\u5305\u62104\u4e2abytes,\u7136\u540e\u53d1\u9001!!\" conn . send ( struct . pack ( 'i' , len ( header_bytes ))) # -- step3:\u53d1\u9001\u62a5\u5934\u7684\u6570\u636e conn . send ( header_bytes ) # -- step4:\u518d\u53d1\u771f\u5b9e\u7684\u6570\u636e,\u5373\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\u53d1\u9001 with open ( f \" { share_dir } / { filename } \" , 'rb' ) as f : # conn.send(f.read()) \u82e5\u6587\u4ef6\u5185\u5bb9\u5f88\u5927,\u4e00\u4e0b\u5b50\u8bfb\u51fa\u6765\u5c31\u4f1a\u5c06\u5185\u5b58\u5360\u6ee1!! for line in f : # -- \u540c\u4e00\u65f6\u523b\u53ea\u6709\u4e00\u884c\u5185\u5bb9\u5728\u5185\u5b58\u4e2d conn . send ( line ) except ConnectionResetError : break conn . close () server . close ()","title":"\u670d\u52a1\u7aef"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/3_%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E3%80%81UDP/#_5","text":"\u53ef\u8bfb\u6027\u66f4\u5f3a, \u8fd8\u4fbf\u4e8e\u6269\u5c55\u4e0a\u4f20\u529f\u80fd.","title":"\u51fd\u6570\u7248\u672c"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/3_%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E3%80%81UDP/#_6","text":"import json import os import struct from socket import * download_dir = os . getcwd () + r '/download' # -- \u5ba2\u6237\u7aef\u4e0b\u8f7d\u6587\u4ef6\u7684\u8def\u5f84 (\u5e94\u5199\u5230\u914d\u7f6e\u6587\u4ef6\u4e2d) def get ( client ): header_len = struct . unpack ( 'i' , client . recv ( 4 ))[ 0 ] header_bytes = client . recv ( header_len ) header_json = header_bytes . decode ( 'utf-8' ) header_dic = json . loads ( header_json ) total_size = header_dic [ 'file_size' ] file_name = header_dic [ 'filename' ] with open ( f \" { download_dir } / { file_name } \" , 'wb' ) as f : recv_size = 0 while recv_size < total_size : line_data = client . recv ( 1024 ) f . write ( line_data ) recv_size += len ( line_data ) print ( \"\u603b\u5927\u5c0f: %s \u5df2\u4e0b\u8f7d\u5927\u5c0f: %s \" % ( total_size , recv_size )) def run (): client = socket ( AF_INET , SOCK_STREAM ) client . connect (( '127.0.0.1' , 8080 )) while True : inp = input ( \">>: \" ) . strip () if not inp : continue client . send ( inp . encode ( 'utf-8' )) cmds = inp . split () if cmds [ 0 ] == \"get\" : # -- \u4e0b\u8f7d get ( client ) elif cmds [ 1 ] == \"put\" : # -- \u4e0a\u4f20 pass client . close () if __name__ == '__main__' : run ()","title":"\u5ba2\u6237\u7aef"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/3_%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E3%80%81UDP/#_7","text":"import json import os import struct from socket import * share_dir = os . getcwd () + r \"/share\" # -- \u670d\u52a1\u7aef\u8d44\u6e90\u6587\u4ef6\u7684\u76ee\u5f55 (\u5e94\u5199\u5230\u914d\u7f6e\u6587\u4ef6\u4e2d) # -- \u4ece\u670d\u52a1\u7aef\u4e0b\u8f7d\u6587\u4ef6 def data_to_client ( conn , cmds ): filename = cmds [ 1 ] header_dic = { 'filename' : filename , 'file_size' : os . path . getsize ( f \" { share_dir } / { filename } \" ), 'hash' : 'helloHKSD775SOne' # -- \u6b64hash\u503c\u662f\u778e\u5199\u6a21\u62df\u7684 } header_json = json . dumps ( header_dic ) # -- \u5e8f\u5217\u5316 header_bytes = header_json . encode ( 'utf-8' ) # -- \u7f16\u7801 conn . send ( struct . pack ( 'i' , len ( header_bytes ))) conn . send ( header_bytes ) with open ( f \" { share_dir } / { filename } \" , 'rb' ) as f : for line in f : conn . send ( line ) def run (): server = socket ( AF_INET , SOCK_STREAM ) server . setsockopt ( SOL_SOCKET , SO_REUSEADDR , 1 ) server . bind (( '127.0.0.1' , 8080 )) server . listen ( 5 ) while True : conn , client_addr = server . accept () while True : try : res = conn . recv ( 1024 ) if not res : break cmds = res . decode ( 'utf-8' ) . split () if cmds [ 0 ] == \"get\" : data_to_client ( conn , cmds ) elif cmds [ 0 ] == \"put\" : # -- \u5ba2\u6237\u7aef\u4e0a\u4f20\u6587\u4ef6\u5230\u670d\u52a1\u7aef pass except ConnectionResetError : break conn . close () server . close () if __name__ == '__main__' : run ()","title":"\u670d\u52a1\u7aef"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/3_%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E3%80%81UDP/#_8","text":"\u5c06\u6570\u636e\u548c\u64cd\u4f5c\u6570\u636e\u7684\u65b9\u6cd5\u6574\u5408\u5230\u4e00\u8d77! \u63a8\u8350! ... ...","title":"\u9762\u5411\u5bf9\u8c61\u7248\u672c"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/3_%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E3%80%81UDP/#udp","text":"UDP\u5957\u63a5\u5b57\u7a0b\u5e8f,\u901a\u5e38\u7528\u5728 \u67e5\u8be2 \u65b9\u9762,QQ\u901a\u4fe1\u4e5f\u7528\u7684UDP.. \u8981\u7279\u522b\u6ce8\u610f\u7684\u662f! UDP\u7a33\u5b9a\u4f20\u8f93\u7684\u6570\u636e\u91cf\u4e3a512\u5b57\u8282! \u4e0d\u80fd\u7528\u5b83\u6765\u4f20\u5927\u6570\u636e!!\u5047\u8bbe\u6587\u4ef6\u6709\u4e00\u4e2aT,\u4f1a\u5206\u591a\u6b21\u53d1\u9001,\u4f7f\u7528UDP\u7684\u8bdd,\u4f46\u51e1\u4e2d\u95f4\u4e22\u4e00\u6b21,\u6574\u4e2a\u6587\u4ef6\u62a5\u5e9f. \u7f51\u4e0a\u8d2d\u7269,\u8f6c\u8d26\u7b49\u4ea4\u6613\u90fd\u4e0d\u80fd\u7528UDP\u534f\u8bae!!","title":"UDP\u5957\u63a5\u5b57\u7a0b\u5e8f"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/3_%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E3%80%81UDP/#_9","text":"","title":"\u5b9e\u73b0\u4ee3\u7801"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/3_%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E3%80%81UDP/#_10","text":"import socket # -- \u65e0listen\u3001accept \u56e0\u4e3aUDP\u65e0\u9700\u5efa\u7acb\u8fde\u63a5 <UDP[\u65e0]\u534a\u8fde\u63a5\u6c60\u7684\u6982\u5ff5> server = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) server . bind (( \"127.0.0.1\" , 8080 )) while True : data , client_addr = server . recvfrom ( 1024 ) # -- (b'hello', ('127.0.0.1', 51650)) print ( data ) server . sendto ( data . upper (), client_addr ) server . close ()","title":"\u670d\u52a1\u7aef"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/3_%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E3%80%81UDP/#_11","text":"import socket # -- \u65e0connect \u56e0\u4e3aUDP\u65e0\u9700\u5efa\u7acb\u8fde\u63a5 client = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) while True : msg = input ( \">>:\" ) . strip () client . sendto ( msg . encode ( 'utf-8' ), ( \"127.0.0.1\" , 8080 )) # -- \u6b64\u5904\u7684server_addr\u6ca1\u6709\u7528 \u53ef\u4ee5\u7528_\u4ee3\u66ff\u8bf4\u660e data , server_addr = client . recvfrom ( 1024 ) # -- (b'HELLO', ('127.0.0.1', 8080)) print ( data ) client . close ()","title":"\u5ba2\u6237\u7aef"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/3_%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E3%80%81UDP/#_12","text":"\u5bf9UDP\u5957\u63a5\u5b57\u7684\u4ee3\u7801\u8fdb\u884c\u4e00\u901a\u5206\u6790, \u4e0eTCP\u7684\u5b9e\u73b0\u4f5c\u4e00\u4f5c\u6bd4\u8f83!!!","title":"\u4ee3\u7801\u5206\u6790"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/3_%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E3%80%81UDP/#_13","text":"\u57fa\u4e8eTCP\u534f\u8bae\u7684\u901a\u4fe1, \u5fc5\u987b\u5148\u542f\u52a8\u670d\u52a1\u7aef\u518d\u542f\u52a8\u5ba2\u6237\u7aef. \u57fa\u4e8eUDP\u534f\u8bae,\u968f\u4fbf\u5148\u542f\u52a8\u54ea\u7aef\u90fd\u53ef\u4ee5.. \u5ba2\u6237\u7aef\u542f\u52a8\u540e,\u76f4\u63a5\u53d1,\u5b83\u53ef\u4e0d\u7ba1\u670d\u52a1\u7aef\u542f\u52a8\u4e0e\u5426,\u6570\u636e\u662f\u5426\u6210\u529f\u5230\u8fbe..","title":"\u542f\u52a8\u987a\u5e8f"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/3_%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E3%80%81UDP/#_14","text":"TCP\u5ba2\u6237\u7aef\u76f4\u63a5\u56de\u8f66\u8f93\u7a7a,\u5ba2\u6237\u7aef\u76f4\u63a5\u5361\u4f4f.. \u662f\u56e0\u4e3a\u5ba2\u6237\u7aefsend\u7ed9\u81ea\u4e2a\u513f\u7684OS\u7f13\u5b58\u7684\u662f\u7a7a\u5b57\u8282..OS\u4e0d\u4f1a\u6709\u4efb\u4f55\u53cd\u5e94,\u4e0d\u4f1a\u6709\u4efb\u4f55\u7f51\u7edc\u4f20\u8f93\u7684\u884c\u4e3a.. \u670d\u52a1\u7aef\u5728\u7b49\u5ba2\u6237\u7aef\u53d1,\u5ba2\u6237\u7aef\u5728\u7b49\u670d\u52a1\u7aef\u53d1,\u5c2c\u4f4f\u4e86.. UDP\u5ba2\u6237\u7aef client.sendto(b\"\") \u770b\u4f3c\u662f\u7ed9\u5ba2\u6237\u7aefOS\u7f13\u5b58\u4e00\u4e2a\u7a7a\u5b57\u8282, \u5b9e\u5219\u8fd8\u7ed9\u4e86\u4e2a\u62a5\u5934!! \u662f\u6709\u6570\u636e\u7684!! UDP\u6570\u636e\u62a5\u534f\u8bae,\u6bcf\u4e2a\u6570\u636e\u62a5\u90fd\u6709\u4e00\u4e2a\u62a5\u5934!","title":"\u5ba2\u6237\u7aef\u56de\u7a7a"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/3_%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E3%80%81UDP/#_15","text":"\u626b\u76f2(\u4e86\u89e3): \u7531\u4e8eUDP\u652f\u6301\u7684\u662f\u4e00\u5bf9\u591a\u7684\u6a21\u5f0f \u6240\u4ee5\u63a5\u6536\u7aef\u7684skbuff(\u5957\u63a5\u5b57\u7f13\u51b2\u533a)\u91c7\u7528\u4e86\u94fe\u5f0f\u7ed3\u6784\u6765\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u5230\u8fbe\u7684UDP\u5305 \u5728\u6bcf\u4e2aUDP\u5305\u4e2d\u5c31\u6709\u4e86\u6d88\u606f\u5934(\u6d88\u606f\u6765\u6e90\u5730\u5740\uff0c\u7aef\u53e3\u7b49\u4fe1\u606f) \u8fd9\u6837,\u5bf9\u4e8e\u63a5\u6536\u7aef\u6765\u8bf4,\u5c31\u5bb9\u6613\u8fdb\u884c\u533a\u5206\u5904\u7406\u4e86!! \u524d\u9762\u7684TCP\u5957\u63a5\u5b57\u7a0b\u5e8f\u56e0\u4e3a\u6ca1\u6709\u5b9e\u73b0\u591a\u8fdb\u7a0b\u591a\u7ebf\u7a0b,\u6240\u4ee5\u662f\u4e0d\u5177\u5907\u5e76\u53d1\u7684\u6548\u679c\u7684!! \u8fd9\u91cc\u7684UDP\u5957\u63a5\u5b57\u7a0b\u5e8f,\u5f00\u542f\u591a\u4e2a\u5ba2\u6237\u7aef.. \u5b9e\u9a8c\u4e0b\u662f\u6709\u5e76\u53d1\u7684\u6548\u679c\u7684. \u9996\u5148\u8981\u5bdf\u89c9\u5230, UDP\u7684C\u7aef\u548cS\u7aef\u6536\u6d88\u606f\u65f6\u90fd\u4f1a\u6536\u5230\u5bf9\u65b9\u7684\u4fe1\u606f(\u5305\u542b\u5bf9\u65b9\u7684IP\u548cport); UDP\u670d\u52a1\u7aef,recvfrom\u4e00\u4e0b,\u518dsendto\u4e00\u4e0b.. \u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u56de\u5408\u4e00\u4e2a\u56de\u5408\u7684\u54cd\u5e94\u591a\u4e2a\u5ba2\u6237\u7aef\u7684\u4e00\u6761\u6761\u6d88\u606f\u7684. \u4f46\u54cd\u5e94\u7684\u901f\u5ea6\u592a\u5feb\u4e86,\u7ed9\u64cd\u4f5c\u5ba2\u6237\u7aef\u7684\u4eba\u4eec\u7684\u611f\u89c9\u5c31\u662f\u540c\u65f6\u54cd\u5e94\u7684!! \u8fd9\u79cd\u5e76\u53d1\u662f\u6709\u5c40\u9650\u6027\u7684, \u5047\u5982\u6709\u4e00\u4e07\u4e2a\u5ba2\u6237\u7aef\u540c\u65f6\u5728\u4e0e\u670d\u52a1\u7aef\u8fdb\u884cUDP\u901a\u4fe1\u5462\uff1f \u7ed9\u4eba\u7684\u611f\u89c9\u5c31\u4e0d\u662f\u540c\u65f6\u54cd\u5e94\u7684\u5566. \u670d\u52a1\u7aef\u5faa\u73af\u4e00\u4e07\u6b21\u591a\u5c11\u90fd\u9700\u8981\u70b9\u65f6\u95f4\u7684\u5427!!\u4e00\u4e07\u4e2a\u5ba2\u6237\u7aef\u5c31\u80fd\u611f\u53d7\u5230\u5148\u540e. (\u82e5\u8003\u8651\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u6d88\u606f\u6570\u636e\u91cf\u6bd4\u8f83\u5927\u7684\u8bdd,\u5ba2\u6237\u7b49\u5f85\u7684\u611f\u89c9\u66f4\u660e\u663e..) So, UDP\u5e76\u6ca1\u6709\u5b9e\u73b0\u5e76\u53d1!!!","title":"\u662f\u5426\u5e76\u53d1"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/3_%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E3%80%81UDP/#_16","text":"","title":"\u65e0\u7c98\u5305\u95ee\u9898"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/3_%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E3%80%81UDP/#_17","text":"\u5728TCP\u91cc,\u5ba2\u6237\u7aefsend\u4e09\u4e2a\u6570\u636e\u5305\u5230\u5ba2\u6237\u7aefOS\u7f13\u5b58,\u4f1a\u4f9d\u7167nagle\u7b97\u6cd5\u7ec4\u7ec7\u6570\u636e\u5408\u6210\u4e00\u4e2ab\"helloworld\" (\u7b2c\u4e09\u4e2asend\u7684\u662fb\"\",OS\u538b\u6839\u4e0d\u4f1a\u53fc\u5b83) \u53d1\u9001\u7ed9\u670d\u52a1\u7aef.. \u670d\u52a1\u7aefrecv(1024)\u4e00\u6b21\u5c31\u80fd\u63a5\u6536\u5b8c.. \u5728UDP\u91cc,\u8be5\u7a0b\u5e8f\u91cc,\u5ba2\u6237\u7aef\u7684\u6bcf\u4e00\u4e2asendto\u90fd\u4f1a\u4f9d\u6b21\u5bf9\u5e94\u670d\u52a1\u7aef\u7684recvfrom!! \u6536\u53d1\u4e00\u4e00\u5bf9\u5e94!! 1> \u5ba2\u6237\u7aef\u53ea\u53d1\u4e09\u6b21,\u670d\u52a1\u7aef\u5c31\u53ea\u6536\u4e09\u6b21,\u670d\u52a1\u7aef\u7b2c\u56db\u6b21\u7684recvfrom\u82e6\u82e6\u7b49\u5f85ing.. 2> \u54ea\u6015\u7b2c\u4e09\u6b21C\u7aef\u53d1\u7a7a\u5b57\u8282\u6570\u636e,S\u7aef\u4e5f\u80fd\u6536\u5230!!! \u63d0\u9192\u4e00\u4e0b!! UDP\u6536\u53d1\u8ddfTCP\u4e00\u6837,\u90fd\u662f\u53d1\u9001\u7aef\u5148\u7ed9\u81ea\u5df1\u7684OS\u7f13\u5b58,\u63a5\u6536\u7aef\u518d\u4ece\u81ea\u5df1\u7684OS\u7f13\u5b58\u91cc\u53d6..","title":"\u63a5\u6536\u5927\u4e8e\u53d1\u9001"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/3_%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E3%80%81UDP/#_18","text":"\u5728TCP\u4e2d,\u7b2c\u4e00\u6b21\u7ed9\u4e86\u4f605\u5b57\u8282,\u4f46\u4f60\u53ea\u6536\u4e861\u4e2a\u5b57\u8282,\u8fd8\u67094\u4e2a\u5728\u4f60\u81ea\u5df1\u7684OS\u7f13\u5b58\u91cc\u653e\u7740,\u4e0b\u6b21\u53d6\u65f6\u4f1a\u5148\u62ff! \u5728UDP\u4e2d,\u5206\u7cfb\u7edf: \u65e0\u9700\u5173\u6ce8window\u7684\u60c5\u51b5,\u4e86\u89e3\u5373\u53ef,\u6211\u4eec\u90fd\u662f\u7528linux linux -- \u7ed9\u4f604\u4e2a,\u4f60\u53ea\u65361\u4e2a,\u90a3\u4e48\u5269\u4e0b4\u4e2a\u76f4\u63a5\u4e22\u4e86.\u4e0d\u4f1a\u6709\u6b8b\u7559! windows -- \u76f4\u63a5\u62a5\u9519! OSError: \u8be5\u7528\u6237\u7528\u4e8e\u63a5\u6536\u6570\u636e\u62a5\u7684\u7f13\u51b2\u533a\u6bd4\u6570\u636e\u62a5\u5c0f.. So,UDP\u7684\u53d1\u9001\u6570\u636e\u91cf\u8981\u5c0f\u4e8e\u63a5\u6536\u6570\u636e\u91cf\u7684\u5927\u5c0f!! \u4f46\u6bcf\u6b21\u53d1\u9001\u7684\u6570\u636e\u91cf\u4e0d\u8981\u8d85\u8fc7512bytes..(\u8d85\u8fc7\u4e86\u4e22\u5305\u4e25\u91cd)","title":"\u63a5\u6536\u5c0f\u4e8e\u53d1\u9001"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/3_%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E3%80%81UDP/#tcpudp","text":"TCP\u662f\u9762\u5411\u8fde\u63a5\u7684 , \u9762\u5411\u6d41\u7684 , \u63d0\u4f9b\u9ad8\u53ef\u9760\u6027\u670d\u52a1 . UDP\u662f\u65e0\u8fde\u63a5\u7684 , \u9762\u5411\u6d88\u606f\u7684 , \u63d0\u4f9b\u9ad8\u6548\u7387\u670d\u52a1 . 1 > TCP\u9762\u5411\u6d41\u7684\u901a\u4fe1\u662f\u65e0\u6d88\u606f\u4fdd\u62a4\u8fb9\u754c\u7684 ; -- \u7c98\u5305\u95ee\u9898 UDP\u9762\u5411\u6d88\u606f\u7684\u901a\u4fe1\u662f\u6709\u6d88\u606f\u4fdd\u62a4\u8fb9\u754c\u7684 . -- UDP\u6570\u636e\u62a5\u534f\u8bae\u81ea\u5e26\u62a5\u5934 ! 2 > tcp\u662f\u57fa\u4e8e\u6570\u636e\u6d41\u7684 , \u4e8e\u662f\u6536\u53d1\u7684\u6d88\u606f\u4e0d\u80fd\u4e3a\u7a7a , \u8fd9\u5c31\u9700\u8981\u5728\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u90fd\u6dfb\u52a0\u7a7a\u6d88\u606f\u7684\u5904\u7406\u673a\u5236 , \u9632\u6b62\u7a0b\u5e8f\u5361\u4f4f \u800cudp\u662f\u57fa\u4e8e\u6570\u636e\u62a5\u7684 , \u5373\u4fbf\u662f\u4f60\u8f93\u5165\u7684\u662f\u7a7a\u5185\u5bb9 ( \u76f4\u63a5\u56de\u8f66 ), \u90a3\u4e5f\u4e0d\u662f\u7a7a\u6d88\u606f , udp\u534f\u8bae\u4f1a\u5e2e\u4f60\u5c01\u88c5\u4e0a\u6d88\u606f\u5934 3 > -- udp\u7684recvfrom\u662f\u963b\u585e\u7684 , \u4e00\u4e2arecvfrom ( x ) \u5fc5\u987b\u5bf9\u552f\u4e00\u4e00\u4e2asendinto ( y ), \u6536\u5b8c\u4e86x\u4e2a\u5b57\u8282\u7684\u6570\u636e\u5c31\u7b97\u5b8c\u6210 ; \u5373UDP\u6536\u53d1\u662f\u4e00\u4e00\u5bf9\u5e94\u7684 !! \u82e5\u662fy > x\u6570\u636e\u5c31\u4e22\u5931 , \u8fd9\u610f\u5473\u7740udp\u6839\u672c\u4e0d\u4f1a\u7c98\u5305 , \u4f46\u662f\u4f1a\u4e22\u6570\u636e , \u4e0d\u53ef\u9760 . -- tcp\u7684\u534f\u8bae\u6570\u636e\u4e0d\u4f1a\u4e22 , \u6ca1\u6709\u6536\u5b8c\u5305 , \u4e0b\u6b21\u63a5\u6536 , \u4f1a\u7ee7\u7eed\u4e0a\u6b21\u7ee7\u7eed\u63a5\u6536 , \u5df1\u7aef\u603b\u662f\u5728\u6536\u5230ack\u65f6\u624d\u4f1a\u6e05\u9664\u7f13\u51b2\u533a\u5185\u5bb9 . TCP\u6536\u53d1\u4e0d\u662f\u4e00\u4e00\u5bf9\u5e94\u7684 , \u6bd4\u5982\u53ef5\u6b21send , 2 \u6b21recv . \u4f46TCP\u6709\u4e00\u4e00\u5bf9\u5e94\u7684socket . \u6570\u636e\u662f\u53ef\u9760\u7684 , \u4f46\u662f\u4f1a\u7c98\u5305 .","title":"TCP\u4e0eUDP\u7684\u5f02\u540c"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4_socketserver%E6%A8%A1%E5%9D%97/","text":"\u57fa\u4e8esocketserver\u5b9e\u73b0\u5e76\u53d1\u7684\u5957\u63a5\u5b57\u901a\u4fe1 TCP UDP socketserver\u4e4bTCP \u00b6 \u5f15\u5165 \u00b6 \u5148\u8981\u660e\u767dTCP\u670d\u52a1\u9700\u8981\u505a\u7684\u4e24\u4ef6\u4e8b: 1> \u5efa\u8fde\u63a5 2> \u57fa\u4e8e\u5efa\u7acb\u597d\u7684\u8fde\u63a5\u8fdb\u884c\u901a\u4fe1 \u524d\u9762\u5199\u7684TCP\u5957\u63a5\u5b57\u7a0b\u5e8f,\u8fde\u63a5\u4e2d\u5305\u542b\u4e86\u901a\u4fe1,\u6ca1\u6709\u5c06\u8fde\u63a5\u548c\u901a\u4fe1\u533a\u5206\u5f00\u6765..\u6240\u4ee5\u6ca1\u6709\u5e76\u53d1\u7684\u6548\u679c. \u5177\u4f53\u6765\u8bf4,\u8fde\u63a5\u5faa\u73af\u4e0d\u505c\u7684\u4ece\u534a\u8fde\u63a5\u6c60\u91cc\u53d6\u51fa\u8fde\u63a5\u8bf7\u6c42,\u901a\u8fc7accept\u5efa\u7acb\u8fde\u63a5; \u4f46\u8fde\u63a5\u5faa\u73af\u91cc\u5305\u542b\u4e86\u901a\u4fe1\u5faa\u73af,\u5f53\u524d\u901a\u4fe1\u4e0d\u5b8c,\u4e0b\u4e00\u4e2a\u8fde\u63a5\u65e0\u6cd5\u5efa\u7acb!! \u57fa\u4e8eTCP\u5e76\u53d1\u7684\u5b9e\u73b0\u903b\u8f91: \u670d\u52a1\u7aef\u5e94\u8ba9\u4e00\u4e2a\u4eba\u4e0d\u505c\u7684\u5efa\u7acb\u8fde\u63a5,\u5e72accept\u7684\u6d3b; \u6bcf\u5efa\u7acb\u597d\u4e00\u4e2a\u8fde\u63a5, \u5c31 \u65b0 \u5b89\u6392\u4e00\u4e2a\u4eba\u4e0e\u5efa\u7acb\u597d\u7684\u8fde\u63a5\u4e00\u4e00\u5bf9\u5e94\u5e72\u901a\u4fe1\u7684\u6d3b! \u5b9e\u73b0 \u00b6 \u670d\u52a1\u7aef \u00b6 TCP\u670d\u52a1\u7aef\u4ee3\u7801\u5982\u4e0b,\u5ba2\u6237\u7aef\u7684\u4ee3\u7801\u8ddf\u539f\u6765\u4e00\u6837,\u6ca1\u6709\u53d8\u5316!! \"\"\" \u2605 -- \u670d\u52a1\u7aef \"\"\" import socketserver # -- \u6211\u4eec\u81ea\u5b9a\u4e49\u7684MyHandler\u7c7b\u5fc5\u987b\u7ee7\u627fsocketserver.BaseRequestHandler,\u4e0d\u53ef\u80fd\u6240\u6709\u529f\u80fd\u81ea\u5df1\u91cd\u5199. class MyHandler ( socketserver . BaseRequestHandler ): # -- \u81ea\u5b9a\u4e49\u7684MyHandler\u7c7b\u91cc\u9762\u5fc5\u987b\u6709\u4e00\u4e2a\u540d\u4e3ahandle\u7684\u65b9\u6cd5,\u4e00\u4e2a\u5b57\u90fd\u4e0d\u80fd\u5dee! def handle ( self ): \"\"\" self.client_address \u5ba2\u6237\u7aef\u7684IP\u548cport self.request \u5b9e\u5219\u5c31\u662f\u539f\u5148\u672a\u5b9e\u73b0\u5e76\u53d1\u7684TCP\u670d\u52a1\u7aef\u4e2d\u7684conn\u5bf9\u8c61 \u6ce8\u610f,socketserver\u53ea\u662f\u5e2e\u6211\u4eec\u5b9e\u73b0\u4e86\u5e76\u53d1.\u89e3\u51b3\u7c98\u5305\u95ee\u9898\u8fd8\u662f\u5f97\u81ea\u5df1\u6765! \"\"\" # -- \u901a\u4fe1\u5faa\u73af while True : try : data = self . request . recv ( 1024 ) if not data : break self . request . send ( data . upper ()) except ConnectionResetError : break if __name__ == '__main__' : \"\"\"ThreadingTCPServer\u4e09\u4e2a\u53c2\u6570 1> server_address:\u670d\u52a1\u7aef\u7684\u5730\u5740,\u5373IP+port 2> RequestHandlerClass: \u6211\u4eec\u81ea\u5b9a\u4e49\u7684\u7c7b 3> bind_and_activate: \u7ed1\u5b9a\u5e76\u4e14\u6fc0\u6d3b \u300a\"\u672c\u8d28\u5c31\u662f\u6267\u884cbind\u548clisten\u64cd\u4f5c\"\u300b\u9ed8\u8ba4\u503c\u4e3aTrue. \"\"\" s = socketserver . ThreadingTCPServer (( \"127.0.0.1\" , 8080 ), MyHandler , bind_and_activate = True ) # -- \u5faa\u73af\u5efa\u7acb\u8fde\u63a5 \u300a\"\u672c\u8d28\u5c31\u662f\u5faa\u73af\u6267\u884caccept\u64cd\u4f5c\"\u300b s . serve_forever () \"\"\" \u2605 -- \u5ba2\u6237\u7aef \"\"\" import socket phone = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) phone . connect (( '127.0.0.1' , 8080 )) while True : msg = input ( '>>: ' ) . strip () if not msg : continue # -- \u5224\u65ad phone . send ( msg . encode ( 'utf-8' )) data = phone . recv ( 1024 ) print ( '\u6765\u81ea\u670d\u52a1\u7aef\u7684\u6570\u636e:' , data ) phone . close () \u8fd0\u884c\u8fc7\u7a0b \u00b6 \u5bf9\u8c61\u662f\u5bb9\u5668,\u91cc\u9762\u5b58\u4e86\u4e00\u5806\u6570\u636e,\u8fd8\u6346\u7ed1\u4e86\u4e00\u5806\u65b9\u6cd5,\u5bf9\u8c61\u662f\u6570\u636e\u548c\u529f\u80fd\u7684\u7ed3\u5408\u4f53,\u7528\u5bf9\u8c61\u7684\u601d\u60f3,\u6574\u5408\u7a0b\u5ea6\u66f4\u9ad8! 1> s.serve_forever() \u6bcf\u5efa\u597d\u4e00\u4e2a\u8fde\u63a5, \u90fd\u4f1a\u542f\u52a8\u4e00\u4e2a\u7ebf\u7a0bthread; 2> \u8be5\u7ebf\u7a0b\u4f1a\u8c03\u7528\u6211\u4eec\u81ea\u5b9a\u4e49\u7684Myhandler\u7c7b\u4ea7\u751f\u4e00\u4e2a\u5b9e\u4f8b\u5316\u5bf9\u8c61 (\u521a\u521a\u5efa\u7acb\u597d\u7684\u8fde\u63a5\u7684\u4fe1\u606f\u90fd\u4f1a\u5c01\u88c5\u5230\u8fd9\u4e2a\u5bf9\u8c61\u91cc\u9762\u53bb \"eg \u539f\u5148\u672a\u5b9e\u73b0\u5e76\u53d1\u7684TCP\u670d\u52a1\u7aef\u91cc\u8c03\u7528accept\u65b9\u6cd5\u8fd4\u56de\u7684conn\u548cclient_addr\") 3> \u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u81ea\u52a8\u8c03\u7528\u8be5\u5bf9\u8c61\u4e0b\u7684handle\u65b9\u6cd5,\u8be5\u65b9\u6cd5\u4e13\u95e8\u7528\u4e8e\u5b9e\u73b0\u4e0e\u521a\u521a\u5efa\u7acb\u597d\u7684\u8fde\u63a5\u505a\u901a\u4fe1\u5faa\u73af. socketserver\u4e4bUDP \u00b6 \u8981\u6ce8\u610f\u54c8! 1> \u539f\u6765\u5b9e\u73b0\u7684UDP\u5957\u63a5\u5b57\u7a0b\u5e8f\u7684\u670d\u52a1\u7aef\u91cc\u6709while True\u5faa\u73af,\u6536\u5b8c\u4e00\u6761C\u7aef\u6d88\u606f\u540e\u53d1,\u518d\u6536\u5b8c\u4e00\u6761\u518d\u53d1.. \u6267\u884c\u7684\u8fc7\u7a0b\u6bd4\u8f83\u5feb,\u82e5\u5ba2\u6237\u7aef\u6bd4\u8f83\u5c11\u4e14\u6570\u636e\u91cf\u6bd4\u8f83\u5c0f\u7684\u8bdd,\u770b\u8d77\u6765\u5c31\u6709\u5e76\u53d1\u7684\u6548\u679c.. \u5b9e\u5219\u5e76\u4e0d\u662f\u5e76\u53d1. 2> \u5728\u8fd9\u91cc\u5b9e\u73b0\u7684UDP\u5e76\u53d1\u5957\u63a5\u5b57\u7a0b\u5e8f\u7684\u670d\u52a1\u7aef\u91cc\u662f\u6ca1\u6709\u7684while True\u5faa\u73af\u7684. \u4eceUDP\u7684\u6267\u884c\u8fc7\u7a0b\u5206\u6790: \u5927\u4f53\u4e0a\u8ddfUDP\u5dee\u4e0d\u591a.\u4f46\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f! UDP\u6ca1\u6709\u8fde\u63a5\u4e00\u8bf4,\u5ba2\u6237\u7aef\u5728\u53d1\u6d88\u606f\u7684\u65f6\u5019\u624d\u4f1a\u542f\u52a8\u4e00\u4e2a\u7ebf\u7a0b,\u5b9e\u4f8b\u5316\u4e00\u4e2a\u5bf9\u8c61,\u89e6\u53d1handle\u65b9\u6cd5. \"\"\" \u2605 -- \u670d\u52a1\u7aef \"\"\" import socketserver class MyHandler ( socketserver . BaseRequestHandler ): def handle ( self ): \"\"\" self.client_address \u5ba2\u6237\u7aef\u7684IP\u548cport self.request (\u5ba2\u6237\u7aef\u53d1\u7684\u6d88\u606f,\u4e00\u4e2a\u5957\u63a5\u5b57\u5bf9\u8c61) \"\"\" data = self . request [ 0 ] print ( \"\u5ba2\u6237\u7aef\u6d88\u606f:\" , data ) self . request [ 1 ] . sendto ( data . upper (), self . client_address ) if __name__ == '__main__' : s = socketserver . ThreadingUDPServer (( \"127.0.0.1\" , 8080 ), MyHandler ) # -- \u6bd4\u8d77TCP\u7684\u8fc7\u7a0b,UDP\u5c11\u4e86\u5efa\u8fde\u63a5. # UDP\u6ca1\u6709\u8fde\u63a5\u4e00\u8bf4,\u5ba2\u6237\u7aef\u5728\u53d1\u6d88\u606f\u7684\u65f6\u5019\u624d\u4f1a\u542f\u52a8\u4e00\u4e2a\u7ebf\u7a0b,\u5b9e\u4f8b\u5316\u4e00\u4e2a\u5bf9\u8c61,\u89e6\u53d1handle\u65b9\u6cd5. s . serve_forever () \"\"\" \u2605 -- \u5ba2\u6237\u7aef \"\"\" import socket client = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) while True : msg = input ( \">>:\" ) . strip () client . sendto ( msg . encode ( 'utf-8' ), ( \"127.0.0.1\" , 8080 )) data , server_addr = client . recvfrom ( 1024 ) print ( data ) client . close () \u5f85\u89e3\u51b3: socketserver\u6a21\u5757\u6e90\u7801\u5206\u6790!!! \u5b66\u5b8c\u8fdb\u7a0b\u7ebf\u7a0b\u540e\u518d\u6765(\u00b4\u25bd\uff40) \u6709\u65f6\u95f4\u7684\u8bdd.Hhh. \u7f51\u7edc\u7f16\u7a0b\u590d\u4e60 \u00b6 \u53ea\u6709\u6211\u81ea\u5df1\u770b\u5f97\u61c2\u7684\u590d\u4e60\u603b\u7ed3..(\u00b4\u25bd\uff40) \u8ba1\u7b97\u673a\u7f51\u7edc \u00b6 IP + mac\u5730\u5740\u80fd\u6807\u8bc6\u5168\u4e16\u754c\u8303\u56f4\u5185\u72ec\u4e00\u65e0\u4e8c\u7684\u4e00\u53f0\u8ba1\u7b97\u673a . ( IP\u627e\u5230\u4e3b\u673a\u5728\u54ea\u4e2a\u5c40\u57df\u7f51 , MAC\u5730\u5740\u627e\u5230\u4e3b\u673a\u5728\u5c40\u57df\u7f51\u7684\u54ea\u4e2a\u4f4d\u7f6e !! ) url\u5730\u5740\u662f\u7528\u6765\u6807\u8bc6\u5168\u4e16\u754c\u8303\u56f4\u5185\u72ec\u4e00\u65e0\u4e8c\u7684\u4e00\u4e2a\u8d44\u6e90\u7684 !! \u5e94\u7528\u534f\u8bae\u90e8\u5206 // \u57df\u540d\u548c\u7aef\u53e3 , \u6d4f\u89c8\u5668\u7aef\u53e3\u9ed8\u8ba480 / \u8def\u5f84 -- url\u662f\u5efa\u7acb\u5728ip + mac + port\u4e4b\u4e0a\u7684 ! HTTP\u662f\u6bd4TCP\u66f4\u9ad8\u5c42\u6b21\u7684\u5e94\u7528\u5c42\u534f\u8bae . \u6839\u636e\u89c4\u5219 , \u53ea\u6709\u4f4e\u5c42\u534f\u8bae ( TCP\u4e09\u6b21\u63e1\u624b\u5efa\u7acb\u53cc\u5411\u901a\u8def ) \u5efa\u7acb\u4e4b\u540e\u624d\u80fd , \u624d\u80fd\u8fdb\u884c\u9ad8\u5c42\u534f\u8bae\u7684\u8fde\u63a5 ! socket\u5957\u63a5\u5b57\u4f4d\u4e8e\u5e94\u7528\u5c42\u548c\u4f20\u8f93\u5c42\u4e4b\u95f4 , \u5c06\u4f20\u8f93\u5c42\u4ee5\u4e0b\u7684\u534f\u8bae\u90fd\u5c01\u88c5\u6210\u4e86\u63a5\u53e3 !!! \u534a\u8fde\u63a5\u6c60backlog \u9650\u5236\u7684\u662f < \u540c\u4e00\u65f6\u523b > \u7684\u8bf7\u6c42\u6570 ! C\u7aef\u5411S\u7aef\u53d1\u9001\u7684\u8fde\u63a5\u8bf7\u6c42 , \u8981\u5148\u4ece\u534a\u8fde\u63a5\u6c60\u91cc\u8d70\u4e00\u906d , \u5efa\u7acb\u597dTCP\u8fde\u63a5\u540e , \u8be5\u8fde\u63a5\u4f1a\u8fdb\u5165\u5168\u8fde\u63a5\u6c60 \u9ad8\u5e76\u53d1\u7684\u60c5\u51b5\u4e0b . \u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u8fde\u63a5\u4f1a\u957f\u65f6\u95f4\u505c\u5728\u534a\u8fde\u63a5\u6c60\u91cc .. \u73b0\u5b9e\u4e2d\u7684\u4f53\u73b0\u5c31\u662f\u7f51\u9875\u4e00\u76f4\u5728\u52a0\u8f7d . \u534a\u8fde\u63a5\u6c60\u6ee1\u4e86 , \u5f80\u540e\u7684\u8fde\u63a5\u8bf7\u6c42\u76f4\u63a5\u8fde\u63a5\u4e0d\u4e0a , \u8d85\u65f6 .. \u534a\u8fde\u63a5\u6c60\u8ddf\u5168\u8fde\u63a5\u6c60\u4e00\u6837\u5360\u7528\u7684\u662f\u5185\u5b58\u7a7a\u95f4 , \u8bbe\u7f6e\u7684\u8fde\u63a5\u6570\u91cf\u53d7\u9650\u4e8e\u5185\u5b58\u7684\u5927\u5c0f . \u901a\u8fc7netstat - an\u547d\u4ee4\u67e5\u770b\u72b6\u6001\u53ef\u4ee5\u8fdb\u884c\u6392\u9519 ! TCP\u5957\u63a5\u5b57 \u00b6 \u2605 \u7b80\u5355\u6765\u8bb0 ! C\u7aef\u548cS\u7aef\u90fd\u4e0d\u80fd\u53d1\u7a7a\u6570\u636e !! send\u53d1\u7ed9\u7684\u662f\u81ea\u5df1\u7684OS , \u53d1\u7a7a\u53d1\u4e86\u4e2a\u5bc2\u5bde ! C\u7aef\u5355\u65b9\u9762\u65ad\u5f00 , \u8fdb\u884c\u5f02\u5e38\u5904\u7406 , \u52a1\u5fc5\u540c\u65f6\u517c\u5bb9linux\u548cwindow\u7cfb\u7edf . \u4e00\u822c\u60c5\u51b5\u662f\u5ba2\u6237\u7aef\u5148\u5411\u670d\u52a1\u7aefsend\u6570\u636e , so , \u5ba2\u6237\u7aefsend - recv ; \u670d\u52a1\u7aefrecv - send . < \u670d\u52a1\u7aef \u522b \"\u6536\" \u7a7a\u6570\u636e > , \u89e3\u51b3\u5ba2\u6237\u7aef\u5355\u65b9\u9762\u65ad\u5f00 . < \u5ba2\u6237\u7aef \u522b \"\u53d1\" \u7a7a\u6570\u636e > , \u9632\u6b62\u4e00\u76f4\u963b\u585e . TCP\u4e3a\u5565\u53ef\u9760 , \u56e0\u4e3asend\u5230\u81ea\u5df1\u7684OS\u7f13\u5b58\u4e2d\u7684\u6570\u636e , \u901a\u8fc7\u7f51\u7edc\u53d1\u51fa , \u786e\u8ba4\u5230\u8fbe\u4e86\u5bf9\u65b9\u540e , \u624d\u4f1a\u5220\u9664\u6389 ! UDP\u53ef\u4e0d\u4f1a , \u901a\u8fc7\u7f51\u7edc\u53d1\u51fa\u53bb\u540e , \u76f4\u63a5\u5220\u9664OS\u7f13\u5b58\u4e2d\u7684\u6570\u636e ! \u5f53\u7136 , recv\u4e5f\u662f\u4ece\u81ea\u5df1OS\u7684\u7f13\u5b58\u4e2d\u62ff ! recv ( 1024 ) \u662f\u6307\u4e00\u6b21\u6027\u6700\u591a\u62ff1024\u5b57\u8282\u7684\u6570\u636e ! import socket server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) # -- server\u5957\u63a5\u5b57\u5bf9\u8c61 server . bind (( \"127.0.0.1\" , 8080 )) server . listen ( 5 ) # -- \u534a\u8fde\u63a5\u6c60\u6570 while True : # -- \u5e76\u6ca1\u6709\u5b9e\u73b0\u5e76\u53d1\u7684\u63d0\u4f9b\u670d\u52a1!\u7528\u591a\u8fdb\u7a0b\u591a\u7ebf\u7a0b\u624d\u884c! conn , client_addr = server . accept () # -- conn\u5957\u63a5\u5b57\u5bf9\u8c61 while True : try : # -- conn\u662f\u4e09\u6b21\u63e1\u624b\u5efa\u7acb\u53cc\u5411\u901a\u9053\u7684\u4ea7\u7269,\u5ba2\u6237\u7aef\u5355\u65b9\u9762\u6302\u4e86 # linux\u4e0bS\u7aef\u4f1a\u4e0d\u505c\u7684\u63a5\u6536\u7a7a\u5b57\u7b26\u4e32,windows\u4e0bS\u7aef\u4f1a\u62a5\u9519! data = conn . recv ( 1024 ) if not data : break # -- linux print ( '\u5ba2\u6237\u7aef\u7684\u6570\u636e:' , data ) conn . send ( data . upper ()) except ConnectionResetError : # -- windows break import socket client = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) # -- client\u5957\u63a5\u5b57\u5bf9\u8c61 client . connect (( '127.0.0.1' , 8080 )) while True : msg = input ( '>>: ' ) . strip () if not msg : continue # -- \u5224\u65ad phone . send ( msg . encode ( 'utf8' )) data = phone . recv ( 1024 ) \u7c98\u5305\u95ee\u9898 \u00b6 TCP\u534f\u8bae\u79f0\u4e3a\u6d41\u5f0f\u534f\u8bae . \u7cbe\u9ad3\u5728\u4e8e\u6d41stream !! \u987e\u540d\u601d\u4e49 , \u50cf\u6d41\u6c34\u4e00\u6837\u4f20\u8f93\u6570\u636e . TCP\u5c31\u4e00\u80a1\u8111\u7684\u4f20\u771f\u5b9e\u6570\u636e . \u4f20\u8f93\u8fc7\u7a0b\u6d89\u53ca\u6ed1\u52a8\u7a97\u53e3\u673a\u5236 \u3001 \u5e8f\u5217\u53f7 \u3001 \u505c\u6b62\u7b49\u5f85\u8fd4\u56deACK\u7b49\u7b49 . \u53d1\u9001\u65b9\u5f15\u8d77\u7684\u7c98\u5305\u662f\u7531TCP\u534f\u8bae\u672c\u8eab\u9020\u6210\u7684 , TCP\u4e3a\u63d0\u9ad8\u4f20\u8f93\u6548\u7387 , \u53d1\u9001\u65b9\u5f80\u5f80\u8981\u6536\u96c6\u5230\u8db3\u591f\u591a\u7684\u6570\u636e\u540e\u624d\u53d1\u9001\u4e00\u4e2aTCP\u6bb5 . 1 > \u82e5\u8fde\u7eed\u5bf9\u6b64send\u7684\u6570\u636e\u91cf\u5c0f\u4e14\u95f4\u9694\u77ed , \u4f1a\u7528nagle\u7b97\u6cd5 . \u63a5\u6536\u7aef\u6536\u5230\u7684\u662f\u7c98\u5305\u6570\u636e . \u63a5\u6536\u7aef\u65e0\u6cd5\u533a\u5206\u5408\u5728\u4e00\u8d77\u7684\u591a\u4e2a\u6570\u636e\u5305\u7684\u754c\u9650 2 > \u82e5\u4f20\u8f93\u4e00\u4e2a\u5927\u6587\u4ef6 , \u4f1a\u5206\u6bb5 . \u53d1\u9001\u65f6\u6587\u4ef6\u5185\u5bb9\u662f\u6309\u7167\u4e00\u6bb5\u4e00\u6bb5\u7684\u5b57\u8282\u6d41\u53d1\u9001\u7684 , \u5728\u63a5\u6536\u65b9\u770b\u6765 , \u6839\u672c\u4e0d\u77e5\u9053\u8be5\u6587\u4ef6\u7684\u5b57\u8282\u6d41\u4ece\u4f55\u5904\u5f00\u59cb , \u5728\u4f55\u5904\u7ed3\u675f \u89e3\u51b3\u529e\u6cd5 : \"\u62a5\u5934 + \u6570\u636e\" \u63a5\u6536\u7aef\u5e94\u8be5\u60f3\u65b9\u8bbe\u6cd5\u5148\u628a\u62a5\u5934\u90e8\u5206 \"\u7cbe\u51c6\" \u62ff\u5230 !!! \u5177\u4f53\u6765\u8bf4 , \u7531\u4e8e\u62a5\u5934\u548c\u8981\u53d1\u9001\u7684\u6570\u636e\u90fd\u662f\u5c5e\u4e8eTCP\u534f\u8bae\u7684\u4e00\u90e8\u5206 . \u4e5f\u662f\u4f1a\u7c98\u5230\u4e00\u8d77\u7684 . \u5236\u4f5c\u62a5\u5934 , \u5c06\u62a5\u5934\u8f6c\u6362\u6210bytes\u7c7b\u578b\u53d1\u9001\u5f88\u5bb9\u6613\u5b9e\u73b0 , \u5173\u952e\u662f\u63a5\u6536\u7aef\u8981\u5148\u5c06\u62a5\u5934\u51c6\u786e\u7684\u63a5\u6536\u5230 .. \u4f7f\u7528struct\u6a21\u5757\u53ef\u4ee5\u5c06 < \u6574\u5f62\u7684\u6570\u636e > \u8f6c\u6210 < \u56fa\u5b9a\u957f\u5ea6\u7684bytes\u7c7b\u578b\u7684\u6570\u636e > !! \u5c06\u62a5\u5934\u7684\u957f\u5ea6\u505a\u62104\u4e2abytes\u53d1\u9001\u7ed9\u5bf9\u65b9 , \u63a5\u6536\u7aef\u5148\u63a5\u6536\u8fd94\u4e2abytes\u7684\u6570\u636e , \u89e3\u51fa\u62a5\u5934\u7684\u957f\u5ea6 .. \u518d\u63a5\u6536\u62a5\u5934\u957f\u5ea6\u7684\u6570\u636e ! \u5177\u4f53\u8fc7\u7a0b\u8be6\u770b\u6587\u4ef6\u4f20\u8f93\u7684\u51fd\u6570\u7248 ! 1 > struct\u6a21\u5757\u7684i\u6a21\u5f0f\u652f\u6301\u7684\u6574\u578b\u6570\u636e\u7684\u5927\u5c0f\u8303\u56f4\u662f\u6709\u9650\u7684 ! \u8d85\u8fc7\u4e86\u4f1a\u62a5\u9519 . SO , \u53ea\u4f20\u6587\u4ef6\u7684\u5b57\u8282\u957f\u5ea6\u662f\u4e0d\u5408\u7406\u7684 . i\u6a21\u5f0f\u4e0b , \u8be5\u6587\u4ef6\u7684\u5b57\u8282\u957f\u5ea6\u4e3a10000\u4e2a\u5b57\u8282 , \u76f4\u63a5\u62a5\u9519 . 2 > \u5bf9\u4e8e\u4e00\u4e2a\u6587\u4ef6\u7684\u53d1\u9001 , \u9700\u8981\u5236\u4f5c\u4e2a\u62a5\u5934 / \u8bf4\u767d\u4e86 , \u5c31\u662f\u4e00\u4e2a\u5b57\u5178 ! \u91cc\u9762\u5e94\u8be5\u5305\u542b\u8be5\u6587\u4ef6\u7684\u540d\u5b57 , \u957f\u5ea6 , \u6587\u4ef6md5\u503c\u7b49\u4fe1\u606f . \u4ee5\u670d\u52a1\u7aef\u53d1\u6587\u4ef6 , \u5ba2\u6237\u7aef\u63a5\u6536\u6587\u4ef6\u4e3a\u4f8b ! \u5f53\u7136\u4e5f\u53ef\u4ee5 , \u5ba2\u6237\u7aef\u53d1\u6587\u4ef6 , \u670d\u52a1\u7aef\u63a5\u6536 . \u4e00\u6837\u7684\u8fc7\u7a0b ! >> \u670d\u52a1\u7aef send_dic = { k1 : v1 , k2 : v2 , ... } # -- \u5b57\u5178 send_bytes = json . dumps ( send_dic ) . encode ( 'utf-8' ) # -- \u5e8f\u5217\u5316-\u7f16\u7801 -> \u5b57\u8282\u6570\u636e conn . send ( struct . pack ( 'i' , len ( send_bytes ))) # -- struct\u6253\u5305\u62a5\u5934\u957f\u5ea6-\u53d1\u90014\u5b57\u8282\u7684\u6570\u636e conn . send ( send_bytes ) # -- \u53d1\u9001\u62a5\u5934\u6570\u636e with open ( file_path , 'rb' ) as f : for line in f : conn . send ( line ) >> \u5ba2\u6237\u7aef recv_bytes_len = struct . unpack ( 'i' , client . recv ( 4 ))[ 0 ] recv_bytes = client . recv ( header_bytes_len ) # -- \u4e0d\u8981\u62c5\u5fc3,\u8fd9\u4e2a\u62a5\u5934\u5b57\u5178\u80af\u5b9a\u80fd\u4e00\u6b21\u6027recv\u53d6\u5230\u7684. recv_dic = json . loads ( header_bytes . decode ( 'utf-8' )) # -- \u5b57\u8282\u6570\u636e \u89e3\u7801-\u53cd\u5e8f\u5217\u5316 -> \u5b57\u5178 total_size = recv_dic [ 'file_size' ] recv_size = 0 with open ( file_path , 'wb' ) as f : while recv_size < total_size : line_data = client . recv ( 1024 ) f . write ( line_data ) recv_size += len ( line_data )","title":"socketserver\u6a21\u5757"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4_socketserver%E6%A8%A1%E5%9D%97/#socketservertcp","text":"","title":"socketserver\u4e4bTCP"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4_socketserver%E6%A8%A1%E5%9D%97/#_1","text":"\u5148\u8981\u660e\u767dTCP\u670d\u52a1\u9700\u8981\u505a\u7684\u4e24\u4ef6\u4e8b: 1> \u5efa\u8fde\u63a5 2> \u57fa\u4e8e\u5efa\u7acb\u597d\u7684\u8fde\u63a5\u8fdb\u884c\u901a\u4fe1 \u524d\u9762\u5199\u7684TCP\u5957\u63a5\u5b57\u7a0b\u5e8f,\u8fde\u63a5\u4e2d\u5305\u542b\u4e86\u901a\u4fe1,\u6ca1\u6709\u5c06\u8fde\u63a5\u548c\u901a\u4fe1\u533a\u5206\u5f00\u6765..\u6240\u4ee5\u6ca1\u6709\u5e76\u53d1\u7684\u6548\u679c. \u5177\u4f53\u6765\u8bf4,\u8fde\u63a5\u5faa\u73af\u4e0d\u505c\u7684\u4ece\u534a\u8fde\u63a5\u6c60\u91cc\u53d6\u51fa\u8fde\u63a5\u8bf7\u6c42,\u901a\u8fc7accept\u5efa\u7acb\u8fde\u63a5; \u4f46\u8fde\u63a5\u5faa\u73af\u91cc\u5305\u542b\u4e86\u901a\u4fe1\u5faa\u73af,\u5f53\u524d\u901a\u4fe1\u4e0d\u5b8c,\u4e0b\u4e00\u4e2a\u8fde\u63a5\u65e0\u6cd5\u5efa\u7acb!! \u57fa\u4e8eTCP\u5e76\u53d1\u7684\u5b9e\u73b0\u903b\u8f91: \u670d\u52a1\u7aef\u5e94\u8ba9\u4e00\u4e2a\u4eba\u4e0d\u505c\u7684\u5efa\u7acb\u8fde\u63a5,\u5e72accept\u7684\u6d3b; \u6bcf\u5efa\u7acb\u597d\u4e00\u4e2a\u8fde\u63a5, \u5c31 \u65b0 \u5b89\u6392\u4e00\u4e2a\u4eba\u4e0e\u5efa\u7acb\u597d\u7684\u8fde\u63a5\u4e00\u4e00\u5bf9\u5e94\u5e72\u901a\u4fe1\u7684\u6d3b!","title":"\u5f15\u5165"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4_socketserver%E6%A8%A1%E5%9D%97/#_2","text":"","title":"\u5b9e\u73b0"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4_socketserver%E6%A8%A1%E5%9D%97/#_3","text":"TCP\u670d\u52a1\u7aef\u4ee3\u7801\u5982\u4e0b,\u5ba2\u6237\u7aef\u7684\u4ee3\u7801\u8ddf\u539f\u6765\u4e00\u6837,\u6ca1\u6709\u53d8\u5316!! \"\"\" \u2605 -- \u670d\u52a1\u7aef \"\"\" import socketserver # -- \u6211\u4eec\u81ea\u5b9a\u4e49\u7684MyHandler\u7c7b\u5fc5\u987b\u7ee7\u627fsocketserver.BaseRequestHandler,\u4e0d\u53ef\u80fd\u6240\u6709\u529f\u80fd\u81ea\u5df1\u91cd\u5199. class MyHandler ( socketserver . BaseRequestHandler ): # -- \u81ea\u5b9a\u4e49\u7684MyHandler\u7c7b\u91cc\u9762\u5fc5\u987b\u6709\u4e00\u4e2a\u540d\u4e3ahandle\u7684\u65b9\u6cd5,\u4e00\u4e2a\u5b57\u90fd\u4e0d\u80fd\u5dee! def handle ( self ): \"\"\" self.client_address \u5ba2\u6237\u7aef\u7684IP\u548cport self.request \u5b9e\u5219\u5c31\u662f\u539f\u5148\u672a\u5b9e\u73b0\u5e76\u53d1\u7684TCP\u670d\u52a1\u7aef\u4e2d\u7684conn\u5bf9\u8c61 \u6ce8\u610f,socketserver\u53ea\u662f\u5e2e\u6211\u4eec\u5b9e\u73b0\u4e86\u5e76\u53d1.\u89e3\u51b3\u7c98\u5305\u95ee\u9898\u8fd8\u662f\u5f97\u81ea\u5df1\u6765! \"\"\" # -- \u901a\u4fe1\u5faa\u73af while True : try : data = self . request . recv ( 1024 ) if not data : break self . request . send ( data . upper ()) except ConnectionResetError : break if __name__ == '__main__' : \"\"\"ThreadingTCPServer\u4e09\u4e2a\u53c2\u6570 1> server_address:\u670d\u52a1\u7aef\u7684\u5730\u5740,\u5373IP+port 2> RequestHandlerClass: \u6211\u4eec\u81ea\u5b9a\u4e49\u7684\u7c7b 3> bind_and_activate: \u7ed1\u5b9a\u5e76\u4e14\u6fc0\u6d3b \u300a\"\u672c\u8d28\u5c31\u662f\u6267\u884cbind\u548clisten\u64cd\u4f5c\"\u300b\u9ed8\u8ba4\u503c\u4e3aTrue. \"\"\" s = socketserver . ThreadingTCPServer (( \"127.0.0.1\" , 8080 ), MyHandler , bind_and_activate = True ) # -- \u5faa\u73af\u5efa\u7acb\u8fde\u63a5 \u300a\"\u672c\u8d28\u5c31\u662f\u5faa\u73af\u6267\u884caccept\u64cd\u4f5c\"\u300b s . serve_forever () \"\"\" \u2605 -- \u5ba2\u6237\u7aef \"\"\" import socket phone = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) phone . connect (( '127.0.0.1' , 8080 )) while True : msg = input ( '>>: ' ) . strip () if not msg : continue # -- \u5224\u65ad phone . send ( msg . encode ( 'utf-8' )) data = phone . recv ( 1024 ) print ( '\u6765\u81ea\u670d\u52a1\u7aef\u7684\u6570\u636e:' , data ) phone . close ()","title":"\u670d\u52a1\u7aef"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4_socketserver%E6%A8%A1%E5%9D%97/#_4","text":"\u5bf9\u8c61\u662f\u5bb9\u5668,\u91cc\u9762\u5b58\u4e86\u4e00\u5806\u6570\u636e,\u8fd8\u6346\u7ed1\u4e86\u4e00\u5806\u65b9\u6cd5,\u5bf9\u8c61\u662f\u6570\u636e\u548c\u529f\u80fd\u7684\u7ed3\u5408\u4f53,\u7528\u5bf9\u8c61\u7684\u601d\u60f3,\u6574\u5408\u7a0b\u5ea6\u66f4\u9ad8! 1> s.serve_forever() \u6bcf\u5efa\u597d\u4e00\u4e2a\u8fde\u63a5, \u90fd\u4f1a\u542f\u52a8\u4e00\u4e2a\u7ebf\u7a0bthread; 2> \u8be5\u7ebf\u7a0b\u4f1a\u8c03\u7528\u6211\u4eec\u81ea\u5b9a\u4e49\u7684Myhandler\u7c7b\u4ea7\u751f\u4e00\u4e2a\u5b9e\u4f8b\u5316\u5bf9\u8c61 (\u521a\u521a\u5efa\u7acb\u597d\u7684\u8fde\u63a5\u7684\u4fe1\u606f\u90fd\u4f1a\u5c01\u88c5\u5230\u8fd9\u4e2a\u5bf9\u8c61\u91cc\u9762\u53bb \"eg \u539f\u5148\u672a\u5b9e\u73b0\u5e76\u53d1\u7684TCP\u670d\u52a1\u7aef\u91cc\u8c03\u7528accept\u65b9\u6cd5\u8fd4\u56de\u7684conn\u548cclient_addr\") 3> \u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u81ea\u52a8\u8c03\u7528\u8be5\u5bf9\u8c61\u4e0b\u7684handle\u65b9\u6cd5,\u8be5\u65b9\u6cd5\u4e13\u95e8\u7528\u4e8e\u5b9e\u73b0\u4e0e\u521a\u521a\u5efa\u7acb\u597d\u7684\u8fde\u63a5\u505a\u901a\u4fe1\u5faa\u73af.","title":"\u8fd0\u884c\u8fc7\u7a0b"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4_socketserver%E6%A8%A1%E5%9D%97/#socketserverudp","text":"\u8981\u6ce8\u610f\u54c8! 1> \u539f\u6765\u5b9e\u73b0\u7684UDP\u5957\u63a5\u5b57\u7a0b\u5e8f\u7684\u670d\u52a1\u7aef\u91cc\u6709while True\u5faa\u73af,\u6536\u5b8c\u4e00\u6761C\u7aef\u6d88\u606f\u540e\u53d1,\u518d\u6536\u5b8c\u4e00\u6761\u518d\u53d1.. \u6267\u884c\u7684\u8fc7\u7a0b\u6bd4\u8f83\u5feb,\u82e5\u5ba2\u6237\u7aef\u6bd4\u8f83\u5c11\u4e14\u6570\u636e\u91cf\u6bd4\u8f83\u5c0f\u7684\u8bdd,\u770b\u8d77\u6765\u5c31\u6709\u5e76\u53d1\u7684\u6548\u679c.. \u5b9e\u5219\u5e76\u4e0d\u662f\u5e76\u53d1. 2> \u5728\u8fd9\u91cc\u5b9e\u73b0\u7684UDP\u5e76\u53d1\u5957\u63a5\u5b57\u7a0b\u5e8f\u7684\u670d\u52a1\u7aef\u91cc\u662f\u6ca1\u6709\u7684while True\u5faa\u73af\u7684. \u4eceUDP\u7684\u6267\u884c\u8fc7\u7a0b\u5206\u6790: \u5927\u4f53\u4e0a\u8ddfUDP\u5dee\u4e0d\u591a.\u4f46\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f! UDP\u6ca1\u6709\u8fde\u63a5\u4e00\u8bf4,\u5ba2\u6237\u7aef\u5728\u53d1\u6d88\u606f\u7684\u65f6\u5019\u624d\u4f1a\u542f\u52a8\u4e00\u4e2a\u7ebf\u7a0b,\u5b9e\u4f8b\u5316\u4e00\u4e2a\u5bf9\u8c61,\u89e6\u53d1handle\u65b9\u6cd5. \"\"\" \u2605 -- \u670d\u52a1\u7aef \"\"\" import socketserver class MyHandler ( socketserver . BaseRequestHandler ): def handle ( self ): \"\"\" self.client_address \u5ba2\u6237\u7aef\u7684IP\u548cport self.request (\u5ba2\u6237\u7aef\u53d1\u7684\u6d88\u606f,\u4e00\u4e2a\u5957\u63a5\u5b57\u5bf9\u8c61) \"\"\" data = self . request [ 0 ] print ( \"\u5ba2\u6237\u7aef\u6d88\u606f:\" , data ) self . request [ 1 ] . sendto ( data . upper (), self . client_address ) if __name__ == '__main__' : s = socketserver . ThreadingUDPServer (( \"127.0.0.1\" , 8080 ), MyHandler ) # -- \u6bd4\u8d77TCP\u7684\u8fc7\u7a0b,UDP\u5c11\u4e86\u5efa\u8fde\u63a5. # UDP\u6ca1\u6709\u8fde\u63a5\u4e00\u8bf4,\u5ba2\u6237\u7aef\u5728\u53d1\u6d88\u606f\u7684\u65f6\u5019\u624d\u4f1a\u542f\u52a8\u4e00\u4e2a\u7ebf\u7a0b,\u5b9e\u4f8b\u5316\u4e00\u4e2a\u5bf9\u8c61,\u89e6\u53d1handle\u65b9\u6cd5. s . serve_forever () \"\"\" \u2605 -- \u5ba2\u6237\u7aef \"\"\" import socket client = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) while True : msg = input ( \">>:\" ) . strip () client . sendto ( msg . encode ( 'utf-8' ), ( \"127.0.0.1\" , 8080 )) data , server_addr = client . recvfrom ( 1024 ) print ( data ) client . close () \u5f85\u89e3\u51b3: socketserver\u6a21\u5757\u6e90\u7801\u5206\u6790!!! \u5b66\u5b8c\u8fdb\u7a0b\u7ebf\u7a0b\u540e\u518d\u6765(\u00b4\u25bd\uff40) \u6709\u65f6\u95f4\u7684\u8bdd.Hhh.","title":"socketserver\u4e4bUDP"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4_socketserver%E6%A8%A1%E5%9D%97/#_5","text":"\u53ea\u6709\u6211\u81ea\u5df1\u770b\u5f97\u61c2\u7684\u590d\u4e60\u603b\u7ed3..(\u00b4\u25bd\uff40)","title":"\u7f51\u7edc\u7f16\u7a0b\u590d\u4e60"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4_socketserver%E6%A8%A1%E5%9D%97/#_6","text":"IP + mac\u5730\u5740\u80fd\u6807\u8bc6\u5168\u4e16\u754c\u8303\u56f4\u5185\u72ec\u4e00\u65e0\u4e8c\u7684\u4e00\u53f0\u8ba1\u7b97\u673a . ( IP\u627e\u5230\u4e3b\u673a\u5728\u54ea\u4e2a\u5c40\u57df\u7f51 , MAC\u5730\u5740\u627e\u5230\u4e3b\u673a\u5728\u5c40\u57df\u7f51\u7684\u54ea\u4e2a\u4f4d\u7f6e !! ) url\u5730\u5740\u662f\u7528\u6765\u6807\u8bc6\u5168\u4e16\u754c\u8303\u56f4\u5185\u72ec\u4e00\u65e0\u4e8c\u7684\u4e00\u4e2a\u8d44\u6e90\u7684 !! \u5e94\u7528\u534f\u8bae\u90e8\u5206 // \u57df\u540d\u548c\u7aef\u53e3 , \u6d4f\u89c8\u5668\u7aef\u53e3\u9ed8\u8ba480 / \u8def\u5f84 -- url\u662f\u5efa\u7acb\u5728ip + mac + port\u4e4b\u4e0a\u7684 ! HTTP\u662f\u6bd4TCP\u66f4\u9ad8\u5c42\u6b21\u7684\u5e94\u7528\u5c42\u534f\u8bae . \u6839\u636e\u89c4\u5219 , \u53ea\u6709\u4f4e\u5c42\u534f\u8bae ( TCP\u4e09\u6b21\u63e1\u624b\u5efa\u7acb\u53cc\u5411\u901a\u8def ) \u5efa\u7acb\u4e4b\u540e\u624d\u80fd , \u624d\u80fd\u8fdb\u884c\u9ad8\u5c42\u534f\u8bae\u7684\u8fde\u63a5 ! socket\u5957\u63a5\u5b57\u4f4d\u4e8e\u5e94\u7528\u5c42\u548c\u4f20\u8f93\u5c42\u4e4b\u95f4 , \u5c06\u4f20\u8f93\u5c42\u4ee5\u4e0b\u7684\u534f\u8bae\u90fd\u5c01\u88c5\u6210\u4e86\u63a5\u53e3 !!! \u534a\u8fde\u63a5\u6c60backlog \u9650\u5236\u7684\u662f < \u540c\u4e00\u65f6\u523b > \u7684\u8bf7\u6c42\u6570 ! C\u7aef\u5411S\u7aef\u53d1\u9001\u7684\u8fde\u63a5\u8bf7\u6c42 , \u8981\u5148\u4ece\u534a\u8fde\u63a5\u6c60\u91cc\u8d70\u4e00\u906d , \u5efa\u7acb\u597dTCP\u8fde\u63a5\u540e , \u8be5\u8fde\u63a5\u4f1a\u8fdb\u5165\u5168\u8fde\u63a5\u6c60 \u9ad8\u5e76\u53d1\u7684\u60c5\u51b5\u4e0b . \u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u8fde\u63a5\u4f1a\u957f\u65f6\u95f4\u505c\u5728\u534a\u8fde\u63a5\u6c60\u91cc .. \u73b0\u5b9e\u4e2d\u7684\u4f53\u73b0\u5c31\u662f\u7f51\u9875\u4e00\u76f4\u5728\u52a0\u8f7d . \u534a\u8fde\u63a5\u6c60\u6ee1\u4e86 , \u5f80\u540e\u7684\u8fde\u63a5\u8bf7\u6c42\u76f4\u63a5\u8fde\u63a5\u4e0d\u4e0a , \u8d85\u65f6 .. \u534a\u8fde\u63a5\u6c60\u8ddf\u5168\u8fde\u63a5\u6c60\u4e00\u6837\u5360\u7528\u7684\u662f\u5185\u5b58\u7a7a\u95f4 , \u8bbe\u7f6e\u7684\u8fde\u63a5\u6570\u91cf\u53d7\u9650\u4e8e\u5185\u5b58\u7684\u5927\u5c0f . \u901a\u8fc7netstat - an\u547d\u4ee4\u67e5\u770b\u72b6\u6001\u53ef\u4ee5\u8fdb\u884c\u6392\u9519 !","title":"\u8ba1\u7b97\u673a\u7f51\u7edc"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4_socketserver%E6%A8%A1%E5%9D%97/#tcp","text":"\u2605 \u7b80\u5355\u6765\u8bb0 ! C\u7aef\u548cS\u7aef\u90fd\u4e0d\u80fd\u53d1\u7a7a\u6570\u636e !! send\u53d1\u7ed9\u7684\u662f\u81ea\u5df1\u7684OS , \u53d1\u7a7a\u53d1\u4e86\u4e2a\u5bc2\u5bde ! C\u7aef\u5355\u65b9\u9762\u65ad\u5f00 , \u8fdb\u884c\u5f02\u5e38\u5904\u7406 , \u52a1\u5fc5\u540c\u65f6\u517c\u5bb9linux\u548cwindow\u7cfb\u7edf . \u4e00\u822c\u60c5\u51b5\u662f\u5ba2\u6237\u7aef\u5148\u5411\u670d\u52a1\u7aefsend\u6570\u636e , so , \u5ba2\u6237\u7aefsend - recv ; \u670d\u52a1\u7aefrecv - send . < \u670d\u52a1\u7aef \u522b \"\u6536\" \u7a7a\u6570\u636e > , \u89e3\u51b3\u5ba2\u6237\u7aef\u5355\u65b9\u9762\u65ad\u5f00 . < \u5ba2\u6237\u7aef \u522b \"\u53d1\" \u7a7a\u6570\u636e > , \u9632\u6b62\u4e00\u76f4\u963b\u585e . TCP\u4e3a\u5565\u53ef\u9760 , \u56e0\u4e3asend\u5230\u81ea\u5df1\u7684OS\u7f13\u5b58\u4e2d\u7684\u6570\u636e , \u901a\u8fc7\u7f51\u7edc\u53d1\u51fa , \u786e\u8ba4\u5230\u8fbe\u4e86\u5bf9\u65b9\u540e , \u624d\u4f1a\u5220\u9664\u6389 ! UDP\u53ef\u4e0d\u4f1a , \u901a\u8fc7\u7f51\u7edc\u53d1\u51fa\u53bb\u540e , \u76f4\u63a5\u5220\u9664OS\u7f13\u5b58\u4e2d\u7684\u6570\u636e ! \u5f53\u7136 , recv\u4e5f\u662f\u4ece\u81ea\u5df1OS\u7684\u7f13\u5b58\u4e2d\u62ff ! recv ( 1024 ) \u662f\u6307\u4e00\u6b21\u6027\u6700\u591a\u62ff1024\u5b57\u8282\u7684\u6570\u636e ! import socket server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) # -- server\u5957\u63a5\u5b57\u5bf9\u8c61 server . bind (( \"127.0.0.1\" , 8080 )) server . listen ( 5 ) # -- \u534a\u8fde\u63a5\u6c60\u6570 while True : # -- \u5e76\u6ca1\u6709\u5b9e\u73b0\u5e76\u53d1\u7684\u63d0\u4f9b\u670d\u52a1!\u7528\u591a\u8fdb\u7a0b\u591a\u7ebf\u7a0b\u624d\u884c! conn , client_addr = server . accept () # -- conn\u5957\u63a5\u5b57\u5bf9\u8c61 while True : try : # -- conn\u662f\u4e09\u6b21\u63e1\u624b\u5efa\u7acb\u53cc\u5411\u901a\u9053\u7684\u4ea7\u7269,\u5ba2\u6237\u7aef\u5355\u65b9\u9762\u6302\u4e86 # linux\u4e0bS\u7aef\u4f1a\u4e0d\u505c\u7684\u63a5\u6536\u7a7a\u5b57\u7b26\u4e32,windows\u4e0bS\u7aef\u4f1a\u62a5\u9519! data = conn . recv ( 1024 ) if not data : break # -- linux print ( '\u5ba2\u6237\u7aef\u7684\u6570\u636e:' , data ) conn . send ( data . upper ()) except ConnectionResetError : # -- windows break import socket client = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) # -- client\u5957\u63a5\u5b57\u5bf9\u8c61 client . connect (( '127.0.0.1' , 8080 )) while True : msg = input ( '>>: ' ) . strip () if not msg : continue # -- \u5224\u65ad phone . send ( msg . encode ( 'utf8' )) data = phone . recv ( 1024 )","title":"TCP\u5957\u63a5\u5b57"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4_socketserver%E6%A8%A1%E5%9D%97/#_7","text":"TCP\u534f\u8bae\u79f0\u4e3a\u6d41\u5f0f\u534f\u8bae . \u7cbe\u9ad3\u5728\u4e8e\u6d41stream !! \u987e\u540d\u601d\u4e49 , \u50cf\u6d41\u6c34\u4e00\u6837\u4f20\u8f93\u6570\u636e . TCP\u5c31\u4e00\u80a1\u8111\u7684\u4f20\u771f\u5b9e\u6570\u636e . \u4f20\u8f93\u8fc7\u7a0b\u6d89\u53ca\u6ed1\u52a8\u7a97\u53e3\u673a\u5236 \u3001 \u5e8f\u5217\u53f7 \u3001 \u505c\u6b62\u7b49\u5f85\u8fd4\u56deACK\u7b49\u7b49 . \u53d1\u9001\u65b9\u5f15\u8d77\u7684\u7c98\u5305\u662f\u7531TCP\u534f\u8bae\u672c\u8eab\u9020\u6210\u7684 , TCP\u4e3a\u63d0\u9ad8\u4f20\u8f93\u6548\u7387 , \u53d1\u9001\u65b9\u5f80\u5f80\u8981\u6536\u96c6\u5230\u8db3\u591f\u591a\u7684\u6570\u636e\u540e\u624d\u53d1\u9001\u4e00\u4e2aTCP\u6bb5 . 1 > \u82e5\u8fde\u7eed\u5bf9\u6b64send\u7684\u6570\u636e\u91cf\u5c0f\u4e14\u95f4\u9694\u77ed , \u4f1a\u7528nagle\u7b97\u6cd5 . \u63a5\u6536\u7aef\u6536\u5230\u7684\u662f\u7c98\u5305\u6570\u636e . \u63a5\u6536\u7aef\u65e0\u6cd5\u533a\u5206\u5408\u5728\u4e00\u8d77\u7684\u591a\u4e2a\u6570\u636e\u5305\u7684\u754c\u9650 2 > \u82e5\u4f20\u8f93\u4e00\u4e2a\u5927\u6587\u4ef6 , \u4f1a\u5206\u6bb5 . \u53d1\u9001\u65f6\u6587\u4ef6\u5185\u5bb9\u662f\u6309\u7167\u4e00\u6bb5\u4e00\u6bb5\u7684\u5b57\u8282\u6d41\u53d1\u9001\u7684 , \u5728\u63a5\u6536\u65b9\u770b\u6765 , \u6839\u672c\u4e0d\u77e5\u9053\u8be5\u6587\u4ef6\u7684\u5b57\u8282\u6d41\u4ece\u4f55\u5904\u5f00\u59cb , \u5728\u4f55\u5904\u7ed3\u675f \u89e3\u51b3\u529e\u6cd5 : \"\u62a5\u5934 + \u6570\u636e\" \u63a5\u6536\u7aef\u5e94\u8be5\u60f3\u65b9\u8bbe\u6cd5\u5148\u628a\u62a5\u5934\u90e8\u5206 \"\u7cbe\u51c6\" \u62ff\u5230 !!! \u5177\u4f53\u6765\u8bf4 , \u7531\u4e8e\u62a5\u5934\u548c\u8981\u53d1\u9001\u7684\u6570\u636e\u90fd\u662f\u5c5e\u4e8eTCP\u534f\u8bae\u7684\u4e00\u90e8\u5206 . \u4e5f\u662f\u4f1a\u7c98\u5230\u4e00\u8d77\u7684 . \u5236\u4f5c\u62a5\u5934 , \u5c06\u62a5\u5934\u8f6c\u6362\u6210bytes\u7c7b\u578b\u53d1\u9001\u5f88\u5bb9\u6613\u5b9e\u73b0 , \u5173\u952e\u662f\u63a5\u6536\u7aef\u8981\u5148\u5c06\u62a5\u5934\u51c6\u786e\u7684\u63a5\u6536\u5230 .. \u4f7f\u7528struct\u6a21\u5757\u53ef\u4ee5\u5c06 < \u6574\u5f62\u7684\u6570\u636e > \u8f6c\u6210 < \u56fa\u5b9a\u957f\u5ea6\u7684bytes\u7c7b\u578b\u7684\u6570\u636e > !! \u5c06\u62a5\u5934\u7684\u957f\u5ea6\u505a\u62104\u4e2abytes\u53d1\u9001\u7ed9\u5bf9\u65b9 , \u63a5\u6536\u7aef\u5148\u63a5\u6536\u8fd94\u4e2abytes\u7684\u6570\u636e , \u89e3\u51fa\u62a5\u5934\u7684\u957f\u5ea6 .. \u518d\u63a5\u6536\u62a5\u5934\u957f\u5ea6\u7684\u6570\u636e ! \u5177\u4f53\u8fc7\u7a0b\u8be6\u770b\u6587\u4ef6\u4f20\u8f93\u7684\u51fd\u6570\u7248 ! 1 > struct\u6a21\u5757\u7684i\u6a21\u5f0f\u652f\u6301\u7684\u6574\u578b\u6570\u636e\u7684\u5927\u5c0f\u8303\u56f4\u662f\u6709\u9650\u7684 ! \u8d85\u8fc7\u4e86\u4f1a\u62a5\u9519 . SO , \u53ea\u4f20\u6587\u4ef6\u7684\u5b57\u8282\u957f\u5ea6\u662f\u4e0d\u5408\u7406\u7684 . i\u6a21\u5f0f\u4e0b , \u8be5\u6587\u4ef6\u7684\u5b57\u8282\u957f\u5ea6\u4e3a10000\u4e2a\u5b57\u8282 , \u76f4\u63a5\u62a5\u9519 . 2 > \u5bf9\u4e8e\u4e00\u4e2a\u6587\u4ef6\u7684\u53d1\u9001 , \u9700\u8981\u5236\u4f5c\u4e2a\u62a5\u5934 / \u8bf4\u767d\u4e86 , \u5c31\u662f\u4e00\u4e2a\u5b57\u5178 ! \u91cc\u9762\u5e94\u8be5\u5305\u542b\u8be5\u6587\u4ef6\u7684\u540d\u5b57 , \u957f\u5ea6 , \u6587\u4ef6md5\u503c\u7b49\u4fe1\u606f . \u4ee5\u670d\u52a1\u7aef\u53d1\u6587\u4ef6 , \u5ba2\u6237\u7aef\u63a5\u6536\u6587\u4ef6\u4e3a\u4f8b ! \u5f53\u7136\u4e5f\u53ef\u4ee5 , \u5ba2\u6237\u7aef\u53d1\u6587\u4ef6 , \u670d\u52a1\u7aef\u63a5\u6536 . \u4e00\u6837\u7684\u8fc7\u7a0b ! >> \u670d\u52a1\u7aef send_dic = { k1 : v1 , k2 : v2 , ... } # -- \u5b57\u5178 send_bytes = json . dumps ( send_dic ) . encode ( 'utf-8' ) # -- \u5e8f\u5217\u5316-\u7f16\u7801 -> \u5b57\u8282\u6570\u636e conn . send ( struct . pack ( 'i' , len ( send_bytes ))) # -- struct\u6253\u5305\u62a5\u5934\u957f\u5ea6-\u53d1\u90014\u5b57\u8282\u7684\u6570\u636e conn . send ( send_bytes ) # -- \u53d1\u9001\u62a5\u5934\u6570\u636e with open ( file_path , 'rb' ) as f : for line in f : conn . send ( line ) >> \u5ba2\u6237\u7aef recv_bytes_len = struct . unpack ( 'i' , client . recv ( 4 ))[ 0 ] recv_bytes = client . recv ( header_bytes_len ) # -- \u4e0d\u8981\u62c5\u5fc3,\u8fd9\u4e2a\u62a5\u5934\u5b57\u5178\u80af\u5b9a\u80fd\u4e00\u6b21\u6027recv\u53d6\u5230\u7684. recv_dic = json . loads ( header_bytes . decode ( 'utf-8' )) # -- \u5b57\u8282\u6570\u636e \u89e3\u7801-\u53cd\u5e8f\u5217\u5316 -> \u5b57\u5178 total_size = recv_dic [ 'file_size' ] recv_size = 0 with open ( file_path , 'wb' ) as f : while recv_size < total_size : line_data = client . recv ( 1024 ) f . write ( line_data ) recv_size += len ( line_data )","title":"\u7c98\u5305\u95ee\u9898"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/5_%E8%BF%9B%E7%A8%8B%E7%90%86%E8%AE%BA%E5%82%A8%E5%A4%87/","text":"\u64cd\u4f5c\u7cfb\u7edf \u00b6 \u8be6\u89c1 \u524d\u9762\u8ba1\u7b97\u673a\u57fa\u7840\u4e2d\u7684\u64cd\u4f5c\u7cfb\u7edf\u7ae0\u8282.. \u60f3\u8981\u6df1\u5165\u4e86\u89e3\u7684\u8bdd,\u63a8\u8350\u770b\u300a\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u300b,\u524d\u4e09\u7ae0\u8db3\u77e3. \u53c2\u8003\u94fe\u63a5: https://www.cnblogs.com/linhaifeng/p/6295875.html OS\u662f\u4f4d\u4e8e\u8ba1\u7b97\u673a\u786c\u4ef6\u4e0e\u8f6f\u4ef6\u4e4b\u95f4\u7684\u63a7\u5236\u7a0b\u5e8f. \u64cd\u4f5c\u7cfb\u7edf\u7684\u529f\u80fd \u00b6 \u64cd\u4f5c\u7cfb\u7edf\u4f4d\u4e8e\u8ba1\u7b97\u673a\u786c\u4ef6\u4e0e\u8f6f\u4ef6\u4e4b\u95f4.. OS\u672c\u8eab\u4e5f\u662f\u4e00\u4e2a\u8f6f\u4ef6,\u5b83\u5e2e\u6211\u4eec\u63a7\u5236\u786c\u4ef6; \u5b83\u4f1a\u5c06\u786c\u76d8\u3001cpu\u7b49\u5982\u4f55\u8fd0\u4f5c\u7684\u590d\u6742\u64cd\u4f5c\u5c01\u88c5\u6210\u7b80\u5355\u7684\u63a5\u53e3\u7ed9\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528.. \u8d77\u5230\u4e00\u4e2a\u627f\u4e0a\u542f\u4e0b\u7684\u4f5c\u7528! \u7b2c\u4e00\u5927\u529f\u80fd: \u5c06\u786c\u4ef6\u7684\u590d\u6742\u64cd\u4f5c\u5c01\u88c5\u6210\u7b80\u5355\u7684\u529f\u80fd/\u63a5\u53e3,\u7ed9\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528.. \u6700\u5178\u578b\u7684\u4ee3\u8868: python\u4e2d\u64cd\u4f5c\u786c\u76d8\u7684\u6587\u4ef6\u5904\u7406\u7a0b\u5e8f!! \u7b2c\u4e8c\u5927\u529f\u80fd: \u5c06\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5bf9\u786c\u4ef6( cpu\u3001\u786c\u76d8\u3001\u7f51\u5361\u7b49 )\u7684\u4e89\u62a2\u53d8\u5f97\u6709\u5e8f\u5316.. \u5bf9\u65e0\u5e8f\u7684\u4e89\u62a2\u52a0\u4ee5\u9650\u5236!! \u7279\u522b\u63d0\u9192: OS\u7ba1\u7406\u7740\u8fd9\u4e00\u5957\u786c\u4ef6;OS\u80a9\u4e0a\u625b\u7740\u7684\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u662f\u5171\u4eab\u8fd9\u5957\u786c\u4ef6\u7684;OS\u51b3\u5b9a\u5b83\u4eec\u7ed9\u54ea\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7528. \u64cd\u4f5c\u7cfb\u7edf\u7684\u53d1\u5c55\u53f2 \u00b6 \u5148\u8bf4\u4e00\u5634,\u64cd\u4f5c\u7cfb\u7edf\u662f\u5982\u4f55\u4ece\u65e0\u5230\u6709\u53d1\u5c55\u5230\u4eca\u513f\u8fd9\u4e2a\u72b6\u6001\u7684\u8fc7\u7a0b\u5c31\u662f\u8fdb\u7a0b\u7684\u6f14\u53d8\u8fc7\u7a0b!! \u9898\u5916\u8bdd: \u4eba\u5de5\u667a\u80fd\u5c31\u662f\u4eba\u4e0d\u65ad\u53d1\u89c9\u81ea\u8eab\u7684\u8fc7\u7a0b.. Ps:\u4e0b\u8ff0\u7684\u64cd\u4f5c\u7cfb\u7edf\u53d1\u5c55\u53f2\u662f\u4ece\u4eba\u7c7b\u5f00\u59cb\u8fdb\u5165\u7535\u5b50\u65f6\u4ee3\u5f00\u59cb\u7684.. \u7535\u5b50\u65f6\u4ee3\u4e4b\u524d\u7684\u7b97\u76d8\u4e5f\u7b97\u8ba1\u7b97\u673aHhh. \u7b2c\u4e00\u4ee3:\u771f\u7a7a\u7ba1\u4e0e\u7a7f\u5b54\u5361\u7247 \u65e0\u7f16\u7a0b\u8bed\u8a00,\u65e0\u64cd\u4f5c\u7cfb\u7edf\u7684\u6982\u5ff5 \u4e32\u884c -- \u4e00\u4e2a\u4efb\u52a1 \"\u5b8c\u5b8c\u6574\u6574\u8fd0\u884c\u5b8c\u540e\" , \u624d\u80fd\u8fd0\u884c\u4e0b\u4e00\u4e2a\u4efb\u52a1!! \u7279\u522b\u5f3a\u8c03\u5b8c\u5b8c\u6574\u6574!! \u4efb\u52a1\u4e00\u4e2a\u4e2a\u7684\u8fd0\u884c\u4e0d\u53eb\u4e32\u884c.\u56e0\u4e3a\u591a\u9053\u6280\u672f\u57fa\u4e8e\u5355\u6838\u4e0b\u5b9e\u73b0\u7684\u5e76\u53d1,\u672c\u8d28\u4e0a\u4e5f\u662f\u4e00\u4e2a\u4e2a\u8fd0\u884c\u7684.. \u7b2c\u4e8c\u4ee3:\u6676\u4f53\u7ba1\u548c\u6279\u5904\u7406\u7cfb\u7edf \u6279\u5904\u7406\u7cfb\u7edf,\u6709\u8fdb\u7a0b\u90a3\u5473\u9053\u5728\u91cc\u9762\u5566! \u5c3d\u7ba1\u4f9d\u65e7\u662f\u4e32\u884c\u7684. \u7b2c\u4e09\u4ee3:\u96c6\u6210\u7535\u8def\u82af\u7247\u548c\u591a\u9053\u7a0b\u5e8f\u8bbe\u8ba1 \u5e76\u53d1 -- \u591a\u4e2a\u4efb\u52a1\u770b\u8d77\u6765\u662f\u540c\u65f6\u8fd0\u884c\u7684\u5373\u53ef. \u5355\u6838\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u5e76\u53d1!! \u5e76\u884c -- \u591a\u4e2a\u4efb\u52a1\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u540c\u65f6\u8fd0\u884c. \u53ea\u6709\u591a\u6838\u624d\u80fd\u5b9e\u73b0\u5e76\u884c!! \u63d0\u9192\u54c8,CPU\u662f\u7528\u6765\u8ba1\u7b97\u7684,CPU\u662f\u65e0\u6cd5\u6267\u884cIO\u64cd\u4f5c\u7684,\u4e00\u65e6\u9047\u5230IO\u64cd\u4f5c,OS\u5c31\u4f1a\u8ba9CPU\u53bb\u6267\u884c\u522b\u7684\u4efb\u52a1\u7684\u8ba1\u7b97. \u591a\u9053\u6280\u672f\u7684\u80cc\u666f: \u60f3\u8981\u5728\u5355\u6838\u4e0b\u5b9e\u73b0\u5e76\u53d1.(\u5355\u6838\u540c\u4e00\u65f6\u523b\u53ea\u80fd\u6267\u884c\u4e00\u4e2a\u4efb\u52a1) <\u4efb\u52a1\u5e76\u53d1\u5b9e\u73b0> -- \u5207\u6362 + \u4fdd\u5b58\u72b6\u6001 \u4fdd\u5b58\u72b6\u6001\u610f\u601d\u662f\u4fdd\u5b58\u5230\u5185\u5b58,\u6709\u90e8\u5206\u5173\u952e\u6570\u636e\u53ef\u4ee5\u4fdd\u5b58\u5230CPU\u7684\u5bc4\u5b58\u5668\u4e2d. \u591a\u9053\u6280\u672f \u00b6 \u591a\u9053\u6280\u672f\u6709\u4e24\u5927\u6838\u5fc3: \u7a7a\u95f4\u4e0a\u7684\u590d\u7528\u548c\u65f6\u95f4\u4e0a\u7684\u590d\u7528. \u7a7a\u95f4\u4e0a\u7684\u590d\u7528\u662f\u4e3a\u65f6\u95f4\u4e0a\u7684\u590d\u7528\u505a\u94fa\u57ab\u7684!! \u4e00\u5b9a\u8981\u660e\u786e,\u662f \"\u64cd\u4f5c\u7cfb\u7edf\" \u5728\u4f7f\u7528\u591a\u9053\u6280\u672f!! \u5c0f\u58f0BB: \u591a\u9053\u6280\u672f\u521a\u5f00\u59cb\u662f\u6ca1\u6709\u89e3\u51b3\u5185\u5b58\u7269\u7406\u5c42\u9762\u7684\u9694\u79bb\u7684,\u95ee\u9898\u89e3\u51b3\u540e,\u591a\u9053\u6280\u672f\u624d\u6295\u5165\u4e86\u4f7f\u7528.. \u7a7a\u95f4\u4e0a\u7684\u590d\u7528: \u591a\u4e2a \u4efb\u52a1/\u8fdb\u7a0b \u5171\u540c\u4e00\u4e2a\u5185\u5b58\u6761, \u4f46\u5360\u7528\u7684\u5185\u5b58\u662f \u76f8\u4e92\u9694\u79bb \u7684,\u5e76\u4e14\u662f\u7269\u7406\u5c42\u9762\u7684\u9694\u79bb!! \u65f6\u95f4\u4e0a\u7684\u590d\u7528: \u591a\u4e2a \u4efb\u52a1/\u8fdb\u7a0b \u590d\u7528\u540c\u4e00\u4e2acpu\u7684\u65f6\u95f4!! 1> CPU\u9047\u5230IO\u5207\u6362: \u53ef\u4ee5\u63d0\u9ad8\u6548\u7387! 2> \u4e00\u4e2a\u4efb\u52a1\u5360\u7528CPU\u65f6\u95f4\u8fc7\u957f\u4e5f\u4f1a\u5207\u8d70: \u4e3a\u4e86\u5b9e\u73b0\u5e76\u53d1\u6548\u679c\u4e0d\u5f97\u5df2\u800c\u4e3a\u4e4b,\u53cd\u800c\u4f1a\u964d\u4f4e\u7a0b\u5e8f\u7684\u6267\u884c\u6548\u7387. 3> \u4f18\u5148\u7ea7\u9ad8\u7684\u4efb\u52a1\u4e5f\u80fd\u62a2\u8d70CPU\u7684\u6267\u884c\u6743\u9650. CPU\u89d2\u5ea6 -- \u5728\u591a\u4e2a\u4efb\u52a1\u76f4\u63a5\u6765\u56de\u5feb\u901f\u5207\u6362. \u4efb\u52a1\u89d2\u5ea6 -- \u5728\u8fd9\u4e2a CPU\u65f6\u95f4\u7247 \u91cc\u5177\u6709\u5bf9CPU\u7684\u4f7f\u7528\u6743\u9650. Ps : \u6ca1\u6709\u8bf4\u591a\u6838cpu , \u90a3\u4e48\u63d0\u5230\u591a\u9053\u6280\u672f , \u5c31\u662f \u5355\u6838 + \u591a\u9053 \u5b9e\u73b0\u591a\u4e2a\u4efb\u52a1\u7684\u5e76\u53d1\u6267\u884c . Q1 : \u6709\u4e09\u4e2a\u4efb\u52a1A B C . \u5148\u4f9d\u6b21\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d . \u5b83\u4eec\u9700\u8981cpu\u8fd0\u7b97\u7684\u65f6\u95f4\u90fd\u662f1s , \u8fd0\u7b97\u5b8c\u540e\u4ea7\u751f\u7684\u6570\u636e\u9700\u8981\u653e\u5230\u786c\u76d8\u91cc , \u786c\u76d8IO\u65f6\u95f4\u90fd\u662f9s . \u4f7f\u7528\u591a\u9053\u6280\u672f , \u5b8c\u6210\u8fd93\u4e2a\u4efb\u52a1\u9700\u8981\u591a\u957f\u65f6\u95f4 ? ( Ps : cpu\u5728\u4e09\u4e2a\u4efb\u52a1\u4e4b\u95f4\u5207\u6362\u7684\u65f6\u95f4\u5ffd\u7565\u4e0d\u8ba1 ) A1 : 1 + 1 + 1 + 9 = 12 s . \u60f3\u901a\u5173\u952e\u7684\u4e00\u70b9\u5728\u4e8e , \u5728\u505a\u4efb\u52a1C\u7684IO\u65f6 , \u4efb\u52a1A\u548cB\u7684IO\u4e5f\u5728\u505a , \u5f53\u4efb\u52a1C\u7684IO\u505a\u5b8c\u65f6 , AB\u7684IO\u65e9\u5c31\u505a\u5b8c\u4e86 . Q2 : \u82e5\u4efb\u52a1ABC\u90fd\u53ea\u6709\u8fd0\u7b97\u65f6\u95f410s , \u90fd\u6ca1\u6709IO . \u8fd9\u79cd\u60c5\u51b5\u4e0b , \u5e76\u53d1\u771f\u7684\u6bd4\u4e32\u884c\u6548\u7387\u9ad8\u5417 ? A2 : \u4e32\u884c30s , \u5e76\u884c\u662f\u5927\u4e8e30s\u7684 , \u56e0\u4e3a\u8fd8\u8981\u8003\u8651cpu\u5207\u6362\u8fdb\u7a0b\u7684\u65f6\u95f4 .. \u5373cpu\u5728\u6ca1\u6709\u9047\u5230IO\u7684\u60c5\u51b5\u4e0b\u5207\u6362 , \u4e0d\u4f1a\u5207\u6362\u6548\u7387 , \u53cd\u800c\u4f1a\u964d\u4f4e\u6548\u7387 .. \u4f46\u771f\u5b9e\u60c5\u51b5\u4e0b , \u8fd8\u662f\u5f97\u5207 , \u56e0\u4e3a\u5f97\u5b9e\u73b0\u5e76\u53d1 , \u4e0d\u80fd\u8ba9CPU\u88ab\u5355\u4e2a\u4efb\u52a1\u6346\u7ed1\u8fc7\u957f\u7684\u65f6\u95f4 . Q3 : \u82e5CPU\u6709\u56db\u4e2a\u6838 , OS\u5e94\u7528\u591a\u9053\u6280\u672f , 5 \u4e2a\u4efb\u52a1\u57284\u4e2a\u6838ABCD\u4e0a\u6765\u56de\u5207\u6362\u7684\u8fc7\u7a0b\u662f\u600e\u6837\u7684 ? A3 : 5 \u4e2a\u4efb\u52a1 \u2460\u2461\u2462\u2463\u2464 \u4ea4\u7ed9OS\u8fdb\u884c\u8c03\u5ea6 . 1 > 4 \u4e2a\u6838 , \u6bcf\u4e2a\u6838\u90fd\u5148\u63a5\u4e00\u4e2a\u4efb\u52a1 . A : \u2460 B : \u2461 C : \u2462 D : \u2463 \u2464 \u5728\u4e00\u65c1\u7b49\u7740 2 > \u4efb\u52a1 \u2460 \u9047\u5230\u4e86IO , \u88ab\u6838A\u8e22\u5230\u4e00\u65c1\u5f85\u7740 . A : \u2464 B : \u2461 C : \u2462 D : \u2463 \u2460 \u5728\u4e00\u65c1\u5904\u7406IO 3 > \u4efb\u52a1 \u2460 \u7684IO\u5904\u7406\u5b8c\u6bd5\u4e86 , \u4efb\u52a1 \u2462 \u9047\u5230\u4e86IO , \u88ab\u6838A\u8e22\u5230\u4e00\u65c1\u5f85\u7740 . A : \u2464 B : \u2461 C : \u2460 D : \u2463 \u2462 \u5728\u4e00\u65c1\u5904\u7406IO 4 > \u4ee5\u6b64\u7c7b\u63a8 . \u8fdb\u7a0b \u00b6 \u8fdb\u7a0b\u8d77\u6e90\u4e8e\u64cd\u4f5c\u7cfb\u7edf,\u662f\u64cd\u4f5c\u7cfb\u7edf\u6700\u6700\u6838\u5fc3\u7684\u6982\u5ff5,\u6ca1\u6709\u4e4b\u4e00. \u64cd\u4f5c\u7cfb\u7edf\u6240\u6709\u5176\u5b83\u6982\u5ff5\u90fd\u662f\u56f4\u7ed5\u7740\u8fdb\u7a0b\u5c55\u5f00\u7684!! \u7279\u522b\u63d0\u9192: \u4e0a\u65b9\u64cd\u4f5c\u7cfb\u7edf\u5c0f\u8282\u4e2d\u63d0\u5230\u7684\u4efb\u52a1\u90fd\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u4e2a\u8fdb\u7a0b!! \u6982\u5ff5 \u00b6 \u8fdb\u7a0b\u6307\u7684\u662f\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u7a0b\u5e8f,\u6216\u8005\u662f\u7a0b\u5e8f\u7684\u8fd0\u884c\u8fc7\u7a0b. \u786c\u76d8\u91cc\u8eba\u7740\u7684\u90a3\u5806\u4ee3\u7801\u53eb\u505a\u7a0b\u5e8f, \u7a0b\u5e8f\u4ee3\u7801\u4ece\u786c\u76d8\u52a0\u8f7d\u5230\u5185\u5b58,CPU\u518d\u53d6\u7a0b\u5e8f\u7684\u4ee3\u7801\u6267\u884c,\u8fd9\u4e00\u8fc7\u7a0b\u53eb\u505a\u8fdb\u7a0b. \u8fdb\u7a0b\u4e0d\u662f\u771f\u5b9e\u5b58\u5728\u7684,\u5b83\u662f\u4e00\u7cfb\u5217\u52a8\u4f5c\u7684\u603b\u548c, \u662f\u4e00\u4e2a\u62bd\u8c61\u7684\u6982\u5ff5! eg: \u505a\u86cb\u7cd5,(CPU)\u9700\u8981\u5148\u9605\u8bfb\u98df\u8c31(\u6307\u4ee4),\u53d6\u5404\u79cd\u539f\u6750\u6599(\u8f93\u5165\u6570\u636e)\u7b49.. Ps: \u7279\u522b\u6ce8\u610f, \u8fd9\u4e9b\u52a8\u4f5c(CPU)\u4e0d\u4f1a\u4e3b\u52a8\u53bb\u505a.. \u4f46\u51e1\u786c\u4ef6(CPU\u3001\u786c\u76d8\u3001\u7f51\u5361\u7b49)\u8981\u52a8\u8d77\u6765,\u90fd\u662fOS\u5728\u8c03\u5ea6!! \u8fdb\u7a0b\u7684\u521b\u5efa \u00b6 \u4e00\u5171\u67094\u79cd\u65b9\u5f0f,\u524d\u4e09\u79cd\u90fd \"\u4e0e\u6211\u65e0\u74dc\" ,\u7b2c4\u79cd\u624d\u662f\u6211\u4eec\u8981\u5173\u6ce8\u7684!! 1> \u7cfb\u7edf\u521d\u59cb\u5316\u65f6\u521b\u5efa\u7684\u8fdb\u7a0b 2> \u7528\u6237\u4ea4\u4e92\u5f0f\u7684\u8bf7\u6c42\u521b\u5efa\u7684\u8fdb\u7a0b eg:\u53cc\u51fbQQ\u8f6f\u4ef6 3> \u6279\u5904\u7406\u4f5c\u4e1a\u7684\u521d\u59cb\u5316 \u4e32\u884c\u6267\u884c\u7684 4> \u4e00\u4e2a\u8fdb\u7a0b\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u5f00\u542f\u4e86\u5b50\u8fdb\u7a0b (\u5176\u5b9e\u8fd9\u6837\u8868\u8ff0\u6709\u70b9\u91cd\u590d\u4e86,\u8bf4\u5230\u8fdb\u7a0b\u80af\u5b9a\u662f\u5728\u8fd0\u884c\u7684...\u54ac\u6587\u7235\u5b57Hhh) \u5e76\u53d1\u7f16\u7a0b\u91cc\u591a\u8fdb\u7a0b\u90e8\u5206\u7684\u7814\u7a76\u8981\u70b9\u5c31\u662f: \u4e00\u4e2a\u8fdb\u7a0b\u91cc\u5f00\u542f\u591a\u4e2a\u8fdb\u7a0b. \u5728\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u7236\u8fdb\u7a0b\u91cc\u5f00\u542f\u5b50\u8fdb\u7a0b\u662f\u4e3a\u4e86\u5c06\u539f\u672c\u5728\u7236\u8fdb\u7a0b\u91cc\u4e32\u884c\u6267\u884c\u7684\u4efb\u52a1\u62ff\u5230\u5b50\u8fdb\u7a0b\u91cc\u9762\u6267\u884c,\u4f7f\u7236\u8fdb\u7a0b\u91cc\u7684\u591a\u4e2a\u4efb\u52a1\u8fbe\u5230\u5e76\u53d1\u6267\u884c\u7684\u6548\u679c.. \u518d\u6b21\u91cd\u7533!\u8d77\u8fdb\u7a0b\u7684\u8bf7\u6c42\u662f\u7ed9OS\u7684.. OS\u5206\u4e3a\u4e86\u4e24\u6d3e,\u5b83\u4eec\u7684\u5904\u7406\u7565\u6709\u4e0d\u540c: \u53d1\u7ed9windows: \u8c03\u7528OS\u4e2d\u540d\u4e3a creatprocess \u7684\u63a5\u53e3 \u53d1\u7ed9linux: \u8c03\u7528OS\u4e2d\u540d\u4e3a fork \u7684\u63a5\u53e3 \u25b3 \u76f8\u540c\u70b9 -- \u6536\u5230\u5f00\u542f\u5b50\u8fdb\u7a0b\u7684\u8bf7\u6c42,\u90fd\u4f1a\u65b0\u5f00\u8f9f\u4e00\u5757\u7a7a\u95f4,\u653e\u8981\u6267\u884c\u4efb\u52a1\u7684\u4ee3\u7801,\u4e0d\u4ec5\u5982\u6b64,\u7236\u8fdb\u7a0b\u8fd8\u4f1acopy\u4e00\u4efd\u81ea\u4e2a\u513f\u7684namespace\u547d\u540d\u7a7a\u95f4\u653e\u5230\u5b50\u8fdb\u7a0b\u7684\u7a7a\u95f4\u91cc,\u5f53\u4f5c\u5b50\u8fdb\u7a0b\u8fd0\u884c\u65f6\u7684\u5168\u5c40\u53d8\u91cf.. \u25b3 \u4e0d\u540c\u70b9 -- \u7236\u8fdb\u7a0bcopy\u7684\u6570\u636e\u7565\u6709\u533a\u522b. \u5f71\u54cd\u4e0d\u5927! windows: \u5b50\u8fdb\u7a0b\u521d\u59cb\u72b6\u6001\u8ddf\u7236\u8fdb\u7a0b\u4e0d\u662f\u4e00\u6a21\u4e00\u6837\u7684, \u5b9e\u73b0\u8fdb\u7a0b\u76f8\u5173\u7684\u6570\u636e\u4e0d\u4e00\u6837. linux: \u5b50\u8fdb\u7a0b\u5185\u5b58\u7a7a\u95f4\u7684\u521d\u59cb\u72b6\u6001\u8ddf\u7236\u8fdb\u7a0b\u4e00\u6a21\u4e00\u6837!! \u6ce8\u610f\u4e00\u70b9,\u5b50\u8fdb\u7a0b\u4e0e\u7236\u8fdb\u7a0b\u4ece\u8fd0\u884c\u89d2\u5ea6\u6765\u770b\u662f\u4e24\u4e2a\u5b8c\u5168\u72ec\u7acb\u7684\u6267\u884c\u5355\u4f4d!! \u8fd9\u610f\u5473\u7740\u5b83\u4fe9\u7684\u7269\u7406\u5185\u5b58\u76f8\u4e92\u9694\u79bb,\u867d\u7136\u521d\u59cb\u72b6\u6001\u4e00\u6837(\u4e0d\u7528\u7ba1\u4ec0\u4e48OS\u5566,\u7b80\u5355\u8ba4\u4e3a\u5c31\u662f\u526f\u672c),\u4f46\u540e\u671f\u6267\u884c\u4ee3\u7801\u5bfc\u81f4\u7684\u6539\u52a8,\u4e92\u4e0d\u5f71\u54cd!! \u8fdb\u7a0b\u7684\u72b6\u6001 \u00b6 \u8fd0\u884c\u3001\u963b\u585e\u3001\u5c31\u7eea \u8be6\u89c1\u524d\u9762\u8ba1\u7b97\u673a\u57fa\u7840\u4e2d\u7684\u64cd\u4f5c\u7cfb\u7edf\u7ae0\u8282!! tail -f access.log |grep '404' \u6267\u884c\u7a0b\u5e8f tail \u5f00\u542f\u4e00\u4e2a\u5b50\u8fdb\u7a0b, \u6267\u884c\u7a0b\u5e8fgrep\u5f00\u542f\u53e6\u5916\u4e00\u4e2a\u5b50\u8fdb\u7a0b. \u4e24\u4e2a\u8fdb\u7a0b\u4e4b\u95f4\u57fa\u4e8e\u7ba1\u9053'|'\u901a\u8baf, \u5c06tail\u7684\u7ed3\u679c\u4f5c\u4e3agrep\u7684\u8f93\u5165. \u8fdb\u7a0bgrep\u5728\u7b49\u5f85\u8f93\u5165(\u5373I/O)\u65f6\u7684\u72b6\u6001\u79f0\u4e3a\u963b\u585e, \u6b64\u65f6grep\u547d\u4ee4\u90fd\u65e0\u6cd5\u8fd0\u884c!! Q : \u5982\u4f55\u63d0\u5347\u4efb\u52a1\u6267\u884c\u7684\u6548\u7387\u5462 \uff1f A : \u7406\u60f3\u60c5\u51b5 , cpu\u4e00\u76f4\u88ab\u6b64\u4efb\u52a1\u5360\u7528 , \u4efb\u52a1\u7684IO\u64cd\u4f5c\u5b8c\u6210\u540e , \u7acb\u9a6c\u80fd\u5f97\u5230CPU\u7684\u4f7f\u7528 . \u4f46\u8fd9\u662f\u4e0d\u73b0\u5b9e\u7684 , \u64cd\u4f5c\u7cfb\u7edf\u4e0d\u5141\u8bb8cpu\u8d44\u6e90\u8fd9\u6837\u6d6a\u8d39 .. \u6211\u4eec\u552f\u4e00\u80fd\u63a7\u5236\u7684\u5c31\u662f\u963b\u585e . \u6211\u4eec\u53ea\u80fd\u5728\u5199\u7a0b\u5e8f\u4ee5\u53ca\u90e8\u7f72\u96c6\u7fa4\u67b6\u6784\u7684\u8fc7\u7a0b\u4e2d\u51cf\u5c11\u4efb\u52a1\u5904\u4e8e\u963b\u585e\u6001\u7684\u65f6\u95f4 , \u589e\u52a0\u4efb\u52a1\u5904\u4e8e\u5c31\u7eea\u6001\u7684\u65f6\u95f4 ( \u4efb\u52a1\u5904\u4e8e\u963b\u585e\u6001 , \u7ed9\u5b83cpu , \u5b83\u4e5f\u4e0d\u4e2d\u7528\u554a ) \u8fd9\u6837\u7684\u8bdd , \u5904\u4e8e\u5c31\u7eea\u6001\u7684\u4efb\u52a1\u4e00\u65e6\u5f97\u5230cpu\u5c31\u4f1a\u76f4\u63a5\u5f00\u59cb\u8fd0\u884c .. \u4efb\u52a1\u6574\u4f53\u7684\u6267\u884c\u6548\u7387\u5c31\u63d0\u9ad8\u4e86 . Ps: py\u4e2d\u7684I/O\u64cd\u4f5c,\u6587\u4ef6\u5904\u7406\u4e2d\u7684open\u4e0d\u662f, write\u3001read\u7b49\u8bfb\u5199\u64cd\u4f5c\u662f!! time.sleep\u4e0d\u662f,\u4f46\u53ef\u4ee5\u6a21\u62dfI/O\u6548\u679c. \u8fdb\u7a0b\u5e76\u53d1\u7684\u5b9e\u73b0\u5728\u4e8e,\u786c\u4ef6\u4e2d\u65ad\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b, \u628a\u6b64\u65f6\u8fdb\u7a0b\u8fd0\u884c\u7684\u6240\u6709\u72b6\u6001\u4fdd\u5b58\u4e0b\u6765, \u4e3a\u6b64, \u64cd\u4f5c\u7cfb\u7edf\u7ef4\u62a4\u4e00\u5f20\u8868\u683c, \u5373\u8fdb\u7a0b\u8868 (process table) , \u6bcf\u4e2a\u8fdb\u7a0b\u5360\u7528\u4e00\u4e2a\u8fdb\u7a0b\u8868\u9879 (\u8fd9\u4e9b\u8868\u9879\u4e5f\u79f0\u4e3a\u8fdb\u7a0b\u63a7\u5236\u5757).. \u4e86\u89e3\u5373\u53ef..Hhhh [ \u8fdb\u7a0b\u7ba1\u7406 ] [ \u5b58\u50a8\u7ba1\u7406 ] [ \u6587\u4ef6\u7ba1\u7406 ] \u5bc4\u5b58\u5668 \u6b63\u6587\u6bb5\u6307\u9488 \u6839\u76ee\u5f55 \u7a0b\u5e8f\u8ba1\u6570\u5668 \u6570\u636e\u6bb5\u6307\u9488 \u5de5\u4f5c\u76ee\u5f55 \u7a0b\u5e8f\u72b6\u6001\u5b57 \u5806\u6808\u6307\u9488 \u6587\u4ef6\u63cf\u8ff0\u7b26 \u5806\u6808\u6307\u9488 \u7528\u6237ID \u8fdb\u7a0b\u72b6\u6001 \u7ec4ID \u4f18\u5148\u7ea7 \u8c03\u5ea6\u53c2\u6570 \u8fdb\u7a0bID \u7236\u8fdb\u7a0b \u8fdb\u7a0b\u7ec4 \u4fe1\u53f7 \u8fdb\u7a0b\u5f00\u59cb\u65f6\u95f4 \u4f7f\u7528\u7684CPU\u65f6\u95f4 \u5b50\u8fdb\u7a0b\u7684CPU\u65f6\u95f4 \u4e0b\u6b21\u62a5\u8b66\u65f6\u95f4 \u2606 \u8fdb\u7a0b\u7684\u540c\u6b65\\\u5f02\u6b65and\u963b\u585e\\\u975e\u963b\u585e \u5f88\u91cd\u8981. \u5728\u540e\u9762\u7684\u4ee3\u7801\u7f16\u7a0b\u8fc7\u7a0b\u4e2d\u4f1a\u9010\u4e00\u8fdb\u884c\u9610\u8ff0.(\u00b4\u25bd\uff40)","title":"\u8fdb\u7a0b\u7406\u8bba\u50a8\u5907"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/5_%E8%BF%9B%E7%A8%8B%E7%90%86%E8%AE%BA%E5%82%A8%E5%A4%87/#_1","text":"\u8be6\u89c1 \u524d\u9762\u8ba1\u7b97\u673a\u57fa\u7840\u4e2d\u7684\u64cd\u4f5c\u7cfb\u7edf\u7ae0\u8282.. \u60f3\u8981\u6df1\u5165\u4e86\u89e3\u7684\u8bdd,\u63a8\u8350\u770b\u300a\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u300b,\u524d\u4e09\u7ae0\u8db3\u77e3. \u53c2\u8003\u94fe\u63a5: https://www.cnblogs.com/linhaifeng/p/6295875.html OS\u662f\u4f4d\u4e8e\u8ba1\u7b97\u673a\u786c\u4ef6\u4e0e\u8f6f\u4ef6\u4e4b\u95f4\u7684\u63a7\u5236\u7a0b\u5e8f.","title":"\u64cd\u4f5c\u7cfb\u7edf"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/5_%E8%BF%9B%E7%A8%8B%E7%90%86%E8%AE%BA%E5%82%A8%E5%A4%87/#_2","text":"\u64cd\u4f5c\u7cfb\u7edf\u4f4d\u4e8e\u8ba1\u7b97\u673a\u786c\u4ef6\u4e0e\u8f6f\u4ef6\u4e4b\u95f4.. OS\u672c\u8eab\u4e5f\u662f\u4e00\u4e2a\u8f6f\u4ef6,\u5b83\u5e2e\u6211\u4eec\u63a7\u5236\u786c\u4ef6; \u5b83\u4f1a\u5c06\u786c\u76d8\u3001cpu\u7b49\u5982\u4f55\u8fd0\u4f5c\u7684\u590d\u6742\u64cd\u4f5c\u5c01\u88c5\u6210\u7b80\u5355\u7684\u63a5\u53e3\u7ed9\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528.. \u8d77\u5230\u4e00\u4e2a\u627f\u4e0a\u542f\u4e0b\u7684\u4f5c\u7528! \u7b2c\u4e00\u5927\u529f\u80fd: \u5c06\u786c\u4ef6\u7684\u590d\u6742\u64cd\u4f5c\u5c01\u88c5\u6210\u7b80\u5355\u7684\u529f\u80fd/\u63a5\u53e3,\u7ed9\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528.. \u6700\u5178\u578b\u7684\u4ee3\u8868: python\u4e2d\u64cd\u4f5c\u786c\u76d8\u7684\u6587\u4ef6\u5904\u7406\u7a0b\u5e8f!! \u7b2c\u4e8c\u5927\u529f\u80fd: \u5c06\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5bf9\u786c\u4ef6( cpu\u3001\u786c\u76d8\u3001\u7f51\u5361\u7b49 )\u7684\u4e89\u62a2\u53d8\u5f97\u6709\u5e8f\u5316.. \u5bf9\u65e0\u5e8f\u7684\u4e89\u62a2\u52a0\u4ee5\u9650\u5236!! \u7279\u522b\u63d0\u9192: OS\u7ba1\u7406\u7740\u8fd9\u4e00\u5957\u786c\u4ef6;OS\u80a9\u4e0a\u625b\u7740\u7684\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u662f\u5171\u4eab\u8fd9\u5957\u786c\u4ef6\u7684;OS\u51b3\u5b9a\u5b83\u4eec\u7ed9\u54ea\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7528.","title":"\u64cd\u4f5c\u7cfb\u7edf\u7684\u529f\u80fd"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/5_%E8%BF%9B%E7%A8%8B%E7%90%86%E8%AE%BA%E5%82%A8%E5%A4%87/#_3","text":"\u5148\u8bf4\u4e00\u5634,\u64cd\u4f5c\u7cfb\u7edf\u662f\u5982\u4f55\u4ece\u65e0\u5230\u6709\u53d1\u5c55\u5230\u4eca\u513f\u8fd9\u4e2a\u72b6\u6001\u7684\u8fc7\u7a0b\u5c31\u662f\u8fdb\u7a0b\u7684\u6f14\u53d8\u8fc7\u7a0b!! \u9898\u5916\u8bdd: \u4eba\u5de5\u667a\u80fd\u5c31\u662f\u4eba\u4e0d\u65ad\u53d1\u89c9\u81ea\u8eab\u7684\u8fc7\u7a0b.. Ps:\u4e0b\u8ff0\u7684\u64cd\u4f5c\u7cfb\u7edf\u53d1\u5c55\u53f2\u662f\u4ece\u4eba\u7c7b\u5f00\u59cb\u8fdb\u5165\u7535\u5b50\u65f6\u4ee3\u5f00\u59cb\u7684.. \u7535\u5b50\u65f6\u4ee3\u4e4b\u524d\u7684\u7b97\u76d8\u4e5f\u7b97\u8ba1\u7b97\u673aHhh. \u7b2c\u4e00\u4ee3:\u771f\u7a7a\u7ba1\u4e0e\u7a7f\u5b54\u5361\u7247 \u65e0\u7f16\u7a0b\u8bed\u8a00,\u65e0\u64cd\u4f5c\u7cfb\u7edf\u7684\u6982\u5ff5 \u4e32\u884c -- \u4e00\u4e2a\u4efb\u52a1 \"\u5b8c\u5b8c\u6574\u6574\u8fd0\u884c\u5b8c\u540e\" , \u624d\u80fd\u8fd0\u884c\u4e0b\u4e00\u4e2a\u4efb\u52a1!! \u7279\u522b\u5f3a\u8c03\u5b8c\u5b8c\u6574\u6574!! \u4efb\u52a1\u4e00\u4e2a\u4e2a\u7684\u8fd0\u884c\u4e0d\u53eb\u4e32\u884c.\u56e0\u4e3a\u591a\u9053\u6280\u672f\u57fa\u4e8e\u5355\u6838\u4e0b\u5b9e\u73b0\u7684\u5e76\u53d1,\u672c\u8d28\u4e0a\u4e5f\u662f\u4e00\u4e2a\u4e2a\u8fd0\u884c\u7684.. \u7b2c\u4e8c\u4ee3:\u6676\u4f53\u7ba1\u548c\u6279\u5904\u7406\u7cfb\u7edf \u6279\u5904\u7406\u7cfb\u7edf,\u6709\u8fdb\u7a0b\u90a3\u5473\u9053\u5728\u91cc\u9762\u5566! \u5c3d\u7ba1\u4f9d\u65e7\u662f\u4e32\u884c\u7684. \u7b2c\u4e09\u4ee3:\u96c6\u6210\u7535\u8def\u82af\u7247\u548c\u591a\u9053\u7a0b\u5e8f\u8bbe\u8ba1 \u5e76\u53d1 -- \u591a\u4e2a\u4efb\u52a1\u770b\u8d77\u6765\u662f\u540c\u65f6\u8fd0\u884c\u7684\u5373\u53ef. \u5355\u6838\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u5e76\u53d1!! \u5e76\u884c -- \u591a\u4e2a\u4efb\u52a1\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u540c\u65f6\u8fd0\u884c. \u53ea\u6709\u591a\u6838\u624d\u80fd\u5b9e\u73b0\u5e76\u884c!! \u63d0\u9192\u54c8,CPU\u662f\u7528\u6765\u8ba1\u7b97\u7684,CPU\u662f\u65e0\u6cd5\u6267\u884cIO\u64cd\u4f5c\u7684,\u4e00\u65e6\u9047\u5230IO\u64cd\u4f5c,OS\u5c31\u4f1a\u8ba9CPU\u53bb\u6267\u884c\u522b\u7684\u4efb\u52a1\u7684\u8ba1\u7b97. \u591a\u9053\u6280\u672f\u7684\u80cc\u666f: \u60f3\u8981\u5728\u5355\u6838\u4e0b\u5b9e\u73b0\u5e76\u53d1.(\u5355\u6838\u540c\u4e00\u65f6\u523b\u53ea\u80fd\u6267\u884c\u4e00\u4e2a\u4efb\u52a1) <\u4efb\u52a1\u5e76\u53d1\u5b9e\u73b0> -- \u5207\u6362 + \u4fdd\u5b58\u72b6\u6001 \u4fdd\u5b58\u72b6\u6001\u610f\u601d\u662f\u4fdd\u5b58\u5230\u5185\u5b58,\u6709\u90e8\u5206\u5173\u952e\u6570\u636e\u53ef\u4ee5\u4fdd\u5b58\u5230CPU\u7684\u5bc4\u5b58\u5668\u4e2d.","title":"\u64cd\u4f5c\u7cfb\u7edf\u7684\u53d1\u5c55\u53f2"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/5_%E8%BF%9B%E7%A8%8B%E7%90%86%E8%AE%BA%E5%82%A8%E5%A4%87/#_4","text":"\u591a\u9053\u6280\u672f\u6709\u4e24\u5927\u6838\u5fc3: \u7a7a\u95f4\u4e0a\u7684\u590d\u7528\u548c\u65f6\u95f4\u4e0a\u7684\u590d\u7528. \u7a7a\u95f4\u4e0a\u7684\u590d\u7528\u662f\u4e3a\u65f6\u95f4\u4e0a\u7684\u590d\u7528\u505a\u94fa\u57ab\u7684!! \u4e00\u5b9a\u8981\u660e\u786e,\u662f \"\u64cd\u4f5c\u7cfb\u7edf\" \u5728\u4f7f\u7528\u591a\u9053\u6280\u672f!! \u5c0f\u58f0BB: \u591a\u9053\u6280\u672f\u521a\u5f00\u59cb\u662f\u6ca1\u6709\u89e3\u51b3\u5185\u5b58\u7269\u7406\u5c42\u9762\u7684\u9694\u79bb\u7684,\u95ee\u9898\u89e3\u51b3\u540e,\u591a\u9053\u6280\u672f\u624d\u6295\u5165\u4e86\u4f7f\u7528.. \u7a7a\u95f4\u4e0a\u7684\u590d\u7528: \u591a\u4e2a \u4efb\u52a1/\u8fdb\u7a0b \u5171\u540c\u4e00\u4e2a\u5185\u5b58\u6761, \u4f46\u5360\u7528\u7684\u5185\u5b58\u662f \u76f8\u4e92\u9694\u79bb \u7684,\u5e76\u4e14\u662f\u7269\u7406\u5c42\u9762\u7684\u9694\u79bb!! \u65f6\u95f4\u4e0a\u7684\u590d\u7528: \u591a\u4e2a \u4efb\u52a1/\u8fdb\u7a0b \u590d\u7528\u540c\u4e00\u4e2acpu\u7684\u65f6\u95f4!! 1> CPU\u9047\u5230IO\u5207\u6362: \u53ef\u4ee5\u63d0\u9ad8\u6548\u7387! 2> \u4e00\u4e2a\u4efb\u52a1\u5360\u7528CPU\u65f6\u95f4\u8fc7\u957f\u4e5f\u4f1a\u5207\u8d70: \u4e3a\u4e86\u5b9e\u73b0\u5e76\u53d1\u6548\u679c\u4e0d\u5f97\u5df2\u800c\u4e3a\u4e4b,\u53cd\u800c\u4f1a\u964d\u4f4e\u7a0b\u5e8f\u7684\u6267\u884c\u6548\u7387. 3> \u4f18\u5148\u7ea7\u9ad8\u7684\u4efb\u52a1\u4e5f\u80fd\u62a2\u8d70CPU\u7684\u6267\u884c\u6743\u9650. CPU\u89d2\u5ea6 -- \u5728\u591a\u4e2a\u4efb\u52a1\u76f4\u63a5\u6765\u56de\u5feb\u901f\u5207\u6362. \u4efb\u52a1\u89d2\u5ea6 -- \u5728\u8fd9\u4e2a CPU\u65f6\u95f4\u7247 \u91cc\u5177\u6709\u5bf9CPU\u7684\u4f7f\u7528\u6743\u9650. Ps : \u6ca1\u6709\u8bf4\u591a\u6838cpu , \u90a3\u4e48\u63d0\u5230\u591a\u9053\u6280\u672f , \u5c31\u662f \u5355\u6838 + \u591a\u9053 \u5b9e\u73b0\u591a\u4e2a\u4efb\u52a1\u7684\u5e76\u53d1\u6267\u884c . Q1 : \u6709\u4e09\u4e2a\u4efb\u52a1A B C . \u5148\u4f9d\u6b21\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d . \u5b83\u4eec\u9700\u8981cpu\u8fd0\u7b97\u7684\u65f6\u95f4\u90fd\u662f1s , \u8fd0\u7b97\u5b8c\u540e\u4ea7\u751f\u7684\u6570\u636e\u9700\u8981\u653e\u5230\u786c\u76d8\u91cc , \u786c\u76d8IO\u65f6\u95f4\u90fd\u662f9s . \u4f7f\u7528\u591a\u9053\u6280\u672f , \u5b8c\u6210\u8fd93\u4e2a\u4efb\u52a1\u9700\u8981\u591a\u957f\u65f6\u95f4 ? ( Ps : cpu\u5728\u4e09\u4e2a\u4efb\u52a1\u4e4b\u95f4\u5207\u6362\u7684\u65f6\u95f4\u5ffd\u7565\u4e0d\u8ba1 ) A1 : 1 + 1 + 1 + 9 = 12 s . \u60f3\u901a\u5173\u952e\u7684\u4e00\u70b9\u5728\u4e8e , \u5728\u505a\u4efb\u52a1C\u7684IO\u65f6 , \u4efb\u52a1A\u548cB\u7684IO\u4e5f\u5728\u505a , \u5f53\u4efb\u52a1C\u7684IO\u505a\u5b8c\u65f6 , AB\u7684IO\u65e9\u5c31\u505a\u5b8c\u4e86 . Q2 : \u82e5\u4efb\u52a1ABC\u90fd\u53ea\u6709\u8fd0\u7b97\u65f6\u95f410s , \u90fd\u6ca1\u6709IO . \u8fd9\u79cd\u60c5\u51b5\u4e0b , \u5e76\u53d1\u771f\u7684\u6bd4\u4e32\u884c\u6548\u7387\u9ad8\u5417 ? A2 : \u4e32\u884c30s , \u5e76\u884c\u662f\u5927\u4e8e30s\u7684 , \u56e0\u4e3a\u8fd8\u8981\u8003\u8651cpu\u5207\u6362\u8fdb\u7a0b\u7684\u65f6\u95f4 .. \u5373cpu\u5728\u6ca1\u6709\u9047\u5230IO\u7684\u60c5\u51b5\u4e0b\u5207\u6362 , \u4e0d\u4f1a\u5207\u6362\u6548\u7387 , \u53cd\u800c\u4f1a\u964d\u4f4e\u6548\u7387 .. \u4f46\u771f\u5b9e\u60c5\u51b5\u4e0b , \u8fd8\u662f\u5f97\u5207 , \u56e0\u4e3a\u5f97\u5b9e\u73b0\u5e76\u53d1 , \u4e0d\u80fd\u8ba9CPU\u88ab\u5355\u4e2a\u4efb\u52a1\u6346\u7ed1\u8fc7\u957f\u7684\u65f6\u95f4 . Q3 : \u82e5CPU\u6709\u56db\u4e2a\u6838 , OS\u5e94\u7528\u591a\u9053\u6280\u672f , 5 \u4e2a\u4efb\u52a1\u57284\u4e2a\u6838ABCD\u4e0a\u6765\u56de\u5207\u6362\u7684\u8fc7\u7a0b\u662f\u600e\u6837\u7684 ? A3 : 5 \u4e2a\u4efb\u52a1 \u2460\u2461\u2462\u2463\u2464 \u4ea4\u7ed9OS\u8fdb\u884c\u8c03\u5ea6 . 1 > 4 \u4e2a\u6838 , \u6bcf\u4e2a\u6838\u90fd\u5148\u63a5\u4e00\u4e2a\u4efb\u52a1 . A : \u2460 B : \u2461 C : \u2462 D : \u2463 \u2464 \u5728\u4e00\u65c1\u7b49\u7740 2 > \u4efb\u52a1 \u2460 \u9047\u5230\u4e86IO , \u88ab\u6838A\u8e22\u5230\u4e00\u65c1\u5f85\u7740 . A : \u2464 B : \u2461 C : \u2462 D : \u2463 \u2460 \u5728\u4e00\u65c1\u5904\u7406IO 3 > \u4efb\u52a1 \u2460 \u7684IO\u5904\u7406\u5b8c\u6bd5\u4e86 , \u4efb\u52a1 \u2462 \u9047\u5230\u4e86IO , \u88ab\u6838A\u8e22\u5230\u4e00\u65c1\u5f85\u7740 . A : \u2464 B : \u2461 C : \u2460 D : \u2463 \u2462 \u5728\u4e00\u65c1\u5904\u7406IO 4 > \u4ee5\u6b64\u7c7b\u63a8 .","title":"\u591a\u9053\u6280\u672f"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/5_%E8%BF%9B%E7%A8%8B%E7%90%86%E8%AE%BA%E5%82%A8%E5%A4%87/#_5","text":"\u8fdb\u7a0b\u8d77\u6e90\u4e8e\u64cd\u4f5c\u7cfb\u7edf,\u662f\u64cd\u4f5c\u7cfb\u7edf\u6700\u6700\u6838\u5fc3\u7684\u6982\u5ff5,\u6ca1\u6709\u4e4b\u4e00. \u64cd\u4f5c\u7cfb\u7edf\u6240\u6709\u5176\u5b83\u6982\u5ff5\u90fd\u662f\u56f4\u7ed5\u7740\u8fdb\u7a0b\u5c55\u5f00\u7684!! \u7279\u522b\u63d0\u9192: \u4e0a\u65b9\u64cd\u4f5c\u7cfb\u7edf\u5c0f\u8282\u4e2d\u63d0\u5230\u7684\u4efb\u52a1\u90fd\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u4e2a\u8fdb\u7a0b!!","title":"\u8fdb\u7a0b"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/5_%E8%BF%9B%E7%A8%8B%E7%90%86%E8%AE%BA%E5%82%A8%E5%A4%87/#_6","text":"\u8fdb\u7a0b\u6307\u7684\u662f\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u7a0b\u5e8f,\u6216\u8005\u662f\u7a0b\u5e8f\u7684\u8fd0\u884c\u8fc7\u7a0b. \u786c\u76d8\u91cc\u8eba\u7740\u7684\u90a3\u5806\u4ee3\u7801\u53eb\u505a\u7a0b\u5e8f, \u7a0b\u5e8f\u4ee3\u7801\u4ece\u786c\u76d8\u52a0\u8f7d\u5230\u5185\u5b58,CPU\u518d\u53d6\u7a0b\u5e8f\u7684\u4ee3\u7801\u6267\u884c,\u8fd9\u4e00\u8fc7\u7a0b\u53eb\u505a\u8fdb\u7a0b. \u8fdb\u7a0b\u4e0d\u662f\u771f\u5b9e\u5b58\u5728\u7684,\u5b83\u662f\u4e00\u7cfb\u5217\u52a8\u4f5c\u7684\u603b\u548c, \u662f\u4e00\u4e2a\u62bd\u8c61\u7684\u6982\u5ff5! eg: \u505a\u86cb\u7cd5,(CPU)\u9700\u8981\u5148\u9605\u8bfb\u98df\u8c31(\u6307\u4ee4),\u53d6\u5404\u79cd\u539f\u6750\u6599(\u8f93\u5165\u6570\u636e)\u7b49.. Ps: \u7279\u522b\u6ce8\u610f, \u8fd9\u4e9b\u52a8\u4f5c(CPU)\u4e0d\u4f1a\u4e3b\u52a8\u53bb\u505a.. \u4f46\u51e1\u786c\u4ef6(CPU\u3001\u786c\u76d8\u3001\u7f51\u5361\u7b49)\u8981\u52a8\u8d77\u6765,\u90fd\u662fOS\u5728\u8c03\u5ea6!!","title":"\u6982\u5ff5"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/5_%E8%BF%9B%E7%A8%8B%E7%90%86%E8%AE%BA%E5%82%A8%E5%A4%87/#_7","text":"\u4e00\u5171\u67094\u79cd\u65b9\u5f0f,\u524d\u4e09\u79cd\u90fd \"\u4e0e\u6211\u65e0\u74dc\" ,\u7b2c4\u79cd\u624d\u662f\u6211\u4eec\u8981\u5173\u6ce8\u7684!! 1> \u7cfb\u7edf\u521d\u59cb\u5316\u65f6\u521b\u5efa\u7684\u8fdb\u7a0b 2> \u7528\u6237\u4ea4\u4e92\u5f0f\u7684\u8bf7\u6c42\u521b\u5efa\u7684\u8fdb\u7a0b eg:\u53cc\u51fbQQ\u8f6f\u4ef6 3> \u6279\u5904\u7406\u4f5c\u4e1a\u7684\u521d\u59cb\u5316 \u4e32\u884c\u6267\u884c\u7684 4> \u4e00\u4e2a\u8fdb\u7a0b\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u5f00\u542f\u4e86\u5b50\u8fdb\u7a0b (\u5176\u5b9e\u8fd9\u6837\u8868\u8ff0\u6709\u70b9\u91cd\u590d\u4e86,\u8bf4\u5230\u8fdb\u7a0b\u80af\u5b9a\u662f\u5728\u8fd0\u884c\u7684...\u54ac\u6587\u7235\u5b57Hhh) \u5e76\u53d1\u7f16\u7a0b\u91cc\u591a\u8fdb\u7a0b\u90e8\u5206\u7684\u7814\u7a76\u8981\u70b9\u5c31\u662f: \u4e00\u4e2a\u8fdb\u7a0b\u91cc\u5f00\u542f\u591a\u4e2a\u8fdb\u7a0b. \u5728\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u7236\u8fdb\u7a0b\u91cc\u5f00\u542f\u5b50\u8fdb\u7a0b\u662f\u4e3a\u4e86\u5c06\u539f\u672c\u5728\u7236\u8fdb\u7a0b\u91cc\u4e32\u884c\u6267\u884c\u7684\u4efb\u52a1\u62ff\u5230\u5b50\u8fdb\u7a0b\u91cc\u9762\u6267\u884c,\u4f7f\u7236\u8fdb\u7a0b\u91cc\u7684\u591a\u4e2a\u4efb\u52a1\u8fbe\u5230\u5e76\u53d1\u6267\u884c\u7684\u6548\u679c.. \u518d\u6b21\u91cd\u7533!\u8d77\u8fdb\u7a0b\u7684\u8bf7\u6c42\u662f\u7ed9OS\u7684.. OS\u5206\u4e3a\u4e86\u4e24\u6d3e,\u5b83\u4eec\u7684\u5904\u7406\u7565\u6709\u4e0d\u540c: \u53d1\u7ed9windows: \u8c03\u7528OS\u4e2d\u540d\u4e3a creatprocess \u7684\u63a5\u53e3 \u53d1\u7ed9linux: \u8c03\u7528OS\u4e2d\u540d\u4e3a fork \u7684\u63a5\u53e3 \u25b3 \u76f8\u540c\u70b9 -- \u6536\u5230\u5f00\u542f\u5b50\u8fdb\u7a0b\u7684\u8bf7\u6c42,\u90fd\u4f1a\u65b0\u5f00\u8f9f\u4e00\u5757\u7a7a\u95f4,\u653e\u8981\u6267\u884c\u4efb\u52a1\u7684\u4ee3\u7801,\u4e0d\u4ec5\u5982\u6b64,\u7236\u8fdb\u7a0b\u8fd8\u4f1acopy\u4e00\u4efd\u81ea\u4e2a\u513f\u7684namespace\u547d\u540d\u7a7a\u95f4\u653e\u5230\u5b50\u8fdb\u7a0b\u7684\u7a7a\u95f4\u91cc,\u5f53\u4f5c\u5b50\u8fdb\u7a0b\u8fd0\u884c\u65f6\u7684\u5168\u5c40\u53d8\u91cf.. \u25b3 \u4e0d\u540c\u70b9 -- \u7236\u8fdb\u7a0bcopy\u7684\u6570\u636e\u7565\u6709\u533a\u522b. \u5f71\u54cd\u4e0d\u5927! windows: \u5b50\u8fdb\u7a0b\u521d\u59cb\u72b6\u6001\u8ddf\u7236\u8fdb\u7a0b\u4e0d\u662f\u4e00\u6a21\u4e00\u6837\u7684, \u5b9e\u73b0\u8fdb\u7a0b\u76f8\u5173\u7684\u6570\u636e\u4e0d\u4e00\u6837. linux: \u5b50\u8fdb\u7a0b\u5185\u5b58\u7a7a\u95f4\u7684\u521d\u59cb\u72b6\u6001\u8ddf\u7236\u8fdb\u7a0b\u4e00\u6a21\u4e00\u6837!! \u6ce8\u610f\u4e00\u70b9,\u5b50\u8fdb\u7a0b\u4e0e\u7236\u8fdb\u7a0b\u4ece\u8fd0\u884c\u89d2\u5ea6\u6765\u770b\u662f\u4e24\u4e2a\u5b8c\u5168\u72ec\u7acb\u7684\u6267\u884c\u5355\u4f4d!! \u8fd9\u610f\u5473\u7740\u5b83\u4fe9\u7684\u7269\u7406\u5185\u5b58\u76f8\u4e92\u9694\u79bb,\u867d\u7136\u521d\u59cb\u72b6\u6001\u4e00\u6837(\u4e0d\u7528\u7ba1\u4ec0\u4e48OS\u5566,\u7b80\u5355\u8ba4\u4e3a\u5c31\u662f\u526f\u672c),\u4f46\u540e\u671f\u6267\u884c\u4ee3\u7801\u5bfc\u81f4\u7684\u6539\u52a8,\u4e92\u4e0d\u5f71\u54cd!!","title":"\u8fdb\u7a0b\u7684\u521b\u5efa"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/5_%E8%BF%9B%E7%A8%8B%E7%90%86%E8%AE%BA%E5%82%A8%E5%A4%87/#_8","text":"\u8fd0\u884c\u3001\u963b\u585e\u3001\u5c31\u7eea \u8be6\u89c1\u524d\u9762\u8ba1\u7b97\u673a\u57fa\u7840\u4e2d\u7684\u64cd\u4f5c\u7cfb\u7edf\u7ae0\u8282!! tail -f access.log |grep '404' \u6267\u884c\u7a0b\u5e8f tail \u5f00\u542f\u4e00\u4e2a\u5b50\u8fdb\u7a0b, \u6267\u884c\u7a0b\u5e8fgrep\u5f00\u542f\u53e6\u5916\u4e00\u4e2a\u5b50\u8fdb\u7a0b. \u4e24\u4e2a\u8fdb\u7a0b\u4e4b\u95f4\u57fa\u4e8e\u7ba1\u9053'|'\u901a\u8baf, \u5c06tail\u7684\u7ed3\u679c\u4f5c\u4e3agrep\u7684\u8f93\u5165. \u8fdb\u7a0bgrep\u5728\u7b49\u5f85\u8f93\u5165(\u5373I/O)\u65f6\u7684\u72b6\u6001\u79f0\u4e3a\u963b\u585e, \u6b64\u65f6grep\u547d\u4ee4\u90fd\u65e0\u6cd5\u8fd0\u884c!! Q : \u5982\u4f55\u63d0\u5347\u4efb\u52a1\u6267\u884c\u7684\u6548\u7387\u5462 \uff1f A : \u7406\u60f3\u60c5\u51b5 , cpu\u4e00\u76f4\u88ab\u6b64\u4efb\u52a1\u5360\u7528 , \u4efb\u52a1\u7684IO\u64cd\u4f5c\u5b8c\u6210\u540e , \u7acb\u9a6c\u80fd\u5f97\u5230CPU\u7684\u4f7f\u7528 . \u4f46\u8fd9\u662f\u4e0d\u73b0\u5b9e\u7684 , \u64cd\u4f5c\u7cfb\u7edf\u4e0d\u5141\u8bb8cpu\u8d44\u6e90\u8fd9\u6837\u6d6a\u8d39 .. \u6211\u4eec\u552f\u4e00\u80fd\u63a7\u5236\u7684\u5c31\u662f\u963b\u585e . \u6211\u4eec\u53ea\u80fd\u5728\u5199\u7a0b\u5e8f\u4ee5\u53ca\u90e8\u7f72\u96c6\u7fa4\u67b6\u6784\u7684\u8fc7\u7a0b\u4e2d\u51cf\u5c11\u4efb\u52a1\u5904\u4e8e\u963b\u585e\u6001\u7684\u65f6\u95f4 , \u589e\u52a0\u4efb\u52a1\u5904\u4e8e\u5c31\u7eea\u6001\u7684\u65f6\u95f4 ( \u4efb\u52a1\u5904\u4e8e\u963b\u585e\u6001 , \u7ed9\u5b83cpu , \u5b83\u4e5f\u4e0d\u4e2d\u7528\u554a ) \u8fd9\u6837\u7684\u8bdd , \u5904\u4e8e\u5c31\u7eea\u6001\u7684\u4efb\u52a1\u4e00\u65e6\u5f97\u5230cpu\u5c31\u4f1a\u76f4\u63a5\u5f00\u59cb\u8fd0\u884c .. \u4efb\u52a1\u6574\u4f53\u7684\u6267\u884c\u6548\u7387\u5c31\u63d0\u9ad8\u4e86 . Ps: py\u4e2d\u7684I/O\u64cd\u4f5c,\u6587\u4ef6\u5904\u7406\u4e2d\u7684open\u4e0d\u662f, write\u3001read\u7b49\u8bfb\u5199\u64cd\u4f5c\u662f!! time.sleep\u4e0d\u662f,\u4f46\u53ef\u4ee5\u6a21\u62dfI/O\u6548\u679c. \u8fdb\u7a0b\u5e76\u53d1\u7684\u5b9e\u73b0\u5728\u4e8e,\u786c\u4ef6\u4e2d\u65ad\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b, \u628a\u6b64\u65f6\u8fdb\u7a0b\u8fd0\u884c\u7684\u6240\u6709\u72b6\u6001\u4fdd\u5b58\u4e0b\u6765, \u4e3a\u6b64, \u64cd\u4f5c\u7cfb\u7edf\u7ef4\u62a4\u4e00\u5f20\u8868\u683c, \u5373\u8fdb\u7a0b\u8868 (process table) , \u6bcf\u4e2a\u8fdb\u7a0b\u5360\u7528\u4e00\u4e2a\u8fdb\u7a0b\u8868\u9879 (\u8fd9\u4e9b\u8868\u9879\u4e5f\u79f0\u4e3a\u8fdb\u7a0b\u63a7\u5236\u5757).. \u4e86\u89e3\u5373\u53ef..Hhhh [ \u8fdb\u7a0b\u7ba1\u7406 ] [ \u5b58\u50a8\u7ba1\u7406 ] [ \u6587\u4ef6\u7ba1\u7406 ] \u5bc4\u5b58\u5668 \u6b63\u6587\u6bb5\u6307\u9488 \u6839\u76ee\u5f55 \u7a0b\u5e8f\u8ba1\u6570\u5668 \u6570\u636e\u6bb5\u6307\u9488 \u5de5\u4f5c\u76ee\u5f55 \u7a0b\u5e8f\u72b6\u6001\u5b57 \u5806\u6808\u6307\u9488 \u6587\u4ef6\u63cf\u8ff0\u7b26 \u5806\u6808\u6307\u9488 \u7528\u6237ID \u8fdb\u7a0b\u72b6\u6001 \u7ec4ID \u4f18\u5148\u7ea7 \u8c03\u5ea6\u53c2\u6570 \u8fdb\u7a0bID \u7236\u8fdb\u7a0b \u8fdb\u7a0b\u7ec4 \u4fe1\u53f7 \u8fdb\u7a0b\u5f00\u59cb\u65f6\u95f4 \u4f7f\u7528\u7684CPU\u65f6\u95f4 \u5b50\u8fdb\u7a0b\u7684CPU\u65f6\u95f4 \u4e0b\u6b21\u62a5\u8b66\u65f6\u95f4 \u2606 \u8fdb\u7a0b\u7684\u540c\u6b65\\\u5f02\u6b65and\u963b\u585e\\\u975e\u963b\u585e \u5f88\u91cd\u8981. \u5728\u540e\u9762\u7684\u4ee3\u7801\u7f16\u7a0b\u8fc7\u7a0b\u4e2d\u4f1a\u9010\u4e00\u8fdb\u884c\u9610\u8ff0.(\u00b4\u25bd\uff40)","title":"\u8fdb\u7a0b\u7684\u72b6\u6001"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/6_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%94%A8/","text":"\u53c2\u8003\u94fe\u63a5: https://www.cnblogs.com/linhaifeng/articles/7428874.html \u5f00\u542f\u5b50\u8fdb\u7a0b\u7684\u4e24\u79cd\u65b9\u5f0f \u00b6 \u5f00\u542f\u5b50\u8fdb\u7a0b\u7684\u76ee\u7684: \u60f3\u628a\u7236\u8fdb\u7a0b\u91cc\u4e32\u884c\u6267\u884c\u7684\u4efb\u52a1(eg,\u4e00\u6bb5\u51fd\u6570\u4ee3\u7801)\u5206\u7ed9\u72ec\u7acb\u7684\u8fdb\u7a0b\u53bb\u6267\u884c,\u4ece\u800c\u5b9e\u73b0\u4efb\u52a1\u7684\u5e76\u53d1\u6267\u884c! Process\u7c7b\u5b9e\u4f8b\u5316 \u00b6 \u6211\u4eec\u901a\u5e38\u4f7f\u7528\u7684\u5c31\u662f\u8fd9\u4e00\u79cd!! \u5b9e\u73b0\u4ee3\u7801 \u00b6 # -- a.py import time from multiprocessing import Process def task ( x ): print ( f \" { x } is running.\" ) time . sleep ( 3 ) print ( f \" { x } is done.\" ) if __name__ == '__main__' : # -- \u53c2\u6570\u8bf4\u660e: # group\u4e0d\u7528\u7ba1;target\u662f\u6211\u4eec\u7684\u4efb\u52a1/\u5b50\u8fdb\u7a0b;name\u5b50\u8fdb\u7a0b\u7684\u540d\u5b57,\u4e0d\u4f20\u4f1a\u6709\u4e2a\u9ed8\u8ba4\u503c; # \u7ed9\u6211\u4eec\u7684\u4efb\u52a1\u4f20\u53c2,\u6709\u4e24\u79cd\u5f62\u5f0f,args\"\u5143\u7ec4,\u6309\u4f4d\u7f6e\u4f20 \u6ce8\u610f\u5143\u7ec4\u91cc\u7684\u9017\u53f7\"\u3001kwargs\"\u5b57\u5178\"\u4efb\u9009\u5176\u4e00\u5373\u53ef # Process(target=task, kwargs={'x': '\u5b50\u8fdb\u7a0b'}) p = Process ( target = task , args = ( '\u5b50\u8fdb\u7a0b' ,)) # -- \u8c03\u7528\u7c7b\u5b9e\u4f8b\u5316\u4e00\u4e2a\u5bf9\u8c61p # -- \u53ea\u662f\u5728\u5411\u64cd\u4f5c\u7cfb\u7edf\u53d1\u9001\u4e00\u4e2a\u5f00\u542fp\u5bf9\u8c61\u5bf9\u5e94\u4efb\u52a1/\u5b50\u8fdb\u7a0b\u7684\u4fe1\u53f7,\u8be5\u884c\u4ee3\u7801\u8fd0\u884c\u4f1a\u975e\u5e38\u975e\u5e38\u7684\u5feb. # \u4fe1\u53f7\u53d1\u5b8c\u540e,\u8fd9\u4e2a\u5b50\u8fdb\u7a0b\u4ec0\u4e48\u65f6\u5019\u9020,\u9020\u591a\u957f\u65f6\u95f4,\u8fd0\u884c\u591a\u4e45,OS\u8bf4\u7684\u7b97,\u5e94\u7528\u7a0b\u5e8f\u662f\u7ba1\u4e0d\u4e86\u7684!! p . start () # time.sleep(5) # -- \u53ef\u4ee5\u5b9e\u9a8c\u4e0b,\u8fd0\u884c\u8be5\u4ee3\u7801,\"\u4e3b\"\u4f1a\u6700\u540e\u6253\u5370.\u8bc1\u660e\u7b49\u5f85\u76845s\u7684\u65f6\u95f4\u91cc\u5b50\u8fdb\u7a0b\u9020\u51fa\u6765\u5566! print ( \"\u4e3b\" ) \"\"\" # -- \u5c4f\u5e55\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b: \u4e3b \u5b50\u8fdb\u7a0b is running. \u5b50\u8fdb\u7a0b is done. \"\"\" \u6267\u884c\u8fc7\u7a0b \u00b6 \u5728\u8fd9\u91cc,a.py\u6587\u4ef6\u4e2dtask\u51fd\u6570\u4f53\u7684\u4ee3\u7801\u5f52\u5b50\u8fdb\u7a0b\u6267\u884c; \u5176\u5b83\u4ee3\u7801\u5f52\u7236\u8fdb\u7a0b\u6267\u884c!! [\u7236\u8fdb\u7a0b\u7684\u542f\u52a8] pychram\u91cc\u663e\u793a\u7684a.py\u6587\u4ef6\u4ee3\u7801\u5728\u786c\u76d8\u91cc\u653e\u7740\u5462,\u53f3\u952e\u70b9\u51fb\u8fd0\u884c,OS\u63a5\u6536\u6307\u4ee4,\u5148\u5f00\u8f9f\u4e00\u4e2a\u5185\u5b58\u7a7a\u95f4; \u63a5\u7740,OS\u5c06a.py\u6587\u4ef6\u7684\u4ee3\u7801\u4ece\u786c\u76d8\u8bfb\u5165\u5f00\u8f9f\u7684\u7a7a\u95f4,OS\u518d\u8c03\u7528CPU\u6267\u884c\u4ee3\u7801.. \u8be5a.py\u6587\u4ef6\u5c31\u8fd0\u884c\u8d77\u6765\u5566!! \u5c06\u8fd9\u4e00\u4e2a\u8fc7\u7a0b\u8fdb\u884c\u62bd\u8c61,\u62bd\u8c61\u7684\u7ed3\u679c\u5c31\u53eb\u505a\u8fdb\u7a0b!! [\u5b50\u8fdb\u7a0b\u7684\u542f\u52a8] \u6267\u884ca.py\u6587\u4ef6\u91cc\u7684 p.start() \u4ee3\u7801, \u7236\u8fdb\u7a0b\u4f1a\u7ed9OS\u53d1\u4fe1\u53f7, \u544a\u77e5\u5b83\u9700\u8981\u542f\u52a8\u4e00\u4e2a\u5b50\u8fdb\u7a0b! \u6ce8\u610f:\u4fe1\u53f7\u53d1\u5b8c\u540e,\u8fd9\u884c\u4ee3\u7801\u7236\u8fdb\u7a0b\u5c31\u6267\u884c\u5b8c\u6bd5\u4e86!! OS\u4f1a\u7533\u8bf7\u65b0\u7684\u5185\u5b58\u7a7a\u95f4\u653e\u5b50\u8fdb\u7a0b\u7684\u4ee3\u7801,\u8fd8\u4f1a\u62f7\u8d1d\u4e00\u4efd\u7236\u8fdb\u7a0b\u7684namespace\u653e\u8fdb\u53bb. \u5373\u7236\u8fdb\u7a0b\u7684\u6240\u6709\u8d44\u6e90\u90fd\u4f1a\u88ab\u5b50\u8fdb\u7a0b\u7ee7\u627f,\u5305\u62ec\u8fd0\u884c\u7236\u8fdb\u7a0b\u7684\u8fdb\u7a0b,\u5982pycharm.exe/cmd.exe!! \u6ce8\u610f : \u5b50\u8fdb\u7a0b\u53ea\u4f1a\u5c06 a.py \u4e2d if __name__ == '__main__': \u4e4b\u4e0a\u7684\u4ee3\u7801\u901a\u8fc7 \u5bfc\u5165\u7684\u65b9\u5f0f \u62f7\u8d1d\u4e00\u4efd.. OS\u542d\u54e7\u542d\u54e7\u9020\u5b50\u8fdb\u7a0b\u7684\u8fc7\u7a0b\u4e2d,\u7236\u8fdb\u7a0b\u4e5f\u5728\u8fd0\u884c.. \u5b50\u8fdb\u7a0b\u9020\u5b8c\u540e,\u7236\u5b50\u8fdb\u7a0b\u5e76\u53d1\u6267\u884c. \u7236\u8fdb\u884c\u8fd0\u884c\u6700\u540e\u4e00\u884c\u6253\u5370 print(\"\u4e3b\") \u7684\u65f6\u5019, \u5b50\u8fdb\u7a0b\u8fd8\u6ca1\u6709\u9020\u5b8c\u5462.. \u6240\u4ee5\u4f1a\u770b\u5230\u7ec8\u7aef\u5148\u6253\u5370\u7684\"\u4e3b\"... \u63d0\u9192\u4e00\u54c8,\u7236\u8fdb\u7a0b\u4e0e\u5b50\u8fdb\u7a0b\u5171\u7528\u7684\u540c\u4e00\u4e2a\u8f93\u51fa\u7ec8\u7aef.. \u6ce8\u610f\u4e8b\u9879 \u00b6 \u5f00\u542f\u5b50\u8fdb\u7a0b\u7684\u64cd\u4f5c p.start() \u5e94\u8be5\u5199\u5230 if __name__ == '__main__': \u4e0b\u9762!! \u8fd9\u6837\u4f7f\u5f97\u8be5\u64cd\u4f5c\u5728\u5bfc\u5165\u8be5\u64cd\u4f5c\u6240\u5728\u6a21\u5757\u65f6\u4e0d\u88ab\u8fd0\u884c. \u5373\u8fd9\u4e2aif\u8bed\u53e5\u4e2d\u7684\u8bed\u53e5\u5c06\u4e0d\u4f1a\u5728\u5bfc\u5165\u65f6\u88ab\u8c03\u7528!!! \u5177\u4f53\u6765\u8bf4, \u5728windows\u4e0a,\u5f00\u542f\u5b50\u8fdb\u7a0b\u65f6,\u5b50\u8fdb\u7a0b\u62f7\u8d1d\u7236\u8fdb\u7a0b\u7a7a\u95f4\u7684\u65b9\u5f0f\u6bd4\u8f83\u7279\u6b8a. \u5b83\u4f1a\u5c06\u7236\u8fdb\u7a0b\u5bf9\u5e94\u7684\u6587\u4ef6\u5f53\u4f5c\u6a21\u5757\u91cd\u65b0\u5bfc\u4e00\u904d, \u5c06\u5bfc\u5165\u7684\u6210\u679c\u653e\u5230\u5b50\u8fdb\u7a0b\u81ea\u5df1\u7684\u5185\u5b58\u91cc.. \u6211\u4eec\u6653\u5f97, \u6267\u884c\u6587\u4ef6\u4e0d\u7b49\u4e8e\u5bfc\u5165\u6587\u4ef6 ; \u5bfc\u5165\u6a21\u5757\u4f1a\u8fd0\u884c\u6587\u4ef6\u3001\u4ea7\u751fnamespace\u3001\u4e22\u5165\u4e00\u5806\u6570\u636e. \u610f\u5473\u7740,\u4e00\u65e6\u6267\u884c\u4ee3\u7801 p.start() \u5f00\u542f\u5b50\u8fdb\u7a0b, \u8be5\u4ee3\u7801\u53c8\u5c06\u88ab\u6267\u884c\u4e00\u904d,\u65e0\u9650\u5957\u5a03/\u65e0\u9650\u5f00\u542f\u5b50\u8fdb\u7a0b!! Ps: \u6211\u8bd5\u4e86\u4e0b,\u5728mac\u4e0a\u4e5f\u9700\u8981\u653e\u5230\u90a3\u4e0b\u9762,centos\u5219\u4e0d\u7528..Hhh \u4e3a\u4e86\u517c\u5bb9\u6027,\u8fd8\u662f\u5f97\u653e. \u7ee7\u627fProcess\u7c7b \u00b6 \u81ea\u5b9a\u4e49\u7684\u7c7b\u4e00\u5b9a\u8981\u7ee7\u627fProcess, \u5e76\u4e14\u81ea\u5b9a\u4e49\u7c7b\u91cc\u4e00\u5b9a\u8981\u6709\u4e00\u4e2a\u540d\u4e3a run \u7684\u7ed1\u5b9a\u65b9\u6cd5!! \u6572\u9ed1\u677f! \u628a\u5b50\u8fdb\u7a0b\u5f00\u542f\u540e\u9700\u8981\u6267\u884c\u7684\u4ee3\u7801\u653e\u5230\u7ed1\u5b9a\u65b9\u6cd5run\u91cc!!! \u5b9e\u73b0\u4ee3\u7801 \u00b6 import time from multiprocessing import Process class Myprocess ( Process ): def __init__ ( self , x ): super () . __init__ () self . x = x def run ( self ): print ( f \" { self . x } is running.\" ) time . sleep ( 3 ) print ( f \" { self . x } is done.\" ) if __name__ == '__main__' : p = Myprocess ( '\u5b50\u8fdb\u7a0b' ) p . start () # -- \u5185\u90e8\u5c31\u662f\u5728\u8c03\u7528run\u65b9\u6cd5! \u4f60\u95ee\u4e3a\u5565?\u90a3\u5c31\u9700\u8981\u770b\u6e90\u7801\u7684\u8c03\u7528\u5173\u7cfb\u4e86. print ( \"\u4e3b\" ) \u4e0e\u7b2c\u4e00\u79cd\u65b9\u5f0f\u7684\u533a\u522b \u00b6 \u76f4\u63a5\u4f7f\u7528\u9ed8\u8ba4\u7684Process\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u8c03\u7528start\u521b\u5efa\u5b50\u8fdb\u7a0b, \u662f\u901a\u7528\u7684\u9020\u8fdb\u7a0b\u7684\u65b9\u5f0f !! \u53ef\u4ee5\u9020\u4e0d\u540c\u7684\u5b50\u8fdb\u7a0b\u6267\u884c\u4e0d\u540c\u7684\u4efb\u52a1, \u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u65f6\u6307\u5b9a\u4e0d\u540c\u7684target\u53c2\u6570\u503c\u5c31\u53ef\u4ee5\u5566!! p1 = Process ( target = task1 , args = ( '\u5b50\u8fdb\u7a0b1' ,)) p2 = Process ( target = task2 , args = ( '\u5b50\u8fdb\u7a0b2' ,)) p3 = Process ( target = task3 , args = ( '\u5b50\u8fdb\u7a0b3' ,)) p1 . start () p2 . start () p3 . start () \u800c\u81ea\u5b9a\u4e49\u7c7b\u7ee7\u627fProcess\u7684\u65b9\u5f0f,\u76f8\u5f53\u4e8e\u53ea\u80fd\u9020\u4e00\u4e2a\u7279\u5b9a\u7684\u5b50\u8fdb\u7a0b.. (Because\u53ea\u80fd\u6267\u884crun\u51fd\u6570..) \u50f5\u5c38\u8fdb\u7a0b\u4e0e\u5b64\u513f\u8fdb\u7a0b \u00b6 \u8be6\u89c1 \u524d\u9762linux\u57fa\u7840\u4e2d\"\u7ba1\u7406\u8fdb\u7a0b\"\u7ae0\u8282\u76f8\u5173\u7684\u5185\u5bb9.. \u629b\u51fa\u95ee\u9898 \u00b6 \u601d\u8003\u4e00\u4e2a\u95ee\u9898: \u5728\u521b\u5efa\u5b50\u8fdb\u7a0b\u7684\u7b2c\u4e00\u79cd\u65b9\u5f0f \"Process\u7c7b\u5b9e\u4f8b\u5316\" \u4e2d,\u7236\u8fdb\u7a0b\u5728\u81ea\u5df1\u4ee3\u7801\u6267\u884c\u5b8c\u540e,\u5e76\u4e0d\u4f1a\u7acb\u9a6c\u7ed3\u675f\u6389, \u4f1a\u7b49\u5230\u6240\u6709\u5b50\u8fdb\u7a0b\u7ed3\u675f\u540e ,\u624d\u4f1a\u7ed3\u675f,\u4e3a\u4ec0\u4e48\u5462? # -- a.py import os import time from multiprocessing import Process def task ( x , n ): print ( f \" { x } is running.\" ) time . sleep ( n ) print ( f \" { x } is done.\" ) if __name__ == '__main__' : p1 = Process ( target = task , args = ( '\u5b50\u8fdb\u7a0b1' , 3 )) p2 = Process ( target = task , args = ( '\u5b50\u8fdb\u7a0b2' , 5 )) p1 . start () # -- \u518d\u6b21\u5f3a\u8c03!\u4fe1\u53f7\u53d1\u5b8c\u540e,\u8fd9\u884c\u4ee3\u7801\u7236\u8fdb\u7a0b\u5c31\u6267\u884c\u5b8c\u6bd5\u4e86!! p2 . start () # -- \u518d\u6b21\u5f3a\u8c03!\u4fe1\u53f7\u53d1\u5b8c\u540e,\u8fd9\u884c\u4ee3\u7801\u7236\u8fdb\u7a0b\u5c31\u6267\u884c\u5b8c\u6bd5\u4e86!! print ( p1 . pid , p2 . pid , os . getpid ()) print ( \"\u4e3b\" ) time . sleep ( 50 ) \"\"\" 21233 21234 21231 \u4e3b \u5b50\u8fdb\u7a0b2 is running. \u5b50\u8fdb\u7a0b1 is running. \u5b50\u8fdb\u7a0b1 is done. \u5b50\u8fdb\u7a0b2 is done. \"\"\" \u5728a.py\u7a0b\u5e8f\u8fd0\u884c5-50s\u7684\u65f6\u95f4\u6bb5,\u5728cmd\u7ec8\u7aef\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4.. \u53ef\u4ee5\u770b\u5230z\u72b6\u6001!! z\u4e3a\u50f5\u5c38\u8fdb\u7a0b\u7684\u6807\u8bc6!!! \u7406\u8bba\u9610\u8ff0 \u00b6 \u82e5\u73b0\u5728\u6709\u4e00\u4e2a\u7236\u8fdb\u7a0b\u548c\u4e24\u4e2a\u5b50\u8fdb\u7a0b(p1\u548cp2). [\u6b63\u5e38\u60c5\u51b5,\u7236\u8fdb\u7a0b\u7b49\u7740\u6240\u6709\u5b50\u8fdb\u7a0b\u8fd0\u884c\u5b8c\u540e\u518d\u7ed3\u675f] -- \u50f5\u5c38\u8fdb\u7a0b \u9996\u5148\u8981\u77e5\u9053,\u4ece\u8fd0\u884c\u89d2\u5ea6\u6765\u770b,\u8fd9\u91cc\u7684\u7236\u8fdb\u7a0b\u548c\u4e24\u4e2a\u5b50\u8fdb\u7a0b\u662f\u5b8c\u5168\u72ec\u7acb\u4e0d\u76f8\u5e72\u76843\u4e2a\u8fdb\u7a0b.\u5f7c\u6b64\u9694\u79bb\u7684. \u7236\u8fdb\u7a0b\u65e0\u6cd5\u9884\u77e5\u5b50\u8fdb\u7a0b\u4ec0\u4e48\u65f6\u5019\u7ed3\u675f,\u4e3a\u4e86\u4fdd\u8bc1\u5728\u7236\u8fdb\u7a0b\u5728\u6d3b\u7740\u7684\u65f6\u5019,\u53ef\u4ee5\u968f\u65f6\u67e5\u770b\u4e09\u4e2a\u5b50\u8fdb\u7a0b\u7684\u72b6\u6001. \u8bbe\u7f6e\u4e86\u50f5\u5c38\u8fdb\u7a0b\u8fd9\u79cd\u72ec\u7279\u7684\u6570\u636e\u7ed3\u6784. \u50f5\u5c38\u8fdb\u7a0b \u662f\u6307 \u5b50\u8fdb\u7a0b\u5728\u8fd0\u884c\u5b8c\u6bd5\u4ee5\u540e ,OS\u4f1a\u5c06\u5b50\u8fdb\u7a0b\u5360\u7528\u7684\u91cd\u578b\u8d44\u6e90\u90fd\u91ca\u653e\u6389 (eg:\u5173\u95ed\u5df2\u6253\u5f00\u7684\u6587\u4ef6,\u820d\u5f03\u5df2\u5360\u7528\u7684cpu\u3001\u5185\u5b58\u3001\u4ea4\u6362\u7a7a\u95f4\u7b49) , \u4f46 \u662f\u4f1a\u4fdd\u7559\u90e8\u5206\u5b50\u8fdb\u7a0b\u7684\u5173\u952e\u72b6\u6001\u4fe1\u606f (eg: PID \u3001\u9000\u51fa\u72b6\u6001\u3001\u5df2\u8fd0\u884c\u65f6\u95f4\u7b49) \u7236\u8fdb\u7a0b\u628a\u81ea\u5df1\u6d3b\u5e72\u5b8c\u540e,\u6ca1\u6709\u7acb\u523b\u7ed3\u675f,\u662f\u4e3a\u4e86\u7b49\u7740\u7ed9\u5b50\u8fdb\u7a0b\u6536\u5c38, \u5373\u6240\u6709\u7684\u5b50\u8fdb\u7a0b\u8fdb\u5165\u50f5\u5c38\u72b6\u6001\u540e,\u7236\u8fdb\u7a0b\u4f1a\u7edf\u4e00\u53d1\u8d77\u56de\u6536\u64cd\u4f5c. \u5177\u4f53\u6765\u8bf4,\u4f1a\u7531\u7236\u8fdb\u7a0b\u53d1\u8d77\u4e00\u4e2a \u7cfb\u7edf\u8c03\u7528 wait / waitpid\u6765\u901a\u77e5linux\u64cd\u4f5c\u7cfb\u7edf\u6765\u6e05\u7406\u8fd9\u4e9b\u50f5\u5c38\u8fdb\u7a0b. \u6240\u6709\u7684\u5b50\u8fdb\u7a0b\u7ed3\u675f\u540e\u90fd\u4f1a\u8fdb\u5165\u50f5\u5c38\u8fdb\u7a0b\u7684\u72b6\u6001!! \u901a\u5e38\u6211\u4eec\u4e0d\u4f1a\u7b49\u7236\u8fdb\u7a0b\u7ed3\u675f\u65f6\u81ea\u52a8\u56de\u6536,\u4f1a\u4f7f\u7528join\u63d0\u524d\u56de\u6536\u8fd9\u4e2a\u50f5\u5c38\u8fdb\u7a0b.. [\u5b50\u8fdb\u7a0b\u8fd8\u672a\u8fd0\u884c\u5b8c,\u7236\u8fdb\u7a0b\u5148\u55dd\u5c41\u4e86] -- \u5b64\u513f\u8fdb\u7a0b \u82e5\u7236\u8fdb\u7a0b\u5148\u6b7b\u6389, \u4e0d\u4f1a\u5f71\u54cd\u5b50\u8fdb\u7a0b\u7684\u8fd0\u884c, \u4f46\u8fd8\u672a\u8fd0\u884c\u5b8c\u7684\u5b50\u8fdb\u7a0b\u5c06\u4f1a\u6210\u4e3a \u5b64\u513f\u8fdb\u7a0b .. \u5b64\u513f\u8fdb\u7a0b\u5c06\u88abPID\u4e3a1\u7684 \u9876\u7ea7\u8fdb\u7a0binit/systemd (\u5176PID\u4e3a0,\u662f\u6240\u6709\u8fdb\u7a0b\u7684\u7956\u5b97,linux\u7684\u8fdb\u7a0b\u662f\u4e00\u4e2a\u6811\u5f62\u7ed3\u6784) \u6240\u6536\u517b,\u5e76\u7531\u8be5\u9876\u7ea7\u8fdb\u7a0b\u5bf9\u5b83\u4eec\u5b8c\u6210\u72b6\u6001\u6536\u96c6\u5de5\u4f5c.. \u901a\u4fd7\u6765\u8bf4,\u7236\u8fdb\u7a0b\u6b7b\u7684\u65f6\u5019,\u5426\u7ba1\u5b83\u7684\u5b50\u8fdb\u7a0b\u662f\u5904\u4e8e\u50f5\u5c38\u72b6\u6001\u8fd8\u662f\u5b64\u513f\u72b6\u6001,\u53ea\u8981\u7236\u8fdb\u7a0b\u4e0d\u7b49\u6240\u6709\u5b50\u8fdb\u7a0b\u7ed3\u675f\u5c31\u55dd\u5c41,\u8fd9\u4e9b\u5b50\u8fdb\u7a0b\u90fd\u5c06\u88ab\u9876\u7ea7\u8fdb\u7a0binit/systemd\u6258\u7ba1!! \u7236\u8fdb\u7a0b\u6b7b\u4e4b\u524d,\u5df2\u7ecf\u7ed3\u675f\u53d8\u6210\u50f5\u5c38\u8fdb\u7a0b\u7684\u5b50\u8fdb\u7a0b\u5728\u7236\u8fdb\u7a0b\u6b7b\u540e\u4f1a\u88abinit\u56de\u6536;\u7236\u8fdb\u7a0b\u6b7b\u540e,\u8fd8\u672a\u8fd0\u884c\u5b8c\u7684\u8fdb\u7a0b\u662f\u5b64\u513f\u8fdb\u7a0b,\u8fd0\u884c\u5b8c\u540e\u4f1a\u53d8\u6210\u50f5\u5c38\u72b6\u6001\u7684\u5b64\u513f\u8fdb\u7a0b,\u4e5f\u5c06\u88abinit\u56de\u6536!! [\u6ce8\u610f\u4e8b\u9879] \u5b64\u513f\u8fdb\u7a0b\u6ca1\u6709\u5bb3,\u662f\u56e0\u4e3a\u6709\u4eba\u7ba1\u5b83;\u6b63\u5e38\u60c5\u51b5\u4e0b,\u5b50\u8fdb\u7a0b\u6b7b\u540e\u4f1a\u88ab\u7236\u8fdb\u7a0b\u53d1\u8d77\u7cfb\u7edf\u8c03\u7528\u56de\u6536.\u4e5f\u6ca1\u6709\u5bb3. \u574f\u5c31\u574f\u5728\u7236\u8fdb\u7a0b\u4e00\u76f4\u4e0d\u6b7b,\u4e0d\u505c\u7684\u5728\u5f00\u5b50\u8fdb\u7a0b,\u8fd8\u4e0d\u53d1\u8d77\u56de\u6536\u50f5\u5c38\u8fdb\u7a0b\u7684\u4fe1\u53f7.\u90a3\u4e48\u4fdd\u7559\u7684\u4fe1\u606f\u5c31\u5f97\u4e0d\u5230\u91ca\u653e. \u50f5\u5c38\u8fdb\u7a0b\u8d8a\u79ef\u8d8a\u591a,\u5360\u7528\u8fc7\u591a\u7684PID\u53f7,\u65b0\u7684\u8f6f\u4ef6\u5c31\u542f\u52a8\u4e0d\u8d77\u6765! (PID\u662f\u6709\u9650\u7684!!) \u89e3\u51b3\u65b9\u6848: kill\u6389\u7236\u8fdb\u7a0b,\u7236\u8fdb\u7a0b\u5728\u4e16\u65f6\u4ea7\u751f\u7684\u50f5\u6b7b\u8fdb\u7a0b\u5c31\u4f1a\u53d8\u6210\u4e86\u5904\u4e8e\u50f5\u6b7b\u72b6\u6001\u7684\u5b64\u513f\u8fdb\u7a0b..\u8fd8\u672a\u8fd0\u884c\u5b8c\u7684\u5b50\u8fdb\u7a0b\u4f1a\u53d8\u6210\u5b64\u513f\u8fdb\u7a0b,\u5728\u8fd0\u884c\u5b8c\u540e\u4e5f\u4f1a\u8fdb\u5165\u50f5\u6b7b\u72b6\u6001.. \u8fd9\u4e9b\u5b64\u513f\u8fdb\u7a0b\u90fd\u4f1a\u88abinit\u8fdb\u7a0b\u63a5\u7ba1... egon\u8bed\u5f55:\u4e0d\u61c2\u5f00\u53d1\u7684\u8fd0\u7ef4\u5c31\u662f\u79cb\u540e\u7684\u8682\u86b1,\u8e66\u8df6\u4e0d\u4e86\u51e0\u5929.Hhh \u8fdb\u7a0b\u5185\u5b58\u7a7a\u95f4\u5f7c\u6b64\u9694\u79bb \u00b6 \u9a8c\u8bc1\u5b50\u8fdb\u7a0b\u4e0e\u7236\u8fdb\u7a0b\u5185\u5b58\u7a7a\u95f4\u4e4b\u95f4\u662f\u9694\u79bb\u7684! (\u901a\u8fc7\u524d\u9762\u591a\u9053\u6280\u672f\u7684\u8bb2\u89e3\u6211\u4eec\u5f97\u77e5\u8fd9\u9694\u79bb\u8fd8\u662f\u7269\u7406\u9694\u79bb\u7684) \u63d0\u9192\u4e00\u4e0b, \u8bf4\u7684\u662f\u5185\u5b58\u7a7a\u95f4\u5f7c\u6b64\u9694\u79bb,\u786c\u76d8\u7a7a\u95f4\u662f\u5171\u4eab\u7684. import time from multiprocessing import Process x = 100 def task (): # -- \u5b50\u8fdb\u7a0b\u5728\u5f00\u542f\u65f6\u4f1a\u62ff\u5230\u548c\u7236\u8fdb\u7a0b\u6709\u4e00\u6837\u7684\u53d8\u91cfx\u548ctask (\u5b9a\u4e49\u51fd\u6570\u548c\u5b9a\u4e49\u53d8\u91cf\u662f\u4e00\u56de\u4e8b) # \u6240\u4ee5\u5b50\u8fdb\u7a0b\u5728\u542f\u52a8\u8d77\u6765\u540e\u80fd\u8bbf\u95ee\u5f97\u5230task! global x \u58f0\u660e\u7684\u5168\u5c40\u53d8\u91cfx\u662f\u4ee5\u5b50\u8fdb\u7a0b\u81ea\u5df1\u7684\u4e3a\u51c6! # \u56e0\u800c\u5b50\u8fdb\u7a0b\u6539\u7684\u5168\u5c40\u53d8\u91cf\u662f\u5b50\u8fdb\u7a0b\u91cc\u7684\u5168\u5c40\u53d8\u91cf,\u4e0d\u4f1a\u5f71\u54cd\u5230\u7236\u8fdb\u7a0b!! global x x = 0 print ( \"\u5b50\u8fdb\u7a0b\u5df2\u7ecf\u8fd0\u884c\u5b8c\u6bd5!\" ) if __name__ == '__main__' : p = Process ( target = task ) p . start () # -- \u53d1\u4fe1\u53f7 time . sleep ( 3 ) # -- \u77613\u79d2,\u8ba9\u7236\u8fdb\u7a0b\u5728\u539f\u5730\u7b49\u5f853\u79d2,\u662f\u4e0d\u60f3\u8ba9\u7236\u8fdb\u7a0b\u7acb\u523b\u8fd0\u884c`print(x)`\u8fd9\u884c\u4ee3\u7801. # \u786e\u4fddOS\u628a\u5b50\u8fdb\u7a0b\u5f00\u542f\u5e76\u6267\u884c\u5b8c.\u624d\u4f1a\u8ba9\u7236\u8fdb\u7a0b\u8fd0\u884c`print(x)`\u8fd9\u884c\u4ee3\u7801. print ( x ) # 100 -- \u7236\u8fdb\u7a0b\u91cc\u7684x\u4ecd\u4e3a100,\u8bc1\u660e\u6ca1\u6709\u88ab\u5b50\u8fdb\u7a0b\u5f71\u54cd\u5230!! \"\"\" \u5b50\u8fdb\u7a0b\u5df2\u7ecf\u8fd0\u884c\u5b8c\u6bd5! 100 \"\"\" \u601d\u8003: time.sleep(3) 3\u79d2\u65f6\u95f4\u80fd\u4fdd\u8bc1\u5b50\u8fdb\u7a0b\u8fd0\u884c\u5b8c\u5417?\u4f46\u51e1\u5b50\u8fdb\u7a0b\u4ee3\u7801\u591a\u70b9, \u6211\u4eec\u538b\u6839\u4e0d\u77e5\u9053\u5b50\u8fdb\u7a0b\u4f1a\u8fd0\u884c\u591a\u4e45!\u628a\u65f6\u95f4\u6539\u6210300\u79d2? crazy. \u5408\u7406\u60c5\u51b5\u4e0b,\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u63a5\u53e3\u7b49\u5230\u5b50\u8fdb\u7a0b\u7ed3\u675f\u5c31\u4e0d\u7528\u518d\u7b49\u4e86. \u4f7f\u7528 p.join() !!! \u8fdb\u7a0b\u5bf9\u8c61\u7684\u65b9\u6cd5\u548c\u5c5e\u6027 \u00b6 \u4e0a\u9762\u5df2\u7ecf\u63a5\u89e6\u4e86Process\u7c7b\u7684start\u65b9\u6cd5.. \u4e0b\u9762\u4ecb\u7ecd\u4e0bProcess\u7c7b\u7684\u5176\u5b83\u65b9\u6cd5!! start()\u3001join()\u662f\u5fc5\u987b\u638c\u63e1\u7684!! \u5176\u4f59\u7684\u4e86\u89e3\u5373\u53ef! join\u65b9\u6cd5!! \u00b6 p.join() \u672c\u8d28\u8ddf time.sleep(n) \u4e00\u6837, \u4f46\u65f6\u95f4\u66f4\u7cbe\u51c6, \u4e0d\u7528\u6211\u4eec\u81ea\u5df1\u63a7\u5236! \u5b9e\u73b0\u4ee3\u7801 \u00b6 time.sleep() \u8ba9\u7236\u8fdb\u7a0b\u539f\u5730\u7b49\u5f85,\u7b49\u5f85500s\u540e,\u624d\u6267\u884c\u4e0b\u4e00\u884c\u4ee3\u7801. p.join() \u8ba9\u7236\u8fdb\u7a0b\u539f\u5730\u7b49\u5f85,\u4e0d\u5f71\u54cd\u5b50\u8fdb\u7a0b\u7684\u8fd0\u884c, \u7b49\u5230\u5b50\u8fdb\u7a0b\u5f7b\u5f7b\u5e95\u5e95\u7684\u8fd0\u884c\u5b8c\u6bd5, \u4f1a\u56de\u6536\u5b50\u8fdb\u7a0b(\u786e\u5207\u70b9\u5e94\u79f0\u4f5c\u50f5\u5c38\u8fdb\u7a0b)\u5360\u7528\u7684pid\u7b49\u8d44\u6e90.. \u518d\u6267\u884c\u4e0b\u4e00\u884c\u4ee3\u7801. import time from multiprocessing import Process def task ( x ): print ( f \" { x } is running!\" ) time . sleep ( 2 ) print ( f \" { x } is done!\" ) if __name__ == '__main__' : p = Process ( target = task , args = ( '\u5b50\u8fdb\u7a0b1' ,)) p . start () # time.sleep(500) p . join () print ( \"\u4e3b\" ) \"\"\" \u5b50\u8fdb\u7a0b1 is running! \u5b50\u8fdb\u7a0b1 is done! \u4e3b \"\"\" \u2605\u5b98\u65b9\u6587\u6863\u6709\u5982\u4e0b\u7684\u8bf4\u660e!! join\u65b9\u6cd5\u5bf9\u5e94\u7684\u6e90\u7801\u91cc\u9762\u6709\u4e00\u884c\u4ee3\u7801\u8d77\u5230\u4e86\u53d1\u8d77\u7cfb\u7edf\u8c03\u7528 wait / waitpid \u7684\u4f5c\u7528 !! \u4e3e\u4e00\u53cd\u4e09 \u00b6 \u6838\u5fc3\u8981\u70b9: \u662f\u7236\u8fdb\u7a0b\u5728\u7b49,\u4e0d\u4f1a\u5f71\u54cd\u5b50\u8fdb\u7a0b\u7684\u8fd0\u884c!! p1\u3001p2\u3001p3\u4e09\u4e2a\u5b50\u8fdb\u7a0b\u662f\u5e76\u53d1\u6267\u884c\u7684!! \u4e09\u4e2ajoin\u662f\u5728\u4e09\u4e2astart\u4fe1\u53f7\u53d1\u51fa\u53bb\u540e\u518d\u6267\u884c\u7684\u64cd\u4f5c! import time from multiprocessing import Process def task ( x , n ): print ( f \" { x } is running!\" ) time . sleep ( n ) print ( f \" { x } is done!\" ) if __name__ == '__main__' : p1 = Process ( target = task , args = ( '\u5b50\u8fdb\u7a0b1' , 5 )) p2 = Process ( target = task , args = ( '\u5b50\u8fdb\u7a0b2' , 2 )) p3 = Process ( target = task , args = ( '\u5b50\u8fdb\u7a0b3' , 6 )) start_time = time . time () # -- \u4f9d\u6b21\u53d1\u90013\u4e2a\u4fe1\u53f7,\u53d1\u9001\u5b8c\u4fe1\u53f7\u540e,\u5bf9\u5e94\u5b50\u8fdb\u7a0b\u5c31\u5f00\u59cb\u6267\u884c p1 . start () p2 . start () p3 . start () # -- \u3010\u2605look here!\u3011\u867d\u7136\u7236\u8fdb\u7a0b\u7684\u4e09\u4e2ajoin\u4ee3\u7801\u662f\u4f9d\u6b21\u6267\u884c\u7684,\u4f46\u5b50\u8fdb\u7a0b\u7684\u8fd0\u884c\u5b9e\u5219\u662f\u5e76\u884c\u7684!! # \u662f\u56e0\u4e3a\u7236\u8fdb\u7a0b\u5728\u7b49\u7684\u65f6\u5019,\u9020\u8fd9\u4e09\u4e2a\u5b50\u8fdb\u7a0b\u7684\u4fe1\u53f7start\u65e9\u5c31\u53d1\u7ed9OS\u5566. # \u8fdb\u7a0b\u53ea\u8981start\u5c31\u4f1a\u5728\u5f00\u59cb\u8fd0\u884c\u4e86,\u6240\u4ee5p1-p3.start()\u65f6,\u7cfb\u7edf\u4e2d\u5df2\u7ecf\u6709\u56db\u4e2a(\u4e00\u7236\u4e09\u5b50)\u5e76\u53d1\u7684\u8fdb\u7a0b\u4e86 # -- \u7236\u8fdb\u7a0b\u7b49p1\u7528\u4e865s,\u4f46\u5728\u7b49\u7684\u8fc7\u7a0b\u4e2dp2,p3\u4e5f\u5728\u8fd0\u884c # \u8fd0\u884cp2.join()\u65f6,p1,p2\u5df2\u7ecf\u6267\u884c\u5b8c\u4e86(p2\u53ea\u9700\u89812s),\u5c31\u4e0d\u7528\u7b49\u4e86 \u5373\u8be5\u884c\u4ee3\u7801\u6ca1\u6709\u4efb\u4f55\u7684\u963b\u585e # \u8fd0\u884cp3.join()\u65f6,p3\u5df2\u7ecf\u6267\u884c\u4e865s,\u8fd8\u9700\u6267\u884c1s # \u2605 So,\u6362\u4e00\u6362p1\u3001p2\u3001p3 join\u7684\u987a\u5e8f,\u8c01\u5148\u8c01\u540e\u90fd\u4e00\u6837!\u5171\u8fd0\u884c\u7684\u65f6\u95f4\u662f\u4e00\u6837\u7684!! # \u2605 3\u4e2ajoin\u82b1\u8d39\u7684\u603b\u65f6\u95f4\u4ecd\u7136\u662f\u8017\u8d39\u65f6\u95f4\u6700\u957f\u7684\u90a3\u4e2a\u5b50\u8fdb\u7a0b\u8fd0\u884c\u7684\u65f6\u95f4 print ( \"\u7b49p1\u7ed3\u675f..\" ) p1 . join () print ( \"\u7b49p2\u7ed3\u675f..\" ) p2 . join () print ( \"\u7b49p3\u7ed3\u675f..\" ) p3 . join () end_time = time . time () print ( \"\u5171\u8fd0\u884c:\" , end_time - start_time ) \"\"\" \u7b49p1\u7ed3\u675f.. \u5b50\u8fdb\u7a0b1 is running! \u5b50\u8fdb\u7a0b2 is running! \u5b50\u8fdb\u7a0b3 is running! \u5b50\u8fdb\u7a0b2 is done! \u5b50\u8fdb\u7a0b1 is done! \u7b49p2\u7ed3\u675f.. \u7b49p3\u7ed3\u675f.. \u5b50\u8fdb\u7a0b3 is done! \u5171\u8fd0\u884c: 6.1702961921691895 # -- 6s\u591a\u4e00\u70b9,\u591a\u7684\u8fd9\u4e00\u70b9\u662fOS\u521b\u5efa\u8fdb\u7a0b\u4ee5\u53ca\u5207\u6362\u8fdb\u7a0b\u7684\u65f6\u95f4 \"\"\" \u871c\u6c41\u64cd\u4f5c: \u5982\u679c\u5206\u8981\u628ap1\u3001p2\u3001p3\u4e09\u4e2a\u5b50\u8fdb\u7a0b\u53d8\u6210\u4e32\u884c\u5462\uff1f (\u81ea\u5df1\u53ef\u4ee5\u8fd9\u6837\u73a9, \u5199\u7a0b\u5e8f\u8fd9\u4e48\u5199,\u7eaf\u7eaf\u7684\u778e\u641e! \u5b50\u8fdb\u7a0b\u4e32\u884c,\u8fd8\u4e0d\u5982\u4f9d\u6b21\u6267\u884c\u4e09\u4e2a\u51fd\u6570\u8282\u7701\u8fdb\u7a0b\u7684\u5f00\u9500.Hhh) start_time = time . time () p1 . start () print ( \"\u7b49p1\u7ed3\u675f..\" ) p1 . join () p2 . start () print ( \"\u7b49p2\u7ed3\u675f..\" ) p2 . join () p3 . start () print ( \"\u7b49p3\u7ed3\u675f..\" ) p3 . join () end_time = time . time () print ( \"\u5171\u8fd0\u884c:\" , end_time - start_time ) # -- \u60f3\u63d0\u9192\u4e00\u70b9\u7684\u662f,\u7236\u8fdb\u7a0b\u6267\u884c`p1.start()`\u8bed\u53e5.OS\u5c31\u5f00\u59cb\u7740\u624b\u4e8e\u521b\u5efa\u8fdb\u7a0bp1\u5e76\u5f00\u59cb\u6267\u884c. # \u7236\u8fdb\u7a0b\u53d1\u5b8c\u4fe1\u53f7\u540e,\u63a5\u7740\u4f1a\u6267\u884c`print(\"\u7b49p1\u7ed3\u675f..\")`\u8bed\u53e5 # \u7ec8\u7aef\u5c4f\u5e55\u4e0a\u5148\u6253\u5370\"\u7b49p1\u7ed3\u675f..\",\u518d\u6253\u5370\"\u5b50\u8fdb\u7a0b1 is running!\" # \u662f\u56e0\u4e3a\u7236\u8fdb\u7a0b\u4e0e\u5b50\u8fdb\u7a0bp1\u662f\u5e76\u53d1\u6267\u884c\u7684!!!\u770b\u8c01\u5148\u6267\u884c\u7f62\u4e86. \"\"\" \u7b49p1\u7ed3\u675f.. \u5b50\u8fdb\u7a0b1 is running! \u5b50\u8fdb\u7a0b1 is done! \u7b49p2\u7ed3\u675f.. \u5b50\u8fdb\u7a0b2 is running! \u5b50\u8fdb\u7a0b2 is done! \u7b49p3\u7ed3\u675f.. \u5b50\u8fdb\u7a0b3 is running! \u5b50\u8fdb\u7a0b3 is done! \u5171\u8fd0\u884c: 13.303465843200684 \"\"\" \u4ee3\u7801\u4f18\u5316 \u00b6 import time from multiprocessing import Process def task ( x , n ): print ( f \" { x } is running!\" ) time . sleep ( n ) print ( f \" { x } is done!\" ) if __name__ == '__main__' : # p1 = Process(target=task, args=('\u5b50\u8fdb\u7a0b1', 1)) # p2 = Process(target=task, args=('\u5b50\u8fdb\u7a0b2', 2)) # p3 = Process(target=task, args=('\u5b50\u8fdb\u7a0b3', 3)) # p1.start() # p2.start() # p3.start() p_list = [] # -- \u91cc\u9762\u653e\u7684\u662f\u4e09\u4e2a\u8fdb\u7a0b\u5bf9\u8c61 for i in range ( 1 , 4 ): p = Process ( target = task , args = ( f '\u5b50\u8fdb\u7a0b { i } ' , i )) p_list . append ( p ) # -- \u6ce8\u610f:\u968f\u7740\u5faa\u73af,p\u53d8\u91cf\u7684\u6307\u5411\u662f\u6700\u540e\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u7684\u5185\u5b58\u5730\u5740 # \u6240\u4ee5\u5f97\u5c06\u8fdb\u7a0b\u5bf9\u8c61\u653e\u5165\u5217\u8868\u8fdb\u884c\u4fdd\u5b58 p . start () # -- \u5faa\u73af\u4e09\u6b21\u53d1\u9001\u4e09\u4e2a\u4fe1\u53f7 # p1.start() # p2.start() # p3.start() for p in p_list : p . join () pid\u5c5e\u6027 \u00b6 pid -- \u8fdb\u7a0bid\u53f7,\u5373\u8fdb\u7a0b\u5728\u64cd\u4f5c\u7cfb\u7edf\u5185\u7684\u8eab\u4efd\u8bc1\u53f7,\u72ec\u4e00\u65e0\u4e8c\u7684 paid -- \u5f53\u524d\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\u7684pid.. \u5b50\u8fdb\u7a0b\u662fpy\u8fdb\u7a0b \u00b6 import time from multiprocessing import Process def task ( x , n ): print ( f \" { x } is running!\" ) time . sleep ( n ) print ( f \" { x } is done!\" ) if __name__ == '__main__' : p1 = Process ( target = task , args = ( '\u5b50\u8fdb\u7a0b1' , 10 )) # print(p1.pid) # None -- \u5b50\u8fdb\u7a0b\u8fd8\u6ca1\u5f00\u59cb\u521b\u5efa\u5462,\u5f53\u7136\u6ca1\u6709 p1 . start () print ( p1 . pid ) # -- 18689 print ( \"\u4e3b\" ) \u6211\u4eec\u5728\u4e0a\u8ff0\u4ee3\u7801\u4e2d,\u5c06\u5b50\u8fdb\u7a0b\u6267\u884c\u65f6\u95f4\u8bbe\u7f6e\u4e3a10s. \u4fdd\u8bc1\u5b50\u8fdb\u7a0b\u8fd8\u5728\u6267\u884c\u65f6, \u5728cmd\u4e2d\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4. windows: tasklist | findstr 18689 linux: ps aux | grep 18689 | grep -v grep # -- Mac\u4e0b\u663e\u793a\u7ed3\u679c One_Piece@DC\u7684MacBook ~ % ps aux | grep 18689 | grep -v grep One_Piece ... ... ... /Library/Frameworks/Python.framework/Versions/3.8.../Python -c from multiprocessing.spawn... # -- windows\u4e0b\u663e\u793a\u7ed3\u679c C: > tasklist | findstr 18689 python.exe 10524 Console 1 12 ,792k Ps: mac\u4e0a\u663e\u793a\u7684\u7ed3\u679c..\u4e0d\u662f\u5f88\u901a\u4fd7\u6613\u61c2. \u4ee5\u540e\u7684\u7a0b\u5e8f\u90fd\u5728Linux\u4e0a\u8fd0\u884c. linux\u4e0a\u7684\u8fd0\u884c\u5b9e\u9a8c\u7ed3\u679c,\u8be6\u89c1\u524d\u9762linux\u57fa\u7840\u4e2d\"\u7ba1\u7406\u8fdb\u7a0b\"\u7ae0\u8282\u4e2d\u50f5\u5c38\u8fdb\u7a0b\u4e0e\u5b64\u513f\u8fdb\u7a0b\u4e2d\u5b9e\u9a8c\u9a8c\u8bc1\u90e8\u5206\u7684\u5185\u5bb9!!! Q: \u54c7!! \u5b50\u8fdb\u7a0b\u600e\u4e48\u662f\u4e2apython\u8fdb\u7a0b\uff1f A: \u6559\u7ed9\u5b50\u8fdb\u7a0b\u6267\u884c\u7684\u662fpython\u4ee3\u7801,python\u4ee3\u7801\u79bb\u5f00\u89e3\u91ca\u5668\u540e\u5c31\u6ca1\u6709\u6267\u884c\u4e00\u8bf4\u5566! \u5982\u4f55\u8fd0\u884c\u4e00\u4e2apython\u7a0b\u5e8f\u7684\uff1f\u628a\u89e3\u91ca\u5668\u548c\u4ee3\u7801\u4f9d\u6b21\u4ece\u786c\u76d8\u52a0\u8f7d\u5230\u5185\u5b58,\u7528python\u89e3\u91ca\u5668\u89e3\u91ca\u4ee3\u7801. \u5f00\u542f\u5b50\u8fdb\u7a0b\u7684\u8bdd,\u4e0d\u4f1a\u4ece\u786c\u76d8\u52a0\u8f7d\u4ee3\u7801,\u4f1a\u4ece\u7236\u8fdb\u7a0b\u7684\u5185\u5b58\u62f7\u8d1d\u4e00\u4efd\u4ee3\u7801\u7ed9\u5b50\u8fdb\u7a0b.. \u4e0d\u4ec5\u5982\u6b64, \u7236\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u91cc\u7684python\u89e3\u91ca\u5668\u7684\u4ee3\u7801\u4e5f\u4f1a\u62f7\u8d1d\u4e00\u4efd\u7ed9\u5b50\u8fdb\u7a0b.. PID\u67e5\u770b \u00b6 \u7236\u8fdb\u7a0b\u7684\u7239\u662f\u8fd0\u884c\u8be5py\u6587\u4ef6\u7684\u7a0b\u5e8f, \u5728pycharm\u91cc\u8fd0\u884c\u5c31\u662fpycharm,\u5728cmd\u91cc\u8fd0\u884c\u5c31\u662fcmd!! import os import time from multiprocessing import Process def task (): print ( f \"\u5b50\u8fdb\u7a0b\u91cc\u770b\u81ea\u4e2a\u513fpid: { os . getpid () } \" ) print ( f \"\u5b50\u8fdb\u7a0b\u91cc\u770b\u7236\u8fdb\u7a0bpid: { os . getppid () } \" ) time . sleep ( 10 ) if __name__ == '__main__' : p1 = Process ( target = task ) p1 . start () print ( \"\u7236\u8fdb\u7a0b\u91cc\u770b\u5b50\u8fdb\u7a0bpid:\" , p1 . pid ) print ( \"\u7236\u8fdb\u7a0b\u91cc\u770b\u81ea\u4e2a\u513fpid:\" , os . getpid ()) print ( \"\u67e5\u770b\u7236\u8fdb\u7a0b\u5b83\u7239\u7684pid:\" , os . getppid ()) \"\"\" \u7236\u8fdb\u7a0b\u91cc\u770b\u5b50\u8fdb\u7a0bpid: 19344 \u7236\u8fdb\u7a0b\u91cc\u770b\u81ea\u4e2a\u513fpid: 19342 \u5b50\u8fdb\u7a0b\u91cc\u770b\u81ea\u4e2a\u513fpid: 19344 \u5b50\u8fdb\u7a0b\u91cc\u770b\u7236\u8fdb\u7a0bpid: 19342 \"\"\" \u6269\u5c55\u8bf4\u4e00\u70b9,\u5173\u4e8elinux\u4e2d\u7236\u8fdb\u7a0b\u7ec8\u6b62\u540e\u7684\u73b0\u8c61(\u6709\u5360\u7528\u7ec8\u7aef\u524d\u53f0\u8fd0\u884c,\u548c\u4e0d\u5360\u7528\u7ec8\u7aef\u7684\u540e\u53f0\u8fd0\u884c\u4e00\u8bf4).. \u8be6\u89c1linux\u57fa\u7840\u4e2d\"\u7ba1\u7406\u8fdb\u7a0b\"\u7ae0\u8282!! \u770b\u4e00\u4e2a\u8fdb\u7a0b\u6709\u6ca1\u6709\u88ab\u7ec8\u6b62,\u7528\u547d\u4ee4\u67e5\u770b,\u4e0d\u8981\u88ab\u8868\u8c61\u8ff7\u60d1!! (\u5f04\u4e2aVMware\u865a\u62df\u673a\u5b89\u88c5\u4e2acentos7\u6765\u5b9e\u9a8c.. \u522b\u5728windows\u548cmac\u4e0a\u5b9e\u9a8c,\u6709\u4e9b\u5b9e\u9a8c\u7ed3\u679c\u4e0d\u4e00\u81f4.\u5c31\u5f88\u70e6.\u60f3\u4e0d\u901a\u5c31\u4e0d\u8981\u60f3\u4e86,\u4ee5linux\u4e0a\u7684\u5b9e\u9a8c\u7ed3\u679c\u4e3a\u51c6!\u256e(\uffe3\u25bd\uffe3\"\")\u256d) \u6ce8\u610f:join\u4e0epid \u00b6 \u7591\u60d1\u4e4b\u5904: p.join() \u6700\u540e\u4e0d\u662f\u4f1a\u56de\u6536\u50f5\u5c38\u8fdb\u7a0b\u6240\u5360\u7528\u7684\u8d44\u6e90\u561b,\u90a3\u4e3a\u5565join\u540e\u8fd8\u80fd\u6253\u5370p.pid\u5462\uff1f \u8bda\u7136, \u6267\u884cjoin\u64cd\u4f5c\u4f1a,\u4f1a\u56de\u6536\u50f5\u5c38\u8fdb\u7a0b\u5360\u7528\u7684\u8d44\u6e90(eg:pid). \u4f46\u8be5\u56de\u6536\u64cd\u4f5c\u662f\u5220\u9664\u7236\u8fdb\u7a0bnamespace\u91ccp\u5bf9\u8c61\u4e0b\u9762\u7684pid\u5c5e\u6027\u5417? no!! \u56de\u6536\u7684\u662fOS\u7684\u8d44\u6e90 - OS\u6240\u5360\u7528\u7684PID ; \u4e0d\u4f1a\u5f71\u54cdpython\u7a0b\u5e8f\u7684\u8d44\u6e90 - p\u5bf9\u8c61\u91cc\u9762pid.. Ps: \u56de\u6536\u7684\u50f5\u5c38\u8fdb\u7a0b\u4f1a\u6807\u8bb0\u4e3afree\u72b6\u6001(\u6d89\u53ca\u5230linux\u6587\u4ef6\u7cfb\u7edf\u4e2d\u5220\u9664\u540e\u7684inode\u53f7).. \u4e3e\u4e2a \u6781\u7aef \u7684\u4f8b\u5b50 ,\u5982\u679c\u6ca1\u6709\u50f5\u5c38\u8fdb\u7a0b\u8fd9\u79cd\u673a\u5236,\u8fdb\u7a0b\u4e00\u7ed3\u675f,\u5c31\u56de\u6536\u6240\u6709\u7684\u8d44\u6e90.. \u53ef\u80fd\u4f1a\u5bfc\u81f4py\u7a0b\u5e8f\u91cc p.start() \u7ed9OS\u53d1\u9001\u4fe1\u53f7\u540e,\u7acb\u523b\u67e5\u770b p.pid ,\u67e5\u770b\u4e0d\u5230, \u56e0\u4e3a\u6b64\u65f6OS\u8fd8\u6ca1\u6765\u5f97\u53ca\u7ed9\u8be5\u5b50\u8fdb\u7a0b\u5206\u914dpid\u53f7.. Hhh Amazing. import time from multiprocessing import Process def task (): time . sleep ( 3 ) if __name__ == '__main__' : p = Process ( target = task ) p . start () # -- \u4e00\u65e6\u6267\u884c\u5c31\u4f1a\u7ed9\u5b50\u8fdb\u7a0b\u7533\u8bf7\u5230\u4e00\u4e2apid\u53f7 print ( p . pid ) # 20344 p . join () print ( p . pid ) # 20344 print ( \"\u4e3b\" ) name\u5c5e\u6027 \u00b6 current_process().name \u67e5\u770b\u5f53\u524d\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u540d import time from multiprocessing import Process , current_process def task (): print ( f \"\u5b50\u8fdb\u7a0b\u91cc\u770b\u5b50\u8fdb\u7a0b\u7684\u540d\u5b57: { current_process () . name } \" ) time . sleep ( 10 ) if __name__ == '__main__' : p1 = Process ( target = task , name = \"\u5b50\u8fdb\u7a0b1\" ) # -- \u4e0d\u8bbe\u7f6ename\u5c5e\u6027\u7684\u8bdd,\u9ed8\u8ba4\u662fProcess-1 p1 . start () print ( \"\u7236\u8fdb\u7a0b\u91cc\u770b\u7236\u8fdb\u7a0b\u7684\u540d\u5b57:\" , p1 . name ) print ( current_process () . name ) \"\"\" \u7236\u8fdb\u7a0b\u91cc\u770b\u7236\u8fdb\u7a0b\u7684\u540d\u5b57: \u5b50\u8fdb\u7a0b1 MainProcess \u5b50\u8fdb\u7a0b\u91cc\u770b\u5b50\u8fdb\u7a0b\u7684\u540d\u5b57: \u5b50\u8fdb\u7a0b1 \"\"\" terminate,is_alive \u00b6 import time from multiprocessing import Process def task ( n ): time . sleep ( n ) if __name__ == '__main__' : p1 = Process ( target = task , name = \"\u5b50\u8fdb\u7a0b1\" , args = ( 2 ,)) p2 = Process ( target = task , name = \"\u5b50\u8fdb\u7a0b1\" , args = ( 5 ,)) p1 . start () # -- \u53ea\u8981\u4fe1\u53f7\u4e00\u53d1\u51fa,\u5b50\u8fdb\u7a0b\u5c31\u5904\u4e8e\u6d3b\u7740\u7684\u72b6\u6001 p2 . start () print ( p1 . is_alive ()) # True print ( p2 . is_alive ()) # True p1 . terminate () # -- \u7ed9OS\u53d1\u9001SIGTERM\u4fe1\u53f7,\u8868\u660e\u7ec8\u6b62\u8be5\u5b50\u8fdb\u7a0b\u7684.. \u4f46OS\u5565\u65f6\u5019\u7ec8\u6b62OS\u8bf4\u7684\u7b97 # \u51e0\u4e4e\u6ca1\u6709terminate()\u7684\u4f7f\u7528\u573a\u666f,\u4e86\u89e3\u5373\u53ef time . sleep ( 0.1 ) # -- 0.1s\u7684\u65f6\u95f4\u8db3\u591fOS\u7ec8\u6b62p1\u8fdb\u7a0b\u5566 print ( p1 . is_alive ()) # False # time.sleep(3) p2 . join () # -- p1,p2\u4e24\u4e2a\u5b50\u8fdb\u7a0b\u662f\u5e76\u53d1\u6267\u884c,p1\u3001p2\u6267\u884c\u5206\u522b\u9700\u89812s\u30015s,p2\u6267\u884c\u5b8c\u65f6p1\u65e9\u5df2\u7ecf\u6267\u884c\u5b8c print ( p1 . is_alive ()) # False print ( p2 . is_alive ()) # False","title":"\u8fdb\u7a0b\u5f00\u53d1\u5fc5\u7528"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/6_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%94%A8/#_1","text":"\u5f00\u542f\u5b50\u8fdb\u7a0b\u7684\u76ee\u7684: \u60f3\u628a\u7236\u8fdb\u7a0b\u91cc\u4e32\u884c\u6267\u884c\u7684\u4efb\u52a1(eg,\u4e00\u6bb5\u51fd\u6570\u4ee3\u7801)\u5206\u7ed9\u72ec\u7acb\u7684\u8fdb\u7a0b\u53bb\u6267\u884c,\u4ece\u800c\u5b9e\u73b0\u4efb\u52a1\u7684\u5e76\u53d1\u6267\u884c!","title":"\u5f00\u542f\u5b50\u8fdb\u7a0b\u7684\u4e24\u79cd\u65b9\u5f0f"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/6_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%94%A8/#process","text":"\u6211\u4eec\u901a\u5e38\u4f7f\u7528\u7684\u5c31\u662f\u8fd9\u4e00\u79cd!!","title":"Process\u7c7b\u5b9e\u4f8b\u5316"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/6_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%94%A8/#_2","text":"# -- a.py import time from multiprocessing import Process def task ( x ): print ( f \" { x } is running.\" ) time . sleep ( 3 ) print ( f \" { x } is done.\" ) if __name__ == '__main__' : # -- \u53c2\u6570\u8bf4\u660e: # group\u4e0d\u7528\u7ba1;target\u662f\u6211\u4eec\u7684\u4efb\u52a1/\u5b50\u8fdb\u7a0b;name\u5b50\u8fdb\u7a0b\u7684\u540d\u5b57,\u4e0d\u4f20\u4f1a\u6709\u4e2a\u9ed8\u8ba4\u503c; # \u7ed9\u6211\u4eec\u7684\u4efb\u52a1\u4f20\u53c2,\u6709\u4e24\u79cd\u5f62\u5f0f,args\"\u5143\u7ec4,\u6309\u4f4d\u7f6e\u4f20 \u6ce8\u610f\u5143\u7ec4\u91cc\u7684\u9017\u53f7\"\u3001kwargs\"\u5b57\u5178\"\u4efb\u9009\u5176\u4e00\u5373\u53ef # Process(target=task, kwargs={'x': '\u5b50\u8fdb\u7a0b'}) p = Process ( target = task , args = ( '\u5b50\u8fdb\u7a0b' ,)) # -- \u8c03\u7528\u7c7b\u5b9e\u4f8b\u5316\u4e00\u4e2a\u5bf9\u8c61p # -- \u53ea\u662f\u5728\u5411\u64cd\u4f5c\u7cfb\u7edf\u53d1\u9001\u4e00\u4e2a\u5f00\u542fp\u5bf9\u8c61\u5bf9\u5e94\u4efb\u52a1/\u5b50\u8fdb\u7a0b\u7684\u4fe1\u53f7,\u8be5\u884c\u4ee3\u7801\u8fd0\u884c\u4f1a\u975e\u5e38\u975e\u5e38\u7684\u5feb. # \u4fe1\u53f7\u53d1\u5b8c\u540e,\u8fd9\u4e2a\u5b50\u8fdb\u7a0b\u4ec0\u4e48\u65f6\u5019\u9020,\u9020\u591a\u957f\u65f6\u95f4,\u8fd0\u884c\u591a\u4e45,OS\u8bf4\u7684\u7b97,\u5e94\u7528\u7a0b\u5e8f\u662f\u7ba1\u4e0d\u4e86\u7684!! p . start () # time.sleep(5) # -- \u53ef\u4ee5\u5b9e\u9a8c\u4e0b,\u8fd0\u884c\u8be5\u4ee3\u7801,\"\u4e3b\"\u4f1a\u6700\u540e\u6253\u5370.\u8bc1\u660e\u7b49\u5f85\u76845s\u7684\u65f6\u95f4\u91cc\u5b50\u8fdb\u7a0b\u9020\u51fa\u6765\u5566! print ( \"\u4e3b\" ) \"\"\" # -- \u5c4f\u5e55\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b: \u4e3b \u5b50\u8fdb\u7a0b is running. \u5b50\u8fdb\u7a0b is done. \"\"\"","title":"\u5b9e\u73b0\u4ee3\u7801"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/6_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%94%A8/#_3","text":"\u5728\u8fd9\u91cc,a.py\u6587\u4ef6\u4e2dtask\u51fd\u6570\u4f53\u7684\u4ee3\u7801\u5f52\u5b50\u8fdb\u7a0b\u6267\u884c; \u5176\u5b83\u4ee3\u7801\u5f52\u7236\u8fdb\u7a0b\u6267\u884c!! [\u7236\u8fdb\u7a0b\u7684\u542f\u52a8] pychram\u91cc\u663e\u793a\u7684a.py\u6587\u4ef6\u4ee3\u7801\u5728\u786c\u76d8\u91cc\u653e\u7740\u5462,\u53f3\u952e\u70b9\u51fb\u8fd0\u884c,OS\u63a5\u6536\u6307\u4ee4,\u5148\u5f00\u8f9f\u4e00\u4e2a\u5185\u5b58\u7a7a\u95f4; \u63a5\u7740,OS\u5c06a.py\u6587\u4ef6\u7684\u4ee3\u7801\u4ece\u786c\u76d8\u8bfb\u5165\u5f00\u8f9f\u7684\u7a7a\u95f4,OS\u518d\u8c03\u7528CPU\u6267\u884c\u4ee3\u7801.. \u8be5a.py\u6587\u4ef6\u5c31\u8fd0\u884c\u8d77\u6765\u5566!! \u5c06\u8fd9\u4e00\u4e2a\u8fc7\u7a0b\u8fdb\u884c\u62bd\u8c61,\u62bd\u8c61\u7684\u7ed3\u679c\u5c31\u53eb\u505a\u8fdb\u7a0b!! [\u5b50\u8fdb\u7a0b\u7684\u542f\u52a8] \u6267\u884ca.py\u6587\u4ef6\u91cc\u7684 p.start() \u4ee3\u7801, \u7236\u8fdb\u7a0b\u4f1a\u7ed9OS\u53d1\u4fe1\u53f7, \u544a\u77e5\u5b83\u9700\u8981\u542f\u52a8\u4e00\u4e2a\u5b50\u8fdb\u7a0b! \u6ce8\u610f:\u4fe1\u53f7\u53d1\u5b8c\u540e,\u8fd9\u884c\u4ee3\u7801\u7236\u8fdb\u7a0b\u5c31\u6267\u884c\u5b8c\u6bd5\u4e86!! OS\u4f1a\u7533\u8bf7\u65b0\u7684\u5185\u5b58\u7a7a\u95f4\u653e\u5b50\u8fdb\u7a0b\u7684\u4ee3\u7801,\u8fd8\u4f1a\u62f7\u8d1d\u4e00\u4efd\u7236\u8fdb\u7a0b\u7684namespace\u653e\u8fdb\u53bb. \u5373\u7236\u8fdb\u7a0b\u7684\u6240\u6709\u8d44\u6e90\u90fd\u4f1a\u88ab\u5b50\u8fdb\u7a0b\u7ee7\u627f,\u5305\u62ec\u8fd0\u884c\u7236\u8fdb\u7a0b\u7684\u8fdb\u7a0b,\u5982pycharm.exe/cmd.exe!! \u6ce8\u610f : \u5b50\u8fdb\u7a0b\u53ea\u4f1a\u5c06 a.py \u4e2d if __name__ == '__main__': \u4e4b\u4e0a\u7684\u4ee3\u7801\u901a\u8fc7 \u5bfc\u5165\u7684\u65b9\u5f0f \u62f7\u8d1d\u4e00\u4efd.. OS\u542d\u54e7\u542d\u54e7\u9020\u5b50\u8fdb\u7a0b\u7684\u8fc7\u7a0b\u4e2d,\u7236\u8fdb\u7a0b\u4e5f\u5728\u8fd0\u884c.. \u5b50\u8fdb\u7a0b\u9020\u5b8c\u540e,\u7236\u5b50\u8fdb\u7a0b\u5e76\u53d1\u6267\u884c. \u7236\u8fdb\u884c\u8fd0\u884c\u6700\u540e\u4e00\u884c\u6253\u5370 print(\"\u4e3b\") \u7684\u65f6\u5019, \u5b50\u8fdb\u7a0b\u8fd8\u6ca1\u6709\u9020\u5b8c\u5462.. \u6240\u4ee5\u4f1a\u770b\u5230\u7ec8\u7aef\u5148\u6253\u5370\u7684\"\u4e3b\"... \u63d0\u9192\u4e00\u54c8,\u7236\u8fdb\u7a0b\u4e0e\u5b50\u8fdb\u7a0b\u5171\u7528\u7684\u540c\u4e00\u4e2a\u8f93\u51fa\u7ec8\u7aef..","title":"\u6267\u884c\u8fc7\u7a0b"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/6_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%94%A8/#_4","text":"\u5f00\u542f\u5b50\u8fdb\u7a0b\u7684\u64cd\u4f5c p.start() \u5e94\u8be5\u5199\u5230 if __name__ == '__main__': \u4e0b\u9762!! \u8fd9\u6837\u4f7f\u5f97\u8be5\u64cd\u4f5c\u5728\u5bfc\u5165\u8be5\u64cd\u4f5c\u6240\u5728\u6a21\u5757\u65f6\u4e0d\u88ab\u8fd0\u884c. \u5373\u8fd9\u4e2aif\u8bed\u53e5\u4e2d\u7684\u8bed\u53e5\u5c06\u4e0d\u4f1a\u5728\u5bfc\u5165\u65f6\u88ab\u8c03\u7528!!! \u5177\u4f53\u6765\u8bf4, \u5728windows\u4e0a,\u5f00\u542f\u5b50\u8fdb\u7a0b\u65f6,\u5b50\u8fdb\u7a0b\u62f7\u8d1d\u7236\u8fdb\u7a0b\u7a7a\u95f4\u7684\u65b9\u5f0f\u6bd4\u8f83\u7279\u6b8a. \u5b83\u4f1a\u5c06\u7236\u8fdb\u7a0b\u5bf9\u5e94\u7684\u6587\u4ef6\u5f53\u4f5c\u6a21\u5757\u91cd\u65b0\u5bfc\u4e00\u904d, \u5c06\u5bfc\u5165\u7684\u6210\u679c\u653e\u5230\u5b50\u8fdb\u7a0b\u81ea\u5df1\u7684\u5185\u5b58\u91cc.. \u6211\u4eec\u6653\u5f97, \u6267\u884c\u6587\u4ef6\u4e0d\u7b49\u4e8e\u5bfc\u5165\u6587\u4ef6 ; \u5bfc\u5165\u6a21\u5757\u4f1a\u8fd0\u884c\u6587\u4ef6\u3001\u4ea7\u751fnamespace\u3001\u4e22\u5165\u4e00\u5806\u6570\u636e. \u610f\u5473\u7740,\u4e00\u65e6\u6267\u884c\u4ee3\u7801 p.start() \u5f00\u542f\u5b50\u8fdb\u7a0b, \u8be5\u4ee3\u7801\u53c8\u5c06\u88ab\u6267\u884c\u4e00\u904d,\u65e0\u9650\u5957\u5a03/\u65e0\u9650\u5f00\u542f\u5b50\u8fdb\u7a0b!! Ps: \u6211\u8bd5\u4e86\u4e0b,\u5728mac\u4e0a\u4e5f\u9700\u8981\u653e\u5230\u90a3\u4e0b\u9762,centos\u5219\u4e0d\u7528..Hhh \u4e3a\u4e86\u517c\u5bb9\u6027,\u8fd8\u662f\u5f97\u653e.","title":"\u6ce8\u610f\u4e8b\u9879"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/6_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%94%A8/#process_1","text":"\u81ea\u5b9a\u4e49\u7684\u7c7b\u4e00\u5b9a\u8981\u7ee7\u627fProcess, \u5e76\u4e14\u81ea\u5b9a\u4e49\u7c7b\u91cc\u4e00\u5b9a\u8981\u6709\u4e00\u4e2a\u540d\u4e3a run \u7684\u7ed1\u5b9a\u65b9\u6cd5!! \u6572\u9ed1\u677f! \u628a\u5b50\u8fdb\u7a0b\u5f00\u542f\u540e\u9700\u8981\u6267\u884c\u7684\u4ee3\u7801\u653e\u5230\u7ed1\u5b9a\u65b9\u6cd5run\u91cc!!!","title":"\u7ee7\u627fProcess\u7c7b"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/6_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%94%A8/#_5","text":"import time from multiprocessing import Process class Myprocess ( Process ): def __init__ ( self , x ): super () . __init__ () self . x = x def run ( self ): print ( f \" { self . x } is running.\" ) time . sleep ( 3 ) print ( f \" { self . x } is done.\" ) if __name__ == '__main__' : p = Myprocess ( '\u5b50\u8fdb\u7a0b' ) p . start () # -- \u5185\u90e8\u5c31\u662f\u5728\u8c03\u7528run\u65b9\u6cd5! \u4f60\u95ee\u4e3a\u5565?\u90a3\u5c31\u9700\u8981\u770b\u6e90\u7801\u7684\u8c03\u7528\u5173\u7cfb\u4e86. print ( \"\u4e3b\" )","title":"\u5b9e\u73b0\u4ee3\u7801"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/6_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%94%A8/#_6","text":"\u76f4\u63a5\u4f7f\u7528\u9ed8\u8ba4\u7684Process\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u8c03\u7528start\u521b\u5efa\u5b50\u8fdb\u7a0b, \u662f\u901a\u7528\u7684\u9020\u8fdb\u7a0b\u7684\u65b9\u5f0f !! \u53ef\u4ee5\u9020\u4e0d\u540c\u7684\u5b50\u8fdb\u7a0b\u6267\u884c\u4e0d\u540c\u7684\u4efb\u52a1, \u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u65f6\u6307\u5b9a\u4e0d\u540c\u7684target\u53c2\u6570\u503c\u5c31\u53ef\u4ee5\u5566!! p1 = Process ( target = task1 , args = ( '\u5b50\u8fdb\u7a0b1' ,)) p2 = Process ( target = task2 , args = ( '\u5b50\u8fdb\u7a0b2' ,)) p3 = Process ( target = task3 , args = ( '\u5b50\u8fdb\u7a0b3' ,)) p1 . start () p2 . start () p3 . start () \u800c\u81ea\u5b9a\u4e49\u7c7b\u7ee7\u627fProcess\u7684\u65b9\u5f0f,\u76f8\u5f53\u4e8e\u53ea\u80fd\u9020\u4e00\u4e2a\u7279\u5b9a\u7684\u5b50\u8fdb\u7a0b.. (Because\u53ea\u80fd\u6267\u884crun\u51fd\u6570..)","title":"\u4e0e\u7b2c\u4e00\u79cd\u65b9\u5f0f\u7684\u533a\u522b"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/6_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%94%A8/#_7","text":"\u8be6\u89c1 \u524d\u9762linux\u57fa\u7840\u4e2d\"\u7ba1\u7406\u8fdb\u7a0b\"\u7ae0\u8282\u76f8\u5173\u7684\u5185\u5bb9..","title":"\u50f5\u5c38\u8fdb\u7a0b\u4e0e\u5b64\u513f\u8fdb\u7a0b"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/6_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%94%A8/#_8","text":"\u601d\u8003\u4e00\u4e2a\u95ee\u9898: \u5728\u521b\u5efa\u5b50\u8fdb\u7a0b\u7684\u7b2c\u4e00\u79cd\u65b9\u5f0f \"Process\u7c7b\u5b9e\u4f8b\u5316\" \u4e2d,\u7236\u8fdb\u7a0b\u5728\u81ea\u5df1\u4ee3\u7801\u6267\u884c\u5b8c\u540e,\u5e76\u4e0d\u4f1a\u7acb\u9a6c\u7ed3\u675f\u6389, \u4f1a\u7b49\u5230\u6240\u6709\u5b50\u8fdb\u7a0b\u7ed3\u675f\u540e ,\u624d\u4f1a\u7ed3\u675f,\u4e3a\u4ec0\u4e48\u5462? # -- a.py import os import time from multiprocessing import Process def task ( x , n ): print ( f \" { x } is running.\" ) time . sleep ( n ) print ( f \" { x } is done.\" ) if __name__ == '__main__' : p1 = Process ( target = task , args = ( '\u5b50\u8fdb\u7a0b1' , 3 )) p2 = Process ( target = task , args = ( '\u5b50\u8fdb\u7a0b2' , 5 )) p1 . start () # -- \u518d\u6b21\u5f3a\u8c03!\u4fe1\u53f7\u53d1\u5b8c\u540e,\u8fd9\u884c\u4ee3\u7801\u7236\u8fdb\u7a0b\u5c31\u6267\u884c\u5b8c\u6bd5\u4e86!! p2 . start () # -- \u518d\u6b21\u5f3a\u8c03!\u4fe1\u53f7\u53d1\u5b8c\u540e,\u8fd9\u884c\u4ee3\u7801\u7236\u8fdb\u7a0b\u5c31\u6267\u884c\u5b8c\u6bd5\u4e86!! print ( p1 . pid , p2 . pid , os . getpid ()) print ( \"\u4e3b\" ) time . sleep ( 50 ) \"\"\" 21233 21234 21231 \u4e3b \u5b50\u8fdb\u7a0b2 is running. \u5b50\u8fdb\u7a0b1 is running. \u5b50\u8fdb\u7a0b1 is done. \u5b50\u8fdb\u7a0b2 is done. \"\"\" \u5728a.py\u7a0b\u5e8f\u8fd0\u884c5-50s\u7684\u65f6\u95f4\u6bb5,\u5728cmd\u7ec8\u7aef\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4.. \u53ef\u4ee5\u770b\u5230z\u72b6\u6001!! z\u4e3a\u50f5\u5c38\u8fdb\u7a0b\u7684\u6807\u8bc6!!!","title":"\u629b\u51fa\u95ee\u9898"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/6_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%94%A8/#_9","text":"\u82e5\u73b0\u5728\u6709\u4e00\u4e2a\u7236\u8fdb\u7a0b\u548c\u4e24\u4e2a\u5b50\u8fdb\u7a0b(p1\u548cp2). [\u6b63\u5e38\u60c5\u51b5,\u7236\u8fdb\u7a0b\u7b49\u7740\u6240\u6709\u5b50\u8fdb\u7a0b\u8fd0\u884c\u5b8c\u540e\u518d\u7ed3\u675f] -- \u50f5\u5c38\u8fdb\u7a0b \u9996\u5148\u8981\u77e5\u9053,\u4ece\u8fd0\u884c\u89d2\u5ea6\u6765\u770b,\u8fd9\u91cc\u7684\u7236\u8fdb\u7a0b\u548c\u4e24\u4e2a\u5b50\u8fdb\u7a0b\u662f\u5b8c\u5168\u72ec\u7acb\u4e0d\u76f8\u5e72\u76843\u4e2a\u8fdb\u7a0b.\u5f7c\u6b64\u9694\u79bb\u7684. \u7236\u8fdb\u7a0b\u65e0\u6cd5\u9884\u77e5\u5b50\u8fdb\u7a0b\u4ec0\u4e48\u65f6\u5019\u7ed3\u675f,\u4e3a\u4e86\u4fdd\u8bc1\u5728\u7236\u8fdb\u7a0b\u5728\u6d3b\u7740\u7684\u65f6\u5019,\u53ef\u4ee5\u968f\u65f6\u67e5\u770b\u4e09\u4e2a\u5b50\u8fdb\u7a0b\u7684\u72b6\u6001. \u8bbe\u7f6e\u4e86\u50f5\u5c38\u8fdb\u7a0b\u8fd9\u79cd\u72ec\u7279\u7684\u6570\u636e\u7ed3\u6784. \u50f5\u5c38\u8fdb\u7a0b \u662f\u6307 \u5b50\u8fdb\u7a0b\u5728\u8fd0\u884c\u5b8c\u6bd5\u4ee5\u540e ,OS\u4f1a\u5c06\u5b50\u8fdb\u7a0b\u5360\u7528\u7684\u91cd\u578b\u8d44\u6e90\u90fd\u91ca\u653e\u6389 (eg:\u5173\u95ed\u5df2\u6253\u5f00\u7684\u6587\u4ef6,\u820d\u5f03\u5df2\u5360\u7528\u7684cpu\u3001\u5185\u5b58\u3001\u4ea4\u6362\u7a7a\u95f4\u7b49) , \u4f46 \u662f\u4f1a\u4fdd\u7559\u90e8\u5206\u5b50\u8fdb\u7a0b\u7684\u5173\u952e\u72b6\u6001\u4fe1\u606f (eg: PID \u3001\u9000\u51fa\u72b6\u6001\u3001\u5df2\u8fd0\u884c\u65f6\u95f4\u7b49) \u7236\u8fdb\u7a0b\u628a\u81ea\u5df1\u6d3b\u5e72\u5b8c\u540e,\u6ca1\u6709\u7acb\u523b\u7ed3\u675f,\u662f\u4e3a\u4e86\u7b49\u7740\u7ed9\u5b50\u8fdb\u7a0b\u6536\u5c38, \u5373\u6240\u6709\u7684\u5b50\u8fdb\u7a0b\u8fdb\u5165\u50f5\u5c38\u72b6\u6001\u540e,\u7236\u8fdb\u7a0b\u4f1a\u7edf\u4e00\u53d1\u8d77\u56de\u6536\u64cd\u4f5c. \u5177\u4f53\u6765\u8bf4,\u4f1a\u7531\u7236\u8fdb\u7a0b\u53d1\u8d77\u4e00\u4e2a \u7cfb\u7edf\u8c03\u7528 wait / waitpid\u6765\u901a\u77e5linux\u64cd\u4f5c\u7cfb\u7edf\u6765\u6e05\u7406\u8fd9\u4e9b\u50f5\u5c38\u8fdb\u7a0b. \u6240\u6709\u7684\u5b50\u8fdb\u7a0b\u7ed3\u675f\u540e\u90fd\u4f1a\u8fdb\u5165\u50f5\u5c38\u8fdb\u7a0b\u7684\u72b6\u6001!! \u901a\u5e38\u6211\u4eec\u4e0d\u4f1a\u7b49\u7236\u8fdb\u7a0b\u7ed3\u675f\u65f6\u81ea\u52a8\u56de\u6536,\u4f1a\u4f7f\u7528join\u63d0\u524d\u56de\u6536\u8fd9\u4e2a\u50f5\u5c38\u8fdb\u7a0b.. [\u5b50\u8fdb\u7a0b\u8fd8\u672a\u8fd0\u884c\u5b8c,\u7236\u8fdb\u7a0b\u5148\u55dd\u5c41\u4e86] -- \u5b64\u513f\u8fdb\u7a0b \u82e5\u7236\u8fdb\u7a0b\u5148\u6b7b\u6389, \u4e0d\u4f1a\u5f71\u54cd\u5b50\u8fdb\u7a0b\u7684\u8fd0\u884c, \u4f46\u8fd8\u672a\u8fd0\u884c\u5b8c\u7684\u5b50\u8fdb\u7a0b\u5c06\u4f1a\u6210\u4e3a \u5b64\u513f\u8fdb\u7a0b .. \u5b64\u513f\u8fdb\u7a0b\u5c06\u88abPID\u4e3a1\u7684 \u9876\u7ea7\u8fdb\u7a0binit/systemd (\u5176PID\u4e3a0,\u662f\u6240\u6709\u8fdb\u7a0b\u7684\u7956\u5b97,linux\u7684\u8fdb\u7a0b\u662f\u4e00\u4e2a\u6811\u5f62\u7ed3\u6784) \u6240\u6536\u517b,\u5e76\u7531\u8be5\u9876\u7ea7\u8fdb\u7a0b\u5bf9\u5b83\u4eec\u5b8c\u6210\u72b6\u6001\u6536\u96c6\u5de5\u4f5c.. \u901a\u4fd7\u6765\u8bf4,\u7236\u8fdb\u7a0b\u6b7b\u7684\u65f6\u5019,\u5426\u7ba1\u5b83\u7684\u5b50\u8fdb\u7a0b\u662f\u5904\u4e8e\u50f5\u5c38\u72b6\u6001\u8fd8\u662f\u5b64\u513f\u72b6\u6001,\u53ea\u8981\u7236\u8fdb\u7a0b\u4e0d\u7b49\u6240\u6709\u5b50\u8fdb\u7a0b\u7ed3\u675f\u5c31\u55dd\u5c41,\u8fd9\u4e9b\u5b50\u8fdb\u7a0b\u90fd\u5c06\u88ab\u9876\u7ea7\u8fdb\u7a0binit/systemd\u6258\u7ba1!! \u7236\u8fdb\u7a0b\u6b7b\u4e4b\u524d,\u5df2\u7ecf\u7ed3\u675f\u53d8\u6210\u50f5\u5c38\u8fdb\u7a0b\u7684\u5b50\u8fdb\u7a0b\u5728\u7236\u8fdb\u7a0b\u6b7b\u540e\u4f1a\u88abinit\u56de\u6536;\u7236\u8fdb\u7a0b\u6b7b\u540e,\u8fd8\u672a\u8fd0\u884c\u5b8c\u7684\u8fdb\u7a0b\u662f\u5b64\u513f\u8fdb\u7a0b,\u8fd0\u884c\u5b8c\u540e\u4f1a\u53d8\u6210\u50f5\u5c38\u72b6\u6001\u7684\u5b64\u513f\u8fdb\u7a0b,\u4e5f\u5c06\u88abinit\u56de\u6536!! [\u6ce8\u610f\u4e8b\u9879] \u5b64\u513f\u8fdb\u7a0b\u6ca1\u6709\u5bb3,\u662f\u56e0\u4e3a\u6709\u4eba\u7ba1\u5b83;\u6b63\u5e38\u60c5\u51b5\u4e0b,\u5b50\u8fdb\u7a0b\u6b7b\u540e\u4f1a\u88ab\u7236\u8fdb\u7a0b\u53d1\u8d77\u7cfb\u7edf\u8c03\u7528\u56de\u6536.\u4e5f\u6ca1\u6709\u5bb3. \u574f\u5c31\u574f\u5728\u7236\u8fdb\u7a0b\u4e00\u76f4\u4e0d\u6b7b,\u4e0d\u505c\u7684\u5728\u5f00\u5b50\u8fdb\u7a0b,\u8fd8\u4e0d\u53d1\u8d77\u56de\u6536\u50f5\u5c38\u8fdb\u7a0b\u7684\u4fe1\u53f7.\u90a3\u4e48\u4fdd\u7559\u7684\u4fe1\u606f\u5c31\u5f97\u4e0d\u5230\u91ca\u653e. \u50f5\u5c38\u8fdb\u7a0b\u8d8a\u79ef\u8d8a\u591a,\u5360\u7528\u8fc7\u591a\u7684PID\u53f7,\u65b0\u7684\u8f6f\u4ef6\u5c31\u542f\u52a8\u4e0d\u8d77\u6765! (PID\u662f\u6709\u9650\u7684!!) \u89e3\u51b3\u65b9\u6848: kill\u6389\u7236\u8fdb\u7a0b,\u7236\u8fdb\u7a0b\u5728\u4e16\u65f6\u4ea7\u751f\u7684\u50f5\u6b7b\u8fdb\u7a0b\u5c31\u4f1a\u53d8\u6210\u4e86\u5904\u4e8e\u50f5\u6b7b\u72b6\u6001\u7684\u5b64\u513f\u8fdb\u7a0b..\u8fd8\u672a\u8fd0\u884c\u5b8c\u7684\u5b50\u8fdb\u7a0b\u4f1a\u53d8\u6210\u5b64\u513f\u8fdb\u7a0b,\u5728\u8fd0\u884c\u5b8c\u540e\u4e5f\u4f1a\u8fdb\u5165\u50f5\u6b7b\u72b6\u6001.. \u8fd9\u4e9b\u5b64\u513f\u8fdb\u7a0b\u90fd\u4f1a\u88abinit\u8fdb\u7a0b\u63a5\u7ba1... egon\u8bed\u5f55:\u4e0d\u61c2\u5f00\u53d1\u7684\u8fd0\u7ef4\u5c31\u662f\u79cb\u540e\u7684\u8682\u86b1,\u8e66\u8df6\u4e0d\u4e86\u51e0\u5929.Hhh","title":"\u7406\u8bba\u9610\u8ff0"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/6_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%94%A8/#_10","text":"\u9a8c\u8bc1\u5b50\u8fdb\u7a0b\u4e0e\u7236\u8fdb\u7a0b\u5185\u5b58\u7a7a\u95f4\u4e4b\u95f4\u662f\u9694\u79bb\u7684! (\u901a\u8fc7\u524d\u9762\u591a\u9053\u6280\u672f\u7684\u8bb2\u89e3\u6211\u4eec\u5f97\u77e5\u8fd9\u9694\u79bb\u8fd8\u662f\u7269\u7406\u9694\u79bb\u7684) \u63d0\u9192\u4e00\u4e0b, \u8bf4\u7684\u662f\u5185\u5b58\u7a7a\u95f4\u5f7c\u6b64\u9694\u79bb,\u786c\u76d8\u7a7a\u95f4\u662f\u5171\u4eab\u7684. import time from multiprocessing import Process x = 100 def task (): # -- \u5b50\u8fdb\u7a0b\u5728\u5f00\u542f\u65f6\u4f1a\u62ff\u5230\u548c\u7236\u8fdb\u7a0b\u6709\u4e00\u6837\u7684\u53d8\u91cfx\u548ctask (\u5b9a\u4e49\u51fd\u6570\u548c\u5b9a\u4e49\u53d8\u91cf\u662f\u4e00\u56de\u4e8b) # \u6240\u4ee5\u5b50\u8fdb\u7a0b\u5728\u542f\u52a8\u8d77\u6765\u540e\u80fd\u8bbf\u95ee\u5f97\u5230task! global x \u58f0\u660e\u7684\u5168\u5c40\u53d8\u91cfx\u662f\u4ee5\u5b50\u8fdb\u7a0b\u81ea\u5df1\u7684\u4e3a\u51c6! # \u56e0\u800c\u5b50\u8fdb\u7a0b\u6539\u7684\u5168\u5c40\u53d8\u91cf\u662f\u5b50\u8fdb\u7a0b\u91cc\u7684\u5168\u5c40\u53d8\u91cf,\u4e0d\u4f1a\u5f71\u54cd\u5230\u7236\u8fdb\u7a0b!! global x x = 0 print ( \"\u5b50\u8fdb\u7a0b\u5df2\u7ecf\u8fd0\u884c\u5b8c\u6bd5!\" ) if __name__ == '__main__' : p = Process ( target = task ) p . start () # -- \u53d1\u4fe1\u53f7 time . sleep ( 3 ) # -- \u77613\u79d2,\u8ba9\u7236\u8fdb\u7a0b\u5728\u539f\u5730\u7b49\u5f853\u79d2,\u662f\u4e0d\u60f3\u8ba9\u7236\u8fdb\u7a0b\u7acb\u523b\u8fd0\u884c`print(x)`\u8fd9\u884c\u4ee3\u7801. # \u786e\u4fddOS\u628a\u5b50\u8fdb\u7a0b\u5f00\u542f\u5e76\u6267\u884c\u5b8c.\u624d\u4f1a\u8ba9\u7236\u8fdb\u7a0b\u8fd0\u884c`print(x)`\u8fd9\u884c\u4ee3\u7801. print ( x ) # 100 -- \u7236\u8fdb\u7a0b\u91cc\u7684x\u4ecd\u4e3a100,\u8bc1\u660e\u6ca1\u6709\u88ab\u5b50\u8fdb\u7a0b\u5f71\u54cd\u5230!! \"\"\" \u5b50\u8fdb\u7a0b\u5df2\u7ecf\u8fd0\u884c\u5b8c\u6bd5! 100 \"\"\" \u601d\u8003: time.sleep(3) 3\u79d2\u65f6\u95f4\u80fd\u4fdd\u8bc1\u5b50\u8fdb\u7a0b\u8fd0\u884c\u5b8c\u5417?\u4f46\u51e1\u5b50\u8fdb\u7a0b\u4ee3\u7801\u591a\u70b9, \u6211\u4eec\u538b\u6839\u4e0d\u77e5\u9053\u5b50\u8fdb\u7a0b\u4f1a\u8fd0\u884c\u591a\u4e45!\u628a\u65f6\u95f4\u6539\u6210300\u79d2? crazy. \u5408\u7406\u60c5\u51b5\u4e0b,\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u63a5\u53e3\u7b49\u5230\u5b50\u8fdb\u7a0b\u7ed3\u675f\u5c31\u4e0d\u7528\u518d\u7b49\u4e86. \u4f7f\u7528 p.join() !!!","title":"\u8fdb\u7a0b\u5185\u5b58\u7a7a\u95f4\u5f7c\u6b64\u9694\u79bb"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/6_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%94%A8/#_11","text":"\u4e0a\u9762\u5df2\u7ecf\u63a5\u89e6\u4e86Process\u7c7b\u7684start\u65b9\u6cd5.. \u4e0b\u9762\u4ecb\u7ecd\u4e0bProcess\u7c7b\u7684\u5176\u5b83\u65b9\u6cd5!! start()\u3001join()\u662f\u5fc5\u987b\u638c\u63e1\u7684!! \u5176\u4f59\u7684\u4e86\u89e3\u5373\u53ef!","title":"\u8fdb\u7a0b\u5bf9\u8c61\u7684\u65b9\u6cd5\u548c\u5c5e\u6027"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/6_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%94%A8/#join","text":"p.join() \u672c\u8d28\u8ddf time.sleep(n) \u4e00\u6837, \u4f46\u65f6\u95f4\u66f4\u7cbe\u51c6, \u4e0d\u7528\u6211\u4eec\u81ea\u5df1\u63a7\u5236!","title":"join\u65b9\u6cd5!!"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/6_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%94%A8/#_12","text":"time.sleep() \u8ba9\u7236\u8fdb\u7a0b\u539f\u5730\u7b49\u5f85,\u7b49\u5f85500s\u540e,\u624d\u6267\u884c\u4e0b\u4e00\u884c\u4ee3\u7801. p.join() \u8ba9\u7236\u8fdb\u7a0b\u539f\u5730\u7b49\u5f85,\u4e0d\u5f71\u54cd\u5b50\u8fdb\u7a0b\u7684\u8fd0\u884c, \u7b49\u5230\u5b50\u8fdb\u7a0b\u5f7b\u5f7b\u5e95\u5e95\u7684\u8fd0\u884c\u5b8c\u6bd5, \u4f1a\u56de\u6536\u5b50\u8fdb\u7a0b(\u786e\u5207\u70b9\u5e94\u79f0\u4f5c\u50f5\u5c38\u8fdb\u7a0b)\u5360\u7528\u7684pid\u7b49\u8d44\u6e90.. \u518d\u6267\u884c\u4e0b\u4e00\u884c\u4ee3\u7801. import time from multiprocessing import Process def task ( x ): print ( f \" { x } is running!\" ) time . sleep ( 2 ) print ( f \" { x } is done!\" ) if __name__ == '__main__' : p = Process ( target = task , args = ( '\u5b50\u8fdb\u7a0b1' ,)) p . start () # time.sleep(500) p . join () print ( \"\u4e3b\" ) \"\"\" \u5b50\u8fdb\u7a0b1 is running! \u5b50\u8fdb\u7a0b1 is done! \u4e3b \"\"\" \u2605\u5b98\u65b9\u6587\u6863\u6709\u5982\u4e0b\u7684\u8bf4\u660e!! join\u65b9\u6cd5\u5bf9\u5e94\u7684\u6e90\u7801\u91cc\u9762\u6709\u4e00\u884c\u4ee3\u7801\u8d77\u5230\u4e86\u53d1\u8d77\u7cfb\u7edf\u8c03\u7528 wait / waitpid \u7684\u4f5c\u7528 !!","title":"\u5b9e\u73b0\u4ee3\u7801"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/6_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%94%A8/#_13","text":"\u6838\u5fc3\u8981\u70b9: \u662f\u7236\u8fdb\u7a0b\u5728\u7b49,\u4e0d\u4f1a\u5f71\u54cd\u5b50\u8fdb\u7a0b\u7684\u8fd0\u884c!! p1\u3001p2\u3001p3\u4e09\u4e2a\u5b50\u8fdb\u7a0b\u662f\u5e76\u53d1\u6267\u884c\u7684!! \u4e09\u4e2ajoin\u662f\u5728\u4e09\u4e2astart\u4fe1\u53f7\u53d1\u51fa\u53bb\u540e\u518d\u6267\u884c\u7684\u64cd\u4f5c! import time from multiprocessing import Process def task ( x , n ): print ( f \" { x } is running!\" ) time . sleep ( n ) print ( f \" { x } is done!\" ) if __name__ == '__main__' : p1 = Process ( target = task , args = ( '\u5b50\u8fdb\u7a0b1' , 5 )) p2 = Process ( target = task , args = ( '\u5b50\u8fdb\u7a0b2' , 2 )) p3 = Process ( target = task , args = ( '\u5b50\u8fdb\u7a0b3' , 6 )) start_time = time . time () # -- \u4f9d\u6b21\u53d1\u90013\u4e2a\u4fe1\u53f7,\u53d1\u9001\u5b8c\u4fe1\u53f7\u540e,\u5bf9\u5e94\u5b50\u8fdb\u7a0b\u5c31\u5f00\u59cb\u6267\u884c p1 . start () p2 . start () p3 . start () # -- \u3010\u2605look here!\u3011\u867d\u7136\u7236\u8fdb\u7a0b\u7684\u4e09\u4e2ajoin\u4ee3\u7801\u662f\u4f9d\u6b21\u6267\u884c\u7684,\u4f46\u5b50\u8fdb\u7a0b\u7684\u8fd0\u884c\u5b9e\u5219\u662f\u5e76\u884c\u7684!! # \u662f\u56e0\u4e3a\u7236\u8fdb\u7a0b\u5728\u7b49\u7684\u65f6\u5019,\u9020\u8fd9\u4e09\u4e2a\u5b50\u8fdb\u7a0b\u7684\u4fe1\u53f7start\u65e9\u5c31\u53d1\u7ed9OS\u5566. # \u8fdb\u7a0b\u53ea\u8981start\u5c31\u4f1a\u5728\u5f00\u59cb\u8fd0\u884c\u4e86,\u6240\u4ee5p1-p3.start()\u65f6,\u7cfb\u7edf\u4e2d\u5df2\u7ecf\u6709\u56db\u4e2a(\u4e00\u7236\u4e09\u5b50)\u5e76\u53d1\u7684\u8fdb\u7a0b\u4e86 # -- \u7236\u8fdb\u7a0b\u7b49p1\u7528\u4e865s,\u4f46\u5728\u7b49\u7684\u8fc7\u7a0b\u4e2dp2,p3\u4e5f\u5728\u8fd0\u884c # \u8fd0\u884cp2.join()\u65f6,p1,p2\u5df2\u7ecf\u6267\u884c\u5b8c\u4e86(p2\u53ea\u9700\u89812s),\u5c31\u4e0d\u7528\u7b49\u4e86 \u5373\u8be5\u884c\u4ee3\u7801\u6ca1\u6709\u4efb\u4f55\u7684\u963b\u585e # \u8fd0\u884cp3.join()\u65f6,p3\u5df2\u7ecf\u6267\u884c\u4e865s,\u8fd8\u9700\u6267\u884c1s # \u2605 So,\u6362\u4e00\u6362p1\u3001p2\u3001p3 join\u7684\u987a\u5e8f,\u8c01\u5148\u8c01\u540e\u90fd\u4e00\u6837!\u5171\u8fd0\u884c\u7684\u65f6\u95f4\u662f\u4e00\u6837\u7684!! # \u2605 3\u4e2ajoin\u82b1\u8d39\u7684\u603b\u65f6\u95f4\u4ecd\u7136\u662f\u8017\u8d39\u65f6\u95f4\u6700\u957f\u7684\u90a3\u4e2a\u5b50\u8fdb\u7a0b\u8fd0\u884c\u7684\u65f6\u95f4 print ( \"\u7b49p1\u7ed3\u675f..\" ) p1 . join () print ( \"\u7b49p2\u7ed3\u675f..\" ) p2 . join () print ( \"\u7b49p3\u7ed3\u675f..\" ) p3 . join () end_time = time . time () print ( \"\u5171\u8fd0\u884c:\" , end_time - start_time ) \"\"\" \u7b49p1\u7ed3\u675f.. \u5b50\u8fdb\u7a0b1 is running! \u5b50\u8fdb\u7a0b2 is running! \u5b50\u8fdb\u7a0b3 is running! \u5b50\u8fdb\u7a0b2 is done! \u5b50\u8fdb\u7a0b1 is done! \u7b49p2\u7ed3\u675f.. \u7b49p3\u7ed3\u675f.. \u5b50\u8fdb\u7a0b3 is done! \u5171\u8fd0\u884c: 6.1702961921691895 # -- 6s\u591a\u4e00\u70b9,\u591a\u7684\u8fd9\u4e00\u70b9\u662fOS\u521b\u5efa\u8fdb\u7a0b\u4ee5\u53ca\u5207\u6362\u8fdb\u7a0b\u7684\u65f6\u95f4 \"\"\" \u871c\u6c41\u64cd\u4f5c: \u5982\u679c\u5206\u8981\u628ap1\u3001p2\u3001p3\u4e09\u4e2a\u5b50\u8fdb\u7a0b\u53d8\u6210\u4e32\u884c\u5462\uff1f (\u81ea\u5df1\u53ef\u4ee5\u8fd9\u6837\u73a9, \u5199\u7a0b\u5e8f\u8fd9\u4e48\u5199,\u7eaf\u7eaf\u7684\u778e\u641e! \u5b50\u8fdb\u7a0b\u4e32\u884c,\u8fd8\u4e0d\u5982\u4f9d\u6b21\u6267\u884c\u4e09\u4e2a\u51fd\u6570\u8282\u7701\u8fdb\u7a0b\u7684\u5f00\u9500.Hhh) start_time = time . time () p1 . start () print ( \"\u7b49p1\u7ed3\u675f..\" ) p1 . join () p2 . start () print ( \"\u7b49p2\u7ed3\u675f..\" ) p2 . join () p3 . start () print ( \"\u7b49p3\u7ed3\u675f..\" ) p3 . join () end_time = time . time () print ( \"\u5171\u8fd0\u884c:\" , end_time - start_time ) # -- \u60f3\u63d0\u9192\u4e00\u70b9\u7684\u662f,\u7236\u8fdb\u7a0b\u6267\u884c`p1.start()`\u8bed\u53e5.OS\u5c31\u5f00\u59cb\u7740\u624b\u4e8e\u521b\u5efa\u8fdb\u7a0bp1\u5e76\u5f00\u59cb\u6267\u884c. # \u7236\u8fdb\u7a0b\u53d1\u5b8c\u4fe1\u53f7\u540e,\u63a5\u7740\u4f1a\u6267\u884c`print(\"\u7b49p1\u7ed3\u675f..\")`\u8bed\u53e5 # \u7ec8\u7aef\u5c4f\u5e55\u4e0a\u5148\u6253\u5370\"\u7b49p1\u7ed3\u675f..\",\u518d\u6253\u5370\"\u5b50\u8fdb\u7a0b1 is running!\" # \u662f\u56e0\u4e3a\u7236\u8fdb\u7a0b\u4e0e\u5b50\u8fdb\u7a0bp1\u662f\u5e76\u53d1\u6267\u884c\u7684!!!\u770b\u8c01\u5148\u6267\u884c\u7f62\u4e86. \"\"\" \u7b49p1\u7ed3\u675f.. \u5b50\u8fdb\u7a0b1 is running! \u5b50\u8fdb\u7a0b1 is done! \u7b49p2\u7ed3\u675f.. \u5b50\u8fdb\u7a0b2 is running! \u5b50\u8fdb\u7a0b2 is done! \u7b49p3\u7ed3\u675f.. \u5b50\u8fdb\u7a0b3 is running! \u5b50\u8fdb\u7a0b3 is done! \u5171\u8fd0\u884c: 13.303465843200684 \"\"\"","title":"\u4e3e\u4e00\u53cd\u4e09"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/6_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%94%A8/#_14","text":"import time from multiprocessing import Process def task ( x , n ): print ( f \" { x } is running!\" ) time . sleep ( n ) print ( f \" { x } is done!\" ) if __name__ == '__main__' : # p1 = Process(target=task, args=('\u5b50\u8fdb\u7a0b1', 1)) # p2 = Process(target=task, args=('\u5b50\u8fdb\u7a0b2', 2)) # p3 = Process(target=task, args=('\u5b50\u8fdb\u7a0b3', 3)) # p1.start() # p2.start() # p3.start() p_list = [] # -- \u91cc\u9762\u653e\u7684\u662f\u4e09\u4e2a\u8fdb\u7a0b\u5bf9\u8c61 for i in range ( 1 , 4 ): p = Process ( target = task , args = ( f '\u5b50\u8fdb\u7a0b { i } ' , i )) p_list . append ( p ) # -- \u6ce8\u610f:\u968f\u7740\u5faa\u73af,p\u53d8\u91cf\u7684\u6307\u5411\u662f\u6700\u540e\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u7684\u5185\u5b58\u5730\u5740 # \u6240\u4ee5\u5f97\u5c06\u8fdb\u7a0b\u5bf9\u8c61\u653e\u5165\u5217\u8868\u8fdb\u884c\u4fdd\u5b58 p . start () # -- \u5faa\u73af\u4e09\u6b21\u53d1\u9001\u4e09\u4e2a\u4fe1\u53f7 # p1.start() # p2.start() # p3.start() for p in p_list : p . join ()","title":"\u4ee3\u7801\u4f18\u5316"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/6_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%94%A8/#pid","text":"pid -- \u8fdb\u7a0bid\u53f7,\u5373\u8fdb\u7a0b\u5728\u64cd\u4f5c\u7cfb\u7edf\u5185\u7684\u8eab\u4efd\u8bc1\u53f7,\u72ec\u4e00\u65e0\u4e8c\u7684 paid -- \u5f53\u524d\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\u7684pid..","title":"pid\u5c5e\u6027"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/6_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%94%A8/#py","text":"import time from multiprocessing import Process def task ( x , n ): print ( f \" { x } is running!\" ) time . sleep ( n ) print ( f \" { x } is done!\" ) if __name__ == '__main__' : p1 = Process ( target = task , args = ( '\u5b50\u8fdb\u7a0b1' , 10 )) # print(p1.pid) # None -- \u5b50\u8fdb\u7a0b\u8fd8\u6ca1\u5f00\u59cb\u521b\u5efa\u5462,\u5f53\u7136\u6ca1\u6709 p1 . start () print ( p1 . pid ) # -- 18689 print ( \"\u4e3b\" ) \u6211\u4eec\u5728\u4e0a\u8ff0\u4ee3\u7801\u4e2d,\u5c06\u5b50\u8fdb\u7a0b\u6267\u884c\u65f6\u95f4\u8bbe\u7f6e\u4e3a10s. \u4fdd\u8bc1\u5b50\u8fdb\u7a0b\u8fd8\u5728\u6267\u884c\u65f6, \u5728cmd\u4e2d\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4. windows: tasklist | findstr 18689 linux: ps aux | grep 18689 | grep -v grep # -- Mac\u4e0b\u663e\u793a\u7ed3\u679c One_Piece@DC\u7684MacBook ~ % ps aux | grep 18689 | grep -v grep One_Piece ... ... ... /Library/Frameworks/Python.framework/Versions/3.8.../Python -c from multiprocessing.spawn... # -- windows\u4e0b\u663e\u793a\u7ed3\u679c C: > tasklist | findstr 18689 python.exe 10524 Console 1 12 ,792k Ps: mac\u4e0a\u663e\u793a\u7684\u7ed3\u679c..\u4e0d\u662f\u5f88\u901a\u4fd7\u6613\u61c2. \u4ee5\u540e\u7684\u7a0b\u5e8f\u90fd\u5728Linux\u4e0a\u8fd0\u884c. linux\u4e0a\u7684\u8fd0\u884c\u5b9e\u9a8c\u7ed3\u679c,\u8be6\u89c1\u524d\u9762linux\u57fa\u7840\u4e2d\"\u7ba1\u7406\u8fdb\u7a0b\"\u7ae0\u8282\u4e2d\u50f5\u5c38\u8fdb\u7a0b\u4e0e\u5b64\u513f\u8fdb\u7a0b\u4e2d\u5b9e\u9a8c\u9a8c\u8bc1\u90e8\u5206\u7684\u5185\u5bb9!!! Q: \u54c7!! \u5b50\u8fdb\u7a0b\u600e\u4e48\u662f\u4e2apython\u8fdb\u7a0b\uff1f A: \u6559\u7ed9\u5b50\u8fdb\u7a0b\u6267\u884c\u7684\u662fpython\u4ee3\u7801,python\u4ee3\u7801\u79bb\u5f00\u89e3\u91ca\u5668\u540e\u5c31\u6ca1\u6709\u6267\u884c\u4e00\u8bf4\u5566! \u5982\u4f55\u8fd0\u884c\u4e00\u4e2apython\u7a0b\u5e8f\u7684\uff1f\u628a\u89e3\u91ca\u5668\u548c\u4ee3\u7801\u4f9d\u6b21\u4ece\u786c\u76d8\u52a0\u8f7d\u5230\u5185\u5b58,\u7528python\u89e3\u91ca\u5668\u89e3\u91ca\u4ee3\u7801. \u5f00\u542f\u5b50\u8fdb\u7a0b\u7684\u8bdd,\u4e0d\u4f1a\u4ece\u786c\u76d8\u52a0\u8f7d\u4ee3\u7801,\u4f1a\u4ece\u7236\u8fdb\u7a0b\u7684\u5185\u5b58\u62f7\u8d1d\u4e00\u4efd\u4ee3\u7801\u7ed9\u5b50\u8fdb\u7a0b.. \u4e0d\u4ec5\u5982\u6b64, \u7236\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u91cc\u7684python\u89e3\u91ca\u5668\u7684\u4ee3\u7801\u4e5f\u4f1a\u62f7\u8d1d\u4e00\u4efd\u7ed9\u5b50\u8fdb\u7a0b..","title":"\u5b50\u8fdb\u7a0b\u662fpy\u8fdb\u7a0b"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/6_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%94%A8/#pid_1","text":"\u7236\u8fdb\u7a0b\u7684\u7239\u662f\u8fd0\u884c\u8be5py\u6587\u4ef6\u7684\u7a0b\u5e8f, \u5728pycharm\u91cc\u8fd0\u884c\u5c31\u662fpycharm,\u5728cmd\u91cc\u8fd0\u884c\u5c31\u662fcmd!! import os import time from multiprocessing import Process def task (): print ( f \"\u5b50\u8fdb\u7a0b\u91cc\u770b\u81ea\u4e2a\u513fpid: { os . getpid () } \" ) print ( f \"\u5b50\u8fdb\u7a0b\u91cc\u770b\u7236\u8fdb\u7a0bpid: { os . getppid () } \" ) time . sleep ( 10 ) if __name__ == '__main__' : p1 = Process ( target = task ) p1 . start () print ( \"\u7236\u8fdb\u7a0b\u91cc\u770b\u5b50\u8fdb\u7a0bpid:\" , p1 . pid ) print ( \"\u7236\u8fdb\u7a0b\u91cc\u770b\u81ea\u4e2a\u513fpid:\" , os . getpid ()) print ( \"\u67e5\u770b\u7236\u8fdb\u7a0b\u5b83\u7239\u7684pid:\" , os . getppid ()) \"\"\" \u7236\u8fdb\u7a0b\u91cc\u770b\u5b50\u8fdb\u7a0bpid: 19344 \u7236\u8fdb\u7a0b\u91cc\u770b\u81ea\u4e2a\u513fpid: 19342 \u5b50\u8fdb\u7a0b\u91cc\u770b\u81ea\u4e2a\u513fpid: 19344 \u5b50\u8fdb\u7a0b\u91cc\u770b\u7236\u8fdb\u7a0bpid: 19342 \"\"\" \u6269\u5c55\u8bf4\u4e00\u70b9,\u5173\u4e8elinux\u4e2d\u7236\u8fdb\u7a0b\u7ec8\u6b62\u540e\u7684\u73b0\u8c61(\u6709\u5360\u7528\u7ec8\u7aef\u524d\u53f0\u8fd0\u884c,\u548c\u4e0d\u5360\u7528\u7ec8\u7aef\u7684\u540e\u53f0\u8fd0\u884c\u4e00\u8bf4).. \u8be6\u89c1linux\u57fa\u7840\u4e2d\"\u7ba1\u7406\u8fdb\u7a0b\"\u7ae0\u8282!! \u770b\u4e00\u4e2a\u8fdb\u7a0b\u6709\u6ca1\u6709\u88ab\u7ec8\u6b62,\u7528\u547d\u4ee4\u67e5\u770b,\u4e0d\u8981\u88ab\u8868\u8c61\u8ff7\u60d1!! (\u5f04\u4e2aVMware\u865a\u62df\u673a\u5b89\u88c5\u4e2acentos7\u6765\u5b9e\u9a8c.. \u522b\u5728windows\u548cmac\u4e0a\u5b9e\u9a8c,\u6709\u4e9b\u5b9e\u9a8c\u7ed3\u679c\u4e0d\u4e00\u81f4.\u5c31\u5f88\u70e6.\u60f3\u4e0d\u901a\u5c31\u4e0d\u8981\u60f3\u4e86,\u4ee5linux\u4e0a\u7684\u5b9e\u9a8c\u7ed3\u679c\u4e3a\u51c6!\u256e(\uffe3\u25bd\uffe3\"\")\u256d)","title":"PID\u67e5\u770b"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/6_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%94%A8/#joinpid","text":"\u7591\u60d1\u4e4b\u5904: p.join() \u6700\u540e\u4e0d\u662f\u4f1a\u56de\u6536\u50f5\u5c38\u8fdb\u7a0b\u6240\u5360\u7528\u7684\u8d44\u6e90\u561b,\u90a3\u4e3a\u5565join\u540e\u8fd8\u80fd\u6253\u5370p.pid\u5462\uff1f \u8bda\u7136, \u6267\u884cjoin\u64cd\u4f5c\u4f1a,\u4f1a\u56de\u6536\u50f5\u5c38\u8fdb\u7a0b\u5360\u7528\u7684\u8d44\u6e90(eg:pid). \u4f46\u8be5\u56de\u6536\u64cd\u4f5c\u662f\u5220\u9664\u7236\u8fdb\u7a0bnamespace\u91ccp\u5bf9\u8c61\u4e0b\u9762\u7684pid\u5c5e\u6027\u5417? no!! \u56de\u6536\u7684\u662fOS\u7684\u8d44\u6e90 - OS\u6240\u5360\u7528\u7684PID ; \u4e0d\u4f1a\u5f71\u54cdpython\u7a0b\u5e8f\u7684\u8d44\u6e90 - p\u5bf9\u8c61\u91cc\u9762pid.. Ps: \u56de\u6536\u7684\u50f5\u5c38\u8fdb\u7a0b\u4f1a\u6807\u8bb0\u4e3afree\u72b6\u6001(\u6d89\u53ca\u5230linux\u6587\u4ef6\u7cfb\u7edf\u4e2d\u5220\u9664\u540e\u7684inode\u53f7).. \u4e3e\u4e2a \u6781\u7aef \u7684\u4f8b\u5b50 ,\u5982\u679c\u6ca1\u6709\u50f5\u5c38\u8fdb\u7a0b\u8fd9\u79cd\u673a\u5236,\u8fdb\u7a0b\u4e00\u7ed3\u675f,\u5c31\u56de\u6536\u6240\u6709\u7684\u8d44\u6e90.. \u53ef\u80fd\u4f1a\u5bfc\u81f4py\u7a0b\u5e8f\u91cc p.start() \u7ed9OS\u53d1\u9001\u4fe1\u53f7\u540e,\u7acb\u523b\u67e5\u770b p.pid ,\u67e5\u770b\u4e0d\u5230, \u56e0\u4e3a\u6b64\u65f6OS\u8fd8\u6ca1\u6765\u5f97\u53ca\u7ed9\u8be5\u5b50\u8fdb\u7a0b\u5206\u914dpid\u53f7.. Hhh Amazing. import time from multiprocessing import Process def task (): time . sleep ( 3 ) if __name__ == '__main__' : p = Process ( target = task ) p . start () # -- \u4e00\u65e6\u6267\u884c\u5c31\u4f1a\u7ed9\u5b50\u8fdb\u7a0b\u7533\u8bf7\u5230\u4e00\u4e2apid\u53f7 print ( p . pid ) # 20344 p . join () print ( p . pid ) # 20344 print ( \"\u4e3b\" )","title":"\u6ce8\u610f:join\u4e0epid"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/6_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%94%A8/#name","text":"current_process().name \u67e5\u770b\u5f53\u524d\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u540d import time from multiprocessing import Process , current_process def task (): print ( f \"\u5b50\u8fdb\u7a0b\u91cc\u770b\u5b50\u8fdb\u7a0b\u7684\u540d\u5b57: { current_process () . name } \" ) time . sleep ( 10 ) if __name__ == '__main__' : p1 = Process ( target = task , name = \"\u5b50\u8fdb\u7a0b1\" ) # -- \u4e0d\u8bbe\u7f6ename\u5c5e\u6027\u7684\u8bdd,\u9ed8\u8ba4\u662fProcess-1 p1 . start () print ( \"\u7236\u8fdb\u7a0b\u91cc\u770b\u7236\u8fdb\u7a0b\u7684\u540d\u5b57:\" , p1 . name ) print ( current_process () . name ) \"\"\" \u7236\u8fdb\u7a0b\u91cc\u770b\u7236\u8fdb\u7a0b\u7684\u540d\u5b57: \u5b50\u8fdb\u7a0b1 MainProcess \u5b50\u8fdb\u7a0b\u91cc\u770b\u5b50\u8fdb\u7a0b\u7684\u540d\u5b57: \u5b50\u8fdb\u7a0b1 \"\"\"","title":"name\u5c5e\u6027"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/6_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%94%A8/#terminateis_alive","text":"import time from multiprocessing import Process def task ( n ): time . sleep ( n ) if __name__ == '__main__' : p1 = Process ( target = task , name = \"\u5b50\u8fdb\u7a0b1\" , args = ( 2 ,)) p2 = Process ( target = task , name = \"\u5b50\u8fdb\u7a0b1\" , args = ( 5 ,)) p1 . start () # -- \u53ea\u8981\u4fe1\u53f7\u4e00\u53d1\u51fa,\u5b50\u8fdb\u7a0b\u5c31\u5904\u4e8e\u6d3b\u7740\u7684\u72b6\u6001 p2 . start () print ( p1 . is_alive ()) # True print ( p2 . is_alive ()) # True p1 . terminate () # -- \u7ed9OS\u53d1\u9001SIGTERM\u4fe1\u53f7,\u8868\u660e\u7ec8\u6b62\u8be5\u5b50\u8fdb\u7a0b\u7684.. \u4f46OS\u5565\u65f6\u5019\u7ec8\u6b62OS\u8bf4\u7684\u7b97 # \u51e0\u4e4e\u6ca1\u6709terminate()\u7684\u4f7f\u7528\u573a\u666f,\u4e86\u89e3\u5373\u53ef time . sleep ( 0.1 ) # -- 0.1s\u7684\u65f6\u95f4\u8db3\u591fOS\u7ec8\u6b62p1\u8fdb\u7a0b\u5566 print ( p1 . is_alive ()) # False # time.sleep(3) p2 . join () # -- p1,p2\u4e24\u4e2a\u5b50\u8fdb\u7a0b\u662f\u5e76\u53d1\u6267\u884c,p1\u3001p2\u6267\u884c\u5206\u522b\u9700\u89812s\u30015s,p2\u6267\u884c\u5b8c\u65f6p1\u65e9\u5df2\u7ecf\u6267\u884c\u5b8c print ( p1 . is_alive ()) # False print ( p2 . is_alive ()) # False","title":"terminate,is_alive"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/7_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%9F%A5/","text":"\u5b88\u62a4\u8fdb\u7a0b \u00b6 \u5b88\u62a4 \u5373 \u4f34\u968f! \u5b88\u62a4\u8fdb\u7a0b\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\"\u5b50\u8fdb\u7a0b\". \u5b88\u62a4\u8fdb\u7a0b\u7684 \u751f\u547d\u5468\u671f \u4f1a\u4f34\u968f\u7740 \u4e3b\u8fdb\u7a0b\u7684\u4ee3\u7801\u8fd0\u884c\u5b8c\u6bd5 \u800c\u7ed3\u675f/\u81ea\u52a8\u9500\u6bc1. \u53ea\u5b88\u62a4\u4e3b\u8fdb\u7a0b\u4ee3\u7801\u8fd0\u884c\u7684\u8fc7\u7a0b! \u6ce8\u610f\u54e6!\u4e3b/\u7236\u8fdb\u7a0b\u7684\u6d3b\u5e72\u5b8c\u4e86,\u4e0d\u610f\u5473\u7740\u4e3b\u8fdb\u7a0b\u5c31\u7ed3\u675f\u4e86!! \u7236\u8fdb\u7a0b\u4f1a\u7b49\u7740\u6240\u6709\u5b50\u8fdb\u7a0b\u6b7b\u6389\u540e,\u7ed9\u5b83\u4eec\u6536\u5c38.. Q: \u4e3a\u4ec0\u4e48\u8981\u7528\u5b88\u62a4\u8fdb\u7a0b\uff1f A: \u4ece\u4e24\u4e2a\u5173\u952e\u5b57\u5165\u624b\u5206\u6790 1> \u8fdb\u7a0b: \u5f53\u7236\u8fdb\u7a0b\u9700\u8981\u5c06\u4e00\u4e2a\u4efb\u52a1\u5e76\u53d1\u51fa\u53bb\u6267\u884c,\u53ef\u4ee5\u5f00\u542f\u4e00\u4e2a\u5b50\u8fdb\u7a0b. 2> \u5b88\u62a4: \u82e5\u5b50\u8fdb\u7a0b\u5728\u7236\u8fdb\u7a0b\u4ee3\u7801\u8fd0\u884c\u5b8c\u6bd5\u540e\u5c31\u6ca1\u6709\u5b58\u5728\u7684\u610f\u4e49\u4e86. \u5c31\u5e94\u8be5\u5c06\u8be5\u5b50\u8fdb\u7a0b\u8bbe\u7f6e\u4e3a\u5b88\u62a4\u8fdb\u7a0b,\u4f1a\u5728\u7236\u8fdb\u7a0b\u4ee3\u7801\u7ed3\u675f\u540e\u6b7b\u6389 (\u8fd9\u4e0d\u662f\u50f5\u5c38\u54e6!\u6b7b\u6389\u8d44\u6e90\u4f1a\u5168\u90e8\u91ca\u653e) daemon\u5c5e\u6027 \u00b6 p1.daemon = True \u4e00\u5b9a\u8981\u653e\u5230 p1.start() \u4e4b\u524d!! import time from multiprocessing import Process def task ( x ): print ( f \" { x } is running!\" ) time . sleep ( 3 ) if __name__ == '__main__' : p1 = Process ( target = task , args = ( \"\u5b88\u62a4\u8fdb\u7a0b\" ,)) p2 = Process ( target = task , args = ( \"\u6b63\u5e38\u7684\u5b50\u8fdb\u7a0b\" ,)) p1 . daemon = True # -- \u4e00\u5b9a\u8981\u653e\u5230p1.start()\u4e4b\u524d p1 . start () p2 . start () print ( \"\u4e3b\" ) \"\"\" \u4e3b \u6b63\u5e38\u7684\u5b50\u8fdb\u7a0b is running! \"\"\" \u8bbe\u7f6e\u5b50\u8fdb\u7a0bp1\u4e3a\u5b88\u62a4\u8fdb\u7a0b; \u63a5\u7740\u53d1\u9001\u4e86\u4e24\u4e2a\u4fe1\u53f7,OS\u8fd8\u6ca1\u628a\u8fdb\u7a0b\u9020\u51fa\u6765,\u6ca1\u6765\u5f97\u53ca\u8fd0\u884cp1\u3001p2\u7684\u4ee3\u7801\u5462. \u7236\u8fdb\u7a0b\u5c31\u5df2\u7ecf\u628a print(\"\u4e3b\") \u8fd0\u884c\u5566! \u4e00\u65e6\u5728\u5c4f\u5e55\u4e2d\u6253\u5370\u51fa\"\u4e3b\"\u5c31\u610f\u5916\u7740\u7236\u8fdb\u7a0b\u4ee3\u7801\u8fd0\u884c\u5b8c\u6bd5,\u5b88\u62a4\u8fdb\u7a0bp1\u5c06\u4f1a\u7ed3\u675f\u751f\u547d!! \u5373\u5b88\u62a4\u8fdb\u7a0bp1\u6ca1\u6709\u673a\u4f1a\u518d\u8fd0\u884c\u81ea\u5df1\u7684\u4ee3\u7801.. \u800c\u7236\u8fdb\u7a0b\u4f1a\u7b49\u7740p2\u5b50\u8fdb\u7a0b\u8fd0\u884c\u5b8c,\u66ff\u5b83\u6536\u5b8c\u5c38\u540e,\u518d\u5b89\u8be6\u7684\u6b7b\u53bb. \u8ff7\u60d1\u4eba\u7684\u4f8b\u5b50 \u00b6 \u5173\u952e\u5728\u4e8e\u7406\u89e3\u5b88\u62a4\u8fdb\u7a0b\u4ec0\u4e48\u65f6\u5019\u6b7b\u6389. \u65f6\u523b\u8981\u6709\u5e76\u53d1\u7684\u601d\u60f3! import time from multiprocessing import Process def foo (): print ( 123 ) time . sleep ( 1 ) print ( \"end123\" ) def bar (): print ( 456 ) time . sleep ( 3 ) print ( \"end456\" ) if __name__ == '__main__' : p1 = Process ( target = foo ) p2 = Process ( target = bar ) p1 . daemon = True p1 . start () # -- \u73b0\u76ee\u524d\u7684\u79d1\u6280\u6c34\u5e73\u51e0\u4e4e\u4e0d\u53ef\u80fd\u53d1\u4fe1\u53f7\u7684\u540c\u65f6,OS\u5c31\u628ap1\u9020\u51fa\u6765..\u56e0\u4e3a\u9020p1\u5f97\u7533\u8bf7\u5185\u5b58\u7a7a\u95f4\u7b49. p2 . start () print ( \"main\" ) # -- \u6267\u884c\u8fc7\u7a0b:\u5728\u5185\u5b58\u4e2d\u9020\u4e2a\u5b57\u7b26\u4e32\"\u4e3b\",\u4ece\u5185\u5b58\u4e2d\u53d6\u4e3b\u8fdb\u7a0b\u9020\u597d\u7684\u5b57\u7b26\u4e32\"\u4e3b\",\u6254\u5230\u5c4f\u5e55\u4e2d\u663e\u793a. \"\"\" -- \u5728\u6267\u884c\u5b8c`print(\"main\")`,p1\u3001p2\u90fd\u8fd8\u6ca1\u9020\u51fa\u6765\u5462.(\u6211\u4eec\u7684\u673a\u5668\u666e\u904d\u90fd\u662f\u8fd9\u4e2a\u7ed3\u679c) main 456 end456 \"\"\" \"\"\" -- \u5728\u6267\u884c`print(\"main\")`\u8fc7\u7a0b\u4e2d,p1\u9020\u51fa\u6765\u5566.\u4f1a\u7acb\u523b\u6267\u884cp1\u8fdb\u7a0b\u91cc\u7684\u4ee3\u7801.\u628a\"123\"\u6254\u5230\u5c4f\u5e55\u4e0a \u4f46\u603b\u6709\u4e2a\u5148\u6765\u540e\u5230,\u5148\"\u4e3b\"\u3001\u540e\"123\".(\u673a\u5668\u7684\u6027\u80fd\u6bd4\u8f83\u5353\u8d8a) main 123 456 end456 \"\"\" \"\"\" -- \u5728\u6267\u884c`p2.start()`\u8fc7\u7a0b\u4e2d,p1\u9020\u51fa\u6765\u5566!(\u673a\u5668\u7684\u6027\u80fd\u8d85\u7ea7\u725b\u76ae) 123 main 456 end456 \"\"\" \u4e92\u65a5\u9501 \u00b6 \u8fdb\u7a0b\u4e4b\u95f4\u9700\u8981\u901a\u4fe1,\u4f46\u8fdb\u7a0b\u4e4b\u95f4\u5185\u5b58\u662f\u9694\u79bb\u7684 \u4e92\u65a5\u9501\u5c06\u591a\u4e2a\u5e76\u53d1\u7684\u4efb\u52a1\u5bf9\u4fee\u6539\u5171\u4eab\u6570\u636e\u7684\u64cd\u4f5c\u53d8\u6210\u4e32\u884c,\u727a\u7272\u4e86\u6548\u7387,\u4f46\u4fdd\u8bc1\u4e86\u6570\u636e\u7684\u5b89\u5168\u6027! \u6a21\u62df\u591a\u4eba\u62a2\u7968 \u00b6 # -- db.txt \u6587\u4ef6\u5f53\u4f5c\u6570\u636e\u5e93 { \"count\" , 1 } \u5e76\u53d1\u62a2\u7968 \u00b6 \u62a2\u7968\u8981\u7ecf\u5386\u4e24\u4e2a\u9636\u6bb5,\u67e5\u7968\u73af\u8282\u548c\u8d2d\u7968\u73af\u8282. import json import os import random import time from multiprocessing import Process def check (): with open ( 'db.txt' , 'rt' , encoding = 'utf-8' ) as f : dic = json . load ( f ) time . sleep ( random . randint ( 1 , 3 )) print ( f \" { os . getpid () } \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a: { dic [ 'count' ] } ! \" ) # -- \u8d2d\u7968\u903b\u8f91:\u5148\u67e5\u7968 -- \u4f59\u7968\u51cf\u4e00 -- \u518d\u5199\u56de\u6570\u636e\u6587\u4ef6. def get (): # -- \u8d2d\u7968\u7684\u65f6\u5019,\u7968\u53ef\u80fd\u5df2\u7ecf\u88ab\u62a2\u8d70\u4e86,\u6240\u4ee5\u8d2d\u7968\u65f6\u8fd8\u5f97\u67e5\u8be2\u4e00\u4e0b with open ( 'db.txt' , 'rt' , encoding = 'utf-8' ) as f : # -- S\u7aef\u5f00\u59cb\u67e5\u6570\u636e dic = json . load ( f ) time . sleep ( random . randint ( 1 , 3 )) # -- \u6a21\u62dfC\u7aef\u8bfb\u6570\u636e\u7684\u7f51\u7edc\u5ef6\u8fdf S-->C # (\u67e5\u5230\u7684\u6570\u636e\u89811-3S\u624d\u80fd\u5230C\u7aef) # -- \u5f00\u59cb\u8d2d\u7968 if dic [ 'count' ] > 0 : dic [ 'count' ] -= 1 # -- \u4ec5\u4ec5\u53ea\u662f\u5728\u5185\u5b58\u91cc\u7684\u64cd\u4f5c,\u5f97\u5237\u65b0\u5230\u786c\u76d8db.txt\u6587\u4ef6\u91cc time . sleep ( random . randint ( 1 , 3 )) # -- \u6a21\u62dfS\u7aef\u5199\u6570\u636e\u7684\u7f51\u7edc\u5ef6\u8fdf C-->S # (\u8981\u5199\u5165\u7684\u6570\u636e\u89811-3S\u624d\u80fd\u5230\u8fbeS\u7aef) with open ( 'db.txt' , 'wt' , encoding = 'utf-8' ) as f : # -- S\u7aef\u5f00\u59cb\u5199\u5165\u6570\u636e json . dump ( dic , f ) print ( f \" { os . getpid () } \u60a8\u8d2d\u7968\u6210\u529f!\" ) else : print ( f \"\u5c0a\u656c\u7684 { os . getpid () } \u7528\u6237:\u6ca1\u6709\u4f59\u7968\u5566!\u8d2d\u7968\u5931\u8d25!\" ) def task (): check () # -- \u67e5\u7968 get () # -- \u8d2d\u7968 if __name__ == '__main__' : # -- \u6a21\u62df\u591a\u4e2a\u4eba\u5e76\u53d1\u8bf7\u62a2\u7968 for _ in range ( 10 ): p = Process ( target = task ) p . start () \u95ee\u9898\u5206\u6790 \u00b6 \u5e76\u53d1\u8fd0\u884c\u6548\u7387\u9ad8,\u4f46\u7ade\u4e89\u5199\u5165\u540c\u4e00\u6587\u4ef6,\u6570\u636e\u5199\u5165\u9519\u4e71.. # -- \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b: 23866 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a : 1 ! 23868 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a : 1 ! 23870 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a : 1 ! 23863 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a : 1 ! 23865 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a : 1 ! 23867 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a : 1 ! 23872 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a : 1 ! 23864 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a : 1 ! 23869 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a : 1 ! 23871 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a : 1 ! 23868 \u60a8\u8d2d\u7968\u6210\u529f ! 23865 \u60a8\u8d2d\u7968\u6210\u529f ! 23866 \u60a8\u8d2d\u7968\u6210\u529f ! 23867 \u60a8\u8d2d\u7968\u6210\u529f ! 23870 \u60a8\u8d2d\u7968\u6210\u529f ! 23872 \u60a8\u8d2d\u7968\u6210\u529f ! 23863 \u60a8\u8d2d\u7968\u6210\u529f ! 23864 \u60a8\u8d2d\u7968\u6210\u529f ! 23871 \u60a8\u8d2d\u7968\u6210\u529f ! 23869 \u60a8\u8d2d\u7968\u6210\u529f ! Amazing\u554a,\u53ea\u6709\u4e00\u5f20\u7968,\u7ed3\u679c10\u4e2a\u4eba\u5168\u90e8\u8d2d\u7968\u6210\u529f,\u5947\u4e86\u4e2a\u602a\u4e86! (\u3064\u0414`)\u30ce \u95ee\u9898\u7684\u6839\u6e90\u51fa\u5728: \u67e5\u7968\u53ef\u4ee5\u5e76\u53d1,\u4f46 \u8d2d\u7968\u4e0d\u80fd\u5e76\u53d1 .. \u8d2d\u7968\u7684\u903b\u8f91\u4e00\u5b9a\u662f\u4e09\u6b65\u8d70,\u5148\u67e5\u7968 - \u6709\u7968\u5219\u4f59\u7968\u51cf1 - \u518d\u5199\u56de\u6570\u636e\u6587\u4ef6. \u56e0\u4e3a\u6709\u7f51\u7edc\u5ef6\u8fdf\u7684\u7f18\u6545,10\u4e2a\u4eba\u67e5\u5230\u7684\u7968\u90fd\u662f\u4e00\u6837\u7684\u7ed3\u679c,\u90fd\u51cf\u4e00\u91cd\u65b0\u8986\u76d6\u6389\u6570\u636e\u6587\u4ef6.. \u4e0d\u5c31\u610f\u5473\u774010\u4e2a\u4eba\u8d2d\u4e70\u5230\u7684\u662f\u540c\u4e00\u5f20\u7968\u5417? \u6240\u4ee5\u62a2\u7968\u4e0d\u80fd\u5e76\u53d1\u7740\u6765! \u5f97\u4e00\u4e2a\u4e00\u4e2a\u6765! \u5177\u4f53\u6765\u8bf4, \u8be5\u62a2\u7968\u7a0b\u5e8f\u4e2d\u5171\u6709\u4e09\u5904 time.sleep(random.randint(1, 3)) \u8bed\u53e5 \u6a21\u62df\u4e86\u4e09\u6b21\u7f51\u7edc\u5ef6\u8fdf. \u7b2c\u4e00\u6b21: \u6700\u5c111s\u7684\u5ef6\u8fdf,\u5df2\u7ecf\u8ba910\u4e2a\u5e76\u53d1\u7684\u5b50\u8fdb\u7a0b\u90fd\u67e5\u8be2\u5230\u4e86\u5269\u4f59\u7968\u6570. \u7b2c\u4e8c\u6b21: \u540c\u4e0a.\u8ddf\u7b2c\u4e00\u6b21\u4e00\u6837\u662f\u8bfb\u6570\u636e. \u800c\u4e1410\u4e2a\u4eba\u83b7\u53d6\u5230\u7684\u5269\u4f59\u7968\u6570\u90fd\u662f\u4e00\u6837\u7684! \u7b2c\u4e09\u6b21: \u5f00\u59cb\u8d2d\u7968,10\u4e2a\u5b50\u8fdb\u7a0b\u90fd\u5148\u4fee\u6539\u4e86\u81ea\u5df1\u5185\u5b58\u4e2d\u7684\u6570\u636e.\u4f9d\u6b21\u5199\u5165db.txt.\u4f46\u6bcf\u6b21\u7684\u5199\u5165\u90fd\u662f {\"count\",0} . \u4e32\u884c\u62a2\u7968 \u00b6 \u8981\u4fdd\u8bc1\u5171\u4eab\u6570\u636e\u7684\u5b89\u5168, \u4fee\u6539\u5171\u4eab\u6570\u636e\u7684\u884c\u4e3a\u5c31\u4e0d\u80fd\u8ba9\u5176\u5e76\u53d1\u7684\u53bb\u8fd0\u884c. \u4f46\u662f\u6548\u7387\u53d8\u4f4e\u5566!! \u90a3\u4e48,\u5c06\u5e76\u53d1\u62a2\u7968\u7a0b\u5e8f\u6539\u4e3a \u4e32\u884c (\u4e00\u4e2a\u8fdb\u7a0b\u5b8c\u5b8c\u6574\u6574\u6267\u884c\u5b8c\u540e,\u624d\u4f1a\u6267\u884c\u4e0b\u4e00\u4e2a\u8fdb\u7a0b) \u53ef\u4ee5\u5417\uff1fyes. \u56e0\u4e3a\u7b2c\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u8d70\u4e86\u4e00\u904d\u8d2d\u7968\u6d41\u7a0b\u540e,\u6570\u636e\u6587\u4ef6\u91cc\u7684\u4f59\u7968\u6570\u51cf\u4e00.. \u540e\u9762\u7684\u5b50\u8fdb\u7a0b\u8d2d\u7968\u884c\u4e3a\u662f\u57fa\u4e8e\u4fee\u6539\u540e\u7684\u6570\u636e\u6587\u4ef6\u8fdb\u884c\u7684\u64cd\u4f5c..\u5c31\u6ca1\u5565\u95ee\u9898\u5566!! if __name__ == '__main__' : for _ in range ( 10 ): p = Process ( target = task ) p . start () p . join () # -- \u53ea\u9700\u8981\u52a0\u8fd9\u4e00\u884c\u4ee3\u7801\u5373\u53ef! \"\"\" 23908 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a: 1! 23908 \u60a8\u8d2d\u7968\u6210\u529f! 23909 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a: 0! \u5c0a\u656c\u768423909\u7528\u6237:\u6ca1\u6709\u4f59\u7968\u5566!\u8d2d\u7968\u5931\u8d25! 23910 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a: 0! \u5c0a\u656c\u768423910\u7528\u6237:\u6ca1\u6709\u4f59\u7968\u5566!\u8d2d\u7968\u5931\u8d25! 23911 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a: 0! \u5c0a\u656c\u768423911\u7528\u6237:\u6ca1\u6709\u4f59\u7968\u5566!\u8d2d\u7968\u5931\u8d25! ... ... ... \"\"\" \u52a0\u4e92\u65a5\u9501\u89e3\u51b3 \u00b6 \u5728\u4f60\u6211\u7eb3\u95f7\u8fd9\u6548\u7387\u4e5f\u592a\u6162\u7684\u8fc7\u7a0b\u4e2d,\u5e94\u8be5\u4e5f\u654f\u9510\u7684\u53d1\u73b0\u4e86,\u4e0a\u8ff0\u7684\u4e32\u884c\u62a2\u7968\u7a0b\u5e8f\u5b58\u5728\u7684\u4e0d\u5408\u7406\u7684\u5730\u65b9.. \u67e5\u7968\u548c\u8d2d\u7968\u90fd\u53d8\u6210\u4e32\u884c\u7684\u5566!! \u5e94\u8be5\u53ea\u5c06\u8d2d\u7968\u73af\u8282\u53d8\u4e3a\u4e32\u884c,\u67e5\u7968\u73af\u8282\u5e94\u4e3a\u5e76\u53d1!! \u4e92\u65a5\u9501 \u5c31\u662f\u5c06\u67d0\u4e00\u5e76\u53d1\u64cd\u4f5c\u53d8\u6210\u4e32\u884c\u7684,\u727a\u7272\u4e86\u6548\u7387,\u4fdd\u8bc1\u4e86\u5b89\u5168! \u5b9e\u73b0\u4ee3\u7801 \u00b6 \u8fd9\u91cc\u7ed9 get() \u64cd\u4f5c\u52a0\u9501, \u8fd910\u4e2a\u8fdb\u7a0b\u8c01\u5148\u62a2\u5230\u9501,\u8c01\u8fdb\u884c\u8d2d\u7968,\u8d2d\u7968\u5b8c\u6210\u540e\u91ca\u653e\u9501,\u5176\u4f59\u8fdb\u7a0b\u518d\u62a2\u9501\u8d2d\u7968.. \u6ca1\u6709\u9501\u662f\u4e0d\u80fd\u8fdb\u884c\u8d2d\u7968\u7684!!\u9501\u53ea\u6709\u4e00\u628a,\u6240\u4ee5\u6bcf\u6b21\u8d2d\u7968\u884c\u4e3a\u90fd\u4f1a\u5b8c\u5b8c\u6574\u6574\u7684\u8fd0\u884c\u5b8c\u518d\u4f1a\u8fdb\u884c\u4e0b\u4e00\u4e2a\u8d2d\u7968. import json import os import random import time from multiprocessing import Process , Lock , set_start_method def check (): with open ( 'db.txt' , 'rt' , encoding = 'utf-8' ) as f : dic = json . load ( f ) time . sleep ( random . randint ( 1 , 3 )) print ( f \" { os . getpid () } \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a: { dic [ 'count' ] } ! \" ) def get (): with open ( 'db.txt' , 'rt' , encoding = 'utf-8' ) as f : dic = json . load ( f ) time . sleep ( random . randint ( 1 , 3 )) if dic [ 'count' ] > 0 : dic [ 'count' ] -= 1 time . sleep ( random . randint ( 1 , 3 )) with open ( 'db.txt' , 'wt' , encoding = 'utf-8' ) as f : json . dump ( dic , f ) print ( f \" { os . getpid () } \u60a8\u8d2d\u7968\u6210\u529f!\" ) else : print ( f \"\u5c0a\u656c\u7684 { os . getpid () } \u7528\u6237:\u6ca1\u6709\u4f59\u7968\u5566!\u8d2d\u7968\u5931\u8d25!\" ) def task ( mutex ): check () # -- \u53ea\u8981\u8d2d\u7968\u64cd\u4f5c\u6d89\u53ca\u5230\u5bf9\u5171\u4eab\u6570\u636e\u6539\u7684\u884c\u4e3a,\u9700\u8981\u5bf9\u8d2d\u7968\u64cd\u4f5c\u52a0\u9501 \"\"\" \u4e0b\u65b9\u7684\u4e09\u884c\u4ee3\u7801\u53ef\u4ee5\u7b80\u5199 with mutex: get() \"\"\" mutex . acquire () # -- \u52a0\u9501,\u4e92\u65a5\u9501\u4e0d\u80fd\u8fde\u7eed\u7684acquire,\u5fc5\u987b\u662frelease\u4ee5\u540e\u624d\u80fd\u91cd\u65b0acquire get () mutex . release () # -- \u91ca\u653e\u9501 if __name__ == '__main__' : \"\"\" # -- \u2605 \u7279\u522b\u8bf4\u660e \u5728mac\u4e0a\u8fd0\u884c\u52a0\u9501\u7684\u5e76\u53d1\u7a0b\u5e8f,\u9700\u8981\u5728main()\u91cc\u5f97\u52a0\u8fd9\u884c\u8bed\u53e5!!! set_start_method('fork') \u539f\u56e0:MAC\u7535\u8111\u9ed8\u8ba4\u542f\u52a8\u8fdb\u7a0b\u7684\u65b9\u5f0f\u662ffork,\u800cpython\u9ed8\u8ba4\u7684\u65b9\u5f0f\u662fspawn \u6240\u4ee5\u9700\u8981\u5c06python\u542f\u52a8\u8fdb\u7a0b\u7684\u65b9\u5f0f\u505a\u4fee\u6539 \"\"\" set_start_method ( 'fork' ) mutex = Lock () # -- \u5728\u7236\u8fdb\u7a0b\u91cc\u9020\u4e86\u4e2a\u4e92\u65a5\u9501\u5bf9\u8c61 for _ in range ( 10 ): p = Process ( target = task , args = ( mutex ,)) # -- \u901a\u8fc7\u53c2\u6570\u4f20\u9012\u8ba9\u6bcf\u4e2a\u5b50\u8fdb\u7a0b\u90fd\u53bb\u62a2\u8fd9\u628a\u9501 p . start () \"\"\" 24528 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a: 1! 24530 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a: 1! 24526 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a: 1! ... ... ... 24534 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a: 1! 24528 \u60a8\u8d2d\u7968\u6210\u529f! \u5c0a\u656c\u768424530\u7528\u6237:\u6ca1\u6709\u4f59\u7968\u5566!\u8d2d\u7968\u5931\u8d25! \u5c0a\u656c\u768424526\u7528\u6237:\u6ca1\u6709\u4f59\u7968\u5566!\u8d2d\u7968\u5931\u8d25! ... ... ... \u5c0a\u656c\u768424534\u7528\u6237:\u6ca1\u6709\u4f59\u7968\u5566!\u8d2d\u7968\u5931\u8d25! \"\"\" step1: \u7236\u8fdb\u7a0b\u5f88\u5feb\u7684\u53d1\u5b8c10\u4e2a\u4fe1\u53f7,10\u4e2a\u5b50\u8fdb\u7a0b\u67e5\u770b\u4f59\u7968\u7684\u64cd\u4f5c check() \u662f\u5e76\u53d1\u6267\u884c\u7684! step2: \u67e5\u5b8c\u7968\u5c31\u4f1a\u53bb\u62a2\u9501,\u5148\u67e5\u5b8c\u7968\u7684\u80af\u5b9a\u4f1a\u5148\u62a2\u5230\u9501.. \u5047\u5982\u8fdb\u7a0b24528\u62a2\u5230\u4e86\u9501,\u5b83\u5c31\u4f1a\u53bb\u6267\u884c get() \u64cd\u4f5c; \u5c06\u8d2d\u7968\u6d41\u7a0b \u67e5\u7968 - \u4f59\u7968\u51cf1 - \u5199\u5165\u6570\u636e\u6587\u4ef6 \u5b8c\u5b8c\u6574\u6574\u7684\u8fd0\u884c\u5b8c\u540e,\u91ca\u653e\u9501.. \u6ce8\u610f ,\u8fdb\u7a0b24528\u91ca\u653e\u9501\u7684\u65f6\u5019,\u6570\u636e\u6587\u4ef6\u5df2\u7ecf\u6539\u4e86,\u540e\u7eed\u7684\u8fdb\u7a0b\u62ff\u5230\u9501\u8bbf\u95ee\u5230\u7684\u662f\u5df2\u4fee\u6539\u7684\u6570\u636e. step3: \u5176\u5b83\u5b50\u8fdb\u7a0b\u518d\u62a2\u9501, \u62a2\u5230\u9501\u7684\u624d\u80fd\u6267\u884c get() \u64cd\u4f5c.. \u4f46\u51e1\u5e76\u53d1\u7f16\u7a0b\u91cc\u51fa\u73b0\u4fee\u6539\u5171\u4eab\u6570\u636e,\u5c31\u5f97\u8ba9\u5927\u5bb6\u4e00\u4e2a\u4e00\u4e2a\u7684\u53bb\u6539!\u4f46\u6ca1\u529e\u6cd5,\u964d\u4f4e\u6548\u7387\u4fdd\u8bc1\u6570\u636e\u5b89\u5168! \u2606join\u4e0e\u52a0\u9501 \u00b6 join\u6574\u4f53\u4e32\u884c; \u4e92\u65a5\u9501\u5c40\u90e8\u4e32\u884c(\u6709\u62a2\u9501\u64cd\u4f5c). 1> join: \u5c06\u6267\u884c\u4efb\u52a1\u7684 \u6240\u6709\u4ee3\u7801 \u6574\u4f53\u4e32\u884c! \u5faa\u73af\u91cc\u6dfb\u52a0 p.join() \u610f\u5473\u774010\u4e2a\u8fdb\u7a0b\u90fd\u5c06\u4f9d\u6b21\u5b8c\u5b8c\u6574\u6574\u7684\u4f9d\u6b21\u6267\u884c check() \u3001 get() \u8fd9\u4e24\u4e2a\u64cd\u4f5c.. \u8fdb\u7a0b1\u6267\u884c\u5b8c check() \u3001 get() \u540e,\u8fdb\u7a0b2\u518d\u5f00\u59cb\u6267\u884c check() \u3001 get() ... \u662f\u4e32\u884c\u6267\u884c\u7684! 2> \u4e92\u65a5\u9501: \u53ef\u4ee5\u5c06\u8981\u6267\u884c\u4efb\u52a1\u7684 \u90e8\u5206\u4ee3\u7801 (\u53ea\u6d89\u53ca\u5230\u4fee\u6539\u5171\u4eab\u6570\u636e\u7684\u4ee3\u7801)\u53d8\u6210\u4e32\u884c! \u5176\u4f59\u90e8\u5206\u90fd\u662f\u5e76\u884c. \u52a0\u9501\u64cd\u4f5c, \u53ea\u662f\u7ed9 \u6d89\u53ca\u5230\u5171\u4eab\u6570\u636e\u4fee\u6539 \u7684 get() \u64cd\u4f5c\u52a0\u4e86\u9501, 10\u4e2a\u8fdb\u7a0b\u8c01\u62a2\u5230\u9501,\u8c01\u624d\u80fd\u6267\u884c get() \u64cd\u4f5c! \u9501\u4e5f\u53ea\u6709\u4e00\u628a, \u62a2\u5230\u9501\u7684\u8fdb\u7a0b\u5c06 get() \u5b8c\u5b8c\u6574\u6574\u6267\u884c\u5b8c\u540e\u624d\u4f1a\u91ca\u653e\u9501, \u5176\u5b83\u8fdb\u7a0b\u518d\u62a2.. \u6ca1\u6709\u6d89\u53ca\u5230\u5171\u4eab\u6570\u636e\u4fee\u6539\u7684\u5176\u5b83\u64cd\u4f5c, \u8be5\u5e76\u53d1\u6267\u884c\u7684\u5c31\u5e76\u53d1\u6267\u884c!! def task ( mutex ): check () # -- \u5e76\u884c with mutex : # -- \u62a2\u9501\u4e32\u884c get () other_func1 () # -- \u5e76\u884c other_func2 () # -- \u5e76\u884c \u82e5task()\u7684\u4ee3\u7801\u8fdb\u884c\u5982\u4e0b\u4fee\u6539,\u8ddfjoin\u5927\u540c\u5c0f\u5f02!!\u53ea\u4e0d\u8fc7\u591a\u4e86\u62a2\u9501,\u4e0d\u662f\u6309\u7167for\u5faa\u73af\u7684\u987a\u5e8f\u6765\u7684\u7f62\u4e86. def task ( mutex ): mutex . acquire () check () get () mutex . release () \u961f\u5217 \u00b6 \u8fdb\u7a0b\u95f4\u7684\u901a\u4fe1 \u00b6 \u57fa\u4e8e\u6587\u4ef6\u3001IPC\u673a\u5236 \u7528\u6587\u4ef6\u5171\u4eab\u6570\u636e\u5b9e\u73b0\u8fdb\u7a0b\u95f4\u901a\u4fe1, \u5b58\u5728\u4ee5\u4e0b\u95ee\u9898: 1> \u6548\u7387\u4f4e(\u5171\u4eab\u6570\u636e\u57fa\u4e8e\u6587\u4ef6, \u800c \u6587\u4ef6\u662f\u786c\u76d8\u4e0a\u7684\u6570\u636e ) 2> \u9700\u8981\u81ea\u5df1\u52a0\u9501\u5904\u7406 ( \u5171\u4eab\u4f34\u968f\u7740\u7ade\u4e89!! ) \u52a0\u9501\u53ef\u4ee5\u4fdd\u8bc1\u591a\u4e2a\u8fdb\u7a0b\u4fee\u6539\u540c\u4e00\u5757\u6570\u636e\u65f6, \u540c\u4e00\u65f6\u95f4\u53ea\u80fd\u6709\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u8fdb\u884c\u4fee\u6539,\u5373\u4e32\u884c\u7684\u4fee\u6539! \u52a0\u9501\u5bfc\u81f4\u901f\u5ea6\u6162\u4e86,\u4f46\u727a\u7272\u4e86\u901f\u5ea6\u5374\u4fdd\u8bc1\u4e86\u6570\u636e\u5b89\u5168!! \u5728\u751f\u4ea7\u73af\u5883\u4e2d\u80fd\u4e0d\u81ea\u5df1\u5904\u7406\u9501\u7684\u95ee\u9898\u5c31\u522b\u81ea\u5df1\u5904\u7406, \u52a0\u9501\u662f\u4e00\u4e2a\u590d\u6742\u4e14\u5371\u9669\u7684\u884c\u4e3a (eg: \u5fd8\u8bb0\u91ca\u653e\u9501\u4e86,\u540e\u9762\u7684\u90fd\u5728\u90a3\u7b49\u7740\u90fd\u8fdb\u4e0d\u53bb) \u6211\u4eec\u9700\u8981\u627e\u5bfb\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\u80fd\u591f\u517c\u987e: 1> \u6548\u7387\u9ad8( \u591a\u4e2a\u8fdb\u7a0b\u5171\u4eab\u4e00\u5757\u5185\u5b58\u7684\u6570\u636e ) 2> \u5e2e\u6211\u4eec\u5904\u7406\u597d\u9501\u95ee\u9898 \u8fd9\u5c31\u4e0d\u5f97\u4e0d\u63d0\u5230mutiprocessing\u6a21\u5757\u4e3a\u6211\u4eec\u63d0\u4f9b\u7684 \u57fa\u4e8e\u6d88\u606f\u7684IPC\u8fdb\u7a0b\u901a\u4fe1\u673a\u5236: \u961f\u5217\u548c\u7ba1\u9053 \u25b3 \u961f\u5217\u548c\u7ba1\u9053\u90fd\u662f\u5171\u4eab\u7684\u5185\u5b58\u7a7a\u95f4. \u25b3 \u961f\u5217\u5e95\u5c42\u662f\u4ee5\u7ba1\u9053+\u9501\u7684\u65b9\u5f0f\u5b9e\u73b0\u7684! (\u7ba1\u9053\u5c31\u662f\u5185\u5b58\u7a7a\u95f4,\u5728\u8bb2\u8ff0subprocess\u6a21\u5757\u7684\u65f6\u5019\u5c31\u5df2\u7ecf\u63d0\u5230\u8fc7\u5566!) \u6211\u4eec\u7528\u961f\u5217!!!(\u204e\u204d\u0334\u031b\u1d17\u204d\u0334\u031b\u204e) \u7ba1\u9053\u76f8\u5173\u7528\u6cd5\u53ef\u53c2\u8003: https://www.cnblogs.com/linhaifeng/articles/7428874.html#_label7 \u9898\u5916\u8bdd: \u5728linux\u4e2d\u8f93\u5165 ` free -m ` \u663e\u793a\u7ed3\u679c\u7684shared\u5b57\u6bb5\u8868\u660e\u4e86\u5171\u4eab\u5185\u5b58\u6709\u591a\u5c11M!! Queue\u57fa\u672c\u7528\u6cd5 \u00b6 \u961f\u5217\u9ed8\u8ba4\u7684\u7279\u70b9: \u5148\u8fdb\u5148\u51faFIFO. \u6ce8\u610f: 1> \u961f\u5217\u5360\u7528\u7684\u662f\u5185\u5b58\u7a7a\u95f4 2> \u4e0d\u5e94\u8be5\u5f80\u961f\u5217\u4e2d\u653e\u5927\u6570\u636e,\u5e94\u8be5\u53ea\u5b58\u653e\u6570\u636e\u91cf\u8f83\u5c0f\u7684\u6d88\u606f! \u9700\u8981\u638c\u63e1\u7684 \u00b6 from multiprocessing import Queue # -- \u53c2\u6570maxsize\u9ed8\u8ba4\u4e3a0,\u8bbe\u7f6e\u7684\u53c2\u6570\u503c\u5c0f\u4e8e\u7b49\u4e8e0,\u8868\u660e\u961f\u5217\u5927\u5c0f\u65e0\u9650\u5236. # \u961f\u5217\u5360\u7528\u7684\u662f\u5185\u5b58\u7a7a\u95f4,\u6211\u4eec\u4e0d\u5e94\u8be5\u8bbe\u7f6e\u4e3a\u65e0\u9650\u5236! q = Queue ( 3 ) q . put ( 'first' ) q . put ({ \"k\" : \"second\" }) q . put ([ \"third\" ]) # q.put(4) # -- \u56e0\u4e3a\u8bbe\u7f6e\u7684\u961f\u5217\u5927\u5c0f\u4e3a3 \u7ee7\u7eed\u52a0\u7684\u8bdd\u4f1a\u5728\u8fd9\u91cc\u963b\u585e\u4f4f(\u9501\u7684\u6548\u679c) print ( q . get ()) print ( q . get ()) print ( q . get ()) # print(q.get()) # -- \u56e0\u4e3a\u961f\u5217\u4e2d\u53ea\u89813\u4e2a\u6570\u636e \u53d6\u4e0d\u51fa\u6765\u7b2c4\u4e2a,\u4f1a\u5728\u8fd9\u963b\u585e\u4f4f \u9700\u8981\u4e86\u89e3\u7684 \u00b6 \u6ce8\u610f:\u53ea\u6709\u5728block\u4e3aTrue\u7684\u65f6\u5019,\u8bbe\u7f6etimeout\u8d85\u65f6\u65f6\u95f4\u624d\u6709\u610f\u4e49!! from multiprocessing import Queue q = Queue ( 3 ) \"\"\" put\u65b9\u6cd5\u7684\u53c2\u6570 block\u9ed8\u8ba4\u4e3aTrue,timeout\u9ed8\u8ba4\u4e3aNone \u961f\u5217\u5927\u5c0f\u4e3a3,\u524d3\u4e2a\u80af\u5b9a\u80fd\u6dfb\u52a0\u8fdb\u53bb!! \u7b2c4\u4e2a\u4f1a\u963b\u585e 1> \u4e0d\u52a0timeout,timeout\u9ed8\u8ba4\u4e3aNone,\u4f1a\u4e00\u76f4\u963b\u585e,\u76f4\u5230\u961f\u5217\u6709\u7a7a\u95f4 2> \u8bbe\u7f6etimeout=3,\u4e0d\u4f1a\u4e00\u76f4\u963b\u585e,\u963b\u585e3\u79d2\u540e,\u961f\u5217\u8fd8\u662f\u6ca1\u6709\u7a7a\u95f4,\u4f1a\u62a5\u9519 \"queue.Full\" \u544a\u77e5\u961f\u5217\u5df2\u6ee1 \u6ce8\u610f:\u53ea\u6709\u5728block\u4e3aTrue\u7684\u65f6\u5019,\u8bbe\u7f6etimeout\u8d85\u65f6\u65f6\u95f4\u624d\u6709\u610f\u4e49!! \"\"\" q . put ( 'first' , block = True , timeout = 3 ) q . put ({ \"k\" : \"second\" }, block = True , timeout = 3 ) q . put ([ \"third\" ], block = True , timeout = 3 ) # q.put(4, block=True, timeout=3) \"\"\" get\u65b9\u6cd5\u7684\u53c2\u6570 block\u9ed8\u8ba4\u4e3aTrue,timeout\u9ed8\u8ba4\u4e3aNone \u53d6\u7b2c4\u4e2a\u65f6,\u4f1a\u963b\u585e3\u79d2,3\u79d2\u540e\u961f\u5217\u91cc\u8fd8\u662f\u6ca1\u6709\u6570\u636e\u7684\u8bdd,\u4f1a\u62a5\u9519 \"queue.Empty\" \u544a\u77e5\u961f\u5217\u4e3a\u7a7a \"\"\" print ( q . get ( block = True , timeout = 3 )) print ( q . get ( block = True , timeout = 3 )) print ( q . get ( block = True , timeout = 3 )) # print(q.get(block=True, timeout=3)) \u82e5put\u6dfb\u52a0\u64cd\u4f5c block = False , \u5f53\u961f\u5217\u5df2\u6ee1, \u76f4\u63a5\u7acb\u523b\u62a5\u9519, \u538b\u6839\u4e0d\u4f1a\u963b\u585e.\u8bbe\u7f6etimeout\u4e5f\u6ca1\u7528. \u540c\u7406, \u82e5get\u53d6\u6570\u636e\u64cd\u4f5c block = False , \u5f53\u961f\u5217\u4e3a\u7a7a, \u76f4\u63a5\u7acb\u523b\u62a5\u9519, \u7b49\u90fd\u4e0d\u4f1a\u7b49. q.put_nowait(4) \u7b49\u540c\u4e8e q.put(4, block=False) q.get_nowait() \u7b49\u540c\u4e8e q.get(block=False)","title":"\u8fdb\u7a0b\u5f00\u53d1\u5fc5\u77e5"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/7_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%9F%A5/#_1","text":"\u5b88\u62a4 \u5373 \u4f34\u968f! \u5b88\u62a4\u8fdb\u7a0b\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\"\u5b50\u8fdb\u7a0b\". \u5b88\u62a4\u8fdb\u7a0b\u7684 \u751f\u547d\u5468\u671f \u4f1a\u4f34\u968f\u7740 \u4e3b\u8fdb\u7a0b\u7684\u4ee3\u7801\u8fd0\u884c\u5b8c\u6bd5 \u800c\u7ed3\u675f/\u81ea\u52a8\u9500\u6bc1. \u53ea\u5b88\u62a4\u4e3b\u8fdb\u7a0b\u4ee3\u7801\u8fd0\u884c\u7684\u8fc7\u7a0b! \u6ce8\u610f\u54e6!\u4e3b/\u7236\u8fdb\u7a0b\u7684\u6d3b\u5e72\u5b8c\u4e86,\u4e0d\u610f\u5473\u7740\u4e3b\u8fdb\u7a0b\u5c31\u7ed3\u675f\u4e86!! \u7236\u8fdb\u7a0b\u4f1a\u7b49\u7740\u6240\u6709\u5b50\u8fdb\u7a0b\u6b7b\u6389\u540e,\u7ed9\u5b83\u4eec\u6536\u5c38.. Q: \u4e3a\u4ec0\u4e48\u8981\u7528\u5b88\u62a4\u8fdb\u7a0b\uff1f A: \u4ece\u4e24\u4e2a\u5173\u952e\u5b57\u5165\u624b\u5206\u6790 1> \u8fdb\u7a0b: \u5f53\u7236\u8fdb\u7a0b\u9700\u8981\u5c06\u4e00\u4e2a\u4efb\u52a1\u5e76\u53d1\u51fa\u53bb\u6267\u884c,\u53ef\u4ee5\u5f00\u542f\u4e00\u4e2a\u5b50\u8fdb\u7a0b. 2> \u5b88\u62a4: \u82e5\u5b50\u8fdb\u7a0b\u5728\u7236\u8fdb\u7a0b\u4ee3\u7801\u8fd0\u884c\u5b8c\u6bd5\u540e\u5c31\u6ca1\u6709\u5b58\u5728\u7684\u610f\u4e49\u4e86. \u5c31\u5e94\u8be5\u5c06\u8be5\u5b50\u8fdb\u7a0b\u8bbe\u7f6e\u4e3a\u5b88\u62a4\u8fdb\u7a0b,\u4f1a\u5728\u7236\u8fdb\u7a0b\u4ee3\u7801\u7ed3\u675f\u540e\u6b7b\u6389 (\u8fd9\u4e0d\u662f\u50f5\u5c38\u54e6!\u6b7b\u6389\u8d44\u6e90\u4f1a\u5168\u90e8\u91ca\u653e)","title":"\u5b88\u62a4\u8fdb\u7a0b"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/7_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%9F%A5/#daemon","text":"p1.daemon = True \u4e00\u5b9a\u8981\u653e\u5230 p1.start() \u4e4b\u524d!! import time from multiprocessing import Process def task ( x ): print ( f \" { x } is running!\" ) time . sleep ( 3 ) if __name__ == '__main__' : p1 = Process ( target = task , args = ( \"\u5b88\u62a4\u8fdb\u7a0b\" ,)) p2 = Process ( target = task , args = ( \"\u6b63\u5e38\u7684\u5b50\u8fdb\u7a0b\" ,)) p1 . daemon = True # -- \u4e00\u5b9a\u8981\u653e\u5230p1.start()\u4e4b\u524d p1 . start () p2 . start () print ( \"\u4e3b\" ) \"\"\" \u4e3b \u6b63\u5e38\u7684\u5b50\u8fdb\u7a0b is running! \"\"\" \u8bbe\u7f6e\u5b50\u8fdb\u7a0bp1\u4e3a\u5b88\u62a4\u8fdb\u7a0b; \u63a5\u7740\u53d1\u9001\u4e86\u4e24\u4e2a\u4fe1\u53f7,OS\u8fd8\u6ca1\u628a\u8fdb\u7a0b\u9020\u51fa\u6765,\u6ca1\u6765\u5f97\u53ca\u8fd0\u884cp1\u3001p2\u7684\u4ee3\u7801\u5462. \u7236\u8fdb\u7a0b\u5c31\u5df2\u7ecf\u628a print(\"\u4e3b\") \u8fd0\u884c\u5566! \u4e00\u65e6\u5728\u5c4f\u5e55\u4e2d\u6253\u5370\u51fa\"\u4e3b\"\u5c31\u610f\u5916\u7740\u7236\u8fdb\u7a0b\u4ee3\u7801\u8fd0\u884c\u5b8c\u6bd5,\u5b88\u62a4\u8fdb\u7a0bp1\u5c06\u4f1a\u7ed3\u675f\u751f\u547d!! \u5373\u5b88\u62a4\u8fdb\u7a0bp1\u6ca1\u6709\u673a\u4f1a\u518d\u8fd0\u884c\u81ea\u5df1\u7684\u4ee3\u7801.. \u800c\u7236\u8fdb\u7a0b\u4f1a\u7b49\u7740p2\u5b50\u8fdb\u7a0b\u8fd0\u884c\u5b8c,\u66ff\u5b83\u6536\u5b8c\u5c38\u540e,\u518d\u5b89\u8be6\u7684\u6b7b\u53bb.","title":"daemon\u5c5e\u6027"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/7_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%9F%A5/#_2","text":"\u5173\u952e\u5728\u4e8e\u7406\u89e3\u5b88\u62a4\u8fdb\u7a0b\u4ec0\u4e48\u65f6\u5019\u6b7b\u6389. \u65f6\u523b\u8981\u6709\u5e76\u53d1\u7684\u601d\u60f3! import time from multiprocessing import Process def foo (): print ( 123 ) time . sleep ( 1 ) print ( \"end123\" ) def bar (): print ( 456 ) time . sleep ( 3 ) print ( \"end456\" ) if __name__ == '__main__' : p1 = Process ( target = foo ) p2 = Process ( target = bar ) p1 . daemon = True p1 . start () # -- \u73b0\u76ee\u524d\u7684\u79d1\u6280\u6c34\u5e73\u51e0\u4e4e\u4e0d\u53ef\u80fd\u53d1\u4fe1\u53f7\u7684\u540c\u65f6,OS\u5c31\u628ap1\u9020\u51fa\u6765..\u56e0\u4e3a\u9020p1\u5f97\u7533\u8bf7\u5185\u5b58\u7a7a\u95f4\u7b49. p2 . start () print ( \"main\" ) # -- \u6267\u884c\u8fc7\u7a0b:\u5728\u5185\u5b58\u4e2d\u9020\u4e2a\u5b57\u7b26\u4e32\"\u4e3b\",\u4ece\u5185\u5b58\u4e2d\u53d6\u4e3b\u8fdb\u7a0b\u9020\u597d\u7684\u5b57\u7b26\u4e32\"\u4e3b\",\u6254\u5230\u5c4f\u5e55\u4e2d\u663e\u793a. \"\"\" -- \u5728\u6267\u884c\u5b8c`print(\"main\")`,p1\u3001p2\u90fd\u8fd8\u6ca1\u9020\u51fa\u6765\u5462.(\u6211\u4eec\u7684\u673a\u5668\u666e\u904d\u90fd\u662f\u8fd9\u4e2a\u7ed3\u679c) main 456 end456 \"\"\" \"\"\" -- \u5728\u6267\u884c`print(\"main\")`\u8fc7\u7a0b\u4e2d,p1\u9020\u51fa\u6765\u5566.\u4f1a\u7acb\u523b\u6267\u884cp1\u8fdb\u7a0b\u91cc\u7684\u4ee3\u7801.\u628a\"123\"\u6254\u5230\u5c4f\u5e55\u4e0a \u4f46\u603b\u6709\u4e2a\u5148\u6765\u540e\u5230,\u5148\"\u4e3b\"\u3001\u540e\"123\".(\u673a\u5668\u7684\u6027\u80fd\u6bd4\u8f83\u5353\u8d8a) main 123 456 end456 \"\"\" \"\"\" -- \u5728\u6267\u884c`p2.start()`\u8fc7\u7a0b\u4e2d,p1\u9020\u51fa\u6765\u5566!(\u673a\u5668\u7684\u6027\u80fd\u8d85\u7ea7\u725b\u76ae) 123 main 456 end456 \"\"\"","title":"\u8ff7\u60d1\u4eba\u7684\u4f8b\u5b50"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/7_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%9F%A5/#_3","text":"\u8fdb\u7a0b\u4e4b\u95f4\u9700\u8981\u901a\u4fe1,\u4f46\u8fdb\u7a0b\u4e4b\u95f4\u5185\u5b58\u662f\u9694\u79bb\u7684 \u4e92\u65a5\u9501\u5c06\u591a\u4e2a\u5e76\u53d1\u7684\u4efb\u52a1\u5bf9\u4fee\u6539\u5171\u4eab\u6570\u636e\u7684\u64cd\u4f5c\u53d8\u6210\u4e32\u884c,\u727a\u7272\u4e86\u6548\u7387,\u4f46\u4fdd\u8bc1\u4e86\u6570\u636e\u7684\u5b89\u5168\u6027!","title":"\u4e92\u65a5\u9501"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/7_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%9F%A5/#_4","text":"# -- db.txt \u6587\u4ef6\u5f53\u4f5c\u6570\u636e\u5e93 { \"count\" , 1 }","title":"\u6a21\u62df\u591a\u4eba\u62a2\u7968"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/7_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%9F%A5/#_5","text":"\u62a2\u7968\u8981\u7ecf\u5386\u4e24\u4e2a\u9636\u6bb5,\u67e5\u7968\u73af\u8282\u548c\u8d2d\u7968\u73af\u8282. import json import os import random import time from multiprocessing import Process def check (): with open ( 'db.txt' , 'rt' , encoding = 'utf-8' ) as f : dic = json . load ( f ) time . sleep ( random . randint ( 1 , 3 )) print ( f \" { os . getpid () } \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a: { dic [ 'count' ] } ! \" ) # -- \u8d2d\u7968\u903b\u8f91:\u5148\u67e5\u7968 -- \u4f59\u7968\u51cf\u4e00 -- \u518d\u5199\u56de\u6570\u636e\u6587\u4ef6. def get (): # -- \u8d2d\u7968\u7684\u65f6\u5019,\u7968\u53ef\u80fd\u5df2\u7ecf\u88ab\u62a2\u8d70\u4e86,\u6240\u4ee5\u8d2d\u7968\u65f6\u8fd8\u5f97\u67e5\u8be2\u4e00\u4e0b with open ( 'db.txt' , 'rt' , encoding = 'utf-8' ) as f : # -- S\u7aef\u5f00\u59cb\u67e5\u6570\u636e dic = json . load ( f ) time . sleep ( random . randint ( 1 , 3 )) # -- \u6a21\u62dfC\u7aef\u8bfb\u6570\u636e\u7684\u7f51\u7edc\u5ef6\u8fdf S-->C # (\u67e5\u5230\u7684\u6570\u636e\u89811-3S\u624d\u80fd\u5230C\u7aef) # -- \u5f00\u59cb\u8d2d\u7968 if dic [ 'count' ] > 0 : dic [ 'count' ] -= 1 # -- \u4ec5\u4ec5\u53ea\u662f\u5728\u5185\u5b58\u91cc\u7684\u64cd\u4f5c,\u5f97\u5237\u65b0\u5230\u786c\u76d8db.txt\u6587\u4ef6\u91cc time . sleep ( random . randint ( 1 , 3 )) # -- \u6a21\u62dfS\u7aef\u5199\u6570\u636e\u7684\u7f51\u7edc\u5ef6\u8fdf C-->S # (\u8981\u5199\u5165\u7684\u6570\u636e\u89811-3S\u624d\u80fd\u5230\u8fbeS\u7aef) with open ( 'db.txt' , 'wt' , encoding = 'utf-8' ) as f : # -- S\u7aef\u5f00\u59cb\u5199\u5165\u6570\u636e json . dump ( dic , f ) print ( f \" { os . getpid () } \u60a8\u8d2d\u7968\u6210\u529f!\" ) else : print ( f \"\u5c0a\u656c\u7684 { os . getpid () } \u7528\u6237:\u6ca1\u6709\u4f59\u7968\u5566!\u8d2d\u7968\u5931\u8d25!\" ) def task (): check () # -- \u67e5\u7968 get () # -- \u8d2d\u7968 if __name__ == '__main__' : # -- \u6a21\u62df\u591a\u4e2a\u4eba\u5e76\u53d1\u8bf7\u62a2\u7968 for _ in range ( 10 ): p = Process ( target = task ) p . start ()","title":"\u5e76\u53d1\u62a2\u7968"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/7_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%9F%A5/#_6","text":"\u5e76\u53d1\u8fd0\u884c\u6548\u7387\u9ad8,\u4f46\u7ade\u4e89\u5199\u5165\u540c\u4e00\u6587\u4ef6,\u6570\u636e\u5199\u5165\u9519\u4e71.. # -- \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b: 23866 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a : 1 ! 23868 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a : 1 ! 23870 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a : 1 ! 23863 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a : 1 ! 23865 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a : 1 ! 23867 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a : 1 ! 23872 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a : 1 ! 23864 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a : 1 ! 23869 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a : 1 ! 23871 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a : 1 ! 23868 \u60a8\u8d2d\u7968\u6210\u529f ! 23865 \u60a8\u8d2d\u7968\u6210\u529f ! 23866 \u60a8\u8d2d\u7968\u6210\u529f ! 23867 \u60a8\u8d2d\u7968\u6210\u529f ! 23870 \u60a8\u8d2d\u7968\u6210\u529f ! 23872 \u60a8\u8d2d\u7968\u6210\u529f ! 23863 \u60a8\u8d2d\u7968\u6210\u529f ! 23864 \u60a8\u8d2d\u7968\u6210\u529f ! 23871 \u60a8\u8d2d\u7968\u6210\u529f ! 23869 \u60a8\u8d2d\u7968\u6210\u529f ! Amazing\u554a,\u53ea\u6709\u4e00\u5f20\u7968,\u7ed3\u679c10\u4e2a\u4eba\u5168\u90e8\u8d2d\u7968\u6210\u529f,\u5947\u4e86\u4e2a\u602a\u4e86! (\u3064\u0414`)\u30ce \u95ee\u9898\u7684\u6839\u6e90\u51fa\u5728: \u67e5\u7968\u53ef\u4ee5\u5e76\u53d1,\u4f46 \u8d2d\u7968\u4e0d\u80fd\u5e76\u53d1 .. \u8d2d\u7968\u7684\u903b\u8f91\u4e00\u5b9a\u662f\u4e09\u6b65\u8d70,\u5148\u67e5\u7968 - \u6709\u7968\u5219\u4f59\u7968\u51cf1 - \u518d\u5199\u56de\u6570\u636e\u6587\u4ef6. \u56e0\u4e3a\u6709\u7f51\u7edc\u5ef6\u8fdf\u7684\u7f18\u6545,10\u4e2a\u4eba\u67e5\u5230\u7684\u7968\u90fd\u662f\u4e00\u6837\u7684\u7ed3\u679c,\u90fd\u51cf\u4e00\u91cd\u65b0\u8986\u76d6\u6389\u6570\u636e\u6587\u4ef6.. \u4e0d\u5c31\u610f\u5473\u774010\u4e2a\u4eba\u8d2d\u4e70\u5230\u7684\u662f\u540c\u4e00\u5f20\u7968\u5417? \u6240\u4ee5\u62a2\u7968\u4e0d\u80fd\u5e76\u53d1\u7740\u6765! \u5f97\u4e00\u4e2a\u4e00\u4e2a\u6765! \u5177\u4f53\u6765\u8bf4, \u8be5\u62a2\u7968\u7a0b\u5e8f\u4e2d\u5171\u6709\u4e09\u5904 time.sleep(random.randint(1, 3)) \u8bed\u53e5 \u6a21\u62df\u4e86\u4e09\u6b21\u7f51\u7edc\u5ef6\u8fdf. \u7b2c\u4e00\u6b21: \u6700\u5c111s\u7684\u5ef6\u8fdf,\u5df2\u7ecf\u8ba910\u4e2a\u5e76\u53d1\u7684\u5b50\u8fdb\u7a0b\u90fd\u67e5\u8be2\u5230\u4e86\u5269\u4f59\u7968\u6570. \u7b2c\u4e8c\u6b21: \u540c\u4e0a.\u8ddf\u7b2c\u4e00\u6b21\u4e00\u6837\u662f\u8bfb\u6570\u636e. \u800c\u4e1410\u4e2a\u4eba\u83b7\u53d6\u5230\u7684\u5269\u4f59\u7968\u6570\u90fd\u662f\u4e00\u6837\u7684! \u7b2c\u4e09\u6b21: \u5f00\u59cb\u8d2d\u7968,10\u4e2a\u5b50\u8fdb\u7a0b\u90fd\u5148\u4fee\u6539\u4e86\u81ea\u5df1\u5185\u5b58\u4e2d\u7684\u6570\u636e.\u4f9d\u6b21\u5199\u5165db.txt.\u4f46\u6bcf\u6b21\u7684\u5199\u5165\u90fd\u662f {\"count\",0} .","title":"\u95ee\u9898\u5206\u6790"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/7_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%9F%A5/#_7","text":"\u8981\u4fdd\u8bc1\u5171\u4eab\u6570\u636e\u7684\u5b89\u5168, \u4fee\u6539\u5171\u4eab\u6570\u636e\u7684\u884c\u4e3a\u5c31\u4e0d\u80fd\u8ba9\u5176\u5e76\u53d1\u7684\u53bb\u8fd0\u884c. \u4f46\u662f\u6548\u7387\u53d8\u4f4e\u5566!! \u90a3\u4e48,\u5c06\u5e76\u53d1\u62a2\u7968\u7a0b\u5e8f\u6539\u4e3a \u4e32\u884c (\u4e00\u4e2a\u8fdb\u7a0b\u5b8c\u5b8c\u6574\u6574\u6267\u884c\u5b8c\u540e,\u624d\u4f1a\u6267\u884c\u4e0b\u4e00\u4e2a\u8fdb\u7a0b) \u53ef\u4ee5\u5417\uff1fyes. \u56e0\u4e3a\u7b2c\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u8d70\u4e86\u4e00\u904d\u8d2d\u7968\u6d41\u7a0b\u540e,\u6570\u636e\u6587\u4ef6\u91cc\u7684\u4f59\u7968\u6570\u51cf\u4e00.. \u540e\u9762\u7684\u5b50\u8fdb\u7a0b\u8d2d\u7968\u884c\u4e3a\u662f\u57fa\u4e8e\u4fee\u6539\u540e\u7684\u6570\u636e\u6587\u4ef6\u8fdb\u884c\u7684\u64cd\u4f5c..\u5c31\u6ca1\u5565\u95ee\u9898\u5566!! if __name__ == '__main__' : for _ in range ( 10 ): p = Process ( target = task ) p . start () p . join () # -- \u53ea\u9700\u8981\u52a0\u8fd9\u4e00\u884c\u4ee3\u7801\u5373\u53ef! \"\"\" 23908 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a: 1! 23908 \u60a8\u8d2d\u7968\u6210\u529f! 23909 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a: 0! \u5c0a\u656c\u768423909\u7528\u6237:\u6ca1\u6709\u4f59\u7968\u5566!\u8d2d\u7968\u5931\u8d25! 23910 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a: 0! \u5c0a\u656c\u768423910\u7528\u6237:\u6ca1\u6709\u4f59\u7968\u5566!\u8d2d\u7968\u5931\u8d25! 23911 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a: 0! \u5c0a\u656c\u768423911\u7528\u6237:\u6ca1\u6709\u4f59\u7968\u5566!\u8d2d\u7968\u5931\u8d25! ... ... ... \"\"\"","title":"\u4e32\u884c\u62a2\u7968"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/7_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%9F%A5/#_8","text":"\u5728\u4f60\u6211\u7eb3\u95f7\u8fd9\u6548\u7387\u4e5f\u592a\u6162\u7684\u8fc7\u7a0b\u4e2d,\u5e94\u8be5\u4e5f\u654f\u9510\u7684\u53d1\u73b0\u4e86,\u4e0a\u8ff0\u7684\u4e32\u884c\u62a2\u7968\u7a0b\u5e8f\u5b58\u5728\u7684\u4e0d\u5408\u7406\u7684\u5730\u65b9.. \u67e5\u7968\u548c\u8d2d\u7968\u90fd\u53d8\u6210\u4e32\u884c\u7684\u5566!! \u5e94\u8be5\u53ea\u5c06\u8d2d\u7968\u73af\u8282\u53d8\u4e3a\u4e32\u884c,\u67e5\u7968\u73af\u8282\u5e94\u4e3a\u5e76\u53d1!! \u4e92\u65a5\u9501 \u5c31\u662f\u5c06\u67d0\u4e00\u5e76\u53d1\u64cd\u4f5c\u53d8\u6210\u4e32\u884c\u7684,\u727a\u7272\u4e86\u6548\u7387,\u4fdd\u8bc1\u4e86\u5b89\u5168!","title":"\u52a0\u4e92\u65a5\u9501\u89e3\u51b3"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/7_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%9F%A5/#_9","text":"\u8fd9\u91cc\u7ed9 get() \u64cd\u4f5c\u52a0\u9501, \u8fd910\u4e2a\u8fdb\u7a0b\u8c01\u5148\u62a2\u5230\u9501,\u8c01\u8fdb\u884c\u8d2d\u7968,\u8d2d\u7968\u5b8c\u6210\u540e\u91ca\u653e\u9501,\u5176\u4f59\u8fdb\u7a0b\u518d\u62a2\u9501\u8d2d\u7968.. \u6ca1\u6709\u9501\u662f\u4e0d\u80fd\u8fdb\u884c\u8d2d\u7968\u7684!!\u9501\u53ea\u6709\u4e00\u628a,\u6240\u4ee5\u6bcf\u6b21\u8d2d\u7968\u884c\u4e3a\u90fd\u4f1a\u5b8c\u5b8c\u6574\u6574\u7684\u8fd0\u884c\u5b8c\u518d\u4f1a\u8fdb\u884c\u4e0b\u4e00\u4e2a\u8d2d\u7968. import json import os import random import time from multiprocessing import Process , Lock , set_start_method def check (): with open ( 'db.txt' , 'rt' , encoding = 'utf-8' ) as f : dic = json . load ( f ) time . sleep ( random . randint ( 1 , 3 )) print ( f \" { os . getpid () } \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a: { dic [ 'count' ] } ! \" ) def get (): with open ( 'db.txt' , 'rt' , encoding = 'utf-8' ) as f : dic = json . load ( f ) time . sleep ( random . randint ( 1 , 3 )) if dic [ 'count' ] > 0 : dic [ 'count' ] -= 1 time . sleep ( random . randint ( 1 , 3 )) with open ( 'db.txt' , 'wt' , encoding = 'utf-8' ) as f : json . dump ( dic , f ) print ( f \" { os . getpid () } \u60a8\u8d2d\u7968\u6210\u529f!\" ) else : print ( f \"\u5c0a\u656c\u7684 { os . getpid () } \u7528\u6237:\u6ca1\u6709\u4f59\u7968\u5566!\u8d2d\u7968\u5931\u8d25!\" ) def task ( mutex ): check () # -- \u53ea\u8981\u8d2d\u7968\u64cd\u4f5c\u6d89\u53ca\u5230\u5bf9\u5171\u4eab\u6570\u636e\u6539\u7684\u884c\u4e3a,\u9700\u8981\u5bf9\u8d2d\u7968\u64cd\u4f5c\u52a0\u9501 \"\"\" \u4e0b\u65b9\u7684\u4e09\u884c\u4ee3\u7801\u53ef\u4ee5\u7b80\u5199 with mutex: get() \"\"\" mutex . acquire () # -- \u52a0\u9501,\u4e92\u65a5\u9501\u4e0d\u80fd\u8fde\u7eed\u7684acquire,\u5fc5\u987b\u662frelease\u4ee5\u540e\u624d\u80fd\u91cd\u65b0acquire get () mutex . release () # -- \u91ca\u653e\u9501 if __name__ == '__main__' : \"\"\" # -- \u2605 \u7279\u522b\u8bf4\u660e \u5728mac\u4e0a\u8fd0\u884c\u52a0\u9501\u7684\u5e76\u53d1\u7a0b\u5e8f,\u9700\u8981\u5728main()\u91cc\u5f97\u52a0\u8fd9\u884c\u8bed\u53e5!!! set_start_method('fork') \u539f\u56e0:MAC\u7535\u8111\u9ed8\u8ba4\u542f\u52a8\u8fdb\u7a0b\u7684\u65b9\u5f0f\u662ffork,\u800cpython\u9ed8\u8ba4\u7684\u65b9\u5f0f\u662fspawn \u6240\u4ee5\u9700\u8981\u5c06python\u542f\u52a8\u8fdb\u7a0b\u7684\u65b9\u5f0f\u505a\u4fee\u6539 \"\"\" set_start_method ( 'fork' ) mutex = Lock () # -- \u5728\u7236\u8fdb\u7a0b\u91cc\u9020\u4e86\u4e2a\u4e92\u65a5\u9501\u5bf9\u8c61 for _ in range ( 10 ): p = Process ( target = task , args = ( mutex ,)) # -- \u901a\u8fc7\u53c2\u6570\u4f20\u9012\u8ba9\u6bcf\u4e2a\u5b50\u8fdb\u7a0b\u90fd\u53bb\u62a2\u8fd9\u628a\u9501 p . start () \"\"\" 24528 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a: 1! 24530 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a: 1! 24526 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a: 1! ... ... ... 24534 \u67e5\u8be2\u5230\u5269\u4f59\u7968\u6570\u4e3a: 1! 24528 \u60a8\u8d2d\u7968\u6210\u529f! \u5c0a\u656c\u768424530\u7528\u6237:\u6ca1\u6709\u4f59\u7968\u5566!\u8d2d\u7968\u5931\u8d25! \u5c0a\u656c\u768424526\u7528\u6237:\u6ca1\u6709\u4f59\u7968\u5566!\u8d2d\u7968\u5931\u8d25! ... ... ... \u5c0a\u656c\u768424534\u7528\u6237:\u6ca1\u6709\u4f59\u7968\u5566!\u8d2d\u7968\u5931\u8d25! \"\"\" step1: \u7236\u8fdb\u7a0b\u5f88\u5feb\u7684\u53d1\u5b8c10\u4e2a\u4fe1\u53f7,10\u4e2a\u5b50\u8fdb\u7a0b\u67e5\u770b\u4f59\u7968\u7684\u64cd\u4f5c check() \u662f\u5e76\u53d1\u6267\u884c\u7684! step2: \u67e5\u5b8c\u7968\u5c31\u4f1a\u53bb\u62a2\u9501,\u5148\u67e5\u5b8c\u7968\u7684\u80af\u5b9a\u4f1a\u5148\u62a2\u5230\u9501.. \u5047\u5982\u8fdb\u7a0b24528\u62a2\u5230\u4e86\u9501,\u5b83\u5c31\u4f1a\u53bb\u6267\u884c get() \u64cd\u4f5c; \u5c06\u8d2d\u7968\u6d41\u7a0b \u67e5\u7968 - \u4f59\u7968\u51cf1 - \u5199\u5165\u6570\u636e\u6587\u4ef6 \u5b8c\u5b8c\u6574\u6574\u7684\u8fd0\u884c\u5b8c\u540e,\u91ca\u653e\u9501.. \u6ce8\u610f ,\u8fdb\u7a0b24528\u91ca\u653e\u9501\u7684\u65f6\u5019,\u6570\u636e\u6587\u4ef6\u5df2\u7ecf\u6539\u4e86,\u540e\u7eed\u7684\u8fdb\u7a0b\u62ff\u5230\u9501\u8bbf\u95ee\u5230\u7684\u662f\u5df2\u4fee\u6539\u7684\u6570\u636e. step3: \u5176\u5b83\u5b50\u8fdb\u7a0b\u518d\u62a2\u9501, \u62a2\u5230\u9501\u7684\u624d\u80fd\u6267\u884c get() \u64cd\u4f5c.. \u4f46\u51e1\u5e76\u53d1\u7f16\u7a0b\u91cc\u51fa\u73b0\u4fee\u6539\u5171\u4eab\u6570\u636e,\u5c31\u5f97\u8ba9\u5927\u5bb6\u4e00\u4e2a\u4e00\u4e2a\u7684\u53bb\u6539!\u4f46\u6ca1\u529e\u6cd5,\u964d\u4f4e\u6548\u7387\u4fdd\u8bc1\u6570\u636e\u5b89\u5168!","title":"\u5b9e\u73b0\u4ee3\u7801"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/7_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%9F%A5/#join","text":"join\u6574\u4f53\u4e32\u884c; \u4e92\u65a5\u9501\u5c40\u90e8\u4e32\u884c(\u6709\u62a2\u9501\u64cd\u4f5c). 1> join: \u5c06\u6267\u884c\u4efb\u52a1\u7684 \u6240\u6709\u4ee3\u7801 \u6574\u4f53\u4e32\u884c! \u5faa\u73af\u91cc\u6dfb\u52a0 p.join() \u610f\u5473\u774010\u4e2a\u8fdb\u7a0b\u90fd\u5c06\u4f9d\u6b21\u5b8c\u5b8c\u6574\u6574\u7684\u4f9d\u6b21\u6267\u884c check() \u3001 get() \u8fd9\u4e24\u4e2a\u64cd\u4f5c.. \u8fdb\u7a0b1\u6267\u884c\u5b8c check() \u3001 get() \u540e,\u8fdb\u7a0b2\u518d\u5f00\u59cb\u6267\u884c check() \u3001 get() ... \u662f\u4e32\u884c\u6267\u884c\u7684! 2> \u4e92\u65a5\u9501: \u53ef\u4ee5\u5c06\u8981\u6267\u884c\u4efb\u52a1\u7684 \u90e8\u5206\u4ee3\u7801 (\u53ea\u6d89\u53ca\u5230\u4fee\u6539\u5171\u4eab\u6570\u636e\u7684\u4ee3\u7801)\u53d8\u6210\u4e32\u884c! \u5176\u4f59\u90e8\u5206\u90fd\u662f\u5e76\u884c. \u52a0\u9501\u64cd\u4f5c, \u53ea\u662f\u7ed9 \u6d89\u53ca\u5230\u5171\u4eab\u6570\u636e\u4fee\u6539 \u7684 get() \u64cd\u4f5c\u52a0\u4e86\u9501, 10\u4e2a\u8fdb\u7a0b\u8c01\u62a2\u5230\u9501,\u8c01\u624d\u80fd\u6267\u884c get() \u64cd\u4f5c! \u9501\u4e5f\u53ea\u6709\u4e00\u628a, \u62a2\u5230\u9501\u7684\u8fdb\u7a0b\u5c06 get() \u5b8c\u5b8c\u6574\u6574\u6267\u884c\u5b8c\u540e\u624d\u4f1a\u91ca\u653e\u9501, \u5176\u5b83\u8fdb\u7a0b\u518d\u62a2.. \u6ca1\u6709\u6d89\u53ca\u5230\u5171\u4eab\u6570\u636e\u4fee\u6539\u7684\u5176\u5b83\u64cd\u4f5c, \u8be5\u5e76\u53d1\u6267\u884c\u7684\u5c31\u5e76\u53d1\u6267\u884c!! def task ( mutex ): check () # -- \u5e76\u884c with mutex : # -- \u62a2\u9501\u4e32\u884c get () other_func1 () # -- \u5e76\u884c other_func2 () # -- \u5e76\u884c \u82e5task()\u7684\u4ee3\u7801\u8fdb\u884c\u5982\u4e0b\u4fee\u6539,\u8ddfjoin\u5927\u540c\u5c0f\u5f02!!\u53ea\u4e0d\u8fc7\u591a\u4e86\u62a2\u9501,\u4e0d\u662f\u6309\u7167for\u5faa\u73af\u7684\u987a\u5e8f\u6765\u7684\u7f62\u4e86. def task ( mutex ): mutex . acquire () check () get () mutex . release ()","title":"\u2606join\u4e0e\u52a0\u9501"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/7_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%9F%A5/#_10","text":"","title":"\u961f\u5217"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/7_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%9F%A5/#_11","text":"\u57fa\u4e8e\u6587\u4ef6\u3001IPC\u673a\u5236 \u7528\u6587\u4ef6\u5171\u4eab\u6570\u636e\u5b9e\u73b0\u8fdb\u7a0b\u95f4\u901a\u4fe1, \u5b58\u5728\u4ee5\u4e0b\u95ee\u9898: 1> \u6548\u7387\u4f4e(\u5171\u4eab\u6570\u636e\u57fa\u4e8e\u6587\u4ef6, \u800c \u6587\u4ef6\u662f\u786c\u76d8\u4e0a\u7684\u6570\u636e ) 2> \u9700\u8981\u81ea\u5df1\u52a0\u9501\u5904\u7406 ( \u5171\u4eab\u4f34\u968f\u7740\u7ade\u4e89!! ) \u52a0\u9501\u53ef\u4ee5\u4fdd\u8bc1\u591a\u4e2a\u8fdb\u7a0b\u4fee\u6539\u540c\u4e00\u5757\u6570\u636e\u65f6, \u540c\u4e00\u65f6\u95f4\u53ea\u80fd\u6709\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u8fdb\u884c\u4fee\u6539,\u5373\u4e32\u884c\u7684\u4fee\u6539! \u52a0\u9501\u5bfc\u81f4\u901f\u5ea6\u6162\u4e86,\u4f46\u727a\u7272\u4e86\u901f\u5ea6\u5374\u4fdd\u8bc1\u4e86\u6570\u636e\u5b89\u5168!! \u5728\u751f\u4ea7\u73af\u5883\u4e2d\u80fd\u4e0d\u81ea\u5df1\u5904\u7406\u9501\u7684\u95ee\u9898\u5c31\u522b\u81ea\u5df1\u5904\u7406, \u52a0\u9501\u662f\u4e00\u4e2a\u590d\u6742\u4e14\u5371\u9669\u7684\u884c\u4e3a (eg: \u5fd8\u8bb0\u91ca\u653e\u9501\u4e86,\u540e\u9762\u7684\u90fd\u5728\u90a3\u7b49\u7740\u90fd\u8fdb\u4e0d\u53bb) \u6211\u4eec\u9700\u8981\u627e\u5bfb\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\u80fd\u591f\u517c\u987e: 1> \u6548\u7387\u9ad8( \u591a\u4e2a\u8fdb\u7a0b\u5171\u4eab\u4e00\u5757\u5185\u5b58\u7684\u6570\u636e ) 2> \u5e2e\u6211\u4eec\u5904\u7406\u597d\u9501\u95ee\u9898 \u8fd9\u5c31\u4e0d\u5f97\u4e0d\u63d0\u5230mutiprocessing\u6a21\u5757\u4e3a\u6211\u4eec\u63d0\u4f9b\u7684 \u57fa\u4e8e\u6d88\u606f\u7684IPC\u8fdb\u7a0b\u901a\u4fe1\u673a\u5236: \u961f\u5217\u548c\u7ba1\u9053 \u25b3 \u961f\u5217\u548c\u7ba1\u9053\u90fd\u662f\u5171\u4eab\u7684\u5185\u5b58\u7a7a\u95f4. \u25b3 \u961f\u5217\u5e95\u5c42\u662f\u4ee5\u7ba1\u9053+\u9501\u7684\u65b9\u5f0f\u5b9e\u73b0\u7684! (\u7ba1\u9053\u5c31\u662f\u5185\u5b58\u7a7a\u95f4,\u5728\u8bb2\u8ff0subprocess\u6a21\u5757\u7684\u65f6\u5019\u5c31\u5df2\u7ecf\u63d0\u5230\u8fc7\u5566!) \u6211\u4eec\u7528\u961f\u5217!!!(\u204e\u204d\u0334\u031b\u1d17\u204d\u0334\u031b\u204e) \u7ba1\u9053\u76f8\u5173\u7528\u6cd5\u53ef\u53c2\u8003: https://www.cnblogs.com/linhaifeng/articles/7428874.html#_label7 \u9898\u5916\u8bdd: \u5728linux\u4e2d\u8f93\u5165 ` free -m ` \u663e\u793a\u7ed3\u679c\u7684shared\u5b57\u6bb5\u8868\u660e\u4e86\u5171\u4eab\u5185\u5b58\u6709\u591a\u5c11M!!","title":"\u8fdb\u7a0b\u95f4\u7684\u901a\u4fe1"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/7_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%9F%A5/#queue","text":"\u961f\u5217\u9ed8\u8ba4\u7684\u7279\u70b9: \u5148\u8fdb\u5148\u51faFIFO. \u6ce8\u610f: 1> \u961f\u5217\u5360\u7528\u7684\u662f\u5185\u5b58\u7a7a\u95f4 2> \u4e0d\u5e94\u8be5\u5f80\u961f\u5217\u4e2d\u653e\u5927\u6570\u636e,\u5e94\u8be5\u53ea\u5b58\u653e\u6570\u636e\u91cf\u8f83\u5c0f\u7684\u6d88\u606f!","title":"Queue\u57fa\u672c\u7528\u6cd5"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/7_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%9F%A5/#_12","text":"from multiprocessing import Queue # -- \u53c2\u6570maxsize\u9ed8\u8ba4\u4e3a0,\u8bbe\u7f6e\u7684\u53c2\u6570\u503c\u5c0f\u4e8e\u7b49\u4e8e0,\u8868\u660e\u961f\u5217\u5927\u5c0f\u65e0\u9650\u5236. # \u961f\u5217\u5360\u7528\u7684\u662f\u5185\u5b58\u7a7a\u95f4,\u6211\u4eec\u4e0d\u5e94\u8be5\u8bbe\u7f6e\u4e3a\u65e0\u9650\u5236! q = Queue ( 3 ) q . put ( 'first' ) q . put ({ \"k\" : \"second\" }) q . put ([ \"third\" ]) # q.put(4) # -- \u56e0\u4e3a\u8bbe\u7f6e\u7684\u961f\u5217\u5927\u5c0f\u4e3a3 \u7ee7\u7eed\u52a0\u7684\u8bdd\u4f1a\u5728\u8fd9\u91cc\u963b\u585e\u4f4f(\u9501\u7684\u6548\u679c) print ( q . get ()) print ( q . get ()) print ( q . get ()) # print(q.get()) # -- \u56e0\u4e3a\u961f\u5217\u4e2d\u53ea\u89813\u4e2a\u6570\u636e \u53d6\u4e0d\u51fa\u6765\u7b2c4\u4e2a,\u4f1a\u5728\u8fd9\u963b\u585e\u4f4f","title":"\u9700\u8981\u638c\u63e1\u7684"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/7_%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91%E5%BF%85%E7%9F%A5/#_13","text":"\u6ce8\u610f:\u53ea\u6709\u5728block\u4e3aTrue\u7684\u65f6\u5019,\u8bbe\u7f6etimeout\u8d85\u65f6\u65f6\u95f4\u624d\u6709\u610f\u4e49!! from multiprocessing import Queue q = Queue ( 3 ) \"\"\" put\u65b9\u6cd5\u7684\u53c2\u6570 block\u9ed8\u8ba4\u4e3aTrue,timeout\u9ed8\u8ba4\u4e3aNone \u961f\u5217\u5927\u5c0f\u4e3a3,\u524d3\u4e2a\u80af\u5b9a\u80fd\u6dfb\u52a0\u8fdb\u53bb!! \u7b2c4\u4e2a\u4f1a\u963b\u585e 1> \u4e0d\u52a0timeout,timeout\u9ed8\u8ba4\u4e3aNone,\u4f1a\u4e00\u76f4\u963b\u585e,\u76f4\u5230\u961f\u5217\u6709\u7a7a\u95f4 2> \u8bbe\u7f6etimeout=3,\u4e0d\u4f1a\u4e00\u76f4\u963b\u585e,\u963b\u585e3\u79d2\u540e,\u961f\u5217\u8fd8\u662f\u6ca1\u6709\u7a7a\u95f4,\u4f1a\u62a5\u9519 \"queue.Full\" \u544a\u77e5\u961f\u5217\u5df2\u6ee1 \u6ce8\u610f:\u53ea\u6709\u5728block\u4e3aTrue\u7684\u65f6\u5019,\u8bbe\u7f6etimeout\u8d85\u65f6\u65f6\u95f4\u624d\u6709\u610f\u4e49!! \"\"\" q . put ( 'first' , block = True , timeout = 3 ) q . put ({ \"k\" : \"second\" }, block = True , timeout = 3 ) q . put ([ \"third\" ], block = True , timeout = 3 ) # q.put(4, block=True, timeout=3) \"\"\" get\u65b9\u6cd5\u7684\u53c2\u6570 block\u9ed8\u8ba4\u4e3aTrue,timeout\u9ed8\u8ba4\u4e3aNone \u53d6\u7b2c4\u4e2a\u65f6,\u4f1a\u963b\u585e3\u79d2,3\u79d2\u540e\u961f\u5217\u91cc\u8fd8\u662f\u6ca1\u6709\u6570\u636e\u7684\u8bdd,\u4f1a\u62a5\u9519 \"queue.Empty\" \u544a\u77e5\u961f\u5217\u4e3a\u7a7a \"\"\" print ( q . get ( block = True , timeout = 3 )) print ( q . get ( block = True , timeout = 3 )) print ( q . get ( block = True , timeout = 3 )) # print(q.get(block=True, timeout=3)) \u82e5put\u6dfb\u52a0\u64cd\u4f5c block = False , \u5f53\u961f\u5217\u5df2\u6ee1, \u76f4\u63a5\u7acb\u523b\u62a5\u9519, \u538b\u6839\u4e0d\u4f1a\u963b\u585e.\u8bbe\u7f6etimeout\u4e5f\u6ca1\u7528. \u540c\u7406, \u82e5get\u53d6\u6570\u636e\u64cd\u4f5c block = False , \u5f53\u961f\u5217\u4e3a\u7a7a, \u76f4\u63a5\u7acb\u523b\u62a5\u9519, \u7b49\u90fd\u4e0d\u4f1a\u7b49. q.put_nowait(4) \u7b49\u540c\u4e8e q.put(4, block=False) q.get_nowait() \u7b49\u540c\u4e8e q.get(block=False)","title":"\u9700\u8981\u4e86\u89e3\u7684"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/8_%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B%21%21/","text":"\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u578b\u6572\u91cd\u8981!\u9022\u8003\u5fc5\u95ee!!! \u6982\u5ff5 \u00b6 Q1: \u4ec0\u4e48\u662f\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u578b? \u751f\u4ea7\u8005: \u6bd4\u55bb\u7684\u662f\u7a0b\u5e8f\u4e2d \u8d1f\u8d23\u4ea7\u751f\u6570\u636e \u7684\u4efb\u52a1 \u6d88\u8d39\u8005: \u6bd4\u55bb\u7684\u662f\u7a0b\u5e8f\u4e2d \u8d1f\u8d23\u5904\u7406\u6570\u636e \u7684\u4efb\u52a1 \u751f\u4ea7\u8005 --> \u5171\u4eab\u7684\u4ecb\u8d28 (\u901a\u5e38\u662f\u961f\u5217) <-- \u6d88\u8d39\u8005 Q2: \u4e3a\u4f55\u8981\u7528\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u578b? \u5b9e\u73b0\u4e86\u751f\u4ea7\u8005\u4e0e\u6d88\u8d39\u8005\u7684 \u89e3\u8026\u5408 , \u751f\u4ea7\u8005\u53ef\u4ee5\u4e0d\u505c\u7684\u751f\u4ea7,\u6d88\u8d39\u8005\u4e5f\u53ef\u4ee5\u4e0d\u505c\u7684\u6d88\u8d39! \u5e73\u8861\u4e86\u751f\u4ea7\u8005\u7684\u751f\u4ea7\u80fd\u529b\u4e0e\u6d88\u8d39\u8005\u7684\u6d88\u8d39\u80fd\u529b,\u5b83\u4fe9\u4e0d\u6328\u7740,\u90fd\u8ddf\u5171\u4eab\u7684\u4ecb\u8d28\u6253\u4ea4\u9053, \u63d0\u5347\u4e86\u7a0b\u5e8f\u6574\u4f53\u7684\u8fd0\u884c\u6548\u7387! Q3: \u4ec0\u4e48\u65f6\u5019\u7528? \u5f53\u6211\u4eec\u7684\u7a0b\u5e8f\u4e2d\u5b58\u5728\u660e\u663e\u7684\u4e24\u7c7b\u4efb\u52a1,\u4e00\u7c7b\u8d1f\u8d23\u4ea7\u751f\u6570\u636e,\u4e00\u7c7b\u8d1f\u8d23\u5904\u7406\u6570\u636e.. \u6b64\u65f6\u5c31\u5e94\u8be5\u8003\u8651\u4f7f\u7528\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u578b\u6765\u63d0\u5347\u7a0b\u5e8f\u7684\u6548\u7387! \u6bd4\u5982 : \u5199\u722c\u866b\u7a0b\u5e8f\u5c31\u4f1a\u7528\u5230\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u578b . \u9020\u6570\u636e -- \u7a0b\u5e8f\u4e2d\u7684\u4efb\u52a1A\u6a21\u62df\u6d4f\u89c8\u5668\u4e0b\u8f7d\u6570\u636e\u7684\u8fc7\u7a0b . \u5171\u4eab\u4ecb\u8d28 -- \u5c06\u4e0b\u8f7d\u4e0b\u6765\u7684\u6570\u636e\u653e\u5230\u961f\u5217\u91cc\u9762\u4e0d\u5408\u9002 , \u5e94\u8be5\u653e\u6d88\u606f . \"\u6211\u6709\u4e2a\u4e1c\u897f\u4e0b\u8f7d\u597d\u4e86,\u5728\u54ea\u4e2a\u4f4d\u7f6e,\u4f60\u5e94\u8be5\u53bb\u5904\u7406!\" \u5904\u7406\u6570\u636e -- \u7a0b\u5e8f\u4e2d\u7684\u4efb\u52a1B\u5230\u961f\u5217\u4e2d\u53d6\u6d88\u606f . \u5230\u6307\u5b9a\u7684\u4f4d\u7f6e\u628a\u6570\u636e\u62ff\u8fc7\u6765\u505a\u5904\u7406\u5373\u53ef . \u4e0a\u8ff0\u7684\u5b9e\u73b0\u751f\u4ea7\u8005 \u3001 \u6d88\u8d39\u8005 \u3001 \u5171\u4eab\u4ecb\u8d28\u90fd\u5728\u4e00\u53f0\u673a\u5668\u4e0a ! \u4e00\u53f0\u673a\u5668\u7684\u6027\u80fd\u662f\u6709\u6781\u9650\u7684 \u3001 \u7a33\u5b9a\u6027\u4e0d\u9ad8 ( \u786c\u76d8 \u3001 \u5185\u5b58\u574f\u4e86 , \u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u578b\u5c31\u5d29\u4e86 ! ) So , \u6211\u4eec\u5728\u516c\u53f8\u7684\u751f\u4ea7\u73af\u5883\u5f53\u4e2d . \u4e3a\u4e86\u63d0\u9ad8\u6211\u4eec\u7a0b\u5e8f\u7684 [ \u8fd0\u884c\u6548\u7387 ] \u548c [ \u7a33\u5b9a\u6027 ], \u4e0d\u5e94\u8be5\u5c06\u7a0b\u5e8f\u7684\u6240\u6709\u7ec4\u4ef6\u8fd0\u884c\u5728\u540c\u4e00\u53f0\u673a\u5668\u4e0a ! eg , \u4e00\u53f0\u9ad8\u6027\u80fd\u673a\u5668\u80fd\u8fd0\u884c\u4e00\u4e07\u4e2a\u751f\u4ea7\u8005\u5417 ? \u4e0d\u80fd , 100 \u53f0\u666e\u901a\u6027\u80fd\u7684\u673a\u5668\u5c31\u53ef\u4ee5 , \u6bcf\u53f0\u673a\u5668\u627f\u62c5100\u4e2a\u751f\u4ea7\u8005\u5c31\u884c . \u6d88\u8d39\u8005\u540c\u7406 ! \u6211\u4eec\u5c06\u751f\u4ea7 / \u6d88\u8d39\u5206\u6563\u51fa\u53bb , \u6027\u80fd\u63d0\u5347\u4e86 , \u4e00\u53f0\u673a\u5668\u627f\u62c5\u7684\u538b\u529b\u5206\u5230\u4e86100\u53f0\u4e0a . \u82e5\u6211\u4eec\u4f7f\u52b2\u63d0\u5347\u4e00\u53f0\u673a\u5668\u7684\u6027\u80fd\u8ba9\u5b83\u80fd\u8fd0\u884c\u4e00\u4e07\u4e2a\u751f\u4ea7\u8005\u5462 \uff1f \u4f7f\u52b2\u6dfb\u52a0\u786c\u4ef6 , \u4e00\u53f0\u673a\u5668\u7684\u6027\u80fd\u603b\u5f52\u4e5f\u662f\u6709\u6781\u9650\u7684 -- \u5782\u76f4\u6269\u5c55 - \u96c6\u4e2d\u5f0f \u627e\u4e00\u5806\u666e\u901a\u7684\u8ba1\u7b97\u673a , \u62fc\u5230\u4e00\u5757\u8fbe\u5230\u6211\u60f3\u8981\u7684\u6027\u80fd -- \u6c34\u5e73\u6269\u5f20 - \u5206\u5e03\u5f0f \u5206\u5e03\u5f0f\u6027\u80fd\u7a33\u5b9a\u6027\u90fd\u63d0\u5347\u4e86 , \u5355\u72ec\u574f\u67d0\u4e00\u4e24\u53f0\u673a\u5668 , \u4e0d\u5f71\u54cd\u7a0b\u5e8f\u8fd0\u884c . \u751f\u4ea7\u8005\u6d88\u8d39\u8005\u5206\u6563\u51fa\u53bb\u4e86 , \u5e94\u8be5\u6574\u5408\u5230\u4e00\u8d77 ! \u8fd9\u4e2a\u5171\u4eab\u4ecb\u8d28 ( \u961f\u5217 ) \u5e94\u8be5\u662f\u4e00\u4e2a\u57fa\u4e8e\u7f51\u7edc\u901a\u4fe1\u7684\u961f\u5217 !! ( \u6b64\u961f\u5217\u662f\u4e00\u4e2a\u5957\u63a5\u5b57\u8f6f\u4ef6 ! ) \u751f\u4ea7\u8005\u751f\u4ea7\u5b8c\u540e\u5f80\u8fd9\u4e2a\u961f\u5217\u91cc\u53d1\u6d88\u606f , \u6d88\u8d39\u8005\u518d\u57fa\u4e8e\u7f51\u7edc\u4ece\u8fd9\u4e2a\u961f\u5217\u91cc\u62ff\u8d70\u6d88\u606f , \u5230\u6307\u5b9a\u5730\u5740\u53d6\u6570\u636e\u8fdb\u884c\u5904\u7406 ! \u518d\u6b21\u5f3a\u8c03 \uff01 \u751f\u4ea7\u8005\u4e0d\u5e94\u8be5\u628a\u751f\u4ea7\u5b8c\u7684\u6570\u636e\u53d1\u5230\u961f\u5217\u91cc\u9762\u53bb \uff01 \u53ea\u7528\u53d1\u4e00\u4e2a\u6d88\u606f\u5373\u53ef \uff01 \u8981\u77e5\u9053,\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u578b\u4e0d\u4ec5\u9650\u4e8e\u5e94\u7528\u5728\u4e00\u53f0\u673a\u5668\u4e4b\u4e0a!! \u8fd8\u53ef\u4ee5\u5206\u5e03\u5f0f\u7684\u5e94\u7528\u5728\u591a\u53f0\u673a\u5668\u4e0a! \u751f\u4ea7\u5305\u5b50 \u00b6 \u6548\u7387\u6781\u4f4e\u7684\u7a0b\u5e8f \u00b6 \u53ef\u901a\u8fc7\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u578b\u89e3\u51b3\u8be5\u95ee\u9898!! \u4e3a\u4f55\u8bf4\u4e0b\u65b9\u751f\u4ea7\u5305\u5b50\u548c\u5403\u5305\u5b50\u7684\u7a0b\u5e8f\u6548\u7387\u6781\u4f4e? \u56e0\u4e3a\u751f\u4ea7\u5305\u5b50\u7684\u65f6\u5019\u4e0d\u80fd\u5403\u5305\u5b50,\u5403\u5305\u5b50\u7684\u65f6\u5019\u4e0d\u80fd\u751f\u5b58\u5305\u5b50! \u4ece\u751f\u4ea7\u8005\u89d2\u5ea6\u6765\u8bf4,\u751f\u4ea7\u8005\u5fc5\u987b\u7b49\u6d88\u8d39\u8005\u5403\u5b8c\u5305\u5b50\u540e\u624d\u80fd\u91cd\u65b0\u6295\u5165\u751f\u4ea7! \u751f\u4ea7\u8005\u5728\u6d88\u8d39\u8005\u5403\u5305\u5b50\u7684\u65f6\u5019\u662f\u5177\u5907\u751f\u4ea7\u80fd\u529b\u7684!\u751f\u4ea7\u8005\u7684\u751f\u4ea7\u80fd\u529b\u88ab\u65e0\u60c5\u6d6a\u8d39\u6389\u5566. \u4ece\u6d88\u8d39\u8005\u7684\u89d2\u5ea6\u6765\u8bf4,\u540c\u7406. \u8be5\u7a0b\u5e8f\u4e2d\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005 (\u5f3a\u8026\u5408) \u5230\u4e86\u4e00\u8d77! def producer (): for i in range ( 10 ): print ( f \"\u6b63\u5728\u751f\u4ea7\u7f16\u53f7\u4e3a { i } \u7684\u5305\u5b50!\" ) producer ( i ) def consumer ( number ): print ( f \"\u6b63\u5728\u5403\u7f16\u53f7\u4e3a { number } \u7684\u5305\u5b50!\" ) producer () \u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005 \u00b6 \u57fa\u4e8e \u961f\u5217 \u5b9e\u73b0\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u578b! \u6ce8\u610f,\u8be5\u5904\u7a0b\u5e8f\u4e2d\u53ea\u6d89\u53ca\u4e00\u4e2a\u751f\u4ea7\u8005\u548c\u4e00\u4e2a\u6d88\u8d39\u8005! \u4ee3\u7801\u5b9e\u73b0 \u00b6 import os import random import time from multiprocessing import Queue , Process , set_start_method def producer ( q ): for i in range ( 5 ): res = \"\u7f16\u53f7\u4e3a %s \u7684\u5305\u5b50\" % i time . sleep ( random . randint ( 1 , 3 )) # -- \u6a21\u62df\u53a8\u5e08\u751f\u4ea7\u4e00\u4e2a\u5305\u5b50\u7684\u65f6\u95f4 q . put ( res ) # -- \u5f80\u961f\u5217\u91cc\u4e22 # -- \\033[36m...\\033[0m \u8bbe\u7f6e\u7ec8\u7aef\u6253\u5370\u7684\u5b57\u4f53\u989c\u8272 print ( \" \\033 [36m [ %s ]\u53f7\u53a8\u5e08\u751f\u4ea7\u4e86 %s \\033 [0m\" % ( os . getpid (), res )) def consumer ( q ): while True : res = q . get () # -- \u4ece\u961f\u5217\u91cc\u53d6\u8d70 time . sleep ( random . randint ( 1 , 3 )) # -- \u6a21\u62df\u987e\u5ba2\u5403\u4e00\u4e2a\u5305\u5b50\u7684\u65f6\u95f4 print ( ' \\033 [34m [ %s ]\u53f7\u987e\u5ba2\u5403\u4e86 %s \\033 [0m' % ( os . getpid (), res )) if __name__ == '__main__' : set_start_method ( 'fork' ) # -- mac\u4e0a\u8fd0\u884c\u9700\u8981\u52a0\u8fd9\u4e00\u53e5 q = Queue () # -- \u751f\u4ea7\u8005 p1 = Process ( target = producer , args = ( q ,)) # -- \u6d88\u8d39\u8005 c1 = Process ( target = consumer , args = ( q ,)) p1 . start () c1 . start () print ( \"\u4e3b\" ) \u5728\u4e0a\u8ff0\u7a0b\u5e8f\u4e2d,\u6211\u4eec\u5236\u9020\u4e86\u4e24\u4e2a\u8fdb\u7a0b,\u751f\u4ea7\u8005p1\u548c\u6d88\u8d39\u8005c1.. p1\u5c06\u751f\u4ea7\u7684\u5305\u5b50\u4e22\u5230\u961f\u5217q\u4e2d,c1\u4ece\u961f\u5217q\u4e2d\u53d6\u51fa\u5305\u5b50\u6765\u5403.. \u8fd9\u4e24\u4e2a\u64cd\u4f5c\u662f\u5e76\u53d1\u6267\u884c\u7684!! p1\u751f\u4ea7\u4e00\u4e2a\u5305\u5b50\u7684\u65f6\u95f4\u770b\u5fc3\u60c5,\u5fc3\u60c5\u597d1s,\u5fc3\u60c5\u4e0d\u597d3\u79d2.. \u6d88\u8d39\u8005\u5403\u5305\u5b50\u540c\u7406. \u6240\u4ee5\u6253\u5370\u51fa\u7684\u7ed3\u679c\u4e2d,\u53a8\u5e08\u5148\u751f\u4ea7\u4e86\u7f16\u53f7\u4e3a0,1\u7684\u5305\u5b50,\u987e\u5ba2\u624d\u5403\u5b8c\u7f16\u53f7\u4e3a1\u7684\u5305\u5b50! \u4fa7\u9762\u4e5f\u8bf4\u660e\u4e86\u662f\u5e76\u53d1\u6267\u884c\u7684! \u95ee\u9898\u5206\u6790 \u00b6 \u5206\u6790\u7a0b\u5e8f\u4e3a\u5565\u6ca1\u6709\u9000\u51fa \u90a3\u7a0b\u5e8f\u8fd0\u884c\u7ed3\u679c\u4e3a\u5565\u6700\u540e\u4f1a\u963b\u585e\u4f4f\u5462? \u6211\u4eec\u6765\u5206\u6790,\u7236\u8fdb\u7a0b\u6253\u5370\u4e86\"\u4e3b\",\u8bc1\u660e \u7236\u8fdb\u7a0b\u7684\u6d3b\u662f\u5e72\u5b8c\u4e86\u7684,\u4f46\u6ca1\u6709\u7ed3\u675f,\u95ee\u9898\u5c31\u5728\u4e8e\u6709 \u975e\u5b88\u62a4\u7684\u5b50\u8fdb\u7a0b \u8fd8\u6ca1\u6709\u7ed3\u675f. \u518d\u770b\u4e24\u4e2a\u5b50\u8fdb\u7a0b\u7684\u4ee3\u7801.. \u4e24\u4e2a\u5b50\u8fdb\u7a0b\u90fd\u662f\u975e\u5b88\u62a4\u7684. p1\u751f\u4ea7\u5b8c5\u4e2a\u5305\u5b50\u540e,\u6d3b\u5e72\u5b8c\u4e86.\u53d8\u6210\u4e86\u50f5\u5c38\u8fdb\u7a0b; c1\u7684\u4ee3\u7801\u91cc\u6709 while True \u8bed\u53e5,\u4f1a\u4e0d\u65ad\u7684\u4ece\u961f\u5217\u4e2d q.get() \u53d6\u5305\u5b50!! \u4f46q\u961f\u5217\u4e2d\u53ea\u67095\u4e2a\u5305\u5b50,\u53d6\u5b8c\u4e86,\u961f\u5217\u4e3a\u7a7a,\u5c31\u963b\u585e\u4f4f\u4e86!! \u4f1a\u4e00\u76f4\u5361\u5728 q.get() \u8fd9\u4e00\u6b65. \u751f\u4ea7\u8005\u751f\u4ea7\u5b8c\u4e86,\u6d88\u8d39\u8005\u4e5f\u6d88\u8d39\u5b8c\u4e86,\u5e94\u8be5\u9000\u51fa\u7a0b\u5e8f! \u5982\u4f55\u89e3\u51b3\u5462? \u4e5f\u8bb8\u4f60\u4f1a\u60f3,\u7ed9c1\u4ece\u961f\u5217\u4e2d\u53d6\u6570\u636e\u7684get\u65b9\u6cd5\u8bbe\u7f6e\u53c2\u6570, res = q.get(block=True,timeout=4) ... \u80fd\u89e3\u51b3\u662f\u56e0\u4e3a\u6211\u4eec\u8fd9\u91cc\u6a21\u62df\u7684\u65f6\u95f4\u5ef6\u8fdf\u6700\u9ad8\u662f3\u79d2,\u771f\u5b9e\u573a\u666f\u4e2d\u65f6\u95f4\u662f\u4e0d\u80fd\u9884\u6d4b\u7684,\u628atimeout\u7684\u503c\u8bbe\u7f6e\u5927\u4e00\u4e9b,\u8bbe\u7f6e\u4e3a10000\uff1f\u8fd9..\u4f60\u8bd5\u8bd5,\u8bd5\u8bd5\u5c31\u901d\u4e16.\u8fd9\u4e0d\u662f\u6b63\u5e38\u89e3\u51b3\u95ee\u9898\u7684\u601d\u8def. \u90a3\u5c06timeout\u8bbe\u7f6e\u5c0f\u4e00\u70b9 res = q.get(block=True,timeout=1) ,\u518d\u6355\u6349\u5f02\u5e38?\u4e0d\u5408\u7406\u554a,\u4e07\u4e00\u8fd9\u4e2a\u5305\u5b50\u6b63\u5728\u751f\u4ea7\u8fc7\u7a0b\u4e2d,\u9700\u8981\u751f\u4ea73\u79d2\u5462? \u89e3\u51b3\u65b9\u6848 \u00b6 \u6b63\u786e\u7684\u89e3\u51b3\u65b9\u6848\u5982\u4e0b: \u601d\u8003\u65b9\u5411 -- \u5f80\u961f\u5217\u4e2d\u518d\u53d1\u4e00\u4e2a\u7ed3\u675f\u4fe1\u53f7 (eg: None) , \u8fd9\u6837\u6d88\u8d39\u8005\u5728\u63a5\u6536\u5230\u7ed3\u675f\u4fe1\u53f7\u540e\u5c31\u53ef\u4ee5break\u51fa\u6b7b\u5faa\u73af! \u751f\u4ea7\u8005p1\u548c\u7236\u8fdb\u7a0b\u90fd\u80fd\u53d1\u7ed3\u675f\u4fe1\u53f7: 1> \u8ba9\u751f\u4ea7\u8005\u5728\u751f\u4ea7\u5b8c\u6bd5\u540e,\u5f80\u961f\u5217\u4e2d\u518d\u53d1\u4e00\u4e2a\u7ed3\u675f\u4fe1\u53f7 2> \u4e3b\u8fdb\u7a0b\u7b49\u751f\u4ea7\u8005\u7ed3\u675f\u540e\u5f80\u961f\u5217\u4e2d\u53d1\u9001\u7ed3\u675f\u4fe1\u53f7 \u8fd9\u4e24\u79cd\u65b9\u5f0f\u90fd\u80fd\u89e3\u51b3\u963b\u585e\u7684\u95ee\u9898!! \u4efb\u9009\u5176\u4e00\u5373\u53ef!\u5173\u952e\u4ee3\u7801\u5982\u4e0b: \"\"\" \u2605 --\u751f\u4ea7\u8005p1\u53d1 \"\"\" def producer ( q ): for i in range ( 5 ): res = \"\u7f16\u53f7\u4e3a %s \u7684\u5305\u5b50\" % i time . sleep ( random . randint ( 1 , 3 )) q . put ( res ) print ( \" \\033 [36m [ %s ]\u53f7\u53a8\u5e08\u751f\u4ea7\u4e86 %s \\033 [0m\" % ( os . getpid (), res )) q . put ( None ) # -- p1\u53d1\u4e2a\u4fe1\u53f7None\u5230q\u961f\u5217\u4e2d,\u8868\u660e\u81ea\u5df1\u5df2\u7ecf\u751f\u4ea7\u5b8c\u5566! \"\"\" \u2605 --\u7236\u8fdb\u7a0b\u53d1 \"\"\" if __name__ == '__main__' : set_start_method ( 'fork' ) q = Queue () p1 = Process ( target = producer , args = ( q ,)) c1 = Process ( target = consumer , args = ( q ,)) p1 . start () c1 . start () p1 . join () q . put ( None ) print ( \"\u4e3b\" ) \"\"\" \u2605 --\u6d88\u8d39\u8005c1 \"\"\" def consumer ( q ): while True : res = q . get () if not res : # -- q\u961f\u5217\u662f\u5148\u8fdb\u5148\u51fa\u7684,\u6700\u540e\u624d\u4f1a\u53d6\u5230None,\u9000\u51fa\u5faa\u73af! break time . sleep ( random . randint ( 1 , 3 )) print ( ' \\033 [34m [ %s ]\u53f7\u987e\u5ba2\u5403\u4e86 %s \\033 [0m' % ( os . getpid (), res )) \u751f\u4ea7\u8005\u4eec\u6d88\u8d39\u8005\u4eec \u00b6 \u82e5\u662f\u4e00\u5806\u751f\u4ea7\u8005\u548c\u4e00\u5806\u6d88\u8d39\u8005\u5462? \u751f\u4ea7\u8005\u53d1\u7ed3\u675f\u4fe1\u53f7 \u00b6 import random import time from multiprocessing import Queue , Process , set_start_method def producer ( name , food , q ): for i in range ( 2 ): res = \"\u7f16\u53f7\u4e3a %s \u7684 %s \" % ( i , food ) time . sleep ( random . randint ( 1 , 3 )) q . put ( res ) print ( \" \\033 [36m \u53a8\u5e08[ %s ] \u751f\u4ea7\u4e86 %s \\033 [0m\" % ( name , res )) q . put ( None ) def consumer ( name , q ): while True : res = q . get () if not res : break time . sleep ( random . randint ( 1 , 3 )) print ( ' \\033 [34m \u987e\u5ba2[ %s ] \u5403\u4e86 %s \\033 [0m' % ( name , res )) if __name__ == '__main__' : set_start_method ( 'fork' ) # -- mac\u4e0a\u8fd0\u884c\u9700\u8981\u52a0\u8fd9\u4e00\u53e5 q = Queue () # -- \u751f\u4ea7\u8005\u4eec p1 = Process ( target = producer , args = ( '\u5c0f\u660e' , '\u5305\u5b50' , q )) p2 = Process ( target = producer , args = ( '\u5c0f\u7ea2' , '\u6cb9\u6761' , q )) p3 = Process ( target = producer , args = ( '\u5c0f\u5ddd' , '\u8c46\u6d46' , q )) # -- \u6d88\u8d39\u8005\u4eec c1 = Process ( target = consumer , args = ( '\u8def\u98de' , q )) c2 = Process ( target = consumer , args = ( '\u7d22\u9686' , q )) p1 . start () p2 . start () p3 . start () c1 . start () c2 . start () print ( \"\u4e3b\" ) \u6765,\u7422\u78e8\u4e0b\u8fd0\u884c\u7ed3\u679c\u5b58\u5728\u4ec0\u4e48\u95ee\u9898? \u751f\u4ea7\u8005\u5c0f\u7ea2\u751f\u4ea7\u7684\u7f16\u53f7\u4e3a1\u7684\u6cb9\u6761\u6ca1\u6709\u88ab\u6d88\u8d39\u8005\u5403\u6389,\u7a0b\u5e8f\u5c31\u9000\u51fa\u4e86!! 3\u4e2a\u751f\u4ea7\u8005\u751f\u4ea7\u7684\u4e1c\u897f\u4f1a\u4f9d\u6b21\u6dfb\u52a0\u5230\u961f\u5217q\u4e2d: [\u53050, \u53051, None, \u8c460, \u6cb90, \u8c461, None, \u6cb91, None] 2\u4e2a\u6d88\u8d39\u8005\u4f9d\u6b21\u4ece\u961f\u5217q\u4e2d\u53d6\u4e1c\u897f\u6765\u5403,\u9047\u5230None\u5c31\u4e0d\u80fd\u5403\u4e86,\u4f46\u961f\u5217\u540e\u9762\u662f\u8fd8\u6709\u6570\u636e\u7684!! \u6240\u4ee5\u6700\u540e\u7f16\u53f7\u4e3a1\u7684\u6cb9\u6761\u88ab\u6d6a\u8d39\u6389\u4e86..(\u3064\u0414`)\u30ce \u6ce8\u610f\u54c8,\u961f\u5217\u4e2d\u6570\u636e\u7684\u6dfb\u52a0\u548c\u53d6\u662f\u5e76\u53d1\u6267\u884c\u7684!! \u4e0d\u8981\u8bef\u89e3\u4e86. \u6240\u4ee5\u5728\u591a\u4e2a\u751f\u4ea7\u8005\u548c\u591a\u4e2a\u6d88\u8d39\u8005\u7684\u573a\u666f\u91cc,\u4e00\u4e2a\u751f\u4ea7\u8005\u751f\u4ea7\u5b8c\u540e\u5c31\u5f80\u961f\u5217\u91cc\u52a0\u7ed3\u675f\u4fe1\u53f7None\u4e0d\u592a\u5408\u9002! \u5e94\u8be5\u5f53\u6240\u6709\u7684\u751f\u4ea7\u8005\u751f\u4ea7\u5b8c\u540e,\u751f\u4ea7\u8005\u4eec\u518d\u52a0None\u5230\u961f\u5217\u4e2d\u53bb. \u7236\u8fdb\u7a0b\u53d1\u7ed3\u675f\u4fe1\u53f7 \u00b6 \u8981\u4fdd\u8bc1\u6240\u6709\u751f\u4ea7\u8005\u751f\u4ea7\u5b8c\u540e,\u7ed3\u675f\u4fe1\u53f7\u6dfb\u52a0\u5230\u6240\u6709\u751f\u4ea7\u8005\u751f\u4ea7\u7684\u6570\u636e\u7684\u540e\u9762!! import random import time from multiprocessing import Queue , Process , set_start_method def producer ( name , food , q ): for i in range ( 2 ): res = \"\u7f16\u53f7\u4e3a %s \u7684 %s \" % ( i , food ) time . sleep ( random . randint ( 1 , 3 )) q . put ( res ) print ( \" \\033 [36m \u53a8\u5e08[ %s ] \u751f\u4ea7\u4e86 %s \\033 [0m\" % ( name , res )) def consumer ( name , q ): while True : res = q . get () if not res : break time . sleep ( random . randint ( 1 , 3 )) print ( ' \\033 [34m \u987e\u5ba2[ %s ] \u5403\u4e86 %s \\033 [0m' % ( name , res )) if __name__ == '__main__' : set_start_method ( 'fork' ) # -- mac\u4e0a\u8fd0\u884c\u9700\u8981\u52a0\u8fd9\u4e00\u53e5 q = Queue () # -- \u751f\u4ea7\u8005\u4eec p1 = Process ( target = producer , args = ( '\u5c0f\u660e' , '\u5305\u5b50' , q )) p2 = Process ( target = producer , args = ( '\u5c0f\u7ea2' , '\u6cb9\u6761' , q )) p3 = Process ( target = producer , args = ( '\u5c0f\u5ddd' , '\u8c46\u6d46' , q )) # -- \u6d88\u8d39\u8005\u4eec c1 = Process ( target = consumer , args = ( '\u8def\u98de' , q )) c2 = Process ( target = consumer , args = ( '\u7d22\u9686' , q )) p1 . start () p2 . start () p3 . start () c1 . start () c2 . start () # -- \u7236\u8fdb\u7a0b\u7b49\u5f85p1\u3001p2\u3001p3\u7ed3\u675f,\u610f\u5473\u7740\u6240\u6709\u751f\u4ea7\u8005\u751f\u4ea7\u7684\u6570\u636e\u90fd\u4e22\u5230\u961f\u5217\u4e2d\u5566! p1 . join () p2 . join () p3 . join () # -- \u5728p1\u3001p2\u3001p3\u90fd\u7ed3\u675f\u540e,\u624d\u5e94\u8be5\u5f80\u961f\u5217\u91cc\u653e\u7ed3\u675f\u4fe1\u53f7! # \u6709\u51e0\u4e2a\u6d88\u8d39\u8005\u5c31\u5e94\u8be5\u653e\u51e0\u4e2aNone! q . put ( None ) q . put ( None ) print ( \"\u4e3b\" ) \u6709\u51e0\u4e2a\u6d88\u8d39\u8005\u5c31\u6dfb\u52a0\u51e0\u4e2a\u7ed3\u675f\u4fe1\u606f, \u8fd8\u6709\u53bb\u6570, \u6709\u70b9low!! \u6709\u4e2a\u7ec8\u6781\u89e3\u51b3\u65b9\u6848! \u4f7f\u7528JoinableQueue!! JoinableQueue \u00b6 JoinableQueue\u9664\u4e86\u4e0eQueue\u6709\u76f8\u540c\u7684\u65b9\u6cd5\u4e4b\u5916\u8fd8\u5177\u6709: q.task_done() \u548c q.join() \u65b9\u6cd5. import random import time from multiprocessing import JoinableQueue , Process , set_start_method def producer ( name , food , q ): for i in range ( 2 ): res = \"\u7f16\u53f7\u4e3a %s \u7684 %s \" % ( i , food ) time . sleep ( random . randint ( 1 , 3 )) q . put ( res ) print ( \" \\033 [36m \u53a8\u5e08[ %s ] \u751f\u4ea7\u4e86 %s \\033 [0m\" % ( name , res )) def consumer ( name , q ): while True : res = q . get () time . sleep ( random . randint ( 1 , 3 )) print ( ' \\033 [34m \u987e\u5ba2[ %s ] \u5403\u4e86 %s \\033 [0m' % ( name , res )) q . task_done () # -- \u5411q.join()\u53d1\u9001\u4e00\u6b21\u4fe1\u53f7,\u544a\u8bc9\u961f\u5217\u6709\u4e00\u4e2a\u6570\u636e\u5df2\u7ecf\u88ab\u6211\u53d6\u8d70\u4e86! if __name__ == '__main__' : set_start_method ( 'fork' ) # -- mac\u4e0a\u8fd0\u884c\u9700\u8981\u52a0\u8fd9\u4e00\u53e5 q = JoinableQueue () # -- \u751f\u4ea7\u8005\u4eec p1 = Process ( target = producer , args = ( '\u5c0f\u660e' , '\u5305\u5b50' , q )) p2 = Process ( target = producer , args = ( '\u5c0f\u7ea2' , '\u6cb9\u6761' , q )) p3 = Process ( target = producer , args = ( '\u5c0f\u5ddd' , '\u8c46\u6d46' , q )) # -- \u6d88\u8d39\u8005\u4eec c1 = Process ( target = consumer , args = ( '\u8def\u98de' , q )) c2 = Process ( target = consumer , args = ( '\u7d22\u9686' , q )) c1 . daemon = True c2 . daemon = True p_c_list = [ p1 , p2 , p3 , c1 , c2 ] for obj in p_c_list : obj . start () # -- \u6240\u6709\u7684\u751f\u4ea7\u8005\u90fd\u751f\u4ea7\u5b8c\u4e86,\u610f\u5473\u8fd9\u80af\u5b9a\u4e0d\u4f1a\u5f80\u961f\u5217\u91cc\u653e\u6570\u636e\u5566! p1 . join () p2 . join () p3 . join () # -- \u8be5\u4ee3\u7801\u4f1a\u7edf\u8ba1\u961f\u5217\u91cc\u6709\u591a\u5c11\u6570\u636e,\u5e76\u7b49\u5f85\u961f\u5217\u88ab\u53d6\u5e72\u51c0! # \u6ce8\u610f!! # \u4e0d\u662f\u6307\u751f\u4ea7\u8005\u4e00\u5171\u751f\u4ea7\u4e86\u591a\u5c11\u6570\u636e,\u524d\u9762p1-p3.join\u8fc7\u7a0b\u4e2d,\u6d88\u8d39\u8005\u4e5f\u5728\u4ece\u961f\u5217\u4e2d\u53d6\u6570\u636e. # \u662f\u6307\u751f\u4ea7\u8005\u751f\u4ea7\u5b8c\u540e,\u4e0d\u4f1a\u6709\u4eba\u518d\u5f80\u961f\u5217\u91cc\u653e\u6570\u636e\u5566,\u6b64\u65f6\u961f\u5217\u91cc\u8fd8\u6709\u591a\u5c11\u6570\u636e! # (\u6d88\u8d39\u8005\u5728\u7edf\u8ba1\u4e4b\u524d\u4ece\u961f\u5217\u91cc\u53d6\u8d70\u6570\u636e\u6709\u5f71\u54cd\u5417?\u6ca1\u6709\u5f71\u54cd\u554a!) q . join () \"\"\" q.join()\u7ed3\u675f\u610f\u5473\u7740: 1> \u4e3b\u8fdb\u7a0b\u4ee3\u7801\u8fd0\u884c\u5b8c\u6bd5 -- p1-p3.join()\u4e09\u884c\u4ee3\u7801\u8fd0\u884c\u5b8c\u6bd5,\u5373\u751f\u4ea7\u8005\u8fd0\u884c\u5b8c\u6bd5 2> \u961f\u5217\u4e2d\u7684\u6570\u636e\u88ab\u53d6\u5e72\u51c0\u4e86 -- \u6d88\u8d39\u8005\u6ca1\u6709\u5b58\u5728\u7684\u610f\u4e49\u4e86!! \u5408\u5728\u4e00\u8d77: \u4e3b\u8fdb\u7a0b\u4ee3\u7801\u8fd0\u884c\u5b8c\u6bd5,\u6d88\u8d39\u8005\u6ca1\u6709\u5b58\u5728\u7684\u610f\u4e49.. \u5c31\u662f\u5b88\u62a4\u8fdb\u7a0b\u7684\u5e94\u7528\u573a\u666f!!! \"\"\" q.join() \u8fd0\u884c\u5b8c\u4e86,\u610f\u5473\u7740\u4e3b\u8fdb\u7a0b\u5e72\u5b8c\u6d3b\u4e86! \u751f\u4ea7\u8005\u751f\u4ea7\u5b8c\u4e86! \u6d88\u8d39\u8005\u4e5f\u628a\u751f\u4ea7\u7684\u98df\u7269\u5403\u5b8c\u4e86! \u4f46c1,c2\u4e24\u4e2a\u6d88\u8d39\u8005\u8fdb\u7a0b\u8fd8\u6ca1\u6709\u7ed3\u675f.. \u4f1a\u963b\u585e\u5728 q.get() \u8fd9\u884c\u4ee3\u7801\u5904. c1,c2\u6ca1\u6709\u5b58\u5728\u7684\u5fc5\u8981\u5566,\u6b64\u65f6\u5e94\u8be5\u7ed3\u675f\u5566!! \u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u5c06\u6d88\u8d39\u8005\u8bbe\u7f6e\u4e3a\u5b88\u62a4\u8fdb\u7a0b! \u5f00\u5b50\u8fdb\u7a0b\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u5e76\u53d1\u7684\u6267\u884c\u4efb\u52a1,\u82e5\u5e76\u53d1\u6267\u884c\u7684\u4efb\u52a1\u7684\u751f\u547d\u5468\u671f\u4f34\u968f\u7740\u4e3b\u8fdb\u7a0b\u4ee3\u7801\u7ed3\u675f\u540e\u5c31\u6ca1\u6709\u5b58\u5728\u7684\u610f\u4e49\u5566,\u5c31\u5e94\u8be5\u5c06\u8be5\u5b50\u8fdb\u7a0b\u8bbe\u7f6e\u4e3a\u5b88\u62a4\u8fdb\u7a0b!! \u5b88\u62a4\u8fdb\u7a0b\u5728\u4e3b\u8fdb\u7a0b\u4ee3\u7801\u7ed3\u675f\u540e\u81ea\u52a8\u6b7b\u6389!","title":"\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u578b!!"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/8_%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B%21%21/#_1","text":"Q1: \u4ec0\u4e48\u662f\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u578b? \u751f\u4ea7\u8005: \u6bd4\u55bb\u7684\u662f\u7a0b\u5e8f\u4e2d \u8d1f\u8d23\u4ea7\u751f\u6570\u636e \u7684\u4efb\u52a1 \u6d88\u8d39\u8005: \u6bd4\u55bb\u7684\u662f\u7a0b\u5e8f\u4e2d \u8d1f\u8d23\u5904\u7406\u6570\u636e \u7684\u4efb\u52a1 \u751f\u4ea7\u8005 --> \u5171\u4eab\u7684\u4ecb\u8d28 (\u901a\u5e38\u662f\u961f\u5217) <-- \u6d88\u8d39\u8005 Q2: \u4e3a\u4f55\u8981\u7528\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u578b? \u5b9e\u73b0\u4e86\u751f\u4ea7\u8005\u4e0e\u6d88\u8d39\u8005\u7684 \u89e3\u8026\u5408 , \u751f\u4ea7\u8005\u53ef\u4ee5\u4e0d\u505c\u7684\u751f\u4ea7,\u6d88\u8d39\u8005\u4e5f\u53ef\u4ee5\u4e0d\u505c\u7684\u6d88\u8d39! \u5e73\u8861\u4e86\u751f\u4ea7\u8005\u7684\u751f\u4ea7\u80fd\u529b\u4e0e\u6d88\u8d39\u8005\u7684\u6d88\u8d39\u80fd\u529b,\u5b83\u4fe9\u4e0d\u6328\u7740,\u90fd\u8ddf\u5171\u4eab\u7684\u4ecb\u8d28\u6253\u4ea4\u9053, \u63d0\u5347\u4e86\u7a0b\u5e8f\u6574\u4f53\u7684\u8fd0\u884c\u6548\u7387! Q3: \u4ec0\u4e48\u65f6\u5019\u7528? \u5f53\u6211\u4eec\u7684\u7a0b\u5e8f\u4e2d\u5b58\u5728\u660e\u663e\u7684\u4e24\u7c7b\u4efb\u52a1,\u4e00\u7c7b\u8d1f\u8d23\u4ea7\u751f\u6570\u636e,\u4e00\u7c7b\u8d1f\u8d23\u5904\u7406\u6570\u636e.. \u6b64\u65f6\u5c31\u5e94\u8be5\u8003\u8651\u4f7f\u7528\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u578b\u6765\u63d0\u5347\u7a0b\u5e8f\u7684\u6548\u7387! \u6bd4\u5982 : \u5199\u722c\u866b\u7a0b\u5e8f\u5c31\u4f1a\u7528\u5230\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u578b . \u9020\u6570\u636e -- \u7a0b\u5e8f\u4e2d\u7684\u4efb\u52a1A\u6a21\u62df\u6d4f\u89c8\u5668\u4e0b\u8f7d\u6570\u636e\u7684\u8fc7\u7a0b . \u5171\u4eab\u4ecb\u8d28 -- \u5c06\u4e0b\u8f7d\u4e0b\u6765\u7684\u6570\u636e\u653e\u5230\u961f\u5217\u91cc\u9762\u4e0d\u5408\u9002 , \u5e94\u8be5\u653e\u6d88\u606f . \"\u6211\u6709\u4e2a\u4e1c\u897f\u4e0b\u8f7d\u597d\u4e86,\u5728\u54ea\u4e2a\u4f4d\u7f6e,\u4f60\u5e94\u8be5\u53bb\u5904\u7406!\" \u5904\u7406\u6570\u636e -- \u7a0b\u5e8f\u4e2d\u7684\u4efb\u52a1B\u5230\u961f\u5217\u4e2d\u53d6\u6d88\u606f . \u5230\u6307\u5b9a\u7684\u4f4d\u7f6e\u628a\u6570\u636e\u62ff\u8fc7\u6765\u505a\u5904\u7406\u5373\u53ef . \u4e0a\u8ff0\u7684\u5b9e\u73b0\u751f\u4ea7\u8005 \u3001 \u6d88\u8d39\u8005 \u3001 \u5171\u4eab\u4ecb\u8d28\u90fd\u5728\u4e00\u53f0\u673a\u5668\u4e0a ! \u4e00\u53f0\u673a\u5668\u7684\u6027\u80fd\u662f\u6709\u6781\u9650\u7684 \u3001 \u7a33\u5b9a\u6027\u4e0d\u9ad8 ( \u786c\u76d8 \u3001 \u5185\u5b58\u574f\u4e86 , \u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u578b\u5c31\u5d29\u4e86 ! ) So , \u6211\u4eec\u5728\u516c\u53f8\u7684\u751f\u4ea7\u73af\u5883\u5f53\u4e2d . \u4e3a\u4e86\u63d0\u9ad8\u6211\u4eec\u7a0b\u5e8f\u7684 [ \u8fd0\u884c\u6548\u7387 ] \u548c [ \u7a33\u5b9a\u6027 ], \u4e0d\u5e94\u8be5\u5c06\u7a0b\u5e8f\u7684\u6240\u6709\u7ec4\u4ef6\u8fd0\u884c\u5728\u540c\u4e00\u53f0\u673a\u5668\u4e0a ! eg , \u4e00\u53f0\u9ad8\u6027\u80fd\u673a\u5668\u80fd\u8fd0\u884c\u4e00\u4e07\u4e2a\u751f\u4ea7\u8005\u5417 ? \u4e0d\u80fd , 100 \u53f0\u666e\u901a\u6027\u80fd\u7684\u673a\u5668\u5c31\u53ef\u4ee5 , \u6bcf\u53f0\u673a\u5668\u627f\u62c5100\u4e2a\u751f\u4ea7\u8005\u5c31\u884c . \u6d88\u8d39\u8005\u540c\u7406 ! \u6211\u4eec\u5c06\u751f\u4ea7 / \u6d88\u8d39\u5206\u6563\u51fa\u53bb , \u6027\u80fd\u63d0\u5347\u4e86 , \u4e00\u53f0\u673a\u5668\u627f\u62c5\u7684\u538b\u529b\u5206\u5230\u4e86100\u53f0\u4e0a . \u82e5\u6211\u4eec\u4f7f\u52b2\u63d0\u5347\u4e00\u53f0\u673a\u5668\u7684\u6027\u80fd\u8ba9\u5b83\u80fd\u8fd0\u884c\u4e00\u4e07\u4e2a\u751f\u4ea7\u8005\u5462 \uff1f \u4f7f\u52b2\u6dfb\u52a0\u786c\u4ef6 , \u4e00\u53f0\u673a\u5668\u7684\u6027\u80fd\u603b\u5f52\u4e5f\u662f\u6709\u6781\u9650\u7684 -- \u5782\u76f4\u6269\u5c55 - \u96c6\u4e2d\u5f0f \u627e\u4e00\u5806\u666e\u901a\u7684\u8ba1\u7b97\u673a , \u62fc\u5230\u4e00\u5757\u8fbe\u5230\u6211\u60f3\u8981\u7684\u6027\u80fd -- \u6c34\u5e73\u6269\u5f20 - \u5206\u5e03\u5f0f \u5206\u5e03\u5f0f\u6027\u80fd\u7a33\u5b9a\u6027\u90fd\u63d0\u5347\u4e86 , \u5355\u72ec\u574f\u67d0\u4e00\u4e24\u53f0\u673a\u5668 , \u4e0d\u5f71\u54cd\u7a0b\u5e8f\u8fd0\u884c . \u751f\u4ea7\u8005\u6d88\u8d39\u8005\u5206\u6563\u51fa\u53bb\u4e86 , \u5e94\u8be5\u6574\u5408\u5230\u4e00\u8d77 ! \u8fd9\u4e2a\u5171\u4eab\u4ecb\u8d28 ( \u961f\u5217 ) \u5e94\u8be5\u662f\u4e00\u4e2a\u57fa\u4e8e\u7f51\u7edc\u901a\u4fe1\u7684\u961f\u5217 !! ( \u6b64\u961f\u5217\u662f\u4e00\u4e2a\u5957\u63a5\u5b57\u8f6f\u4ef6 ! ) \u751f\u4ea7\u8005\u751f\u4ea7\u5b8c\u540e\u5f80\u8fd9\u4e2a\u961f\u5217\u91cc\u53d1\u6d88\u606f , \u6d88\u8d39\u8005\u518d\u57fa\u4e8e\u7f51\u7edc\u4ece\u8fd9\u4e2a\u961f\u5217\u91cc\u62ff\u8d70\u6d88\u606f , \u5230\u6307\u5b9a\u5730\u5740\u53d6\u6570\u636e\u8fdb\u884c\u5904\u7406 ! \u518d\u6b21\u5f3a\u8c03 \uff01 \u751f\u4ea7\u8005\u4e0d\u5e94\u8be5\u628a\u751f\u4ea7\u5b8c\u7684\u6570\u636e\u53d1\u5230\u961f\u5217\u91cc\u9762\u53bb \uff01 \u53ea\u7528\u53d1\u4e00\u4e2a\u6d88\u606f\u5373\u53ef \uff01 \u8981\u77e5\u9053,\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u578b\u4e0d\u4ec5\u9650\u4e8e\u5e94\u7528\u5728\u4e00\u53f0\u673a\u5668\u4e4b\u4e0a!! \u8fd8\u53ef\u4ee5\u5206\u5e03\u5f0f\u7684\u5e94\u7528\u5728\u591a\u53f0\u673a\u5668\u4e0a!","title":"\u6982\u5ff5"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/8_%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B%21%21/#_2","text":"","title":"\u751f\u4ea7\u5305\u5b50"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/8_%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B%21%21/#_3","text":"\u53ef\u901a\u8fc7\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u578b\u89e3\u51b3\u8be5\u95ee\u9898!! \u4e3a\u4f55\u8bf4\u4e0b\u65b9\u751f\u4ea7\u5305\u5b50\u548c\u5403\u5305\u5b50\u7684\u7a0b\u5e8f\u6548\u7387\u6781\u4f4e? \u56e0\u4e3a\u751f\u4ea7\u5305\u5b50\u7684\u65f6\u5019\u4e0d\u80fd\u5403\u5305\u5b50,\u5403\u5305\u5b50\u7684\u65f6\u5019\u4e0d\u80fd\u751f\u5b58\u5305\u5b50! \u4ece\u751f\u4ea7\u8005\u89d2\u5ea6\u6765\u8bf4,\u751f\u4ea7\u8005\u5fc5\u987b\u7b49\u6d88\u8d39\u8005\u5403\u5b8c\u5305\u5b50\u540e\u624d\u80fd\u91cd\u65b0\u6295\u5165\u751f\u4ea7! \u751f\u4ea7\u8005\u5728\u6d88\u8d39\u8005\u5403\u5305\u5b50\u7684\u65f6\u5019\u662f\u5177\u5907\u751f\u4ea7\u80fd\u529b\u7684!\u751f\u4ea7\u8005\u7684\u751f\u4ea7\u80fd\u529b\u88ab\u65e0\u60c5\u6d6a\u8d39\u6389\u5566. \u4ece\u6d88\u8d39\u8005\u7684\u89d2\u5ea6\u6765\u8bf4,\u540c\u7406. \u8be5\u7a0b\u5e8f\u4e2d\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005 (\u5f3a\u8026\u5408) \u5230\u4e86\u4e00\u8d77! def producer (): for i in range ( 10 ): print ( f \"\u6b63\u5728\u751f\u4ea7\u7f16\u53f7\u4e3a { i } \u7684\u5305\u5b50!\" ) producer ( i ) def consumer ( number ): print ( f \"\u6b63\u5728\u5403\u7f16\u53f7\u4e3a { number } \u7684\u5305\u5b50!\" ) producer ()","title":"\u6548\u7387\u6781\u4f4e\u7684\u7a0b\u5e8f"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/8_%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B%21%21/#_4","text":"\u57fa\u4e8e \u961f\u5217 \u5b9e\u73b0\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u578b! \u6ce8\u610f,\u8be5\u5904\u7a0b\u5e8f\u4e2d\u53ea\u6d89\u53ca\u4e00\u4e2a\u751f\u4ea7\u8005\u548c\u4e00\u4e2a\u6d88\u8d39\u8005!","title":"\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/8_%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B%21%21/#_5","text":"import os import random import time from multiprocessing import Queue , Process , set_start_method def producer ( q ): for i in range ( 5 ): res = \"\u7f16\u53f7\u4e3a %s \u7684\u5305\u5b50\" % i time . sleep ( random . randint ( 1 , 3 )) # -- \u6a21\u62df\u53a8\u5e08\u751f\u4ea7\u4e00\u4e2a\u5305\u5b50\u7684\u65f6\u95f4 q . put ( res ) # -- \u5f80\u961f\u5217\u91cc\u4e22 # -- \\033[36m...\\033[0m \u8bbe\u7f6e\u7ec8\u7aef\u6253\u5370\u7684\u5b57\u4f53\u989c\u8272 print ( \" \\033 [36m [ %s ]\u53f7\u53a8\u5e08\u751f\u4ea7\u4e86 %s \\033 [0m\" % ( os . getpid (), res )) def consumer ( q ): while True : res = q . get () # -- \u4ece\u961f\u5217\u91cc\u53d6\u8d70 time . sleep ( random . randint ( 1 , 3 )) # -- \u6a21\u62df\u987e\u5ba2\u5403\u4e00\u4e2a\u5305\u5b50\u7684\u65f6\u95f4 print ( ' \\033 [34m [ %s ]\u53f7\u987e\u5ba2\u5403\u4e86 %s \\033 [0m' % ( os . getpid (), res )) if __name__ == '__main__' : set_start_method ( 'fork' ) # -- mac\u4e0a\u8fd0\u884c\u9700\u8981\u52a0\u8fd9\u4e00\u53e5 q = Queue () # -- \u751f\u4ea7\u8005 p1 = Process ( target = producer , args = ( q ,)) # -- \u6d88\u8d39\u8005 c1 = Process ( target = consumer , args = ( q ,)) p1 . start () c1 . start () print ( \"\u4e3b\" ) \u5728\u4e0a\u8ff0\u7a0b\u5e8f\u4e2d,\u6211\u4eec\u5236\u9020\u4e86\u4e24\u4e2a\u8fdb\u7a0b,\u751f\u4ea7\u8005p1\u548c\u6d88\u8d39\u8005c1.. p1\u5c06\u751f\u4ea7\u7684\u5305\u5b50\u4e22\u5230\u961f\u5217q\u4e2d,c1\u4ece\u961f\u5217q\u4e2d\u53d6\u51fa\u5305\u5b50\u6765\u5403.. \u8fd9\u4e24\u4e2a\u64cd\u4f5c\u662f\u5e76\u53d1\u6267\u884c\u7684!! p1\u751f\u4ea7\u4e00\u4e2a\u5305\u5b50\u7684\u65f6\u95f4\u770b\u5fc3\u60c5,\u5fc3\u60c5\u597d1s,\u5fc3\u60c5\u4e0d\u597d3\u79d2.. \u6d88\u8d39\u8005\u5403\u5305\u5b50\u540c\u7406. \u6240\u4ee5\u6253\u5370\u51fa\u7684\u7ed3\u679c\u4e2d,\u53a8\u5e08\u5148\u751f\u4ea7\u4e86\u7f16\u53f7\u4e3a0,1\u7684\u5305\u5b50,\u987e\u5ba2\u624d\u5403\u5b8c\u7f16\u53f7\u4e3a1\u7684\u5305\u5b50! \u4fa7\u9762\u4e5f\u8bf4\u660e\u4e86\u662f\u5e76\u53d1\u6267\u884c\u7684!","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/8_%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B%21%21/#_6","text":"\u5206\u6790\u7a0b\u5e8f\u4e3a\u5565\u6ca1\u6709\u9000\u51fa \u90a3\u7a0b\u5e8f\u8fd0\u884c\u7ed3\u679c\u4e3a\u5565\u6700\u540e\u4f1a\u963b\u585e\u4f4f\u5462? \u6211\u4eec\u6765\u5206\u6790,\u7236\u8fdb\u7a0b\u6253\u5370\u4e86\"\u4e3b\",\u8bc1\u660e \u7236\u8fdb\u7a0b\u7684\u6d3b\u662f\u5e72\u5b8c\u4e86\u7684,\u4f46\u6ca1\u6709\u7ed3\u675f,\u95ee\u9898\u5c31\u5728\u4e8e\u6709 \u975e\u5b88\u62a4\u7684\u5b50\u8fdb\u7a0b \u8fd8\u6ca1\u6709\u7ed3\u675f. \u518d\u770b\u4e24\u4e2a\u5b50\u8fdb\u7a0b\u7684\u4ee3\u7801.. \u4e24\u4e2a\u5b50\u8fdb\u7a0b\u90fd\u662f\u975e\u5b88\u62a4\u7684. p1\u751f\u4ea7\u5b8c5\u4e2a\u5305\u5b50\u540e,\u6d3b\u5e72\u5b8c\u4e86.\u53d8\u6210\u4e86\u50f5\u5c38\u8fdb\u7a0b; c1\u7684\u4ee3\u7801\u91cc\u6709 while True \u8bed\u53e5,\u4f1a\u4e0d\u65ad\u7684\u4ece\u961f\u5217\u4e2d q.get() \u53d6\u5305\u5b50!! \u4f46q\u961f\u5217\u4e2d\u53ea\u67095\u4e2a\u5305\u5b50,\u53d6\u5b8c\u4e86,\u961f\u5217\u4e3a\u7a7a,\u5c31\u963b\u585e\u4f4f\u4e86!! \u4f1a\u4e00\u76f4\u5361\u5728 q.get() \u8fd9\u4e00\u6b65. \u751f\u4ea7\u8005\u751f\u4ea7\u5b8c\u4e86,\u6d88\u8d39\u8005\u4e5f\u6d88\u8d39\u5b8c\u4e86,\u5e94\u8be5\u9000\u51fa\u7a0b\u5e8f! \u5982\u4f55\u89e3\u51b3\u5462? \u4e5f\u8bb8\u4f60\u4f1a\u60f3,\u7ed9c1\u4ece\u961f\u5217\u4e2d\u53d6\u6570\u636e\u7684get\u65b9\u6cd5\u8bbe\u7f6e\u53c2\u6570, res = q.get(block=True,timeout=4) ... \u80fd\u89e3\u51b3\u662f\u56e0\u4e3a\u6211\u4eec\u8fd9\u91cc\u6a21\u62df\u7684\u65f6\u95f4\u5ef6\u8fdf\u6700\u9ad8\u662f3\u79d2,\u771f\u5b9e\u573a\u666f\u4e2d\u65f6\u95f4\u662f\u4e0d\u80fd\u9884\u6d4b\u7684,\u628atimeout\u7684\u503c\u8bbe\u7f6e\u5927\u4e00\u4e9b,\u8bbe\u7f6e\u4e3a10000\uff1f\u8fd9..\u4f60\u8bd5\u8bd5,\u8bd5\u8bd5\u5c31\u901d\u4e16.\u8fd9\u4e0d\u662f\u6b63\u5e38\u89e3\u51b3\u95ee\u9898\u7684\u601d\u8def. \u90a3\u5c06timeout\u8bbe\u7f6e\u5c0f\u4e00\u70b9 res = q.get(block=True,timeout=1) ,\u518d\u6355\u6349\u5f02\u5e38?\u4e0d\u5408\u7406\u554a,\u4e07\u4e00\u8fd9\u4e2a\u5305\u5b50\u6b63\u5728\u751f\u4ea7\u8fc7\u7a0b\u4e2d,\u9700\u8981\u751f\u4ea73\u79d2\u5462?","title":"\u95ee\u9898\u5206\u6790"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/8_%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B%21%21/#_7","text":"\u6b63\u786e\u7684\u89e3\u51b3\u65b9\u6848\u5982\u4e0b: \u601d\u8003\u65b9\u5411 -- \u5f80\u961f\u5217\u4e2d\u518d\u53d1\u4e00\u4e2a\u7ed3\u675f\u4fe1\u53f7 (eg: None) , \u8fd9\u6837\u6d88\u8d39\u8005\u5728\u63a5\u6536\u5230\u7ed3\u675f\u4fe1\u53f7\u540e\u5c31\u53ef\u4ee5break\u51fa\u6b7b\u5faa\u73af! \u751f\u4ea7\u8005p1\u548c\u7236\u8fdb\u7a0b\u90fd\u80fd\u53d1\u7ed3\u675f\u4fe1\u53f7: 1> \u8ba9\u751f\u4ea7\u8005\u5728\u751f\u4ea7\u5b8c\u6bd5\u540e,\u5f80\u961f\u5217\u4e2d\u518d\u53d1\u4e00\u4e2a\u7ed3\u675f\u4fe1\u53f7 2> \u4e3b\u8fdb\u7a0b\u7b49\u751f\u4ea7\u8005\u7ed3\u675f\u540e\u5f80\u961f\u5217\u4e2d\u53d1\u9001\u7ed3\u675f\u4fe1\u53f7 \u8fd9\u4e24\u79cd\u65b9\u5f0f\u90fd\u80fd\u89e3\u51b3\u963b\u585e\u7684\u95ee\u9898!! \u4efb\u9009\u5176\u4e00\u5373\u53ef!\u5173\u952e\u4ee3\u7801\u5982\u4e0b: \"\"\" \u2605 --\u751f\u4ea7\u8005p1\u53d1 \"\"\" def producer ( q ): for i in range ( 5 ): res = \"\u7f16\u53f7\u4e3a %s \u7684\u5305\u5b50\" % i time . sleep ( random . randint ( 1 , 3 )) q . put ( res ) print ( \" \\033 [36m [ %s ]\u53f7\u53a8\u5e08\u751f\u4ea7\u4e86 %s \\033 [0m\" % ( os . getpid (), res )) q . put ( None ) # -- p1\u53d1\u4e2a\u4fe1\u53f7None\u5230q\u961f\u5217\u4e2d,\u8868\u660e\u81ea\u5df1\u5df2\u7ecf\u751f\u4ea7\u5b8c\u5566! \"\"\" \u2605 --\u7236\u8fdb\u7a0b\u53d1 \"\"\" if __name__ == '__main__' : set_start_method ( 'fork' ) q = Queue () p1 = Process ( target = producer , args = ( q ,)) c1 = Process ( target = consumer , args = ( q ,)) p1 . start () c1 . start () p1 . join () q . put ( None ) print ( \"\u4e3b\" ) \"\"\" \u2605 --\u6d88\u8d39\u8005c1 \"\"\" def consumer ( q ): while True : res = q . get () if not res : # -- q\u961f\u5217\u662f\u5148\u8fdb\u5148\u51fa\u7684,\u6700\u540e\u624d\u4f1a\u53d6\u5230None,\u9000\u51fa\u5faa\u73af! break time . sleep ( random . randint ( 1 , 3 )) print ( ' \\033 [34m [ %s ]\u53f7\u987e\u5ba2\u5403\u4e86 %s \\033 [0m' % ( os . getpid (), res ))","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/8_%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B%21%21/#_8","text":"\u82e5\u662f\u4e00\u5806\u751f\u4ea7\u8005\u548c\u4e00\u5806\u6d88\u8d39\u8005\u5462?","title":"\u751f\u4ea7\u8005\u4eec\u6d88\u8d39\u8005\u4eec"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/8_%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B%21%21/#_9","text":"import random import time from multiprocessing import Queue , Process , set_start_method def producer ( name , food , q ): for i in range ( 2 ): res = \"\u7f16\u53f7\u4e3a %s \u7684 %s \" % ( i , food ) time . sleep ( random . randint ( 1 , 3 )) q . put ( res ) print ( \" \\033 [36m \u53a8\u5e08[ %s ] \u751f\u4ea7\u4e86 %s \\033 [0m\" % ( name , res )) q . put ( None ) def consumer ( name , q ): while True : res = q . get () if not res : break time . sleep ( random . randint ( 1 , 3 )) print ( ' \\033 [34m \u987e\u5ba2[ %s ] \u5403\u4e86 %s \\033 [0m' % ( name , res )) if __name__ == '__main__' : set_start_method ( 'fork' ) # -- mac\u4e0a\u8fd0\u884c\u9700\u8981\u52a0\u8fd9\u4e00\u53e5 q = Queue () # -- \u751f\u4ea7\u8005\u4eec p1 = Process ( target = producer , args = ( '\u5c0f\u660e' , '\u5305\u5b50' , q )) p2 = Process ( target = producer , args = ( '\u5c0f\u7ea2' , '\u6cb9\u6761' , q )) p3 = Process ( target = producer , args = ( '\u5c0f\u5ddd' , '\u8c46\u6d46' , q )) # -- \u6d88\u8d39\u8005\u4eec c1 = Process ( target = consumer , args = ( '\u8def\u98de' , q )) c2 = Process ( target = consumer , args = ( '\u7d22\u9686' , q )) p1 . start () p2 . start () p3 . start () c1 . start () c2 . start () print ( \"\u4e3b\" ) \u6765,\u7422\u78e8\u4e0b\u8fd0\u884c\u7ed3\u679c\u5b58\u5728\u4ec0\u4e48\u95ee\u9898? \u751f\u4ea7\u8005\u5c0f\u7ea2\u751f\u4ea7\u7684\u7f16\u53f7\u4e3a1\u7684\u6cb9\u6761\u6ca1\u6709\u88ab\u6d88\u8d39\u8005\u5403\u6389,\u7a0b\u5e8f\u5c31\u9000\u51fa\u4e86!! 3\u4e2a\u751f\u4ea7\u8005\u751f\u4ea7\u7684\u4e1c\u897f\u4f1a\u4f9d\u6b21\u6dfb\u52a0\u5230\u961f\u5217q\u4e2d: [\u53050, \u53051, None, \u8c460, \u6cb90, \u8c461, None, \u6cb91, None] 2\u4e2a\u6d88\u8d39\u8005\u4f9d\u6b21\u4ece\u961f\u5217q\u4e2d\u53d6\u4e1c\u897f\u6765\u5403,\u9047\u5230None\u5c31\u4e0d\u80fd\u5403\u4e86,\u4f46\u961f\u5217\u540e\u9762\u662f\u8fd8\u6709\u6570\u636e\u7684!! \u6240\u4ee5\u6700\u540e\u7f16\u53f7\u4e3a1\u7684\u6cb9\u6761\u88ab\u6d6a\u8d39\u6389\u4e86..(\u3064\u0414`)\u30ce \u6ce8\u610f\u54c8,\u961f\u5217\u4e2d\u6570\u636e\u7684\u6dfb\u52a0\u548c\u53d6\u662f\u5e76\u53d1\u6267\u884c\u7684!! \u4e0d\u8981\u8bef\u89e3\u4e86. \u6240\u4ee5\u5728\u591a\u4e2a\u751f\u4ea7\u8005\u548c\u591a\u4e2a\u6d88\u8d39\u8005\u7684\u573a\u666f\u91cc,\u4e00\u4e2a\u751f\u4ea7\u8005\u751f\u4ea7\u5b8c\u540e\u5c31\u5f80\u961f\u5217\u91cc\u52a0\u7ed3\u675f\u4fe1\u53f7None\u4e0d\u592a\u5408\u9002! \u5e94\u8be5\u5f53\u6240\u6709\u7684\u751f\u4ea7\u8005\u751f\u4ea7\u5b8c\u540e,\u751f\u4ea7\u8005\u4eec\u518d\u52a0None\u5230\u961f\u5217\u4e2d\u53bb.","title":"\u751f\u4ea7\u8005\u53d1\u7ed3\u675f\u4fe1\u53f7"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/8_%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B%21%21/#_10","text":"\u8981\u4fdd\u8bc1\u6240\u6709\u751f\u4ea7\u8005\u751f\u4ea7\u5b8c\u540e,\u7ed3\u675f\u4fe1\u53f7\u6dfb\u52a0\u5230\u6240\u6709\u751f\u4ea7\u8005\u751f\u4ea7\u7684\u6570\u636e\u7684\u540e\u9762!! import random import time from multiprocessing import Queue , Process , set_start_method def producer ( name , food , q ): for i in range ( 2 ): res = \"\u7f16\u53f7\u4e3a %s \u7684 %s \" % ( i , food ) time . sleep ( random . randint ( 1 , 3 )) q . put ( res ) print ( \" \\033 [36m \u53a8\u5e08[ %s ] \u751f\u4ea7\u4e86 %s \\033 [0m\" % ( name , res )) def consumer ( name , q ): while True : res = q . get () if not res : break time . sleep ( random . randint ( 1 , 3 )) print ( ' \\033 [34m \u987e\u5ba2[ %s ] \u5403\u4e86 %s \\033 [0m' % ( name , res )) if __name__ == '__main__' : set_start_method ( 'fork' ) # -- mac\u4e0a\u8fd0\u884c\u9700\u8981\u52a0\u8fd9\u4e00\u53e5 q = Queue () # -- \u751f\u4ea7\u8005\u4eec p1 = Process ( target = producer , args = ( '\u5c0f\u660e' , '\u5305\u5b50' , q )) p2 = Process ( target = producer , args = ( '\u5c0f\u7ea2' , '\u6cb9\u6761' , q )) p3 = Process ( target = producer , args = ( '\u5c0f\u5ddd' , '\u8c46\u6d46' , q )) # -- \u6d88\u8d39\u8005\u4eec c1 = Process ( target = consumer , args = ( '\u8def\u98de' , q )) c2 = Process ( target = consumer , args = ( '\u7d22\u9686' , q )) p1 . start () p2 . start () p3 . start () c1 . start () c2 . start () # -- \u7236\u8fdb\u7a0b\u7b49\u5f85p1\u3001p2\u3001p3\u7ed3\u675f,\u610f\u5473\u7740\u6240\u6709\u751f\u4ea7\u8005\u751f\u4ea7\u7684\u6570\u636e\u90fd\u4e22\u5230\u961f\u5217\u4e2d\u5566! p1 . join () p2 . join () p3 . join () # -- \u5728p1\u3001p2\u3001p3\u90fd\u7ed3\u675f\u540e,\u624d\u5e94\u8be5\u5f80\u961f\u5217\u91cc\u653e\u7ed3\u675f\u4fe1\u53f7! # \u6709\u51e0\u4e2a\u6d88\u8d39\u8005\u5c31\u5e94\u8be5\u653e\u51e0\u4e2aNone! q . put ( None ) q . put ( None ) print ( \"\u4e3b\" ) \u6709\u51e0\u4e2a\u6d88\u8d39\u8005\u5c31\u6dfb\u52a0\u51e0\u4e2a\u7ed3\u675f\u4fe1\u606f, \u8fd8\u6709\u53bb\u6570, \u6709\u70b9low!! \u6709\u4e2a\u7ec8\u6781\u89e3\u51b3\u65b9\u6848! \u4f7f\u7528JoinableQueue!!","title":"\u7236\u8fdb\u7a0b\u53d1\u7ed3\u675f\u4fe1\u53f7"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/8_%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B%21%21/#joinablequeue","text":"JoinableQueue\u9664\u4e86\u4e0eQueue\u6709\u76f8\u540c\u7684\u65b9\u6cd5\u4e4b\u5916\u8fd8\u5177\u6709: q.task_done() \u548c q.join() \u65b9\u6cd5. import random import time from multiprocessing import JoinableQueue , Process , set_start_method def producer ( name , food , q ): for i in range ( 2 ): res = \"\u7f16\u53f7\u4e3a %s \u7684 %s \" % ( i , food ) time . sleep ( random . randint ( 1 , 3 )) q . put ( res ) print ( \" \\033 [36m \u53a8\u5e08[ %s ] \u751f\u4ea7\u4e86 %s \\033 [0m\" % ( name , res )) def consumer ( name , q ): while True : res = q . get () time . sleep ( random . randint ( 1 , 3 )) print ( ' \\033 [34m \u987e\u5ba2[ %s ] \u5403\u4e86 %s \\033 [0m' % ( name , res )) q . task_done () # -- \u5411q.join()\u53d1\u9001\u4e00\u6b21\u4fe1\u53f7,\u544a\u8bc9\u961f\u5217\u6709\u4e00\u4e2a\u6570\u636e\u5df2\u7ecf\u88ab\u6211\u53d6\u8d70\u4e86! if __name__ == '__main__' : set_start_method ( 'fork' ) # -- mac\u4e0a\u8fd0\u884c\u9700\u8981\u52a0\u8fd9\u4e00\u53e5 q = JoinableQueue () # -- \u751f\u4ea7\u8005\u4eec p1 = Process ( target = producer , args = ( '\u5c0f\u660e' , '\u5305\u5b50' , q )) p2 = Process ( target = producer , args = ( '\u5c0f\u7ea2' , '\u6cb9\u6761' , q )) p3 = Process ( target = producer , args = ( '\u5c0f\u5ddd' , '\u8c46\u6d46' , q )) # -- \u6d88\u8d39\u8005\u4eec c1 = Process ( target = consumer , args = ( '\u8def\u98de' , q )) c2 = Process ( target = consumer , args = ( '\u7d22\u9686' , q )) c1 . daemon = True c2 . daemon = True p_c_list = [ p1 , p2 , p3 , c1 , c2 ] for obj in p_c_list : obj . start () # -- \u6240\u6709\u7684\u751f\u4ea7\u8005\u90fd\u751f\u4ea7\u5b8c\u4e86,\u610f\u5473\u8fd9\u80af\u5b9a\u4e0d\u4f1a\u5f80\u961f\u5217\u91cc\u653e\u6570\u636e\u5566! p1 . join () p2 . join () p3 . join () # -- \u8be5\u4ee3\u7801\u4f1a\u7edf\u8ba1\u961f\u5217\u91cc\u6709\u591a\u5c11\u6570\u636e,\u5e76\u7b49\u5f85\u961f\u5217\u88ab\u53d6\u5e72\u51c0! # \u6ce8\u610f!! # \u4e0d\u662f\u6307\u751f\u4ea7\u8005\u4e00\u5171\u751f\u4ea7\u4e86\u591a\u5c11\u6570\u636e,\u524d\u9762p1-p3.join\u8fc7\u7a0b\u4e2d,\u6d88\u8d39\u8005\u4e5f\u5728\u4ece\u961f\u5217\u4e2d\u53d6\u6570\u636e. # \u662f\u6307\u751f\u4ea7\u8005\u751f\u4ea7\u5b8c\u540e,\u4e0d\u4f1a\u6709\u4eba\u518d\u5f80\u961f\u5217\u91cc\u653e\u6570\u636e\u5566,\u6b64\u65f6\u961f\u5217\u91cc\u8fd8\u6709\u591a\u5c11\u6570\u636e! # (\u6d88\u8d39\u8005\u5728\u7edf\u8ba1\u4e4b\u524d\u4ece\u961f\u5217\u91cc\u53d6\u8d70\u6570\u636e\u6709\u5f71\u54cd\u5417?\u6ca1\u6709\u5f71\u54cd\u554a!) q . join () \"\"\" q.join()\u7ed3\u675f\u610f\u5473\u7740: 1> \u4e3b\u8fdb\u7a0b\u4ee3\u7801\u8fd0\u884c\u5b8c\u6bd5 -- p1-p3.join()\u4e09\u884c\u4ee3\u7801\u8fd0\u884c\u5b8c\u6bd5,\u5373\u751f\u4ea7\u8005\u8fd0\u884c\u5b8c\u6bd5 2> \u961f\u5217\u4e2d\u7684\u6570\u636e\u88ab\u53d6\u5e72\u51c0\u4e86 -- \u6d88\u8d39\u8005\u6ca1\u6709\u5b58\u5728\u7684\u610f\u4e49\u4e86!! \u5408\u5728\u4e00\u8d77: \u4e3b\u8fdb\u7a0b\u4ee3\u7801\u8fd0\u884c\u5b8c\u6bd5,\u6d88\u8d39\u8005\u6ca1\u6709\u5b58\u5728\u7684\u610f\u4e49.. \u5c31\u662f\u5b88\u62a4\u8fdb\u7a0b\u7684\u5e94\u7528\u573a\u666f!!! \"\"\" q.join() \u8fd0\u884c\u5b8c\u4e86,\u610f\u5473\u7740\u4e3b\u8fdb\u7a0b\u5e72\u5b8c\u6d3b\u4e86! \u751f\u4ea7\u8005\u751f\u4ea7\u5b8c\u4e86! \u6d88\u8d39\u8005\u4e5f\u628a\u751f\u4ea7\u7684\u98df\u7269\u5403\u5b8c\u4e86! \u4f46c1,c2\u4e24\u4e2a\u6d88\u8d39\u8005\u8fdb\u7a0b\u8fd8\u6ca1\u6709\u7ed3\u675f.. \u4f1a\u963b\u585e\u5728 q.get() \u8fd9\u884c\u4ee3\u7801\u5904. c1,c2\u6ca1\u6709\u5b58\u5728\u7684\u5fc5\u8981\u5566,\u6b64\u65f6\u5e94\u8be5\u7ed3\u675f\u5566!! \u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u5c06\u6d88\u8d39\u8005\u8bbe\u7f6e\u4e3a\u5b88\u62a4\u8fdb\u7a0b! \u5f00\u5b50\u8fdb\u7a0b\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u5e76\u53d1\u7684\u6267\u884c\u4efb\u52a1,\u82e5\u5e76\u53d1\u6267\u884c\u7684\u4efb\u52a1\u7684\u751f\u547d\u5468\u671f\u4f34\u968f\u7740\u4e3b\u8fdb\u7a0b\u4ee3\u7801\u7ed3\u675f\u540e\u5c31\u6ca1\u6709\u5b58\u5728\u7684\u610f\u4e49\u5566,\u5c31\u5e94\u8be5\u5c06\u8be5\u5b50\u8fdb\u7a0b\u8bbe\u7f6e\u4e3a\u5b88\u62a4\u8fdb\u7a0b!! \u5b88\u62a4\u8fdb\u7a0b\u5728\u4e3b\u8fdb\u7a0b\u4ee3\u7801\u7ed3\u675f\u540e\u81ea\u52a8\u6b7b\u6389!","title":"JoinableQueue"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/9_%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/","text":"\u7ebf\u7a0b\u7406\u8bba \u00b6 \u5728\u4f20\u7edf\u64cd\u4f5c\u7cfb\u7edf\u4e2d, \u6bcf\u4e2a\u8fdb\u7a0b\u6709\u4e00\u4e2a\u5730\u5740\u7a7a\u95f4(\u5373\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u4f1a\u5360\u7528\u72ec\u4e00\u4efd\u7684\u5185\u5b58\u7a7a\u95f4), \u800c\u4e14\u6bcf\u4e2a\u8fdb\u7a0b\u5185\u9ed8\u8ba4\u5c31\u6709\u4e00\u4e2a\u63a7\u5236\u7ebf\u7a0b(\u5373\u6bcf\u4e2a\u8fdb\u7a0b\u5185\u81ea\u5e26\u4e00\u4e2a\u7ebf\u7a0b).. \u7ea0\u6b63\u4e00\u4e2a\u6982\u5ff5: \u5728\u524d\u9762\u7684\u5e76\u53d1\u7f16\u7a0b\u7684\u5b66\u4e60\u4e2d,\u6211\u4eec\u4e00\u76f4\u8bf4\u8fdb\u7a0b\u600e\u4e48\u600e\u4e48\u8fd0\u884c,\u8fd9\u662f\u4e0d\u591f\u51c6\u786e\u7684! \u51c6\u786e\u70b9\u8bf4,\u8fdb\u7a0b\u4e0d\u662f\u4e00\u4e2a\u6267\u884c\u5355\u4f4d!\u8fdb\u7a0b\u53ea\u662f\u4e00\u4e2a\u8d44\u6e90\u5355\u4f4d! \u591a\u89d2\u5ea6\u5206\u6790 \u00b6 \u8981\u6e05\u695a\u7684\u77e5\u9053! \u8fdb\u7a0b\u662f\u8d44\u6e90\u5355\u4f4d,\u7ebf\u7a0b\u662fcpu\u6267\u884c\u548c\u8c03\u5ea6\u7684\u57fa\u672c\u5355\u4f4d! \u6bd4\u55bb\u5de5\u5382 \u00b6 \u5de5\u5382 -- OS ; \u8f66\u95f4 -- \u8fdb\u7a0b ; \u6d41\u6c34\u7ebf -- \u7ebf\u7a0b. \u82e5\u628a\u64cd\u4f5c\u7cfb\u7edf\u6bd4\u55bb\u4e3a\u4e00\u5ea7\u5de5\u5382. \u5728\u5de5\u5382\u5185\u6bcf\u9020\u51fa\u4e00\u4e2a \u8f66\u95f4 --- \u542f\u52a8\u4e00\u4e2a \u8fdb\u7a0b. \u9020\u8f66\u8f71\u8f98\u7684\u8f66\u95f4 -- \u653e\u9020\u8f66\u8f71\u8f98\u7684\u4e00\u5806\u539f\u6750\u6599 \u9020\u53d1\u52a8\u673a\u7684\u8f66\u95f4 -- \u653e\u9020\u53d1\u52a8\u673a\u7684\u4e00\u5806\u539f\u6750\u6599 \u6bcf\u4e2a\u8f66\u95f4\u5185\u81f3\u5c11\u6709\u4e00\u6761 \u6d41\u6c34\u7ebf --- \u6bcf\u4e2a\u8fdb\u7a0b\u5185\u81f3\u5c11\u6709\u4e00\u4e2a \u7ebf\u7a0b. \u6d41\u6c34\u7ebf\u4f1a\u53bb\u53d6\u8f66\u95f4\u91cc\u7684\u539f\u6750\u6599\u8fdb\u884c\u52a0\u5de5 py\u6587\u4ef6\u89d2\u5ea6 \u00b6 \u4ece\u8fd0\u884c\u4e00\u4e2apython\u6587\u4ef6\u7684\u89d2\u5ea6\u8be0\u91ca\u8fdb\u7a0b\u4e0e\u7ebf\u7a0b. \u6211\u4eec\u8bf4\u7684 \"<\u8fdb\u7a0b\u7684\u8fd0\u884c>\" \u672c\u8d28\u4e0a\u8bf4\u7684\u662f\u8fdb\u7a0b\u91cc\u7684\u7ebf\u7a0b\u7684\u8fd0\u884c. \u8fdb\u7a0b -- \u5f00\u8f9f\u4e86\u4e00\u5757\u5185\u5b58\u7a7a\u95f4,\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u6570\u636e\u90fd\u5f80\u91cc\u9762\u653e \u7ebf\u7a0b\u7684\u8fd0\u884c -- \u57fa\u4e8e\u9020\u597d\u7684\u7a7a\u95f4,\u4ece\u4e0a\u5230\u4e0b\u7684\u6267\u884c\u4ee3\u7801. \u5373\u4e00\u8bf4QQ\u8fdb\u7a0b,\u5c31\u610f\u5473\u7740\u5728\u5185\u5b58\u91cc\u6709\u4e00\u5757\u9694\u79bb\u7684\u7a7a\u95f4\u4e13\u95e8\u5b58\u653eQQ\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u5f53\u4e2d\u76f8\u5173\u7684\u6570\u636e! \u62bd\u8c61\u7684\u6982\u5ff5 \u00b6 \u8fdb\u7a0b\u548c\u7ebf\u7a0b\u90fd\u662f\u4e00\u4e2a\u62bd\u8c61\u7684\u6982\u5ff5!! \u5355\u8bf4\u8fdb\u7a0b, \u90a3\u4e48\u8fdb\u7a0b\u63cf\u8ff0\u7684\u5c31\u662f\u4e00\u4e2a\u7a0b\u5e8f\u7684\u8fd0\u884c\u8fc7\u7a0b. \u6b64\u65f6.. \u8fdb\u7a0b = \u8d44\u6e90\u7533\u8bf7(\u5f00\u8f9f\u5185\u5b58\u7a7a\u95f4) + \u7a0b\u5e8f\u6267\u884c(\u8fd0\u884c\u4ee3\u7801) \u65e2\u63d0\u5230\u4e86\u8fdb\u7a0b\u53c8\u63d0\u53ca\u4e86\u7ebf\u7a0b, \u90a3\u4e48.. \u8fdb\u7a0b = \u8d44\u6e90\u7533\u8bf7 (\u5f00\u8f9f\u5185\u5b58\u7a7a\u95f4) \u7ebf\u7a0b = \u76f8\u5e94\u4ee3\u7801\u7684\u6267\u884c\u8fc7\u7a0b (\u524d\u63d0\u662f\u8fdb\u7a0b\u5df2\u7ecf\u5b58\u5728/\u7a7a\u95f4\u5df2\u7ecf\u9020\u597d\u4e86) \u62bd\u8c61\u8bdd\u672f \u5927\u767d\u8bdd \u4e00\u4e2a\u8fdb\u7a0b\u542f\u52a8\u4e86 \u5173\u4e8e\u8fd9\u4e2a\u7a0b\u5e8f\u7684\u7a7a\u95f4\u5212\u5206\u597d\u4e86\uff01 \u4e00\u4e2a\u8fdb\u7a0b\u9500\u6bc1\u4e86 \u8fd9\u4e2a\u7a7a\u95f4\u88ab\u91ca\u653e\u6389\u5566! \u7ebf\u7a0b\u8fd0\u884c\u5230\u67d0\u4e00\u884c \u6307\u7684\u662f\u7a7a\u95f4\u5df2\u7ecf\u9020\u597d\u4e86,\u5355\u6307\u4ee3\u7801\u8fd0\u884c\u5230\u54ea\u4e00\u884c\u5566. \u4e00\u4e2a\u7ebf\u7a0b\u8fd0\u884c\u5b8c\u6bd5 \u8ddf\u8fd9\u4e2a\u7ebf\u7a0b\u6709\u5173\u7684\u4ee3\u7801\u5df2\u7ecf\u8fd0\u884c\u5b8c\u4e86 \u6709\u4e09\u4e2a\u7ebf\u7a0b \u6709\u4e09\u6bb5\u4ee3\u7801\u5728\u8fd0\u884c \u6709\u4e09\u4e2a\u8fdb\u7a0b \u6709\u4e09\u4e2a\u7a7a\u95f4\u88ab\u7533\u8bf7\u597d\u4e86 \u6ce8\u610f!\u63d0\u4e00\u5634, cpu\u662f\u6267\u884c\u4ee3\u7801\u7684,cpu\u4e0d\u6d89\u53ca\u8d44\u6e90\u7684\u7533\u8bf7. \u524d\u9762\u5e76\u53d1\u7f16\u7a0b\u5b66\u4e60\u4e2d\u8bf4cpu\u5728\u591a\u4e2a\u8fdb\u7a0b\u4e4b\u95f4\u6765\u56de\u5207\u6362,\u51c6\u786e\u70b9\u5e94\u8be5\u8bf4\u662f cpu\u5728\u591a\u4e2a\u7ebf\u7a0b\u4e4b\u95f4\u6765\u56de\u5207\u6362. \u6267\u884c\u7684\u662f\u7ebf\u7a0b\u5bf9\u5e94\u7684\u4ee3\u7801!! \u8fd0\u884c\u4ee3\u7801\u7684\u8fc7\u7a0b\u4e2d,\u7528\u5230\u7684\u6570\u636e\u8ddf\u8fdb\u7a0b\u8981/\u4ece\u8fdb\u7a0b\u7a7a\u95f4\u4e2d\u62ff!! \u8fdb\u7a0b vs \u7ebf\u7a0b \u00b6 1> \u5185\u5b58\u5171\u4eabor\u9694\u79bb \u591a\u4e2a\u8fdb\u7a0b\u4e4b\u95f4\u5185\u5b58\u7a7a\u95f4\u5f7c\u6b64\u9694\u79bb <\u540c\u4e00\u8fdb\u7a0b\u4e0b>\u7684\u591a\u4e2a\u7ebf\u7a0b\u5171\u4eab\u8be5\u8fdb\u7a0b\u5185\u7684\u6570\u636e 2> \u521b\u5efa\u901f\u5ea6 \u9020\u7ebf\u7a0b\u7684\u901f\u5ea6\u8981\u8fdc\u8fdc\u5feb\u4e8e\u9020\u8fdb\u7a0b!! \u6d45\u60f3 / \u6d45\u5c1d\u4e00\u4e0b\u4ec0\u4e48\u65f6\u5019\u7528\u7ebf\u7a0b , \u4ec0\u4e48\u65f6\u5019\u7528\u8fdb\u7a0b ! \u5047\u8bbe\u6211\u4eec\u9700\u8981\u5f00\u53d1\u4e00\u4e2a\u6587\u672c\u5904\u7406\u5de5\u5177 , \u8be5\u5de5\u5177\u81f3\u5c11\u5305\u542b\u4e09\u65b9\u9762\u7684\u529f\u80fd : 1 > \u63a5\u6536\u7528\u6237\u7684\u8f93\u5165 ; 2 > \u5c06\u8f93\u5165\u7684\u5185\u5bb9\u4ece\u5185\u5b58\u4e2d\u53d6\u51fa\u6765\u683c\u5f0f\u5316\u6253\u5370\u5230\u5c4f\u5e55\u4e0a ; 3 > \u628a\u5185\u5b58\u91cc\u7684\u5185\u5bb9\u5b9a\u671f\u7684\u5f80\u786c\u76d8\u91cc\u5237 . ( \u521d\u6b65\u5206\u6790 : \u8fd9\u4e09\u4e2a\u529f\u80fd\u80af\u5b9a\u4e0d\u80fd\u662f\u4e32\u884c . \u96be\u9053\u5237\u6570\u636e\u5230\u786c\u76d8\u7684\u65f6\u5019\u5c31\u4e0d\u5141\u8bb8\u7528\u6237\u8f93\u5165\u5417 \uff1f \u8fd9\u662f\u4e0d\u5408\u7406\u7684 ) \u5e76\u53d1\u7684\u65b9\u6848\u6709\u4e24\u79cd : \u25a0 \u65b9\u6848\u4e00 \u591a\u8fdb\u7a0b -- \u5f00\u4e09\u4e2a\u8fdb\u7a0b ( \u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u81ea\u5e26\u4e00\u4e2a\u7ebf\u7a0b ) \u25a0 \u65b9\u6848\u4e8c \u591a\u7ebf\u7a0b -- \u5f00\u4e00\u4e2a\u8fdb\u7a0b , \u8be5\u8fdb\u7a0b\u5185\u6709\u4e09\u4e2a\u7ebf\u7a0b \u518d\u6b21\u5f3a\u8c03 , \u8d77\u4e8610\u4e2a\u8fdb\u7a0b , \u6bcf\u4e2a\u8fdb\u7a0b\u91cc\u90fd\u81ea\u5e26\u4e00\u4e2a\u7ebf\u7a0b , \u53eb\u591a\u7ebf\u7a0b\u5417 \uff1f No . \u591a\u7ebf\u7a0b\u6307\u7684\u662f\u540c\u4e00\u4e2a\u8fdb\u7a0b\u5185\u5f00\u542f\u4e86\u591a\u4e2a\u7ebf\u7a0b !! \u5148\u8bf4\u7ed3\u8bba , \u8fd9\u4e24\u4e2a\u89e3\u51b3\u65b9\u6848 , \u7b2c\u4e8c\u4e2a\u65b9\u6848\u591a\u7ebf\u7a0b\u80dc\u51fa ! \u5206\u6790\u5982\u4e0b : \u82e5\u662f\u65b9\u6848\u4e00 , \u4e09\u4e2a\u8fdb\u7a0b\u5206\u522b\u8d1f\u8d23\u529f\u80fd1 \u3001 2 \u3001 3. \u7b2c\u4e00\u4e2a\u8fdb\u7a0b\u8f93\u5165\u7684\u6570\u636e\u8981\u7ed9\u7b2c\u4e8c\u4e2a\u8fdb\u7a0b\u5728\u5c4f\u5e55\u4e0a\u6253\u5370 , \u7b2c\u4e00\u4e2a\u8fdb\u7a0b\u5185\u5b58\u4e2d\u7684\u6570\u636e\u8981\u62f7\u8d1d\u7ed9\u7b2c\u4e09\u4e2a\u8fdb\u7a0b . \u4f46\u8fdb\u7a0b\u4e4b\u95f4\u5185\u5b58\u5f7c\u6b64\u9694\u79bb , \u89e3\u51b3\u8be5\u95ee\u9898\u6d89\u53ca\u5230\u8fdb\u7a0b\u95f4\u7684\u901a\u4fe1 . So , \u5f0a\u7aef : \u6570\u636e\u88ab\u91cd\u590d\u62f7\u8d1d , \u8fdb\u7a0b\u4e4b\u95f4\u7684\u901a\u4fe1\u5b9e\u73b0\u590d\u6742 . \u82e5\u662f\u65b9\u6848\u4e8c . \u53ef\u4ee5\u89e3\u51b3\u65b9\u6848\u4e00\u7684\u5f0a\u7aef . \u8be5\u8fdb\u7a0b\u91cc\u7684\u8fd9\u4e09\u4e2a\u7ebf\u7a0b\u4ea7\u751f\u7684\u6570\u636e\u90fd\u5728\u8fdb\u7a0b\u7684\u5185\u5b58\u91cc , \u6570\u636e\u5171\u4eab . \u9020\u7ebf\u7a0b\u7684\u901f\u5ea6\u4e5f\u8fdc\u8fdc\u5feb\u4e8e\u9020\u8fdb\u7a0b\u7684\u901f\u5ea6 . Ps : \u8fd9\u91cc\u53ea\u662f\u8fdb\u884c\u4e86\u7b80\u5355\u7684\u5206\u6790 , \u4e3a\u4ec0\u4e48\u9009\u62e9\u65b9\u6848\u4e8c , \u5206\u6790\u7684\u8fd8\u4e0d\u591f\u900f\u5f7b !! \u4f46\u53ef\u4ee5\u660e\u786e\u7684\u8ddf\u4f60\u8bf4 , \u5927\u591a\u6570\u573a\u666f\u4e0b\u90fd\u4f1a\u7528\u591a\u7ebf\u7a0b , \u8fd9\u4e5f\u5e76\u4e0d\u610f\u5473\u7740\u591a\u8fdb\u7a0b\u6ca1\u7528 , \u5f53\u540e\u7eed\u4e86\u89e3\u4e86GIL\u540e , \u5c31\u6653\u5f97\u591a\u8fdb\u7a0b\u7684\u4f18\u52bf\u5566 !! \u6269\u5f20\u9605\u8bfb : ` https : // www . liaoxuefeng . com / wiki / 1016959663602400 / 1017631469467456 ` \u5f00\u542f\u7ebf\u7a0b\u7684\u4e24\u79cd\u65b9\u5f0f \u00b6 \u4e3a\u4e86\u65b9\u4fbf\u63cf\u8ff0,\u901a\u5e38\u4f1a\u5c06\u8fdb\u7a0b\u91cc\u81ea\u5e26\u7684\u90a3\u4e2a\u7ebf\u7a0b\u53eb\u505a\u4e3b\u7ebf\u7a0b. \u4f46\u8981\u6653\u5f97, \u540c\u4e00\u8fdb\u7a0b\u4e0b\u7684\u591a\u4e2a\u7ebf\u7a0b\u6ca1\u6709\u7236\u5b50\u4e4b\u5206!\u5927\u5bb6\u5730\u4f4d\u90fd\u4e00\u6837!! \u4e0d\u8981\u8bef\u89e3\u5566. \u65b9\u5f0f\u4e00 \u00b6 \u53f3\u952e\u6267\u884c\u4ee3\u7801,\u4f1a\u542f\u4e00\u4e2a\u8fdb\u7a0b,\u8fdb\u7a0b\u91cc\u7684\u539f\u751f\u7ebf\u7a0b\u4f1a\u4ece\u4e0a\u5230\u4e0b\u6267\u884c\u4ee3\u7801. \u5f53\u8fd0\u884c\u5230 t.start() \u65f6,\u53d1\u9001\u4fe1\u53f7,\u5728\u8be5\u8fdb\u7a0b\u91cc\u53c8\u542f\u4e86\u4e2a\u7ebf\u7a0b. \u542f\u7ebf\u7a0b\u7684\u901f\u5ea6\u8d85\u7ea7\u5feb! Ps: \u8fd9\u91cc\u5176\u5b83\u7ebf\u7a0b\u662f\u4e3b\u7ebf\u7a0b\u5f00\u542f\u7684,\u5f53\u7136,\u5176\u5b83\u7ebf\u7a0b\u91cc\u53ef\u4ee5\u518d\u5f00\u7ebf\u7a0b.\u4e0d\u7ba1\u600e\u6837,\u7ebf\u7a0b\u90fd\u5728\u8be5\u8fdb\u7a0b\u91cc. import time from threading import Thread def task ( x ): print ( \" %s is running.\" % x ) time . sleep ( 2 ) print ( \" %s is done.\" % x ) if __name__ == '__main__' : # -- \u542f\u7ebf\u7a0b\u53ef\u4ee5\u4e0d\u52a0main()\u51fd\u6570,\u4f46\u90fd\u4f1a\u4e60\u60ef\u6027\u7684\u52a0\u4e0a. t = Thread ( target = task , args = ( '\u5b50\u7ebf\u7a0b' ,)) t . start () print ( \"\u4e3b\" ) # -- \u7ad9\u5728\u8d44\u6e90\u89d2\u5ea6,\u4e3b\u8fdb\u7a0b;\u7ad9\u5728\u6267\u884c\u89d2\u5ea6,\u4e3b\u7ebf\u7a0b. \"\"\" \u5b50\u7ebf\u7a0b is running. \u4e3b \u5b50\u7ebf\u7a0b is done. \"\"\" \u2605 \u601d\u8003\u4e00\u4e2a\u95ee\u9898,\u6253\u5370\u51fa\"\u4e3b\"\u540e,\u7a0b\u5e8f\u8fd8\u672a\u7ed3\u675f,\u662f\u56e0\u4e3a\u4e3b\u7ebf\u7a0b\u5728\u7b49\u5b50\u7ebf\u7a0b\u7ed3\u675f\u540e,\u624d\u7ed3\u675f\u7684\u5417? No! \u8fd9\u91cc\u7684\u7b49\u662f\u56e0\u4e3a\u8fdb\u7a0b\u5fc5\u987b\u7b49\u5f85\u5176\u5185\u90e8\u6240\u6709\u7ebf\u7a0b\u8fd0\u884c\u5b8c\u6bd5\u624d\u7ed3\u675f! \u518d\u56de\u987e\u4e0b,\u591a\u8fdb\u7a0b\u91cc,\u4e3b\u8fdb\u7a0b\u7b49\u5b50\u8fdb\u7a0b\u662f\u56e0\u4e3a\u4e3b\u8fdb\u7a0b\u8981\u7ed9\u5b50\u8fdb\u7a0b\u6536\u5c38. \u65b9\u5f0f\u4e8c \u00b6 import time from threading import Thread class Mythread ( Thread ): def __init__ ( self , x ): # -- \u6211\u7591\u60d1\u8fc7\u8fd9\u4e2a\u6784\u9020\u51fd\u6570\u4e3a\u5565\u4e0d\u4f20\u53c2\u6570,\u770b\u4e86\u6e90\u7801\u624d\u53d1\u73b0,Thread\u7684\u6784\u9020\u65b9\u6cd5\u7684\u53c2\u6570\u90fd\u8bbe\u7f6e\u6210\u4e86\u9ed8\u8ba4\u53c2\u6570 super () . __init__ () self . x = x def run ( self ): print ( \" %s is running.\" % self . x ) time . sleep ( 2 ) print ( \" %s is done.\" % self . x ) if __name__ == '__main__' : t = Mythread ( '\u5b50\u7ebf\u7a0b' ) t . start () print ( \"\u4e3b\" ) \u5f00\u591a\u8fdb\u7a0b\u4e0e\u591a\u7ebf\u7a0b\u7684\u533a\u522b \u00b6 \u5728 \u4e00\u4e2a\u8fdb\u7a0b\u4e0b \u5f00\u542f\u591a\u4e2a\u7ebf\u7a0b\u4e0e\u5728 \u4e00\u4e2a\u8fdb\u7a0b\u4e0b \u5f00\u542f\u591a\u4e2a\u5b50\u8fdb\u7a0b\u7684\u533a\u522b \u5f00\u542f\u901f\u5ea6 \u00b6 \u7ebf\u7a0b\u7684\u5f00\u542f\u901f\u5ea6\u5feb import time from multiprocessing import Process from threading import Thread def task ( x ): print ( \" %s is running.\" % x ) time . sleep ( 2 ) print ( \" %s is done.\" % x ) if __name__ == '__main__' : # t = Process(target=task, args=('\u5b50\u8fdb\u7a0b',)) # t.start() # -- \u5728\u53d1\u51fa\u4fe1\u53f7\u7684\u540c\u65f6,\u4e0d\u53ef\u80fd\u540c\u65f6\u5c06\u5b50\u8fdb\u7a0b\u9020\u51fa\u6765. # print(\"\u4e3b\") # -- \u9020\u8fdb\u7a0b\u7684\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b: \"\"\" \u4e3b \u5b50\u8fdb\u7a0b is running. \u5b50\u8fdb\u7a0b is done. \"\"\" t = Thread ( target = task , args = ( '\u5b50\u7ebf\u7a0b' ,)) t . start () # -- \u51e0\u4e4e\u5728\u4fe1\u53f7\u53d1\u51fa\u7684\u540c\u65f6\u7ebf\u7a0b\u7acb\u9a6c\u5c31\u9020\u51fa\u6765\u4e86!! print ( \"\u4e3b\" ) # -- \u9020\u7ebf\u7a0b\u7684\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b: \"\"\" \u5b50\u7ebf\u7a0b is running. \u4e3b \u5b50\u7ebf\u7a0b is done. \"\"\" \u5171\u4eab\u6570\u636e \u00b6 \u540c\u4e00\u8fdb\u7a0b\u4e0b\u7684\u591a\u4e2a\u7ebf\u7a0b\u5171\u4eab\u8be5\u8fdb\u7a0b\u5185\u7684\u6570\u636e from threading import Thread x = 100 def task (): global x x = 0 if __name__ == '__main__' : t = Thread ( target = task ) print ( \"\u5f00\u7ebf\u7a0b\u4e4b\u524dx\u7684\u503c\u4e3a:\" , x ) t . start () t . join () # -- \u867d\u7136\u53d1\u4fe1\u53f7\u540c\u65f6,\u7ebf\u7a0b\u5c31\u9020\u51fa\u6765\u5566.\u4fdd\u9669\u8d77\u89c1,\u8fd9\u91cc\u8fd8\u662fjoin\u4e0b,\u8ba9\u4e3b\u7ebf\u7a0b\u7b49\u5b50\u7ebf\u7a0b\u8fd0\u884c\u5b8c. print ( \"\u5f00\u7ebf\u7a0b\u4e4b\u540ex\u7684\u503c\u4e3a:\" , x ) \"\"\" \u5f00\u7ebf\u7a0b\u4e4b\u524dx\u7684\u503c\u4e3a: 100 \u5f00\u7ebf\u7a0b\u4e4b\u540ex\u7684\u503c\u4e3a: 0 \"\"\" \u867d\u7136\u540c\u4e00\u8fdb\u7a0b\u4e0b\u7684\u591a\u4e2a\u7ebf\u7a0b\u6570\u636e\u5171\u4eab,\u4f46\u4ee5\u540e\u6211\u4eec\u662f\u5206\u5e03\u5f0f\u8fd0\u884c\u7a0b\u5e8f\u7684. \u90a3\u5c31\u610f\u5473\u7740\u6211\u4eec\u7684\u7ebf\u7a0b\u662f\u5206\u6563\u5230\u4e00\u53f0\u53f0\u673a\u5668\u4e0a\u7684,\u4e0d\u540c\u673a\u5668\u4e0a\u7684\u7ebf\u7a0b\u662f\u4e0d\u5171\u4eab\u6570\u636e\u7684.. \u6240\u4ee5,\u4ee5\u540e\u7ebf\u7a0b\u4e4b\u95f4\u7684\u901a\u4fe1\u6211\u4eec\u4e5f\u9700\u8981\u501f\u52a9\u4e00\u4e2a\u5957\u63a5\u5b57\u8f6f\u4ef6.. \u8be5\u5957\u63a5\u5b57\u8f6f\u4ef6\u5b9e\u73b0\u4e86\u7f51\u7edc\u7248\u672c\u7684\u961f\u5217\u529f\u80fd..(\u4e0d\u662f\u5355\u673a\u7248\u672c\u7684\u961f\u5217\u54e6),\u7ebf\u7a0b\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u578b\u7684. \u67e5\u770bPID \u00b6 \u5728\u4e3b\u8fdb\u7a0b\u4e0b\u5f00\u542f\u591a\u4e2a\u7ebf\u7a0b,\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u8ddf\u4e3b\u8fdb\u7a0b\u7684pid\u4e00\u6837 \u5f00\u591a\u4e2a\u8fdb\u7a0b,\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u4e0d\u540c\u7684pid import os from multiprocessing import Process from threading import Thread def task (): print ( os . getpid ()) if __name__ == '__main__' : # -- part1 t1 = Thread ( target = task ) t2 = Thread ( target = task ) t1 . start () t2 . start () print ( '\u4e3b\u7ebf\u7a0b/\u4e3b\u8fdb\u7a0bpid' , os . getpid ()) # -- part2 p1 = Process ( target = task ) p2 = Process ( target = task ) p1 . start () p2 . start () print ( '\u4e3b\u8fdb\u7a0bpid' , os . getpid ()) \"\"\" 28717 28717 \u4e3b\u7ebf\u7a0b/\u4e3b\u8fdb\u7a0bpid 28717 \u4e3b\u8fdb\u7a0bpid 28717 28719 28720 \"\"\" \u7ebf\u7a0b\u5bf9\u8c61\u7684\u5176\u5b83\u65b9\u6cd5 \u00b6 Thread\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684\u65b9\u6cd5: 1> is_alive() : \u67e5\u770b\u7ebf\u7a0b\u662f\u5426\u5b58\u6d3b 2> setName() : \u8bbe\u7f6e\u7ebf\u7a0b\u540d 3> join() : \u8ba9\u4e3b\u7ebf\u7a0b\u7b49\u7740\u5b50\u7ebf\u7a0b\u8fd0\u884c\u5b8c\u6bd5\u540e,\u4e3b\u7ebf\u7a0b\u518d\u5f80\u4e0b\u8d70 threading\u6a21\u5757\u63d0\u4f9b\u7684\u4e00\u4e9b\u65b9\u6cd5: 1> current_thread() : \u8fd4\u56de\u5f53\u524d\u7684\u7ebf\u7a0b\u53d8\u91cf 2> enumerate() : \u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u6b63\u5728\u8fd0\u884c\u7684/\u6d3b\u8dc3\u7684\u7ebf\u7a0b\u5bf9\u8c61\u7684list \u6b63\u5728\u8fd0\u884c\u6307\u7ebf\u7a0b\u542f\u52a8\u540e\u3001\u7ed3\u675f\u524d,\u4e0d\u5305\u62ec\u542f\u52a8\u524d\u548c\u7ec8\u6b62\u540e\u7684\u7ebf\u7a0b. 3> active_count() : \u8fd4\u56de\u6b63\u5728\u8fd0\u884c\u7684/\u6d3b\u8dc3\u7684\u7ebf\u7a0b\u6570\u91cf, \u4e0e len(threading.enumerate()) \u6709\u76f8\u540c\u7684\u7ed3\u679c. import time from threading import Thread , current_thread , enumerate , active_count def task (): time . sleep ( 2 ) print ( \"\u5728\u5b50\u7ebf\u7a0b\u91cc\u67e5\u770b\u81ea\u5df1\u7684\u7ebf\u7a0b\u540d:\" , current_thread () . name ) if __name__ == '__main__' : t = Thread ( target = task ) t . start () print ( enumerate ()) # -- \u8fde\u540c\u4e3b\u7ebf\u7a0b\u5728\u5185\u6709\u4e24\u4e2a\u8fd0\u884c\u7684\u7ebf\u7a0b t . join () print ( t . is_alive ()) print ( enumerate ()) print ( active_count ()) print ( \"\u5728\u4e3b\u7ebf\u7a0b\u91cc\u67e5\u770b\u81ea\u5df1\u7684\u7ebf\u7a0b\u540d:\" , current_thread () . name ) print ( \"\u5728\u4e3b\u7ebf\u7a0b\u91cc\u67e5\u770b\u5b50\u7ebf\u7a0b\u7684\u7ebf\u7a0b\u540d:\" , t . name ) # -- \u5f53\u7136\u53ef\u4ee5\u5728Thread\u91cc\u81ea\u5df1\u6307\u5b9a\u7ebf\u7a0b\u540d print ( \"\u4e3b\" ) \"\"\" [<_MainThread(MainThread, started 4556516864)>, <Thread(Thread-1, started 123145552031744)>] \u5728\u5b50\u7ebf\u7a0b\u91cc\u67e5\u770b\u81ea\u5df1\u7684\u7ebf\u7a0b\u540d: Thread-1 False [<_MainThread(MainThread, started 4556516864)>] 1 \u5728\u4e3b\u7ebf\u7a0b\u91cc\u67e5\u770b\u81ea\u5df1\u7684\u7ebf\u7a0b\u540d: MainThread \u5728\u4e3b\u7ebf\u7a0b\u91cc\u67e5\u770b\u5b50\u7ebf\u7a0b\u7684\u7ebf\u7a0b\u540d: Thread-1 \u4e3b \"\"\" \u5b88\u62a4\u7ebf\u7a0b \u00b6 \u65e0\u8bba\u662f\u8fdb\u7a0b\u8fd8\u662f\u7ebf\u7a0b, \u90fd\u9075\u5faa \"\u5b88\u62a4 \u8fdb\u7a0b/\u7ebf\u7a0b \u4f1a\u7b49\u5f85 \u4e3b\u8fdb\u7a0b/\u4e3b\u7ebf\u7a0b \u8fd0\u884c\u5b8c\u6bd5\u540e\u88ab\u9500\u6bc1\" \u9700\u8981\u7279\u522b\u5f3a\u8c03! \u8fd0\u884c\u5b8c\u6bd5\u5e76\u975e\u7ec8\u6b62\u8fd0\u884c! \u6982\u5ff5 \u00b6 1> \u4e3b\u8fdb\u7a0b \u5728\u5176\u4ee3\u7801\u7ed3\u675f\u540e\u5c31\u5df2\u7ecf\u7b97\u8fd0\u884c\u5b8c\u6bd5\u4e86 ( \u5b88\u62a4\u8fdb\u7a0b\u5728\u6b64\u65f6\u5c31\u88ab\u56de\u6536 ). \u7136\u540e\u4e3b\u8fdb\u7a0b\u4f1a\u4e00\u76f4\u7b49\u975e\u5b88\u62a4\u7684\u5b50\u8fdb\u7a0b\u90fd\u8fd0\u884c\u5b8c\u6bd5\u540e\u56de\u6536\u5b50\u8fdb\u7a0b\u7684\u8d44\u6e90 (\u5426\u5219\u4f1a\u4ea7\u751f\u50f5\u5c38\u8fdb\u7a0b) \u624d\u4f1a\u7ed3\u675f. 2> \u4e3b\u7ebf\u7a0b \u5728\u5176\u4ed6\u975e\u5b88\u62a4\u7ebf\u7a0b\u8fd0\u884c\u5b8c\u6bd5\u540e\u624d\u7b97\u8fd0\u884c\u5b8c\u6bd5 ( \u5b88\u62a4\u7ebf\u7a0b\u5728\u6b64\u65f6\u5c31\u88ab\u56de\u6536 ). \u56e0\u4e3a\u4e3b\u7ebf\u7a0b\u7684\u7ed3\u675f\u610f\u5473\u7740\u8fdb\u7a0b\u7684\u7ed3\u675f, \u8fdb\u7a0b\u6574\u4f53\u7684\u8d44\u6e90\u90fd\u5c06\u88ab\u56de\u6536, \u800c\u8fdb\u7a0b\u5fc5\u987b\u4fdd\u8bc1\u975e\u5b88\u62a4\u7ebf\u7a0b\u90fd\u8fd0\u884c\u5b8c\u6bd5\u540e\u624d\u80fd\u7ed3\u675f. import time from threading import Thread def task ( x ): print ( \" %s is running.\" % x ) time . sleep ( 2 ) print ( \" %s is done.\" % x ) \"\"\" \u5b88\u62a4\u7ebf\u7a0b\u4f1a\u5728\u672c\u8fdb\u7a0b\u5185\u6240\u6709\u975e\u5b88\u62a4\u7ebf\u7a0b\u90fd\u6b7b\u6389\u4e86\u624d\u8ddf\u7740\u6b7b.\u5373\u5b88\u62a4\u7ebf\u7a0b\u5b88\u62a4\u7684\u662f\u6574\u4e2a\u8fdb\u7a0b\u7684\u8fd0\u884c\u5468\u671f. -- \u5b88\u62a4\u7ebf\u7a0b\u5c31\u662f\u8f66\u95f4\u91cc\u7684\u76d1\u5de5,\u76d1\u5bdf\u8f66\u95f4\u91cc\u6240\u6709\u7684\u6d41\u6c34\u7ebf,\u6d41\u6c34\u7ebf\u90fd\u505c\u5de5\u4e86,\u5c31\u6ca1\u6709\u76d1\u5bdf\u7684\u5fc5\u8981\u4e86. -- \u5b88\u62a4\u8fdb\u7a0b\u5c31\u50cf\u662f\u4e2a\u592a\u76d1,\u5b88\u62a4\u7740\u7687\u4e0a,\u7687\u4e0a\u4e0d\u5e72\u6d3b\u4e86,\u592a\u76d1\u5c31\u53ef\u4ee5\u53bb\u6b7b\u4e86. \"\"\" if __name__ == '__main__' : t = Thread ( target = task , args = ( '\u5b88\u62a4\u7ebf\u7a0b' ,)) t . daemon = True t . start () # -- \u8fd0\u884c\u5230\u6b64\u5904,\u5b88\u62a4\u7ebf\u7a0b\u7acb\u9a6c\u5c31\u8d77\u6765\u4e86. print ( \"\u4e3b\" ) # -- \u8fd0\u884c\u5230\u6b64\u5904,\u6240\u6709\u7684\u975e\u5b88\u62a4\u7ebf\u7a0b\u90fd\u8fd0\u884c\u5b8c\u4e86. \"\"\" \u5b88\u62a4\u7ebf\u7a0b is running. \u4e3b \"\"\" \u8ff7\u60d1\u4eba\u7684\u4f8b\u5b50 \u00b6 import time from threading import Thread def foo (): print ( 123 ) time . sleep ( 1 ) print ( \"end123\" ) def bar (): print ( 456 ) time . sleep ( 3 ) print ( \"end456\" ) t1 = Thread ( target = foo ) t2 = Thread ( target = bar ) t1 . daemon = True t1 . start () t2 . start () print ( \"main-------\" ) \"\"\" 123 456 main------- # -- \u4e3b\u7ebf\u7a0b\u7ed3\u675f\u4e86 end123 end456 # -- \u5b50\u7ebf\u7a0bt2\u7ed3\u675f\u4e86 \"\"\" \u6084\u6084\u544a\u8bc9\u4f60,\u82e5foo\u91cc\u77613\u79d2,bar\u91cc\u77611\u79d2, \"end123\" \u5c31\u6253\u5370\u4e0d\u51fa\u6765\u5566!!! \u4e92\u65a5\u9501 \u00b6 \u5c06\u591a\u4e2a\u5e76\u53d1\u4efb\u52a1\u5bf9\u5171\u4eab\u6570\u636e\u7684\u4fee\u6539\u53d8\u6210\"\u4e32\u884c\",\u727a\u7272\u4e86\u6548\u7387,\u4fdd\u8bc1\u4e86\u6570\u636e\u7684\u5b89\u5168! \u8fd9\u91cc\u4e32\u884c\u52a0\u5f15\u53f7\u662f\u56e0\u4e3a\u4e0d\u662f\u4e25\u683c\u610f\u4e49\u4e0a\u7684\u4e32\u884c,\u4e0d\u662f\u6328\u7740\u4e00\u4e2a\u4e00\u4e2a\u6765\u7684,\u9700\u8981\u62a2,\u8c01\u62a2\u5230\u4e86\u8c01\u8fd0\u884c \u6a21\u62df\u5171\u4eab\u6570\u636e\u7684\u4fee\u6539 \u00b6 \u7528\u5b9e\u9a8c\u8bc1\u660e\u7ebf\u7a0b\u4fee\u6539\u5171\u4eab\u6570\u636e\u662f\u4e0d\u5b89\u5168\u7684! \u4e0d\u52a0\u9501 -- \u5e76\u53d1\u6267\u884c,\u901f\u5ea6\u5feb,\u6570\u636e\u4e0d\u5b89\u5168. import time from threading import Thread x = 100 def task (): global x \"\"\" x -= 1 # -- \u8fd9\u6837\u5b9e\u9a8c,\u7ed3\u679c\u4e3a0,\u4f46\u5e76\u4e0d\u80fd\u8bc1\u660e\u7ebf\u7a0b\u4fee\u6539\u5171\u4eab\u6570\u636e\u5c31\u662f\u5b89\u5168\u7684!\u56e0\u4e3a\u7ebf\u7a0b\u542f\u52a8\u901f\u5ea6\u592a\u5feb! \"\"\" temp = x # -- 0.1s\u7684\u65f6\u95f4,\u5b8c\u6210100\u6b21for\u5faa\u73af\u8db3\u77e3,\u4fdd\u8bc1100\u4e2a\u7ebf\u7a0b\u90fd\u8d77\u6765\u5566,\u90fd\u62ff\u5230\u4e00\u4e2a\u503c\u4e3a100\u7684\u4e34\u65f6\u53d8\u91cftemp time . sleep ( 0.1 ) # -- \u7761\u9192\u540e,\u8fd9100\u4e2a\u7ebf\u7a0b\u90fd\u8fdb\u884c\u4e86`x = 100 - 1`\u7684\u8d4b\u503c\u64cd\u4f5c,\u786e\u5b9e\u4e5f\u662f\u51cf\u4e86100\u6b21 x = temp - 1 if __name__ == '__main__' : t_l = [] start = time . time () for _ in range ( 100 ): t = Thread ( target = task ) t_l . append ( t ) t . start () for t in t_l : # -- \u7528\u4e8e\u4fdd\u8bc1100\u4e2a\u7ebf\u7a0b\u8fd0\u884c\u5b8c\u6bd5 t . join () stop = time . time () print ( x , stop - start ) # -- 99 0.12547802925109863 \u52a0\u9501 \u00b6 \u672a\u52a0\u9501\u90e8\u5206\u5e76\u53d1\u6267\u884c, \u52a0\u9501\u90e8\u5206\"\u4e32\u884c\"\u6267\u884c,\u901f\u5ea6\u6162,\u4f46\u6570\u636e\u5b89\u5168 \u6ce8\u610f\u54e6,\u82e5\u5728start\u4e4b\u540e\u7acb\u5373\u4f7f\u7528join,\u4f1a\u5c06100\u4e2a\u7ebf\u7a0b\u7684\u4efb\u52a1\"\u4e32\u884c\"\u6267\u884c,\u800c\u52a0\u9501\u53ea\u662f\u5c06\u4efb\u52a1\u4e2d \u6d89\u53ca\u5171\u4eab\u6570\u636e\u4fee\u6539\u7684\u90e8\u5206 \"\u4e32\u884c\"\u6267\u884c,\u76f8\u6bd4\u4e4b\u4e0b,\u660e\u663e\u52a0\u9501\u7684\u6548\u7387\u66f4\u9ad8! import time from threading import Thread , Lock # -- \u6ca1\u5fc5\u8981\u4f20\u7ed9\u6bcf\u4e00\u4e2a\u7ebf\u7a0b,\u56e0\u4e3a\u8fd9\u4e2a\u9501\u9020\u51fa\u6765\u540e,\u6240\u6709\u7ebf\u7a0b\u90fd\u80fd\u770b\u5230 # \u56e0\u4e3a\u540c\u4e00\u8fdb\u7a0b\u4e0b\u7684\u591a\u4e2a\u7ebf\u7a0b\u5171\u4eab\u8be5\u8fdb\u7a0b\u5185\u7684\u6570\u636e # \u56de\u987e\u4e0b,\u5728\u7236\u8fdb\u7a0b\u91cc\u9020\u7684\u9501,\u5b50\u8fdb\u7a0b\u770b\u4e0d\u5230,\u9700\u8981\u901a\u8fc7\u53c2\u6570\u4f20\u7ed9\u6bcf\u4e00\u4e2a\u5b50\u8fdb\u7a0b(\u9501\u53ea\u6709\u4e00\u628a) mutex = Lock () x = 100 def task (): # -- \u672a\u52a0\u9501\u7684\u4ee3\u7801\u5e76\u53d1\u8fd0\u884c global x \"\"\" with mutex: temp = x time.sleep(0.1) x = temp - 1 \"\"\" # -- \u52a0\u9501\u7684\u4ee3\u7801\"\u4e32\u884c\"\u8fd0\u884c mutex . acquire () temp = x # -- \u5728\u7b2c\u4e00\u4e2a\u7ebf\u7a0b(\u56e0\u4e3afor\u5faa\u73af,\u8d77\u7ebf\u7a0b\u7684\u901f\u5ea6\u4e5f\u5f88\u5feb,\u6240\u4ee5\u5fc5\u5b9a\u4e3a\u7b2c\u4e00\u4e2a\u7ebf\u7a0b)\u7684\u7761\u7720\u671f\u95f4 # \u5176\u4f5999\u4e2a\u7ebf\u7a0b\u5df2\u7ecf\u8d77\u6765\u5566,\u4e4b\u540e\u9501\u7684\u4e89\u62a2\u5c31\u8bf4\u4e0d\u51c6\u8c01\u62a2\u5230\u4e86 time . sleep ( 0.1 ) x = temp - 1 mutex . release () if __name__ == '__main__' : t_l = [] start = time . time () for _ in range ( 100 ): t = Thread ( target = task ) t_l . append ( t ) t . start () for t in t_l : t . join () stop = time . time () print ( x , stop - start ) # 0 10.318571090698242 -- 100*0.1=10 \u52a0\u9501\u90e8\u5206\u662f\"\u4e32\u884c\"\u6267\u884c\u7684 # 10\u79d2\u591a,\u591a\u7684\u8fd9\u70b9\u65f6\u95f4\u662f\u9020\u7ebf\u7a0b\u4ee5\u53ca\u5207\u6362\u7ebf\u7a0b\u7684\u65f6\u95f4 \u6b7b\u9501\u73b0\u8c61\u4e0e\u9012\u5f52\u9501 \u00b6 \u8fdb\u7a0b\u548c\u7ebf\u7a0b\u90fd\u6709\u6b7b\u9501\u548c\u9012\u5f52\u9501\u54e6! \u6b7b\u9501\u73b0\u8c61 \u00b6 \u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\u7684\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d, \u56e0\u4e89\u593a\u8d44\u6e90\u800c\u9020\u6210\u7684\u4e00\u79cd\u4e92\u76f8\u7b49\u5f85\u7684\u73b0\u8c61. \u82e5\u65e0\u5916\u529b\u4f5c\u7528, \u5b83\u4eec\u90fd\u5c06\u65e0\u6cd5\u7ee7\u7eed\u8fd0\u884c\u4e0b\u53bb. \u6b64\u65f6\u79f0\u7cfb\u7edf\u5904\u4e8e\u6b7b\u9501\u72b6\u6001\u6216\u7cfb\u7edf\u4ea7\u751f\u4e86\u6b7b\u9501,\u8fd9\u4e9b\u6c38\u8fdc\u5728\u4e92\u76f8\u7b49\u5f85\u7684\u8fdb\u7a0b\u79f0\u4e3a\u6b7b\u9501\u8fdb\u7a0b. import time from threading import Thread , Lock , active_count mutexA = Lock () mutexB = Lock () class Mythread ( Thread ): def run ( self ): self . f1 () self . f2 () def f1 ( self ): mutexA . acquire () print ( \"[ %s ]\u62ff\u5230A\u9501!\" % self . name ) mutexB . acquire () print ( \"[ %s ]\u62ff\u5230B\u9501!\" % self . name ) mutexB . release () mutexA . release () def f2 ( self ): mutexB . acquire () print ( \"[ %s ]\u62ff\u5230B\u9501!\" % self . name ) time . sleep ( 1 ) # -- [Thread-1]\u7ebf\u7a0b\u5728\u8fd9\u91cc\u7761\u4e00\u79d2,\u8db3\u591f\u5176\u5b83\u7ebf\u7a0b\u8d77\u6765\u5566! mutexA . acquire () print ( \"[ %s ]\u62ff\u5230A\u9501!\" % self . name ) mutexA . release () mutexB . release () if __name__ == '__main__' : for i in range ( 10 ): t = Mythread () t . start () print ( active_count ()) # 11 -- \u503c\u4e3a11,\u4ee3\u8868\u6240\u6709\u7ebf\u7a0b\u90fd\u5df2\u7ecf\u4ea7\u751f\u5566 \u5b9e\u9a8c\u7ed3\u679c: \u7ebf\u7a0b\u90fd\u5df2\u7ecf\u4ea7\u751f\u4e86,\u4f46\u7a0b\u5e8f\u5374\u963b\u585e\u4f4f\u4e86. \u7ebf\u7a0b\u542f\u52a8\u901f\u5ea6\u5f88\u5feb!\u7ebf\u7a0b1\u80af\u5b9a\u4f1a\u5148\u8d77\u6765.(for\u5faa\u73af\u7b2c\u4e00\u4e2a\u561b) [Thread-1]\u6267\u884cf1\u51fd\u6570\u4f53\u4ee3\u7801\u65f6,\u5f88\u60a0\u95f2\u7684\u62ff\u5230\u4e86A\u9501\u3001B\u9501\u3001\u91ca\u653eB\u9501\u3001\u91ca\u653eA\u9501 [Thread-1]\u63a5\u7740\u6267\u884cf2\u51fd\u6570\u4f53\u4ee3\u7801,\u5148\u62ff\u5230B\u9501,\u7761\u4e86\u4e00\u79d2 (\u7ebf\u7a0b1\u8d70\u5230\u8fd9\u4e00\u6b65\u7684\u8fc7\u7a0b\u4e2d\u6ca1\u6709\u4efb\u4f55\u7ade\u4e89\u8005). \u6ce8\u610f\u54e6,\u7761\u7684\u8fd9\u4e00\u79d2\u8db3\u591f\u5176\u5b83\u6240\u6709\u7684\u7ebf\u7a0b\u90fd\u8d77\u6765\u5566. \u5728\u7ebf\u7a0b1\u91ca\u653e\u6389A\u9501\u540e,[Thread-2]\u62a2\u5230\u4e86A\u9501,\u7ee7\u7eed\u6267\u884c,\u53d1\u73b0B\u9501\u8fd8\u5904\u4e8e\u88ab\u5360\u7528\u7684\u72b6\u6001. [Thread-1]\u7761\u5b8c\u540e,\u7ee7\u7eed\u6267\u884c,\u53d1\u73b0A\u9501\u88ab\u5360\u7528\u4e86. \u7ebf\u7a0b1\u3001\u7ebf\u7a0b2\u90fd\u7b49\u5f85\u7740\u5bf9\u65b9\u91ca\u653e\u9501. \u81ea\u5df1\u5728\u7f16\u7a0b\u8fc7\u7a0b\u4e2d\u52a0\u9501\u5c31\u6781\u6709\u53ef\u80fd\u5bfc\u81f4\u6b7b\u9501\u60c5\u51b5\u7684\u4ea7\u751f! \u9012\u5f52\u9501 \u00b6 \u6b7b\u9501\u89e3\u51b3\u65b9\u6848: \u4f7f\u7528Rlock\u9012\u5f52\u9501 -- \u53ef\u4ee5\u8fde\u7eed\u7684acquire Ps: \u4e92\u65a5\u9501\u662f\u4e0d\u80fd\u8fde\u7eed\u7684acquire\u7684!! \u9012\u5f52\u9501 -- \u5728Python\u4e2d\u4e3a\u4e86\u652f\u6301\u5728\u540c\u4e00\u7ebf\u7a0b\u4e2d\u591a\u6b21\u8bf7\u6c42\u540c\u4e00\u8d44\u6e90,python\u63d0\u4f9b\u4e86\u53ef\u91cd\u5165\u9501RLock \u8fd9\u4e2aRLock\u5185\u90e8\u7ef4\u62a4\u7740\u4e00\u4e2aLock\u548c\u4e00\u4e2acounter\u53d8\u91cf, counter\u8bb0\u5f55\u4e86acquire\u7684\u6b21\u6570, \u4ece\u800c\u4f7f\u5f97\u8d44\u6e90\u53ef\u4ee5\u88ab\u591a\u6b21require. \u76f4\u5230\u4e00\u4e2a\u7ebf\u7a0b\u6240\u6709\u7684acquire\u90fd\u88abrelease, \u5176\u4ed6\u7684\u7ebf\u7a0b\u624d\u80fd\u83b7\u5f97\u8d44\u6e90! # -- \u53ea\u7528\u6539\u52a8\u51e0\u884c\u4ee3\u7801\u5373\u53ef import time from threading import Thread , active_count , RLock # mutexA = Lock() # mutexB = Lock() # -- \u4f7f\u7528\u9012\u5f52\u9501\u7684\u8bdd,\u8fd9\u91cc\u7684A\u9501\u4ee5\u53caB\u9501,\u5b9e\u9645\u4e0a\u90fd\u662f\u540c\u4e00\u628a\u9501 # \u7b80\u5199: mutexA = mutexB = RLock() obj = RLock () mutexA = obj mutexB = obj \"\"\" [Thread-1]\u62ff\u5230A\u9501! [Thread-1]\u62ff\u5230B\u9501! [Thread-2]\u62ff\u5230A\u9501! [Thread-2]\u62ff\u5230B\u9501! [Thread-1]\u62ff\u5230B\u9501! ... ... ... \u9996\u5148\u518d\u6b21\u660e\u786e\u9012\u5f52\u9501\u7684\u8ba1\u6570\u4e0d\u4e3a0\u7684\u8bdd,\u5176\u5b83\u7ebf\u7a0b\u53ea\u80fd\u539f\u5730\u7b49\u5f85.\u4e3a0\u7684\u65f6\u5019,\u5176\u5b83\u7ebf\u7a0b\u624d\u80fd\u62a2\u9501. \u5373\u4e00\u4e2a\u7ebf\u7a0b\u62ff\u5230\u9501,counter\u52a01,\u8be5\u7ebf\u7a0b\u5185\u53c8\u78b0\u5230\u52a0\u9501\u7684\u60c5\u51b5, \u5219counter\u7ee7\u7eed\u52a01, \u8fd9\u671f\u95f4\u6240\u6709\u5176\u4ed6\u7ebf\u7a0b\u90fd\u53ea\u80fd\u7b49\u5f85, \u7b49\u5f85\u8be5\u7ebf\u7a0b\u91ca\u653e\u6240\u6709\u9501, \u5373counter\u9012\u51cf\u52300\u4e3a\u6b62! \u6839\u636e\u8fd0\u884c\u7ed3\u679c\u5206\u6790\u4ee3\u7801\u6d41\u7a0b: \u7ebf\u7a0b1\u62ff\u5230\u9012\u5f52\u9501,\u8fd0\u884cf1\u7684\u4ee3\u7801,\u9501\u7684\u8ba1\u6570\u52a01\u3001\u518d\u52a01\u3001\u51cf1\u3001\u518d\u51cf1. \u6b64\u65f6\u9012\u5f52\u9501\u7684\u8ba1\u6570\u4e3a0.\u6240\u6709\u7ebf\u7a0b(\u5305\u62ec\u7ebf\u7a0b1)\u91cd\u65b0\u5f00\u59cb\u62a2\u9501! \u7ebf\u7a0b2\u62a2\u5230\u4e86,\u7ebf\u7a0b2\u5f00\u59cb\u8fd0\u884cf1\u7684\u4ee3\u7801. \u4ec5\u7ba1\u7ebf\u7a0b1\u60f3\u7ee7\u7eed\u8fd0\u884cf2\u7684\u4ee3\u7801,\u4f46\u5948\u4f55\u6ca1\u6709\u62a2\u5230\u9501,\u4e5f\u5c31\u53ea\u597d\u539f\u5730\u7b49\u5f85. \u4fe1\u53f7\u91cf \u00b6 \u8fdb\u7a0b\u548c\u7ebf\u7a0b\u90fd\u6709\u4fe1\u53f7\u91cf! \u4fe1\u53f7\u91cf\u63a7\u5236\u540c\u4e00\u65f6\u523b\u5e76\u53d1\u6267\u884c\u7684\u4efb\u52a1\u6570 \u4fe1\u53f7\u91cfSemaphore\u7ba1\u7406\u4e00\u4e2a\u5185\u7f6e\u7684\u8ba1\u6570\u5668 \u6bcf\u5f53\u8c03\u7528acquire()\u65f6\u5185\u7f6e\u8ba1\u6570\u5668-1,\u8c03\u7528release() \u65f6\u5185\u7f6e\u8ba1\u6570\u5668+1. \u8ba1\u6570\u5668\u4e0d\u80fd\u5c0f\u4e8e0! \u5f53\u8ba1\u6570\u5668\u4e3a0\u65f6, acquire()\u5c06\u963b\u585e\u7ebf\u7a0b\u76f4\u5230\u5176\u4ed6\u7ebf\u7a0b\u8c03\u7528release(). # -- import random import time from threading import Thread , Semaphore , current_thread sm = Semaphore ( 5 ) # -- \u4fe1\u53f7\u91cf\u4e3a5,\u540c\u4e00\u65f6\u95f4\u6700\u5927\u6d3b\u8dc3\u7684\u53ea\u67095\u4e2a # \u540c\u65f6\u53ea\u67095\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u83b7\u5f97semaphore,\u5373\u53ef\u4ee5\u9650\u5236\u6700\u5927\u8fde\u63a5\u6570\u4e3a5 # Ps:\u4e92\u65a5\u9501\u540c\u4e00\u65f6\u95f4\u8fd0\u884c\u7684\u53ea\u67091\u4e2a def task (): sm . acquire () print ( \"[ %s ]\u6b63\u5728\u4e0a\u5395\u6240!\" % current_thread () . name ) time . sleep ( random . randint ( 1 , 4 )) # -- \u6a21\u62df\u6bcf\u4e2a\u4eba\u4e0a\u5395\u6240\u7684\u65f6\u95f4 sm . release () if __name__ == '__main__' : for i in range ( 20 ): t = Thread ( target = task ) t . start () \"\"\" \u4e0a\u6765\u5c31\u67095\u4e2a\u4eba\u62a2\u5230\u9501\u4e86,\u5176\u4f59\u4eba\u7b49\u7740,\u9664\u975e\u6709\u4eba\u91ca\u653e\u6389,\u5176\u4ed6\u4eba\u5c31\u53ef\u4ee5\u62a2\u91ca\u653e\u7684\u9501\u4e86. \u4e0d\u9700\u89815\u4e2a\u4eba\u90fd\u91ca\u653e\u9501\u540e\u624d\u80fd\u62a2\u9501,\u6709\u4eba\u91ca\u653e\u4e86\u9501\u5c31\u53ef\u4ee5\u62a2.. \"\"\" \u4fe1\u53f7\u91cf \u5c31\u8ddf \u516c\u5171\u5395\u6240 \u4e00\u6837. \u6709\u591a\u4e2a\u5751\u53ef\u4ee5\u540c\u65f6\u670d\u52a1\u591a\u4e2a\u4eba. \u4e92\u65a5\u9501 \u5c31\u8ddf \u72ec\u7acb\u536b\u751f\u95f4 \u4e00\u6837. \u540c\u4e00\u65f6\u95f4\u53ea\u80fd\u6709\u4e00\u4e2a\u4eba. \u63d0\u4e00\u5634, \u4fe1\u53f7\u91cf\u4e0e\u8fdb\u7a0b\u6c60\u662f\u5b8c\u5168\u4e0d\u540c\u7684\u6982\u5ff5, \u8fdb\u7a0b\u6c60Pool(4), \u6700\u5927\u53ea\u80fd\u4ea7\u751f4\u4e2a\u8fdb\u7a0b, \u800c\u4e14\u4ece\u5934\u5230\u5c3e\u90fd\u53ea\u662f\u8fd9\u56db\u4e2a\u8fdb\u7a0b, \u4e0d\u4f1a\u4ea7\u751f\u65b0\u7684, \u800c\u4fe1\u53f7\u91cf\u662f\u4ea7\u751f\u4e00\u5806\u7ebf\u7a0b/\u8fdb\u7a0b... \u5b9a\u65f6\u5668 \u00b6 \u5b9a\u65f6\u5668, \u6307\u5b9an\u79d2\u540e\u6267\u884c\u67d0\u64cd\u4f5c from threading import Timer , current_thread def task ( x ): print ( \" %s running.\" % x ) print ( current_thread () . name ) # -- \u662f\u4e00\u4e2a\u7ebf\u7a0b\uff01 if __name__ == '__main__' : # -- \u65f6\u95f4\u95f4\u9694\u3001\u4efb\u52a1\u3001\u4efb\u52a1\u7684\u53c2\u6570 t = Timer ( 3 , task , args = ( 10 ,)) # -- 3\u79d2\u540e\u8fd0\u884c\u4e00\u6b21 t . start () print ( \"\u4e3b\" ) \"\"\" \u4e3b 10 running. Thread-1 \"\"\" \u7ebf\u7a0bqueue \u00b6 import queue , \u7528\u6cd5\u4e0e\u8fdb\u7a0bQueue\u4e00\u6837 import queue # -- \u2605 \u961f\u5217: \u5148\u8fdb\u5148\u51fa q = queue . Queue ( 3 ) q . put ( 1 ) q . put ( 2 ) q . put ( 3 ) print ( q . get ()) print ( q . get ()) print ( q . get ()) # -- \u2605 \u5806\u6808: last in first out \u5148\u8fdb\u540e\u51fa q = queue . LifoQueue () q . put ( 1 ) q . put ( 2 ) q . put ( 3 ) print ( q . get ()) print ( q . get ()) print ( q . get ()) # -- \u2605 \u4f18\u5148\u7ea7\u961f\u5217: \u6570\u5b57\u8d8a\u5c0f,\u4f18\u5148\u7ea7\u8d8a\u9ad8 \u4f18\u5148\u7ea7\u9ad8\u7684\u5148\u51fa\u961f q = queue . PriorityQueue () q . put (( 3 , 'data1' )) # -- \u653e\u5143\u7956\u548c\u5217\u8868\u7686\u53ef,\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u4f18\u5148\u7ea7,\u7b2c\u4e8c\u4e2a\u5143\u7d20\u662f\u6570\u636e q . put (( - 10 , 'data2' )) q . put (( 11 , 'data3' )) print ( q . get ()) print ( q . get ()) print ( q . get ()) \"\"\" 1 2 3 3 2 1 (-10, 'data2') (3, 'data1') (11, 'data3') \"\"\"","title":"\u7ebf\u7a0b\u5f00\u53d1"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/9_%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_1","text":"\u5728\u4f20\u7edf\u64cd\u4f5c\u7cfb\u7edf\u4e2d, \u6bcf\u4e2a\u8fdb\u7a0b\u6709\u4e00\u4e2a\u5730\u5740\u7a7a\u95f4(\u5373\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u4f1a\u5360\u7528\u72ec\u4e00\u4efd\u7684\u5185\u5b58\u7a7a\u95f4), \u800c\u4e14\u6bcf\u4e2a\u8fdb\u7a0b\u5185\u9ed8\u8ba4\u5c31\u6709\u4e00\u4e2a\u63a7\u5236\u7ebf\u7a0b(\u5373\u6bcf\u4e2a\u8fdb\u7a0b\u5185\u81ea\u5e26\u4e00\u4e2a\u7ebf\u7a0b).. \u7ea0\u6b63\u4e00\u4e2a\u6982\u5ff5: \u5728\u524d\u9762\u7684\u5e76\u53d1\u7f16\u7a0b\u7684\u5b66\u4e60\u4e2d,\u6211\u4eec\u4e00\u76f4\u8bf4\u8fdb\u7a0b\u600e\u4e48\u600e\u4e48\u8fd0\u884c,\u8fd9\u662f\u4e0d\u591f\u51c6\u786e\u7684! \u51c6\u786e\u70b9\u8bf4,\u8fdb\u7a0b\u4e0d\u662f\u4e00\u4e2a\u6267\u884c\u5355\u4f4d!\u8fdb\u7a0b\u53ea\u662f\u4e00\u4e2a\u8d44\u6e90\u5355\u4f4d!","title":"\u7ebf\u7a0b\u7406\u8bba"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/9_%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_2","text":"\u8981\u6e05\u695a\u7684\u77e5\u9053! \u8fdb\u7a0b\u662f\u8d44\u6e90\u5355\u4f4d,\u7ebf\u7a0b\u662fcpu\u6267\u884c\u548c\u8c03\u5ea6\u7684\u57fa\u672c\u5355\u4f4d!","title":"\u591a\u89d2\u5ea6\u5206\u6790"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/9_%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_3","text":"\u5de5\u5382 -- OS ; \u8f66\u95f4 -- \u8fdb\u7a0b ; \u6d41\u6c34\u7ebf -- \u7ebf\u7a0b. \u82e5\u628a\u64cd\u4f5c\u7cfb\u7edf\u6bd4\u55bb\u4e3a\u4e00\u5ea7\u5de5\u5382. \u5728\u5de5\u5382\u5185\u6bcf\u9020\u51fa\u4e00\u4e2a \u8f66\u95f4 --- \u542f\u52a8\u4e00\u4e2a \u8fdb\u7a0b. \u9020\u8f66\u8f71\u8f98\u7684\u8f66\u95f4 -- \u653e\u9020\u8f66\u8f71\u8f98\u7684\u4e00\u5806\u539f\u6750\u6599 \u9020\u53d1\u52a8\u673a\u7684\u8f66\u95f4 -- \u653e\u9020\u53d1\u52a8\u673a\u7684\u4e00\u5806\u539f\u6750\u6599 \u6bcf\u4e2a\u8f66\u95f4\u5185\u81f3\u5c11\u6709\u4e00\u6761 \u6d41\u6c34\u7ebf --- \u6bcf\u4e2a\u8fdb\u7a0b\u5185\u81f3\u5c11\u6709\u4e00\u4e2a \u7ebf\u7a0b. \u6d41\u6c34\u7ebf\u4f1a\u53bb\u53d6\u8f66\u95f4\u91cc\u7684\u539f\u6750\u6599\u8fdb\u884c\u52a0\u5de5","title":"\u6bd4\u55bb\u5de5\u5382"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/9_%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#py","text":"\u4ece\u8fd0\u884c\u4e00\u4e2apython\u6587\u4ef6\u7684\u89d2\u5ea6\u8be0\u91ca\u8fdb\u7a0b\u4e0e\u7ebf\u7a0b. \u6211\u4eec\u8bf4\u7684 \"<\u8fdb\u7a0b\u7684\u8fd0\u884c>\" \u672c\u8d28\u4e0a\u8bf4\u7684\u662f\u8fdb\u7a0b\u91cc\u7684\u7ebf\u7a0b\u7684\u8fd0\u884c. \u8fdb\u7a0b -- \u5f00\u8f9f\u4e86\u4e00\u5757\u5185\u5b58\u7a7a\u95f4,\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u6570\u636e\u90fd\u5f80\u91cc\u9762\u653e \u7ebf\u7a0b\u7684\u8fd0\u884c -- \u57fa\u4e8e\u9020\u597d\u7684\u7a7a\u95f4,\u4ece\u4e0a\u5230\u4e0b\u7684\u6267\u884c\u4ee3\u7801. \u5373\u4e00\u8bf4QQ\u8fdb\u7a0b,\u5c31\u610f\u5473\u7740\u5728\u5185\u5b58\u91cc\u6709\u4e00\u5757\u9694\u79bb\u7684\u7a7a\u95f4\u4e13\u95e8\u5b58\u653eQQ\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u5f53\u4e2d\u76f8\u5173\u7684\u6570\u636e!","title":"py\u6587\u4ef6\u89d2\u5ea6"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/9_%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_4","text":"\u8fdb\u7a0b\u548c\u7ebf\u7a0b\u90fd\u662f\u4e00\u4e2a\u62bd\u8c61\u7684\u6982\u5ff5!! \u5355\u8bf4\u8fdb\u7a0b, \u90a3\u4e48\u8fdb\u7a0b\u63cf\u8ff0\u7684\u5c31\u662f\u4e00\u4e2a\u7a0b\u5e8f\u7684\u8fd0\u884c\u8fc7\u7a0b. \u6b64\u65f6.. \u8fdb\u7a0b = \u8d44\u6e90\u7533\u8bf7(\u5f00\u8f9f\u5185\u5b58\u7a7a\u95f4) + \u7a0b\u5e8f\u6267\u884c(\u8fd0\u884c\u4ee3\u7801) \u65e2\u63d0\u5230\u4e86\u8fdb\u7a0b\u53c8\u63d0\u53ca\u4e86\u7ebf\u7a0b, \u90a3\u4e48.. \u8fdb\u7a0b = \u8d44\u6e90\u7533\u8bf7 (\u5f00\u8f9f\u5185\u5b58\u7a7a\u95f4) \u7ebf\u7a0b = \u76f8\u5e94\u4ee3\u7801\u7684\u6267\u884c\u8fc7\u7a0b (\u524d\u63d0\u662f\u8fdb\u7a0b\u5df2\u7ecf\u5b58\u5728/\u7a7a\u95f4\u5df2\u7ecf\u9020\u597d\u4e86) \u62bd\u8c61\u8bdd\u672f \u5927\u767d\u8bdd \u4e00\u4e2a\u8fdb\u7a0b\u542f\u52a8\u4e86 \u5173\u4e8e\u8fd9\u4e2a\u7a0b\u5e8f\u7684\u7a7a\u95f4\u5212\u5206\u597d\u4e86\uff01 \u4e00\u4e2a\u8fdb\u7a0b\u9500\u6bc1\u4e86 \u8fd9\u4e2a\u7a7a\u95f4\u88ab\u91ca\u653e\u6389\u5566! \u7ebf\u7a0b\u8fd0\u884c\u5230\u67d0\u4e00\u884c \u6307\u7684\u662f\u7a7a\u95f4\u5df2\u7ecf\u9020\u597d\u4e86,\u5355\u6307\u4ee3\u7801\u8fd0\u884c\u5230\u54ea\u4e00\u884c\u5566. \u4e00\u4e2a\u7ebf\u7a0b\u8fd0\u884c\u5b8c\u6bd5 \u8ddf\u8fd9\u4e2a\u7ebf\u7a0b\u6709\u5173\u7684\u4ee3\u7801\u5df2\u7ecf\u8fd0\u884c\u5b8c\u4e86 \u6709\u4e09\u4e2a\u7ebf\u7a0b \u6709\u4e09\u6bb5\u4ee3\u7801\u5728\u8fd0\u884c \u6709\u4e09\u4e2a\u8fdb\u7a0b \u6709\u4e09\u4e2a\u7a7a\u95f4\u88ab\u7533\u8bf7\u597d\u4e86 \u6ce8\u610f!\u63d0\u4e00\u5634, cpu\u662f\u6267\u884c\u4ee3\u7801\u7684,cpu\u4e0d\u6d89\u53ca\u8d44\u6e90\u7684\u7533\u8bf7. \u524d\u9762\u5e76\u53d1\u7f16\u7a0b\u5b66\u4e60\u4e2d\u8bf4cpu\u5728\u591a\u4e2a\u8fdb\u7a0b\u4e4b\u95f4\u6765\u56de\u5207\u6362,\u51c6\u786e\u70b9\u5e94\u8be5\u8bf4\u662f cpu\u5728\u591a\u4e2a\u7ebf\u7a0b\u4e4b\u95f4\u6765\u56de\u5207\u6362. \u6267\u884c\u7684\u662f\u7ebf\u7a0b\u5bf9\u5e94\u7684\u4ee3\u7801!! \u8fd0\u884c\u4ee3\u7801\u7684\u8fc7\u7a0b\u4e2d,\u7528\u5230\u7684\u6570\u636e\u8ddf\u8fdb\u7a0b\u8981/\u4ece\u8fdb\u7a0b\u7a7a\u95f4\u4e2d\u62ff!!","title":"\u62bd\u8c61\u7684\u6982\u5ff5"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/9_%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#vs","text":"1> \u5185\u5b58\u5171\u4eabor\u9694\u79bb \u591a\u4e2a\u8fdb\u7a0b\u4e4b\u95f4\u5185\u5b58\u7a7a\u95f4\u5f7c\u6b64\u9694\u79bb <\u540c\u4e00\u8fdb\u7a0b\u4e0b>\u7684\u591a\u4e2a\u7ebf\u7a0b\u5171\u4eab\u8be5\u8fdb\u7a0b\u5185\u7684\u6570\u636e 2> \u521b\u5efa\u901f\u5ea6 \u9020\u7ebf\u7a0b\u7684\u901f\u5ea6\u8981\u8fdc\u8fdc\u5feb\u4e8e\u9020\u8fdb\u7a0b!! \u6d45\u60f3 / \u6d45\u5c1d\u4e00\u4e0b\u4ec0\u4e48\u65f6\u5019\u7528\u7ebf\u7a0b , \u4ec0\u4e48\u65f6\u5019\u7528\u8fdb\u7a0b ! \u5047\u8bbe\u6211\u4eec\u9700\u8981\u5f00\u53d1\u4e00\u4e2a\u6587\u672c\u5904\u7406\u5de5\u5177 , \u8be5\u5de5\u5177\u81f3\u5c11\u5305\u542b\u4e09\u65b9\u9762\u7684\u529f\u80fd : 1 > \u63a5\u6536\u7528\u6237\u7684\u8f93\u5165 ; 2 > \u5c06\u8f93\u5165\u7684\u5185\u5bb9\u4ece\u5185\u5b58\u4e2d\u53d6\u51fa\u6765\u683c\u5f0f\u5316\u6253\u5370\u5230\u5c4f\u5e55\u4e0a ; 3 > \u628a\u5185\u5b58\u91cc\u7684\u5185\u5bb9\u5b9a\u671f\u7684\u5f80\u786c\u76d8\u91cc\u5237 . ( \u521d\u6b65\u5206\u6790 : \u8fd9\u4e09\u4e2a\u529f\u80fd\u80af\u5b9a\u4e0d\u80fd\u662f\u4e32\u884c . \u96be\u9053\u5237\u6570\u636e\u5230\u786c\u76d8\u7684\u65f6\u5019\u5c31\u4e0d\u5141\u8bb8\u7528\u6237\u8f93\u5165\u5417 \uff1f \u8fd9\u662f\u4e0d\u5408\u7406\u7684 ) \u5e76\u53d1\u7684\u65b9\u6848\u6709\u4e24\u79cd : \u25a0 \u65b9\u6848\u4e00 \u591a\u8fdb\u7a0b -- \u5f00\u4e09\u4e2a\u8fdb\u7a0b ( \u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u81ea\u5e26\u4e00\u4e2a\u7ebf\u7a0b ) \u25a0 \u65b9\u6848\u4e8c \u591a\u7ebf\u7a0b -- \u5f00\u4e00\u4e2a\u8fdb\u7a0b , \u8be5\u8fdb\u7a0b\u5185\u6709\u4e09\u4e2a\u7ebf\u7a0b \u518d\u6b21\u5f3a\u8c03 , \u8d77\u4e8610\u4e2a\u8fdb\u7a0b , \u6bcf\u4e2a\u8fdb\u7a0b\u91cc\u90fd\u81ea\u5e26\u4e00\u4e2a\u7ebf\u7a0b , \u53eb\u591a\u7ebf\u7a0b\u5417 \uff1f No . \u591a\u7ebf\u7a0b\u6307\u7684\u662f\u540c\u4e00\u4e2a\u8fdb\u7a0b\u5185\u5f00\u542f\u4e86\u591a\u4e2a\u7ebf\u7a0b !! \u5148\u8bf4\u7ed3\u8bba , \u8fd9\u4e24\u4e2a\u89e3\u51b3\u65b9\u6848 , \u7b2c\u4e8c\u4e2a\u65b9\u6848\u591a\u7ebf\u7a0b\u80dc\u51fa ! \u5206\u6790\u5982\u4e0b : \u82e5\u662f\u65b9\u6848\u4e00 , \u4e09\u4e2a\u8fdb\u7a0b\u5206\u522b\u8d1f\u8d23\u529f\u80fd1 \u3001 2 \u3001 3. \u7b2c\u4e00\u4e2a\u8fdb\u7a0b\u8f93\u5165\u7684\u6570\u636e\u8981\u7ed9\u7b2c\u4e8c\u4e2a\u8fdb\u7a0b\u5728\u5c4f\u5e55\u4e0a\u6253\u5370 , \u7b2c\u4e00\u4e2a\u8fdb\u7a0b\u5185\u5b58\u4e2d\u7684\u6570\u636e\u8981\u62f7\u8d1d\u7ed9\u7b2c\u4e09\u4e2a\u8fdb\u7a0b . \u4f46\u8fdb\u7a0b\u4e4b\u95f4\u5185\u5b58\u5f7c\u6b64\u9694\u79bb , \u89e3\u51b3\u8be5\u95ee\u9898\u6d89\u53ca\u5230\u8fdb\u7a0b\u95f4\u7684\u901a\u4fe1 . So , \u5f0a\u7aef : \u6570\u636e\u88ab\u91cd\u590d\u62f7\u8d1d , \u8fdb\u7a0b\u4e4b\u95f4\u7684\u901a\u4fe1\u5b9e\u73b0\u590d\u6742 . \u82e5\u662f\u65b9\u6848\u4e8c . \u53ef\u4ee5\u89e3\u51b3\u65b9\u6848\u4e00\u7684\u5f0a\u7aef . \u8be5\u8fdb\u7a0b\u91cc\u7684\u8fd9\u4e09\u4e2a\u7ebf\u7a0b\u4ea7\u751f\u7684\u6570\u636e\u90fd\u5728\u8fdb\u7a0b\u7684\u5185\u5b58\u91cc , \u6570\u636e\u5171\u4eab . \u9020\u7ebf\u7a0b\u7684\u901f\u5ea6\u4e5f\u8fdc\u8fdc\u5feb\u4e8e\u9020\u8fdb\u7a0b\u7684\u901f\u5ea6 . Ps : \u8fd9\u91cc\u53ea\u662f\u8fdb\u884c\u4e86\u7b80\u5355\u7684\u5206\u6790 , \u4e3a\u4ec0\u4e48\u9009\u62e9\u65b9\u6848\u4e8c , \u5206\u6790\u7684\u8fd8\u4e0d\u591f\u900f\u5f7b !! \u4f46\u53ef\u4ee5\u660e\u786e\u7684\u8ddf\u4f60\u8bf4 , \u5927\u591a\u6570\u573a\u666f\u4e0b\u90fd\u4f1a\u7528\u591a\u7ebf\u7a0b , \u8fd9\u4e5f\u5e76\u4e0d\u610f\u5473\u7740\u591a\u8fdb\u7a0b\u6ca1\u7528 , \u5f53\u540e\u7eed\u4e86\u89e3\u4e86GIL\u540e , \u5c31\u6653\u5f97\u591a\u8fdb\u7a0b\u7684\u4f18\u52bf\u5566 !! \u6269\u5f20\u9605\u8bfb : ` https : // www . liaoxuefeng . com / wiki / 1016959663602400 / 1017631469467456 `","title":"\u8fdb\u7a0b vs \u7ebf\u7a0b"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/9_%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_5","text":"\u4e3a\u4e86\u65b9\u4fbf\u63cf\u8ff0,\u901a\u5e38\u4f1a\u5c06\u8fdb\u7a0b\u91cc\u81ea\u5e26\u7684\u90a3\u4e2a\u7ebf\u7a0b\u53eb\u505a\u4e3b\u7ebf\u7a0b. \u4f46\u8981\u6653\u5f97, \u540c\u4e00\u8fdb\u7a0b\u4e0b\u7684\u591a\u4e2a\u7ebf\u7a0b\u6ca1\u6709\u7236\u5b50\u4e4b\u5206!\u5927\u5bb6\u5730\u4f4d\u90fd\u4e00\u6837!! \u4e0d\u8981\u8bef\u89e3\u5566.","title":"\u5f00\u542f\u7ebf\u7a0b\u7684\u4e24\u79cd\u65b9\u5f0f"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/9_%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_6","text":"\u53f3\u952e\u6267\u884c\u4ee3\u7801,\u4f1a\u542f\u4e00\u4e2a\u8fdb\u7a0b,\u8fdb\u7a0b\u91cc\u7684\u539f\u751f\u7ebf\u7a0b\u4f1a\u4ece\u4e0a\u5230\u4e0b\u6267\u884c\u4ee3\u7801. \u5f53\u8fd0\u884c\u5230 t.start() \u65f6,\u53d1\u9001\u4fe1\u53f7,\u5728\u8be5\u8fdb\u7a0b\u91cc\u53c8\u542f\u4e86\u4e2a\u7ebf\u7a0b. \u542f\u7ebf\u7a0b\u7684\u901f\u5ea6\u8d85\u7ea7\u5feb! Ps: \u8fd9\u91cc\u5176\u5b83\u7ebf\u7a0b\u662f\u4e3b\u7ebf\u7a0b\u5f00\u542f\u7684,\u5f53\u7136,\u5176\u5b83\u7ebf\u7a0b\u91cc\u53ef\u4ee5\u518d\u5f00\u7ebf\u7a0b.\u4e0d\u7ba1\u600e\u6837,\u7ebf\u7a0b\u90fd\u5728\u8be5\u8fdb\u7a0b\u91cc. import time from threading import Thread def task ( x ): print ( \" %s is running.\" % x ) time . sleep ( 2 ) print ( \" %s is done.\" % x ) if __name__ == '__main__' : # -- \u542f\u7ebf\u7a0b\u53ef\u4ee5\u4e0d\u52a0main()\u51fd\u6570,\u4f46\u90fd\u4f1a\u4e60\u60ef\u6027\u7684\u52a0\u4e0a. t = Thread ( target = task , args = ( '\u5b50\u7ebf\u7a0b' ,)) t . start () print ( \"\u4e3b\" ) # -- \u7ad9\u5728\u8d44\u6e90\u89d2\u5ea6,\u4e3b\u8fdb\u7a0b;\u7ad9\u5728\u6267\u884c\u89d2\u5ea6,\u4e3b\u7ebf\u7a0b. \"\"\" \u5b50\u7ebf\u7a0b is running. \u4e3b \u5b50\u7ebf\u7a0b is done. \"\"\" \u2605 \u601d\u8003\u4e00\u4e2a\u95ee\u9898,\u6253\u5370\u51fa\"\u4e3b\"\u540e,\u7a0b\u5e8f\u8fd8\u672a\u7ed3\u675f,\u662f\u56e0\u4e3a\u4e3b\u7ebf\u7a0b\u5728\u7b49\u5b50\u7ebf\u7a0b\u7ed3\u675f\u540e,\u624d\u7ed3\u675f\u7684\u5417? No! \u8fd9\u91cc\u7684\u7b49\u662f\u56e0\u4e3a\u8fdb\u7a0b\u5fc5\u987b\u7b49\u5f85\u5176\u5185\u90e8\u6240\u6709\u7ebf\u7a0b\u8fd0\u884c\u5b8c\u6bd5\u624d\u7ed3\u675f! \u518d\u56de\u987e\u4e0b,\u591a\u8fdb\u7a0b\u91cc,\u4e3b\u8fdb\u7a0b\u7b49\u5b50\u8fdb\u7a0b\u662f\u56e0\u4e3a\u4e3b\u8fdb\u7a0b\u8981\u7ed9\u5b50\u8fdb\u7a0b\u6536\u5c38.","title":"\u65b9\u5f0f\u4e00"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/9_%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_7","text":"import time from threading import Thread class Mythread ( Thread ): def __init__ ( self , x ): # -- \u6211\u7591\u60d1\u8fc7\u8fd9\u4e2a\u6784\u9020\u51fd\u6570\u4e3a\u5565\u4e0d\u4f20\u53c2\u6570,\u770b\u4e86\u6e90\u7801\u624d\u53d1\u73b0,Thread\u7684\u6784\u9020\u65b9\u6cd5\u7684\u53c2\u6570\u90fd\u8bbe\u7f6e\u6210\u4e86\u9ed8\u8ba4\u53c2\u6570 super () . __init__ () self . x = x def run ( self ): print ( \" %s is running.\" % self . x ) time . sleep ( 2 ) print ( \" %s is done.\" % self . x ) if __name__ == '__main__' : t = Mythread ( '\u5b50\u7ebf\u7a0b' ) t . start () print ( \"\u4e3b\" )","title":"\u65b9\u5f0f\u4e8c"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/9_%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_8","text":"\u5728 \u4e00\u4e2a\u8fdb\u7a0b\u4e0b \u5f00\u542f\u591a\u4e2a\u7ebf\u7a0b\u4e0e\u5728 \u4e00\u4e2a\u8fdb\u7a0b\u4e0b \u5f00\u542f\u591a\u4e2a\u5b50\u8fdb\u7a0b\u7684\u533a\u522b","title":"\u5f00\u591a\u8fdb\u7a0b\u4e0e\u591a\u7ebf\u7a0b\u7684\u533a\u522b"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/9_%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_9","text":"\u7ebf\u7a0b\u7684\u5f00\u542f\u901f\u5ea6\u5feb import time from multiprocessing import Process from threading import Thread def task ( x ): print ( \" %s is running.\" % x ) time . sleep ( 2 ) print ( \" %s is done.\" % x ) if __name__ == '__main__' : # t = Process(target=task, args=('\u5b50\u8fdb\u7a0b',)) # t.start() # -- \u5728\u53d1\u51fa\u4fe1\u53f7\u7684\u540c\u65f6,\u4e0d\u53ef\u80fd\u540c\u65f6\u5c06\u5b50\u8fdb\u7a0b\u9020\u51fa\u6765. # print(\"\u4e3b\") # -- \u9020\u8fdb\u7a0b\u7684\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b: \"\"\" \u4e3b \u5b50\u8fdb\u7a0b is running. \u5b50\u8fdb\u7a0b is done. \"\"\" t = Thread ( target = task , args = ( '\u5b50\u7ebf\u7a0b' ,)) t . start () # -- \u51e0\u4e4e\u5728\u4fe1\u53f7\u53d1\u51fa\u7684\u540c\u65f6\u7ebf\u7a0b\u7acb\u9a6c\u5c31\u9020\u51fa\u6765\u4e86!! print ( \"\u4e3b\" ) # -- \u9020\u7ebf\u7a0b\u7684\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b: \"\"\" \u5b50\u7ebf\u7a0b is running. \u4e3b \u5b50\u7ebf\u7a0b is done. \"\"\"","title":"\u5f00\u542f\u901f\u5ea6"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/9_%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_10","text":"\u540c\u4e00\u8fdb\u7a0b\u4e0b\u7684\u591a\u4e2a\u7ebf\u7a0b\u5171\u4eab\u8be5\u8fdb\u7a0b\u5185\u7684\u6570\u636e from threading import Thread x = 100 def task (): global x x = 0 if __name__ == '__main__' : t = Thread ( target = task ) print ( \"\u5f00\u7ebf\u7a0b\u4e4b\u524dx\u7684\u503c\u4e3a:\" , x ) t . start () t . join () # -- \u867d\u7136\u53d1\u4fe1\u53f7\u540c\u65f6,\u7ebf\u7a0b\u5c31\u9020\u51fa\u6765\u5566.\u4fdd\u9669\u8d77\u89c1,\u8fd9\u91cc\u8fd8\u662fjoin\u4e0b,\u8ba9\u4e3b\u7ebf\u7a0b\u7b49\u5b50\u7ebf\u7a0b\u8fd0\u884c\u5b8c. print ( \"\u5f00\u7ebf\u7a0b\u4e4b\u540ex\u7684\u503c\u4e3a:\" , x ) \"\"\" \u5f00\u7ebf\u7a0b\u4e4b\u524dx\u7684\u503c\u4e3a: 100 \u5f00\u7ebf\u7a0b\u4e4b\u540ex\u7684\u503c\u4e3a: 0 \"\"\" \u867d\u7136\u540c\u4e00\u8fdb\u7a0b\u4e0b\u7684\u591a\u4e2a\u7ebf\u7a0b\u6570\u636e\u5171\u4eab,\u4f46\u4ee5\u540e\u6211\u4eec\u662f\u5206\u5e03\u5f0f\u8fd0\u884c\u7a0b\u5e8f\u7684. \u90a3\u5c31\u610f\u5473\u7740\u6211\u4eec\u7684\u7ebf\u7a0b\u662f\u5206\u6563\u5230\u4e00\u53f0\u53f0\u673a\u5668\u4e0a\u7684,\u4e0d\u540c\u673a\u5668\u4e0a\u7684\u7ebf\u7a0b\u662f\u4e0d\u5171\u4eab\u6570\u636e\u7684.. \u6240\u4ee5,\u4ee5\u540e\u7ebf\u7a0b\u4e4b\u95f4\u7684\u901a\u4fe1\u6211\u4eec\u4e5f\u9700\u8981\u501f\u52a9\u4e00\u4e2a\u5957\u63a5\u5b57\u8f6f\u4ef6.. \u8be5\u5957\u63a5\u5b57\u8f6f\u4ef6\u5b9e\u73b0\u4e86\u7f51\u7edc\u7248\u672c\u7684\u961f\u5217\u529f\u80fd..(\u4e0d\u662f\u5355\u673a\u7248\u672c\u7684\u961f\u5217\u54e6),\u7ebf\u7a0b\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u578b\u7684.","title":"\u5171\u4eab\u6570\u636e"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/9_%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#pid","text":"\u5728\u4e3b\u8fdb\u7a0b\u4e0b\u5f00\u542f\u591a\u4e2a\u7ebf\u7a0b,\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u8ddf\u4e3b\u8fdb\u7a0b\u7684pid\u4e00\u6837 \u5f00\u591a\u4e2a\u8fdb\u7a0b,\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u4e0d\u540c\u7684pid import os from multiprocessing import Process from threading import Thread def task (): print ( os . getpid ()) if __name__ == '__main__' : # -- part1 t1 = Thread ( target = task ) t2 = Thread ( target = task ) t1 . start () t2 . start () print ( '\u4e3b\u7ebf\u7a0b/\u4e3b\u8fdb\u7a0bpid' , os . getpid ()) # -- part2 p1 = Process ( target = task ) p2 = Process ( target = task ) p1 . start () p2 . start () print ( '\u4e3b\u8fdb\u7a0bpid' , os . getpid ()) \"\"\" 28717 28717 \u4e3b\u7ebf\u7a0b/\u4e3b\u8fdb\u7a0bpid 28717 \u4e3b\u8fdb\u7a0bpid 28717 28719 28720 \"\"\"","title":"\u67e5\u770bPID"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/9_%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_11","text":"Thread\u7c7b\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684\u65b9\u6cd5: 1> is_alive() : \u67e5\u770b\u7ebf\u7a0b\u662f\u5426\u5b58\u6d3b 2> setName() : \u8bbe\u7f6e\u7ebf\u7a0b\u540d 3> join() : \u8ba9\u4e3b\u7ebf\u7a0b\u7b49\u7740\u5b50\u7ebf\u7a0b\u8fd0\u884c\u5b8c\u6bd5\u540e,\u4e3b\u7ebf\u7a0b\u518d\u5f80\u4e0b\u8d70 threading\u6a21\u5757\u63d0\u4f9b\u7684\u4e00\u4e9b\u65b9\u6cd5: 1> current_thread() : \u8fd4\u56de\u5f53\u524d\u7684\u7ebf\u7a0b\u53d8\u91cf 2> enumerate() : \u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u6b63\u5728\u8fd0\u884c\u7684/\u6d3b\u8dc3\u7684\u7ebf\u7a0b\u5bf9\u8c61\u7684list \u6b63\u5728\u8fd0\u884c\u6307\u7ebf\u7a0b\u542f\u52a8\u540e\u3001\u7ed3\u675f\u524d,\u4e0d\u5305\u62ec\u542f\u52a8\u524d\u548c\u7ec8\u6b62\u540e\u7684\u7ebf\u7a0b. 3> active_count() : \u8fd4\u56de\u6b63\u5728\u8fd0\u884c\u7684/\u6d3b\u8dc3\u7684\u7ebf\u7a0b\u6570\u91cf, \u4e0e len(threading.enumerate()) \u6709\u76f8\u540c\u7684\u7ed3\u679c. import time from threading import Thread , current_thread , enumerate , active_count def task (): time . sleep ( 2 ) print ( \"\u5728\u5b50\u7ebf\u7a0b\u91cc\u67e5\u770b\u81ea\u5df1\u7684\u7ebf\u7a0b\u540d:\" , current_thread () . name ) if __name__ == '__main__' : t = Thread ( target = task ) t . start () print ( enumerate ()) # -- \u8fde\u540c\u4e3b\u7ebf\u7a0b\u5728\u5185\u6709\u4e24\u4e2a\u8fd0\u884c\u7684\u7ebf\u7a0b t . join () print ( t . is_alive ()) print ( enumerate ()) print ( active_count ()) print ( \"\u5728\u4e3b\u7ebf\u7a0b\u91cc\u67e5\u770b\u81ea\u5df1\u7684\u7ebf\u7a0b\u540d:\" , current_thread () . name ) print ( \"\u5728\u4e3b\u7ebf\u7a0b\u91cc\u67e5\u770b\u5b50\u7ebf\u7a0b\u7684\u7ebf\u7a0b\u540d:\" , t . name ) # -- \u5f53\u7136\u53ef\u4ee5\u5728Thread\u91cc\u81ea\u5df1\u6307\u5b9a\u7ebf\u7a0b\u540d print ( \"\u4e3b\" ) \"\"\" [<_MainThread(MainThread, started 4556516864)>, <Thread(Thread-1, started 123145552031744)>] \u5728\u5b50\u7ebf\u7a0b\u91cc\u67e5\u770b\u81ea\u5df1\u7684\u7ebf\u7a0b\u540d: Thread-1 False [<_MainThread(MainThread, started 4556516864)>] 1 \u5728\u4e3b\u7ebf\u7a0b\u91cc\u67e5\u770b\u81ea\u5df1\u7684\u7ebf\u7a0b\u540d: MainThread \u5728\u4e3b\u7ebf\u7a0b\u91cc\u67e5\u770b\u5b50\u7ebf\u7a0b\u7684\u7ebf\u7a0b\u540d: Thread-1 \u4e3b \"\"\"","title":"\u7ebf\u7a0b\u5bf9\u8c61\u7684\u5176\u5b83\u65b9\u6cd5"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/9_%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_12","text":"\u65e0\u8bba\u662f\u8fdb\u7a0b\u8fd8\u662f\u7ebf\u7a0b, \u90fd\u9075\u5faa \"\u5b88\u62a4 \u8fdb\u7a0b/\u7ebf\u7a0b \u4f1a\u7b49\u5f85 \u4e3b\u8fdb\u7a0b/\u4e3b\u7ebf\u7a0b \u8fd0\u884c\u5b8c\u6bd5\u540e\u88ab\u9500\u6bc1\" \u9700\u8981\u7279\u522b\u5f3a\u8c03! \u8fd0\u884c\u5b8c\u6bd5\u5e76\u975e\u7ec8\u6b62\u8fd0\u884c!","title":"\u5b88\u62a4\u7ebf\u7a0b"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/9_%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_13","text":"1> \u4e3b\u8fdb\u7a0b \u5728\u5176\u4ee3\u7801\u7ed3\u675f\u540e\u5c31\u5df2\u7ecf\u7b97\u8fd0\u884c\u5b8c\u6bd5\u4e86 ( \u5b88\u62a4\u8fdb\u7a0b\u5728\u6b64\u65f6\u5c31\u88ab\u56de\u6536 ). \u7136\u540e\u4e3b\u8fdb\u7a0b\u4f1a\u4e00\u76f4\u7b49\u975e\u5b88\u62a4\u7684\u5b50\u8fdb\u7a0b\u90fd\u8fd0\u884c\u5b8c\u6bd5\u540e\u56de\u6536\u5b50\u8fdb\u7a0b\u7684\u8d44\u6e90 (\u5426\u5219\u4f1a\u4ea7\u751f\u50f5\u5c38\u8fdb\u7a0b) \u624d\u4f1a\u7ed3\u675f. 2> \u4e3b\u7ebf\u7a0b \u5728\u5176\u4ed6\u975e\u5b88\u62a4\u7ebf\u7a0b\u8fd0\u884c\u5b8c\u6bd5\u540e\u624d\u7b97\u8fd0\u884c\u5b8c\u6bd5 ( \u5b88\u62a4\u7ebf\u7a0b\u5728\u6b64\u65f6\u5c31\u88ab\u56de\u6536 ). \u56e0\u4e3a\u4e3b\u7ebf\u7a0b\u7684\u7ed3\u675f\u610f\u5473\u7740\u8fdb\u7a0b\u7684\u7ed3\u675f, \u8fdb\u7a0b\u6574\u4f53\u7684\u8d44\u6e90\u90fd\u5c06\u88ab\u56de\u6536, \u800c\u8fdb\u7a0b\u5fc5\u987b\u4fdd\u8bc1\u975e\u5b88\u62a4\u7ebf\u7a0b\u90fd\u8fd0\u884c\u5b8c\u6bd5\u540e\u624d\u80fd\u7ed3\u675f. import time from threading import Thread def task ( x ): print ( \" %s is running.\" % x ) time . sleep ( 2 ) print ( \" %s is done.\" % x ) \"\"\" \u5b88\u62a4\u7ebf\u7a0b\u4f1a\u5728\u672c\u8fdb\u7a0b\u5185\u6240\u6709\u975e\u5b88\u62a4\u7ebf\u7a0b\u90fd\u6b7b\u6389\u4e86\u624d\u8ddf\u7740\u6b7b.\u5373\u5b88\u62a4\u7ebf\u7a0b\u5b88\u62a4\u7684\u662f\u6574\u4e2a\u8fdb\u7a0b\u7684\u8fd0\u884c\u5468\u671f. -- \u5b88\u62a4\u7ebf\u7a0b\u5c31\u662f\u8f66\u95f4\u91cc\u7684\u76d1\u5de5,\u76d1\u5bdf\u8f66\u95f4\u91cc\u6240\u6709\u7684\u6d41\u6c34\u7ebf,\u6d41\u6c34\u7ebf\u90fd\u505c\u5de5\u4e86,\u5c31\u6ca1\u6709\u76d1\u5bdf\u7684\u5fc5\u8981\u4e86. -- \u5b88\u62a4\u8fdb\u7a0b\u5c31\u50cf\u662f\u4e2a\u592a\u76d1,\u5b88\u62a4\u7740\u7687\u4e0a,\u7687\u4e0a\u4e0d\u5e72\u6d3b\u4e86,\u592a\u76d1\u5c31\u53ef\u4ee5\u53bb\u6b7b\u4e86. \"\"\" if __name__ == '__main__' : t = Thread ( target = task , args = ( '\u5b88\u62a4\u7ebf\u7a0b' ,)) t . daemon = True t . start () # -- \u8fd0\u884c\u5230\u6b64\u5904,\u5b88\u62a4\u7ebf\u7a0b\u7acb\u9a6c\u5c31\u8d77\u6765\u4e86. print ( \"\u4e3b\" ) # -- \u8fd0\u884c\u5230\u6b64\u5904,\u6240\u6709\u7684\u975e\u5b88\u62a4\u7ebf\u7a0b\u90fd\u8fd0\u884c\u5b8c\u4e86. \"\"\" \u5b88\u62a4\u7ebf\u7a0b is running. \u4e3b \"\"\"","title":"\u6982\u5ff5"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/9_%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_14","text":"import time from threading import Thread def foo (): print ( 123 ) time . sleep ( 1 ) print ( \"end123\" ) def bar (): print ( 456 ) time . sleep ( 3 ) print ( \"end456\" ) t1 = Thread ( target = foo ) t2 = Thread ( target = bar ) t1 . daemon = True t1 . start () t2 . start () print ( \"main-------\" ) \"\"\" 123 456 main------- # -- \u4e3b\u7ebf\u7a0b\u7ed3\u675f\u4e86 end123 end456 # -- \u5b50\u7ebf\u7a0bt2\u7ed3\u675f\u4e86 \"\"\" \u6084\u6084\u544a\u8bc9\u4f60,\u82e5foo\u91cc\u77613\u79d2,bar\u91cc\u77611\u79d2, \"end123\" \u5c31\u6253\u5370\u4e0d\u51fa\u6765\u5566!!!","title":"\u8ff7\u60d1\u4eba\u7684\u4f8b\u5b50"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/9_%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_15","text":"\u5c06\u591a\u4e2a\u5e76\u53d1\u4efb\u52a1\u5bf9\u5171\u4eab\u6570\u636e\u7684\u4fee\u6539\u53d8\u6210\"\u4e32\u884c\",\u727a\u7272\u4e86\u6548\u7387,\u4fdd\u8bc1\u4e86\u6570\u636e\u7684\u5b89\u5168! \u8fd9\u91cc\u4e32\u884c\u52a0\u5f15\u53f7\u662f\u56e0\u4e3a\u4e0d\u662f\u4e25\u683c\u610f\u4e49\u4e0a\u7684\u4e32\u884c,\u4e0d\u662f\u6328\u7740\u4e00\u4e2a\u4e00\u4e2a\u6765\u7684,\u9700\u8981\u62a2,\u8c01\u62a2\u5230\u4e86\u8c01\u8fd0\u884c","title":"\u4e92\u65a5\u9501"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/9_%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_16","text":"\u7528\u5b9e\u9a8c\u8bc1\u660e\u7ebf\u7a0b\u4fee\u6539\u5171\u4eab\u6570\u636e\u662f\u4e0d\u5b89\u5168\u7684! \u4e0d\u52a0\u9501 -- \u5e76\u53d1\u6267\u884c,\u901f\u5ea6\u5feb,\u6570\u636e\u4e0d\u5b89\u5168. import time from threading import Thread x = 100 def task (): global x \"\"\" x -= 1 # -- \u8fd9\u6837\u5b9e\u9a8c,\u7ed3\u679c\u4e3a0,\u4f46\u5e76\u4e0d\u80fd\u8bc1\u660e\u7ebf\u7a0b\u4fee\u6539\u5171\u4eab\u6570\u636e\u5c31\u662f\u5b89\u5168\u7684!\u56e0\u4e3a\u7ebf\u7a0b\u542f\u52a8\u901f\u5ea6\u592a\u5feb! \"\"\" temp = x # -- 0.1s\u7684\u65f6\u95f4,\u5b8c\u6210100\u6b21for\u5faa\u73af\u8db3\u77e3,\u4fdd\u8bc1100\u4e2a\u7ebf\u7a0b\u90fd\u8d77\u6765\u5566,\u90fd\u62ff\u5230\u4e00\u4e2a\u503c\u4e3a100\u7684\u4e34\u65f6\u53d8\u91cftemp time . sleep ( 0.1 ) # -- \u7761\u9192\u540e,\u8fd9100\u4e2a\u7ebf\u7a0b\u90fd\u8fdb\u884c\u4e86`x = 100 - 1`\u7684\u8d4b\u503c\u64cd\u4f5c,\u786e\u5b9e\u4e5f\u662f\u51cf\u4e86100\u6b21 x = temp - 1 if __name__ == '__main__' : t_l = [] start = time . time () for _ in range ( 100 ): t = Thread ( target = task ) t_l . append ( t ) t . start () for t in t_l : # -- \u7528\u4e8e\u4fdd\u8bc1100\u4e2a\u7ebf\u7a0b\u8fd0\u884c\u5b8c\u6bd5 t . join () stop = time . time () print ( x , stop - start ) # -- 99 0.12547802925109863","title":"\u6a21\u62df\u5171\u4eab\u6570\u636e\u7684\u4fee\u6539"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/9_%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_17","text":"\u672a\u52a0\u9501\u90e8\u5206\u5e76\u53d1\u6267\u884c, \u52a0\u9501\u90e8\u5206\"\u4e32\u884c\"\u6267\u884c,\u901f\u5ea6\u6162,\u4f46\u6570\u636e\u5b89\u5168 \u6ce8\u610f\u54e6,\u82e5\u5728start\u4e4b\u540e\u7acb\u5373\u4f7f\u7528join,\u4f1a\u5c06100\u4e2a\u7ebf\u7a0b\u7684\u4efb\u52a1\"\u4e32\u884c\"\u6267\u884c,\u800c\u52a0\u9501\u53ea\u662f\u5c06\u4efb\u52a1\u4e2d \u6d89\u53ca\u5171\u4eab\u6570\u636e\u4fee\u6539\u7684\u90e8\u5206 \"\u4e32\u884c\"\u6267\u884c,\u76f8\u6bd4\u4e4b\u4e0b,\u660e\u663e\u52a0\u9501\u7684\u6548\u7387\u66f4\u9ad8! import time from threading import Thread , Lock # -- \u6ca1\u5fc5\u8981\u4f20\u7ed9\u6bcf\u4e00\u4e2a\u7ebf\u7a0b,\u56e0\u4e3a\u8fd9\u4e2a\u9501\u9020\u51fa\u6765\u540e,\u6240\u6709\u7ebf\u7a0b\u90fd\u80fd\u770b\u5230 # \u56e0\u4e3a\u540c\u4e00\u8fdb\u7a0b\u4e0b\u7684\u591a\u4e2a\u7ebf\u7a0b\u5171\u4eab\u8be5\u8fdb\u7a0b\u5185\u7684\u6570\u636e # \u56de\u987e\u4e0b,\u5728\u7236\u8fdb\u7a0b\u91cc\u9020\u7684\u9501,\u5b50\u8fdb\u7a0b\u770b\u4e0d\u5230,\u9700\u8981\u901a\u8fc7\u53c2\u6570\u4f20\u7ed9\u6bcf\u4e00\u4e2a\u5b50\u8fdb\u7a0b(\u9501\u53ea\u6709\u4e00\u628a) mutex = Lock () x = 100 def task (): # -- \u672a\u52a0\u9501\u7684\u4ee3\u7801\u5e76\u53d1\u8fd0\u884c global x \"\"\" with mutex: temp = x time.sleep(0.1) x = temp - 1 \"\"\" # -- \u52a0\u9501\u7684\u4ee3\u7801\"\u4e32\u884c\"\u8fd0\u884c mutex . acquire () temp = x # -- \u5728\u7b2c\u4e00\u4e2a\u7ebf\u7a0b(\u56e0\u4e3afor\u5faa\u73af,\u8d77\u7ebf\u7a0b\u7684\u901f\u5ea6\u4e5f\u5f88\u5feb,\u6240\u4ee5\u5fc5\u5b9a\u4e3a\u7b2c\u4e00\u4e2a\u7ebf\u7a0b)\u7684\u7761\u7720\u671f\u95f4 # \u5176\u4f5999\u4e2a\u7ebf\u7a0b\u5df2\u7ecf\u8d77\u6765\u5566,\u4e4b\u540e\u9501\u7684\u4e89\u62a2\u5c31\u8bf4\u4e0d\u51c6\u8c01\u62a2\u5230\u4e86 time . sleep ( 0.1 ) x = temp - 1 mutex . release () if __name__ == '__main__' : t_l = [] start = time . time () for _ in range ( 100 ): t = Thread ( target = task ) t_l . append ( t ) t . start () for t in t_l : t . join () stop = time . time () print ( x , stop - start ) # 0 10.318571090698242 -- 100*0.1=10 \u52a0\u9501\u90e8\u5206\u662f\"\u4e32\u884c\"\u6267\u884c\u7684 # 10\u79d2\u591a,\u591a\u7684\u8fd9\u70b9\u65f6\u95f4\u662f\u9020\u7ebf\u7a0b\u4ee5\u53ca\u5207\u6362\u7ebf\u7a0b\u7684\u65f6\u95f4","title":"\u52a0\u9501"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/9_%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_18","text":"\u8fdb\u7a0b\u548c\u7ebf\u7a0b\u90fd\u6709\u6b7b\u9501\u548c\u9012\u5f52\u9501\u54e6!","title":"\u6b7b\u9501\u73b0\u8c61\u4e0e\u9012\u5f52\u9501"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/9_%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_19","text":"\u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\u7684\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d, \u56e0\u4e89\u593a\u8d44\u6e90\u800c\u9020\u6210\u7684\u4e00\u79cd\u4e92\u76f8\u7b49\u5f85\u7684\u73b0\u8c61. \u82e5\u65e0\u5916\u529b\u4f5c\u7528, \u5b83\u4eec\u90fd\u5c06\u65e0\u6cd5\u7ee7\u7eed\u8fd0\u884c\u4e0b\u53bb. \u6b64\u65f6\u79f0\u7cfb\u7edf\u5904\u4e8e\u6b7b\u9501\u72b6\u6001\u6216\u7cfb\u7edf\u4ea7\u751f\u4e86\u6b7b\u9501,\u8fd9\u4e9b\u6c38\u8fdc\u5728\u4e92\u76f8\u7b49\u5f85\u7684\u8fdb\u7a0b\u79f0\u4e3a\u6b7b\u9501\u8fdb\u7a0b. import time from threading import Thread , Lock , active_count mutexA = Lock () mutexB = Lock () class Mythread ( Thread ): def run ( self ): self . f1 () self . f2 () def f1 ( self ): mutexA . acquire () print ( \"[ %s ]\u62ff\u5230A\u9501!\" % self . name ) mutexB . acquire () print ( \"[ %s ]\u62ff\u5230B\u9501!\" % self . name ) mutexB . release () mutexA . release () def f2 ( self ): mutexB . acquire () print ( \"[ %s ]\u62ff\u5230B\u9501!\" % self . name ) time . sleep ( 1 ) # -- [Thread-1]\u7ebf\u7a0b\u5728\u8fd9\u91cc\u7761\u4e00\u79d2,\u8db3\u591f\u5176\u5b83\u7ebf\u7a0b\u8d77\u6765\u5566! mutexA . acquire () print ( \"[ %s ]\u62ff\u5230A\u9501!\" % self . name ) mutexA . release () mutexB . release () if __name__ == '__main__' : for i in range ( 10 ): t = Mythread () t . start () print ( active_count ()) # 11 -- \u503c\u4e3a11,\u4ee3\u8868\u6240\u6709\u7ebf\u7a0b\u90fd\u5df2\u7ecf\u4ea7\u751f\u5566 \u5b9e\u9a8c\u7ed3\u679c: \u7ebf\u7a0b\u90fd\u5df2\u7ecf\u4ea7\u751f\u4e86,\u4f46\u7a0b\u5e8f\u5374\u963b\u585e\u4f4f\u4e86. \u7ebf\u7a0b\u542f\u52a8\u901f\u5ea6\u5f88\u5feb!\u7ebf\u7a0b1\u80af\u5b9a\u4f1a\u5148\u8d77\u6765.(for\u5faa\u73af\u7b2c\u4e00\u4e2a\u561b) [Thread-1]\u6267\u884cf1\u51fd\u6570\u4f53\u4ee3\u7801\u65f6,\u5f88\u60a0\u95f2\u7684\u62ff\u5230\u4e86A\u9501\u3001B\u9501\u3001\u91ca\u653eB\u9501\u3001\u91ca\u653eA\u9501 [Thread-1]\u63a5\u7740\u6267\u884cf2\u51fd\u6570\u4f53\u4ee3\u7801,\u5148\u62ff\u5230B\u9501,\u7761\u4e86\u4e00\u79d2 (\u7ebf\u7a0b1\u8d70\u5230\u8fd9\u4e00\u6b65\u7684\u8fc7\u7a0b\u4e2d\u6ca1\u6709\u4efb\u4f55\u7ade\u4e89\u8005). \u6ce8\u610f\u54e6,\u7761\u7684\u8fd9\u4e00\u79d2\u8db3\u591f\u5176\u5b83\u6240\u6709\u7684\u7ebf\u7a0b\u90fd\u8d77\u6765\u5566. \u5728\u7ebf\u7a0b1\u91ca\u653e\u6389A\u9501\u540e,[Thread-2]\u62a2\u5230\u4e86A\u9501,\u7ee7\u7eed\u6267\u884c,\u53d1\u73b0B\u9501\u8fd8\u5904\u4e8e\u88ab\u5360\u7528\u7684\u72b6\u6001. [Thread-1]\u7761\u5b8c\u540e,\u7ee7\u7eed\u6267\u884c,\u53d1\u73b0A\u9501\u88ab\u5360\u7528\u4e86. \u7ebf\u7a0b1\u3001\u7ebf\u7a0b2\u90fd\u7b49\u5f85\u7740\u5bf9\u65b9\u91ca\u653e\u9501. \u81ea\u5df1\u5728\u7f16\u7a0b\u8fc7\u7a0b\u4e2d\u52a0\u9501\u5c31\u6781\u6709\u53ef\u80fd\u5bfc\u81f4\u6b7b\u9501\u60c5\u51b5\u7684\u4ea7\u751f!","title":"\u6b7b\u9501\u73b0\u8c61"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/9_%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_20","text":"\u6b7b\u9501\u89e3\u51b3\u65b9\u6848: \u4f7f\u7528Rlock\u9012\u5f52\u9501 -- \u53ef\u4ee5\u8fde\u7eed\u7684acquire Ps: \u4e92\u65a5\u9501\u662f\u4e0d\u80fd\u8fde\u7eed\u7684acquire\u7684!! \u9012\u5f52\u9501 -- \u5728Python\u4e2d\u4e3a\u4e86\u652f\u6301\u5728\u540c\u4e00\u7ebf\u7a0b\u4e2d\u591a\u6b21\u8bf7\u6c42\u540c\u4e00\u8d44\u6e90,python\u63d0\u4f9b\u4e86\u53ef\u91cd\u5165\u9501RLock \u8fd9\u4e2aRLock\u5185\u90e8\u7ef4\u62a4\u7740\u4e00\u4e2aLock\u548c\u4e00\u4e2acounter\u53d8\u91cf, counter\u8bb0\u5f55\u4e86acquire\u7684\u6b21\u6570, \u4ece\u800c\u4f7f\u5f97\u8d44\u6e90\u53ef\u4ee5\u88ab\u591a\u6b21require. \u76f4\u5230\u4e00\u4e2a\u7ebf\u7a0b\u6240\u6709\u7684acquire\u90fd\u88abrelease, \u5176\u4ed6\u7684\u7ebf\u7a0b\u624d\u80fd\u83b7\u5f97\u8d44\u6e90! # -- \u53ea\u7528\u6539\u52a8\u51e0\u884c\u4ee3\u7801\u5373\u53ef import time from threading import Thread , active_count , RLock # mutexA = Lock() # mutexB = Lock() # -- \u4f7f\u7528\u9012\u5f52\u9501\u7684\u8bdd,\u8fd9\u91cc\u7684A\u9501\u4ee5\u53caB\u9501,\u5b9e\u9645\u4e0a\u90fd\u662f\u540c\u4e00\u628a\u9501 # \u7b80\u5199: mutexA = mutexB = RLock() obj = RLock () mutexA = obj mutexB = obj \"\"\" [Thread-1]\u62ff\u5230A\u9501! [Thread-1]\u62ff\u5230B\u9501! [Thread-2]\u62ff\u5230A\u9501! [Thread-2]\u62ff\u5230B\u9501! [Thread-1]\u62ff\u5230B\u9501! ... ... ... \u9996\u5148\u518d\u6b21\u660e\u786e\u9012\u5f52\u9501\u7684\u8ba1\u6570\u4e0d\u4e3a0\u7684\u8bdd,\u5176\u5b83\u7ebf\u7a0b\u53ea\u80fd\u539f\u5730\u7b49\u5f85.\u4e3a0\u7684\u65f6\u5019,\u5176\u5b83\u7ebf\u7a0b\u624d\u80fd\u62a2\u9501. \u5373\u4e00\u4e2a\u7ebf\u7a0b\u62ff\u5230\u9501,counter\u52a01,\u8be5\u7ebf\u7a0b\u5185\u53c8\u78b0\u5230\u52a0\u9501\u7684\u60c5\u51b5, \u5219counter\u7ee7\u7eed\u52a01, \u8fd9\u671f\u95f4\u6240\u6709\u5176\u4ed6\u7ebf\u7a0b\u90fd\u53ea\u80fd\u7b49\u5f85, \u7b49\u5f85\u8be5\u7ebf\u7a0b\u91ca\u653e\u6240\u6709\u9501, \u5373counter\u9012\u51cf\u52300\u4e3a\u6b62! \u6839\u636e\u8fd0\u884c\u7ed3\u679c\u5206\u6790\u4ee3\u7801\u6d41\u7a0b: \u7ebf\u7a0b1\u62ff\u5230\u9012\u5f52\u9501,\u8fd0\u884cf1\u7684\u4ee3\u7801,\u9501\u7684\u8ba1\u6570\u52a01\u3001\u518d\u52a01\u3001\u51cf1\u3001\u518d\u51cf1. \u6b64\u65f6\u9012\u5f52\u9501\u7684\u8ba1\u6570\u4e3a0.\u6240\u6709\u7ebf\u7a0b(\u5305\u62ec\u7ebf\u7a0b1)\u91cd\u65b0\u5f00\u59cb\u62a2\u9501! \u7ebf\u7a0b2\u62a2\u5230\u4e86,\u7ebf\u7a0b2\u5f00\u59cb\u8fd0\u884cf1\u7684\u4ee3\u7801. \u4ec5\u7ba1\u7ebf\u7a0b1\u60f3\u7ee7\u7eed\u8fd0\u884cf2\u7684\u4ee3\u7801,\u4f46\u5948\u4f55\u6ca1\u6709\u62a2\u5230\u9501,\u4e5f\u5c31\u53ea\u597d\u539f\u5730\u7b49\u5f85.","title":"\u9012\u5f52\u9501"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/9_%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_21","text":"\u8fdb\u7a0b\u548c\u7ebf\u7a0b\u90fd\u6709\u4fe1\u53f7\u91cf! \u4fe1\u53f7\u91cf\u63a7\u5236\u540c\u4e00\u65f6\u523b\u5e76\u53d1\u6267\u884c\u7684\u4efb\u52a1\u6570 \u4fe1\u53f7\u91cfSemaphore\u7ba1\u7406\u4e00\u4e2a\u5185\u7f6e\u7684\u8ba1\u6570\u5668 \u6bcf\u5f53\u8c03\u7528acquire()\u65f6\u5185\u7f6e\u8ba1\u6570\u5668-1,\u8c03\u7528release() \u65f6\u5185\u7f6e\u8ba1\u6570\u5668+1. \u8ba1\u6570\u5668\u4e0d\u80fd\u5c0f\u4e8e0! \u5f53\u8ba1\u6570\u5668\u4e3a0\u65f6, acquire()\u5c06\u963b\u585e\u7ebf\u7a0b\u76f4\u5230\u5176\u4ed6\u7ebf\u7a0b\u8c03\u7528release(). # -- import random import time from threading import Thread , Semaphore , current_thread sm = Semaphore ( 5 ) # -- \u4fe1\u53f7\u91cf\u4e3a5,\u540c\u4e00\u65f6\u95f4\u6700\u5927\u6d3b\u8dc3\u7684\u53ea\u67095\u4e2a # \u540c\u65f6\u53ea\u67095\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u83b7\u5f97semaphore,\u5373\u53ef\u4ee5\u9650\u5236\u6700\u5927\u8fde\u63a5\u6570\u4e3a5 # Ps:\u4e92\u65a5\u9501\u540c\u4e00\u65f6\u95f4\u8fd0\u884c\u7684\u53ea\u67091\u4e2a def task (): sm . acquire () print ( \"[ %s ]\u6b63\u5728\u4e0a\u5395\u6240!\" % current_thread () . name ) time . sleep ( random . randint ( 1 , 4 )) # -- \u6a21\u62df\u6bcf\u4e2a\u4eba\u4e0a\u5395\u6240\u7684\u65f6\u95f4 sm . release () if __name__ == '__main__' : for i in range ( 20 ): t = Thread ( target = task ) t . start () \"\"\" \u4e0a\u6765\u5c31\u67095\u4e2a\u4eba\u62a2\u5230\u9501\u4e86,\u5176\u4f59\u4eba\u7b49\u7740,\u9664\u975e\u6709\u4eba\u91ca\u653e\u6389,\u5176\u4ed6\u4eba\u5c31\u53ef\u4ee5\u62a2\u91ca\u653e\u7684\u9501\u4e86. \u4e0d\u9700\u89815\u4e2a\u4eba\u90fd\u91ca\u653e\u9501\u540e\u624d\u80fd\u62a2\u9501,\u6709\u4eba\u91ca\u653e\u4e86\u9501\u5c31\u53ef\u4ee5\u62a2.. \"\"\" \u4fe1\u53f7\u91cf \u5c31\u8ddf \u516c\u5171\u5395\u6240 \u4e00\u6837. \u6709\u591a\u4e2a\u5751\u53ef\u4ee5\u540c\u65f6\u670d\u52a1\u591a\u4e2a\u4eba. \u4e92\u65a5\u9501 \u5c31\u8ddf \u72ec\u7acb\u536b\u751f\u95f4 \u4e00\u6837. \u540c\u4e00\u65f6\u95f4\u53ea\u80fd\u6709\u4e00\u4e2a\u4eba. \u63d0\u4e00\u5634, \u4fe1\u53f7\u91cf\u4e0e\u8fdb\u7a0b\u6c60\u662f\u5b8c\u5168\u4e0d\u540c\u7684\u6982\u5ff5, \u8fdb\u7a0b\u6c60Pool(4), \u6700\u5927\u53ea\u80fd\u4ea7\u751f4\u4e2a\u8fdb\u7a0b, \u800c\u4e14\u4ece\u5934\u5230\u5c3e\u90fd\u53ea\u662f\u8fd9\u56db\u4e2a\u8fdb\u7a0b, \u4e0d\u4f1a\u4ea7\u751f\u65b0\u7684, \u800c\u4fe1\u53f7\u91cf\u662f\u4ea7\u751f\u4e00\u5806\u7ebf\u7a0b/\u8fdb\u7a0b...","title":"\u4fe1\u53f7\u91cf"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/9_%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_22","text":"\u5b9a\u65f6\u5668, \u6307\u5b9an\u79d2\u540e\u6267\u884c\u67d0\u64cd\u4f5c from threading import Timer , current_thread def task ( x ): print ( \" %s running.\" % x ) print ( current_thread () . name ) # -- \u662f\u4e00\u4e2a\u7ebf\u7a0b\uff01 if __name__ == '__main__' : # -- \u65f6\u95f4\u95f4\u9694\u3001\u4efb\u52a1\u3001\u4efb\u52a1\u7684\u53c2\u6570 t = Timer ( 3 , task , args = ( 10 ,)) # -- 3\u79d2\u540e\u8fd0\u884c\u4e00\u6b21 t . start () print ( \"\u4e3b\" ) \"\"\" \u4e3b 10 running. Thread-1 \"\"\"","title":"\u5b9a\u65f6\u5668"},{"location":"4_%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/9_%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#queue","text":"import queue , \u7528\u6cd5\u4e0e\u8fdb\u7a0bQueue\u4e00\u6837 import queue # -- \u2605 \u961f\u5217: \u5148\u8fdb\u5148\u51fa q = queue . Queue ( 3 ) q . put ( 1 ) q . put ( 2 ) q . put ( 3 ) print ( q . get ()) print ( q . get ()) print ( q . get ()) # -- \u2605 \u5806\u6808: last in first out \u5148\u8fdb\u540e\u51fa q = queue . LifoQueue () q . put ( 1 ) q . put ( 2 ) q . put ( 3 ) print ( q . get ()) print ( q . get ()) print ( q . get ()) # -- \u2605 \u4f18\u5148\u7ea7\u961f\u5217: \u6570\u5b57\u8d8a\u5c0f,\u4f18\u5148\u7ea7\u8d8a\u9ad8 \u4f18\u5148\u7ea7\u9ad8\u7684\u5148\u51fa\u961f q = queue . PriorityQueue () q . put (( 3 , 'data1' )) # -- \u653e\u5143\u7956\u548c\u5217\u8868\u7686\u53ef,\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u4f18\u5148\u7ea7,\u7b2c\u4e8c\u4e2a\u5143\u7d20\u662f\u6570\u636e q . put (( - 10 , 'data2' )) q . put (( 11 , 'data3' )) print ( q . get ()) print ( q . get ()) print ( q . get ()) \"\"\" 1 2 3 3 2 1 (-10, 'data2') (3, 'data1') (11, 'data3') \"\"\"","title":"\u7ebf\u7a0bqueue"}]}